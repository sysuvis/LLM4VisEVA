Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Enrollment Number and Revenue, and a Bar Chart on the right that displays Education Level versus Enrollment Number.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>ECharts Example</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart1"" style=""width: 600px; height: 400px; float: left;""></div>
    <div id=""chart2"" style=""width: 600px; height: 400px; float: right;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chart1Data = [];
                const chart2Data = {};
                csvData.forEach(row => {
                    const columns = row.split(',');
                    const enrollmentNumber = parseFloat(columns[2]);
                    const revenue = parseFloat(columns[3]);
                    const educationLevel = columns[1];
                    chart1Data.push([enrollmentNumber, revenue]);
                    if (!chart2Data[educationLevel]) {
                        chart2Data[educationLevel] = 0;
                    }
                    chart2Data[educationLevel] += enrollmentNumber;
                });
                const chart1 = echarts.init(document.getElementById('chart1'));
                chart1.setOption({
                    title: {
                        text: 'Enrollment Number vs Revenue'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    xAxis: {
                        type: 'value'
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        type: 'scatter',
                        data: chart1Data
                    }]
                });
                const chart2 = echarts.init(document.getElementById('chart2'));
                chart2.setOption({
                    title: {
                        text: 'Education Level vs Enrollment Number'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    xAxis: {
                        type: 'category',
                        data: Object.keys(chart2Data)
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        type: 'bar',
                        data: Object.values(chart2Data)
                    }]
                });
            });
    </script>
</body>
</html>
```"
2,scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Enrollment Number and Revenue, and a Bar Chart on the right that displays Education Level versus Enrollment Number. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>ECharts Demo</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <style>
        #chart-container {
            display: flex;
            width: 100%;
            height: 600px;
        }
        #scatter-plot {
            width: 50%;
            height: 100%;
        }
        #bar-chart {
            width: 50%;
            height: 100%;
        }
    </style>
</head>
<body>
    <div id=""chart-container"">
        <div id=""scatter-plot""></div>
        <div id=""bar-chart""></div>
    </div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const scatterData = csvData.map(row => [+row[2], +row[3]]);
                const barData = {};
                csvData.forEach(row => {
                    if (!barData[row[1]]) {
                        barData[row[1]] = 0;
                    }
                    barData[row[1]] += +row[2];
                });
                const barXAxis = Object.keys(barData);
                const barSeries = Object.values(barData);

                const scatterChart = echarts.init(document.getElementById('scatter-plot'));
                const barChart = echarts.init(document.getElementById('bar-chart'));

                const option = {
                    scatterPlot: {
                        title: {
                            text: 'Enrollment Number vs Revenue'
                        },
                        tooltip: {
                            trigger: 'axis',
                            axisPointer: {
                                type: 'cross'
                            }
                        },
                        xAxis: {
                            type: 'value',
                            name: 'Enrollment Number'
                        },
                        yAxis: {
                            type: 'value',
                            name: 'Revenue'
                        },
                        series: [
                            {
                                data: scatterData,
                                type: 'scatter',
                                symbolSize: 10,
                                itemStyle: {
                                    opacity: 0.8
                                },
                                emphasis: {
                                    focus: 'series'
                                }
                            }
                        ],
                        brush: {
                            xAxisIndex: 'all',
                            brushLink: 'all',
                            outOfBrush: {
                                colorAlpha: 0.1
                            }
                        }
                    },
                    barChart: {
                        title: {
                            text: 'Education Level vs Enrollment Number'
                        },
                        tooltip: {
                            trigger: 'axis',
                            axisPointer: {
                                type: 'shadow'
                            }
                        },
                        xAxis: {
                            type: 'category',
                            data: barXAxis
                        },
                        yAxis: {
                            type: 'value',
                            name: 'Enrollment Number'
                        },
                        series: [
                            {
                                data: barSeries,
                                type: 'bar',
                                emphasis: {
                                    focus: 'series'
                                }
                            }
                        ]
                    }
                };

                scatterChart.setOption(option.scatterPlot);
                barChart.setOption(option.barChart);

                scatterChart.on('brushSelected', params => {
                    const selectedData = params.batch[0].areas[0].dataIndex;
                    const selectedEducationLevels = csvData.filter((row, index) => selectedData.includes(index)).map(row => row[1]);
                    const barSeriesData = barXAxis.map(level => selectedEducationLevels.includes(level) ? barData[level] : NaN);
                    barChart.setOption({
                        series: [
                            {
                                data: barSeriesData
                            }
                        ]
                    });
                });
            });
    </script>
</body>
</html>
```"
3,line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Enrollment Number , while the pie chart represents the distribution of Revenue.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>ECharts Example</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const enrollmentData = csvData.map(item => item.split(','));
                const quarters = enrollmentData.map(item => item[0]);
                const enrollmentNumbers = enrollmentData.map(item => parseInt(item[2]));
                const revenues = enrollmentData.map(item => parseInt(item[3]));

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    grid: [
                        {
                            top: '10%',
                            left: '10%',
                            right: '10%',
                            height: '40%'
                        },
                        {
                            top: '60%',
                            left: '10%',
                            right: '10%',
                            height: '30%'
                        }
                    ],
                    xAxis: [
                        {
                            type: 'category',
                            data: quarters,
                            gridIndex: 0
                        },
                        {
                            type: 'category',
                            data: ['Revenue'],
                            gridIndex: 1
                        }
                    ],
                    yAxis: [
                        {
                            type: 'value',
                            gridIndex: 0
                        },
                        {
                            type: 'value',
                            gridIndex: 1
                        }
                    ],
                    series: [
                        {
                            name: 'Enrollment Number',
                            type: 'line',
                            data: enrollmentNumbers,
                            xAxisIndex: 0,
                            yAxisIndex: 0
                        },
                        {
                            name: 'Revenue',
                            type: 'pie',
                            data: revenues.map((item, index) => ({ value: item, name: quarters[index] })),
                            radius: '60%',
                            center: ['50%', '50%'],
                            gridIndex: 1
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```"
4,line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Enrollment Number , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>ECharts Demo</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <style>
        #chart-container {
            width: 800px;
            height: 600px;
            border: 1px solid #ccc;
            padding: 20px;
        }
        #line-chart {
            width: 100%;
            height: 60%;
        }
        #pie-chart {
            width: 100%;
            height: 40%;
        }
    </style>
</head>
<body>
    <div id=""chart-container"">
        <div id=""line-chart""></div>
        <div id=""pie-chart""></div>
    </div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const lineChartData = csvData.map(row => [row[0], parseInt(row[2])]);
                const pieChartData = csvData.reduce((acc, row) => {
                    acc[row[1]] = (acc[row[1]] || 0) + parseInt(row[3]);
                    return acc;
                }, {});

                const lineChart = echarts.init(document.getElementById('line-chart'));
                const pieChart = echarts.init(document.getElementById('pie-chart'));

                lineChart.setOption({
                    title: {
                        text: 'Enrollment Number Trend'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    xAxis: {
                        type: 'category',
                        data: lineChartData.map(row => row[0])
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            type: 'line',
                            data: lineChartData.map(row => row[1]),
                            emphasis: {
                                focus: 'series'
                            }
                        }
                    ],
                    brush: {
                        id: 'brush',
                        seriesIndex: 0,
                        brushLink: 'pie-chart',
                        throttleType: 'debounce',
                        throttleDelay: 100
                    }
                });

                pieChart.setOption({
                    title: {
                        text: 'Revenue Distribution'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    series: [
                        {
                            type: 'pie',
                            id: 'pie',
                            data: Object.keys(pieChartData).map(key => ({ name: key, value: pieChartData[key] })),
                            emphasis: {
                                focus: 'data'
                            }
                        }
                    ]
                });

                lineChart.on('brushSelected', params => {
                    const selectedData = params.selected[0];
                    const startIndex = selectedData[0];
                    const endIndex = selectedData[1];
                    const selectedPieData = csvData.slice(startIndex, endIndex + 1).reduce((acc, row) => {
                        acc[row[1]] = (acc[row[1]] || 0) + parseInt(row[3]);
                        return acc;
                    }, {});

                    pieChart.setOption({
                        series: [
                            {
                                type: 'pie',
                                id: 'pie',
                                data: Object.keys(selectedPieData).map(key => ({ name: key, value: selectedPieData[key] })),
                                emphasis: {
                                    focus: 'data'
                                }
                            }
                        ]
                    });
                });
            });
    </script>
</body>
</html>
```"
5,scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Enrollment Number, Revenue, and Profit. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-stat@1.2.0/dist/ecStat.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/d3@7.4.4/dist/d3.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = d3.csvParse(data);
                const dimensions = ['Enrollment Number', 'Revenue', 'Profit'];
                const matrixData = [];
                dimensions.forEach((dimension1, index1) => {
                    dimensions.forEach((dimension2, index2) => {
                        const seriesData = csvData.map(row => [+row[dimension1], +row[dimension2]]);
                        matrixData.push({
                            name: `${dimension1} vs ${dimension2}`,
                            data: seriesData,
                            type: 'scatter',
                            symbolSize: 10,
                            animation: false,
                            tooltip: {
                                trigger: 'item'
                            }
                        });
                    });
                });
                const option = {
                    tooltip: {
                        trigger: 'item'
                    },
                    grid: [
                        { left: '10%', top: '10%', width: '40%', height: '40%' },
                        { left: '55%', top: '10%', width: '40%', height: '40%' },
                        { left: '10%', top: '55%', width: '40%', height: '40%' },
                        { left: '55%', top: '55%', width: '40%', height: '40%' },
                        { left: '10%', top: '10%', width: '40%', height: '40%' },
                        { left: '55%', top: '10%', width: '40%', height: '40%' },
                        { left: '10%', top: '55%', width: '40%', height: '40%' },
                        { left: '55%', top: '55%', width: '40%', height: '40%' },
                        { left: '10%', top: '10%', width: '40%', height: '40%' }
                    ],
                    xAxis: [
                        { gridIndex: 0, name: 'Enrollment Number' },
                        { gridIndex: 1, name: 'Enrollment Number' },
                        { gridIndex: 2, name: 'Revenue' },
                        { gridIndex: 3, name: 'Revenue' },
                        { gridIndex: 4, name: 'Profit' },
                        { gridIndex: 5, name: 'Profit' },
                        { gridIndex: 6, name: 'Enrollment Number' },
                        { gridIndex: 7, name: 'Revenue' },
                        { gridIndex: 8, name: 'Profit' }
                    ],
                    yAxis: [
                        { gridIndex: 0, name: 'Revenue' },
                        { gridIndex: 1, name: 'Profit' },
                        { gridIndex: 2, name: 'Profit' },
                        { gridIndex: 3, name: 'Enrollment Number' },
                        { gridIndex: 4, name: 'Enrollment Number' },
                        { gridIndex: 5, name: 'Revenue' },
                        { gridIndex: 6, name: 'Profit' },
                        { gridIndex: 7, name: 'Enrollment Number' },
                        { gridIndex: 8, name: 'Revenue' }
                    ],
                    series: matrixData,
                    brush: {
                        xAxisIndex: 'all',
                        yAxisIndex: 'all',
                        brushLink: 'all',
                        brushType: 'rect',
                        toolbox: ['rect', 'keep', 'clear'],
                        throttleType: 'debounce',
                        throttleDelay: 300
                    }
                };
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```"
6,scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a brushable Scatterplot that visualizes the relationship between Enrollment Number and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Brushable Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <div id=""table"" style=""width: 200px; height: 600px; overflow-y: auto; border: 1px solid #ccc; padding: 10px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const chartData = csvData.map(row => [+row[2], +row[3]]);

                const chart = echarts.init(document.getElementById('chart'));
                const table = document.getElementById('table');

                chart.setOption({
                    tooltip: {
                        trigger: 'item'
                    },
                    xAxis: {
                        type: 'value'
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: chartData,
                            symbolSize: 10,
                            itemStyle: {
                                opacity: 0.8
                            },
                            emphasis: {
                                itemStyle: {
                                    opacity: 1
                                }
                            }
                        }
                    ],
                    dataZoom: [
                        {
                            type: 'inside',
                            id: 'dataZoomX',
                            xAxisIndex: [0],
                            filterMode: 'empty',
                            startValue: 0,
                            endValue: 10000
                        },
                        {
                            type: 'inside',
                            id: 'dataZoomY',
                            yAxisIndex: [0],
                            filterMode: 'empty',
                            startValue: 0,
                            endValue: 1000000
                        }
                    ],
                    brush: {
                        id: 'brush',
                        brushLink: 'all',
                        xAxisIndex: 'all',
                        yAxisIndex: 'all',
                        brushType: 'rect',
                        transformable: false,
                        brushStyle: {
                            borderWidth: 2,
                            color: 'rgba(120,140,180,0.3)',
                            borderColor: 'rgba(120,140,180,0.8)'
                        },
                        throttleType: 'debounce',
                        throttleDelay: 300
                    }
                });

                chart.on('brushSelected', params => {
                    const selectedData = params.batch[0].areas[0].data;
                    const tableHtml = selectedData.slice(0, 20).map((data, index) => {
                        const row = csvData.find(row => +row[2] === data[0] && +row[3] === data[1]);
                        return `
                            <tr>
                                <td>${index + 1}</td>
                                <td>${row[0]}</td>
                                <td>${row[1]}</td>
                                <td>${row[2]}</td>
                                <td>${row[3]}</td>
                                <td>${row[4]}</td>
                                <td>${row[5]}</td>
                                <td>${row[6]}</td>
                                <td>${row[7]}</td>
                            </tr>
                        `;
                    }).join('');
                    table.innerHTML = `
                        <table>
                            <tr>
                                <th>No.</th>
                                <th>Quarter</th>
                                <th>Education Level</th>
                                <th>Enrollment Number</th>
                                <th>Revenue</th>
                                <th>Operating Costs</th>
                                <th>Profit</th>
                                <th>Average Tuition</th>
                                <th>Number of Staff</th>
                                <th>Graduation Rate</th>
                            </tr>
                            ${tableHtml}
                        </table>
                    `;
                });
            });
    </script>
</body>
</html>
```"
7,bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a horizontal Bar Chart that shows all the data concerning Enrollment Number, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>ECharts Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const enrollmentData = csvData.map(item => item.split(','));
                const quarters = enrollmentData.map(item => item[0]);
                const enrollmentNumbers = enrollmentData.map(item => parseInt(item[2]));

                var chartDom = document.getElementById('main');
                var myChart = echarts.init(chartDom);
                var option;

                option = {
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: { type: 'shadow' }
                    },
                    grid: [
                        {
                            left: '10%',
                            right: '20%',
                            top: '10%',
                            bottom: '10%'
                        },
                        {
                            left: '60%',
                            right: '10%',
                            top:'50%',
                            width:'30%'
                        }
                    ],
                    xAxis:[
                        {type:'value',gridIndex : 0},
                        {type:'value',gridIndex : 1}
                    ],
                    yAxis:[
                        {type:'category',data : quarters,gridIndex : 0},
                        {type:'category',data : [],show:false,gridIndex : 1}
                    ],
                    series:[
                       {
                           name:'',
                           type:'bar',
                           data=enrollmentNumbers,
                           label:{show:true},
                           xAxisIndex : 0,
                           yAxisIndex : 0
                       },
                       {
                          name:'',
                          type:'bar',
                          data:[],
                          label:{show:true},
                          xAxisIndex : 1,
                          yAxisIndex : 1
                       }
                   ]
               };

               myChart.setOption(option);

               // minimap
               let minimapOption;
               minimapOption={
                   tooltip:{
                      trigger :'axis'
                   },
                   grid:{
                      left :'15%',right :'15%',top :'20%',bottom :'20%'
                   },
                   xAxis:{
                      show:false,type :'value'
                  },
                  yAxis:{
                     show:false,type :'category',data:[]
                 },
                 series:[
                     {
                         name:'',
                         type:""bar"",
                         barWidth:""100%"",
                         roam:true,scaleLimit:{min:""100%"",max:""200%""},
                         label:{show:true},emphasis:{label:{show:true}},
                         data:[],
                     }
                 ]
              };
              let miniMapChart=echarts.init(document.getElementById(""minimap""));
              miniMapChart.setOption(minimapOption);

              // update minimap with main chart's data
              for(let i=0;i<enrollmentNumbers.length;i++){
                  minimapOption.series[0].data.push(enrollmentNumbers[i]);
                  if(i>=quarters.length-11){
                      minimapOption.yAxis.data.push(quarters[i]);
                  }else{
                      minimapOption.yAxis.data.push("""");
                  }
              }

             miniMapChart.setOption(minimapOption);
        });
    </script>

     <!-- Add a div to display the mini map -->
     <div id='minimap' style='width:300px;height;200px;'></div>

</body>
</html>

```"
