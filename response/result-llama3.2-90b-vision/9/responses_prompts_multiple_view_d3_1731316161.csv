Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Adoption Rate and Investment, and a Bar Chart on the right that displays Technology Type versus Adoption Rate.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Technology Adoption Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: inline-block;
      vertical-align: top;
    }
    .scatterplot {
      width: 400px;
      height: 400px;
      margin: 20px;
    }
    .barchart {
      width: 400px;
      height: 400px;
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart scatterplot"" id=""scatterplot""></div>
  <div class=""chart barchart"" id=""barchart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 400 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const svgScatterplot = d3.select(""#scatterplot"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const svgBarchart = d3.select(""#barchart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70e9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
      data.forEach(d => {
        d[""Adoption Rate""] = +d[""Adoption Rate""];
        d.Investment = +d.Investment;
      });

      const xScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Adoption Rate""])])
        .range([0, width]);

      const yScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.Investment)])
        .range([height, 0]);

      svgScatterplot.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScaleScatterplot(d[""Adoption Rate""]))
        .attr(""cy"", d => yScaleScatterplot(d.Investment))
        .attr(""r"", 5);

      svgScatterplot.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleScatterplot));

      svgScatterplot.append(""g"")
        .call(d3.axisLeft(yScaleScatterplot));

      const technologyTypes = [...new Set(data.map(d => d[""Technology Type""]))];

      const xScaleBarchart = d3.scaleBand()
        .domain(technologyTypes)
        .range([0, width])
        .padding(0.2);

      const yScaleBarchart = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Adoption Rate""])])
        .range([height, 0]);

      svgBarchart.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", d => xScaleBarchart(d[""Technology Type""]))
        .attr(""y"", d => yScaleBarchart(d[""Adoption Rate""]))
        .attr(""width"", xScaleBarchart.bandwidth())
        .attr(""height"", d => height - yScaleBarchart(d[""Adoption Rate""]));

      svgBarchart.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleBarchart));

      svgBarchart.append(""g"")
        .call(d3.axisLeft(yScaleBarchart));
    });
  </script>
</body>
</html>
```"
2,scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Adoption Rate and Investment, and a Bar Chart on the right that displays Technology Type versus Adoption Rate. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Technology Adoption Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: inline-block;
      vertical-align: top;
    }
    .scatterplot {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
    .barchart {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart scatterplot"" id=""scatterplot""></div>
  <div class=""chart barchart"" id=""barchart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const xScaleScatter = d3.scaleLinear().range([0, width]);
    const yScaleScatter = d3.scaleLinear().range([height, 0]);
    const xScaleBar = d3.scaleBand().range([0, width]).padding(0.2);
    const yScaleBar = d3.scaleLinear().range([height, 0]);

    const svgScatter = d3.select(""#scatterplot"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const svgBar = d3.select(""#barchart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
      data.forEach(d => {
        d[""Adoption Rate""] = +d[""Adoption Rate""];
        d.Investment = +d.Investment;
      });

      const adoptionRateDomain = d3.extent(data, d => d[""Adoption Rate""]);
      const investmentDomain = d3.extent(data, d => d.Investment);
      const technologyTypes = Array.from(new Set(data.map(d => d[""Technology Type""])));

      xScaleScatter.domain(adoptionRateDomain);
      yScaleScatter.domain(investmentDomain);
      xScaleBar.domain(technologyTypes);
      yScaleBar.domain([0, d3.max(data, d => d[""Adoption Rate""])]);

      svgScatter.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleScatter));

      svgScatter.append(""g"")
        .call(d3.axisLeft(yScaleScatter));

      svgBar.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleBar));

      svgBar.append(""g"")
        .call(d3.axisLeft(yScaleBar));

      const brush = d3.brush()
        .extent([[0, 0], [width, height]])
        .on(""brush"", brushed);

      svgScatter.append(""g"")
        .attr(""class"", ""brush"")
        .call(brush);

      const scatterplotCircles = svgScatter.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScaleScatter(d[""Adoption Rate""]))
        .attr(""cy"", d => yScaleScatter(d.Investment))
        .attr(""r"", 5);

      const barRects = svgBar.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", d => xScaleBar(d[""Technology Type""]))
        .attr(""y"", d => yScaleBar(d[""Adoption Rate""]))
        .attr(""width"", xScaleBar.bandwidth())
        .attr(""height"", d => height - yScaleBar(d[""Adoption Rate""]));

      function brushed(event) {
        const selection = event.selection;
        if (selection) {
          const [x0, y0, x1, y1] = selection;
          scatterplotCircles.classed(""selected"", d => {
            const x = xScaleScatter(d[""Adoption Rate""]);
            const y = yScaleScatter(d.Investment);
            return x >= x0 && x <= x1 && y >= y0 && y <= y1;
          });
          barRects.classed(""selected"", d => {
            const x = xScaleScatter(d[""Adoption Rate""]);
            const y = yScaleScatter(d.Investment);
            return x >= x0 && x <= x1 && y >= y0 && y <= y1;
          });
        } else {
          scatterplotCircles.classed(""selected"", false);
          barRects.classed(""selected"", false);
        }
      }
    });
  </script>
</body>
</html>
```"
3,line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Adoption Rate , while the pie chart represents the distribution of Investment.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Technology Adoption Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: block;
    }
    .line-chart {
      width: 800px;
      height: 400px;
      margin: 20px auto;
    }
    .pie-chart {
      width: 800px;
      height: 400px;
      margin: 20px auto;
    }
  </style>
</head>
<body>
  <div class=""chart line-chart""></div>
  <div class=""chart pie-chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const lineChart = d3.select('.line-chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    const pieChart = d3.select('.pie-chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${width / 2 + margin.left}, ${height / 2 + margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/8729038f70e9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
      .then(data => {
        data.forEach(d => {
          d['Year'] = +d['Year'];
          d['Adoption Rate'] = +d['Adoption Rate'];
          d['Investment'] = +d['Investment'];
        });

        const xScale = d3.scaleLinear()
          .domain(d3.extent(data, d => d['Year']))
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Adoption Rate'])])
          .range([height, 0]);

        lineChart.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        lineChart.append('g')
          .call(d3.axisLeft(yScale));

        lineChart.append('path')
          .datum(data)
          .attr('fill', 'none')
          .attr('stroke', 'steelblue')
          .attr('stroke-width', 1.5)
          .attr('d', d3.line()
            .x(d => xScale(d['Year']))
            .y(d => yScale(d['Adoption Rate'])));

        const pie = d3.pie()
          .value(d => d['Investment']);

        const arc = d3.arc()
          .outerRadius(width / 2 - 20)
          .innerRadius(0);

        const arcs = pieChart.selectAll('arc')
          .data(pie(data))
          .enter()
          .append('path')
          .attr('d', arc)
          .attr('fill', (d, i) => d3.schemeCategory10[i]);
      });
  </script>
</body>
</html>
```"
4,line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Adoption Rate , while the pie chart represents the distribution of Investment. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Investment for the selected group.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Technology Adoption Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: block;
    }
    .line-chart {
      width: 800px;
      height: 400px;
      margin: 20px auto;
    }
    .pie-chart {
      width: 800px;
      height: 400px;
      margin: 20px auto;
    }
  </style>
</head>
<body>
  <div class=""chart line-chart""></div>
  <div class=""chart pie-chart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const lineChart = d3.select('.line-chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    const pieChart = d3.select('.pie-chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left + width / 2}, ${margin.top + height / 2})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
      .then(data => {
        data.forEach(d => {
          d['Year'] = +d['Year'];
          d['Adoption Rate'] = +d['Adoption Rate'];
          d['Investment'] = +d['Investment'];
        });

        const xScale = d3.scaleLinear()
          .domain(d3.extent(data, d => d['Year']))
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Adoption Rate'])])
          .range([height, 0]);

        const line = d3.line()
          .x(d => xScale(d['Year']))
          .y(d => yScale(d['Adoption Rate']));

        lineChart.append('path')
          .datum(data)
          .attr('fill', 'none')
          .attr('stroke', 'steelblue')
          .attr('stroke-width', 1.5)
          .attr('d', line);

        lineChart.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        lineChart.append('g')
          .call(d3.axisLeft(yScale));

        const brush = d3.brushX()
          .extent([[0, 0], [width, height]])
          .on('brush', brushed);

        lineChart.append('g')
          .attr('class', 'brush')
          .call(brush);

        function brushed({ selection }) {
          if (selection) {
            const [x0, x1] = selection;
            const filteredData = data.filter(d => xScale(d['Year']) >= x0 && xScale(d['Year']) <= x1);
            updatePieChart(filteredData);
          } else {
            updatePieChart(data);
          }
        }

        function updatePieChart(data) {
          const investmentData = d3.rollup(data, v => d3.sum(v, d => d['Investment']), d => d['Technology Type']);

          const pie = d3.pie()
            .value(d => d[1]);

          const arc = d3.arc()
            .outerRadius(width / 2 - 20)
            .innerRadius(0);

          pieChart.selectAll('path')
            .remove();

          pieChart.selectAll('path')
            .data(pie(investmentData))
            .enter()
            .append('path')
            .attr('d', arc)
            .attr('fill', (d, i) => d3.schemeCategory10[i]);
        }

        updatePieChart(data);
      });
  </script>
</body>
</html>
```"
5,scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Adoption Rate, Investment, Number of Users, and Market Share. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot Matrix</title>
  <style>
    .brush {
      fill: steelblue;
      fill-opacity: .3;
    }
    .brush .extent {
      fill-opacity: .3;
    }
    .axis {
      font-size: 12px;
    }
    .axis path, .axis line {
      fill: none;
      stroke: #000;
      shape-rendering: crispEdges;
    }
  </style>
</head>
<body>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 100, right: 100, bottom: 100, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 800 - margin.top - margin.bottom;
    const dimensions = [""Adoption Rate"", ""Investment"", ""Number of Users"", ""Market Share""];
    const size = 200;

    const svg = d3.select(""body"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"")
      .then(data => {
        data.forEach(d => {
          dimensions.forEach(dim => {
            d[dim] = +d[dim];
          });
        });

        const x = dimensions.map(d => d3.scaleLinear()
          .domain(d3.extent(data, p => p[d]))
          .range([0, size]));

        const y = dimensions.map(d => d3.scaleLinear()
          .domain(d3.extent(data, p => p[d]))
          .range([size, 0]));

        const brush = d3.brush()
          .extent([[0, 0], [size, size]])
          .on(""start"", brushstart)
          .on(""brush"", brushmove)
          .on(""end"", brushend);

        const g = svg.selectAll("".g"")
          .data(cross(dimensions, dimensions))
          .enter()
          .append(""g"")
          .attr(""transform"", (d, i) => `translate(${(i % 4) * (size + 20)}, ${(Math.floor(i / 4)) * (size + 20)})`);

        g.append(""rect"")
          .attr(""class"", ""brush"")
          .attr(""x"", 0)
          .attr(""y"", 0)
          .attr(""width"", size)
          .attr(""height"", size);

        g.append(""g"")
          .attr(""class"", ""x axis"")
          .attr(""transform"", `translate(0, ${size})`)
          .call(d3.axisBottom(x[dimensions.indexOf(d.x)]));

        g.append(""g"")
          .attr(""class"", ""y axis"")
          .call(d3.axisLeft(y[dimensions.indexOf(d.y)]));

        g.append(""g"")
          .attr(""class"", ""points"")
          .selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => x[dimensions.indexOf(d.x)](d[d.x]))
          .attr(""cy"", d => y[dimensions.indexOf(d.y)](d[d.y]))
          .attr(""r"", 3);

        g.append(""g"")
          .attr(""class"", ""brush"")
          .call(brush);

        function brushstart() {
          svg.selectAll(""circle"").classed(""hidden"", true);
        }

        function brushmove() {
          const s = d3.event.selection;
          svg.selectAll(""circle"")
            .classed(""hidden"", d => {
              const xIndex = dimensions.indexOf(d.x);
              const yIndex = dimensions.indexOf(d.y);
              return s === null || !s[0] || !s[1] || x[xIndex](d[d.x]) < s[0][0] || x[xIndex](d[d.x]) > s[1][0] || y[yIndex](d[d.y]) < s[0][1] || y[yIndex](d[d.y]) > s[1][1];
            });
        }

        function brushend() {
          if (!d3.event.selection) {
            svg.selectAll(""circle"").classed(""hidden"", false);
          }
        }

        function cross(a, b) {
          const c = [];
          for (let i = 0; i < a.length; i++) {
            for (let j = 0; j < b.length; j++) {
              c.push({ x: a[i], y: b[j] });
            }
          }
          return c;
        }
      });
  </script>
</body>
</html>
```"
6,scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a brushable Scatterplot that visualizes the relationship between Adoption Rate and Investment. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Brushable Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
    .brush .extent {
      stroke: #fff;
      fill-opacity: .125;
      shape-rendering: crispEdges;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <table id=""table""></table>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 200, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const table = d3.select(""#table"");

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
      data.forEach(d => {
        d[""Adoption Rate""] = +d[""Adoption Rate""];
        d.Investment = +d.Investment;
      });

      const x = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Adoption Rate""])])
        .range([0, width]);

      const y = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.Investment)])
        .range([height, 0]);

      const xAxis = d3.axisBottom(x)
        .ticks(10)
        .tickSize(-height)
        .tickFormat(d3.format("".0f""));

      const yAxis = d3.axisLeft(y)
        .ticks(10)
        .tickSize(-width)
        .tickFormat(d3.format("".0f""));

      svg.append(""g"")
        .attr(""class"", ""x axis"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(xAxis)
        .append(""text"")
        .attr(""x"", width / 2)
        .attr(""y"", 30)
        .style(""text-anchor"", ""middle"")
        .text(""Adoption Rate"");

      svg.append(""g"")
        .attr(""class"", ""y axis"")
        .call(yAxis)
        .append(""text"")
        .attr(""transform"", ""rotate(-90)"")
        .attr(""x"", -height / 2)
        .attr(""y"", -30)
        .style(""text-anchor"", ""middle"")
        .text(""Investment"");

      const brush = d3.brush()
        .extent([[0, 0], [width, height]])
        .on(""brush end"", brushed);

      svg.append(""g"")
        .attr(""class"", ""brush"")
        .call(brush);

      svg.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => x(d[""Adoption Rate""]))
        .attr(""cy"", d => y(d.Investment))
        .attr(""r"", 5)
        .attr(""fill"", ""steelblue"");

      function brushed() {
        const selection = d3.event.selection;
        const selectedData = data.filter(d => {
          const xValue = x(d[""Adoption Rate""]);
          const yValue = y(d.Investment);
          return selection[0][0] <= xValue && xValue <= selection[1][0]
            && selection[0][1] <= yValue && yValue <= selection[1][1];
        });

        table.selectAll(""tr"").remove();

        const rows = table.selectAll(""tr"")
          .data(selectedData.slice(0, 20))
          .enter()
          .append(""tr"");

        const columns = [""Year"", ""Technology Type"", ""Adoption Rate"", ""Investment"", ""Return on Investment"", ""Number of Users"", ""Market Share"", ""Customer Satisfaction Score""];

        rows.selectAll(""td"")
          .data(d => columns.map(key => d[key]))
          .enter()
          .append(""td"")
          .text(d => d);
      }
    });
  </script>
</body>
</html>
```"
7,bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a horizontal Bar Chart that shows Technology Type and Adoption Rate, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Technology Adoption Rate</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      position: relative;
      display: inline-block;
    }
    .minimap {
      position: absolute;
      top: 0;
      right: 0;
      width: 100px;
      height: 400px;
      background-color: #f0f0f0;
      border: 1px solid #ccc;
    }
    .minimap rect {
      fill: #ccc;
    }
  </style>
</head>
<body>
  <div class=""chart"" style=""width: 800px; height: 400px;""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 120, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const svg = d3.select("".chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const minimap = d3.select("".chart"")
      .append(""div"")
      .attr(""class"", ""minimap"")
      .append(""svg"")
      .attr(""width"", 100)
      .attr(""height"", height)
      .append(""g"")
      .attr(""transform"", `translate(10, 0)`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
      data.forEach(d => {
        d[""Adoption Rate""] = +d[""Adoption Rate""];
      });

      const x = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Adoption Rate""])])
        .range([0, width]);

      const y = d3.scaleBand()
        .domain(data.map(d => d[""Technology Type""]))
        .range([0, height])
        .padding(0.2);

      svg.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", 0)
        .attr(""y"", d => y(d[""Technology Type""]))
        .attr(""width"", d => x(d[""Adoption Rate""]))
        .attr(""height"", y.bandwidth());

      minimap.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", 0)
        .attr(""y"", d => y(d[""Technology Type""]))
        .attr(""width"", d => x(d[""Adoption Rate""]) / 8)
        .attr(""height"", y.bandwidth());

      svg.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(x));

      svg.append(""g"")
        .call(d3.axisLeft(y));
    });
  </script>
</body>
</html>
```"
