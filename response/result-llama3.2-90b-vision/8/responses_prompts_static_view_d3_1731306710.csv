Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Scatterplot</title>
  <style>
    /* Add some basic styling to make the chart look decent */
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 800px;
      height: 600px;
      border: 1px solid black;
    }
  </style>
</head>
<body>
  <svg class=""chart""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    // Set up the chart dimensions
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    // Create the SVG element
    const svg = d3.select(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    // Load the data
    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
      .then(data => {
        // Convert data types
        data.forEach(d => {
          d[""Units Sold""] = +d[""Units Sold""];
          d.Revenue = +d.Revenue;
        });

        // Create scales
        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Units Sold""])])
          .range([0, width]);
        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Revenue)])
          .range([height, 0]);

        // Create axes
        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);
        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(xAxis);
        svg.append(""g"")
          .call(yAxis);

        // Add axis labels
        svg.append(""text"")
          .attr(""x"", width / 2)
          .attr(""y"", height + 30)
          .attr(""text-anchor"", ""middle"")
          .text(""Units Sold"");
        svg.append(""text"")
          .attr(""x"", -30)
          .attr(""y"", height / 2)
          .attr(""text-anchor"", ""middle"")
          .attr(""transform"", ""rotate(-90)"")
          .text(""Revenue"");

        // Create scatterplot
        svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d[""Units Sold""]))
          .attr(""cy"", d => yScale(d.Revenue))
          .attr(""r"", 5);
      });
  </script>
</body>
</html>
```"
2,line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Line Chart that visualizes the trend of Units Sold over the Year for each Product.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Units Sold Trend</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 40px;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select("".chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Year""] = +d[""Year""];
          d[""Units Sold""] = +d[""Units Sold""];
        });

        const products = [...new Set(data.map(d => d.Product))];

        const xScale = d3.scaleLinear()
          .domain(d3.extent(data, d => d[""Year""]))
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Units Sold""])])
          .range([height, 0]);

        const line = d3.line()
          .x(d => xScale(d[""Year""]))
          .y(d => yScale(d[""Units Sold""]));

        svg.selectAll(""path"")
          .data(products)
          .enter()
          .append(""path"")
          .datum(d => data.filter(f => f.Product === d))
          .attr(""d"", line)
          .attr(""stroke"", (d, i) => d3.schemeCategory10[i])
          .attr(""stroke-width"", 2)
          .attr(""fill"", ""none"");

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        svg.append(""text"")
          .attr(""transform"", `translate(${width / 2}, ${height + margin.bottom - 5})`)
          .attr(""text-anchor"", ""middle"")
          .text(""Year"");

        svg.append(""text"")
          .attr(""transform"", `rotate(-90) translate(${-height / 2}, ${-margin.left + 15})`)
          .attr(""text-anchor"", ""middle"")
          .text(""Units Sold"");

        svg.selectAll(""legend"")
          .data(products)
          .enter()
          .append(""rect"")
          .attr(""x"", width + 10)
          .attr(""y"", (d, i) => i * 20)
          .attr(""width"", 10)
          .attr(""height"", 10)
          .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

        svg.selectAll(""legend-text"")
          .data(products)
          .enter()
          .append(""text"")
          .attr(""x"", width + 25)
          .attr(""y"", (d, i) => i * 20 + 10)
          .attr(""text-anchor"", ""start"")
          .text(d => d);
      });
  </script>
</body>
</html>
```"
3,bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Units Sold for each Product in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Units Sold by Product in 2020</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .bar {
      fill: steelblue;
    }
    .bar:hover {
      fill: brown;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
      .then(data => {
        data.forEach(d => {
          d.Year = +d.Year;
          d[""Units Sold""] = +d[""Units Sold""];
        });

        const filteredData = data.filter(d => d.Year === 2020);

        const x = d3.scaleBand()
          .domain(filteredData.map(d => d.Product))
          .range([0, width])
          .padding(0.2);

        const y = d3.scaleLinear()
          .domain([0, d3.max(filteredData, d => d[""Units Sold""])])
          .range([height, 0]);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(x));

        svg.append(""g"")
          .call(d3.axisLeft(y));

        svg.selectAll(""bar"")
          .data(filteredData)
          .enter()
          .append(""rect"")
          .attr(""class"", ""bar"")
          .attr(""x"", d => x(d.Product))
          .attr(""y"", d => y(d[""Units Sold""]))
          .attr(""width"", x.bandwidth())
          .attr(""height"", d => height - y(d[""Units Sold""]));
      });
  </script>
</body>
</html>
```"
4,pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Pie Chart that visualizes the proportion of Units Sold contributed by each Product in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Pie Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    #chart {
      width: 500px;
      height: 500px;
      margin: 50px auto;
    }
  </style>
</head>
<body>
  <div id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;
    const radius = Math.min(width, height) / 2;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${width / 2 + margin.left}, ${height / 2 + margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Year""] = +d[""Year""];
          d[""Units Sold""] = +d[""Units Sold""];
        });

        const filteredData = data.filter(d => d[""Year""] === 2020);

        const pie = d3.pie()
          .value(d => d[""Units Sold""]);

        const path = svg.selectAll(""path"")
          .data(pie(filteredData))
          .enter()
          .append(""path"")
          .attr(""d"", d3.arc()
            .outerRadius(radius)
            .innerRadius(0)
          )
          .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

        const legend = svg.selectAll("".legend"")
          .data(filteredData)
          .enter()
          .append(""g"")
          .attr(""transform"", (d, i) => `translate(0, ${i * 20})`)
          .attr(""class"", ""legend"");

        legend.append(""rect"")
          .attr(""x"", width / 2 + 20)
          .attr(""y"", 10)
          .attr(""width"", 10)
          .attr(""height"", 10)
          .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

        legend.append(""text"")
          .attr(""x"", width / 2 + 40)
          .attr(""y"", 20)
          .text(d => d[""Product""]);
      });
  </script>
</body>
</html>
```"
5,donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Donut Chart that visualizes the distribution of Units Sold among Product in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Donut Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 500px;
      height: 500px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 20, left: 20 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Year""] = +d[""Year""];
          d[""Units Sold""] = +d[""Units Sold""];
        });

        const filteredData = data.filter(d => d[""Year""] === 2020);

        const pie = d3.pie()
          .value(d => d[""Units Sold""]);

        const arc = d3.arc()
          .outerRadius(width / 2 - 50)
          .innerRadius(width / 2 - 150);

        const arcs = svg.selectAll(""arc"")
          .data(pie(filteredData))
          .enter()
          .append(""path"")
          .attr(""d"", arc)
          .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

        const text = svg.selectAll(""text"")
          .data(pie(filteredData))
          .enter()
          .append(""text"")
          .attr(""transform"", d => `translate(${arc.centroid(d)})`)
          .attr(""dy"", ""0.35em"")
          .text(d => `${d.data[""Product""]}: ${d.value.toLocaleString()}`);
      });
  </script>
</body>
</html>
```"
6,coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Coxcomb Chart(polar area chart) to compare the Units Sold of different Product in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Coxcomb Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 600px;
      height: 600px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 20, left: 20 };
    const width = 600 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('.chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
      .then(data => {
        data.forEach(d => {
          d['Year'] = +d['Year'];
          d['Units Sold'] = +d['Units Sold'];
        });

        const filteredData = data.filter(d => d['Year'] === 2020);

        const products = Array.from(new Set(filteredData.map(d => d['Product'])));

        const angles = products.map((_, i) => i * (2 * Math.PI / products.length));

        const radiusScale = d3.scaleLinear()
          .domain([0, d3.max(filteredData, d => d['Units Sold'])])
          .range([0, Math.min(width, height) / 2]);

        svg.selectAll('path')
          .data(filteredData)
          .enter()
          .append('path')
          .attr('d', d => {
            const startAngle = angles[products.indexOf(d['Product'])];
            const endAngle = startAngle + (2 * Math.PI / products.length);
            const radius = radiusScale(d['Units Sold']);
            return `M ${width / 2} ${height / 2} L ${width / 2 + radius * Math.cos(startAngle)} ${height / 2 + radius * Math.sin(startAngle)} A ${radius} ${radius} 0 ${endAngle - startAngle > Math.PI ? 1 : 0} 1 ${width / 2 + radius * Math.cos(endAngle)} ${height / 2 + radius * Math.sin(endAngle)} Z`;
          })
          .attr('fill', (d, i) => d3.schemeCategory10[i % 10])
          .attr('stroke', 'black')
          .attr('stroke-width', 1);

        svg.selectAll('text')
          .data(products)
          .enter()
          .append('text')
          .attr('x', (d, i) => width / 2 + (Math.min(width, height) / 2 + 20) * Math.cos(angles[i]))
          .attr('y', (d, i) => height / 2 + (Math.min(width, height) / 2 + 20) * Math.sin(angles[i]))
          .text(d => d);
      });
  </script>
</body>
</html>
```"
7,radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Radar Chart to compare the Units Sold of different Product in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Radar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg width=""600"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 600 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;
    const svg = d3.select(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
      .then(data => {
        data.forEach(d => {
          d.Year = +d.Year;
          d[""Units Sold""] = +d[""Units Sold""];
        });

        const products = Array.from(new Set(data.filter(d => d.Year === 2020).map(d => d.Product)));

        const angles = products.map((_, i) => i * (2 * Math.PI / products.length));

        const maxUnitsSold = d3.max(data.filter(d => d.Year === 2020), d => d[""Units Sold""]);

        const radiusScale = d3.scaleLinear()
          .domain([0, maxUnitsSold])
          .range([0, Math.min(width, height) / 2 - 50]);

        const radarLines = svg.selectAll("".radar-line"")
          .data(data.filter(d => d.Year === 2020))
          .enter()
          .append(""g"")
          .attr(""class"", ""radar-line"");

        radarLines.selectAll(""path"")
          .data(d => products.map(product => ({ product, unitsSold: data.find(p => p.Product === product && p.Year === d.Year)[""Units Sold""] })))
          .enter()
          .append(""path"")
          .attr(""d"", (d, i) => {
            const x = width / 2 + radiusScale(d.unitsSold) * Math.cos(angles[i]);
            const y = height / 2 + radiusScale(d.unitsSold) * Math.sin(angles[i]);
            return `M ${width / 2} ${height / 2} L ${x} ${y}`;
          })
          .attr(""stroke"", ""black"")
          .attr(""stroke-width"", 1)
          .attr(""fill"", ""none"");

        const radarPoints = svg.selectAll("".radar-point"")
          .data(data.filter(d => d.Year === 2020))
          .enter()
          .append(""g"")
          .attr(""class"", ""radar-point"");

        radarPoints.selectAll(""circle"")
          .data(d => products.map(product => ({ product, unitsSold: data.find(p => p.Product === product && p.Year === d.Year)[""Units Sold""] })))
          .enter()
          .append(""circle"")
          .attr(""cx"", (d, i) => width / 2 + radiusScale(d.unitsSold) * Math.cos(angles[i]))
          .attr(""cy"", (d, i) => height / 2 + radiusScale(d.unitsSold) * Math.sin(angles[i]))
          .attr(""r"", 5)
          .attr(""fill"", ""black"");

        const axis = svg.selectAll("".axis"")
          .data(angles)
          .enter()
          .append(""g"")
          .attr(""class"", ""axis"")
          .attr(""transform"", (d, i) => `rotate(${d * 180 / Math.PI}) translate(0, ${-Math.min(width, height) / 2})`);

        axis.append(""line"")
          .attr(""x1"", 0)
          .attr(""y1"", 0)
          .attr(""x2"", 0)
          .attr(""y2"", Math.min(width, height) / 2)
          .attr(""stroke"", ""black"")
          .attr(""stroke-width"", 1);

        axis.append(""text"")
          .attr(""x"", 0)
          .attr(""y"", -10)
          .attr(""text-anchor"", ""middle"")
          .text((d, i) => products[i]);

        const legend = svg.selectAll("".legend"")
          .data(products)
          .enter()
          .append(""g"")
          .attr(""class"", ""legend"")
          .attr(""transform"", (d, i) => `translate(${10}, ${10 + i * 20})`);

        legend.append(""rect"")
          .attr(""x"", 0)
          .attr(""y"", 0)
          .attr(""width"", 10)
          .attr(""height"", 10)
          .attr(""fill"", ""black"");

        legend.append(""text"")
          .attr(""x"", 20)
          .attr(""y"", 10)
          .attr(""text-anchor"", ""start"")
          .text(d => d);
      });
  </script>
</body>
</html>
```"
8,streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Streamgraph that visualizes the changes of Units Sold over the Year for each Product.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Streamgraph</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
      data.forEach(d => {
        d.Year = +d.Year;
        d[""Units Sold""] = +d[""Units Sold""];
      });

      const products = Array.from(new Set(data.map(d => d.Product)));
      const years = Array.from(new Set(data.map(d => d.Year)));

      const xScale = d3.scalePoint()
        .domain(years)
        .range([0, width])
        .padding(0.5);

      const yScale = d3.scaleLinear()
        .range([height, 0]);

      const zScale = d3.scaleOrdinal(d3.schemeCategory10)
        .domain(products);

      const stack = d3.stack()
        .keys(products)
        .value((d, key) => {
          const productData = data.find(p => p.Product === key && p.Year === d.data);
          return productData ? productData[""Units Sold""] : 0;
        })
        .order(d3.stackOrderNone)
        .offset(d3.stackOffsetExpand);

      const series = stack(years.map(year => ({ data: year })));

      yScale.domain([0, d3.max(series, d => d3.max(d, d => d[1]))]).nice();

      svg.selectAll(""path"")
        .data(series)
        .enter()
        .append(""path"")
        .attr(""d"", d3.line()
          .x((d, i) => xScale(years[i]))
          .y(d => yScale(d[1]))
        )
        .attr(""fill"", (d, i) => zScale(products[i]))
        .attr(""stroke"", ""none"");

      svg.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

      svg.append(""g"")
        .call(d3.axisLeft(yScale));

      svg.append(""g"")
        .selectAll(""text"")
        .data(products)
        .enter()
        .append(""text"")
        .attr(""x"", width + 10)
        .attr(""y"", (d, i) => height - i * 20)
        .attr(""fill"", d => zScale(d))
        .text(d => d);
    });
  </script>
</body>
</html>
```"
9,slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Slopegraph to compare the Units Sold between 2019 and 2020 for each Product Category.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Slopegraph</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .slopegraph {
      width: 800px;
      height: 600px;
      margin: 50px auto;
    }
    .slopegraph .axis {
      font-size: 14px;
    }
    .slopegraph .axis path,
    .slopegraph .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
    .slopegraph .line {
      stroke-width: 2;
      fill: none;
    }
    .slopegraph .circle {
      fill: steelblue;
      stroke: #fff;
      stroke-width: 1.5;
    }
  </style>
</head>
<body>
  <svg class=""slopegraph""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select("".slopegraph"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
      data.forEach(d => {
        d[""Year""] = +d[""Year""];
        d[""Units Sold""] = +d[""Units Sold""];
      });

      const products = Array.from(new Set(data.map(d => d.Product)));

      const xScale = d3.scalePoint()
        .domain([2019, 2020])
        .range([0, width])
        .padding(0.5);

      const yScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Units Sold""])])
        .range([height, 0]);

      svg.selectAll("".line"")
        .data(products)
        .enter()
        .append(""line"")
        .attr(""class"", ""line"")
        .attr(""x1"", d => xScale(2019))
        .attr(""y1"", d => yScale(d3.max(data.filter(e => e.Product === d && e[""Year""] === 2019), e => e[""Units Sold""])))
        .attr(""x2"", d => xScale(2020))
        .attr(""y2"", d => yScale(d3.max(data.filter(e => e.Product === d && e[""Year""] === 2020), e => e[""Units Sold""])));

      svg.selectAll("".circle"")
        .data(data.filter(d => d[""Year""] === 2019))
        .enter()
        .append(""circle"")
        .attr(""class"", ""circle"")
        .attr(""cx"", xScale(2019))
        .attr(""cy"", d => yScale(d[""Units Sold""]))
        .attr(""r"", 5);

      svg.selectAll("".circle"")
        .data(data.filter(d => d[""Year""] === 2020))
        .enter()
        .append(""circle"")
        .attr(""class"", ""circle"")
        .attr(""cx"", xScale(2020))
        .attr(""cy"", d => yScale(d[""Units Sold""]))
        .attr(""r"", 5);

      svg.append(""g"")
        .attr(""class"", ""axis"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

      svg.append(""g"")
        .attr(""class"", ""axis"")
        .call(d3.axisLeft(yScale));

      svg.selectAll("".label"")
        .data(products)
        .enter()
        .append(""text"")
        .attr(""class"", ""label"")
        .attr(""x"", d => xScale(2019))
        .attr(""y"", d => yScale(d3.max(data.filter(e => e.Product === d && e[""Year""] === 2019), e => e[""Units Sold""])) - 10)
        .text(d => d);
    });
  </script>
</body>
</html>
```"
10,heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Heatmap that visualizes the Units Sold across Product and Years.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Heatmap of Units Sold</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .tooltip {
      position: absolute;
      background-color: #f9f9f9;
      border: 1px solid #ccc;
      padding: 2px;
      font-size: 12px;
      visibility: hidden;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 80, right: 100, bottom: 30, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
      .then(data => {
        data.forEach(d => {
          d.Year = +d.Year;
          d[""Units Sold""] = +d[""Units Sold""];
        });

        const products = [...new Set(data.map(d => d.Product))];
        const years = [...new Set(data.map(d => d.Year))];

        const xScale = d3.scaleBand()
          .domain(years)
          .range([0, width])
          .padding(0.2);

        const yScale = d3.scaleBand()
          .domain(products)
          .range([height, 0])
          .padding(0.2);

        const colorScale = d3.scaleSequential()
          .domain([0, d3.max(data, d => d[""Units Sold""])])
          .interpolator(d3.interpolateBlues);

        svg.selectAll(""rect"")
          .data(data)
          .enter()
          .append(""rect"")
          .attr(""x"", d => xScale(d.Year))
          .attr(""y"", d => yScale(d.Product))
          .attr(""width"", xScale.bandwidth())
          .attr(""height"", yScale.bandwidth())
          .attr(""fill"", d => colorScale(d[""Units Sold""]));

        svg.selectAll(""text"")
          .data(data)
          .enter()
          .append(""text"")
          .attr(""x"", d => xScale(d.Year) + xScale.bandwidth() / 2)
          .attr(""y"", d => yScale(d.Product) + yScale.bandwidth() / 2)
          .attr(""text-anchor"", ""middle"")
          .attr(""dominant-baseline"", ""middle"")
          .text(d => d[""Units Sold""]);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        svg.append(""text"")
          .attr(""x"", width / 2)
          .attr(""y"", -50)
          .attr(""text-anchor"", ""middle"")
          .text(""Heatmap of Units Sold"");

        svg.append(""text"")
          .attr(""x"", -height / 2)
          .attr(""y"", -60)
          .attr(""text-anchor"", ""middle"")
          .attr(""transform"", ""rotate(-90)"")
          .text(""Product"");

        svg.append(""text"")
          .attr(""x"", width / 2)
          .attr(""y"", height + 20)
          .attr(""text-anchor"", ""middle"")
          .text(""Year"");
      });
  </script>
</body>
</html>
```"
11,bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Stacked Bar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 40px auto;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg class=""chart"" width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 40, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('.chart')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
      .then(data => {
        data.forEach(d => {
          d['Units Sold'] = +d['Units Sold'];
          d.Revenue = +d.Revenue;
          d.Profit = +d.Profit;
        });

        const products = [...new Set(data.map(d => d.Product))];

        const xScale = d3.scaleBand()
          .domain(data.map(d => d.Year))
          .range([0, width])
          .padding(0.2);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Units Sold'] + d.Revenue + d.Profit)]).nice()
          .range([height, 0]);

        const zScale = d3.scaleOrdinal(d3.schemeCategory10)
          .domain(products);

        const stack = d3.stack()
          .keys(products)
          .value((d, key) => {
            const productData = data.find(p => p.Product === key && p.Year === d.Year);
            if (productData) {
              return productData['Units Sold'] + productData.Revenue + productData.Profit;
            } else {
              return 0;
            }
          });

        const stackedData = stack(data);

        svg.selectAll('g.layer')
          .data(stackedData)
          .enter()
          .append('g')
          .attr('class', 'layer')
          .attr('fill', d => zScale(d.key))
          .selectAll('rect')
          .data(d => d)
          .enter()
          .append('rect')
          .attr('x', d => xScale(d.data.Year))
          .attr('y', d => yScale(d[1]))
          .attr('width', xScale.bandwidth())
          .attr('height', d => yScale(d[0]) - yScale(d[1]));

        svg.append('g')
          .attr('class', 'axis x-axis')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append('g')
          .attr('class', 'axis y-axis')
          .call(d3.axisLeft(yScale));

        svg.append('text')
          .attr('x', width / 2)
          .attr('y', -20)
          .attr('text-anchor', 'middle')
          .text('Retail Sales Stacked Bar Chart');

        svg.append('text')
          .attr('x', -height / 2)
          .attr('y', -30)
          .attr('text-anchor', 'middle')
          .attr('transform', 'rotate(-90)')
          .text('Units Sold + Revenue + Profit');

        svg.append('text')
          .attr('x', width / 2)
          .attr('y', height + 20)
          .attr('text-anchor', 'middle')
          .text('Year');
      });
  </script>
</body>
</html>
```"
12,bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Horizontal Bar Chart that visualizes the Units Sold for each Product in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 40px;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 300 - margin.top - margin.bottom;

    const svg = d3.select("".chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Year""] = +d[""Year""];
          d[""Units Sold""] = +d[""Units Sold""];
        });

        const filteredData = data.filter(d => d[""Year""] === 2020);

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(filteredData, d => d[""Units Sold""])])
          .range([0, width]);

        const yScale = d3.scaleBand()
          .domain(filteredData.map(d => d.Product))
          .range([height, 0])
          .padding(0.2);

        svg.selectAll(""rect"")
          .data(filteredData)
          .enter()
          .append(""rect"")
          .attr(""x"", 0)
          .attr(""y"", d => yScale(d.Product))
          .attr(""width"", d => xScale(d[""Units Sold""]))
          .attr(""height"", yScale.bandwidth());

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));
      });
  </script>
</body>
</html>
```"
