Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: inline-block;
      vertical-align: top;
    }
    .scatterplot {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
    .barchart {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart scatterplot"" id=""scatterplot""></div>
  <div class=""chart barchart"" id=""barchart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svgScatterplot = d3.select(""#scatterplot"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const svgBarchart = d3.select(""#barchart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
      data.forEach(d => {
        d[""Units Sold""] = +d[""Units Sold""];
        d.Revenue = +d.Revenue;
        d.Profit = +d.Profit;
      });

      const xScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Units Sold""])])
        .range([0, width]);

      const yScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.Revenue)])
        .range([height, 0]);

      svgScatterplot.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScaleScatterplot(d[""Units Sold""]))
        .attr(""cy"", d => yScaleScatterplot(d.Revenue))
        .attr(""r"", 5);

      svgScatterplot.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleScatterplot));

      svgScatterplot.append(""g"")
        .call(d3.axisLeft(yScaleScatterplot));

      const xScaleBarchart = d3.scaleBand()
        .domain(data.map(d => d.Product))
        .range([0, width])
        .padding(0.2);

      const yScaleBarchart = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.Profit)])
        .range([height, 0]);

      svgBarchart.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", d => xScaleBarchart(d.Product))
        .attr(""y"", d => yScaleBarchart(d.Profit))
        .attr(""width"", xScaleBarchart.bandwidth())
        .attr(""height"", d => height - yScaleBarchart(d.Profit));

      svgBarchart.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleBarchart));

      svgBarchart.append(""g"")
        .call(d3.axisLeft(yScaleBarchart));
    });
  </script>
</body>
</html>
```"
2,scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: inline-block;
      vertical-align: top;
    }
    .scatterplot {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
    .barchart {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
    .brush rect {
      fill: steelblue;
      fill-opacity: .3;
    }
    .brush .extent {
      fill-opacity: .3;
      stroke: #fff;
      shape-rendering: crispEdges;
    }
  </style>
</head>
<body>
  <div class=""chart scatterplot"" id=""scatterplot""></div>
  <div class=""chart barchart"" id=""barchart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svgScatterplot = d3.select(""#scatterplot"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const svgBarchart = d3.select(""#barchart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
      data.forEach(d => {
        d[""Units Sold""] = +d[""Units Sold""];
        d[""Revenue""] = +d[""Revenue""];
        d[""Profit""] = +d[""Profit""];
        d[""Number of Stores""] = +d[""Number of Stores""];
        d[""Customer Satisfaction Score""] = +d[""Customer Satisfaction Score""];
      });

      const xScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Units Sold""])])
        .range([0, width]);

      const yScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Revenue""])])
        .range([height, 0]);

      const xScaleBarchart = d3.scaleBand()
        .domain(data.map(d => d[""Product""]))
        .range([0, width])
        .padding(0.2);

      const yScaleBarchart = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Profit""])])
        .range([height, 0]);

      svgScatterplot.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScaleScatterplot(d[""Units Sold""]))
        .attr(""cy"", d => yScaleScatterplot(d[""Revenue""]))
        .attr(""r"", 5)
        .attr(""fill"", ""steelblue"");

      svgBarchart.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", d => xScaleBarchart(d[""Product""]))
        .attr(""y"", d => yScaleBarchart(d[""Profit""]))
        .attr(""width"", xScaleBarchart.bandwidth())
        .attr(""height"", d => height - yScaleBarchart(d[""Profit""]))
        .attr(""fill"", ""steelblue"");

      const brush = d3.brush()
        .extent([[0, 0], [width, height]])
        .on(""brush"", brushed);

      svgScatterplot.call(brush);

      function brushed(event) {
        const selection = event.selection;
        if (selection) {
          const minX = xScaleScatterplot.invert(selection[0][0]);
          const maxX = xScaleScatterplot.invert(selection[1][0]);
          const minY = yScaleScatterplot.invert(selection[1][1]);
          const maxY = yScaleScatterplot.invert(selection[0][1]);

          svgBarchart.selectAll(""rect"")
            .attr(""fill"", d => {
              if (d[""Units Sold""] >= minX && d[""Units Sold""] <= maxX && d[""Revenue""] >= minY && d[""Revenue""] <= maxY) {
                return ""red"";
              } else {
                return ""steelblue"";
              }
            });
        } else {
          svgBarchart.selectAll(""rect"")
            .attr(""fill"", ""steelblue"");
        }
      }
    });
  </script>
</body>
</html>
```"
3,line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Sold , while the pie chart represents the distribution of Revenue.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: block;
    }
  </style>
</head>
<body>
  <div id=""line-chart""></div>
  <div id=""pie-chart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 300 - margin.top - margin.bottom;

    const lineChart = d3.select(""#line-chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const pieChart = d3.select(""#pie-chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
      data.forEach(d => {
        d[""Year""] = +d[""Year""];
        d[""Units Sold""] = +d[""Units Sold""];
        d[""Revenue""] = +d[""Revenue""];
      });

      const lineXScale = d3.scaleLinear()
        .domain(d3.extent(data, d => d[""Year""]))
        .range([0, width]);

      const lineYScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Units Sold""])])
        .range([height, 0]);

      lineChart.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(lineXScale));

      lineChart.append(""g"")
        .call(d3.axisLeft(lineYScale));

      lineChart.append(""path"")
        .datum(data)
        .attr(""fill"", ""none"")
        .attr(""stroke"", ""steelblue"")
        .attr(""stroke-width"", 1.5)
        .attr(""d"", d3.line()
          .x(d => lineXScale(d[""Year""]))
          .y(d => lineYScale(d[""Units Sold""])));

      const pieData = d3.rollup(data, v => d3.sum(v, d => d[""Revenue""]), d => d[""Product""]);

      const pieScale = d3.scaleOrdinal()
        .domain(pieData.keys())
        .range(d3.schemeCategory10);

      const pieArc = d3.arc()
        .outerRadius(height / 2)
        .innerRadius(0);

      pieChart.selectAll(""slice"")
        .data(pieData)
        .enter()
        .append(""path"")
        .attr(""d"", pieArc)
        .attr(""fill"", d => pieScale(d[0]))
        .attr(""transform"", `translate(${width / 2}, ${height / 2})`);
    });
  </script>
</body>
</html>
```"
4,line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Sold , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: block;
    }
    .line-chart {
      width: 800px;
      height: 400px;
      margin: 20px auto;
    }
    .pie-chart {
      width: 800px;
      height: 400px;
      margin: 20px auto;
    }
  </style>
</head>
<body>
  <div class=""chart line-chart""></div>
  <div class=""chart pie-chart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const lineChart = d3.select('.line-chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    const pieChart = d3.select('.pie-chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left + width / 2}, ${margin.top + height / 2})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
      .then(data => {
        data.forEach(d => {
          d['Year'] = +d['Year'];
          d['Units Sold'] = +d['Units Sold'];
          d['Revenue'] = +d['Revenue'];
        });

        const xScale = d3.scaleLinear()
          .domain(d3.extent(data, d => d['Year']))
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Units Sold'])])
          .range([height, 0]);

        const line = d3.line()
          .x(d => xScale(d['Year']))
          .y(d => yScale(d['Units Sold']));

        lineChart.append('path')
          .datum(data)
          .attr('fill', 'none')
          .attr('stroke', 'steelblue')
          .attr('stroke-width', 1.5)
          .attr('d', line);

        lineChart.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        lineChart.append('g')
          .call(d3.axisLeft(yScale));

        const brush = d3.brushX()
          .extent([[0, 0], [width, height]])
          .on('brush', brushed);

        lineChart.append('g')
          .attr('class', 'brush')
          .call(brush);

        function brushed({ selection }) {
          if (selection) {
            const [x0, x1] = selection;
            const filteredData = data.filter(d => xScale(d['Year']) >= x0 && xScale(d['Year']) <= x1);
            updatePieChart(filteredData);
          } else {
            updatePieChart(data);
          }
        }

        function updatePieChart(data) {
          const pie = d3.pie()
            .value(d => d['Revenue']);

          const arc = d3.arc()
            .outerRadius(width / 2 - 20)
            .innerRadius(0);

          pieChart.selectAll('path')
            .remove();

          pieChart.selectAll('path')
            .data(pie(data))
            .enter()
            .append('path')
            .attr('fill', (d, i) => d3.schemeCategory10[i])
            .attr('d', arc);
        }

        updatePieChart(data);
      });
  </script>
</body>
</html>
```"
5,scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Units Sold, Revenue, Profit, and Customer Satisfaction. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Scatterplot Matrix</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
    .brush .extent {
      fill-opacity: .3;
      stroke: #fff;
      shape-rendering: crispEdges;
    }
  </style>
</head>
<body>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 100, right: 100, bottom: 100, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 800 - margin.top - margin.bottom;
    const size = Math.min(width, height) / 3;

    const svg = d3.select(""body"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Units Sold""] = +d[""Units Sold""];
          d.Revenue = +d.Revenue;
          d.Profit = +d.Profit;
          d[""Customer Satisfaction Score""] = +d[""Customer Satisfaction Score""];
        });

        const dimensions = [""Units Sold"", ""Revenue"", ""Profit"", ""Customer Satisfaction Score""];
        const x = {};
        const y = {};
        const scales = {};

        dimensions.forEach(d => {
          x[d] = d3.scaleLinear()
            .domain(d3.extent(data, p => p[d]))
            .range([0, size]);
          y[d] = d3.scaleLinear()
            .domain(d3.extent(data, p => p[d]))
            .range([size, 0]);
          scales[d] = [x[d], y[d]];
        });

        const brush = d3.brush()
          .extent([[0, 0], [size, size]])
          .on(""brush"", brushed)
          .on(""end"", brushended);

        const cells = svg.selectAll("".cell"")
          .data(cross(dimensions, dimensions))
          .enter()
          .append(""g"")
          .attr(""class"", ""cell"")
          .attr(""transform"", d => `translate(${d.i * size}, ${d.j * size})`);

        cells.append(""rect"")
          .attr(""class"", ""frame"")
          .attr(""x"", 0)
          .attr(""y"", 0)
          .attr(""width"", size)
          .attr(""height"", size);

        cells.append(""g"")
          .attr(""class"", ""x axis"")
          .attr(""transform"", d => `translate(0, ${size})`)
          .call(d3.axisBottom(x[d.dimensions[0]]));

        cells.append(""g"")
          .attr(""class"", ""y axis"")
          .call(d3.axisLeft(y[d.dimensions[1]]));

        cells.append(""g"")
          .attr(""class"", ""brush"")
          .call(brush);

        cells.append(""g"")
          .attr(""class"", ""points"")
          .selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => x[d.dimensions[0]](d[d.dimensions[0]]))
          .attr(""cy"", d => y[d.dimensions[1]](d[d.dimensions[1]]))
          .attr(""r"", 3);

        function brushed() {
          const selection = d3.event.selection;
          cells.selectAll("".points"")
            .selectAll(""circle"")
            .classed(""selected"", d => {
              const x = d3.select(this.parentNode.parentNode).datum().dimensions[0];
              const y = d3.select(this.parentNode.parentNode).datum().dimensions[1];
              return selection && selection[0][0] <= x[d] && x[d] <= selection[1][0] && selection[0][1] <= y[d] && y[d] <= selection[1][1];
            });
        }

        function brushended() {
          if (!d3.event.selection) {
            cells.selectAll("".points"")
              .selectAll(""circle"")
              .classed(""selected"", false);
          }
        }

        function cross(a, b) {
          const c = [];
          for (let i = 0; i < a.length; i++) {
            for (let j = 0; j < b.length; j++) {
              c.push({ i, j, dimensions: [a[i], b[j]] });
            }
          }
          return c;
        }
      });
  </script>
</body>
</html>
```"
6,scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a brushable Scatterplot that visualizes the relationship between Units Sold and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .brush {
      fill: #ccc;
    }
    .brush .extent {
      fill-opacity: .3;
      stroke: #fff;
      shape-rendering: crispEdges;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <table id=""selected-data""></table>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 200, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Units Sold""] = +d[""Units Sold""];
          d.Revenue = +d.Revenue;
        });

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Units Sold""])])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Revenue)])
          .range([height, 0]);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        const brush = d3.brush()
          .extent([[0, 0], [width, height]])
          .on(""brush"", brushed);

        svg.append(""g"")
          .attr(""class"", ""brush"")
          .call(brush);

        svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d[""Units Sold""]))
          .attr(""cy"", d => yScale(d.Revenue))
          .attr(""r"", 3);

        function brushed({ selection }) {
          const selectedData = data.filter(d => {
            const x = xScale(d[""Units Sold""]);
            const y = yScale(d.Revenue);
            return x >= selection[0][0] && x <= selection[1][0] && y <= selection[0][1] && y >= selection[1][1];
          }).slice(0, 20);

          d3.select(""#selected-data"")
            .selectAll(""tr"")
            .remove();

          d3.select(""#selected-data"")
            .selectAll(""tr"")
            .data(selectedData)
            .enter()
            .append(""tr"")
            .selectAll(""td"")
            .data(d => Object.values(d))
            .enter()
            .append(""td"")
            .text(d => d);
        }
      });
  </script>
</body>
</html>
```"
7,bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a horizontal Bar Chart that shows Product and Units Sold, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      position: relative;
      display: inline-block;
    }
    .minimap {
      position: absolute;
      top: 0;
      right: 0;
      width: 100px;
      height: 300px;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 120, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 300 - margin.top - margin.bottom;
    const minimapWidth = 100;
    const minimapHeight = height;

    const svg = d3.select("".chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right + minimapWidth)
      .attr(""height"", height + margin.top + margin.bottom);

    const g = svg.append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const minimapG = svg.append(""g"")
      .attr(""transform"", `translate(${width + margin.right}, ${margin.top})`)
      .attr(""class"", ""minimap"");

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Units Sold""] = +d[""Units Sold""];
        });

        const products = [...new Set(data.map(d => d.Product))];

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Units Sold""])])
          .range([0, width]);

        const yScale = d3.scaleBand()
          .domain(products)
          .range([0, height])
          .padding(0.2);

        const bars = g.selectAll(""rect"")
          .data(data)
          .enter()
          .append(""rect"")
          .attr(""x"", 0)
          .attr(""y"", d => yScale(d.Product))
          .attr(""width"", d => xScale(d[""Units Sold""]))
          .attr(""height"", yScale.bandwidth());

        const minimapBars = minimapG.selectAll(""rect"")
          .data(data)
          .enter()
          .append(""rect"")
          .attr(""x"", 0)
          .attr(""y"", d => yScale(d.Product))
          .attr(""width"", d => xScale(d[""Units Sold""]) / 8)
          .attr(""height"", yScale.bandwidth());

        const xAxis = d3.axisBottom(xScale)
          .ticks(5)
          .tickSize(-height);

        g.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(xAxis);

        const yAxis = d3.axisLeft(yScale)
          .tickSize(-width);

        g.append(""g"")
          .call(yAxis);
      });
  </script>
</body>
</html>
```"
