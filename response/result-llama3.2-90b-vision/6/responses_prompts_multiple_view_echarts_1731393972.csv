Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Energy Consumed and Cost, and a Bar Chart on the right that displays Energy Sector versus Energy Consumed.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px; display: flex; justify-content: space-between;"">
        <div id=""scatterplot"" style=""width: 50%; height: 100%;""></div>
        <div id=""barchart"" style=""width: 50%; height: 100%;""></div>
    </div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const scatterplotData = csvData.map(row => [+row[2], +row[3]]);
                const barchartData = {};
                csvData.forEach(row => {
                    if (!barchartData[row[1]]) {
                        barchartData[row[1]] = 0;
                    }
                    barchartData[row[1]] += +row[2];
                });
                const barchartXAxis = Object.keys(barchartData);
                const barchartSeries = Object.values(barchartData);

                const scatterplotChart = echarts.init(document.getElementById('scatterplot'));
                scatterplotChart.setOption({
                    title: {
                        text: 'Energy Consumed vs Cost'
                    },
                    xAxis: {
                        type: 'value'
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        type: 'scatter',
                        data: scatterplotData
                    }]
                });

                const barchartChart = echarts.init(document.getElementById('barchart'));
                barchartChart.setOption({
                    title: {
                        text: 'Energy Sector vs Energy Consumed'
                    },
                    xAxis: {
                        type: 'category',
                        data: barchartXAxis
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        type: 'bar',
                        data: barchartSeries
                    }]
                });
            });
    </script>
</body>
</html>
```"
2,scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Energy Consumed and Cost, and a Bar Chart on the right that displays Energy Sector versus Energy Consumed. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <style>
        #chart-container {
            display: flex;
            width: 100%;
            height: 600px;
        }
        #scatterplot {
            width: 50%;
            height: 100%;
        }
        #barchart {
            width: 50%;
            height: 100%;
        }
    </style>
</head>
<body>
    <div id=""chart-container"">
        <div id=""scatterplot""></div>
        <div id=""barchart""></div>
    </div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const energySectors = [...new Set(csvData.map(row => row[1]))];
                const scatterplotData = csvData.map(row => [+row[2], +row[3]]);
                const barchartData = energySectors.map(sector => {
                    const sectorData = csvData.filter(row => row[1] === sector);
                    return [sector, sectorData.reduce((sum, row) => sum + +row[2], 0)];
                });

                const scatterplotChart = echarts.init(document.getElementById('scatterplot'));
                const barchartChart = echarts.init(document.getElementById('barchart'));

                const option = {
                    scatterplot: {
                        title: {
                            text: 'Energy Consumed vs Cost'
                        },
                        xAxis: {
                            type: 'value',
                            name: 'Energy Consumed'
                        },
                        yAxis: {
                            type: 'value',
                            name: 'Cost'
                        },
                        series: [
                            {
                                type: 'scatter',
                                data: scatterplotData,
                                emphasis: {
                                    focus: 'series'
                                }
                            }
                        ],
                        brush: {
                            toolbox: ['rect', 'polygon', 'clear'],
                            xAxisIndex: 0,
                            throttleType: 'debounce',
                            throttleDelay: 100
                        }
                    },
                    barchart: {
                        title: {
                            text: 'Energy Sector vs Energy Consumed'
                        },
                        xAxis: {
                            type: 'category',
                            data: energySectors
                        },
                        yAxis: {
                            type: 'value',
                            name: 'Energy Consumed'
                        },
                        series: [
                            {
                                type: 'bar',
                                data: barchartData.map(row => row[1]),
                                emphasis: {
                                    focus: 'series'
                                }
                            }
                        ]
                    }
                };

                scatterplotChart.setOption(option.scatterplot);
                barchartChart.setOption(option.barchart);

                scatterplotChart.on('brushSelected', params => {
                    const selectedData = params.batch[0].areas[0].range;
                    const startIndex = Math.floor(selectedData[0][0] / (option.scatterplot.xAxis.max - option.scatterplot.xAxis.min) * scatterplotData.length);
                    const endIndex = Math.floor(selectedData[0][1] / (option.scatterplot.xAxis.max - option.scatterplot.xAxis.min) * scatterplotData.length);
                    const selectedPoints = scatterplotData.slice(startIndex, endIndex).map(point => point[0]);
                    const selectedSectors = [...new Set(csvData.filter(row => selectedPoints.includes(+row[2])).map(row => row[1]))];
                    const selectedBarchartData = barchartData.filter(row => selectedSectors.includes(row[0]));

                    barchartChart.dispatchAction({
                        type: 'highlight',
                        seriesIndex: 0,
                        dataIndex: barchartData.findIndex(row => row[0] === selectedBarchartData[0][0])
                    });
                });
            });
    </script>
</body>
</html>
```"
3,line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Energy Consumed , while the pie chart represents the distribution of Cost.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const energyConsumedData = csvData.map(row => row.split(',')[2]);
                const costData = csvData.map(row => row.split(',')[3]);
                const monthData = csvData.map(row => row.split(',')[0]);

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    grid: [
                        {
                            top: '10%',
                            left: '10%',
                            right: '10%',
                            height: '40%'
                        },
                        {
                            top: '60%',
                            left: '10%',
                            right: '10%',
                            height: '30%'
                        }
                    ],
                    yAxis: [
                        {
                            gridIndex: 0,
                            type: 'value'
                        },
                        {
                            gridIndex: 1,
                            type: 'value'
                        }
                    ],
                    xAxis: [
                        {
                            gridIndex: 0,
                            type: 'category',
                            data: monthData
                        },
                        {
                            gridIndex: 1,
                            type: 'category',
                            data: [...new Set(csvData.map(row => row.split(',')[1]))]
                        }
                    ],
                    series: [
                        {
                            name: 'Energy Consumed',
                            type: 'line',
                            xAxisIndex: 0,
                            yAxisIndex: 0,
                            data: energyConsumedData
                        },
                        {
                            name: 'Cost Distribution',
                            type: 'pie',
                            xAxisIndex: 1,
                            yAxisIndex: 1,
                            radius: '60%',
                            center: ['50%', '40%'],
                            data: [...new Set(csvData.map(row => row.split(',')[1]))].map(energySector => {
                                const sectorData = csvData.filter(row => row.split(',')[1] === energySector);
                                return {
                                    name: energySector,
                                    value: sectorData.reduce((acc, row) => acc + parseFloat(row.split(',')[3]), 0)
                                };
                            })
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```"
4,line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Energy Consumed , while the pie chart represents the distribution of Cost. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Cost for the selected group.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <style>
        #chart {
            width: 800px;
            height: 600px;
            border: 1px solid #ccc;
            padding: 20px;
        }
    </style>
</head>
<body>
    <div id=""chart""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const months = csvData.map(row => row[0]);
                const energyConsumed = csvData.map(row => parseFloat(row[2]));
                const cost = csvData.map(row => parseFloat(row[3]));

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'cross',
                            crossStyle: {
                                color: '#999'
                            }
                        }
                    },
                    toolbox: {
                        feature: {
                            dataView: { show: true, readOnly: false },
                            magicType: { show: true, type: ['line', 'bar'] },
                            restore: { show: true },
                            saveAsImage: { show: true }
                        }
                    },
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 100
                        },
                        {
                            start: 0,
                            end: 100
                        }
                    ],
                    grid: [
                        {
                            top: '10%',
                            left: '10%',
                            right: '10%',
                            height: '40%'
                        },
                        {
                            top: '60%',
                            left: '10%',
                            right: '10%',
                            height: '30%'
                        }
                    ],
                    xAxis: [
                        {
                            type: 'category',
                            data: months,
                            gridIndex: 0
                        },
                        {
                            type: 'category',
                            data: months,
                            gridIndex: 1
                        }
                    ],
                    yAxis: [
                        {
                            type: 'value',
                            gridIndex: 0
                        },
                        {
                            type: 'value',
                            gridIndex: 1
                        }
                    ],
                    series: [
                        {
                            name: 'Energy Consumed',
                            type: 'line',
                            data: energyConsumed,
                            xAxisIndex: 0,
                            yAxisIndex: 0,
                            markLine: {
                                data: [{ type: 'max', name: 'Max' }, { type: 'min', name: 'Min' }]
                            }
                        },
                        {
                            name: 'Cost',
                            type: 'pie',
                            data: cost.map((value, index) => ({ value, name: months[index] })),
                            radius: '60%',
                            center: ['50%', '50%'],
                            gridIndex: 1
                        }
                    ]
                };

                chart.setOption(option);

                chart.on('brushSelected', params => {
                    const selectedData = params.batch[0].selected[0].data;
                    const startIndex = selectedData[0].dataIndex[0];
                    const endIndex = selectedData[selectedData.length - 1].dataIndex[0];
                    const selectedCost = cost.slice(startIndex, endIndex + 1);
                    const selectedMonths = months.slice(startIndex, endIndex + 1);

                    chart.setOption({
                        series: [
                            {
                                name: 'Cost',
                                type: 'pie',
                                data: selectedCost.map((value, index) => ({ value, name: selectedMonths[index] })),
                                radius: '60%',
                                center: ['50%', '50%'],
                                gridIndex: 1
                            }
                        ]
                    });
                });
            });
    </script>
</body>
</html>
```"
5,scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Energy Consumed, Revenue, Cost, Emissions, and Renewable. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/d3@7.4.4/dist/d3.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 1000px; height: 800px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = d3.csvParse(data);
                const dimensions = ['Energy Consumed', 'Revenue', 'Cost', 'Emissions', 'Renewable'];
                const matrixData = [];
                dimensions.forEach((dimension1, index1) => {
                    dimensions.forEach((dimension2, index2) => {
                        const seriesData = [];
                        csvData.forEach(row => {
                            seriesData.push([parseFloat(row[dimension1]), parseFloat(row[dimension2])]);
                        });
                        matrixData.push({
                            name: `${dimension1} vs ${dimension2}`,
                            type: 'scatter',
                            data: seriesData,
                            xAxisIndex: index2,
                            yAxisIndex: index1,
                            tooltip: {
                                trigger: 'item'
                            }
                        });
                    });
                });
                const option = {
                    tooltip: {
                        trigger: 'item'
                    },
                    grid: dimensions.map((_, index) => ({
                        left: index * 200,
                        top: 0,
                        width: 200,
                        height: 200
                    })),
                    xAxis: dimensions.map((dimension, index) => ({
                        gridIndex: index,
                        type: 'value',
                        name: dimension,
                        nameLocation: 'middle',
                        nameGap: 30,
                        nameTextStyle: {
                            fontSize: 16
                        }
                    })),
                    yAxis: dimensions.map((dimension, index) => ({
                        gridIndex: index,
                        type: 'value',
                        name: dimension,
                        nameLocation: 'middle',
                        nameGap: 30,
                        nameTextStyle: {
                            fontSize: 16
                        }
                    })),
                    series: matrixData,
                    brush: {
                        xAxisIndex: 'all',
                        yAxisIndex: 'all',
                        brushLink: 'all',
                        brushType: 'rect',
                        toolbox: ['rect', 'keep', 'clear'],
                        throttleType: 'debounce',
                        throttleDelay: 300
                    }
                };
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```"
6,scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a brushable Scatterplot that visualizes the relationship between Energy Consumed and Cost. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <style>
        #chart {
            width: 800px;
            height: 600px;
            border: 1px solid #ccc;
            margin: 20px auto;
        }
        #table {
            width: 300px;
            height: 600px;
            border: 1px solid #ccc;
            margin: 20px auto;
            float: right;
        }
    </style>
</head>
<body>
    <div id=""chart""></div>
    <div id=""table""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = csvData.map(row => {
                    const columns = row.split(',');
                    return {
                        EnergyConsumed: parseFloat(columns[2]),
                        Cost: parseFloat(columns[3]),
                        Month: columns[0],
                        'Energy Sector': columns[1],
                        Emissions: columns[4],
                        'Number of Plants': columns[5],
                        Revenue: columns[6],
                        Renewable: columns[7],
                        Region: columns[8]
                    };
                });

                const chart = echarts.init(document.getElementById('chart'));
                const table = document.getElementById('table');

                chart.setOption({
                    title: {
                        text: 'Energy Consumption Scatterplot'
                    },
                    tooltip: {
                        formatter: params => {
                            const data = params.data;
                            return `
                                Month: ${data.Month}<br>
                                Energy Sector: ${data['Energy Sector']}<br>
                                Energy Consumed: ${data.EnergyConsumed}<br>
                                Cost: ${data.Cost}<br>
                                Emissions: ${data.Emissions}<br>
                                Number of Plants: ${data['Number of Plants']}<br>
                                Revenue: ${data.Revenue}<br>
                                Renewable: ${data.Renewable}<br>
                                Region: ${data.Region}
                            `;
                        }
                    },
                    brush: {
                        id: 'brush',
                        brushLink: 'all',
                        xAxisIndex: 'all',
                        yAxisIndex: 'all',
                        brushType: 'rect',
                        transformable: false,
                        throttleType: 'debounce',
                        throttleDelay: 100,
                        brushStyle: {
                            borderWidth: 2,
                            color: 'rgba(120,140,180,0.3)',
                            borderColor: 'rgba(120,140,180,0.8)'
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Energy Consumed'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Cost'
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: chartData,
                            symbolSize: 10,
                            itemStyle: {
                                color: '#4f81bd'
                            }
                        }
                    ]
                });

                chart.on('brushSelected', params => {
                    const selectedData = params.batch[0].selected[0].data;
                    const tableHtml = `
                        <table border=""1"">
                            <tr>
                                <th>Month</th>
                                <th>Energy Sector</th>
                                <th>Energy Consumed</th>
                                <th>Cost</th>
                                <th>Emissions</th>
                                <th>Number of Plants</th>
                                <th>Revenue</th>
                                <th>Renewable</th>
                                <th>Region</th>
                            </tr>
                            ${selectedData.slice(0, 20).map(data => `
                                <tr>
                                    <td>${data.Month}</td>
                                    <td>${data['Energy Sector']}</td>
                                    <td>${data.EnergyConsumed}</td>
                                    <td>${data.Cost}</td>
                                    <td>${data.Emissions}</td>
                                    <td>${data['Number of Plants']}</td>
                                    <td>${data.Revenue}</td>
                                    <td>${data.Renewable}</td>
                                    <td>${data.Region}</td>
                                </tr>
                            `).join('')}
                        </table>
                    `;
                    table.innerHTML = tableHtml;
                });
            });
    </script>
</body>
</html>
```"
7,bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a horizontal Bar Chart that shows all the data concerning Energy Consumed, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 1000px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const energyConsumedData = csvData.map(item => item.split(',')).map(item => [item[0], parseFloat(item[2])]);

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '20%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'value',
                        position: 'top'
                    },
                    yAxis: {
                        type: 'category',
                        data: energyConsumedData.map(item => item[0]),
                        axisLabel: {
                            interval: 0,
                            rotate: 30
                        }
                    },
                    series: [
                        {
                            name: 'Energy Consumed',
                            type: 'bar',
                            data: energyConsumedData.map(item => item[1])
                        }
                    ],
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 10
                        },
                        {
                            show: true,
                            type: 'slider',
                            start: 0,
                            end: 10,
                            handleSize: 8,
                            height: 8,
                            bottom: 0,
                            left: 0,
                            right: 0,
                            borderColor: '#ccc',
                            backgroundColor: '#ccc',
                            fillerColor: '#ccc',
                            handleStyle: {
                                color: '#fff'
                            },
                            textStyle: {
                                color: '#333'
                            },
                            borderColor: '#ccc',
                            backgroundColor: '#ccc',
                            fillerColor: '#ccc',
                            handleStyle: {
                                color: '#fff'
                            },
                            textStyle: {
                                color: '#333'
                            }
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```"
