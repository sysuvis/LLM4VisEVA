Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot that visualizes the relationship between Visitors and Page Views.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot: Visitors vs Page Views</title>
  <style>
    /* Add some basic styling */
    body {
      font-family: Arial, sans-serif;
    }
    #chart {
      width: 800px;
      height: 600px;
      border: 1px solid black;
    }
  </style>
</head>
<body>
  <svg id=""chart""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    // Set up the dimensions and margins
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    // Create the SVG
    const svg = d3.select(""#chart"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    // Load the data
    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"")
      .then(data => {
        // Convert data types
        data.forEach(d => {
          d[""Visitors""] = +d[""Visitors""];
          d[""Page Views""] = +d[""Page Views""];
        });

        // Create scales
        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Visitors""])])
          .range([0, width]);
        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Page Views""])])
          .range([height, 0]);

        // Create axes
        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);
        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(xAxis);
        svg.append(""g"")
          .call(yAxis);

        // Add axis labels
        svg.append(""text"")
          .attr(""transform"", `translate(${width / 2}, ${height + margin.bottom - 5})`)
          .style(""text-anchor"", ""middle"")
          .text(""Visitors"");
        svg.append(""text"")
          .attr(""transform"", `rotate(-90) translate(${-height / 2}, ${-margin.left + 15})`)
          .style(""text-anchor"", ""middle"")
          .text(""Page Views"");

        // Create scatterplot
        svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d[""Visitors""]))
          .attr(""cy"", d => yScale(d[""Page Views""]))
          .attr(""r"", 5);
      });
  </script>
</body>
</html>
```"
2,line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Line Chart that visualizes the trend of Visitors over the Week for each Traffic Source.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Visitors Trend Over Week for Each Traffic Source</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 40px auto;
    }
  </style>
</head>
<body>
  <svg class=""chart"" width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select("".chart"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"")
      .then(data => {
        data.forEach(d => {
          d.Week = +d.Week;
          d.Visitors = +d.Visitors;
        });

        const trafficSources = [...new Set(data.map(d => d[""Traffic Source""]))];

        const xScale = d3.scaleLinear()
          .domain(d3.extent(data, d => d.Week))
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Visitors)])
          .range([height, 0]);

        const line = d3.line()
          .x(d => xScale(d.Week))
          .y(d => yScale(d.Visitors));

        const groups = svg.selectAll(""g"")
          .data(trafficSources)
          .enter()
          .append(""g"");

        groups.append(""path"")
          .datum(d => data.filter(f => f[""Traffic Source""] === d))
          .attr(""d"", line)
          .attr(""stroke"", (d, i) => d3.schemeCategory10[i])
          .attr(""stroke-width"", 2)
          .attr(""fill"", ""none"");

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        svg.append(""text"")
          .attr(""x"", width / 2)
          .attr(""y"", height + margin.bottom - 5)
          .attr(""text-anchor"", ""middle"")
          .text(""Week"");

        svg.append(""text"")
          .attr(""x"", -height / 2)
          .attr(""y"", -margin.top + 15)
          .attr(""text-anchor"", ""middle"")
          .attr(""transform"", ""rotate(-90)"")
          .text(""Visitors"");

        groups.append(""text"")
          .datum(d => d)
          .attr(""x"", width + 10)
          .attr(""y"", (d, i) => height - i * 20)
          .text(d => d);
      });
  </script>
</body>
</html>
```"
3,bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Bar Chart that visualizes the Visitors for each Traffic Source in 2021-W01.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Visitors by Traffic Source in 2021-W01</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .bar {
      fill: steelblue;
    }
    .bar:hover {
      fill: brown;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Week""] = d[""Week""];
          d[""Visitors""] = +d[""Visitors""];
        });

        const week2021W01 = data.filter(d => d[""Week""] === ""2021-W01"");

        const trafficSources = [...new Set(week2021W01.map(d => d[""Traffic Source""]))];

        const xScale = d3.scaleBand()
          .domain(trafficSources)
          .range([0, width])
          .padding(0.2);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(week2021W01, d => d[""Visitors""])])
          .range([height, 0]);

        svg.selectAll(""rect"")
          .data(week2021W01)
          .enter()
          .append(""rect"")
          .attr(""class"", ""bar"")
          .attr(""x"", d => xScale(d[""Traffic Source""]))
          .attr(""y"", d => yScale(d[""Visitors""]))
          .attr(""width"", xScale.bandwidth())
          .attr(""height"", d => height - yScale(d[""Visitors""]));

        const xAxis = d3.axisBottom(xScale);
        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(xAxis);

        const yAxis = d3.axisLeft(yScale);
        svg.append(""g"")
          .call(yAxis);
      });
  </script>
</body>
</html>
```"
4,pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Pie Chart that visualizes the proportion of Visitors contributed by each Traffic Source in 2021-W01.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Traffic Source Pie Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    #chart {
      width: 500px;
      height: 500px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 20, left: 20 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Week""] = d[""Week""];
          d[""Visitors""] = +d[""Visitors""];
        });

        const filteredData = data.filter(d => d[""Week""] === ""2021-W01"");

        const trafficSources = Array.from(new Set(filteredData.map(d => d[""Traffic Source""])));

        const pie = d3.pie()
          .value(d => d[""Visitors""]);

        const arcs = svg.selectAll(""arc"")
          .data(pie(filteredData))
          .enter()
          .append(""g"")
          .attr(""class"", ""arc"");

        arcs.append(""path"")
          .attr(""d"", d3.arc()
            .innerRadius(0)
            .outerRadius(Math.min(width, height) / 2)
          )
          .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

        arcs.append(""text"")
          .attr(""transform"", d => `translate(${d3.arc().innerRadius(0).outerRadius(Math.min(width, height) / 2).centroid(d)})`)
          .attr(""text-anchor"", ""middle"")
          .text(d => {
            const trafficSource = filteredData.find(f => f[""Visitors""] === d.value);
            return trafficSource[""Traffic Source""];
          });

        const legend = svg.selectAll(""legend"")
          .data(trafficSources)
          .enter()
          .append(""g"")
          .attr(""class"", ""legend"")
          .attr(""transform"", (d, i) => `translate(0, ${i * 20})`);

        legend.append(""rect"")
          .attr(""x"", width / 2 + 10)
          .attr(""y"", 10)
          .attr(""width"", 10)
          .attr(""height"", 10)
          .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

        legend.append(""text"")
          .attr(""x"", width / 2 + 25)
          .attr(""y"", 20)
          .text(d => d);
      });
  </script>
</body>
</html>
```"
5,donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Donut Chart that visualizes the distribution of Visitors among Traffic Source in 2021-W01.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Donut Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 500px;
      height: 500px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 20, left: 20 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Week""] = d[""Week""];
          d[""Visitors""] = +d[""Visitors""];
        });

        const filteredData = data.filter(d => d[""Week""] === ""2021-W01"");

        const trafficSources = Array.from(new Set(filteredData.map(d => d[""Traffic Source""])));

        const visitorsByTrafficSource = trafficSources.map(source => {
          const visitors = filteredData.filter(d => d[""Traffic Source""] === source).reduce((acc, d) => acc + d[""Visitors""], 0);
          return { source, visitors };
        });

        const pie = d3.pie()
          .value(d => d.visitors);

        const arc = d3.arc()
          .outerRadius(width / 2 - 50)
          .innerRadius(width / 2 - 150);

        const arcs = svg.selectAll(""arc"")
          .data(pie(visitorsByTrafficSource))
          .enter()
          .append(""path"")
          .attr(""d"", arc)
          .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

        const text = svg.selectAll(""text"")
          .data(pie(visitorsByTrafficSource))
          .enter()
          .append(""text"")
          .attr(""transform"", d => `translate(${arc.centroid(d)})`)
          .attr(""dy"", ""0.35em"")
          .text(d => `${d.data.source}: ${d.data.visitors}`);
      });
  </script>
</body>
</html>
```"
6,coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Coxcomb Chart(polar area chart) to compare the Visitors of different Traffic Source in 2021-W01.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coxcomb Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 600px;
      height: 600px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 20, left: 20 };
    const width = 600 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('.chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
      .then(data => {
        data.forEach(d => {
          d['Week'] = d['Week'].split('-');
          d['Year'] = parseInt(d['Week'][0]);
          d['Week'] = parseInt(d['Week'][1]);
          d['Visitors'] = parseInt(d['Visitors']);
        });

        const filteredData = data.filter(d => d['Year'] === 2021 && d['Week'] === 1);

        const trafficSources = [...new Set(filteredData.map(d => d['Traffic Source']))];
        const visitors = filteredData.map(d => d['Visitors']);

        const maxVisitors = Math.max(...visitors);
        const scale = d3.scaleLinear()
          .domain([0, maxVisitors])
          .range([0, Math.PI * 2]);

        const arcs = svg.selectAll('arc')
          .data(filteredData)
          .enter()
          .append('path')
          .attr('d', d => {
            const startAngle = scale(0);
            const endAngle = scale(d['Visitors']);
            return d3.arc()
              .innerRadius(0)
              .outerRadius(Math.sqrt(d['Visitors']))
              .startAngle(startAngle)
              .endAngle(endAngle)();
          })
          .attr('fill', (d, i) => d3.schemeCategory10[i % 10])
          .attr('transform', `translate(${width / 2}, ${height / 2})`);

        const labels = svg.selectAll('text')
          .data(filteredData)
          .enter()
          .append('text')
          .text(d => d['Traffic Source'])
          .attr('x', (d, i) => Math.cos(scale(d['Visitors']) / 2) * (Math.sqrt(d['Visitors']) + 10))
          .attr('y', (d, i) => Math.sin(scale(d['Visitors']) / 2) * (Math.sqrt(d['Visitors']) + 10))
          .attr('text-anchor', 'middle')
          .attr('transform', `translate(${width / 2}, ${height / 2})`);
      });
  </script>
</body>
</html>
```"
7,radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Radar Chart to compare the Visitors of different Traffic Source in 2021-W01.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Radar Chart</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .radar-chart {
            position: relative;
        }
        .radar-chart .axis text {
            font-size: 12px;
        }
        .radar-chart .axis line, .radar-chart .axis path {
            stroke: #ddd;
        }
        .radar-chart .area {
            fill-opacity: 0.5;
        }
    </style>
</head>
<body>
    <svg width=""600"" height=""600"" class=""radar-chart""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 50, right: 50, bottom: 50, left: 50 };
        const width = 600 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;
        const svg = d3.select('.radar-chart')
            .append('g')
            .attr('transform', `translate(${margin.left}, ${margin.top})`);
        d3.csv('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(data => {
                data.forEach(d => {
                    d['Week'] = d['Week'];
                    d['Visitors'] = +d['Visitors'];
                });
                const week2021W01 = data.filter(d => d['Week'] === '2021-W01');
                const trafficSources = [...new Set(week2021W01.map(d => d['Traffic Source']))];
                const maxVisitors = Math.max(...week2021W01.map(d => d['Visitors']));
                const angleScale = d3.scalePoint()
                    .domain(trafficSources)
                    .range([0, 2 * Math.PI]);
                const radiusScale = d3.scaleLinear()
                    .domain([0, maxVisitors])
                    .range([0, Math.min(width, height) / 2]);
                const line = d3.lineRadial()
                    .angle(d => angleScale(d['Traffic Source']))
                    .radius(d => radiusScale(d['Visitors']))
                    .curve(d3.curveCardinal);
                const areas = svg.selectAll('.area')
                    .data([week2021W01])
                    .enter()
                    .append('path')
                    .attr('class', 'area')
                    .attr('d', line)
                    .attr('stroke', 'black')
                    .attr('fill', 'blue');
                const axis = svg.selectAll('.axis')
                    .data([0, 1, 2, 3, 4, 5])
                    .enter()
                    .append('g')
                    .attr('class', 'axis')
                    .attr('transform', d => `rotate(${d * 60})`);
                axis.append('line')
                    .attr('x1', 0)
                    .attr('y1', 0)
                    .attr('x2', 0)
                    .attr('y2', -Math.min(width, height) / 2);
                axis.append('text')
                    .attr('x', 0)
                    .attr('y', -Math.min(width, height) / 2 - 10)
                    .text(d => trafficSources[d]);
                const ticks = svg.selectAll('.ticks')
                    .data([0, 1, 2, 3, 4, 5])
                    .enter()
                    .append('g')
                    .attr('class', 'ticks')
                    .attr('transform', d => `rotate(${d * 60})`);
                ticks.selectAll('.tick')
                    .data([0.2, 0.4, 0.6, 0.8])
                    .enter()
                    .append('line')
                    .attr('x1', 0)
                    .attr('y1', d => -radiusScale(maxVisitors * d))
                    .attr('x2', 0)
                    .attr('y2', -radiusScale(maxVisitors * d) - 5);
                ticks.selectAll('.tick-text')
                    .data([0.2, 0.4, 0.6, 0.8])
                    .enter()
                    .append('text')
                    .attr('x', 0)
                    .attr('y', d => -radiusScale(maxVisitors * d) - 10)
                    .text(d => Math.round(maxVisitors * d));
            });
    </script>
</body>
</html>
```"
8,streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Streamgraph that visualizes the changes of Visitors over the Week for each Traffic Source.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Streamgraph</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
      data.forEach(d => {
        d.Week = +d.Week;
        d.Visitors = +d.Visitors;
      });

      const trafficSources = Array.from(new Set(data.map(d => d[""Traffic Source""])));

      const xScale = d3.scaleLinear()
        .domain(d3.extent(data, d => d.Week))
        .range([0, width]);

      const yScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.Visitors)])
        .range([height, 0]);

      const zScale = d3.scaleOrdinal(d3.schemeCategory10)
        .domain(trafficSources);

      const stack = d3.stack()
        .keys(trafficSources)
        .value((d, key) => d[key] ? d[key].Visitors : 0)
        .order(d3.stackOrderNone)
        .offset(d3.stackOffsetWiggle);

      const stackedData = stack(data);

      const area = d3.area()
        .x(d => xScale(d.data.Week))
        .y0(d => yScale(d[0]))
        .y1(d => yScale(d[1]))
        .curve(d3.curveBasis);

      svg.selectAll(""path"")
        .data(stackedData)
        .enter()
        .append(""path"")
        .attr(""d"", area)
        .attr(""fill"", d => zScale(d.key));

      svg.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

      svg.append(""g"")
        .call(d3.axisLeft(yScale));

      svg.append(""g"")
        .selectAll(""text"")
        .data(trafficSources)
        .enter()
        .append(""text"")
        .attr(""x"", width + 10)
        .attr(""y"", (d, i) => i * 20 + 10)
        .attr(""fill"", d => zScale(d))
        .text(d => d);
    });
  </script>
</body>
</html>
```"
9,slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Slopegraph to compare the Visitors between 2021-W04 and 2021-W05 for each Traffic Source.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Slopegraph</title>
  <style>
    .line {
      stroke: #666;
      stroke-width: 1.5px;
    }
    .circle {
      fill: #666;
      stroke: #fff;
      stroke-width: 1.5px;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Visitors""] = +d[""Visitors""];
        });

        const weeks = [""2021-W04"", ""2021-W05""];
        const trafficSources = [...new Set(data.map(d => d[""Traffic Source""]))];

        const xScale = d3.scalePoint()
          .domain(weeks)
          .range([0, width])
          .padding(1);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Visitors""])])
          .range([height, 0]);

        svg.selectAll(""line"")
          .data(trafficSources)
          .enter()
          .append(""line"")
          .attr(""class"", ""line"")
          .attr(""x1"", d => xScale(weeks[0]))
          .attr(""y1"", d => yScale(data.find(e => e[""Traffic Source""] === d && e[""Week""] === weeks[0])[""Visitors""]))
          .attr(""x2"", d => xScale(weeks[1]))
          .attr(""y2"", d => yScale(data.find(e => e[""Traffic Source""] === d && e[""Week""] === weeks[1])[""Visitors""]));

        svg.selectAll(""circle"")
          .data(trafficSources)
          .enter()
          .append(""circle"")
          .attr(""class"", ""circle"")
          .attr(""cx"", d => xScale(weeks[0]))
          .attr(""cy"", d => yScale(data.find(e => e[""Traffic Source""] === d && e[""Week""] === weeks[0])[""Visitors""]))
          .attr(""r"", 5);

        svg.selectAll(""circle2"")
          .data(trafficSources)
          .enter()
          .append(""circle"")
          .attr(""class"", ""circle"")
          .attr(""cx"", d => xScale(weeks[1]))
          .attr(""cy"", d => yScale(data.find(e => e[""Traffic Source""] === d && e[""Week""] === weeks[1])[""Visitors""]))
          .attr(""r"", 5);

        svg.selectAll(""text"")
          .data(trafficSources)
          .enter()
          .append(""text"")
          .attr(""x"", d => xScale(weeks[0]) - 10)
          .attr(""y"", d => yScale(data.find(e => e[""Traffic Source""] === d && e[""Week""] === weeks[0])[""Visitors""]) + 5)
          .text(d => d);

        svg.selectAll(""text2"")
          .data(trafficSources)
          .enter()
          .append(""text"")
          .attr(""x"", d => xScale(weeks[1]) + 10)
          .attr(""y"", d => yScale(data.find(e => e[""Traffic Source""] === d && e[""Week""] === weeks[1])[""Visitors""]) + 5)
          .text(d => d);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));
      });
  </script>
</body>
</html>
```"
10,heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Heatmap that visualizes the Visitors across Traffic Source and Weeks.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Heatmap</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .tooltip {
      position: absolute;
      padding: 10px;
      font-size: 12px;
      background-color: #fff;
      border: 1px solid #ddd;
      border-radius: 5px;
      pointer-events: none;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 100, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('svg')
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
      .then(data => {
        data.forEach(d => {
          d.Week = +d.Week;
          d['Visitors'] = +d['Visitors'];
        });

        const weeks = Array.from(new Set(data.map(d => d.Week)));
        const trafficSources = Array.from(new Set(data.map(d => d['Traffic Source'])));

        const xScale = d3.scaleBand()
          .domain(weeks)
          .range([0, width])
          .padding(0.2);

        const yScale = d3.scaleBand()
          .domain(trafficSources)
          .range([height, 0])
          .padding(0.2);

        const colorScale = d3.scaleSequential()
          .domain([0, d3.max(data, d => d['Visitors'])])
          .interpolator(d3.interpolateBlues);

        const heatmap = svg.selectAll('rect')
          .data(data)
          .enter()
          .append('rect')
          .attr('x', d => xScale(d.Week))
          .attr('y', d => yScale(d['Traffic Source']))
          .attr('width', xScale.bandwidth())
          .attr('height', yScale.bandwidth())
          .attr('fill', d => colorScale(d['Visitors']));

        const tooltip = d3.select('body')
          .append('div')
          .attr('class', 'tooltip')
          .style('opacity', 0);

        heatmap.on('mouseover', (event, d) => {
          tooltip.transition()
            .duration(200)
            .style('opacity', 1);
          tooltip.html(`Week: ${d.Week}<br>Traffic Source: ${d['Traffic Source']}<br>Visitors: ${d['Visitors']}`)
            .style('left', (event.pageX) + 'px')
            .style('top', (event.pageY - 28) + 'px');
        })
          .on('mouseout', () => {
            tooltip.transition()
              .duration(500)
              .style('opacity', 0);
          });

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append('g')
          .call(d3.axisLeft(yScale));

        svg.append('text')
          .attr('transform', 'rotate(-90)')
          .attr('y', 6)
          .attr('dy', '.71em')
          .style('text-anchor', 'end')
          .text('Traffic Source');

        svg.append('text')
          .attr('y', height + margin.bottom - 10)
          .attr('x', width / 2)
          .style('text-anchor', 'middle')
          .text('Week');
      });
  </script>
</body>
</html>
```"
11,bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Stacked Bar Chart</title>
  <style>
    .chart {
      width: 800px;
      height: 600px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('.chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
      .then(data => {
        data.forEach(d => {
          d['Visitors'] = +d['Visitors'];
          d['Page Views'] = +d['Page Views'];
        });

        const keys = ['Visitors', 'Page Views'];

        const x = d3.scaleBand()
          .domain(data.map(d => d['Week']))
          .range([0, width])
          .padding(0.2);

        const y = d3.scaleLinear()
          .domain([0, d3.max(data, d => d3.max(keys, key => d[key]))])
          .range([height, 0]);

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(x));

        svg.append('g')
          .call(d3.axisLeft(y));

        const stackedData = d3.stack()
          .keys(keys)
          (data);

        svg.selectAll('layers')
          .data(stackedData)
          .enter()
          .append('g')
          .attr('class', 'layer')
          .attr('fill', (d, i) => i === 0 ? 'blue' : 'red')
          .selectAll('rect')
          .data(d => d)
          .enter()
          .append('rect')
          .attr('x', d => x(d.data['Week']))
          .attr('y', d => y(d[1]))
          .attr('height', d => y(d[0]) - y(d[1]))
          .attr('width', x.bandwidth());
      });
  </script>
</body>
</html>
```"
12,bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Horizontal Bar Chart that visualizes the Visitors for each Traffic Source in 2021-W01.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Visitors by Traffic Source in 2021-W01</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 40px;
    }
    .bar {
      fill: steelblue;
    }
    .bar:hover {
      fill: brown;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 40, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('svg')
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
      .then(data => {
        data.forEach(d => {
          d['Visitors'] = +d['Visitors'];
        });

        const filteredData = data.filter(d => d['Week'] === '2021-W01');

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(filteredData, d => d['Visitors'])])
          .range([0, width]);

        const yScale = d3.scaleBand()
          .domain(filteredData.map(d => d['Traffic Source']))
          .range([height, 0])
          .padding(0.2);

        svg.selectAll('rect')
          .data(filteredData)
          .enter()
          .append('rect')
          .attr('class', 'bar')
          .attr('x', 0)
          .attr('y', d => yScale(d['Traffic Source']))
          .attr('width', d => xScale(d['Visitors']))
          .attr('height', yScale.bandwidth());

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append('g')
          .call(d3.axisLeft(yScale));
      });
  </script>
</body>
</html>
```"
