Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Visitors and Page Views, and a Bar Chart on the right that displays Traffic Source versus Visitors.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Website Traffic Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: inline-block;
      vertical-align: top;
    }
    .scatterplot {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
    .barchart {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart scatterplot"" id=""scatterplot""></div>
  <div class=""chart barchart"" id=""barchart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const scatterplot = d3.select(""#scatterplot"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const barchart = d3.select(""#barchart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
      data.forEach(d => {
        d.Visitors = +d[""Visitors""];
        d[""Page Views""] = +d[""Page Views""];
      });

      const xScaleScatter = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.Visitors)])
        .range([0, width]);

      const yScaleScatter = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Page Views""])])
        .range([height, 0]);

      scatterplot.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScaleScatter(d.Visitors))
        .attr(""cy"", d => yScaleScatter(d[""Page Views""]))
        .attr(""r"", 5);

      scatterplot.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleScatter));

      scatterplot.append(""g"")
        .call(d3.axisLeft(yScaleScatter));

      const trafficSources = Array.from(new Set(data.map(d => d[""Traffic Source""])));

      const xScaleBar = d3.scaleBand()
        .domain(trafficSources)
        .range([0, width])
        .padding(0.2);

      const yScaleBar = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.Visitors)])
        .range([height, 0]);

      const barData = trafficSources.map(source => {
        const sourceData = data.filter(d => d[""Traffic Source""] === source);
        return {
          source,
          visitors: d3.sum(sourceData, d => d.Visitors)
        };
      });

      barchart.selectAll(""rect"")
        .data(barData)
        .enter()
        .append(""rect"")
        .attr(""x"", d => xScaleBar(d.source))
        .attr(""y"", d => yScaleBar(d.visitors))
        .attr(""width"", xScaleBar.bandwidth())
        .attr(""height"", d => height - yScaleBar(d.visitors));

      barchart.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleBar));

      barchart.append(""g"")
        .call(d3.axisLeft(yScaleBar));
    });
  </script>
</body>
</html>
```"
2,scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Visitors and Page Views, and a Bar Chart on the right that displays Traffic Source versus Visitors. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Website Traffic Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: inline-block;
      vertical-align: top;
    }
    .scatterplot {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
    .barchart {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart scatterplot"" id=""scatterplot""></div>
  <div class=""chart barchart"" id=""barchart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const xScaleScatter = d3.scaleLinear().range([0, width]);
    const yScaleScatter = d3.scaleLinear().range([height, 0]);
    const xScaleBar = d3.scaleBand().range([0, width]).padding(0.2);
    const yScaleBar = d3.scaleLinear().range([height, 0]);

    const svgScatter = d3.select(""#scatterplot"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const svgBar = d3.select(""#barchart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
      data.forEach(d => {
        d.Visitors = +d.Visitors;
        d[""Page Views""] = +d[""Page Views""];
      });

      xScaleScatter.domain([0, d3.max(data, d => d.Visitors)]);
      yScaleScatter.domain([0, d3.max(data, d => d[""Page Views""])]);

      xScaleBar.domain(data.map(d => d[""Traffic Source""]));
      yScaleBar.domain([0, d3.max(data, d => d.Visitors)]);

      svgScatter.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleScatter));

      svgScatter.append(""g"")
        .call(d3.axisLeft(yScaleScatter));

      svgBar.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleBar));

      svgBar.append(""g"")
        .call(d3.axisLeft(yScaleBar));

      const brush = d3.brushX()
        .extent([[0, 0], [width, height]])
        .on(""brush"", brushed);

      svgScatter.append(""g"")
        .attr(""class"", ""brush"")
        .call(brush);

      function brushed({ selection }) {
        if (selection) {
          const [x0, x1] = selection;
          const visitorsRange = [xScaleScatter.invert(x0), xScaleScatter.invert(x1)];

          svgScatter.selectAll(""circle"")
            .classed(""highlight"", d => visitorsRange[0] <= d.Visitors && d.Visitors <= visitorsRange[1]);

          svgBar.selectAll(""rect"")
            .classed(""highlight"", d => visitorsRange[0] <= d.Visitors && d.Visitors <= visitorsRange[1]);
        } else {
          svgScatter.selectAll(""circle"")
            .classed(""highlight"", false);

          svgBar.selectAll(""rect"")
            .classed(""highlight"", false);
        }
      }

      svgScatter.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScaleScatter(d.Visitors))
        .attr(""cy"", d => yScaleScatter(d[""Page Views""]))
        .attr(""r"", 5);

      svgBar.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", d => xScaleBar(d[""Traffic Source""]))
        .attr(""y"", d => yScaleBar(d.Visitors))
        .attr(""width"", xScaleBar.bandwidth())
        .attr(""height"", d => height - yScaleBar(d.Visitors));
    });
  </script>
</body>
</html>
```"
3,line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Visitors , while the pie chart represents the distribution of Page Views.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Website Traffic Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: block;
      margin: 20px auto;
    }
  </style>
</head>
<body>
  <div id=""line-chart"" class=""chart""></div>
  <div id=""pie-chart"" class=""chart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 300 - margin.top - margin.bottom;

    const lineChart = d3.select(""#line-chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const pieChart = d3.select(""#pie-chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left + width / 2}, ${margin.top + height / 2})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
      data.forEach(d => {
        d.Visitors = +d[""Visitors""];
        d[""Page Views""] = +d[""Page Views""];
      });

      const xScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.Week)])
        .range([0, width]);

      const yScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.Visitors)])
        .range([height, 0]);

      lineChart.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

      lineChart.append(""g"")
        .call(d3.axisLeft(yScale));

      lineChart.append(""path"")
        .datum(data)
        .attr(""fill"", ""none"")
        .attr(""stroke"", ""steelblue"")
        .attr(""stroke-width"", 1.5)
        .attr(""d"", d3.line()
          .x(d => xScale(d.Week))
          .y(d => yScale(d.Visitors)));

      const pie = d3.pie()
        .value(d => d[""Page Views""]);

      const arc = d3.arc()
        .outerRadius(width / 2 - 20)
        .innerRadius(0);

      const arcs = pieChart.selectAll(""arc"")
        .data(pie(data))
        .enter()
        .append(""path"")
        .attr(""fill"", (d, i) => d3.schemeCategory10[i])
        .attr(""d"", arc);

      const legend = pieChart.selectAll(""legend"")
        .data(pie(data))
        .enter()
        .append(""text"")
        .attr(""x"", width / 2 + 20)
        .attr(""y"", (d, i) => i * 20)
        .text(d => `Region ${d.data.Region}: ${d.value} Page Views`);
    });
  </script>
</body>
</html>
```"
4,line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Visitors , while the pie chart represents the distribution of Page Views. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Page Views for the selected group.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Website Traffic Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    .line-chart {
      width: 800px;
      height: 400px;
      margin-bottom: 20px;
    }
    .pie-chart {
      width: 800px;
      height: 400px;
    }
  </style>
</head>
<body>
  <div class=""chart"">
    <svg class=""line-chart""></svg>
    <svg class=""pie-chart""></svg>
  </div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const lineChart = d3.select('.line-chart')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    const pieChart = d3.select('.pie-chart')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left + width / 2}, ${margin.top + height / 2})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv').then(data => {
      data.forEach(d => {
        d.Week = +d.Week;
        d['Visitors'] = +d['Visitors'];
        d['Page Views'] = +d['Page Views'];
      });

      const xScale = d3.scaleLinear()
        .domain(d3.extent(data, d => d.Week))
        .range([0, width]);

      const yScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d['Visitors'])])
        .range([height, 0]);

      lineChart.append('g')
        .attr('transform', `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

      lineChart.append('g')
        .call(d3.axisLeft(yScale));

      const line = d3.line()
        .x(d => xScale(d.Week))
        .y(d => yScale(d['Visitors']));

      lineChart.append('path')
        .datum(data)
        .attr('fill', 'none')
        .attr('stroke', 'steelblue')
        .attr('stroke-width', 1.5)
        .attr('d', line);

      const brush = d3.brushX()
        .extent([[0, 0], [width, height]])
        .on('brush end', brushed);

      lineChart.append('g')
        .attr('class', 'brush')
        .call(brush);

      function brushed() {
        const selection = d3.event.selection;
        if (selection) {
          const minX = xScale.invert(selection[0]);
          const maxX = xScale.invert(selection[1]);
          const filteredData = data.filter(d => d.Week >= minX && d.Week <= maxX);

          const pieData = d3.rollup(filteredData, v => d3.sum(v, d => d['Page Views']), d => d['Traffic Source']);

          const pie = d3.pie()
            .value(d => d[1]);

          const arc = d3.arc()
            .outerRadius(Math.min(width, height) / 2 - 10)
            .innerRadius(0);

          pieChart.selectAll('path')
            .remove();

          pieChart.selectAll('path')
            .data(pie(pieData))
            .enter()
            .append('path')
            .attr('d', arc)
            .attr('fill', (d, i) => d3.schemeCategory10[i]);
        }
      }
    });
  </script>
</body>
</html>
```"
5,scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Visitors, Page Views, and Bounce Rate. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot Matrix</title>
  <style>
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
    .brush .extent {
      stroke: #fff;
      fill-opacity: .125;
      shape-rendering: crispEdges;
    }
  </style>
</head>
<body>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 100, right: 100, bottom: 100, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;
    const dimensions = [""Visitors"", ""Page Views"", ""Bounce Rate""];
    const size = 200;

    const svg = d3.select(""body"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
      data.forEach(d => {
        dimensions.forEach(dim => {
          d[dim] = +d[dim];
        });
      });

      const x = dimensions.map(dim => {
        return d3.scaleLinear()
          .domain(d3.extent(data, d => d[dim]))
          .range([0, size]);
      });

      const y = dimensions.map(dim => {
        return d3.scaleLinear()
          .domain(d3.extent(data, d => d[dim]))
          .range([size, 0]);
      });

      const brush = d3.brush()
        .extent([[0, 0], [size, size]])
        .on(""brush"", brushed)
        .on(""end"", brushended);

      const cell = svg.selectAll("".cell"")
        .data(cross(dimensions, dimensions))
        .enter().append(""g"")
        .attr(""class"", ""cell"")
        .attr(""transform"", d => `translate(${d.i * size}, ${d.j * size})`);

      cell.append(""rect"")
        .attr(""class"", ""frame"")
        .attr(""x"", 0)
        .attr(""y"", 0)
        .attr(""width"", size)
        .attr(""height"", size);

      cell.append(""g"")
        .attr(""class"", ""x axis"")
        .attr(""transform"", `translate(0, ${size})`)
        .call(d3.axisBottom(x[d.i]));

      cell.append(""g"")
        .attr(""class"", ""y axis"")
        .call(d3.axisLeft(y[d.j]));

      cell.append(""g"")
        .attr(""class"", ""brush"")
        .call(brush);

      cell.selectAll(""circle"")
        .data(data)
        .enter().append(""circle"")
        .attr(""cx"", d => x[d.i](d[dimensions[d.i]]))
        .attr(""cy"", d => y[d.j](d[dimensions[d.j]]))
        .attr(""r"", 3);

      function brushed() {
        const s = d3.event.selection;
        cell.selectAll(""circle"")
          .classed(""hidden"", d => {
            return s && (
              s[0][0] > x[d.i](d[dimensions[d.i]]) ||
              s[1][0] < x[d.i](d[dimensions[d.i]]) ||
              s[0][1] > y[d.j](d[dimensions[d.j]]) ||
              s[1][1] < y[d.j](d[dimensions[d.j]])
            );
          });
      }

      function brushended() {
        cell.selectAll(""circle"")
          .classed(""hidden"", false);
      }
    });

    function cross(a, b) {
      const c = [];
      for (let i = 0; i < a.length; i++) {
        for (let j = 0; j < b.length; j++) {
          c.push({ i, j });
        }
      }
      return c;
    }
  </script>
</body>
</html>
```"
6,scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a brushable Scatterplot that visualizes the relationship between Visitors and Page Views. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot with Brush</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .brush {
      fill: #ccc;
    }
    .brush .extent {
      fill-opacity: .3;
      stroke: #fff;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <table id=""table""></table>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 200, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const table = d3.select(""#table"");

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
      data.forEach(d => {
        d.Visitors = +d[""Visitors""];
        d[""Page Views""] = +d[""Page Views""];
      });

      const xScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.Visitors)])
        .range([0, width]);

      const yScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Page Views""])])
        .range([height, 0]);

      svg.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

      svg.append(""g"")
        .call(d3.axisLeft(yScale));

      const brush = d3.brush()
        .extent([[0, 0], [width, height]])
        .on(""brush"", brushed);

      svg.append(""g"")
        .call(brush);

      svg.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScale(d.Visitors))
        .attr(""cy"", d => yScale(d[""Page Views""]))
        .attr(""r"", 3);

      function brushed(event) {
        const selection = event.selection;
        const selectedData = data.filter(d => {
          return selection[0][0] <= xScale(d.Visitors) &&
            xScale(d.Visitors) <= selection[1][0] &&
            selection[0][1] <= yScale(d[""Page Views""]) &&
            yScale(d[""Page Views""]) <= selection[1][1];
        });

        table.selectAll(""tr"").remove();

        selectedData.slice(0, 20).forEach(d => {
          const row = table.append(""tr"");
          row.append(""td"").text(d.Week);
          row.append(""td"").text(d[""Traffic Source""]);
          row.append(""td"").text(d.Visitors);
          row.append(""td"").text(d[""Page Views""]);
          row.append(""td"").text(d[""Bounce Rate""]);
          row.append(""td"").text(d[""Average Session Duration""]);
          row.append(""td"").text(d[""Conversion Rate""]);
          row.append(""td"").text(d.Region);
          row.append(""td"").text(d[""Device Type""]);
        });
      }
    });
  </script>
</body>
</html>
```"
7,bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a horizontal Bar Chart that shows all the data concerning Visitors, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Visitors Bar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      position: relative;
      display: inline-block;
    }
    .minimap {
      position: absolute;
      top: 0;
      right: 0;
      width: 100px;
      height: 300px;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 120, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 300 - margin.top - margin.bottom;
    const minimapWidth = 100;
    const minimapHeight = height;

    const svg = d3.select("".chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right + minimapWidth)
      .attr(""height"", height + margin.top + margin.bottom);

    const g = svg.append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const minimapG = svg.append(""g"")
      .attr(""transform"", `translate(${width + margin.left + 20}, ${margin.top})`)
      .attr(""class"", ""minimap"");

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
      data.forEach(d => {
        d[""Visitors""] = +d[""Visitors""];
      });

      const x = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Visitors""])])
        .range([0, width]);

      const y = d3.scaleBand()
        .domain(data.map(d => d[""Week""]))
        .range([0, height])
        .padding(0.2);

      g.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", 0)
        .attr(""y"", d => y(d[""Week""]))
        .attr(""width"", d => x(d[""Visitors""]))
        .attr(""height"", y.bandwidth());

      minimapG.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", 0)
        .attr(""y"", d => y(d[""Week""]))
        .attr(""width"", d => x(d[""Visitors""]) / 8)
        .attr(""height"", y.bandwidth());

      g.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(x));

      g.append(""g"")
        .call(d3.axisLeft(y));

      minimapG.append(""g"")
        .attr(""transform"", `translate(0, ${minimapHeight})`)
        .call(d3.axisBottom(x.tickFormat(d3.format("".0s""))));

      minimapG.append(""g"")
        .call(d3.axisLeft(y));
    });
  </script>
</body>
</html>
```"
