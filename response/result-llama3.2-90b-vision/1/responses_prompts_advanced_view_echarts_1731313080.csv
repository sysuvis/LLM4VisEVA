Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot that visualizes the relationship between Units Produced and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Agricultural Production Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""scatterplot"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const unitsProduced = rows.map(row => parseFloat(row[2]));
                const revenue = rows.map(row => parseFloat(row[3]));

                const chart = echarts.init(document.getElementById('scatterplot'));
                const option = {
                    title: {
                        text: 'Agricultural Production Scatterplot'
                    },
                    xAxis: {
                        name: 'Units Produced',
                        type: 'value',
                        axisLabel: {
                            formatter: '{value}'
                        }
                    },
                    yAxis: {
                        name: 'Revenue',
                        type: 'value',
                        axisLabel: {
                            formatter: '{value}'
                        }
                    },
                    tooltip: {
                        trigger: 'item',
                        axisPointer: {
                            type: 'cross'
                        },
                        formatter: (params) => {
                            return `Units Produced: ${params.data[0]}<br>Revenue: ${params.data[1]}`;
                        }
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: unitsProduced.map((value, index) => [value, revenue[index]]),
                            emphasis: {
                                itemStyle: {
                                    borderColor: '#333',
                                    borderWidth: 2
                                }
                            }
                        }
                    ]
                };

                chart.setOption(option);
            });
    </script>
</body>
</html>
```"
2,scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot that visualizes the relationship between Units Produced and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Agricultural Production Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""scatterplot"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const unitsProduced = rows.map(row => parseFloat(row[2]));
                const revenue = rows.map(row => parseFloat(row[3]));

                const chartDom = document.getElementById('scatterplot');
                const myChart = echarts.init(chartDom);
                let option;

                option = {
                    title: {
                        text: 'Agricultural Production Scatterplot'
                    },
                    xAxis: {
                        name: 'Units Produced',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Revenue',
                        type: 'value'
                    },
                    brush: {
                        toolbox: ['rect', 'polygon', 'lineX', 'lineY', 'keep', 'clear'],
                        xAxisIndex: 0,
                        yAxisIndex: 0
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: unitsProduced.map((value, index) => [value, revenue[index]]),
                            brush: {
                                itemStyle: {
                                    borderColor: 'rgba(0,0,0,0.5)',
                                    borderWidth: 1,
                                    opacity: 0.7
                                }
                            }
                        }
                    ]
                };

                myChart.setOption(option);

                myChart.on('brushSelected', params => {
                    const selectedData = params.batch[0].selected[0].data;
                    console.log(selectedData);
                });
            });
    </script>
</body>
</html>
```"
3,scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot that visualizes the relationship between Units Produced and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Agricultural Production Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""scatterplot"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const unitsProduced = rows.map(row => parseFloat(row[2]));
                const revenue = rows.map(row => parseFloat(row[3]));

                const chart = echarts.init(document.getElementById('scatterplot'));
                const option = {
                    title: {
                        text: 'Agricultural Production Scatterplot'
                    },
                    xAxis: {
                        name: 'Units Produced',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Revenue',
                        type: 'value'
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: unitsProduced.map((value, index) => [value, revenue[index]])
                        }
                    ],
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 100
                        }
                    ]
                };

                chart.setOption(option);
            });
    </script>
</body>
</html>
```"
4,scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Units Produced and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Agricultural Production Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""scatterplot"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const unitsProduced = rows.map(row => +row[2]);
                const revenue = rows.map(row => +row[3]);
                const years = rows.map(row => row[0]);
                const cropTypes = rows.map(row => row[1]);

                const chart = echarts.init(document.getElementById('scatterplot'));
                const option = {
                    title: {
                        text: 'Agricultural Production Scatterplot'
                    },
                    xAxis: {
                        name: 'Units Produced'
                    },
                    yAxis: {
                        name: 'Revenue'
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: unitsProduced.map((value, index) => [value, revenue[index]]),
                            itemStyle: {
                                opacity: 0.8
                            },
                            emphasis: {
                                itemStyle: {
                                    opacity: 1
                                }
                            },
                            tooltip: {
                                trigger: 'item',
                                formatter: (params) => {
                                    return `Year: ${years[params.dataIndex]}<br>Crop Type: ${cropTypes[params.dataIndex]}<br>Units Produced: ${params.value[0]}<br>Revenue: ${params.value[1]}`;
                                }
                            }
                        }
                    ]
                };

                chart.setOption(option);

                chart.on('click', (params) => {
                    const url = `https://www.google.com/search?q=${years[params.dataIndex]}+${cropTypes[params.dataIndex]}+agricultural+production`;
                    window.open(url, '_blank');
                });
            });
    </script>
</body>
</html>
```"
5,scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot with query widgets showing the Units Produced and Revenue of the given dataset. Add a slider to represent the Year.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Agricultural Production Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
    <style>
        #chart {
            width: 800px;
            height: 600px;
        }
    </style>
</head>
<body>
    <div id=""chart""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const years = Array.from(new Set(rows.map(row => row[0]))).map(year => parseInt(year));
                const minYear = Math.min(...years);
                const maxYear = Math.max(...years);

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    title: {
                        text: 'Agricultural Production Scatterplot'
                    },
                    xAxis: {
                        name: 'Units Produced',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Revenue',
                        type: 'value'
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: rows.filter(row => parseInt(row[0]) === minYear).map(row => [parseFloat(row[2]), parseFloat(row[3])])
                        }
                    ],
                    graphic: {
                        elements: [
                            {
                                type: 'slider',
                                id: 'year-slider',
                                left: 'center',
                                top: 'bottom',
                                z: 3,
                                style: {
                                    fill: '#ccc',
                                    stroke: '#666'
                                },
                                layout: 'horizontal',
                                shape: {
                                    r: 10,
                                    points: [
                                        [0, 0.5],
                                        [1, 0.5]
                                    ]
                                },
                                data: [
                                    {
                                        value: minYear,
                                        label: {
                                            formatter: '{value}'
                                        }
                                    }
                                ],
                                min: minYear,
                                max: maxYear,
                                step: 1,
                                onChange: (value) => {
                                    const filteredData = rows.filter(row => parseInt(row[0]) === value).map(row => [parseFloat(row[2]), parseFloat(row[3])]);
                                    chart.setOption({
                                        series: [
                                            {
                                                type: 'scatter',
                                                data: filteredData
                                            }
                                        ]
                                    });
                                }
                            }
                        ]
                    }
                };

                chart.setOption(option);
            });
    </script>
</body>
</html>
```"
6,scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot showing the Units Produced of Wheat. Add animated transitions that connect these points using lines in order.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Agricultural Production Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const wheatData = rows.filter(row => row[1] === 'Wheat')
                    .map(row => [parseInt(row[0]), parseInt(row[2])])
                    .sort((a, b) => a[0] - b[0]);

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    title: {
                        text: 'Units Produced of Wheat Over Time'
                    },
                    xAxis: {
                        type: 'category',
                        name: 'Year'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Units Produced'
                    },
                    series: [{
                        type: 'scatter',
                        data: wheatData,
                        animation: true,
                        animationDuration: 1000,
                        animationEasing: 'linear',
                        animationDelay: function (idx) {
                            return idx * 100;
                        },
                        lineStyle: {
                            type: 'dashed'
                        }
                    }]
                };

                chart.setOption(option);
            });
    </script>
</body>
</html>
```"
7,line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Units Produced of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Agricultural Production Line Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1).map(row => row.split(','));
            const years = Array.from(new Set(rows.map(row => row[0]))).sort();
            const cropTypes = Array.from(new Set(rows.map(row => row[1])));
            const series = cropTypes.map(cropType => {
                const unitsProduced = years.map(year => {
                    const row = rows.find(row => row[0] === year && row[1] === cropType);
                    return row ? parseFloat(row[2]) : 0;
                });
                return {
                    name: cropType,
                    type: 'line',
                    data: unitsProduced,
                    emphasis: {
                        focus: 'series'
                    }
                };
            });
            const chart = echarts.init(document.getElementById('chart'));
            chart.setOption({
                title: {
                    text: 'Agricultural Production Line Chart'
                },
                legend: {
                    data: cropTypes
                },
                xAxis: {
                    type: 'category',
                    data: years
                },
                yAxis: {
                    type: 'value'
                },
                series: series
            });
        });
    </script>
</body>
</html>
```"
8,bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Bar Chart that visualizes the Units Produced for each Crop Type in 2020. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,advanced view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Agricultural Production</title>
  <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
  <div id=""chart"" style=""width: 800px; height: 600px;""></div>

  <script type=""text/javascript"">
    fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
      .then(response => response.text())
      .then(data => {
        const rows = data.split('\n').slice(1).map(row => row.split(','));
        const chartData = rows.filter(row => row[0] === '2020').map(row => ({ name: row[1], value: parseInt(row[2]) }));

        var chartDom = document.getElementById('chart');
        var myChart = echarts.init(chartDom);
        var option;

option = {
          xAxis: {
            type: 'category',
            data: chartData.map(item => item.name)
          },
          yAxis: {},
          series: [
            {
              type: 'bar',
              data: chartData.map(item => item.value)
            }
          ]
};

option && myChart.setOption(option);

myChart.on('mousewheel', function (params) {
if (params.batch) return;
const zoomSize = params.delta > 0 ? -10 : +10;
const zoomOption = {xAxis:{axisLabel:{fontSize:params.fontSize+zoomSize}}};
myChart.setOption(zoomOption);
});

myChart.on('mousedown', function (params) {

if(params.event.button==2){
const panX=params.event.offsetX-myChart.getWidth()/2;
const panY=params.event.offsetY-myChart.getHeight()/2;
const panDeltaX=panX>0?+10:-10;
const panDeltaY=panY>0?+10:-10;

var option={xAxis:{axisLabel:{rotate:+panDeltaX}},yAxis:{axisLabel:{rotate:+panDeltaY}}};
myChart.setOption(option);
}
});
});
</script>

</body>

</html>"
9,bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Bar Chart that visualizes the Units Produced for each Crop Type in 2020. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,advanced view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Agricultural Production Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
  <div id=""chart"" style=""width: 800px; height: 600px;""></div>

<script>

fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
.then(response => response.text())
.then(data => {
    const rows = data.split('\n').slice(1);
    const filteredData = rows.filter(row => row.split(',')[0] === '2020');
    const cropTypes = filteredData.map(row => row.split(',')[1]);
    const unitsProduced = filteredData.map(row => +row.split(',')[2]);

const chartDom = document.getElementById('chart');
const myChart = echarts.init(chartDom);
const option = {
tooltip: {
trigger: 'axis',
axisPointer: {type: 'shadow'}
},
legend: {},
grid:{left:'3%',right:'4%',bottom:'3%',containLabel:true},
xAxis:[
{
type:'category',
data:['Crop Type'],
axisTick:{alignWithLabel:true}
}
],
yAxis:[
{
type : 'value'
}
],
series:[
{
name:'',
type:'bar',
barWidth : '60%',
data:[]
}
]
};

option.xAxis[0].data=cropTypes;
option.series[0].data=unitsProduced;

myChart.setOption(option);

myChart.on('mousedown', function (params) {
if (params.componentType === 'series') {
const seriesIndex=params.seriesIndex;
const dataIndex=params.dataIndex;
if(seriesIndex==0){
cropTypes.splice(dataIndex,1);
unitsProduced.splice(dataIndex,1);
cropTypes.unshift(params.name)
unitsProduced.unshift(params.value)
option.xAxis[0].data=cropTypes;
option.series[seriesIndex].data=unitsProduced
myChart.setOption(option);

}

}

});

});

</script>

</body>

</html>"
10,bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Bar Chart that visualizes the Units Produced for each Crop Type in 2020. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Units Produced.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Agricultural Production Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <select id=""sort-select"">
        <option value=""asc"">Ascending</option>
        <option value=""desc"">Descending</option>
    </select>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const chartData = rows.filter(row => row[0] === '2020')
                    .map(row => ({ name: row[1], value: parseInt(row[2]) }));

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    title: {
                        text: 'Units Produced for each Crop Type in 2020'
                    },
                    xAxis: {
                        type: 'category',
                        data: chartData.map(data => data.name)
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            type: 'bar',
                            data: chartData.map(data => data.value),
                            animationDuration: 1000
                        }
                    ]
                };

                chart.setOption(option);

                document.getElementById('sort-select').addEventListener('change', () => {
                    const sortValue = document.getElementById('sort-select').value;
                    chartData.sort((a, b) => sortValue === 'asc' ? a.value - b.value : b.value - a.value);
                    chart.setOption({
                        xAxis: {
                            data: chartData.map(data => data.name)
                        },
                        series: [
                            {
                                data: chartData.map(data => data.value)
                            }
                        ]
                    });
                });
            });
    </script>
</body>
</html>
```"
