Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Agricultural Production Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: inline-block;
      vertical-align: top;
    }
    .scatterplot {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
    .barchart {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart"">
    <svg class=""scatterplot""></svg>
  </div>
  <div class=""chart"">
    <svg class=""barchart""></svg>
  </div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svgScatterplot = d3.select("".scatterplot"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const svgBarchart = d3.select("".barchart"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
      data.forEach(d => {
        d[""Year""] = +d[""Year""];
        d[""Units Produced""] = +d[""Units Produced""];
        d[""Revenue""] = +d[""Revenue""];
        d[""Production Cost""] = +d[""Production Cost""];
        d[""Profit""] = +d[""Profit""];
        d[""Yield""] = +d[""Yield""];
        d[""Number of Farms""] = +d[""Number of Farms""];
        d[""Export Volume""] = +d[""Export Volume""];
      });

      // Scatterplot
      const xScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Units Produced""])])
        .range([0, width]);

      const yScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Revenue""])])
        .range([height, 0]);

      svgScatterplot.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScaleScatterplot(d[""Units Produced""]))
        .attr(""cy"", d => yScaleScatterplot(d[""Revenue""]))
        .attr(""r"", 5)
        .attr(""fill"", ""blue"");

      svgScatterplot.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleScatterplot));

      svgScatterplot.append(""g"")
        .call(d3.axisLeft(yScaleScatterplot));

      // Barchart
      const xScaleBarchart = d3.scaleBand()
        .domain(data.map(d => d[""Crop Type""]))
        .range([0, width])
        .padding(0.2);

      const yScaleBarchart = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Profit""])])
        .range([height, 0]);

      svgBarchart.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", d => xScaleBarchart(d[""Crop Type""]))
        .attr(""y"", d => yScaleBarchart(d[""Profit""]))
        .attr(""width"", xScaleBarchart.bandwidth())
        .attr(""height"", d => height - yScaleBarchart(d[""Profit""]))
        .attr(""fill"", ""blue"");

      svgBarchart.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleBarchart));

      svgBarchart.append(""g"")
        .call(d3.axisLeft(yScaleBarchart));
    });
  </script>
</body>
</html>
```"
2,scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Agricultural Production Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: inline-block;
      vertical-align: top;
    }
    .scatterplot {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
    .barchart {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart scatterplot"" id=""scatterplot""></div>
  <div class=""chart barchart"" id=""barchart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svgScatterplot = d3.select(""#scatterplot"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const svgBarchart = d3.select(""#barchart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    let data = [];
    let brush = d3.brush()
      .extent([[0, 0], [width, height]])
      .on(""brush end"", brushed);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(csv => {
      data = csv.map(d => ({
        Year: +d[""Year""],
        [""Crop Type""]: d[""Crop Type""],
        [""Units Produced""]: +d[""Units Produced""],
        Revenue: +d[""Revenue""],
        [""Production Cost""]: +d[""Production Cost""],
        Profit: +d[""Profit""],
        Yield: +d[""Yield""],
        [""Number of Farms""]: +d[""Number of Farms""],
        [""Export Volume""]: +d[""Export Volume""]
      }));

      const xScaleScatterplot = d3.scaleLinear()
        .domain(d3.extent(data, d => d[""Units Produced""]))
        .range([0, width]);

      const yScaleScatterplot = d3.scaleLinear()
        .domain(d3.extent(data, d => d[""Revenue""]))
        .range([height, 0]);

      const xScaleBarchart = d3.scaleBand()
        .domain(data.map(d => d[""Crop Type""]))
        .range([0, width])
        .padding(0.2);

      const yScaleBarchart = d3.scaleLinear()
        .domain(d3.extent(data, d => d[""Units Produced""]))
        .range([height, 0]);

      svgScatterplot.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScaleScatterplot(d[""Units Produced""]))
        .attr(""cy"", d => yScaleScatterplot(d[""Revenue""]))
        .attr(""r"", 5)
        .attr(""fill"", ""steelblue"");

      svgScatterplot.selectAll(""rect"")
        .data([null])
        .enter()
        .append(""rect"")
        .attr(""x"", 0)
        .attr(""y"", 0)
        .attr(""width"", width)
        .attr(""height"", height)
        .attr(""fill"", ""none"")
        .attr(""pointer-events"", ""all"")
        .call(brush);

      svgBarchart.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", d => xScaleBarchart(d[""Crop Type""]))
        .attr(""y"", d => yScaleBarchart(d[""Units Produced""]))
        .attr(""width"", xScaleBarchart.bandwidth())
        .attr(""height"", d => height - yScaleBarchart(d[""Units Produced""]))
        .attr(""fill"", ""steelblue"");

      function brushed() {
        const selection = d3.event.selection;
        if (selection) {
          const minX = xScaleScatterplot.invert(selection[0][0]);
          const maxX = xScaleScatterplot.invert(selection[1][0]);
          const minY = yScaleScatterplot.invert(selection[1][1]);
          const maxY = yScaleScatterplot.invert(selection[0][1]);

          svgScatterplot.selectAll(""circle"")
            .classed(""selected"", d => d[""Units Produced""] >= minX && d[""Units Produced""] <= maxX && d[""Revenue""] >= minY && d[""Revenue""] <= maxY);

          svgBarchart.selectAll(""rect"")
            .classed(""selected"", d => d[""Units Produced""] >= minX && d[""Units Produced""] <= maxX && d[""Revenue""] >= minY && d[""Revenue""] <= maxY);
        } else {
          svgScatterplot.selectAll(""circle"")
            .classed(""selected"", false);

          svgBarchart.selectAll(""rect"")
            .classed(""selected"", false);
        }
      }
    });

    d3.selection.prototype.classedAll = function(className) {
      return this.classed(className, true);
    };
  </script>
</body>
</html>
```"
3,line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Produced , while the pie chart represents the distribution of Revenue.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Agricultural Production Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: block;
      margin: 20px auto;
    }
  </style>
</head>
<body>
  <div id=""line-chart"" class=""chart""></div>
  <div id=""pie-chart"" class=""chart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const lineChart = d3.select(""#line-chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const pieChart = d3.select(""#pie-chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left + width / 2}, ${margin.top + height / 2})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
      data.forEach(d => {
        d[""Year""] = +d[""Year""];
        d[""Units Produced""] = +d[""Units Produced""];
        d[""Revenue""] = +d[""Revenue""];
      });

      const xScale = d3.scaleLinear()
        .domain(d3.extent(data, d => d[""Year""]))
        .range([0, width]);

      const yScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Units Produced""])])
        .range([height, 0]);

      lineChart.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

      lineChart.append(""g"")
        .call(d3.axisLeft(yScale));

      lineChart.append(""path"")
        .datum(data)
        .attr(""fill"", ""none"")
        .attr(""stroke"", ""steelblue"")
        .attr(""stroke-width"", 1.5)
        .attr(""d"", d3.line()
          .x(d => xScale(d[""Year""]))
          .y(d => yScale(d[""Units Produced""])));

      const pie = d3.pie()
        .value(d => d[""Revenue""]);

      const arc = d3.arc()
        .outerRadius(width / 4)
        .innerRadius(0);

      const arcs = pieChart.selectAll(""arc"")
        .data(pie(data))
        .enter()
        .append(""path"")
        .attr(""fill"", (d, i) => d3.schemeCategory10[i])
        .attr(""d"", arc);

      pieChart.append(""text"")
        .attr(""text-anchor"", ""middle"")
        .attr(""font-size"", 16)
        .text(""Revenue Distribution"");
    });
  </script>
</body>
</html>
```"
4,line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Produced , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Agricultural Production Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: block;
    }
    .line-chart {
      width: 800px;
      height: 400px;
      margin: 50px auto;
    }
    .pie-chart {
      width: 800px;
      height: 400px;
      margin: 50px auto;
    }
  </style>
</head>
<body>
  <div class=""chart line-chart""></div>
  <div class=""chart pie-chart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const lineChart = d3.select('.line-chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    const pieChart = d3.select('.pie-chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left + width / 2}, ${margin.top + height / 2})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
      .then(data => {
        data.forEach(d => {
          d['Year'] = +d['Year'];
          d['Units Produced'] = +d['Units Produced'];
          d['Revenue'] = +d['Revenue'];
        });

        const xScale = d3.scaleLinear()
          .domain(d3.extent(data, d => d['Year']))
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Units Produced'])])
          .range([height, 0]);

        const line = d3.line()
          .x(d => xScale(d['Year']))
          .y(d => yScale(d['Units Produced']));

        lineChart.append('path')
          .datum(data)
          .attr('fill', 'none')
          .attr('stroke', 'steelblue')
          .attr('stroke-width', 1.5)
          .attr('d', line);

        lineChart.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        lineChart.append('g')
          .call(d3.axisLeft(yScale));

        const brush = d3.brushX()
          .extent([[0, 0], [width, height]])
          .on('brush end', brushed);

        lineChart.append('g')
          .attr('class', 'brush')
          .call(brush);

        function brushed() {
          const selection = d3.event.selection;
          if (selection) {
            const minX = xScale.invert(selection[0]);
            const maxX = xScale.invert(selection[1]);
            const filteredData = data.filter(d => d['Year'] >= minX && d['Year'] <= maxX);

            const pieData = d3.rollup(filteredData, v => d3.sum(v, d => d['Revenue']), d => d['Crop Type']);

            const pie = d3.pie()
              .value(d => d[1]);

            const arc = d3.arc()
              .outerRadius(Math.min(width, height) / 2 - 10)
              .innerRadius(0);

            pieChart.selectAll('path')
              .remove();

            pieChart.selectAll('path')
              .data(pie(pieData))
              .enter()
              .append('path')
              .attr('d', arc)
              .attr('fill', (d, i) => d3.schemeCategory10[i]);
          }
        }
      });
  </script>
</body>
</html>
```"
5,scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Units Produced, Revenue, Profit, Production Cost, Yield, and Export Volume. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot Matrix</title>
  <style>
    .brush .extent {
      fill-opacity: .3;
      stroke: #fff;
    }
  </style>
</head>
<body>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 100, right: 100, bottom: 100, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 800 - margin.top - margin.bottom;
    const dimensions = [""Units Produced"", ""Revenue"", ""Profit"", ""Production Cost"", ""Yield"", ""Export Volume""];
    const size = 200;

    const svg = d3.select(""body"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
      data.forEach(d => {
        dimensions.forEach(dim => {
          d[dim] = +d[dim];
        });
      });

      const x = dimensions.map(dim => {
        return d3.scaleLinear()
          .domain(d3.extent(data, d => d[dim]))
          .range([0, size]);
      });

      const y = dimensions.map(dim => {
        return d3.scaleLinear()
          .domain(d3.extent(data, d => d[dim]))
          .range([size, 0]);
      });

      const brush = d3.brush()
        .extent([[0, 0], [size, size]])
        .on(""brush"", brushed)
        .on(""end"", brushended);

      const cell = svg.selectAll("".cell"")
        .data(cross(dimensions, dimensions))
        .enter().append(""g"")
        .attr(""class"", ""cell"")
        .attr(""transform"", d => `translate(${d.i * size}, ${d.j * size})`);

      cell.append(""rect"")
        .attr(""class"", ""frame"")
        .attr(""x"", 0)
        .attr(""y"", 0)
        .attr(""width"", size)
        .attr(""height"", size);

      cell.append(""g"")
        .attr(""class"", ""brush"")
        .each(function(d) {
          d3.select(this).call(brush);
        });

      cell.append(""g"")
        .attr(""class"", ""scatter"")
        .selectAll(""circle"")
        .data(data)
        .enter().append(""circle"")
        .attr(""cx"", d => x[dimensions.indexOf(d.x)](d[d.x]))
        .attr(""cy"", d => y[dimensions.indexOf(d.y)](d[d.y]))
        .attr(""r"", 3);

      function brushed() {
        const selection = d3.event.selection;
        if (selection) {
          const [[x0, y0], [x1, y1]] = selection;
          svg.selectAll("".scatter circle"")
            .classed(""selected"", d => {
              const i = dimensions.indexOf(d.x);
              const j = dimensions.indexOf(d.y);
              return x[i](d[d.x]) >= x0 && x[i](d[d.x]) <= x1 && y[j](d[d.y]) >= y0 && y[j](d[d.y]) <= y1;
            });
        } else {
          svg.selectAll("".scatter circle"").classed(""selected"", false);
        }
      }

      function brushended() {
        if (!d3.event.selection) {
          svg.selectAll("".scatter circle"").classed(""selected"", false);
        }
      }
    });

    function cross(a, b) {
      const c = [];
      for (let i = 0; i < a.length; i++) {
        for (let j = 0; j < b.length; j++) {
          c.push({ x: a[i], y: b[j], i, j });
        }
      }
      return c;
    }
  </script>
</body>
</html>
```"
6,scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a brushable Scatterplot that visualizes the relationship between Units Produced and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Agricultural Production Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .brush {
      fill: #ccc;
    }
    .brush .extent {
      fill-opacity: .3;
      stroke: #fff;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <div id=""table""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 200, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Units Produced""] = +d[""Units Produced""];
          d.Revenue = +d.Revenue;
        });

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Units Produced""])])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Revenue)])
          .range([height, 0]);

        svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d[""Units Produced""]))
          .attr(""cy"", d => yScale(d.Revenue))
          .attr(""r"", 5);

        const brush = d3.brush()
          .extent([[0, 0], [width, height]])
          .on(""brush"", brushed);

        svg.append(""g"")
          .call(brush);

        function brushed({ selection }) {
          const selectedData = data.filter(d => {
            const x = xScale(d[""Units Produced""]);
            const y = yScale(d.Revenue);
            return x >= selection[0][0] && x <= selection[1][0] && y <= selection[0][1] && y >= selection[1][1];
          });

          const table = d3.select(""#table"");
          table.selectAll(""table"").remove();

          const tableHtml = table.append(""table"");
          const thead = tableHtml.append(""thead"");
          const tbody = tableHtml.append(""tbody"");

          const columns = Object.keys(data[0]);
          thead.selectAll(""th"")
            .data(columns)
            .enter()
            .append(""th"")
            .text(d => d);

          const rows = tbody.selectAll(""tr"")
            .data(selectedData.slice(0, 20))
            .enter()
            .append(""tr"");

          rows.selectAll(""td"")
            .data(d => columns.map(c => d[c]))
            .enter()
            .append(""td"")
            .text(d => d);
        }
      });
  </script>
</body>
</html>
```"
7,bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a horizontal Bar Chart that shows Crop Type and Units Produced, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Agricultural Production</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      position: relative;
      display: inline-block;
    }
    .minimap {
      position: absolute;
      top: 0;
      right: 0;
      width: 100px;
      height: 300px;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 120, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 300 - margin.top - margin.bottom;
    const minimapWidth = 100;
    const minimapHeight = height;

    const svg = d3.select("".chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right + minimapWidth)
      .attr(""height"", height + margin.top + margin.bottom);

    const g = svg.append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const minimapG = svg.append(""g"")
      .attr(""transform"", `translate(${width + margin.left + 20}, ${margin.top})`)
      .attr(""class"", ""minimap"");

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
      data.forEach(d => {
        d[""Units Produced""] = +d[""Units Produced""];
      });

      const cropTypes = [...new Set(data.map(d => d[""Crop Type""]))];

      const x = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Units Produced""])])
        .range([0, width]);

      const y = d3.scaleBand()
        .domain(cropTypes)
        .range([0, height])
        .padding(0.2);

      const bars = g.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", 0)
        .attr(""y"", d => y(d[""Crop Type""]))
        .attr(""width"", d => x(d[""Units Produced""]))
        .attr(""height"", y.bandwidth());

      const minimapBars = minimapG.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", 0)
        .attr(""y"", d => y(d[""Crop Type""]))
        .attr(""width"", minimapWidth)
        .attr(""height"", y.bandwidth())
        .attr(""fill"", ""lightgray"");

      const xAxis = d3.axisBottom(x);
      g.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(xAxis);

      const yAxis = d3.axisLeft(y);
      g.append(""g"")
        .call(yAxis);
    });
  </script>
</body>
</html>
```"
