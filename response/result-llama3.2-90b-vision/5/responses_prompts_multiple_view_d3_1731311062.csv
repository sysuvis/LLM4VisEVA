Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Employee Performance Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: inline-block;
      vertical-align: top;
    }
    .scatterplot {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
    .barchart {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart scatterplot"" id=""scatterplot""></div>
  <div class=""chart barchart"" id=""barchart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svgScatterplot = d3.select(""#scatterplot"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const svgBarchart = d3.select(""#barchart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Sales Figures""] = +d[""Sales Figures""];
          d[""Hours Worked""] = +d[""Hours Worked""];
          d[""Revenue""] = +d[""Revenue""];
          d[""Profit""] = +d[""Profit""];
          d[""Employee Satisfaction Score""] = +d[""Employee Satisfaction Score""];
          d[""Number of Employees""] = +d[""Number of Employees""];
        });

        const xScaleScatterplot = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Hours Worked""])])
          .range([0, width]);

        const yScaleScatterplot = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Sales Figures""])])
          .range([height, 0]);

        svgScatterplot.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScaleScatterplot(d[""Hours Worked""]))
          .attr(""cy"", d => yScaleScatterplot(d[""Sales Figures""]))
          .attr(""r"", 5);

        svgScatterplot.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScaleScatterplot));

        svgScatterplot.append(""g"")
          .call(d3.axisLeft(yScaleScatterplot));

        const xScaleBarchart = d3.scaleBand()
          .domain(data.map(d => d.Department))
          .range([0, width])
          .padding(0.2);

        const yScaleBarchart = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Profit""])])
          .range([height, 0]);

        svgBarchart.selectAll(""rect"")
          .data(data)
          .enter()
          .append(""rect"")
          .attr(""x"", d => xScaleBarchart(d.Department))
          .attr(""y"", d => yScaleBarchart(d[""Profit""]))
          .attr(""width"", xScaleBarchart.bandwidth())
          .attr(""height"", d => height - yScaleBarchart(d[""Profit""]));

        svgBarchart.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScaleBarchart));

        svgBarchart.append(""g"")
          .call(d3.axisLeft(yScaleBarchart));
      });
  </script>
</body>
</html>
```"
2,scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Employee Performance Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: inline-block;
      vertical-align: top;
    }
    .scatterplot {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
    .barchart {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
    .brush rect {
      fill: steelblue;
      fill-opacity: .3;
    }
    .brush .extent {
      fill-opacity: .3;
      stroke: #fff;
      shape-rendering: crispEdges;
    }
  </style>
</head>
<body>
  <div class=""chart scatterplot"" id=""scatterplot""></div>
  <div class=""chart barchart"" id=""barchart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svgScatterplot = d3.select(""#scatterplot"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const svgBarchart = d3.select(""#barchart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
      data.forEach(d => {
        d[""Sales Figures""] = +d[""Sales Figures""];
        d[""Hours Worked""] = +d[""Hours Worked""];
        d[""Revenue""] = +d[""Revenue""];
        d[""Profit""] = +d[""Profit""];
        d[""Employee Satisfaction Score""] = +d[""Employee Satisfaction Score""];
        d[""Number of Employees""] = +d[""Number of Employees""];
      });

      const xScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Sales Figures""])])
        .range([0, width]);

      const yScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Hours Worked""])])
        .range([height, 0]);

      const xScaleBarchart = d3.scaleBand()
        .domain(data.map(d => d.Department))
        .range([0, width])
        .padding(0.2);

      const yScaleBarchart = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Revenue""])])
        .range([height, 0]);

      svgScatterplot.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScaleScatterplot(d[""Sales Figures""]))
        .attr(""cy"", d => yScaleScatterplot(d[""Hours Worked""]))
        .attr(""r"", 5)
        .attr(""fill"", ""steelblue"");

      svgBarchart.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", d => xScaleBarchart(d.Department))
        .attr(""y"", d => yScaleBarchart(d[""Revenue""]))
        .attr(""width"", xScaleBarchart.bandwidth())
        .attr(""height"", d => height - yScaleBarchart(d[""Revenue""]))
        .attr(""fill"", ""steelblue"");

      const brush = d3.brush()
        .extent([[0, 0], [width, height]])
        .on(""brush"", brushed)
        .on(""end"", brushended);

      svgScatterplot.call(brush);

      function brushed() {
        const selection = d3.event.selection;
        if (selection) {
          const minX = selection[0][0];
          const maxX = selection[1][0];
          const minY = selection[0][1];
          const maxY = selection[1][1];

          svgScatterplot.selectAll(""circle"")
            .classed(""selected"", d => {
              const x = xScaleScatterplot(d[""Sales Figures""]);
              const y = yScaleScatterplot(d[""Hours Worked""]);
              return x >= minX && x <= maxX && y >= minY && y <= maxY;
            });

          svgBarchart.selectAll(""rect"")
            .classed(""selected"", d => {
              const x = xScaleScatterplot(d[""Sales Figures""]);
              const y = yScaleScatterplot(d[""Hours Worked""]);
              return x >= minX && x <= maxX && y >= minY && y <= maxY;
            });
        }
      }

      function brushended() {
        if (!d3.event.selection) {
          svgScatterplot.selectAll(""circle"")
            .classed(""selected"", false);

          svgBarchart.selectAll(""rect"")
            .classed(""selected"", false);
        }
      }
    });
  </script>
</body>
</html>
```"
3,line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Sales Figures , while the pie chart represents the distribution of Hours Worked.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Employee Performance Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: block;
      margin: 20px auto;
    }
  </style>
</head>
<body>
  <div id=""line-chart"" class=""chart""></div>
  <div id=""pie-chart"" class=""chart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 300 - margin.top - margin.bottom;

    const lineChart = d3.select(""#line-chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const pieChart = d3.select(""#pie-chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left + width / 2}, ${margin.top + height / 2})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
      data.forEach(d => {
        d[""Sales Figures""] = +d[""Sales Figures""];
        d[""Hours Worked""] = +d[""Hours Worked""];
      });

      const xScale = d3.scaleTime()
        .domain(d3.extent(data, d => new Date(d.Year)))
        .range([0, width]);

      const yScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Sales Figures""])])
        .range([height, 0]);

      lineChart.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

      lineChart.append(""g"")
        .call(d3.axisLeft(yScale));

      lineChart.append(""path"")
        .datum(data)
        .attr(""fill"", ""none"")
        .attr(""stroke"", ""steelblue"")
        .attr(""stroke-width"", 1.5)
        .attr(""d"", d3.line()
          .x(d => xScale(new Date(d.Year)))
          .y(d => yScale(d[""Sales Figures""])));

      const pie = d3.pie()
        .value(d => d[""Hours Worked""]);

      const arc = d3.arc()
        .outerRadius(width / 2 - 20)
        .innerRadius(0);

      const arcs = pieChart.selectAll(""arc"")
        .data(pie(data))
        .enter()
        .append(""path"")
        .attr(""fill"", (d, i) => d3.schemeCategory10[i])
        .attr(""d"", arc);

      pieChart.append(""text"")
        .attr(""text-anchor"", ""middle"")
        .attr(""font-size"", 16)
        .text(""Hours Worked Distribution"");
    });
  </script>
</body>
</html>
```"
4,line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Sales Figures , while the pie chart represents the distribution of Hours Worked. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Hours Worked for the selected group.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Employee Performance Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: block;
    }
    .line-chart {
      width: 800px;
      height: 400px;
      margin: 20px auto;
    }
    .pie-chart {
      width: 800px;
      height: 400px;
      margin: 20px auto;
    }
  </style>
</head>
<body>
  <div class=""chart line-chart""></div>
  <div class=""chart pie-chart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const lineChart = d3.select('.line-chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    const pieChart = d3.select('.pie-chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left + width / 2}, ${margin.top + height / 2})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
      .then(data => {
        data.forEach(d => {
          d['Sales Figures'] = +d['Sales Figures'];
          d['Hours Worked'] = +d['Hours Worked'];
        });

        const xScale = d3.scaleTime()
          .domain(d3.extent(data, d => d.Year))
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Sales Figures'])])
          .range([height, 0]);

        lineChart.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        lineChart.append('g')
          .call(d3.axisLeft(yScale));

        const line = d3.line()
          .x(d => xScale(d.Year))
          .y(d => yScale(d['Sales Figures']));

        lineChart.append('path')
          .datum(data)
          .attr('fill', 'none')
          .attr('stroke', 'steelblue')
          .attr('stroke-width', 1.5)
          .attr('d', line);

        const brush = d3.brushX()
          .extent([[0, 0], [width, height]])
          .on('brush', brushed);

        lineChart.append('g')
          .attr('class', 'brush')
          .call(brush);

        function brushed({ selection }) {
          if (selection) {
            const selectedData = data.filter(d => {
              const x = xScale(d.Year);
              return x >= selection[0] && x <= selection[1];
            });

            const hoursWorked = selectedData.map(d => d['Hours Worked']);
            const pieData = d3.rollup(hoursWorked, v => d3.sum(v, d => d), d => d);

            const pieScale = d3.scaleLinear()
              .domain([0, d3.max(hoursWorked)])
              .range([0, 2 * Math.PI]);

            const arc = d3.arc()
              .innerRadius(0)
              .outerRadius(Math.min(width, height) / 2 - 20);

            pieChart.selectAll('path')
              .remove();

            pieChart.selectAll('path')
              .data(pieData)
              .enter()
              .append('path')
              .attr('fill', 'steelblue')
              .attr('d', (d, i) => {
                const startAngle = pieScale(d[1]);
                const endAngle = pieScale(d[1] + d[1]);
                return arc({ startAngle, endAngle });
              });
          }
        }
      });
  </script>
</body>
</html>
```"
5,scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Sales Figures, Revenue, Profit, Hours Worked, and Employee Satisfaction. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot Matrix</title>
  <style>
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
    .brush .extent {
      stroke: #fff;
      fill-opacity: .125;
      shape-rendering: crispEdges;
    }
  </style>
</head>
<body>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 100, right: 100, bottom: 100, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 800 - margin.top - margin.bottom;
    const dimensions = [""Sales Figures"", ""Revenue"", ""Profit"", ""Hours Worked"", ""Employee Satisfaction Score""];
    const size = 200;

    const svg = d3.select(""body"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
      data.forEach(d => {
        dimensions.forEach(dim => {
          d[dim] = +d[dim];
        });
      });

      const x = dimensions.map(d => {
        return d3.scaleLinear()
          .domain(d3.extent(data, p => p[d]))
          .range([0, size]);
      });

      const y = dimensions.map(d => {
        return d3.scaleLinear()
          .domain(d3.extent(data, p => p[d]))
          .range([size, 0]);
      });

      const brush = d3.brush()
        .extent([[0, 0], [size, size]])
        .on(""start"", brushstart)
        .on(""brush"", brushmove)
        .on(""end"", brushend);

      svg.selectAll(""g"")
        .data(cross(dimensions, dimensions))
        .enter()
        .append(""g"")
        .attr(""transform"", (d, i) => `translate(${(i % dimensions.length) * (size + 20)}, ${(Math.floor(i / dimensions.length)) * (size + 20)})`)
        .each(function(d) {
          const group = d3.select(this);
          const xScale = x[dimensions.indexOf(d[0])];
          const yScale = y[dimensions.indexOf(d[1])];

          group.append(""rect"")
            .attr(""x"", 0)
            .attr(""y"", 0)
            .attr(""width"", size)
            .attr(""height"", size)
            .attr(""fill"", ""none"")
            .attr(""stroke"", ""black"");

          group.selectAll(""circle"")
            .data(data)
            .enter()
            .append(""circle"")
            .attr(""cx"", d => xScale(d[d[0]]))
            .attr(""cy"", d => yScale(d[d[1]]))
            .attr(""r"", 3)
            .attr(""fill"", ""steelblue"");

          group.append(""g"")
            .attr(""transform"", `translate(0, ${size})`)
            .call(d3.axisBottom(xScale));

          group.append(""g"")
            .call(d3.axisLeft(yScale));

          group.append(""g"")
            .call(brush);
        });

      function brushstart() {
        svg.selectAll(""circle"")
          .classed(""hidden"", true);
      }

      function brushmove() {
        const s = d3.event.selection;
        if (s) {
          const [x0, y0] = s[0];
          const [x1, y1] = s[1];
          svg.selectAll(""circle"")
            .classed(""hidden"", function(d) {
              const xScale = x[dimensions.indexOf(d3.select(this.parentNode).datum()[0])];
              const yScale = y[dimensions.indexOf(d3.select(this.parentNode).datum()[1])];
              const cx = xScale(d[d3.select(this.parentNode).datum()[0]]);
              const cy = yScale(d[d3.select(this.parentNode).datum()[1]]);
              return !(cx >= x0 && cx <= x1 && cy >= y0 && cy <= y1);
            });
        }
      }

      function brushend() {
        if (!d3.event.selection) {
          svg.selectAll(""circle"")
            .classed(""hidden"", false);
        }
      }
    });

    function cross(a, b) {
      const c = [];
      for (let i = 0; i < a.length; i++) {
        for (let j = 0; j < b.length; j++) {
          c.push([a[i], b[j]]);
        }
      }
      return c;
    }
  </script>
</body>
</html>
```"
6,scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a brushable Scatterplot that visualizes the relationship between Sales Figures and Hours Worked. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Brushable Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      position: relative;
      display: inline-block;
    }
    .chart .brush {
      fill: #ccc;
    }
    .chart .brush .extent {
      fill-opacity: 0.3;
      stroke: #fff;
      shape-rendering: crispEdges;
    }
    .chart .axis path,
    .chart .axis line {
      fill: none;
      stroke: #000;
      shape-rendering: crispEdges;
    }
    .chart .axis text {
      font-size: 12px;
    }
    .table {
      position: absolute;
      top: 0;
      right: 0;
      background-color: #fff;
      border: 1px solid #ddd;
      padding: 10px;
    }
    .table th,
    .table td {
      padding: 5px;
      border-bottom: 1px solid #ddd;
    }
    .table th {
      font-weight: bold;
    }
  </style>
</head>
<body>
  <div class=""chart"" style=""width: 800px; height: 600px;""></div>
  <div class=""table"" style=""display: none;""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 200, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select("".chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const table = d3.select("".table"");

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
      data.forEach(d => {
        d[""Sales Figures""] = +d[""Sales Figures""];
        d[""Hours Worked""] = +d[""Hours Worked""];
      });

      const x = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Hours Worked""])])
        .range([0, width]);

      const y = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Sales Figures""])])
        .range([height, 0]);

      const xAxis = d3.axisBottom(x)
        .ticks(10)
        .tickSize(-height);

      const yAxis = d3.axisLeft(y)
        .ticks(10)
        .tickSize(-width);

      svg.append(""g"")
        .attr(""class"", ""axis"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(xAxis);

      svg.append(""g"")
        .attr(""class"", ""axis"")
        .call(yAxis);

      const brush = d3.brush()
        .extent([[0, 0], [width, height]])
        .on(""brush"", brushed);

      svg.append(""g"")
        .attr(""class"", ""brush"")
        .call(brush);

      svg.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => x(d[""Hours Worked""]))
        .attr(""cy"", d => y(d[""Sales Figures""]))
        .attr(""r"", 5);

      function brushed(event) {
        const selection = event.selection;
        if (selection) {
          const minX = x.invert(selection[0][0]);
          const maxX = x.invert(selection[1][0]);
          const minY = y.invert(selection[1][1]);
          const maxY = y.invert(selection[0][1]);

          const filteredData = data.filter(d => d[""Hours Worked""] >= minX && d[""Hours Worked""] <= maxX && d[""Sales Figures""] >= minY && d[""Sales Figures""] <= maxY);

          table.style(""display"", ""block"");
          table.selectAll(""tr"").remove();

          const tableHeader = table.append(""tr"");
          tableHeader.append(""th"").text(""Year"");
          tableHeader.append(""th"").text(""Department"");
          tableHeader.append(""th"").text(""Sales Figures"");
          tableHeader.append(""th"").text(""Hours Worked"");
          tableHeader.append(""th"").text(""Revenue"");
          tableHeader.append(""th"").text(""Profit"");
          tableHeader.append(""th"").text(""Employee Satisfaction Score"");
          tableHeader.append(""th"").text(""Number of Employees"");

          filteredData.slice(0, 20).forEach(d => {
            const row = table.append(""tr"");
            row.append(""td"").text(d.Year);
            row.append(""td"").text(d.Department);
            row.append(""td"").text(d[""Sales Figures""]);
            row.append(""td"").text(d[""Hours Worked""]);
            row.append(""td"").text(d.Revenue);
            row.append(""td"").text(d.Profit);
            row.append(""td"").text(d[""Employee Satisfaction Score""]);
            row.append(""td"").text(d[""Number of Employees""]);
          });
        } else {
          table.style(""display"", ""none"");
        }
      }
    });
  </script>
</body>
</html>
```"
7,bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a horizontal Bar Chart that shows Department and Sales Figures, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Department Sales Figures</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      position: relative;
      display: inline-block;
    }
    .minimap {
      position: absolute;
      top: 0;
      right: 0;
      width: 100px;
      height: 300px;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 120, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 300 - margin.top - margin.bottom;
    const minimapWidth = 100;
    const minimapHeight = height;

    const svg = d3.select("".chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right + minimapWidth)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const minimapSvg = svg
      .append(""g"")
      .attr(""transform"", `translate(${width + margin.right}, ${margin.top})`)
      .attr(""class"", ""minimap"");

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Sales Figures""] = +d[""Sales Figures""];
        });

        const departments = [...new Set(data.map(d => d.Department))];

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Sales Figures""])])
          .range([0, width]);

        const yScale = d3.scaleBand()
          .domain(departments)
          .range([0, height])
          .padding(0.2);

        const bars = svg.selectAll(""rect"")
          .data(data.sort((a, b) => b[""Sales Figures""] - a[""Sales Figures""]))
          .enter()
          .append(""rect"")
          .attr(""x"", 0)
          .attr(""y"", d => yScale(d.Department))
          .attr(""width"", d => xScale(d[""Sales Figures""]))
          .attr(""height"", yScale.bandwidth());

        const minimapBars = minimapSvg.selectAll(""rect"")
          .data(data.sort((a, b) => b[""Sales Figures""] - a[""Sales Figures""]))
          .enter()
          .append(""rect"")
          .attr(""x"", 0)
          .attr(""y"", d => yScale(d.Department))
          .attr(""width"", d => xScale(d[""Sales Figures""]) / 8)
          .attr(""height"", yScale.bandwidth());

        const xAxis = d3.axisBottom(xScale)
          .ticks(5)
          .tickFormat(d3.format("".0s""));

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(xAxis);

        const yAxis = d3.axisLeft(yScale);

        svg.append(""g"")
          .call(yAxis);
      });
  </script>
</body>
</html>
```"
