Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Financial Data Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .tooltip {
      position: absolute;
      padding: 10px;
      font-size: 14px;
      background-color: #fff;
      border: 1px solid #ddd;
      border-radius: 5px;
      pointer-events: none;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('svg')
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
      .then(data => {
        data.forEach(d => {
          d['Net Income'] = +d['Net Income'];
          d.Revenue = +d.Revenue;
        });

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Revenue)])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Net Income'])])
          .range([height, 0]);

        const xAxis = d3.axisBottom(xScale)
          .ticks(10);

        const yAxis = d3.axisLeft(yScale)
          .ticks(10);

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(xAxis);

        svg.append('g')
          .call(yAxis);

        svg.append('text')
          .attr('transform', `translate(${width / 2}, ${height + 30})`)
          .style('text-anchor', 'middle')
          .text('Revenue');

        svg.append('text')
          .attr('transform', `rotate(-90) translate(${-height / 2}, ${-30})`)
          .style('text-anchor', 'middle')
          .text('Net Income');

        const tooltip = d3.select('body')
          .append('div')
          .attr('class', 'tooltip')
          .style('opacity', 0);

        svg.selectAll('circle')
          .data(data)
          .enter()
          .append('circle')
          .attr('cx', d => xScale(d.Revenue))
          .attr('cy', d => yScale(d['Net Income']))
          .attr('r', 5)
          .on('mouseover', (event, d) => {
            tooltip.transition()
              .duration(200)
              .style('opacity', 1);

            tooltip.html(`Revenue: ${d.Revenue}<br>Net Income: ${d['Net Income']}`)
              .style('left', (event.pageX + 10) + 'px')
              .style('top', (event.pageY - 10) + 'px');
          })
          .on('mouseout', () => {
            tooltip.transition()
              .duration(200)
              .style('opacity', 0);
          });
      });
  </script>
</body>
</html>
```"
2,scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Financial Data Scatterplot</title>
  <style>
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
    .brush .extent {
      fill-opacity: .3;
      stroke: #fff;
      shape-rendering: crispEdges;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Net Income""] = +d[""Net Income""];
          d.Revenue = +d.Revenue;
        });

        const x = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Revenue)])
          .range([0, width]);

        const y = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Net Income""])])
          .range([height, 0]);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(x));

        svg.append(""g"")
          .call(d3.axisLeft(y));

        const brush = d3.brush()
          .extent([[0, 0], [width, height]])
          .on(""brush end"", brushed);

        svg.append(""g"")
          .attr(""class"", ""brush"")
          .call(brush);

        svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => x(d.Revenue))
          .attr(""cy"", d => y(d[""Net Income""]))
          .attr(""r"", 5);

        function brushed(event) {
          const selection = event.selection;
          svg.selectAll(""circle"")
            .classed(""selected"", d => {
              const xValue = x(d.Revenue);
              const yValue = y(d[""Net Income""]);
              return selection[0][0] <= xValue && xValue <= selection[1][0]
                && selection[0][1] <= yValue && yValue <= selection[1][1];
            });
        }
      });
  </script>
</body>
</html>
```"
3,scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot of Net Income vs Revenue</title>
  <style>
    /* set the dimensions and margins of the graph */
    #chart {
      width: 800px;
      height: 600px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    // set the dimensions and margins of the graph
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    // append the svg object to the body of the page
    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    // read the data
    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
      // convert data types
      data.forEach(d => {
        d[""Net Income""] = +d[""Net Income""];
        d.Revenue = +d.Revenue;
      });

      // create scales
      const xScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.Revenue)])
        .range([0, width]);

      const yScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Net Income""])])
        .range([height, 0]);

      // create axis
      const xAxis = d3.axisBottom(xScale);
      const yAxis = d3.axisLeft(yScale);

      svg.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(xAxis);

      svg.append(""g"")
        .call(yAxis);

      // create scatterplot
      svg.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScale(d.Revenue))
        .attr(""cy"", d => yScale(d[""Net Income""]))
        .attr(""r"", 5);

      // add zoom functionality
      const zoom = d3.zoom()
        .scaleExtent([1, 10])
        .extent([[-Infinity, -Infinity], [Infinity, Infinity]])
        .on(""zoom"", zoomed);

      svg.call(zoom);

      function zoomed({ transform }) {
        svg.selectAll(""circle"")
          .attr(""cx"", d => transform.applyX(xScale(d.Revenue)))
          .attr(""cy"", d => transform.applyY(yScale(d[""Net Income""])));

        svg.selectAll("".x-axis"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(xAxis.scale(transform.rescaleX(xScale)));

        svg.selectAll("".y-axis"")
          .call(yAxis.scale(transform.rescaleY(yScale)));
      }
    });
  </script>
</body>
</html>
```"
4,scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Net Income and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Financial Data Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .tooltip {
      position: absolute;
      background-color: #f9f9f9;
      border: 1px solid #ccc;
      padding: 5px;
      visibility: hidden;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Net Income""] = +d[""Net Income""];
          d.Revenue = +d.Revenue;
        });

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Revenue)])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Net Income""])])
          .range([height, 0]);

        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(xAxis);

        svg.append(""g"")
          .call(yAxis);

        svg.append(""text"")
          .attr(""transform"", `translate(${width / 2}, ${height + 30})`)
          .style(""text-anchor"", ""middle"")
          .text(""Revenue"");

        svg.append(""text"")
          .attr(""transform"", `rotate(-90) translate(${-height / 2}, ${-30})`)
          .style(""text-anchor"", ""middle"")
          .text(""Net Income"");

        const tooltip = d3.select(""body"")
          .append(""div"")
          .attr(""class"", ""tooltip"")
          .style(""opacity"", 0);

        svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d.Revenue))
          .attr(""cy"", d => yScale(d[""Net Income""]))
          .attr(""r"", 5)
          .on(""mouseover"", (event, d) => {
            tooltip.transition()
              .duration(200)
              .style(""opacity"", 0.9);
            tooltip.html(`
              <strong>Company:</strong> ${d.Company}<br>
              <strong>Net Income:</strong> ${d[""Net Income""]}<br>
              <strong>Revenue:</strong> ${d.Revenue}<br>
              <a href=""https://www.google.com/search?q=${d.Company}"" target=""_blank"">Search on Google</a>
            `)
              .style(""left"", (event.pageX) + ""px"")
              .style(""top"", (event.pageY - 28) + ""px"");
          })
          .on(""mouseout"", () => {
            tooltip.transition()
              .duration(500)
              .style(""opacity"", 0);
          });
      });
  </script>
</body>
</html>
```"
5,scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot with query widgets showing the Net Income and Revenue of the given dataset. Add a slider to represent the Quarter.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Financial Data Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .slider {
      width: 300px;
    }
  </style>
</head>
<body>
  <div id=""chart""></div>
  <div id=""slider""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const slider = d3.select(""#slider"")
      .append(""input"")
      .attr(""type"", ""range"")
      .attr(""min"", 1)
      .attr(""max"", 4)
      .attr(""value"", 1)
      .attr(""class"", ""slider"");

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
      data.forEach(d => {
        d[""Net Income""] = +d[""Net Income""];
        d.Revenue = +d.Revenue;
        d.Quarter = +d.Quarter;
      });

      const xScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.Revenue)])
        .range([0, width]);

      const yScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Net Income""])])
        .range([height, 0]);

      const xAxis = d3.axisBottom(xScale);
      const yAxis = d3.axisLeft(yScale);

      svg.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(xAxis);

      svg.append(""g"")
        .call(yAxis);

      svg.append(""text"")
        .attr(""transform"", ""rotate(-90)"")
        .attr(""y"", 6)
        .attr(""dy"", "".71em"")
        .style(""text-anchor"", ""end"")
        .text(""Net Income"");

      svg.append(""text"")
        .attr(""y"", height + margin.bottom - 10)
        .attr(""x"", width / 2)
        .attr(""text-anchor"", ""middle"")
        .text(""Revenue"");

      const update = quarter => {
        const filteredData = data.filter(d => d.Quarter === quarter);

        svg.selectAll(""circle"")
          .data(filteredData, d => d.Company)
          .join(
            enter => enter.append(""circle"")
              .attr(""cx"", d => xScale(d.Revenue))
              .attr(""cy"", d => yScale(d[""Net Income""]))
              .attr(""r"", 5),
            update => update
              .attr(""cx"", d => xScale(d.Revenue))
              .attr(""cy"", d => yScale(d[""Net Income""])),
            exit => exit.remove()
          );
      };

      update(1);

      slider.on(""input"", () => {
        update(+slider.property(""value""));
      });
    });
  </script>
</body>
</html>
```"
6,scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot showing the Net Income of Alpha Inc. Add animated transitions that connect these points using lines in order.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Net Income of Alpha Inc.</title>
  <style>
    /* set the dimensions and margins of the graph */
    .graph {
      width: 600px;
      height: 400px;
      margin: 20px auto;
    }
  </style>
</head>
<body>
  <div class=""graph"" id=""graph""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    // set the dimensions and margins of the graph
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 600 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    // append the svg object to the body of the page
    const svg = d3.select(""#graph"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    // read the data
    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
      // filter the data for Alpha Inc.
      const alphaData = data.filter(d => d.Company === ""Alpha Inc."");

      // convert the data to numbers
      alphaData.forEach(d => {
        d[""Net Income""] = +d[""Net Income""];
        d[""Quarter""] = +d[""Quarter""];
      });

      // sort the data by quarter
      alphaData.sort((a, b) => a[""Quarter""] - b[""Quarter""]);

      // set the x and y scales
      const xScale = d3.scaleLinear()
        .domain([0, d3.max(alphaData, d => d[""Quarter""])])
        .range([0, width]);

      const yScale = d3.scaleLinear()
        .domain([0, d3.max(alphaData, d => d[""Net Income""])])
        .range([height, 0]);

      // add the x and y axes
      svg.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

      svg.append(""g"")
        .call(d3.axisLeft(yScale));

      // add the points
      const points = svg.selectAll(""circle"")
        .data(alphaData)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScale(d[""Quarter""]))
        .attr(""cy"", d => yScale(d[""Net Income""]))
        .attr(""r"", 5);

      // add the lines
      const line = d3.line()
        .x(d => xScale(d[""Quarter""]))
        .y(d => yScale(d[""Net Income""]));

      const path = svg.append(""path"")
        .datum(alphaData)
        .attr(""fill"", ""none"")
        .attr(""stroke"", ""steelblue"")
        .attr(""stroke-width"", 1.5)
        .attr(""stroke-linejoin"", ""round"")
        .attr(""stroke-linecap"", ""round"")
        .attr(""d"", line);

      // animate the path
      const totalLength = path.node().getTotalLength();
      path.attr(""stroke-dasharray"", totalLength + "" "" + totalLength)
        .attr(""stroke-dashoffset"", totalLength)
        .transition()
        .duration(2000)
        .attr(""stroke-dashoffset"", 0);
    });
  </script>
</body>
</html>
```"
7,line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Net Income of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Multi-Series Line Chart</title>
  <style>
    .line {
      fill: none;
      stroke: steelblue;
      stroke-width: 1.5px;
    }

    .line:hover {
      stroke-width: 3px;
    }

    .axis path,
    .axis line {
      fill: none;
      stroke: grey;
      stroke-width: 1;
      shape-rendering: crispEdges;
    }

    .tick text {
      font-size: 12px;
    }

    .tick line {
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Net Income""] = +d[""Net Income""];
          d[""Quarter""] = d[""Quarter""];
        });

        const companies = [...new Set(data.map(d => d.Company))];

        const xScale = d3.scaleBand()
          .domain(data.map(d => d[""Quarter""]))
          .range([0, width])
          .padding(0.2);

        const yScale = d3.scaleLinear()
          .domain([d3.min(data, d => d[""Net Income""]), d3.max(data, d => d[""Net Income""])])
          .range([height, 0]);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        const lines = svg.selectAll(""line"")
          .data(companies)
          .enter()
          .append(""g"")
          .attr(""class"", ""line-group"");

        lines.selectAll(""line"")
          .data(d => data.filter(f => f.Company === d))
          .enter()
          .append(""line"")
          .attr(""class"", ""line"")
          .attr(""stroke"", (d, i) => d3.schemeCategory10[i % 10])
          .attr(""x1"", (d, i) => xScale(d[""Quarter""]))
          .attr(""y1"", (d, i) => yScale(d[""Net Income""]))
          .attr(""x2"", (d, i) => xScale(d[""Quarter""]))
          .attr(""y2"", (d, i) => yScale(d[""Net Income""]));

        lines.selectAll(""path"")
          .data(d => data.filter(f => f.Company === d))
          .enter()
          .append(""path"")
          .datum(d => data.filter(f => f.Company === d))
          .attr(""class"", ""line"")
          .attr(""fill"", ""none"")
          .attr(""stroke"", (d, i) => d3.schemeCategory10[i % 10])
          .attr(""stroke-width"", 1.5)
          .attr(""d"", d3.line()
            .x(d => xScale(d[""Quarter""]))
            .y(d => yScale(d[""Net Income""])));

        lines.selectAll(""circle"")
          .data(d => data.filter(f => f.Company === d))
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d[""Quarter""]))
          .attr(""cy"", d => yScale(d[""Net Income""]))
          .attr(""r"", 3)
          .attr(""fill"", (d, i) => d3.schemeCategory10[i % 10]);

        lines.selectAll(""circle"")
          .on(""mouseover"", function(event, d) {
            d3.select(this)
              .attr(""r"", 6);
          })
          .on(""mouseout"", function(event, d) {
            d3.select(this)
              .attr(""r"", 3);
          });

        lines.selectAll(""path"")
          .on(""mouseover"", function(event, d) {
            d3.select(this)
              .attr(""stroke-width"", 3);
          })
          .on(""mouseout"", function(event, d) {
            d3.select(this)
              .attr(""stroke-width"", 1.5);
          });
      });
  </script>
</body>
</html>
```"
8,bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,advanced view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Visualization</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .chart {
            margin: 50px auto;
            width: 800px;
            height: 600px;
            border: 1px solid #ddd;
        }
    </style>
</head>
<body>
    <div class=""chart"" id=""chart""></div>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 50, right: 50, bottom: 100, left: 100 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""#chart"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"")
            .then(data => {
                data.forEach(d => {
                    d[""Net Income""] = +d[""Net Income""];
                    d.Quarter = d.Quarter;
                    d.Company = d.Company;
                });

                const q1Data = data.filter(d => d.Quarter === ""Q1-2021"");

                const xScale = d3.scaleBand()
                    .domain(q1Data.map(d => d.Company))
                    .range([0, width])
                    .padding(0.2);

                const yScale = d3.scaleLinear()
                    .domain([0, d3.max(q1Data, d => d[""Net Income""])])
                    .range([height, 0]);

                svg.selectAll(""rect"")
                    .data(q1Data)
                    .enter()
                    .append(""rect"")
                    .attr(""x"", d => xScale(d.Company))
                    .attr(""y"", d => yScale(d[""Net Income""]))
                    .attr(""width"", xScale.bandwidth())
                    .attr(""height"", d => height - yScale(d[""Net Income""]));

                svg.append(""g"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(d3.axisBottom(xScale));

                svg.append(""g"")
                    .call(d3.axisLeft(yScale));

                svg.append(""text"")
                    .attr(""transform"", `translate(${width / 2}, ${height + margin.bottom / 2})`)
                    .attr(""text-anchor"", ""middle"")
                    .text(""Company"");

                svg.append(""text"")
                    .attr(""transform"", `translate(${margin.left / 2}, ${height / 2}) rotate(-90)`)
                    .attr(""text-anchor"", ""middle"")
                    .text(""Net Income"");

                const zoom = d3.zoom()
                    .scaleExtent([1, 10])
                    .extent([[-Infinity, -Infinity], [width + Infinity, height + Infinity]])
                    .on(""zoom"", zoomed);

                svg.call(zoom);

                function zoomed() {
                    svg.selectAll(""rect"")
                        .attr(""transform"", d3.event.transform);

                    svg.select("".x-axis"")
                        .attr(""transform"", d3.event.transform);

                    svg.select("".y-axis"")
                        .attr(""transform"", d3.event.transform);
                }
            });
    </script>
</body>
</html>
```"
9,bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Net Income Bar Chart</title>
  <style>
    .bar {
      fill: steelblue;
    }
    .bar:hover {
      fill: brown;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Net Income""] = +d[""Net Income""];
          d.Quarter = d.Quarter;
          d.Company = d.Company;
        });

        const q1Data = data.filter(d => d.Quarter === ""Q1-2021"");

        const x = d3.scaleBand()
          .domain(q1Data.map(d => d.Company))
          .range([0, width])
          .padding(0.2);

        const y = d3.scaleLinear()
          .domain([0, d3.max(q1Data, d => d[""Net Income""])])
          .range([height, 0]);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(x));

        svg.append(""g"")
          .call(d3.axisLeft(y));

        const bars = svg.selectAll(""rect"")
          .data(q1Data)
          .enter()
          .append(""rect"")
          .attr(""x"", d => x(d.Company))
          .attr(""y"", d => y(d[""Net Income""]))
          .attr(""width"", x.bandwidth())
          .attr(""height"", d => height - y(d[""Net Income""]))
          .attr(""class"", ""bar"");

        let drag = d3.drag()
          .on(""start"", dragstarted)
          .on(""drag"", dragged)
          .on(""end"", dragended);

        bars.call(drag);

        function dragstarted(event, d) {
          d3.select(this).raise();
          d3.select(this).attr(""stroke"", ""black"");
        }

        function dragged(event, d) {
          const newX = event.x - x.bandwidth() / 2;
          const newY = event.y;
          d3.select(this)
            .attr(""x"", newX)
            .attr(""y"", newY);
        }

        function dragended(event, d) {
          const newX = Math.round((event.x - x.bandwidth() / 2) / x.bandwidth()) * x.bandwidth();
          const newY = event.y;
          d3.select(this)
            .attr(""x"", newX)
            .attr(""y"", newY);
          d3.select(this).attr(""stroke"", ""none"");
        }
      });
  </script>
</body>
</html>
```"
10,bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Net Income.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Net Income Bar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 40px;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
    .bar {
      fill: steelblue;
    }
    .bar:hover {
      fill: brown;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <select id=""sort-order"">
    <option value=""desc"">Descending</option>
    <option value=""asc"">Ascending</option>
  </select>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 300 - margin.top - margin.bottom;

    const svg = d3.select("".chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const xScale = d3.scaleBand()
      .range([0, width])
      .padding(0.2);

    const yScale = d3.scaleLinear()
      .range([height, 0]);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"")
      .then(data => {
        data = data.filter(d => d.Quarter === ""Q1-2021"");
        data.forEach(d => {
          d[""Net Income""] = +d[""Net Income""];
        });

        xScale.domain(data.map(d => d.Company));
        yScale.domain([0, d3.max(data, d => d[""Net Income""])]);

        svg.selectAll(""bar"")
          .data(data)
          .enter()
          .append(""rect"")
          .attr(""class"", ""bar"")
          .attr(""x"", d => xScale(d.Company))
          .attr(""y"", d => yScale(d[""Net Income""]))
          .attr(""width"", xScale.bandwidth())
          .attr(""height"", d => height - yScale(d[""Net Income""]));

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        d3.select(""#sort-order"")
          .on(""change"", function() {
            const sortOrder = d3.select(this).property(""value"");
            data.sort((a, b) => {
              if (sortOrder === ""desc"") {
                return b[""Net Income""] - a[""Net Income""];
              } else {
                return a[""Net Income""] - b[""Net Income""];
              }
            });
            xScale.domain(data.map(d => d.Company));
            svg.selectAll(""rect"")
              .transition()
              .duration(1000)
              .attr(""x"", d => xScale(d.Company));
          });
      });
  </script>
</body>
</html>
```"
