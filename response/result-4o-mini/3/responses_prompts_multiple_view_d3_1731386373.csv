Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Units Sold and Revenue, and a Bar Chart on the right that displays Store Location versus Units Sold.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Daily Sales Visualization</title>
    <style>
        body {
            display: flex;
            justify-content: space-between;
            margin: 20px;
        }
        .chart {
            width: 45%;
        }
        .scatterplot {
            margin: 20px;
        }
        .bar-chart {
            margin: 20px;
        }
    </style>
</head>
<body>
    <div class=""chart scatterplot""></div>
    <div class=""chart bar-chart""></div>

    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d['Units Sold'] = +d['Units Sold'];
                d['Revenue'] = +d['Revenue'];
            });

            // Scatterplot
            const scatterplotWidth = 400;
            const scatterplotHeight = 300;
            const scatterplotMargin = { top: 20, right: 30, bottom: 30, left: 40 };
            const scatterplotSvg = d3.select("".scatterplot"")
                .append(""svg"")
                .attr(""width"", scatterplotWidth)
                .attr(""height"", scatterplotHeight);
            
            const xScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Units Sold'])])
                .range([scatterplotMargin.left, scatterplotWidth - scatterplotMargin.right]);
            
            const yScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Revenue'])])
                .range([scatterplotHeight - scatterplotMargin.bottom, scatterplotMargin.top]);

            scatterplotSvg.append(""g"")
                .attr(""transform"", `translate(0,${scatterplotHeight - scatterplotMargin.bottom})`)
                .call(d3.axisBottom(xScale));
            
            scatterplotSvg.append(""g"")
                .attr(""transform"", `translate(${scatterplotMargin.left},0)`)
                .call(d3.axisLeft(yScale));
            
            scatterplotSvg.selectAll(""circle"")
                .data(data)
                .enter()
                .append(""circle"")
                .attr(""cx"", d => xScale(d['Units Sold']))
                .attr(""cy"", d => yScale(d['Revenue']))
                .attr(""r"", 5)
                .attr(""fill"", ""blue"");

            // Bar Chart
            const barChartWidth = 400;
            const barChartHeight = 300;
            const barChartMargin = { top: 20, right: 30, bottom: 30, left: 40 };
            const barChartSvg = d3.select("".bar-chart"")
                .append(""svg"")
                .attr(""width"", barChartWidth)
                .attr(""height"", barChartHeight);

            const storeLocationCounts = d3.rollup(data, v => d3.sum(v, d => d['Units Sold']), d => d['Store Location']);
            const storeLocations = Array.from(storeLocationCounts, ([key, value]) => ({ key, value }));

            const xBarScale = d3.scaleBand()
                .domain(storeLocations.map(d => d.key))
                .range([barChartMargin.left, barChartWidth - barChartMargin.right])
                .padding(0.1);
            
            const yBarScale = d3.scaleLinear()
                .domain([0, d3.max(storeLocations, d => d.value)])
                .range([barChartHeight - barChartMargin.bottom, barChartMargin.top]);

            barChartSvg.append(""g"")
                .attr(""transform"", `translate(0,${barChartHeight - barChartMargin.bottom})`)
                .call(d3.axisBottom(xBarScale));
            
            barChartSvg.append(""g"")
                .attr(""transform"", `translate(${barChartMargin.left},0)`)
                .call(d3.axisLeft(yBarScale));
            
            barChartSvg.selectAll(""rect"")
                .data(storeLocations)
                .enter()
                .append(""rect"")
                .attr(""x"", d => xBarScale(d.key))
                .attr(""y"", d => yBarScale(d.value))
                .attr(""height"", d => yBarScale(0) - yBarScale(d.value))
                .attr(""width"", xBarScale.bandwidth())
                .attr(""fill"", ""orange"");
        });
    </script>
</body>
</html>
```"
2,scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Units Sold and Revenue, and a Bar Chart on the right that displays Store Location versus Units Sold. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Data Visualization</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .scatter { cursor: pointer; }
        .bar { fill: steelblue; }
        .bar.highlighted { fill: orange; }
        .tooltip { position: absolute; text-align: center; width: auto; padding: 5px; font: 12px sans-serif; background: lightsteelblue; border: 0; border-radius: 8px; pointer-events: none; }
    </style>
</head>
<body>

<div id=""scatterplot""></div>
<div id=""barchart""></div>
<div class=""tooltip"" style=""opacity:0;""></div>

<script>
    const margin = { top: 20, right: 30, bottom: 40, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const svgScatter = d3.select(""#scatterplot"").append(""svg"")
        .attr(""width"", width + margin.left + margin.right)
        .attr(""height"", height + margin.top + margin.bottom)
        .append(""g"")
        .attr(""transform"", `translate(${margin.left},${margin.top})`);

    const svgBar = d3.select(""#barchart"").append(""svg"")
        .attr(""width"", width + margin.left + margin.right)
        .attr(""height"", height + margin.top + margin.bottom)
        .append(""g"")
        .attr(""transform"", `translate(${margin.left},${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
        data.forEach(d => {
            d[""Units Sold""] = +d[""Units Sold""];
            d[""Revenue""] = +d[""Revenue""];
        });

        const xScaleScatter = d3.scaleLinear()
            .domain([0, d3.max(data, d => d[""Units Sold""])])
            .range([0, width]);

        const yScaleScatter = d3.scaleLinear()
            .domain([0, d3.max(data, d => d[""Revenue""])])
            .range([height, 0]);

        const xScaleBar = d3.scaleBand()
            .domain(data.map(d => d[""Store Location""]))
            .range([0, width])
            .padding(0.1);

        const yScaleBar = d3.scaleLinear()
            .domain([0, d3.max(data, d => d[""Units Sold""])])
            .range([height, 0]);

        const scatterPoints = svgScatter.selectAll("".scatter"")
            .data(data)
            .enter().append(""circle"")
            .attr(""class"", ""scatter"")
            .attr(""cx"", d => xScaleScatter(d[""Units Sold""]))
            .attr(""cy"", d => yScaleScatter(d[""Revenue""]))
            .attr(""r"", 5)
            .style(""fill"", ""steelblue"")
            .on(""mouseover"", function(event, d) {
                d3.select("".tooltip"")
                    .style(""opacity"", 1)
                    .html(`Units: ${d[""Units Sold""]}<br>Revenue: ${d[""Revenue""]}`)
                    .style(""left"", (event.pageX + 5) + ""px"")
                    .style(""top"", (event.pageY - 28) + ""px"");
            })
            .on(""mouseout"", function() {
                d3.select("".tooltip"").style(""opacity"", 0);
            });

        const bars = svgBar.selectAll("".bar"")
            .data(data)
            .enter().append(""rect"")
            .attr(""class"", ""bar"")
            .attr(""x"", d => xScaleBar(d[""Store Location""]))
            .attr(""y"", d => yScaleBar(d[""Units Sold""]))
            .attr(""width"", xScaleBar.bandwidth())
            .attr(""height"", d => height - yScaleBar(d[""Units Sold""]))
            .on(""click"", function(event, d) {
                const selectedLocation = d[""Store Location""];
                svgBar.selectAll("".bar"")
                    .classed(""highlighted"", false);
                svgBar.selectAll("".bar"")
                    .filter(data => data[""Store Location""] === selectedLocation)
                    .classed(""highlighted"", true);

                d3.selectAll("".scatter"")
                    .style(""fill"", data => (data[""Store Location""] === selectedLocation ? ""orange"" : ""steelblue""));
            });

        const brush = d3.brush()
            .extent([[0, 0], [width, height]])
            .on(""brush end"", brushed);

        svgScatter.append(""g"")
            .attr(""class"", ""brush"")
            .call(brush);

        function brushed(event) {
            const selection = event.selection;
            if (selection) {
                const [[x0, y0], [x1, y1]] = selection;
                const brushedData = data.filter(d =>
                    xScaleScatter(d[""Units Sold""]) >= x0 &&
                    xScaleScatter(d[""Units Sold""]) <= x1 &&
                    yScaleScatter(d[""Revenue""]) >= y1 &&
                    yScaleScatter(d[""Revenue""]) <= y0
                );

                svgBar.selectAll("".bar"").classed(""highlighted"", d => brushedData.includes(d));
                scatterPoints.style(""fill"", d => brushedData.includes(d) ? ""orange"" : ""steelblue"");

                d3.select("".brush"").call(brush.move, null); // Clear brush
            }
        }

        svgScatter.append(""g"")
            .attr(""class"", ""x-axis"")
            .attr(""transform"", `translate(0,${height})`)
            .call(d3.axisBottom(xScaleScatter));

        svgScatter.append(""g"")
            .attr(""class"", ""y-axis"")
            .call(d3.axisLeft(yScaleScatter));

        svgBar.append(""g"")
            .attr(""class"", ""x-axis"")
            .attr(""transform"", `translate(0,${height})`)
            .call(d3.axisBottom(xScaleBar));

        svgBar.append(""g"")
            .attr(""class"", ""y-axis"")
            .call(d3.axisLeft(yScaleBar));
    });
</script>
</body>
</html>
```"
3,line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Sold , while the pie chart represents the distribution of Revenue.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Dashboard</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line-chart {
            margin-bottom: 20px;
        }
        .pie-chart {
            width: 400px;
            height: 400px;
        }
    </style>
</head>
<body>

<div class=""line-chart""></div>
<div class=""pie-chart""></div>

<script>
    const margin = {top: 20, right: 30, bottom: 30, left: 40};
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const svgLine = d3.select("".line-chart"").append(""svg"")
        .attr(""width"", width + margin.left + margin.right)
        .attr(""height"", height + margin.top + margin.bottom)
        .append(""g"")
        .attr(""transform"", `translate(${margin.left},${margin.top})`);

    const svgPie = d3.select("".pie-chart"").append(""svg"")
        .attr(""width"", 400)
        .attr(""height"", 400)
        .append(""g"")
        .attr(""transform"", ""translate(200,200)"");

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
        data.forEach(d => {
            d[""Units Sold""] = +d[""Units Sold""];
            d[""Revenue""] = +d[""Revenue""];
            d[""Date""] = new Date(d[""Date""]);
        });

        const xLine = d3.scaleTime()
            .domain(d3.extent(data, d => d[""Date""]))
            .range([0, width]);

        const yLine = d3.scaleLinear()
            .domain([0, d3.max(data, d => d[""Units Sold""])])
            .range([height, 0]);

        const line = d3.line()
            .x(d => xLine(d[""Date""]))
            .y(d => yLine(d[""Units Sold""]));

        svgLine.append(""path"")
            .datum(data)
            .attr(""fill"", ""none"")
            .attr(""stroke"", ""steelblue"")
            .attr(""stroke-width"", 1.5)
            .attr(""d"", line);

        svgLine.append(""g"")
            .attr(""transform"", `translate(0,${height})`)
            .call(d3.axisBottom(xLine));

        svgLine.append(""g"")
            .call(d3.axisLeft(yLine));

        const revenueData = d3.rollup(data, v => d3.sum(v, d => d[""Revenue""]), d => d[""Product Category""]);
        const pieData = Array.from(revenueData, ([key, value]) => ({key, value}));

        const pie = d3.pie().value(d => d.value);
        const arc = d3.arc().innerRadius(0).outerRadius(150);

        const arcs = svgPie.selectAll(""arc"")
            .data(pie(pieData))
            .enter().append(""g"")
            .attr(""class"", ""arc"");

        arcs.append(""path"")
            .attr(""d"", arc)
            .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

        arcs.append(""text"")
            .attr(""transform"", d => `translate(${arc.centroid(d)})`)
            .text(d => d.data.key);
    });
</script>

</body>
</html>
```"
4,line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Sold , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Data Visualization</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .chart {
            display: block;
            margin: auto;
        }
        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 2px;
        }
        .arc {
            stroke: #fff;
        }
    </style>
</head>
<body>
    <svg class=""chart"" width=""800"" height=""400""></svg>
    <svg class=""chart"" width=""400"" height=""400""></svg>
    
    <script>
        const svgLine = d3.select(""svg"").attr(""class"", ""line-chart"");
        const svgPie = d3.select(""svg:nth-of-type(2)"").attr(""class"", ""pie-chart"");
        const widthLine = 800, heightLine = 400, widthPie = 400, heightPie = 400;

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d[""Units Sold""] = +d[""Units Sold""];
                d[""Revenue""] = +d[""Revenue""];
            });

            const xLine = d3.scaleTime()
                .domain(d3.extent(data, d => new Date(d.Date)))
                .range([0, widthLine]);

            const yLine = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Units Sold""])])
                .range([heightLine, 0]);

            const line = d3.line()
                .x(d => xLine(new Date(d.Date)))
                .y(d => yLine(d[""Units Sold""]));

            svgLine.append(""g"")
                .attr(""transform"", `translate(0,${heightLine})`)
                .call(d3.axisBottom(xLine));

            svgLine.append(""g"")
                .call(d3.axisLeft(yLine));

            svgLine.append(""path"")
                .datum(data)
                .attr(""class"", ""line"")
                .attr(""d"", line);

            const pieColor = d3.scaleOrdinal(d3.schemeCategory10);
            const pie = d3.pie().value(d => d.Revenue);
            const arc = d3.arc()
                .innerRadius(0)
                .outerRadius(Math.min(widthPie, heightPie) / 2 - 1);

            const g = svgPie.append(""g"")
                .attr(""transform"", `translate(${widthPie / 2}, ${heightPie / 2})`);

            const updatePie = (filteredData) => {
                const pieData = pie(filteredData);

                g.selectAll("".arc"").remove();
                const arcs = g.selectAll("".arc"")
                    .data(pieData)
                    .enter().append(""g"")
                    .attr(""class"", ""arc"");

                arcs.append(""path"")
                    .attr(""class"", ""arc"")
                    .attr(""d"", arc)
                    .style(""fill"", (d, i) => pieColor(i));

                arcs.append(""text"")
                    .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                    .attr(""dy"", "".35em"")
                    .text(d => d.data.Revenue);
            };

            svgLine.on(""click"", function(event) {
                const [mx, my] = d3.pointer(event);
                const x0 = xLine.invert(mx);
                const selectedData = data.filter(d => new Date(d.Date) >= x0);
                updatePie(selectedData);
            });

            updatePie(data);
        });
    </script>
</body>
</html>
```"
5,scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Units Sold, Revenue, Profit, and Customer Visits. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot Matrix</title>
    <style>
        .cell {
            display: inline-block;
            width: 200px;
            height: 200px;
            margin: 10px;
            border: 1px solid #ccc;
            position: relative;
        }
        .highlight {
            fill: orange;
            stroke: black;
            stroke-width: 2;
        }
    </style>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
</head>
<body>
    <div id=""scatterplotMatrix""></div>
    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 40 },
            width = 200 - margin.left - margin.right,
            height = 200 - margin.top - margin.bottom;

        const dimensions = [""Units Sold"", ""Revenue"", ""Profit"", ""Customer Visits""];

        Promise.all([
            d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv""),
        ]).then(data => {
            data.forEach(d => {
                d[""Units Sold""] = +d[""Units Sold""];
                d[""Revenue""] = +d[""Revenue""];
                d[""Profit""] = +d[""Profit""];
                d[""Customer Visits""] = +d[""Customer Visits""];
            });

            const svg = d3.select(""#scatterplotMatrix"")
                .selectAll("".cell"")
                .data(dimensions)
                .enter().append(""div"")
                .attr(""class"", ""cell"")
                .each(function(yVar, i) {
                    const xVar = dimensions[i];
                    const g = d3.select(this).append(""svg"")
                        .attr(""width"", width + margin.left + margin.right)
                        .attr(""height"", height + margin.top + margin.bottom)
                        .append(""g"")
                        .attr(""transform"", `translate(${margin.left},${margin.top})`);

                    const x = d3.scaleLinear()
                        .domain(d3.extent(data, d => d[xVar])).nice()
                        .range([0, width]);

                    const y = d3.scaleLinear()
                        .domain(d3.extent(data, d => d[yVar])).nice()
                        .range([height, 0]);

                    g.selectAll(""circle"")
                        .data(data)
                        .enter().append(""circle"")
                        .attr(""cx"", d => x(d[xVar]))
                        .attr(""cy"", d => y(d[yVar]))
                        .attr(""r"", 3)
                        .on(""mouseover"", function(event, d) {
                            d3.select(this).classed(""highlight"", true);
                        })
                        .on(""mouseout"", function(event, d) {
                            d3.select(this).classed(""highlight"", false);
                        });

                    g.append(""g"")
                        .attr(""class"", ""x axis"")
                        .attr(""transform"", `translate(0,${height})`)
                        .call(d3.axisBottom(x));

                    g.append(""g"")
                        .attr(""class"", ""y axis"")
                        .call(d3.axisLeft(y));
                });
                
            const brush = d3.brush()
                .extent([[0, 0], [width, height]])
                .on(""brush"", brushed)
                .on(""end"", brushended);

            d3.selectAll(""svg"").select(""g"").call(brush);

            function brushed(event) {
                const selection = event.selection;
                const [[x0, y0], [x1, y1]] = selection;

                d3.selectAll(""circle"").classed(""highlight"", false);
                
                d3.selectAll(""circle"").filter((d) => {
                    return x0 <= x(d[""Units Sold""]) && x(d[""Units Sold""]) <= x1 &&
                           y0 <= y(d[""Revenue""]) && y(d[""Revenue""]) <= y1;
                }).classed(""highlight"", true);
            }

            function brushended(event) {
                if (!event.selection) {
                    d3.selectAll(""circle"").classed(""highlight"", false);
                }
            }
        });
    </script>
</body>
</html>
```"
6,scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a brushable Scatterplot that visualizes the relationship between Units Sold and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot</title>
    <style>
        .brush .selection {
            fill: #9e9e9e;
            fill-opacity: 0.5;
            stroke: #000;
            stroke-width: 1.5px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>
    <div id=""table-container"" style=""margin-top: 20px;"">
        <table border=""1"">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Store Location</th>
                    <th>Units Sold</th>
                    <th>Revenue</th>
                    <th>Profit</th>
                </tr>
            </thead>
            <tbody id=""data-table-body""></tbody>
        </table>
    </div>

    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const svg = d3.select(""svg""),
            margin = { top: 20, right: 20, bottom: 30, left: 40 },
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom;

        const x = d3.scaleLinear().range([0, width]),
            y = d3.scaleLinear().range([height, 0]);

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        const brush = d3.brush().extent([[0, 0], [width, height]])
            .on(""brush end"", brushed);

        svg.append(""g"")
            .attr(""class"", ""brush"")
            .call(brush);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d[""Units Sold""] = +d[""Units Sold""];
                d[""Revenue""] = +d[""Revenue""];
            });

            x.domain(d3.extent(data, d => d[""Units Sold""])).nice();
            y.domain(d3.extent(data, d => d[""Revenue""])).nice();

            g.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""y axis"")
                .call(d3.axisLeft(y));

            g.selectAll("".dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => x(d[""Units Sold""]))
                .attr(""cy"", d => y(d[""Revenue""]))
                .attr(""r"", 3.5);

            function brushed(event) {
                const selection = event.selection;
                if (selection) {
                    const [[x0, y0], [x1, y1]] = selection;

                    const selectedData = data.filter(d => 
                        x(d[""Units Sold""]) >= x0 && x(d[""Units Sold""]) <= x1 &&
                        y(d[""Revenue""]) >= y0 && y(d[""Revenue""]) <= y1
                    ).slice(0, 20);

                    updateTable(selectedData);
                }
            }

            function updateTable(selectedData) {
                const tbody = d3.select(""#data-table-body"");
                tbody.selectAll(""tr"").remove();
                
                const rows = tbody.selectAll(""tr"")
                    .data(selectedData)
                    .enter().append(""tr"");
                
                rows.selectAll(""td"")
                    .data(d => [d[""Date""], d[""Store Location""], d[""Units Sold""], d[""Revenue""], d[""Profit""]])
                    .enter().append(""td"")
                    .text(d => d);
            }
        });
    </script>
</body>
</html>
```"
7,bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a horizontal Bar Chart that shows all the data concerning Store Location and Units Sold, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Store Location Units Sold Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .x-axis path,
        .x-axis line {
            display: none;
        }
        .minimap {
            fill: lightgray;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script>
        const margin = {top: 20, right: 40, bottom: 30, left: 100},
              width = 800 - margin.left - margin.right,
              height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d[""Units Sold""] = +d[""Units Sold""];
            });

            const x = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Units Sold""])])
                .range([0, width]);

            const y = d3.scaleBand()
                .domain(data.map(d => d[""Store Location""]))
                .range([0, height])
                .padding(0.1);

            svg.append(""g"")
                .attr(""class"", ""x-axis"")
                .attr(""transform"", `translate(0, ${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .selectAll("".bar"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", 0)
                .attr(""y"", d => y(d[""Store Location""]))
                .attr(""width"", d => x(d[""Units Sold""]))
                .attr(""height"", y.bandwidth());

            // Minimap
            const minimapWidth = 200;
            const minimapHeight = 100;

            const minimap = d3.select(""svg"")
                .append(""g"")
                .attr(""transform"", `translate(${width + margin.left}, ${margin.top + height - minimapHeight})`);

            const minimapX = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Units Sold""])])
                .range([0, minimapWidth]);

            minimap.selectAll("".minimap-bar"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""minimap"")
                .attr(""x"", 0)
                .attr(""y"", (d, i) => i * (minimapHeight / data.length))
                .attr(""width"", d => minimapX(d[""Units Sold""]))
                .attr(""height"", minimapHeight / data.length - 1);
        });
    </script>
</body>
</html>
```"
