Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,advanced view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Units Sold vs Revenue</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter {
            fill: steelblue;
            opacity: 0.7;
        }
        .scatter:hover {
            fill: orange;
        }
        .tooltip {
            position: absolute;
            text-align: center;
            width: 60px;
            padding: 5px;
            font: 12px sans-serif;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = {top: 20, right: 20, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const xScale = d3.scaleLinear().range([0, width]);
        const yScale = d3.scaleLinear().range([height, 0]);

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d['Units Sold'] = +d['Units Sold'];
                d['Revenue'] = +d['Revenue'];
            });

            xScale.domain(d3.extent(data, d => d['Units Sold'])).nice();
            yScale.domain([0, d3.max(data, d => d['Revenue'])]).nice();

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(xScale));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(yScale));

            const tooltip = d3.select(""body"").append(""div"")
                .attr(""class"", ""tooltip"")
                .style(""opacity"", 0);

            g.selectAll("".scatter"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""scatter"")
                .attr(""r"", 4)
                .attr(""cx"", d => xScale(d['Units Sold']))
                .attr(""cy"", d => yScale(d['Revenue']))
                .on(""mouseover"", (event, d) => {
                    tooltip.transition()
                        .duration(200)
                        .style(""opacity"", .9);
                    tooltip.html(`Units Sold: ${d['Units Sold']}<br/>Revenue: $${d['Revenue'].toFixed(2)}`)
                        .style(""left"", (event.pageX + 5) + ""px"")
                        .style(""top"", (event.pageY - 28) + ""px"");
                    d3.select(event.target)
                        .attr(""r"", 8)
                        .attr(""fill"", ""orange"");
                })
                .on(""mouseout"", (event, d) => {
                    tooltip.transition()
                        .duration(500)
                        .style(""opacity"", 0);
                    d3.select(event.target)
                        .attr(""r"", 4)
                        .attr(""fill"", ""steelblue"");
                });
        });
    </script>
</body>
</html>
```"
2,scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,advanced view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Units Sold vs Revenue</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter {
            fill: steelblue;
            stroke: white;
            stroke-width: 1.5px;
        }
        .point {
            cursor: pointer;
            opacity: 0.7;
        }
        .selected {
            fill: orange;
        }
    </style>
</head>
<body>

<svg width=""800"" height=""600""></svg>

<script>
    const svg = d3.select(""svg"");
    const margin = {top: 20, right: 30, bottom: 30, left: 40},
          width = +svg.attr(""width"") - margin.left - margin.right,
          height = +svg.attr(""height"") - margin.top - margin.bottom;

    const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
        data.forEach(d => {
            d[""Units Sold""] = +d[""Units Sold""];
            d[""Revenue""] = +d[""Revenue""];
        });

        const x = d3.scaleLinear()
            .domain([0, d3.max(data, d => d[""Units Sold""])])
            .range([0, width]);

        const y = d3.scaleLinear()
            .domain([0, d3.max(data, d => d[""Revenue""])])
            .range([height, 0]);

        g.append(""g"")
            .attr(""transform"", `translate(0,${height})`)
            .call(d3.axisBottom(x));

        g.append(""g"")
            .call(d3.axisLeft(y));

        const points = g.selectAll("".point"")
            .data(data)
            .enter().append(""circle"")
            .attr(""class"", ""point"")
            .attr(""cx"", d => x(d[""Units Sold""]))
            .attr(""cy"", d => y(d[""Revenue""]))
            .attr(""r"", 5)
            .on(""mouseover"", function(event, d) {
                d3.select(this).attr(""r"", 8);
            })
            .on(""mouseout"", function(event, d) {
                d3.select(this).attr(""r"", 5);
            })
            .on(""click"", function(event, d) {
                d3.select(this).classed(""selected"", !d3.select(this).classed(""selected""));
            });

        const brush = d3.brush()
            .extent([[0, 0], [width, height]])
            .on(""brush end"", brushed);

        g.append(""g"")
            .attr(""class"", ""brush"")
            .call(brush);

        function brushed(event) {
            if (event.selection) {
                const [[x0, y0], [x1, y1]] = event.selection;

                points.classed(""selected"", d => {
                    const xValue = x(d[""Units Sold""]);
                    const yValue = y(d[""Revenue""]);
                    return xValue >= x0 && xValue <= x1 && yValue >= y0 && yValue <= y1;
                });
            }
        }
    });
</script>

</body>
</html>
```"
3,scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,advanced view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot: Units Sold vs Revenue</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter {
            fill: steelblue;
            stroke: white;
            stroke-width: 1.5px;
        }
        .axis {
            font: 10px sans-serif;
        }
        .x.axis path,
        .y.axis path {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        const xAxis = d3.axisBottom(x);
        const yAxis = d3.axisLeft(y);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d['Units Sold'] = +d['Units Sold'];
                d['Revenue'] = +d['Revenue'];
            });

            x.domain(d3.extent(data, d => d['Units Sold'])).nice();
            y.domain(d3.extent(data, d => d['Revenue'])).nice();

            g.append(""g"")
                .attr(""class"", ""axis x-axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(xAxis);

            g.append(""g"")
                .attr(""class"", ""axis y-axis"")
                .call(yAxis);

            g.selectAll("".scatter"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""scatter"")
                .attr(""cx"", d => x(d['Units Sold']))
                .attr(""cy"", d => y(d['Revenue']))
                .attr(""r"", 5);

            svg.call(d3.zoom()
                .scaleExtent([1, 8])
                .on(""zoom"", (event) => {
                    g.attr(""transform"", event.transform);
                    g.select("".x-axis"").call(xAxis.scale(event.transform.rescaleX(x)));
                    g.select("".y-axis"").call(yAxis.scale(event.transform.rescaleY(y)));
                    g.selectAll("".scatter"")
                        .attr(""cx"", d => event.transform.applyX(x(d['Units Sold'])))
                        .attr(""cy"", d => event.transform.applyY(y(d['Revenue'])));
                }));
        });
    </script>
</body>
</html>
```"
4,scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,advanced view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot: Units Sold vs Revenue</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .tooltip {
            position: absolute;
            text-align: center;
            padding: 5px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
        .scatter circle {
            fill: steelblue;
            stroke: white;
            stroke-width: 1.5px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
            margin = { top: 20, right: 20, bottom: 30, left: 50 },
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom;

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d['Units Sold'] = +d['Units Sold'];
                d['Revenue'] = +d['Revenue'];
            });

            x.domain(d3.extent(data, d => d['Units Sold'])).nice();
            y.domain(d3.extent(data, d => d['Revenue'])).nice();

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            const tooltip = d3.select(""body"").append(""div"")
                .attr(""class"", ""tooltip"")
                .style(""opacity"", 0);

            g.selectAll("".scatter"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""scatter"")
                .attr(""r"", 5)
                .attr(""cx"", d => x(d['Units Sold']))
                .attr(""cy"", d => y(d['Revenue']))
                .on(""mouseover"", function(event, d) {
                    tooltip.transition().duration(200).style(""opacity"", .9);
                    tooltip.html(`Units Sold: ${d['Units Sold']}<br>Revenue: $${d['Revenue']}`)
                        .style(""left"", (event.pageX + 5) + ""px"")
                        .style(""top"", (event.pageY - 28) + ""px"");
                })
                .on(""mouseout"", function() {
                    tooltip.transition().duration(500).style(""opacity"", 0);
                })
                .on(""click"", function(event, d) {
                    window.open(`https://www.google.com/search?q=${d['Units Sold']}+Units+Sold+Revenue`);
                });
        });
    </script>
</body>
</html>
```"
5,scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot with query widgets showing the Units Sold and Revenue of the given dataset. Add a slider to represent the Date.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,advanced view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot with D3</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter-point {
            fill: steelblue;
            radius: 3px;
        }
        .axis {
            font: 10px sans-serif;
        }
    </style>
</head>
<body>
    <h2>Units Sold vs Revenue</h2>
    <svg width=""800"" height=""400""></svg>
    <input type=""range"" id=""dateSlider"" min=""0"" step=""1"">
    <p id=""sliderValue""></p>

    <script>
        const svg = d3.select(""svg""),
            margin = {top: 20, right: 30, bottom: 40, left: 50},
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d[""Units Sold""] = +d[""Units Sold""];
                d[""Revenue""] = +d[""Revenue""];
                d[""Date""] = new Date(d[""Date""]);
            });

            const x = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Units Sold""])])
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Revenue""])])
                .range([height, 0]);

            const xAxis = d3.axisBottom(x);
            const yAxis = d3.axisLeft(y);

            g.append(""g"")
                .attr(""class"", ""axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(xAxis);

            g.append(""g"")
                .attr(""class"", ""axis"")
                .call(yAxis);

            const points = g.selectAll("".scatter-point"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""scatter-point"")
                .attr(""cx"", d => x(d[""Units Sold""]))
                .attr(""cy"", d => y(d[""Revenue""]))
                .attr(""r"", 3);

            const dates = Array.from(new Set(data.map(d => d[""Date""].toISOString().split('T')[0])));

            const slider = d3.select(""#dateSlider"")
                .attr(""max"", dates.length - 1)
                .attr(""value"", 0);

            slider.on(""input"", function() {
                const index = +this.value;
                const filteredData = data.filter(d => d[""Date""].toISOString().split('T')[0] === dates[index]);

                points
                    .data(filteredData)
                    .attr(""cx"", d => x(d[""Units Sold""]))
                    .attr(""cy"", d => y(d[""Revenue""]))
                    .attr(""r"", 3);
                    
                d3.select(""#sliderValue"").text(`Date: ${dates[index]}`);
            });

            d3.select(""#sliderValue"").text(`Date: ${dates[0]}`);
        });
    </script>
</body>
</html>
```"
6,scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot showing the Units Sold of Phoenix. Add animated transitions that connect these points using lines in order.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,advanced view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Phoenix Units Sold Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .point {
            fill: blue;
        }
        .line {
            fill: none;
            stroke: orange;
            stroke-width: 2px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = {top: 20, right: 30, bottom: 30, left: 40};
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;
        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            data.forEach(d => {
                if (d['Store Location'] === 'Phoenix') {
                    d['Units Sold'] = +d['Units Sold'];
                    d['Date'] = new Date(d['Date']);
                }
            });

            data = data.filter(d => d['Store Location'] === 'Phoenix');

            const x = d3.scaleTime()
                .domain(d3.extent(data, d => d['Date']))
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Units Sold'])])
                .range([height, 0]);

            const xAxis = d3.axisBottom(x);
            const yAxis = d3.axisLeft(y);

            g.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(xAxis);

            g.append(""g"")
                .attr(""class"", ""y axis"")
                .call(yAxis);

            const lineGenerator = d3.line()
                .x(d => x(d['Date']))
                .y(d => y(d['Units Sold']));

            const linePath = g.append(""path"")
                .datum(data)
                .attr(""class"", ""line"")
                .attr(""d"", lineGenerator)
                .attr(""opacity"", 0)
                .transition()
                .duration(2000)
                .attr(""opacity"", 1);

            const points = g.selectAll("".point"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""point"")
                .attr(""cx"", d => x(d['Date']))
                .attr(""cy"", d => y(d['Units Sold']))
                .attr(""r"", 5)
                .attr(""opacity"", 0)
                .transition()
                .duration(2000)
                .delay((d, i) => i * 200)
                .attr(""opacity"", 1);
        });
    </script>
</body>
</html>
```"
7,line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Units Sold of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,advanced view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Multi-Series Line Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke-width: 2px;
        }
        .line:hover {
            stroke-width: 4px;
        }
        .axis path,
        .axis line {
            fill: none;
            shape-rendering: crispEdges;
        }
        .tooltip {
            position: absolute;
            text-align: center;
            padding: 5px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <svg width=""960"" height=""500""></svg>
    <script>
        const margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +d3.select(""svg"").attr(""width"") - margin.left - margin.right,
              height = +d3.select(""svg"").attr(""height"") - margin.top - margin.bottom;

        const svg = d3.select(""svg"").append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleTime().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        const line = d3.line()
            .x(d => x(d.Date))
            .y(d => y(d.Units_Sold));

        const color = d3.scaleOrdinal(d3.schemeCategory10);

        const tooltip = d3.select(""body"").append(""div"").attr(""class"", ""tooltip"").style(""opacity"", 0);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            const nestedData = d3.groups(data, d => d[""Store Location""]);
            nestedData.forEach(group => {
                group[1].forEach(d => {
                    d.Date = d3.timeParse(""%Y-%m-%d"")(d.Date);
                    d.Units_Sold = +d[""Units Sold""];
                });
            });

            x.domain(d3.extent(data, d => d3.timeParse(""%Y-%m-%d"")(d.Date)));
            y.domain([0, d3.max(data, d => +d[""Units Sold""])]);

            svg.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""y axis"")
                .call(d3.axisLeft(y));

            const series = svg.selectAll("".series"")
                .data(nestedData)
                .enter().append(""g"")
                .attr(""class"", ""series"");

            series.append(""path"")
                .attr(""class"", ""line"")
                .attr(""d"", d => line(d[1]))
                .style(""stroke"", (d, i) => color(i))
                .on(""mouseover"", function(event, d) {
                    d3.select(this).style(""stroke-width"", ""4px"");
                    tooltip.transition().duration(200).style(""opacity"", .9);
                })
                .on(""mouseout"", function(d) {
                    d3.select(this).style(""stroke-width"", ""2px"");
                    tooltip.transition().duration(500).style(""opacity"", 0);
                })
                .on(""mousemove"", function(event, d) {
                    const [x, y] = d3.pointer(event);
                    tooltip.html(`${d[0]}: ${d[1].length} data points`)
                        .style(""left"", (event.pageX + 5) + ""px"")
                        .style(""top"", (event.pageY - 28) + ""px"");
                });
        });
    </script>
</body>
</html>
```"
8,bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,advanced view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Bar Chart - Units Sold by Store Location</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }

        .bar:hover {
            fill: orange;
        }

        .axis--x path,
        .axis--x line {
            display: none;
        }

        .axis--y .domain {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleBand().range([0, width]).padding(0.1);
        const y = d3.scaleLinear().range([height, 0]);

        const zoom = d3.zoom()
            .scaleExtent([1, 10])
            .on(""zoom"", (event) => {
                g.attr(""transform"", event.transform);
            });

        svg.call(zoom);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"")
            .then(data => {
                data.forEach(d => {
                    if (d['Date'] === '2021-01-01') {
                        d['Units Sold'] = +d['Units Sold'];
                    }
                });

                const filteredData = data.filter(d => d['Date'] === '2021-01-01');

                x.domain(filteredData.map(d => d['Store Location']));
                y.domain([0, d3.max(filteredData, d => d['Units Sold'])]);

                g.append(""g"")
                    .attr(""class"", ""axis axis--x"")
                    .attr(""transform"", `translate(0,${height})`)
                    .call(d3.axisBottom(x));

                g.append(""g"")
                    .attr(""class"", ""axis axis--y"")
                    .call(d3.axisLeft(y));

                g.selectAll("".bar"")
                    .data(filteredData)
                    .enter().append(""rect"")
                    .attr(""class"", ""bar"")
                    .attr(""x"", d => x(d['Store Location']))
                    .attr(""y"", d => y(d['Units Sold']))
                    .attr(""width"", x.bandwidth())
                    .attr(""height"", d => height - y(d['Units Sold']));
            });
    </script>
</body>
</html>
```"
9,bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,advanced view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Bar Chart of Units Sold</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
            cursor: pointer;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path,
        .axis--x line {
            display: none;
        }
        .axis--y line {
            stroke: #ccc;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const margin = {top: 20, right: 30, bottom: 50, left: 40};
        const width = 800 - margin.left - margin.right;
        const height = 400 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            data.forEach(d => {
                if (d['Date'] === '2021-01-01') {
                    d['Units Sold'] = +d['Units Sold'];
                }
            });

            const filteredData = data.filter(d => d['Date'] === '2021-01-01');
            const storeData = d3.rollup(filteredData, v => d3.sum(v, d => d['Units Sold']), d => d['Store Location']);
            const storeArray = Array.from(storeData, ([key, value]) => ({StoreLocation: key, UnitsSold: value}));

            const x = d3.scaleBand()
                .domain(storeArray.map(d => d.StoreLocation))
                .range([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([0, d3.max(storeArray, d => d.UnitsSold)])
                .nice()
                .range([height, 0]);

            svg.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            const bars = svg.selectAll("".bar"")
                .data(storeArray)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => x(d.StoreLocation))
                .attr(""y"", d => y(d.UnitsSold))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d.UnitsSold))
                .call(d3.drag()
                    .on(""start"", dragstarted)
                    .on(""drag"", dragged)
                    .on(""end"", dragended));

            function dragstarted(event, d) {
                d3.select(this).raise().classed(""active"", true);
            }

            function dragged(event, d) {
                const xPos = Math.min(width - x.bandwidth(), Math.max(0, event.x));
                d3.select(this).attr(""x"", xPos).attr(""y"", y(d.UnitsSold));
            }

            function dragended(event, d) {
                const newX = d3.select(this).attr(""x"");
                const newIndex = Math.round((newX / x.bandwidth()));
                d3.select(this).attr(""x"", x(storeArray[newIndex].StoreLocation))
                .attr(""y"", y(d.UnitsSold)).classed(""active"", false);
                update(newIndex);
            }

            function update() {
                bars.transition().duration(200)
                    .attr(""x"", d => x(d.StoreLocation))
                    .attr(""width"", x.bandwidth())
                    .attr(""height"", d => height - y(d.UnitsSold))
                    .attr(""y"", d => y(d.UnitsSold));
            }
        });
    </script>
</body>
</html>
```"
10,bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Units Sold.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,advanced view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Bar Chart - Units Sold</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path {
            display: none;
        }
        .axis--y path {
            display: none;
        }
    </style>
</head>
<body>
    <h1>Units Sold by Store Location on 2021-01-01</h1>
    <select id=""sortOrder"">
        <option value=""ascending"">Ascending</option>
        <option value=""descending"">Descending</option>
    </select>
    <svg width=""800"" height=""400""></svg>

    <script>
        const svg = d3.select(""svg""),
            margin = { top: 20, right: 30, bottom: 40, left: 40 },
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            data = data.filter(d => d[""Date""] === ""2021-01-01"");
            data.forEach(d => {
                d[""Units Sold""] = +d[""Units Sold""];
            });

            let sortOrder = ""ascending"";
            render(data);

            d3.select(""#sortOrder"").on(""change"", function() {
                sortOrder = this.value;
                render(data);
            });

            function render(data) {
                // Sort data
                data.sort((a, b) => sortOrder === ""ascending"" ? a[""Units Sold""] - b[""Units Sold""] : b[""Units Sold""] - a[""Units Sold""]);

                const x = d3.scaleBand()
                    .domain(data.map(d => d[""Store Location""]))
                    .range([0, width])
                    .padding(0.1);

                const y = d3.scaleLinear()
                    .domain([0, d3.max(data, d => d[""Units Sold""])])
                    .nice()
                    .range([height, 0]);

                // Clear previous bars
                g.selectAll("".bar"").remove();
                g.selectAll("".axis"").remove();

                g.append(""g"")
                    .selectAll("".bar"")
                    .data(data)
                    .enter().append(""rect"")
                    .attr(""class"", ""bar"")
                    .attr(""x"", d => x(d[""Store Location""]))
                    .attr(""y"", d => y(d[""Units Sold""]))
                    .attr(""width"", x.bandwidth())
                    .attr(""height"", d => height - y(d[""Units Sold""]))
                    .transition()
                    .duration(750)
                    .attr(""height"", d => height - y(d[""Units Sold""]));

                g.append(""g"")
                    .attr(""class"", ""axis axis--x"")
                    .attr(""transform"", `translate(0,${height})`)
                    .call(d3.axisBottom(x));

                g.append(""g"")
                    .attr(""class"", ""axis axis--y"")
                    .call(d3.axisLeft(y));
            }
        });
    </script>
</body>
</html>
```"
