Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Net Income and Revenue, and a Bar Chart on the right that displays Company versus Net Income.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #container {
            display: flex;
        }
        #scatterplot {
            width: 50%;
            height: 400px;
        }
        #barchart {
            width: 50%;
            height: 400px;
        }
    </style>
</head>
<body>

<div id=""container"">
    <div id=""scatterplot""></div>
    <div id=""barchart""></div>
</div>

<script>
    fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1);
            const netIncome = [];
            const revenue = [];
            const companies = [];
            const incomeData = [];

            rows.forEach(row => {
                const cols = row.split(',');
                if (cols.length > 6) {
                    netIncome.push(parseFloat(cols[2]));
                    revenue.push(parseFloat(cols[3]));
                    companies.push(cols[1]);
                    incomeData.push({ name: cols[1], value: parseFloat(cols[2]) });
                }
            });

            const scatterChart = echarts.init(document.getElementById('scatterplot'));
            scatterChart.setOption({
                title: { text: 'Net Income vs Revenue' },
                tooltip: {},
                xAxis: { name: 'Revenue', type: 'value' },
                yAxis: { name: 'Net Income', type: 'value' },
                series: [{
                    symbolSize: 10,
                    data: netIncome.map((income, index) => [revenue[index], income]),
                    type: 'scatter'
                }]
            });

            const barChart = echarts.init(document.getElementById('barchart'));
            barChart.setOption({
                title: { text: 'Company vs Net Income' },
                tooltip: {},
                xAxis: {
                    type: 'category',
                    data: companies,
                    axisLabel: { interval: 0, rotate: 45 }
                },
                yAxis: { type: 'value' },
                series: [{
                    data: incomeData.map(item => item.value),
                    type: 'bar'
                }]
            });
        });
</script>

</body>
</html>
```"
2,scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Net Income and Revenue, and a Bar Chart on the right that displays Company versus Net Income. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Visualization</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
    <style>
        #chartContainer {
            display: flex;
            justify-content: space-between;
        }
        .chart {
            width: 45%;
            height: 500px;
        }
    </style>
</head>
<body>

<div id=""chartContainer"">
    <div id=""scatterPlot"" class=""chart""></div>
    <div id=""barChart"" class=""chart""></div>
</div>

<script>
    async function fetchData() {
        const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv');
        const data = await response.text();
        return parseCSV(data);
    }

    function parseCSV(data) {
        const rows = data.split('\n').slice(1);
        return rows.map(row => {
            const cols = row.split(',');
            return {
                Quarter: cols[0],
                Company: cols[1],
                NetIncome: parseFloat(cols[2]),
                Revenue: parseFloat(cols[3]),
                Expenses: parseFloat(cols[4]),
                EmployeeCount: parseInt(cols[5]),
                Industry: cols[6],
                StockPrice: parseFloat(cols[7])
            };
        }).filter(row => !isNaN(row.NetIncome) && !isNaN(row.Revenue));
    }

    function renderScatterPlot(data) {
        const scatterPlot = echarts.init(document.getElementById('scatterPlot'));
        
        scatterPlot.setOption({
            tooltip: {},
            xAxis: {
                name: 'Revenue',
            },
            yAxis: {
                name: 'Net Income',
            },
            series: [{
                symbolSize: 10,
                data: data.map(item => [item.Revenue, item.NetIncome]),
                type: 'scatter'
            }]
        });

        scatterPlot.on('brush:select', function (params) {
            const selectedPoints = params.batch[0].areas[0].dataIndex; 
            const selectedCompanies = selectedPoints.map(index => data[index].Company);
            highlightBarChart(selectedCompanies);
        });
    }

    function highlightBarChart(selectedCompanies) {
        const barChart = echarts.init(document.getElementById('barChart'));

        const filteredData = barData.filter(item => selectedCompanies.includes(item.Company));
        const companies = filteredData.map(item => item.Company);
        const netIncomes = filteredData.map(item => item.NetIncome);

        barChart.setOption({
            tooltip: {},
            xAxis: {
                data: companies,
            },
            yAxis: {},
            visualMap: {
                show: false,
                dimension: 0,
                pieces: selectedCompanies.map(company => ({ value: company, color: '#ff0000' })),
            },
            series: [{
                type: 'bar',
                data: netIncomes,
                itemStyle: {
                    color: function(params) {
                        return selectedCompanies.includes(companies[params.dataIndex]) ? '#ff0000' : '#3398DB';
                    }
                }
            }]
        });
    }

    async function init() {
        const data = await fetchData();
        window.barData = data;
        renderScatterPlot(data);
        highlightBarChart([]);
    }

    init();
</script>

</body>
</html>
```"
3,line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Net Income , while the pie chart represents the distribution of Revenue.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""lineChart"" style=""width: 100%; height: 400px;""></div>
    <div id=""pieChart"" style=""width: 100%; height: 400px;""></div>

    <script>
        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv');
            const data = await response.text();
            const rows = data.split('\n').slice(1);
            const quarters = [];
            const netIncome = [];
            const revenueData = {};
            
            rows.forEach(row => {
                const columns = row.split(',');
                const quarter = columns[0];
                const company = columns[1];
                const netIncomeValue = parseFloat(columns[2]) || 0;
                const revenueValue = parseFloat(columns[3]) || 0;
                
                quarters.push(quarter);
                netIncome.push(netIncomeValue);
                
                if (revenueData[company]) {
                    revenueData[company] += revenueValue;
                } else {
                    revenueData[company] = revenueValue;
                }
            });

            drawLineChart(quarters, netIncome);
            drawPieChart(revenueData);
        }

        function drawLineChart(quarters, netIncome) {
            const myChart = echarts.init(document.getElementById('lineChart'));
            const option = {
                title: {
                    text: 'Net Income Trend'
                },
                tooltip: {},
                xAxis: {
                    type: 'category',
                    data: quarters
                },
                yAxis: {
                    type: 'value'
                },
                series: [{
                    name: 'Net Income',
                    type: 'line',
                    data: netIncome
                }]
            };
            myChart.setOption(option);
        }

        function drawPieChart(revenueData) {
            const myChart = echarts.init(document.getElementById('pieChart'));
            const pieData = Object.entries(revenueData).map(([company, revenue]) => ({
                name: company,
                value: revenue
            }));

            const option = {
                title: {
                    text: 'Revenue Distribution',
                    subtext: 'By Company',
                    left: 'center'
                },
                tooltip: {
                    trigger: 'item'
                },
                series: [{
                    type: 'pie',
                    radius: '50%',
                    data: pieData,
                    emphasis: {
                        itemStyle: {
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowColor: 'rgba(0, 0, 0, 0.5)'
                        }
                    }
                }]
            };
            myChart.setOption(option);
        }

        fetchData();
    </script>
</body>
</html>
```"
4,line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Net Income , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""lineChart"" style=""width: 100%; height: 400px;""></div>
    <div id=""pieChart"" style=""width: 100%; height: 400px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const chartData = rows.map(row => {
                    const cols = row.split(',');
                    return {
                        Quarter: cols[0],
                        Company: cols[1],
                        NetIncome: parseFloat(cols[2]),
                        Revenue: parseFloat(cols[3]),
                        Expenses: parseFloat(cols[4]),
                        EmployeeCount: parseInt(cols[5]),
                        Industry: cols[6],
                        StockPrice: parseFloat(cols[7])
                    };
                }).filter(row => !isNaN(row.NetIncome) && !isNaN(row.Revenue));
                
                drawLineChart(chartData);
                drawPieChart(chartData);
            });

        let lineChartInstance;
        let pieChartInstance;

        function drawLineChart(data) {
            const netIncomeData = data.map(item => item.NetIncome);
            const quarters = data.map(item => item.Quarter);

            lineChartInstance = echarts.init(document.getElementById('lineChart'));
            lineChartInstance.setOption({
                title: {
                    text: 'Net Income Trend'
                },
                xAxis: {
                    type: 'category',
                    data: quarters
                },
                yAxis: {
                    type: 'value'
                },
                series: [{
                    data: netIncomeData,
                    type: 'line',
                    smooth: true,
                }],
            });

            lineChartInstance.on('brush', params => {
                const selectedData = data.filter((item, index) => params.batch[0].areas[0].coordRange[0] <= index && index <= params.batch[0].areas[0].coordRange[1]);
                updatePieChart(selectedData);
            });
        }

        function drawPieChart(data) {
            const revenueData = {};

            data.forEach(item => {
                if (!revenueData[item.Industry]) {
                    revenueData[item.Industry] = 0;
                }
                revenueData[item.Industry] += item.Revenue;
            });

            const pieData = Object.entries(revenueData).map(([key, value]) => ({ name: key, value }));

            pieChartInstance = echarts.init(document.getElementById('pieChart'));
            pieChartInstance.setOption({
                title: {
                    text: 'Revenue Distribution by Industry'
                },
                series: [{
                    type: 'pie',
                    radius: '50%',
                    data: pieData,
                    emphasis: {
                        itemStyle: {
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowColor: 'rgba(0, 0, 0, 0.5)'
                        }
                    }
                }],
            });
        }

        function updatePieChart(selectedData) {
            drawPieChart(selectedData);
        }

    </script>
</body>
</html>
```"
5,scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Revenue, Expenses, Employee Count, and Stock Price. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        .container {
            display: flex;
            flex-wrap: wrap;
        }
        .chart {
            width: 400px;
            height: 400px;
            margin: 10px;
        }
    </style>
</head>
<body>
    <div class=""container"">
        <div id=""scatter-rr"" class=""chart""></div>
        <div id=""scatter-re"" class=""chart""></div>
        <div id=""scatter-rp"" class=""chart""></div>
        <div id=""scatter-ee"" class=""chart""></div>
        <div id=""scatter-ep"" class=""chart""></div>
        <div id=""scatter-pp"" class=""chart""></div>
    </div>
    <script>
        let dataset;

        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                dataset = rows.map(row => {
                    const cols = row.split(',');
                    return {
                        Revenue: +cols[3],
                        Expenses: +cols[4],
                        EmployeeCount: +cols[5],
                        StockPrice: +cols[7],
                    };
                });
                drawScatterplotMatrix();
            });

        function drawScatterplotMatrix() {
            const highlights = new Set();

            const optionConfig = (xKey, yKey) => ({
                tooltip: {},
                xAxis: { type: 'value', name: xKey },
                yAxis: { type: 'value', name: yKey },
                series: [{
                    type: 'scatter',
                    data: dataset.map(d => [d[xKey], d[yKey]]),
                    itemStyle: {
                        color: (params) => highlights.has(params.dataIndex) ? 'red' : '#3398DB',
                    },
                }],
                brush: {
                    toolbox: ['rect', 'polygon', 'keep', 'clear'],
                },
            });

            const charts = [
                { id: 'scatter-rr', x: 'Revenue', y: 'Revenue' },
                { id: 'scatter-re', x: 'Revenue', y: 'Expenses' },
                { id: 'scatter-rp', x: 'Revenue', y: 'StockPrice' },
                { id: 'scatter-ee', x: 'Expenses', y: 'Expenses' },
                { id: 'scatter-ep', x: 'Expenses', y: 'StockPrice' },
                { id: 'scatter-pp', x: 'StockPrice', y: 'StockPrice' },
            ];

            charts.forEach(chart => {
                const chartElem = echarts.init(document.getElementById(chart.id));
                chartElem.setOption(optionConfig(chart.x, chart.y));
                chartElem.on('brushSelected', params => {
                    highlights.clear();
                    params.batch.forEach(batch => {
                        batch.selected.forEach(item => {
                            item.dataIndex.forEach(index => highlights.add(index));
                        });
                    });
                    charts.forEach(c => {
                        echarts.init(document.getElementById(c.id)).setOption(optionConfig(c.x, c.y));
                    });
                });
            });
        }
    </script>
</body>
</html>
```"
6,scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a brushable Scatterplot that visualizes the relationship between Net Income and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 70%;
            height: 600px;
            float: left;
        }
        #table {
            width: 30%;
            height: 600px;
            float: right;
            overflow: auto;
            border: 1px solid #ccc;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            padding: 8px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
    </style>
</head>
<body>

<div id=""main""></div>
<div id=""table"">
    <table>
        <thead>
            <tr>
                <th>Quarter</th>
                <th>Company</th>
                <th>Net Income</th>
                <th>Revenue</th>
                <th>Expenses</th>
                <th>Employee Count</th>
                <th>Industry</th>
                <th>Stock Price</th>
            </tr>
        </thead>
        <tbody id=""table-body"">
        </tbody>
    </table>
</div>

<script>
    const myChart = echarts.init(document.getElementById('main'));

    fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
        .then(response => response.text())
        .then(data => {
            const lines = data.split('\n').slice(1);
            const parsedData = lines.map(line => {
                const [quarter, company, netIncome, revenue, expenses, employeeCount, industry, stockPrice] = line.split(',');
                return {
                    Quarter: quarter,
                    Company: company,
                    NetIncome: parseFloat(netIncome),
                    Revenue: parseFloat(revenue),
                    Expenses: parseFloat(expenses),
                    EmployeeCount: parseInt(employeeCount, 10),
                    Industry: industry,
                    StockPrice: parseFloat(stockPrice)
                };
            }).filter(item => !isNaN(item.NetIncome) && !isNaN(item.Revenue));

            myChart.setOption({
                title: { text: 'Net Income vs Revenue' },
                tooltip: {},
                xAxis: { name: 'Revenue', type: 'value' },
                yAxis: { name: 'Net Income', type: 'value' },
                series: [{
                    symbolSize: 10,
                    data: parsedData.map(item => [item.Revenue, item.NetIncome]),
                    type: 'scatter'
                }]
            });

            myChart.on('brushSelected', params => {
                const selectedPoints = params.batch[0].selected[0].dataIndex;
                const selectedData = selectedPoints.map(idx => parsedData[idx]).slice(0, 20);
                const tableBody = document.getElementById('table-body');
                tableBody.innerHTML = selectedData.map(item => 
                    `<tr>
                        <td>${item.Quarter}</td>
                        <td>${item.Company}</td>
                        <td>${item.NetIncome}</td>
                        <td>${item.Revenue}</td>
                        <td>${item.Expenses}</td>
                        <td>${item.EmployeeCount}</td>
                        <td>${item.Industry}</td>
                        <td>${item.StockPrice}</td>
                    </tr>`
                ).join('');
            });
        });
</script>

</body>
</html>
```"
7,bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a horizontal Bar Chart that shows all the data concerning Net Income, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 80%; height: 600px; margin: auto;""></div>
    <div id=""minimap"" style=""width: 20%; height: 300px; position: absolute; right: 0; top: 0;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const quarters = [];
                const netIncome = [];
                rows.forEach(row => {
                    const cols = row.split(',');
                    if (cols.length > 1) {
                        quarters.push(cols[0]);
                        netIncome.push(parseFloat(cols[2]));
                    }
                });

                const mainChart = echarts.init(document.getElementById('main'));
                const minimapChart = echarts.init(document.getElementById('minimap'));

                const mainOption = {
                    title: { text: 'Net Income by Quarter' },
                    tooltip: {},
                    xAxis: {
                        type: 'value',
                        name: 'Net Income',
                    },
                    yAxis: {
                        type: 'category',
                        data: quarters,
                    },
                    series: [{
                        name: 'Net Income',
                        type: 'bar',
                        data: netIncome
                    }]
                };

                const minimapOption = {
                    title: { text: 'Minimap of Net Income' },
                    tooltip: {},
                    xAxis: {
                        type: 'value',
                        name: 'Net Income',
                    },
                    yAxis: {
                        type: 'category',
                        data: quarters,
                    },
                    series: [{
                        name: 'Net Income',
                        type: 'bar',
                        data: netIncome.map(value => value > 0 ? value : 0)  // Overlaying the minimap as a positive representation
                    }]
                };

                mainChart.setOption(mainOption);
                minimapChart.setOption(minimapOption);
            });
    </script>
</body>
</html>
```"
