Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Units Sold vs Revenue</title>
    <style>
        .scatter {
            fill: steelblue;
        }
        .axis {
            font: 10px sans-serif;
        }
        .x.axis path,
        .y.axis path {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d['Units Sold'] = +d['Units Sold'];
                d['Revenue'] = +d['Revenue'];
            });

            const x = d3.scaleLinear()
                        .domain(d3.extent(data, d => d['Units Sold'])).nice()
                        .range([0, width]);

            const y = d3.scaleLinear()
                        .domain(d3.extent(data, d => d['Revenue'])).nice()
                        .range([height, 0]);

            g.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""y axis"")
                .call(d3.axisLeft(y));

            g.selectAll("".dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""scatter"")
                .attr(""cx"", d => x(d['Units Sold']))
                .attr(""cy"", d => y(d['Revenue']))
                .attr(""r"", 5);
        });
    </script>
</body>
</html>
```"
2,line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Line Chart that visualizes the trend of Units Sold over the Year for each Product.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold Trend</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke-width: 2px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d.Year = +d.Year;
                d['Units Sold'] = +d['Units Sold'];
            });

            const products = Array.from(new Set(data.map(d => d.Product)));

            const x = d3.scaleLinear()
                .domain(d3.extent(data, d => d.Year))
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Units Sold'])])
                .range([height, 0]);

            const line = d3.line()
                .x(d => x(d.Year))
                .y(d => y(d['Units Sold']));

            const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(products);

            products.forEach(product => {
                const productData = data.filter(d => d.Product === product);
                g.append(""path"")
                    .datum(productData)
                    .attr(""fill"", ""none"")
                    .attr(""class"", ""line"")
                    .attr(""stroke"", colorScale(product))
                    .attr(""d"", line);
            });

            g.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x).tickFormat(d3.format(""d"")));

            g.append(""g"")
                .call(d3.axisLeft(y));

            g.append(""text"")
                .attr(""x"", width / 2)
                .attr(""y"", height + margin.bottom / 2)
                .attr(""text-anchor"", ""middle"")
                .text(""Year"");

            g.append(""text"")
                .attr(""transform"", ""rotate(-90)"")
                .attr(""y"", 0 - margin.left / 2)
                .attr(""x"", 0 - height / 2)
                .attr(""text-anchor"", ""middle"")
                .text(""Units Sold"");
        });
    </script>
</body>
</html>
```"
3,bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Units Sold for each Product in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">

<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold by Product in 2020</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }

        .bar:hover {
            fill: orange;
        }

        .axis--x path {
            display: none;
        }
    </style>
</head>

<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            const filteredData = data.filter(d => d.Year === ""2020"");
            const products = filteredData.map(d => d.Product);
            const unitsSold = filteredData.map(d => +d[""Units Sold""]);

            const svg = d3.select(""svg""),
                margin = { top: 20, right: 30, bottom: 40, left: 40 },
                width = +svg.attr(""width"") - margin.left - margin.right,
                height = +svg.attr(""height"") - margin.top - margin.bottom;

            const x = d3.scaleBand()
                .domain(products)
                .range([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([0, d3.max(unitsSold)])
                .nice()
                .range([height, 0]);

            const g = svg.append(""g"")
                .attr(""transform"", `translate(${margin.left},${margin.top})`);

            g.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x).tickFormat(d => d).rotate(0));

            g.append(""g"")
                .attr(""class"", ""y axis"")
                .call(d3.axisLeft(y));

            g.selectAll("".bar"")
                .data(unitsSold)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", (d, i) => x(products[i]))
                .attr(""y"", d => y(d))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d));
        });
    </script>
</body>

</html>
```"
4,pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Pie Chart that visualizes the proportion of Units Sold contributed by each Product in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold by Product in 2020</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
</head>
<body>
    <h2>Units Sold by Product in 2020</h2>
    <svg width=""500"" height=""500""></svg>
    <script>
        const width = 500;
        const height = 500;
        const radius = Math.min(width, height) / 2;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            const filteredData = data.filter(d => d.Year === ""2020"");
            const productData = d3.rollup(filteredData, v => d3.sum(v, d => +d[""Units Sold""]), d => d.Product);
            
            const pie = d3.pie().value(d => d[1]);
            const arc = d3.arc().innerRadius(0).outerRadius(radius);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const arcs = svg.selectAll(""arc"")
                .data(pie(Array.from(productData.entries())))
                .enter()
                .append(""g"")
                .attr(""class"", ""arc"");

            arcs.append(""path"")
                .attr(""d"", arc)
                .attr(""fill"", (d) => color(d.data[0]));

            arcs.append(""text"")
                .attr(""transform"", (d) => `translate(${arc.centroid(d)})`)
                .attr(""dy"", "".35em"")
                .text((d) => d.data[0]);
        });
    </script>
</body>
</html>
```"
5,donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Donut Chart that visualizes the distribution of Units Sold among Product in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Donut Chart</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .arc {
            stroke: #fff;
        }
    </style>
</head>
<body>
    <svg width=""500"" height=""500""></svg>
    <script>
        const width = 500, height = 500, margin = 50;
        const radius = Math.min(width, height) / 2 - margin;

        const svg = d3.select(""svg"")
            .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            const filteredData = data.filter(d => d.Year === ""2020"");

            const pieData = d3.rollup(filteredData, v => d3.sum(v, d => +d[""Units Sold""]), d => d.Product);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const pie = d3.pie()
                .value(d => d[1]);

            const arc = d3.arc()
                .innerRadius(radius * 0.5)
                .outerRadius(radius);

            const arcs = pie(Array.from(pieData));

            svg.selectAll(""path"")
                .data(arcs)
                .enter().append(""path"")
                .attr(""class"", ""arc"")
                .attr(""d"", arc)
                .attr(""fill"", (d, i) => color(i));
        });
    </script>
</body>
</html>
```"
6,coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Coxcomb Chart(polar area chart) to compare the Units Sold of different Product in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coxcomb Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .chart {
            fill: steelblue;
            opacity: 0.8;
        }
        .arc {
            stroke: white;
            stroke-width: 1;
        }
    </style>
</head>
<body>
    <svg width=""600"" height=""600""></svg>
    <script>
        const width = 600;
        const height = 600;
        const radius = Math.min(width, height) / 2;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            const filteredData = data.filter(d => d.Year === ""2020"");

            const unitsSold = {};
            filteredData.forEach(d => {
                const product = d.Product;
                unitsSold[product] = (unitsSold[product] || 0) + +d['Units Sold'];
            });

            const products = Object.keys(unitsSold);
            const values = Object.values(unitsSold);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const pie = d3.pie()
                .value(d => d)
                .sort(null);

            const arc = d3.arc()
                .innerRadius(0)
                .outerRadius(d => radius * (d.data / d3.max(values)));

            const arcData = pie(values);

            svg.selectAll("".arc"")
                .data(arcData)
                .enter().append(""path"")
                .attr(""class"", ""arc"")
                .attr(""d"", arc)
                .attr(""fill"", (d, i) => color(i))
                .attr(""transform"", (d, i) => `rotate(${(d.startAngle + d.endAngle) / 2 * 180 / Math.PI})`);

            svg.selectAll("".label"")
                .data(arcData)
                .enter().append(""text"")
                .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                .attr(""dy"", ""0.35em"")
                .text((d, i) => products[i]);
        });
    </script>
</body>
</html>
```"
7,radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Radar Chart to compare the Units Sold of different Product in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Radar Chart</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .radar-chart {
            position: relative;
            width: 500px;
            height: 500px;
        }

        .radar-area {
            fill-opacity: 0.5;
        }

        .radar-line {
            stroke-width: 2;
            fill: none;
        }
    </style>
</head>
<body>
    <svg class=""radar-chart""></svg>
    <script>
        const width = 500;
        const height = 500;
        const radius = Math.min(width, height) / 2;

        const radarChart = d3.select("".radar-chart"")
            .attr(""width"", width)
            .attr(""height"", height);

        const colors = d3.scaleOrdinal(d3.schemeCategory10);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            const filteredData = data.filter(d => d.Year === '2020');
            const productNames = Array.from(new Set(filteredData.map(d => d.Product)));

            const yAxis = d3.scaleLinear()
                .domain([0, d3.max(filteredData, d => +d['Units Sold'])])
                .range([0, radius]);

            const radarLine = d3.lineRadial()
                .radius((d) => yAxis(d))
                .angle((d, i) => (i * (2 * Math.PI)) / productNames.length);

            productNames.forEach((product, index) => {
                const productData = filteredData.filter(d => d.Product === product).map(d => +d['Units Sold']);
                
                radarChart.append(""path"")
                    .datum(productData)
                    .attr(""class"", ""radar-line"")
                    .attr(""d"", radarLine)
                    .attr(""transform"", `translate(${width / 2}, ${height / 2})`)
                    .style(""stroke"", colors(index))
                    .style(""fill"", colors(index));

                radarChart.append(""text"")
                    .attr(""x"", width / 2)
                    .attr(""y"", height / 2 + (index * 20) - 60)
                    .text(product);
            });
        });
    </script>
</body>
</html>
```"
8,streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Streamgraph that visualizes the changes of Units Sold over the Year for each Product.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Streamgraph Visualization</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .stream {
            fill-opacity: 0.8;
        }
    </style>
</head>
<body>
    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 100 },
              width = 960 - margin.left - margin.right,
              height = 500 - margin.top - margin.bottom;

        const svg = d3.select(""body"").append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
          .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            const allProducts = d3.nest()
                .key(d => d.Product)
                .entries(data);

            const years = Array.from(new Set(data.map(d => d.Year)));

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const stack = d3.stack()
                .keys(allProducts.map(d => d.key))
                .value((d, key) => {
                    return d.data[key] ? +d.data[key]['Units Sold'] : 0;
                });

            const series = stack(allProducts.map((prod, i) => {
                    const unitsByYear = {};
                    data.filter(d => d.Product === prod.key).forEach(d => {
                        unitsByYear[d.Year] = +d['Units Sold'];
                    });
                    return Object.assign({}, { key: prod.key }, { data: years.map(year => ({ year: year, [prod.key]: unitsByYear[year] || 0 })) });
                }));

            const x = d3.scaleTime()
                .domain(d3.extent(years, d => new Date(d)))
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(series, d => d3.max(d, key => key[1]))])
                .range([height, 0]);

            const area = d3.area()
                .x(d => x(new Date(d.data.year)))
                .y0(d => y(d[0]))
                .y1(d => y(d[1]));

            svg.selectAll("".stream"")
                .data(series)
              .enter().append(""path"")
                .attr(""class"", ""stream"")
                .attr(""d"", area)
                .style(""fill"", (d, i) => color(i))
                .attr(""transform"", `translate(0,0)`);
            
            svg.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x).tickFormat(d3.timeFormat(""%Y"")));

            svg.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```"
9,slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Slopegraph to compare the Units Sold between 2019 and 2020 for each Product Category.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Slopegraph of Units Sold</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 2px;
        }
        .dot {
            fill: steelblue;
        }
        .axis {
            font: 10px sans-serif;
        }
        .x-axis path,
        .x-axis line {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = {top: 20, right: 30, bottom: 30, left: 100},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleBand().range([height, 0]).padding(0.1);

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d['Units Sold'] = +d['Units Sold'];
                d['Year'] = +d['Year'];
            });

            const products = d3.rollup(data, v => v.reduce((acc, d) => {
                if (d.Year === 2019) acc[0] = d['Units Sold'];
                if (d.Year === 2020) acc[1] = d['Units Sold'];
                return acc;
            }, [0, 0]), d => d.Product);

            const productNames = Array.from(products.keys());
            const productsData = productNames.map(d => ({
                Product: d,
                Units: products.get(d)
            }));

            x.domain([0, d3.max(productsData, d => d.Units[0])]).nice();
            y.domain(productsData.map(d => d.Product));

            g.append(""g"")
             .attr(""class"", ""x-axis"")
             .attr(""transform"", `translate(0,${height})`)
             .call(d3.axisBottom(x));

            g.append(""g"")
             .attr(""class"", ""y-axis"")
             .call(d3.axisLeft(y));

            g.selectAll("".line"")
             .data(productsData)
             .enter().append(""line"")
             .attr(""class"", ""line"")
             .attr(""x1"", d => x(d.Units[0]))
             .attr(""x2"", d => x(d.Units[1]))
             .attr(""y1"", d => y(d.Product) + y.bandwidth() / 2)
             .attr(""y2"", d => y(d.Product) + y.bandwidth() / 2);

            g.selectAll("".dot"")
             .data(productsData)
             .enter().append(""circle"")
             .attr(""class"", ""dot"")
             .attr(""cx"", d => x(d.Units[0]))
             .attr(""cy"", d => y(d.Product) + y.bandwidth() / 2)
             .attr(""r"", 4);

            g.selectAll("".dot"")
             .data(productsData)
             .enter().append(""circle"")
             .attr(""class"", ""dot"")
             .attr(""cx"", d => x(d.Units[1]))
             .attr(""cy"", d => y(d.Product) + y.bandwidth() / 2)
             .attr(""r"", 4);
        });
    </script>
</body>
</html>
```"
10,heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Heatmap that visualizes the Units Sold across Product and Years.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Heatmap of Units Sold</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .heatmap rect {
            stroke-width: 1;
            stroke: #fff;
        }
    </style>
</head>
<body>
    <svg class=""heatmap"" width=""800"" height=""400""></svg>
    <script>
        const margin = { top: 20, right: 30, bottom: 40, left: 40 },
            width = 800 - margin.left - margin.right,
            height = 400 - margin.top - margin.bottom;
        
        const svg = d3.select("".heatmap"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            const products = Array.from(new Set(data.map(d => d.Product)));
            const years = Array.from(new Set(data.map(d => d.Year)));

            const x = d3.scaleBand()
                .range([0, width])
                .domain(years)
                .padding(0.05);

            const y = d3.scaleBand()
                .range([height, 0])
                .domain(products)
                .padding(0.05);

            const colorScale = d3.scaleSequential(d3.interpolateBlues)
                .domain([0, d3.max(data, d => +d[""Units Sold""])]);

            svg.append(""g"")
                .selectAll()
                .data(data)
                .join(""rect"")
                .attr(""x"", d => x(d.Year))
                .attr(""y"", d => y(d.Product))
                .attr(""width"", x.bandwidth())
                .attr(""height"", y.bandwidth())
                .attr(""fill"", d => colorScale(+d[""Units Sold""]));

            svg.append(""g"")
                .attr(""class"", ""x-axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""y-axis"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```"
11,bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Stacked Bar Chart</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .bar {
            width: 40px;
            margin: 1px;
        }
        .axis {
            font: 10px sans-serif;
            fill: #000;
        }
        .legend {
            font-size: 12px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>
    <script>
        const margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = 800 - margin.left - margin.right,
              height = 500 - margin.top - margin.bottom;

        const svg = d3.select('svg')
            .append('g')
            .attr('transform', `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
            .then(data => {
                data.forEach(d => {
                    d['Revenue'] = +d['Revenue'];
                    d['Profit'] = +d['Profit'];
                    d['Units Sold'] = +d['Units Sold'];
                });

                const keys = ['Revenue', 'Profit'];

                const color = d3.scaleBand()
                    .domain(keys)
                    .range([0, width])
                    .padding(0.1);

                const x0 = d3.scaleBand()
                    .range([0, width])
                    .paddingInner(0.1);
                
                const x1 = d3.scaleBand()
                    .domain(keys)
                    .range([0, x0.bandwidth()])
                    .padding(0.1);
                
                const y = d3.scaleLinear()
                    .range([height, 0]);

                const subgroups = keys;

                const groupData = d3.nest()
                    .key(d => d['Year'])
                    .entries(data);

                x0.domain(groupData.map(d => d.key));

                y.domain([0, d3.max(data, d => d3.max(subgroups, key => d[key]))]);

                svg.append('g')
                    .selectAll('g')
                    .data(groupData)
                    .enter().append('g')
                    .attr('transform', d => `translate(${x0(d.key)},0)`)
                    .selectAll(""rect"")
                    .data(d => subgroups.map(key => ({key: key, value: d.values[0][key]})))
                    .enter().append(""rect"")
                    .attr(""x"", d => x1(d.key))
                    .attr(""y"", d => y(d.value))
                    .attr(""height"", d => height - y(d.value))
                    .attr(""width"", x1.bandwidth())
                    .attr(""fill"", d => d.key === 'Revenue' ? ""#74c476"" : ""#fd8d3c"");

                svg.append(""g"")
                    .attr(""class"", ""axis"")
                    .attr(""transform"", `translate(0,${height})`)
                    .call(d3.axisBottom(x0));

                svg.append(""g"")
                    .attr(""class"", ""axis"")
                    .call(d3.axisLeft(y));
                
                svg.append(""text"")
                    .attr(""x"", (width / 2))             
                    .attr(""y"", 0 - (margin.top / 2))
                    .attr(""text-anchor"", ""middle"")  
                    .style(""font-size"", ""16px"") 
                    .text(""Stacked Bar Chart of Retail Sales"");
            });
    </script>
</body>
</html>
```"
12,bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Horizontal Bar Chart that visualizes the Units Sold for each Product in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path, .axis--x line {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = {top: 20, right: 30, bottom: 40, left: 100};
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleBand().range([0, height]).padding(0.1);

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            const filteredData = data.filter(d => d.Year == ""2020"").map(d => ({
                Product: d.Product,
                UnitsSold: +d[""Units Sold""]
            }));

            x.domain([0, d3.max(filteredData, d => d.UnitsSold)]);
            y.domain(filteredData.map(d => d.Product));

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            g.selectAll("".bar"")
                .data(filteredData)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", 0)
                .attr(""y"", d => y(d.Product))
                .attr(""width"", d => x(d.UnitsSold))
                .attr(""height"", y.bandwidth());
        });
    </script>
</body>
</html>
```"
