Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Data Visualization</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .scatterplot {
            float: left;
            width: 50%;
        }
        .barchart {
            float: right;
            width: 50%;
        }
        svg {
            margin: 10px;
        }
    </style>
</head>
<body>
    <div class=""scatterplot"" id=""scatterplot""></div>
    <div class=""barchart"" id=""barchart""></div>

    <script>
        const width = 500;
        const height = 400;

        // Scatterplot
        const svgScatter = d3.select(""#scatterplot"").append(""svg"")
            .attr(""width"", width)
            .attr(""height"", height);

        // Bar Chart
        const svgBar = d3.select(""#barchart"").append(""svg"")
            .attr(""width"", width)
            .attr(""height"", height);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            // Preprocess data for scatterplot
            data.forEach(d => {
                d['Domestic Consumption'] = +d['Domestic Consumption'];
                d['Total Production'] = +d['Total Production'];
            });

            // Scatterplot
            const xScatter = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Domestic Consumption'])])
                .range([0, width]);

            const yScatter = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Total Production'])])
                .range([height, 0]);

            svgScatter.selectAll(""circle"")
                .data(data)
                .enter().append(""circle"")
                .attr(""cx"", d => xScatter(d['Domestic Consumption']))
                .attr(""cy"", d => yScatter(d['Total Production']))
                .attr(""r"", 5)
                .attr(""fill"", ""blue"");

            svgScatter.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(xScatter));

            svgScatter.append(""g"")
                .call(d3.axisLeft(yScatter));

            // Bar Chart
            const xBar = d3.scaleBand()
                .domain(data.map(d => d['Country']))
                .range([0, width])
                .padding(0.1);

            const yBar = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Domestic Consumption'])])
                .range([height, 0]);

            svgBar.selectAll(""rect"")
                .data(data)
                .enter().append(""rect"")
                .attr(""x"", d => xBar(d['Country']))
                .attr(""y"", d => yBar(d['Domestic Consumption']))
                .attr(""width"", xBar.bandwidth())
                .attr(""height"", d => height - yBar(d['Domestic Consumption']))
                .attr(""fill"", ""orange"");

            svgBar.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(xBar).tickFormat(d3.cut(d => d)));

            svgBar.append(""g"")
                .call(d3.axisLeft(yBar));
        });
    </script>
</body>
</html>
```"
2,scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Visualization</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatterplot {
            float: left;
            width: 50%;
        }
        .bar-chart {
            float: right;
            width: 50%;
        }
        .bar {
            fill: steelblue;
        }
        .bar.hover {
            fill: orange;
        }
        .dot {
            stroke: #fff;
        }
        .dot:hover {
            fill: orange;
        }
    </style>
</head>
<body>
    <div class=""scatterplot""></div>
    <div class=""bar-chart""></div>

    <script>
        const width = 450, height = 400;

        const svgScatter = d3.select("".scatterplot"").append(""svg"")
            .attr(""width"", width)
            .attr(""height"", height);

        const svgBar = d3.select("".bar-chart"").append(""svg"")
            .attr(""width"", width)
            .attr(""height"", height);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            data.forEach(d => {
                d.Year = +d.Year;
                d['Domestic Consumption'] = +d['Domestic Consumption'];
                d['Exports'] = +d['Exports'];
                d['Import Price'] = +d['Import Price'];
                d['Export Price'] = +d['Export Price'];
                d['Total Production'] = +d['Total Production'];
            });

            const xScatter = d3.scaleLinear()
                .domain(d3.extent(data, d => d['Domestic Consumption'])).nice()
                .range([0, width]);

            const yScatter = d3.scaleLinear()
                .domain(d3.extent(data, d => d['Exports'])).nice()
                .range([height, 0]);

            svgScatter.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(xScatter));

            svgScatter.append(""g"")
                .call(d3.axisLeft(yScatter));

            const dots = svgScatter.selectAll(""dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => xScatter(d['Domestic Consumption']))
                .attr(""cy"", d => yScatter(d['Exports']))
                .attr(""r"", 5)
                .on(""mouseover"", function(event, d) {
                    d3.select(this).style(""fill"", ""orange"");
                })
                .on(""mouseout"", function(event, d) {
                    d3.select(this).style(""fill"", null);
                });

            let barsData = [...new Set(data.map(d => d.Country))].map(country => {
                return {
                    Country: country,
                    Value: data.filter(d => d.Country === country).reduce((sum, d) => sum + d['Domestic Consumption'], 0)
                };
            });

            const xBar = d3.scaleBand()
                .domain(barsData.map(d => d.Country))
                .range([0, width])
                .padding(0.1);

            const yBar = d3.scaleLinear()
                .domain([0, d3.max(barsData, d => d.Value)]).nice()
                .range([height, 0]);

            svgBar.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(xBar).tickSize(0));

            svgBar.append(""g"")
                .call(d3.axisLeft(yBar));

            const bars = svgBar.selectAll("".bar"")
                .data(barsData)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => xBar(d.Country))
                .attr(""y"", d => yBar(d.Value))
                .attr(""width"", xBar.bandwidth())
                .attr(""height"", d => height - yBar(d.Value));

            let brushing = d3.brushX()
                .extent([[0, 0], [width, height]])
                .on(""end"", brushed);

            svgScatter.append(""g"")
                .attr(""class"", ""brush"")
                .call(brushing);

            function brushed(event) {
                const selection = event.selection;
                if (selection) {
                    const [x0, x1] = selection;
                    const selectedCountries = new Set();
                    dots.classed('selected', d => {
                        const isSelected = x0 <= xScatter(d['Domestic Consumption']) && xScatter(d['Domestic Consumption']) <= x1;
                        if (isSelected) selectedCountries.add(d.Country);
                        return isSelected;
                    });
                    bars.classed('hover', d => selectedCountries.has(d.Country));
                }
            }
        });
    </script>
</body>
</html>
```"
3,line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Domestic Consumption , while the pie chart represents the distribution of Exports.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Visualization</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 2;
        }
        .arc {
            stroke: #fff;
        }
    </style>
</head>
<body>
    <svg id=""lineChart"" width=""800"" height=""400""></svg>
    <svg id=""pieChart"" width=""400"" height=""400""></svg>
    
    <script>
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            // Process Domestic Consumption for line chart
            data.forEach(d => {
                d['Domestic Consumption'] = +d['Domestic Consumption'];
                d['Year'] = +d['Year'];
            });

            const lineSVG = d3.select(""#lineChart""),
                margin = {top: 20, right: 30, bottom: 30, left: 40},
                width = +lineSVG.attr(""width"") - margin.left - margin.right,
                height = +lineSVG.attr(""height"") - margin.top - margin.bottom;

            const x = d3.scaleLinear().domain(d3.extent(data, d => d['Year'])).range([margin.left, width - margin.right]);
            const y = d3.scaleLinear().domain([0, d3.max(data, d => d['Domestic Consumption'])]).range([height - margin.bottom, margin.top]);

            const line = d3.line()
                .x(d => x(d['Year']))
                .y(d => y(d['Domestic Consumption']));

            lineSVG.append(""g"")
                .attr(""transform"", `translate(${margin.left}, ${margin.top})`)
                .append(""path"")
                .datum(data)
                .attr(""fill"", ""none"")
                .attr(""class"", ""line"")
                .attr(""d"", line);

            lineSVG.append(""g"")
                .attr(""transform"", `translate(${margin.left}, ${height - margin.bottom})`)
                .call(d3.axisBottom(x));

            lineSVG.append(""g"")
                .attr(""transform"", `translate(${margin.left}, 0)`)
                .call(d3.axisLeft(y));

            // Process Exports for pie chart
            let exportData = data.map(d => ({ country: d['Country'], exports: +d['Exports'] }));
            const pieData = d3.pie().value(d => d.exports)(exportData);
            const radius = Math.min(400, 400) / 2;

            const color = d3.scaleOrdinal(d3.schemeCategory10);
            const pieSVG = d3.select(""#pieChart"").attr(""transform"", `translate(200, 200)`);

            const arc = d3.arc()
                .innerRadius(0)
                .outerRadius(radius);

            pieSVG.selectAll("".arc"")
                .data(pieData)
                .enter().append(""g"")
                .attr(""class"", ""arc"")
                .append(""path"")
                .attr(""d"", arc)
                .attr(""fill"", (d) => color(d.data.country));
        });
    </script>
</body>
</html>
```"
4,line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Domestic Consumption , while the pie chart represents the distribution of Exports. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Exports for the selected group.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Data Visualization</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke-width: 2px;
        }
        .arc {
            stroke-width: 1px;
        }
        .tooltip {
            position: absolute;
            text-align: center;
            width: 60px;
            padding: 8px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <svg width=""400"" height=""400""></svg>
    <script>
        const margin = {top: 20, right: 30, bottom: 30, left: 40};
        const width = 800 - margin.left - margin.right;
        const height = 400 - margin.top - margin.bottom;

        const svgLine = d3.select(""svg"").append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const svgPie = d3.select(""svg:nth-of-type(2)"").append(""g"")
            .attr(""transform"", `translate(200,200)`);

        const line = d3.line()
            .x(d => x(d.Year))
            .y(d => y(d.DomesticConsumption));
        
        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);
        let color = d3.scaleOrdinal(d3.schemeCategory10);
        const pie = d3.pie().value(d => d.Exports);
        const arc = d3.arc().innerRadius(0).outerRadius(100);
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            data.forEach(d => {
                d.Year = +d.Year;
                d.DomesticConsumption = +d.DomesticConsumption;
                d.Exports = +d.Exports;
            });

            const filteredData = data.filter(d => !isNaN(d.DomesticConsumption));
            x.domain(d3.extent(filteredData, d => d.Year));
            y.domain([0, d3.max(filteredData, d => d.DomesticConsumption)]);

            svgLine.append(""g"")
                .attr(""class"", ""x-axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svgLine.append(""g"")
                .attr(""class"", ""y-axis"")
                .call(d3.axisLeft(y));

            svgLine.append(""path"")
                .datum(filteredData)
                .attr(""class"", ""line"")
                .attr(""d"", line)
                .attr(""stroke"", ""blue"");

            let tooltip = d3.select(""body"").append(""div"").attr(""class"", ""tooltip"").style(""opacity"", 0);
            
            svgLine.selectAll("".dot"")
                .data(filteredData)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => x(d.Year))
                .attr(""cy"", d => y(d.DomesticConsumption))
                .attr(""r"", 5)
                .on(""mouseover"", function(event, d) {
                    tooltip.transition().duration(200).style(""opacity"", .9);
                    tooltip.html(d.Year + ""<br/>"" + d.DomesticConsumption)
                        .style(""left"", (event.pageX + 5) + ""px"")
                        .style(""top"", (event.pageY - 28) + ""px"");
                })
                .on(""mouseout"", function() {
                    tooltip.transition().duration(500).style(""opacity"", 0);
                });

            let pieData = filteredData.map(d => ({Country: d.Country, Exports: d.Exports}));
            const updatePie = (data) => {
                svgPie.selectAll(""*"").remove();
                const arcs = pie(data);
                const g = svgPie.selectAll("".arc"")
                    .data(arcs)
                    .enter().append(""g"")
                    .attr(""class"", ""arc"");

                g.append(""path"")
                    .attr(""d"", arc)
                    .attr(""fill"", (d, i) => color(i));

                g.append(""text"")
                    .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                    .attr(""dy"", "".35em"")
                    .text(d => d.data.Country);
            };

            updatePie(pieData);

            // Brush function
            const brush = d3.brushX()
                .extent([[0, 0], [width, height]])
                .on(""end"", brushed);

            svgLine.append(""g"")
                .attr(""class"", ""brush"")
                .call(brush);

            function brushed(event) {
                if (!event.selection) return;
                const [x0, x1] = event.selection;
                const selectedData = filteredData.filter(d => x(d.Year) >= x0 && x(d.Year) <= x1);
                const pieSelection = selectedData.map(d => ({Country: d.Country, Exports: d.Exports}));
                updatePie(pieSelection.length > 0 ? pieSelection : pieData);
            }
        });
    </script>
</body>
</html>
```"
5,scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to draw a brushable Scatterplot Matrix around the four attributes of the given data. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Scatterplot Matrix</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .scatter {
            cursor: pointer;
        }
        .highlight {
            stroke: red;
            stroke-width: 2;
        }
        .cell {
            padding: 20px;
        }
    </style>
</head>
<body>
    <script>
        const margin = {top: 20, right: 20, bottom: 20, left: 20};
        const width = 300 - margin.left - margin.right;
        const height = 300 - margin.top - margin.bottom;

        const attributes = [""Domestic Consumption"", ""Exports"", ""Import Price"", ""Export Price"", ""Total Production""];

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            attributes.forEach(attr => {
                data.forEach(d => {
                    d[attr] = +d[attr];
                });
            });

            const svg = d3.select(""body"").append(""svg"")
                .attr(""width"", (width + margin.left + margin.right) * attributes.length)
                .attr(""height"", (height + margin.top + margin.bottom) * attributes.length);

            const cell = svg.selectAll("".cell"")
                .data(d3.cross(attributes, attributes))
                .enter().append(""g"")
                .attr(""class"", ""cell"")
                .attr(""transform"", (d, i) => {
                    const x = (i % attributes.length) * (width + margin.left + margin.right);
                    const y = Math.floor(i / attributes.length) * (height + margin.top + margin.bottom);
                    return `translate(${x},${y})`;
                });

            cell.append(""rect"")
                .attr(""class"", ""border"")
                .attr(""width"", width)
                .attr(""height"", height)
                .style(""fill"", ""none"")
                .style(""stroke"", ""#ccc"");

            const xScale = d3.scaleLinear().domain([0, d3.max(data, d => d[""Domestic Consumption""])]).range([0, width]);
            const yScale = d3.scaleLinear().domain([0, d3.max(data, d => d[""Exports""])]).range([height, 0]);

            cell.each(function ([xAttr, yAttr]) {
                const cell = d3.select(this);
                const x = d3.scaleLinear().domain([0, d3.max(data, d => d[xAttr])]).range([0, width]);
                const y = d3.scaleLinear().domain([0, d3.max(data, d => d[yAttr])]).range([height, 0]);

                cell.append(""g"")
                    .attr(""transform"", `translate(0,${height})`)
                    .call(d3.axisBottom(x));

                cell.append(""g"")
                    .call(d3.axisLeft(y));
                    
                cell.selectAll("".scatter"")
                    .data(data)
                    .enter().append(""circle"")
                    .attr(""class"", ""scatter"")
                    .attr(""cx"", d => x(d[xAttr]))
                    .attr(""cy"", d => y(d[yAttr]))
                    .attr(""r"", 3)
                    .on(""mouseover"", function (event, d) {
                        d3.select(this).classed(""highlight"", true);
                    })
                    .on(""mouseout"", function (d) {
                        d3.select(this).classed(""highlight"", false);
                    });
            });

            const brush = d3.brush()
                .on(""start brush end"", brushed);

            let brushSelection;

            function brushed(event) {
                const selection = event.selection;
                const sx0 = selection ? selection[0][0] : 0;
                const sy0 = selection ? selection[0][1] : 0;
                const sx1 = selection ? selection[1][0] : width;
                const sy1 = selection ? selection[1][1] : height;

                svg.selectAll("".scatter"").classed(""highlight"", function (d) {
                    const x = d3.scaleLinear().domain([0, d3.max(data, d => d[""Domestic Consumption""])]).range([0, width]);
                    const y = d3.scaleLinear().domain([0, d3.max(data, d => d[""Exports""])]).range([height, 0]);
                    return x(d[""Domestic Consumption""]) >= sx0 && x(d[""Domestic Consumption""]) <= sx1 && y(d[""Exports""]) >= sy0 && y(d[""Exports""]) <= sy1;
                });

                if (event.type === ""end"") {
                    brushSelection = selection;
                }
            }

            cell.append(""g"")
                .attr(""class"", ""brush"")
                .call(brush)
                .selectAll(""rect"")
                .attr(""fill"", ""none"")
                .attr(""pointer-events"", ""all"")
                .attr(""cursor"", ""crosshair"");
        });
    </script>
</body>
</html>
```"
6,scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a brushable Scatterplot that visualizes the relationship between Domestic Consumption and Exports. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Scatterplot</title>
    <style>
        .scatterplot {
            font: 10px sans-serif;
        }
        .axis path, .axis line {
            fill: none;
            shape-rendering: crispEdges;
        }
        .brush .selection {
            fill: lightblue;
            stroke: steelblue;
        }
        table {
            border-collapse: collapse;
            margin-top: 20px;
        }
        th, td {
            border: 1px solid black;
            padding: 5px;
        }
    </style>
</head>
<body>
    <h1>Coffee Consumption and Exports Scatterplot</h1>
    <svg class=""scatterplot"" width=""800"" height=""500""></svg>
    <table id=""table"">
        <thead>
            <tr>
                <th>Year</th>
                <th>Country</th>
                <th>Domestic Consumption</th>
                <th>Exports</th>
                <th>Import Price</th>
                <th>Export Price</th>
                <th>Total Production</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>

    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <script>
        const margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = 800 - margin.left - margin.right,
              height = 500 - margin.top - margin.bottom;

        const svg = d3.select("".scatterplot"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        const xAxis = d3.axisBottom(x);
        const yAxis = d3.axisLeft(y);

        const brush = d3.brushXY()
            .extent([[0, 0], [width, height]])
            .on(""brush end"", brushed);

        svg.append(""g"")
            .attr(""class"", ""x axis"")
            .attr(""transform"", `translate(0,${height})`);

        svg.append(""g"")
            .attr(""class"", ""y axis"");

        svg.append(""g"")
            .attr(""class"", ""brush"")
            .call(brush);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            data.forEach(d => {
                d['Domestic Consumption'] = +d['Domestic Consumption'];
                d['Exports'] = +d['Exports'];
            });

            x.domain(d3.extent(data, d => d['Domestic Consumption'])).nice();
            y.domain(d3.extent(data, d => d['Exports'])).nice();

            svg.select("".x.axis"")
                .call(xAxis);
            svg.select("".y.axis"")
                .call(yAxis);

            const points = svg.append(""g"")
                .attr(""class"", ""points"")
                .selectAll(""circle"")
                .data(data)
                .enter().append(""circle"")
                .attr(""cx"", d => x(d['Domestic Consumption']))
                .attr(""cy"", d => y(d['Exports']))
                .attr(""r"", 3.5)
                .attr(""fill"", ""steelblue"");

            function brushed(event) {
                const selection = d3.event.selection;
                if (selection === null) {
                    svg.selectAll("".points circle"").classed(""selected"", false);
                    updateTable([]);
                    return;
                }

                const [[x0, y0], [x1, y1]] = selection;
                const selectedPoints = data.filter(d => {
                    const cx = x(d['Domestic Consumption']);
                    const cy = y(d['Exports']);
                    return x0 <= cx && cx <= x1 && y0 <= cy && cy <= y1;
                });
                
                svg.selectAll("".points circle"")
                    .classed(""selected"", d => selectedPoints.includes(d));

                updateTable(selectedPoints.slice(0, 20));
            }

            function updateTable(selectedData) {
                const tbody = d3.select(""#table tbody"");
                tbody.selectAll(""tr"").remove();

                const rows = tbody.selectAll(""tr"")
                    .data(selectedData)
                    .enter().append(""tr"");

                rows.selectAll(""td"")
                    .data(d => [d['Year'], d['Country'], d['Domestic Consumption'], d['Exports'], d['Import Price'], d['Export Price'], d['Total Production']])
                    .enter().append(""td"")
                    .text(d => d);
            }
        });
    </script>
</body>
</html>
```"
7,bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a horizontal Bar Chart that shows Country and Domestic Consumption, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Bar Chart</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path,
        .axis--x line {
            display: none;
        }
        .minimap {
            position: absolute;
            top: 20px;
            right: 20px;
            width: 150px;
            height: 100px;
            overflow: hidden;
            border: 1px solid black;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <div class=""minimap""></div>

    <script>
        const svg = d3.select(""svg""),
            margin = {top: 20, right: 30, bottom: 40, left: 40},
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom;

        const x = d3.scaleLinear().range([0, width]),
            y = d3.scaleBand().range([height, 0]).padding(0.1);

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            data.forEach(d => {
                d[""Domestic Consumption""] = +d[""Domestic Consumption""];
            });

            x.domain([0, d3.max(data, d => d[""Domestic Consumption""])]);
            y.domain(data.map(d => d.Country));

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            g.selectAll("".bar"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", 0)
                .attr(""y"", d => y(d.Country))
                .attr(""width"", d => x(d[""Domestic Consumption""]))
                .attr(""height"", y.bandwidth());

            // Mini Map
            const miniMap = d3.select("".minimap"").append(""svg"")
                .attr(""width"", 150)
                .attr(""height"", 100);

            const miniX = d3.scaleLinear().range([0, 150]),
                miniY = d3.scaleBand().range([100, 0]).padding(0.1);

            miniX.domain([0, d3.max(data, d => d[""Domestic Consumption""])]);
            miniY.domain(data.map(d => d.Country));

            miniMap.append(""g"")
                .selectAll(""rect"")
                .data(data)
                .enter().append(""rect"")
                .attr(""x"", 0)
                .attr(""y"", d => miniY(d.Country))
                .attr(""width"", d => miniX(d[""Domestic Consumption""]))
                .attr(""height"", miniY.bandwidth())
                .attr(""fill"", ""lightgray"");
        });
    </script>
</body>
</html>
```"
