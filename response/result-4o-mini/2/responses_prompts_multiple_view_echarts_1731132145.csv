Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            display: flex;
        }
        #scatterplot {
            width: 50%;
            height: 400px;
        }
        #barchart {
            width: 50%;
            height: 400px;
        }
    </style>
</head>
<body>
    <div id=""main"">
        <div id=""scatterplot""></div>
        <div id=""barchart""></div>
    </div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const years = [];
                const consumption = [];
                const totalProduction = [];
                const countries = [];

                rows.forEach(row => {
                    const cols = row.split(',');
                    if (cols.length >= 7) {
                        years.push(cols[0]);
                        countries.push(cols[1]);
                        consumption.push(parseFloat(cols[2]));
                        totalProduction.push(parseFloat(cols[6]));
                    }
                });

                const scatterplot = echarts.init(document.getElementById('scatterplot'));
                const barchart = echarts.init(document.getElementById('barchart'));

                scatterplot.setOption({
                    title: {
                        text: 'Scatterplot of Domestic Consumption vs Total Production'
                    },
                    tooltip: {},
                    xAxis: {
                        name: 'Total Production',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Domestic Consumption',
                        type: 'value'
                    },
                    series: [{
                        symbolSize: 10,
                        data: consumption.map((val, index) => [totalProduction[index], val]),
                        type: 'scatter'
                    }]
                });

                barchart.setOption({
                    title: {
                        text: 'Bar Chart of Domestic Consumption by Country'
                    },
                    tooltip: {},
                    xAxis: {
                        data: countries,
                        name: 'Country'
                    },
                    yAxis: {
                        name: 'Domestic Consumption'
                    },
                    series: [{
                        name: 'Consumption',
                        type: 'bar',
                        data: consumption
                    }]
                });
            });
    </script>
</body>
</html>
```"
2,scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            display: flex;
        }
        #scatterPlot {
            width: 50%;
            height: 600px;
        }
        #barChart {
            width: 50%;
            height: 600px;
        }
    </style>
</head>
<body>
    <div id=""main"">
        <div id=""scatterPlot""></div>
        <div id=""barChart""></div>
    </div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => {
                    const cols = row.split(',');
                    return {
                        Year: cols[0],
                        Country: cols[1],
                        DomesticConsumption: parseFloat(cols[2]),
                        Exports: parseFloat(cols[3]),
                        ImportPrice: parseFloat(cols[4]),
                        ExportPrice: parseFloat(cols[5]),
                        TotalProduction: parseFloat(cols[6]),
                    };
                }).filter(row => !isNaN(row.DomesticConsumption));
                
                const scatterData = csvData.map(item => ({
                    name: item.Country,
                    value: [item.DomesticConsumption, item.TotalProduction]
                }));

                const barData = csvData.map(item => item.Country);
                const barValues = csvData.map(item => item.DomesticConsumption);

                const scatterChart = echarts.init(document.getElementById('scatterPlot'));
                const barChart = echarts.init(document.getElementById('barChart'));

                scatterChart.setOption({
                    title: { text: 'Coffee Consumption Scatterplot' },
                    tooltip: {},
                    xAxis: { name: 'Domestic Consumption' },
                    yAxis: { name: 'Total Production' },
                    series: [{
                        name: 'Coffee Data',
                        type: 'scatter',
                        data: scatterData,
                        itemStyle: {
                            color: '#69b3a2'
                        }
                    }]
                });

                barChart.setOption({
                    title: { text: 'Coffee Consumption Bar Chart' },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: barData,
                        name: 'Country',
                        axisLabel: { interval: 0, rotate: 45 }
                    },
                    yAxis: { name: 'Domestic Consumption' },
                    series: [{
                        name: 'Domestic Consumption',
                        type: 'bar',
                        data: barValues
                    }]
                });

                // Interaction: Highlight bars based on scatter selection
                scatterChart.on('brush', params => {
                    const selectedCountries = params.batch[0].areas[0].coordRange;
                    const selectedValues = new Set(scatterData.filter(item => 
                        item.value[0] >= selectedCountries[0][0] &&
                        item.value[0] <= selectedCountries[1][0] &&
                        item.value[1] >= selectedCountries[0][1] &&
                        item.value[1] <= selectedCountries[1][1]
                    ).map(item => item.name));

                    const pieData = barData.map((country, index) => ({
                        country,
                        value: barValues[index],
                        selected: selectedValues.has(country)
                    }));

                    barChart.setOption({
                        series: [{
                            data: pieData.map(item => ({
                                value: item.value,
                                name: item.country,
                                itemStyle: {
                                    color: item.selected ? '#FF5722' : '#69b3a2'
                                }
                            }))
                        }]
                    });
                });
            });
    </script>
</body>
</html>
```"
3,line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Domestic Consumption , while the pie chart represents the distribution of Exports.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""lineChart"" style=""width: 100%; height: 400px;""></div>
    <div id=""pieChart"" style=""width: 100%; height: 400px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const years = [];
                const domesticConsumption = [];
                const exportsData = {};
                
                lines.forEach(line => {
                    const [year, country, domestic, exports] = line.split(',');
                    if (year && country && domestic && exports) {
                        years.push(year);
                        domesticConsumption.push(parseFloat(domestic));
                        exportsData[country] = (exportsData[country] || 0) + parseFloat(exports);
                    }
                });

                const lineChart = echarts.init(document.getElementById('lineChart'));
                lineChart.setOption({
                    title: { text: 'Domestic Coffee Consumption Over Years' },
                    tooltip: {},
                    xAxis: { data: years },
                    yAxis: {},
                    series: [{
                        name: 'Domestic Consumption',
                        type: 'line',
                        data: domesticConsumption
                    }]
                });

                const pieChart = echarts.init(document.getElementById('pieChart'));
                pieChart.setOption({
                    title: { text: 'Coffee Exports Distribution by Country', subtext: 'in metric tons', left: 'center' },
                    tooltip: {
                        trigger: 'item'
                    },
                    series: [{
                        type: 'pie',
                        radius: '50%',
                        data: Object.entries(exportsData).map(([country, value]) => ({ name: country, value })),
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }]
                });
            });
    </script>
</body>
</html>
```"
4,line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Domestic Consumption , while the pie chart represents the distribution of Exports. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Exports for the selected group.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Visualization</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
</head>
<body>
    <div id=""lineChart"" style=""width: 100%; height: 400px;""></div>
    <div id=""pieChart"" style=""width: 100%; height: 400px;""></div>

    <script>
        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv');
            const data = await response.text();
            return parseCSV(data);
        }

        function parseCSV(data) {
            const lines = data.split('\n').slice(1);
            const result = lines.map(line => {
                const [Year, Country, DomesticConsumption, Exports] = line.split(',');
                return { Year: Year, Country: Country, DomesticConsumption: +DomesticConsumption, Exports: +Exports };
            }).filter(item => item.Year);
            return result;
        }

        function prepareLineData(data) {
            const years = [...new Set(data.map(item => item.Year))];
            const domesticConsumption = years.map(year => {
                return data.filter(item => item.Year === year).reduce((sum, item) => sum + item.DomesticConsumption, 0);
            });
            return { years, domesticConsumption };
        }

        function setupLineChart(data) {
            const { years, domesticConsumption } = prepareLineData(data);
            const lineChart = echarts.init(document.getElementById('lineChart'));

            const option = {
                title: { text: 'Domestic Consumption Over Years' },
                xAxis: { type: 'category', data: years },
                yAxis: { type: 'value' },
                series: [{
                    name: 'Domestic Consumption',
                    type: 'line',
                    data: domesticConsumption,
                    emphasis: {
                        focus: 'series'
                    }
                }],
                toolbox: {
                    feature: {
                        saveAsImage: {}
                    }
                }
            };

            lineChart.setOption(option);
            lineChart.on('click', function (params) {
                if (params.componentType === 'series') {
                    updatePieChart(data, params.name);
                }
            });
        }

        function preparePieData(data, selectedYear) {
            const filteredData = data.filter(item => item.Year === selectedYear);
            const pieData = filteredData.map(item => ({ name: item.Country, value: item.Exports }));
            return pieData;
        }

        function updatePieChart(data, selectedYear) {
            const pieChart = echarts.init(document.getElementById('pieChart'));
            const pieData = preparePieData(data, selectedYear);

            const option = {
                title: { text: 'Exports Distribution', subtext: selectedYear, left: 'center' },
                series: [{
                    name: 'Exports',
                    type: 'pie',
                    radius: '50%',
                    data: pieData,
                    emphasis: {
                        itemStyle: {
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowColor: 'rgba(0, 0, 0, 0.5)'
                        }
                    }
                }]
            };

            pieChart.setOption(option);
        }

        async function init() {
            const data = await fetchData();
            setupLineChart(data);
        }

        init();
    </script>
</body>
</html>
```"
5,scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Domestic Consumption,Exports,Import Price,Export Price, and Total Production. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        .chart-container {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            grid-template-rows: repeat(5, 1fr);
            gap: 10px;
            height: 100vh;
        }
        .chart {
            border: 1px solid #ccc;
        }
    </style>
</head>
<body>

<div class=""chart-container"" id=""scatterplotMatrix"">
    <div class=""chart"" id=""domesticConsumption""></div>
    <div class=""chart"" id=""exports""></div>
    <div class=""chart"" id=""importPrice""></div>
    <div class=""chart"" id=""exportPrice""></div>
    <div class=""chart"" id=""totalProduction""></div>
    <div class=""chart"" id=""exports_d""></div>
    <div class=""chart"" id=""importPrice_d""></div>
    <div class=""chart"" id=""exportPrice_d""></div>
    <div class=""chart"" id=""totalProduction_d""></div>
    <div class=""chart"" id=""importPrice_d2""></div>
    <div class=""chart"" id=""exportPrice_d2""></div>
    <div class=""chart"" id=""totalProduction_d2""></div>
    <div class=""chart"" id=""exportPrice_d2""></div>
    <div class=""chart"" id=""totalProduction_d3""></div>
    <div class=""chart"" id=""totalProduction_d3b""></div>
    <div class=""chart"" id=""totalProduction_d3b2""></div>
</div>

<script>
    async function fetchData() {
        const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv');
        const text = await response.text();
        const data = text.split('\n').slice(1).map(line => {
            const [year, country, domesticConsumption, exports, importPrice, exportPrice, totalProduction] = line.split(',');
            return {
                year: year.trim(),
                country: country.trim(),
                domesticConsumption: parseFloat(domesticConsumption.trim()),
                exports: parseFloat(exports.trim()),
                importPrice: parseFloat(importPrice.trim()),
                exportPrice: parseFloat(exportPrice.trim()),
                totalProduction: parseFloat(totalProduction.trim())
            };
        }).filter(d => !isNaN(d.domesticConsumption)); // Filter out invalid entries

        return data;
    }

    function initScatterplot(data) {
        const matrix = [
            ['Domestic Consumption', 'Exports', 'Import Price', 'Export Price', 'Total Production'],
            ['Exports', 'Exports', 'Import Price', 'Export Price', 'Total Production'],
            ['Import Price', 'Exports', 'Exports', 'Export Price', 'Total Production'],
            ['Export Price', 'Exports', 'Import Price', 'Export Price', 'Total Production'],
            ['Total Production', 'Exports', 'Import Price', 'Export Price', 'Total Production']
        ];
        
        const charts = [
            'domesticConsumption',
            'exports',
            'importPrice',
            'exportPrice',
            'totalProduction'
        ];

        charts.forEach((chartId, rowIndex) => {
            const chartDom = document.getElementById(chartId);
            const chart = echarts.init(chartDom);

            const otherCharts = charts.filter((_, idx) => idx !== rowIndex);
            const dimensions = ['domesticConsumption', 'exports', 'importPrice', 'exportPrice', 'totalProduction'];
            
            const option = {
                title: { text: `${chartId.replace(/([A-Z])/g, ' $1').trim()}` },
                tooltip: {},
                xAxis: { type: 'value' },
                yAxis: { type: 'value' },
                series: [{
                    type: 'scatter',
                    data: data.map(d => [d[dimensions[rowIndex]], d[dimensions[rowIndex + 1]]]),
                    itemStyle: {
                        color: '#5470C6',
                    },
                }],
                brush: {
                    type: ['scatter'],
                },
            };

            chart.setOption(option);
            chart.on('brushSelected', function (params) {
                const brushInfo = params.batch[0].areas;
                const selectedData = [];

                brushInfo.forEach(area => {
                    area.dataIndex.forEach(index => {
                        selectedData.push(data[index]);
                    });
                });

                otherCharts.forEach(otherChartId => {
                    const otherChart = echarts.getInstanceByDom(document.getElementById(otherChartId));
                    const otherOption = otherChart.getOption();
                    otherOption.series[0].itemStyle.color = '#ccc';
                    otherOption.series[0].data = data.map(d => d[dimensions[rowIndex]]);

                    if (selectedData.length) {
                        otherOption.series[0].data = data.map(d => ({
                            value: [d[dimensions[rowIndex]], d[dimensions[rowIndex + 1]]],
                            itemStyle: { color: selectedData.includes(d) ? '#FF6F61' : '#ccc' },
                        }));
                    }
                    otherChart.setOption(otherOption);
                });
            });
        });
    }

    fetchData().then(data => initScatterplot(data));
</script>

</body>
</html>
```"
6,scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a brushable Scatterplot that visualizes the relationship between Domestic Consumption and Exports. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 70%;
            height: 600px;
            float: left;
        }
        #data-table {
            width: 25%;
            height: 600px;
            overflow: auto;
            float: right;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <div id=""data-table""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const rawData = rows.map(row => {
                    const cols = row.split(',');
                    return {
                        Year: cols[0],
                        Country: cols[1],
                        DomesticConsumption: parseFloat(cols[2]),
                        Exports: parseFloat(cols[3]),
                        ImportPrice: parseFloat(cols[4]),
                        ExportPrice: parseFloat(cols[5]),
                        TotalProduction: parseFloat(cols[6]),
                    };
                }).filter(row => !isNaN(row.DomesticConsumption) && !isNaN(row.Exports));

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);
                const option = {
                    title: {
                        text: 'Domestic Consumption vs Exports'
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'value',
                        name: 'Domestic Consumption'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Exports'
                    },
                    series: [{
                        type: 'scatter',
                        data: rawData.map(item => [item.DomesticConsumption, item.Exports]),
                        markPoint: {
                            data: rawData.map((item, index) => ({
                                coord: [item.DomesticConsumption, item.Exports],
                                value: item.Country,
                                itemStyle: {
                                    opacity: 0.5
                                }
                            })),
                            emphasis: {
                                label: {
                                    show: true,
                                    formatter: param => param.data.value
                                }
                            }
                        }
                    }],
                    brush: {
                        toolbox: ['rect', 'clear'],
                        xAxisIndex: 0,
                        yAxisIndex: 0
                    }
                };

                myChart.setOption(option);

                myChart.on('brushSelected', params => {
                    const selectedPoints = [];
                    const brushInfo = params.batch[0].areas[0];
                    const start = brushInfo.range[0];
                    const end = brushInfo.range[1];

                    rawData.forEach((item, index) => {
                        if (item.DomesticConsumption >= start[0] && item.DomesticConsumption <= end[0] && 
                            item.Exports >= start[1] && item.Exports <= end[1]) {
                            selectedPoints.push(item);
                        }
                    });

                    const table = document.getElementById('data-table');
                    table.innerHTML = '<table><tr><th>Year</th><th>Country</th><th>Domestic Consumption</th><th>Exports</th></tr>' +
                        selectedPoints.slice(0, 20).map(point => 
                            `<tr><td>${point.Year}</td><td>${point.Country}</td><td>${point.DomesticConsumption}</td><td>${point.Exports}</td></tr>`
                        ).join('') +
                        '</table>';
                });
            });
    </script>
</body>
</html>
```"
7,bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a horizontal Bar Chart that shows Country and Domestic Consumption, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 80%; height: 600px; float: left;""></div>
    <div id=""minimap"" style=""width: 20%; height: 600px; float: right;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const parsedData = data.split('\n').slice(1).map(row => {
                    const columns = row.split(',');
                    return {
                        Year: columns[0],
                        Country: columns[1],
                        DomesticConsumption: parseFloat(columns[2]) || 0
                    };
                }).filter(row => row.Country);
                
                const countries = parsedData.map(item => item.Country);
                const domesticConsumption = parsedData.map(item => item.DomesticConsumption);
                
                const mainChart = echarts.init(document.getElementById('main'));
                const miniMapChart = echarts.init(document.getElementById('minimap'));

                const mainOption = {
                    title: {
                        text: 'Coffee Domestic Consumption by Country',
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'value',
                    },
                    yAxis: {
                        type: 'category',
                        data: countries,
                    },
                    series: [{
                        name: 'Domestic Consumption',
                        type: 'bar',
                        data: domesticConsumption,
                        itemStyle: {
                            color: '#008B45'
                        }
                    }]
                };

                const miniOption = {
                    title: {
                        text: 'Minimap',
                        left: 'center'
                    },
                    xAxis: {
                        type: 'value',
                        show: false
                    },
                    yAxis: {
                        type: 'category',
                        data: countries,
                        show: false
                    },
                    series: [{
                        name: 'Domestic Consumption',
                        type: 'bar',
                        data: domesticConsumption,
                        itemStyle: {
                            color: '#ff7f50'
                        }
                    }]
                };

                mainChart.setOption(mainOption);
                miniMapChart.setOption(miniOption);
            });
    </script>
</body>
</html>
```"
