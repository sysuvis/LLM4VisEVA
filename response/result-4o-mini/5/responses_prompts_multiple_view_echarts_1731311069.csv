Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""scatterplot"" style=""width: 50%; height: 400px; float: left;""></div>
    <div id=""barchart"" style=""width: 50%; height: 400px; float: right;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const scatterData = [];
                const barData = {};
                
                rows.forEach(row => {
                    const cols = row.split(',');
                    const year = cols[0];
                    const department = cols[1];
                    const salesFigures = parseFloat(cols[2]);
                    const revenue = parseFloat(cols[4]);
                    const profit = parseFloat(cols[5]);
                    const employeeSatisfactionScore = parseFloat(cols[6]);
                    
                    scatterData.push([salesFigures, employeeSatisfactionScore]);
                    
                    if (!barData[year]) {
                        barData[year] = { totalRevenue: 0, totalProfit: 0 };
                    }
                    barData[year].totalRevenue += revenue;
                    barData[year].totalProfit += profit;
                });

                const barCategories = Object.keys(barData);
                const barRevenue = barCategories.map(year => barData[year].totalRevenue);
                const barProfit = barCategories.map(year => barData[year].totalProfit);

                const scatterChart = echarts.init(document.getElementById('scatterplot'));
                scatterChart.setOption({
                    title: { text: 'Sales Figures vs Employee Satisfaction Score' },
                    xAxis: { type: 'value', name: 'Sales Figures' },
                    yAxis: { type: 'value', name: 'Employee Satisfaction Score' },
                    series: [{
                        symbolSize: 10,
                        data: scatterData,
                        type: 'scatter'
                    }]
                });

                const barChart = echarts.init(document.getElementById('barchart'));
                barChart.setOption({
                    title: { text: 'Revenue and Profit by Year' },
                    tooltip: {},
                    legend: { data: ['Revenue', 'Profit'] },
                    xAxis: { data: barCategories },
                    yAxis: {},
                    series: [
                        { name: 'Revenue', type: 'bar', data: barRevenue },
                        { name: 'Profit', type: 'bar', data: barProfit }
                    ]
                });
            });
    </script>
</body>
</html>
```"
2,scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance Visualization</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
    <style>
        #container {
            display: flex;
            justify-content: space-between;
            height: 500px;
        }
        #scatterplot, #barchart {
            width: 45%;
            height: 100%;
        }
    </style>
</head>
<body>

<div id=""container"">
    <div id=""scatterplot""></div>
    <div id=""barchart""></div>
</div>

<script>
    async function fetchData() {
        const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv');
        const data = await response.text();
        const rows = data.split('\n').slice(1);
        return rows.map(row => {
            const cols = row.split(',');
            return {
                Year: cols[0],
                Department: cols[1],
                SalesFigures: parseFloat(cols[2]),
                HoursWorked: parseFloat(cols[3]),
                Revenue: parseFloat(cols[4]),
                Profit: parseFloat(cols[5]),
                EmployeeSatisfactionScore: parseFloat(cols[6]),
                NumberOfEmployees: parseInt(cols[7])
            };
        }).filter(item => !isNaN(item.SalesFigures)); // Filter out any incomplete data
    }

    function renderScatterPlot(data) {
        const scatterData = data.map(item => ({
            value: [item.SalesFigures, item.Profit],
            label: {
                formatter: `{b|${item.Department}}`,
                backgroundColor: '#fff',
                borderColor: 'rgba(0,0,0,0.5)',
                borderWidth: 1,
                borderRadius: 4,
                padding: [5, 10]
            }
        }));

        const scatterChart = echarts.init(document.getElementById('scatterplot'));
        scatterChart.setOption({
            tooltip: {},
            xAxis: {
                name: 'Sales Figures',
                type: 'value'
            },
            yAxis: {
                name: 'Profit',
                type: 'value'
            },
            series: [{
                type: 'scatter',
                data: scatterData,
                symbolSize: 10,
                itemStyle: {
                    color: '#37A2DA',
                }
            }],
            dataZoom: [
                {
                    type: 'inside',
                    start: 0,
                    end: 100
                },
                {
                    type: 'slider',
                    show: true,
                    xAxisIndex: [0],
                    start: 0,
                    end: 100
                }
            ]
        });

        scatterChart.on('click', function (params) {
            const selectedData = data.filter(item => item.Department === params.seriesData[0].name);
            renderBarChart(selectedData);
        });
    }

    function renderBarChart(data) {
        const barData = [...new Set(data.map(item => item.Department))];
        const barValues = barData.map(department => {
            return data.filter(item => item.Department === department).reduce((acc, item) => acc + item.Revenue, 0);
        });

        const barChart = echarts.init(document.getElementById('barchart'));
        barChart.setOption({
            tooltip: {},
            xAxis: {
                data: barData
            },
            yAxis: {
                name: 'Revenue',
                type: 'value'
            },
            series: [{
                name: 'Revenue',
                type: 'bar',
                data: barValues,
                itemStyle: {
                    color: '#FF9F7F',
                }
            }],
            toolbox: {
                feature: {
                    saveAsImage: {}
                }
            }
        });
    }

    fetchData().then(data => {
        renderScatterPlot(data);
        renderBarChart(data);
    });
</script>

</body>
</html>
```"
3,line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Sales Figures , while the pie chart represents the distribution of Hours Worked.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""lineChart"" style=""width: 100%; height: 400px;""></div>
    <div id=""pieChart"" style=""width: 100%; height: 400px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const salesFigures = [];
                const hoursWorked = [];
                const years = [];

                rows.forEach(row => {
                    const cols = row.split(',');
                    if (cols.length > 0) {
                        years.push(cols[0]);
                        salesFigures.push(parseFloat(cols[2]));
                        hoursWorked.push(parseFloat(cols[3]));
                    }
                });

                // Line Chart for Sales Figures
                const lineChart = echarts.init(document.getElementById('lineChart'));
                lineChart.setOption({
                    title: {
                        text: 'Sales Figures Trend'
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: years
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        name: 'Sales Figures',
                        type: 'line',
                        data: salesFigures
                    }]
                });

                // Pie Chart for Distribution of Hours Worked
                const pieChart = echarts.init(document.getElementById('pieChart'));
                const totalHours = hoursWorked.reduce((a, b) => a + b, 0);
                const hoursData = hoursWorked.map(hours => ({ value: hours, name: (hours / totalHours * 100).toFixed(2) + '%' }));

                pieChart.setOption({
                    title: {
                        text: 'Distribution of Hours Worked',
                        subtext: 'in %',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    series: [{
                        name: 'Hours Worked',
                        type: 'pie',
                        radius: '50%',
                        data: hoursData,
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }]
                });
            });
    </script>
</body>
</html>
```"
4,line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Sales Figures , while the pie chart represents the distribution of Hours Worked. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Hours Worked for the selected group.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""lineChart"" style=""width: 100%; height: 400px;""></div>
    <div id=""pieChart"" style=""width: 100%; height: 400px;""></div>

    <script>
        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv');
            const data = await response.text();
            return data.split('\n').slice(1).map(row => {
                const columns = row.split(',');
                return {
                    Year: columns[0],
                    Department: columns[1],
                    SalesFigures: parseFloat(columns[2]),
                    HoursWorked: parseFloat(columns[3]),
                    Revenue: parseFloat(columns[4]),
                    Profit: parseFloat(columns[5]),
                    EmployeeSatisfactionScore: parseFloat(columns[6]),
                    NumberOfEmployees: parseInt(columns[7], 10)
                };
            }).filter(d => d.Year); // Remove empty rows
        }

        function drawLineChart(data) {
            const lineChart = echarts.init(document.getElementById('lineChart'));
            const option = {
                title: {
                    text: 'Sales Figures Trend'
                },
                tooltip: {},
                xAxis: {
                    type: 'category',
                    data: data.map(d => d.Year),
                    boundaryGap: false
                },
                yAxis: {
                    type: 'value'
                },
                series: [{
                    name: 'Sales Figures',
                    type: 'line',
                    data: data.map(d => d.SalesFigures),
                    markPoint: {
                        data: [
                            { type: 'max', name: 'Max' },
                            { type: 'min', name: 'Min' }
                        ]
                    },
                }]
            };

            lineChart.setOption(option);

            lineChart.on('brushselected', function (params) {
                const selectedPoints = [];
                params.selected.forEach(function (select) {
                    const selectedDataIndex = select.dataIndex;
                    selectedDataIndex.forEach(function (dataIndex) {
                        selectedPoints.push(data[dataIndex]);
                    });
                });
                drawPieChart(selectedPoints);
            });
        }

        function drawPieChart(data) {
            const pieChart = echarts.init(document.getElementById('pieChart'));
            const hoursData = data.reduce((acc, curr) => {
                acc[curr.Department] = (acc[curr.Department] || 0) + curr.HoursWorked;
                return acc;
            }, {});
            
            const pieSeries = Object.keys(hoursData).map(department => ({
                name: department,
                value: hoursData[department]
            }));

            const option = {
                title: {
                    text: 'Distribution of Hours Worked',
                    subtext: 'by Department',
                    left: 'center'
                },
                tooltip: {
                    trigger: 'item'
                },
                series: [{
                    type: 'pie',
                    radius: '50%',
                    data: pieSeries,
                    emphasis: {
                        itemStyle: {
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowColor: 'rgba(0, 0, 0, 0.5)'
                        }
                    }
                }]
            };

            pieChart.setOption(option);
        }

        fetchData().then(data => {
            drawLineChart(data);
            drawPieChart(data); // Initial pie chart with all data
        });
    </script>
</body>
</html>
```"
5,scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Sales Figures, Revenue, Profit, Hours Worked, and Employee Satisfaction. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Brushable Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        .scatterplot-matrix {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            grid-template-rows: repeat(5, 1fr);
            width: 100%;
            height: 100vh;
        }
        .cell {
            border: 1px solid #ccc;
        }
    </style>
</head>
<body>
    <div id=""scatterplot-matrix"" class=""scatterplot-matrix""></div>
    <script>
        const url = 'https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv';

        async function fetchData() {
            const response = await fetch(url);
            const dataText = await response.text();
            const rows = dataText.split('\n').slice(1);
            const data = rows.map(row => {
                const cols = row.split(',');
                return {
                    year: +cols[0],
                    department: cols[1],
                    salesFigures: +cols[2],
                    hoursWorked: +cols[3],
                    revenue: +cols[4],
                    profit: +cols[5],
                    employeeSatisfaction: +cols[6],
                    numberOfEmployees: +cols[7]
                };
            }).filter(row => !isNaN(row.salesFigures));
            return data;
        }

        async function createScatterplotMatrix() {
            const data = await fetchData();
            const variables = ['salesFigures', 'revenue', 'profit', 'hoursWorked', 'employeeSatisfaction'];
            const charts = {};

            const highlight = (points) => {
                for (const key in charts) {
                    charts[key].dispatchAction({
                        type: 'downplay',
                        seriesIndex: 0,
                    });
                    if (points.length > 0) {
                        charts[key].dispatchAction({
                            type: 'highlight',
                            seriesIndex: 0,
                            dataIndices: points
                        });
                    }
                }
            };

            const prepareData = (xVariable, yVariable) => {
                return data.map((item, index) => ({
                    name: item.department,
                    value: [item[xVariable], item[yVariable]],
                    index: index
                }));
            };

            const createCell = (xVariable, yVariable) => {
                const chart = echarts.init(document.createElement('div'));
                chart.setOption({
                    tooltip: {},
                    xAxis: {
                        name: xVariable,
                        type: 'value'
                    },
                    yAxis: {
                        name: yVariable,
                        type: 'value'
                    },
                    series: [{
                        type: 'scatter',
                        data: prepareData(xVariable, yVariable),
                        symbolSize: 8,
                        name: 'Data',
                        itemStyle: {
                            color: '#5470c6'
                        }
                    }]
                });

                chart.on('brushselected', (params) => {
                    const brushInfo = params.batch[0].areas[0];
                    const selectedPoints = brushInfo.areas[0].dataIndex;
                    highlight(selectedPoints);
                });

                return chart;
            };

            variables.forEach((xVariable, xIndex) => {
                variables.forEach((yVariable, yIndex) => {
                    const cell = createCell(xVariable, yVariable);
                    charts[`${xVariable}-${yVariable}`] = cell;
                    document.getElementById('scatterplot-matrix').appendChild(cell.getDom());
                    cell.resize();
                });
            });

            window.addEventListener('resize', () => {
                Object.values(charts).forEach(chart => chart.resize());
            });

            // Resize all charts after they have been added to the DOM
            Object.values(charts).forEach(chart => chart.resize());
        }

        createScatterplotMatrix();
    </script>
</body>
</html>
```"
6,scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a brushable Scatterplot that visualizes the relationship between Sales Figures and Hours Worked. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Brushable Scatterplot with ECharts</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
    <style>
        #main {
            width: 70%;
            height: 400px;
            float: left;
        }
        #table {
            width: 30%;
            height: 400px;
            float: left;
            overflow-y: auto;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid #ccc;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
    </style>
</head>
<body>

<div id=""main""></div>
<div id=""table"">
    <table id=""data-table"">
        <thead>
            <tr>
                <th>Year</th>
                <th>Department</th>
                <th>Sales Figures</th>
                <th>Hours Worked</th>
                <th>Revenue</th>
                <th>Profit</th>
                <th>Employee Satisfaction Score</th>
                <th>Number of Employees</th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>

<script>
    fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1).map(row => row.split(','));
            const dataset = rows.map(row => ({
                Year: row[0],
                Department: row[1],
                SalesFigures: +row[2],
                HoursWorked: +row[3],
                Revenue: +row[4],
                Profit: +row[5],
                EmployeeSatisfactionScore: +row[6],
                NumberOfEmployees: +row[7]
            }));

            const salesFigures = dataset.map(item => item.SalesFigures);
            const hoursWorked = dataset.map(item => item.HoursWorked);

            const chart = echarts.init(document.getElementById('main'));

            chart.setOption({
                title: {
                    text: 'Sales Figures vs Hours Worked',
                },
                tooltip: {},
                xAxis: {
                    name: 'Sales Figures'
                },
                yAxis: {
                    name: 'Hours Worked'
                },
                series: [{
                    type: 'scatter',
                    symbolSize: 10,
                    data: dataset.map(item => [item.SalesFigures, item.HoursWorked]),
                    itemStyle: {
                        color: '#5470C6'
                    }
                }]
            });

            chart.on('brushSelected', function (params) {
                const selectedPoints = [];
                const brushInfo = params.batch[0];
                brushInfoAreas = brushInfo.selected;

                for (let area of brushInfoAreas) {
                    for (let idx of area.dataIndex) {
                        selectedPoints.push(dataset[idx]);
                    }
                }

                const tableBody = document.getElementById('data-table').getElementsByTagName('tbody')[0];
                tableBody.innerHTML = '';
                
                selectedPoints.slice(0, 20).forEach(point => {
                    const row = tableBody.insertRow();
                    Object.values(point).forEach(text => {
                        const cell = row.insertCell();
                        cell.textContent = text;
                    });
                });
            });

            chart.dispatchAction({
                type: 'brush',
                areas: [{
                    brushType: 'scatter',
                    coordRange: [[0, 0], [0, 0]],
                    xAxisIndex: 0,
                    yAxisIndex: 0
                }]
            });
        });
</script>

</body>
</html>
```"
7,bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a horizontal Bar Chart that shows Department and Sales Figures, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 600px;
            height: 400px;
            display: inline-block;
        }
        #minimap {
            width: 200px;
            height: 100px;
            display: inline-block;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <div id=""minimap""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1);
            const departments = [];
            const salesFigures = [];

            rows.forEach(row => {
                const columns = row.split(',');
                const department = columns[1];
                const sales = parseFloat(columns[2]);

                if (!departments.includes(department)) {
                    departments.push(department);
                }
                salesFigures.push({ department, sales });
            });

            const chartData = salesFigures.reduce((acc, curr) => {
                const existing = acc.find(item => item.department === curr.department);
                if (existing) {
                    existing.sales += curr.sales;
                } else {
                    acc.push({ department: curr.department, sales: curr.sales });
                }
                return acc;
            }, []);

            const mainChart = echarts.init(document.getElementById('main'));
            const minimapChart = echarts.init(document.getElementById('minimap'));

            const mainOption = {
                title: {
                    text: 'Department Sales Figures',
                },
                tooltip: {},
                xAxis: {
                    type: 'value',
                    name: 'Sales Figures'
                },
                yAxis: {
                    type: 'category',
                    data: chartData.map(item => item.department)
                },
                series: [{
                    type: 'bar',
                    data: chartData.map(item => item.sales),
                    itemStyle: {
                        color: '#69b3a2'
                    }
                }]
            };

            const minimapOption = {
                series: [{
                    type: 'bar',
                    data: chartData.map(item => item.sales),
                    itemStyle: {
                        color: '#69b3a2'
                    }
                }]
            };

            mainChart.setOption(mainOption);
            minimapChart.setOption(minimapOption);
        });
    </script>
</body>
</html>
```"
