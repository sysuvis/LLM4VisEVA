Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot that visualizes the relationship between Sales Figures and Hours Worked. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,advanced view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Sales Figures vs Hours Worked</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .dot {
            fill: steelblue;
            stroke: white;
            stroke-width: 1.5px;
        }
        .tooltip {
            position: absolute;
            text-align: center;
            padding: 5px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0;
            border-radius: 8px;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            data.forEach(d => {
                d['Sales Figures'] = +d['Sales Figures'];
                d['Hours Worked'] = +d['Hours Worked'];
            });

            const x = d3.scaleLinear()
                .domain(d3.extent(data, d => d['Hours Worked'])).nice()
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain(d3.extent(data, d => d['Sales Figures'])).nice()
                .range([height, 0]);

            const xAxis = d3.axisBottom(x);
            const yAxis = d3.axisLeft(y);

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(xAxis);

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(yAxis);

            const tooltip = d3.select(""body"").append(""div"")
                .attr(""class"", ""tooltip"")
                .style(""opacity"", 0);

            g.selectAll("".dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => x(d['Hours Worked']))
                .attr(""cy"", d => y(d['Sales Figures']))
                .attr(""r"", 5)
                .on(""mouseover"", function(event, d) {
                    tooltip.transition()
                        .duration(200)
                        .style(""opacity"", .9);
                    tooltip.html(`Sales: ${d['Sales Figures']}<br/>Hours: ${d['Hours Worked']}`)
                        .style(""left"", (event.pageX + 5) + ""px"")
                        .style(""top"", (event.pageY - 28) + ""px"");
                    d3.select(this).attr(""r"", 8).style(""fill"", ""orange"");
                })
                .on(""mouseout"", function(d) {
                    tooltip.transition()
                        .duration(500)
                        .style(""opacity"", 0);
                    d3.select(this).attr(""r"", 5).style(""fill"", ""steelblue"");
                });
        });
    </script>
</body>
</html>
```"
2,scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot that visualizes the relationship between Sales Figures and Hours Worked. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,advanced view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot - D3</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatterplot {
            border: 1px solid black;
        }
        .tooltip {
            position: absolute;
            text-align: center;
            width: auto;
            height: auto;
            padding: 5px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
    </style>
</head>
<body>

<svg class=""scatterplot"" width=""800"" height=""600""></svg>
<div class=""tooltip"" style=""opacity:0;""></div>

<script>
    const svg = d3.select('.scatterplot');
    const tooltip = d3.select('.tooltip');

    const margin = {top: 20, right: 20, bottom: 30, left: 40};
    const width = +svg.attr('width') - margin.left - margin.right;
    const height = +svg.attr('height') - margin.top - margin.bottom;

    const g = svg.append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

    const x = d3.scaleLinear().range([0, width]);
    const y = d3.scaleLinear().range([height, 0]);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
        data.forEach(d => {
            d['Sales Figures'] = +d['Sales Figures'];
            d['Hours Worked'] = +d['Hours Worked'];
        });

        x.domain(d3.extent(data, d => d['Sales Figures'])).nice();
        y.domain(d3.extent(data, d => d['Hours Worked'])).nice();

        g.append(""g"")
            .attr(""transform"", ""translate(0,"" + height + "")"")
            .call(d3.axisBottom(x));

        g.append(""g"")
            .call(d3.axisLeft(y));

        const points = g.selectAll('circle')
            .data(data)
            .enter().append('circle')
            .attr('cx', d => x(d['Sales Figures']))
            .attr('cy', d => y(d['Hours Worked']))
            .attr('r', 5)
            .attr('fill', 'steelblue')
            .attr('opacity', 0.7)
            .on('mouseover', function(event, d) {
                tooltip.transition().duration(200).style(""opacity"", .9);
                tooltip.html(""Sales: "" + d['Sales Figures'] + ""<br/>Hours: "" + d['Hours Worked'])
                    .style(""left"", (event.pageX + 5) + ""px"")
                    .style(""top"", (event.pageY - 28) + ""px"");
            })
            .on('mouseout', function(d) {
                tooltip.transition().duration(500).style(""opacity"", 0);
            });

        const brush = d3.brush()
            .extent([[0, 0], [width, height]])
            .on(""brush end"", brushed);

        g.append(""g"")
            .attr(""class"", ""brush"")
            .call(brush);

        function brushed(event) {
            const selection = d3.event.selection;
            // Clear previous brush selection
            points.classed(""selected"", false);
            if (selection) {
                const [[x0, y0], [x1, y1]] = selection;
                points.classed(""selected"", d => {
                    const xSelected = x(d['Sales Figures']);
                    const ySelected = y(d['Hours Worked']);
                    return xSelected >= x0 && xSelected <= x1 && ySelected >= y0 && ySelected <= y1;
                });
            }
        }
    });
</script>

</body>
</html>
```"
3,scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot that visualizes the relationship between Sales Figures and Hours Worked. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,advanced view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales vs Hours Worked Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter {
            fill: steelblue;
            opacity: 0.7;
        }
        .scatter:hover {
            opacity: 1;
        }
        .axis line, .axis path {
            fill: none;
            shape-rendering: crispEdges;
        }
        .axis text {
            font-family: Arial, sans-serif;
            font-size: 12px;
        }
    </style>
</head>
<body>
    <h2>Sales Figures vs Hours Worked</h2>
    <svg width=""800"" height=""500""></svg>
    <script>
        const margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = 800 - margin.left - margin.right,
              height = 500 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        const xAxis = d3.axisBottom(x);
        const yAxis = d3.axisLeft(y);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(function(data) {
            data.forEach(d => {
                d['Sales Figures'] = +d['Sales Figures'];
                d['Hours Worked'] = +d['Hours Worked'];
            });

            x.domain(d3.extent(data, d => d['Sales Figures'])).nice();
            y.domain(d3.extent(data, d => d['Hours Worked'])).nice();

            svg.append(""g"")
                .attr(""class"", ""axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(xAxis);

            svg.append(""g"")
                .attr(""class"", ""axis"")
                .call(yAxis);

            svg.append(""g"")
                .selectAll("".scatter"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""scatter"")
                .attr(""cx"", d => x(d['Sales Figures']))
                .attr(""cy"", d => y(d['Hours Worked']))
                .attr(""r"", 5);

            svg.call(d3.zoom()
                .scaleExtent([0.5, 5])
                .on(""zoom"", (event) => {
                    svg.attr(""transform"", event.transform);
                    svg.selectAll("".axis"").call(event.transform.rescaleX(x));
                    svg.selectAll("".axis"").call(event.transform.rescaleY(y));
                    svg.selectAll("".scatter"")
                        .attr(""cx"", d => event.transform.applyX(x(d['Sales Figures'])))
                        .attr(""cy"", d => event.transform.applyY(y(d['Hours Worked'])));
                }));
        });
    </script>
</body>
</html>
```"
4,scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Sales Figures and Hours Worked. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,advanced view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales vs Hours Worked Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter {
            fill-opacity: 0.7;
        }
        .dot {
            cursor: pointer;
        }
        .tooltip {
            position: absolute;
            text-align: center;
            width: 120px;
            height: auto;
            padding: 5px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <div class=""tooltip"" style=""opacity: 0;""></div>
    
    <script>
        const margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = 800 - margin.left - margin.right,
              height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            data.forEach(d => {
                d[""Sales Figures""] = +d[""Sales Figures""];
                d[""Hours Worked""] = +d[""Hours Worked""];
            });

            x.domain(d3.extent(data, d => d[""Sales Figures""])).nice();
            y.domain(d3.extent(data, d => d[""Hours Worked""])).nice();

            svg.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""y axis"")
                .call(d3.axisLeft(y));

            const tooltip = d3.select("".tooltip"");

            svg.selectAll("".dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => x(d[""Sales Figures""]))
                .attr(""cy"", d => y(d[""Hours Worked""]))
                .attr(""r"", 5)
                .attr(""fill"", ""blue"")
                .on(""mouseover"", (event, d) => {
                    tooltip.style(""opacity"", 1)
                           .html(`Sales: ${d[""Sales Figures""]}<br/>Hours: ${d[""Hours Worked""]}`)
                           .style(""left"", (event.pageX + 5) + ""px"")
                           .style(""top"", (event.pageY - 28) + ""px"");
                })
                .on(""mouseout"", () => {
                    tooltip.style(""opacity"", 0);
                })
                .on(""click"", (event, d) => {
                    const query = `${d[""Sales Figures""]} ${d[""Hours Worked""]}`;
                    window.open(`https://www.google.com/search?q=${encodeURIComponent(query)}`, '_blank');
                });
        });
    </script>
</body>
</html>
```"
5,scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot with query widgets showing the Sales Figures and Hours Worked of the given dataset. Add a slider to represent the Year.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,advanced view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter point {
            fill: steelblue;
        }

        .x.axis path,
        .y.axis path {
            display: none;
        }
    </style>
</head>
<body>
    <h2>Employee Performance Scatterplot</h2>
    <div>
        <label for=""yearSlider"">Year:</label>
        <input type=""range"" id=""yearSlider"" min=""2016"" max=""2020"" value=""2016"" step=""1"">
        <span id=""yearDisplay"">2016</span>
    </div>
    <svg width=""800"" height=""500""></svg>

    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        let data;
        let year = 2016;

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(loadedData => {
            data = loadedData.map(d => {
                return {
                    Year: +d.Year,
                    [d.Department]: d.Department,
                    ""Sales Figures"": +d[""Sales Figures""],
                    ""Hours Worked"": +d[""Hours Worked""],
                    Revenue: +d.Revenue,
                    Profit: +d.Profit,
                    ""Employee Satisfaction Score"": +d[""Employee Satisfaction Score""],
                    ""Number of Employees"": +d[""Number of Employees""]
                };
            });

            updateChart();
        });

        d3.select(""#yearSlider"").on(""input"", function() {
            year = +this.value;
            d3.select(""#yearDisplay"").text(year);
            updateChart();
        });

        function updateChart() {
            const filteredData = data.filter(d => d.Year === year);

            const x = d3.scaleLinear()
                .domain([0, d3.max(filteredData, d => d[""Sales Figures""])])
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(filteredData, d => d[""Hours Worked""])])
                .range([height, 0]);

            g.selectAll(""*"").remove();

            g.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""y axis"")
                .call(d3.axisLeft(y));

            g.selectAll("".scatter"")
                .data(filteredData)
                .enter().append(""circle"")
                .attr(""class"", ""scatter"")
                .attr(""cx"", d => x(d[""Sales Figures""]))
                .attr(""cy"", d => y(d[""Hours Worked""]))
                .attr(""r"", 5);
        }
    </script>
</body>
</html>
```"
6,scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot showing the Sales Figures of Marketing. Add animated transitions that connect these points using lines in order.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,advanced view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Sales Figures - Marketing</title>
    <style>
        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 2;
        }
        .dot {
            fill: red;
            stroke: white;
            stroke-width: 1.5;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const svg = d3.select(""svg"");
        const margin = {top: 20, right: 30, bottom: 40, left: 50};
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            data = data.filter(d => d.Department === ""Marketing"")
                        .map(d => ({
                            Year: +d.Year,
                            SalesFigures: +d[""Sales Figures""],
                            HoursWorked: +d[""Hours Worked""],
                            Revenue: +d.Revenue,
                            Profit: +d.Profit,
                            EmployeeSatisfactionScore: +d[""Employee Satisfaction Score""],
                            NumberOfEmployees: +d[""Number of Employees""]
                        }));

            const x = d3.scaleLinear()
                        .domain(d3.extent(data, d => d.Year)).nice()
                        .range([0, width]);

            const y = d3.scaleLinear()
                        .domain([0, d3.max(data, d => d.SalesFigures)]).nice()
                        .range([height, 0]);

            g.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .call(d3.axisLeft(y));

            const line = d3.line()
                           .x(d => x(d.Year))
                           .y(d => y(d.SalesFigures));

            g.append(""path"")
                .datum(data)
                .attr(""class"", ""line"")
                .attr(""d"", line)
                .attr(""fill"", ""none"");

            const dots = g.selectAll("".dot"")
                          .data(data)
                          .enter().append(""circle"")
                          .attr(""class"", ""dot"")
                          .attr(""cx"", d => x(d.Year))
                          .attr(""cy"", d => y(d.SalesFigures))
                          .attr(""r"", 5)
                          .style(""opacity"", 0);

            dots.transition()
                .duration(1000)
                .style(""opacity"", 1)
                .attr(""r"", 5);
        });
    </script>
</body>
</html>
```"
7,line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Sales Figures of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,advanced view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Figures Line Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke-width: 2px;
        }

        .line:hover {
            stroke-width: 4px;
        }

        .axis path,
        .axis line {
            fill: none;
            shape-rendering: crispEdges;
        }

        .tooltip {
            position: absolute;
            text-align: center;
            width: 60px;
            padding: 5px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const margin = {top: 20, right: 20, bottom: 30, left: 50},
              width = 800 - margin.left - margin.right,
              height = 400 - margin.top - margin.bottom;

        const svg = d3.select(""svg"").append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scalePoint().range([0, width]).padding(0.5);
        const y = d3.scaleLinear().range([height, 0]);

        const color = d3.scaleOrdinal(d3.schemeCategory10);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            data.forEach(d => {
                d[""Sales Figures""] = +d[""Sales Figures""];
                d.Year = d.Year;
            });

            const departments = Array.from(new Set(data.map(d => d.Department)));
            x.domain(data.map(d => d.Year));
            y.domain([0, d3.max(data, d => d[""Sales Figures""])]);

            const line = d3.line()
                .x(d => x(d.Year))
                .y(d => y(d[""Sales Figures""]));

            const departmentLines = svg.selectAll("".line"")
                .data(departments)
                .enter().append(""g"")
                .attr(""class"", ""line"")
                .attr(""fill"", ""none"");

            departmentLines.append(""path"")
                .attr(""class"", ""line"")
                .attr(""d"", d => line(data.filter(row => row.Department === d)))
                .style(""stroke"", d => color(d))
                .style(""opacity"", 0.7)
                .on(""mouseover"", function() {
                    d3.select(this).style(""opacity"", 1);
                })
                .on(""mouseout"", function() {
                    d3.select(this).style(""opacity"", 0.7);
                });

            svg.append(""g"")
                .attr(""class"", ""axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""axis"")
                .call(d3.axisLeft(y));

            const tooltip = d3.select(""body"").append(""div"")
                .attr(""class"", ""tooltip"")
                .style(""opacity"", 0);

            svg.selectAll("".line"")
                .on(""mousemove"", (event, d) => {
                    tooltip.transition().duration(200).style(""opacity"", 0.9);
                    tooltip.html(d)
                        .style(""left"", (event.pageX + 5) + ""px"")
                        .style(""top"", (event.pageY - 28) + ""px"");
                })
                .on(""mouseout"", () => {
                    tooltip.transition().duration(500).style(""opacity"", 0);
                });
        });
    </script>
</body>
</html>
```"
8,bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Bar Chart that visualizes the Sales Figures for each Department in 2020. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,advanced view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Bar Chart Visualization</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path,
        .axis--x line {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
            margin = {top: 20, right: 30, bottom: 30, left: 40},
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom,
            g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleBand().range([0, width]).padding(0.1),
            y = d3.scaleLinear().range([height, 0]);

        const xAxis = d3.axisBottom(x),
            yAxis = d3.axisLeft(y);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            data.forEach(d => {
                if (d.Year === ""2020"") {
                    d[""Sales Figures""] = +d[""Sales Figures""];
                }
            });

            const filteredData = data.filter(d => d.Year === ""2020"");

            x.domain(filteredData.map(d => d.Department));
            y.domain([0, d3.max(filteredData, d => d[""Sales Figures""])]);

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(xAxis);

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(yAxis);

            g.selectAll("".bar"")
                .data(filteredData)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => x(d.Department))
                .attr(""y"", d => y(d[""Sales Figures""]))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d[""Sales Figures""]));

            svg.call(d3.zoom()
                .scaleExtent([0.5, 5])
                .on(""zoom"", (event) => {
                    g.attr(""transform"", event.transform);
                }));
        });
    </script>
</body>
</html>
```"
9,bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Bar Chart that visualizes the Sales Figures for each Department in 2020. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,advanced view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Figures Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis {
            font-size: 12px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            // Filter for the year 2020 and convert types
            const filteredData = data.filter(d => d.Year == 2020).map(d => ({
                Department: d.Department,
                Sales: +d['Sales Figures']
            }));

            // Set up the x and y scales
            const x = d3.scaleBand()
                        .domain(filteredData.map(d => d.Department))
                        .range([0, width])
                        .padding(0.1);
            const y = d3.scaleLinear()
                        .domain([0, d3.max(filteredData, d => d.Sales)])
                        .range([height, 0]);

            // Add x axis
            g.append(""g"")
                .attr(""class"", ""axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            // Add y axis
            g.append(""g"")
                .attr(""class"", ""axis"")
                .call(d3.axisLeft(y));

            // Create bars
            const bars = g.selectAll("".bar"")
                          .data(filteredData)
                          .enter().append(""rect"")
                          .attr(""class"", ""bar"")
                          .attr(""x"", d => x(d.Department))
                          .attr(""y"", d => y(d.Sales))
                          .attr(""width"", x.bandwidth())
                          .attr(""height"", d => height - y(d.Sales))
                          .call(d3.drag()
                              .on(""start"", dragStarted)
                              .on(""drag"", dragged)
                              .on(""end"", dragEnded));

            function dragStarted(event) {
                d3.select(this).raise().classed(""active"", true);
            }

            function dragged(event, d) {
                const newY = Math.min(height, Math.max(0, event.y));
                d3.select(this).attr(""y"", newY).attr(""height"", height - newY);
                const newSales = Math.round((height - newY) / (height / d3.max(filteredData, d => d.Sales)));
                d.Sales = newSales;
            }

            function dragEnded(event) {
                d3.select(this).classed(""active"", false);
                // Re-sort bars based on new Sales values
                const sortedData = filteredData.sort((a, b) => b.Sales - a.Sales);
                x.domain(sortedData.map(d => d.Department));
                g.selectAll("".bar"")
                  .data(sortedData)
                  .transition()
                  .duration(500)
                  .attr(""x"", d => x(d.Department))
                  .attr(""y"", d => y(d.Sales))
                  .attr(""height"", d => height - y(d.Sales));
                g.select("".axis--x"").call(d3.axisBottom(x))
            }
        });
    </script>
</body>
</html>
```"
10,bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Bar Chart that visualizes the Sales Figures for each Department in 2020. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Sales Figures.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,advanced view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Sales Figures Visualization</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
            transition: height 0.5s;
        }
        .bar:hover {
            fill: orange;
        }
        #menu {
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <select id=""menu"">
        <option value=""asc"">Sort Ascending</option>
        <option value=""desc"">Sort Descending</option>
    </select>
    <svg width=""600"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = { top: 20, right: 30, bottom: 40, left: 40 };
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;
        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            data.forEach(d => {
                if (d.Year === ""2020"") {
                    d[""Sales Figures""] = +d[""Sales Figures""];
                    d.Department = d.Department;
                }
            });

            updateChart(data.filter(d => d[""Sales Figures""]));

            d3.select(""#menu"").on(""change"", function() {
                const selected = d3.select(this).property(""value"");
                const sortedData = selected === ""asc"" ? data.sort((a, b) => a[""Sales Figures""] - b[""Sales Figures""]) : data.sort((a, b) => b[""Sales Figures""] - a[""Sales Figures""]);
                updateChart(sortedData.filter(d => d[""Sales Figures""]));
            });

            function updateChart(data) {
                g.selectAll(""*"").remove();

                const x = d3.scaleBand()
                    .domain(data.map(d => d.Department))
                    .range([0, width])
                    .padding(0.1);

                const y = d3.scaleLinear()
                    .domain([0, d3.max(data, d => d[""Sales Figures""])])
                    .nice()
                    .range([height, 0]);

                g.append(""g"")
                    .selectAll("".bar"")
                    .data(data)
                    .enter().append(""rect"")
                    .attr(""class"", ""bar"")
                    .attr(""x"", d => x(d.Department))
                    .attr(""y"", d => y(d[""Sales Figures""]))
                    .attr(""width"", x.bandwidth())
                    .attr(""height"", d => height - y(d[""Sales Figures""]))
                    .on(""mouseover"", function(event, d) {
                        d3.select(this).transition().duration(100).style(""fill"", ""orange"");
                    })
                    .on(""mouseout"", function(event, d) {
                        d3.select(this).transition().duration(100).style(""fill"", ""steelblue"");
                    });

                g.append(""g"")
                    .attr(""class"", ""x-axis"")
                    .attr(""transform"", `translate(0,${height})`)
                    .call(d3.axisBottom(x));

                g.append(""g"")
                    .attr(""class"", ""y-axis"")
                    .call(d3.axisLeft(y));
            }
        });
    </script>
</body>
</html>
```"
