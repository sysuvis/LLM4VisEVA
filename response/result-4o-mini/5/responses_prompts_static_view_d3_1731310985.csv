Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot that visualizes the relationship between Sales Figures and Hours Worked.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Sales Figures vs Hours Worked</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .scatterplot {
            margin: 50px;
        }
        .dot {
            fill: steelblue;
        }
    </style>
</head>
<body>
    <div class=""scatterplot""></div>
    <script>
        const margin = { top: 20, right: 30, bottom: 30, left: 40 },
            width = 800 - margin.left - margin.right,
            height = 400 - margin.top - margin.bottom;

        const svg = d3.select('.scatterplot').append('svg')
            .attr('width', width + margin.left + margin.right)
            .attr('height', height + margin.top + margin.bottom)
            .append('g')
            .attr('transform', `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            data.forEach(d => {
                d['Sales Figures'] = +d['Sales Figures'];
                d['Hours Worked'] = +d['Hours Worked'];
            });

            const x = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Sales Figures'])])
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Hours Worked'])])
                .range([height, 0]);

            svg.append('g')
                .attr('transform', `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svg.append('g')
                .call(d3.axisLeft(y));

            svg.selectAll('.dot')
                .data(data)
                .enter().append('circle')
                .attr('class', 'dot')
                .attr('cx', d => x(d['Sales Figures']))
                .attr('cy', d => y(d['Hours Worked']))
                .attr('r', 5);
        });
    </script>
</body>
</html>
```"
2,line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Line Chart that visualizes the trend of Sales Figures over the Year for each Department.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Figures Trend by Department</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke-width: 2;
        }
        .axis {
            font: 10px sans-serif;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);
        const color = d3.scaleOrdinal(d3.schemeCategory10);

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            data.forEach(d => {
                d.Year = +d[""Year""];
                d[""Sales Figures""] = +d[""Sales Figures""];
                d.Department = d.Department.trim();
            });

            const departments = Array.from(new Set(data.map(d => d.Department)));

            const salesData = departments.map(dep => {
                return {
                    department: dep,
                    values: data.filter(d => d.Department === dep).map(d => ({ year: d.Year, sales: d[""Sales Figures""] }))
                };
            });

            x.domain(d3.extent(data, d => d.Year));
            y.domain([0, d3.max(data, d => d[""Sales Figures""])]);
            color.domain(departments);

            const line = d3.line()
                .x(d => x(d.year))
                .y(d => y(d.sales));

            g.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""y axis"")
                .call(d3.axisLeft(y));

            salesData.forEach(dep => {
                g.append(""path"")
                    .datum(dep.values)
                    .attr(""class"", ""line"")
                    .attr(""d"", line)
                    .style(""stroke"", color(dep.department));

                g.append(""text"")
                    .datum(dep.values[dep.values.length - 1])
                    .attr(""x"", x(dep.values[dep.values.length - 1].year))
                    .attr(""y"", y(dep.values[dep.values.length - 1].sales))
                    .attr(""dy"", "".35em"")
                    .attr(""fill"", color(dep.department))
                    .text(dep.department);
            });
        });
    </script>
</body>
</html>
```"
3,bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Bar Chart that visualizes the Sales Figures for each Department in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Figures by Department in 2020</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path,
        .axis--x line {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = { top: 20, right: 30, bottom: 40, left: 40 };
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;
        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            const filteredData = data.filter(d => d.Year === '2020');

            const salesByDepartment = d3.rollup(filteredData, v => d3.sum(v, d => +d['Sales Figures']), d => d.Department);
            const departments = Array.from(salesByDepartment.keys());
            const salesFigures = Array.from(salesByDepartment.values());

            const x = d3.scaleBand()
                .domain(departments)
                .range([0, width])
                .padding(0.1);
            const y = d3.scaleLinear()
                .domain([0, d3.max(salesFigures)])
                .nice()
                .range([height, 0]);

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            g.selectAll("".bar"")
                .data(salesFigures)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", (d, i) => x(departments[i]))
                .attr(""y"", d => y(d))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d));
        });
    </script>
</body>
</html>
```"
4,pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Pie Chart that visualizes the proportion of Sales Figures contributed by each Department in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<meta charset=""utf-8"">
<style>
  .arc {
    fill: steelblue;
  }
</style>
<body>
  <svg width=""600"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v6.min.js""></script>
  <script>
    const width = 600;
    const height = 600;
    const radius = Math.min(width, height) / 2;

    const svg = d3.select(""svg"")
      .attr(""width"", width)
      .attr(""height"", height)
      .append(""g"")
      .attr(""transform"", `translate(${width / 2},${height / 2})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
      const filteredData = data.filter(d => d.Year === ""2020"");

      const salesByDepartment = d3.rollup(filteredData, v => d3.sum(v, d => +d[""Sales Figures""]), d => d.Department);
      
      const pieData = Array.from(salesByDepartment, ([key, value]) => ({ key, value }));

      const color = d3.scaleOrdinal(d3.schemeCategory10);

      const pie = d3.pie().value(d => d.value);
      const arc = d3.arc().innerRadius(0).outerRadius(radius);

      const g = svg.selectAll("".arc"")
        .data(pie(pieData))
        .enter().append(""g"")
        .attr(""class"", ""arc"");

      g.append(""path"")
        .attr(""d"", arc)
        .attr(""fill"", d => color(d.data.key));

      g.append(""text"")
        .attr(""transform"", d => `translate(${arc.centroid(d)})`)
        .attr(""dy"", "".35em"")
        .text(d => d.data.key);
    });
  </script>
</body>
```"
5,donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Donut Chart that visualizes the distribution of Sales Figures among Department in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Donut Chart - Sales Figures by Department in 2020</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .arc {
            cursor: pointer;
        }
        .arc:hover {
            opacity: 0.8;
        }
    </style>
</head>
<body>
    <svg width=""600"" height=""600""></svg>
    <script>
        const width = 600;
        const height = 600;
        const radius = Math.min(width, height) / 2 - 40;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            const filteredData = data.filter(d => d.Year === ""2020"");
            const salesByDepartment = d3.rollup(filteredData, v => d3.sum(v, d => +d[""Sales Figures""]), d => d.Department);
            
            const pie = d3.pie()
                .value(d => d[1]);

            const arc = d3.arc()
                .innerRadius(radius * 0.5)
                .outerRadius(radius);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const arcs = pie(Array.from(salesByDepartment.entries()));

            svg.selectAll("".arc"")
                .data(arcs)
                .enter().append(""path"")
                .attr(""class"", ""arc"")
                .attr(""d"", arc)
                .attr(""fill"", (d, i) => color(i));
        });
    </script>
</body>
</html>
```"
6,coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Coxcomb Chart(polar area chart) to compare the Sales Figures of different Department in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coxcomb Chart</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .arc {
            stroke: #fff;
        }
    </style>
</head>
<body>
    <svg width=""600"" height=""600""></svg>
    <script>
        const width = 600, height = 600, radius = Math.min(width, height) / 2;

        const svg = d3.select(""svg"")
            .attr(""width"", width)
            .attr(""height"", height)
            .append(""g"")
            .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            const salesData = data.filter(d => d.Year === ""2020"")
                .map(d => ({ Department: d.Department, SalesFigures: +d['Sales Figures'] }));

            const totalSales = d3.sum(salesData, d => d.SalesFigures);
            const angles = salesData.map(d => (d.SalesFigures / totalSales) * 2 * Math.PI);

            const arcs = d3.pie().value(d => d.SalesFigures)(salesData);
            const arcGenerator = d3.arc().innerRadius(0).outerRadius(radius);

            svg.selectAll("".arc"")
                .data(arcs)
                .enter().append(""path"")
                .attr(""class"", ""arc"")
                .attr(""d"", arcGenerator)
                .attr(""fill"", (d, i) => d3.schemeCategory10[i])
                .attr(""stroke"", ""#fff"");
            
            svg.selectAll("".arc-text"")
                .data(arcs)
                .enter().append(""text"")
                .attr(""transform"", d => `translate(${arcGenerator.centroid(d)})`)
                .text((d, i) => salesData[i].Department)
                .style(""text-anchor"", ""middle"")
                .style(""fill"", ""#000"");
        });
    </script>
</body>
</html>
```"
7,radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Radar Chart to compare the Sales Figures of different Department in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE HTML>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Radar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .RadarChart {
            margin: auto;
            width: 600px;
            height: 600px;
        }
    </style>
</head>
<body>
    <svg class=""RadarChart""></svg>
    <script>
        const margin = {top: 20, right: 20, bottom: 20, left: 20},
              width = 600 - margin.left - margin.right,
              height = 600 - margin.top - margin.bottom;
        
        const radarChartOptions = {
            w: width,
            h: height,
            maxValue: 100,
            levels: 5,
            roundStrokes: true,
            color: d3.scaleOrdinal(d3.schemeCategory10)
        };
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(function(data) {
            const filteredData = data.filter(d => d.Year === ""2020"");
            const departments = [...new Set(filteredData.map(d => d.Department))];
            const salesFigures = departments.map(department => {
                const departmentData = filteredData.filter(d => d.Department === department);
                return {
                    department: department,
                    sales: +departmentData[0][""Sales Figures""]
                };
            });
            
            const allValues = salesFigures.map(d => d.sales);
            const allLabels = salesFigures.map(d => d.department);
            
            const radius = Math.min(radarChartOptions.w / 2, radarChartOptions.h / 2);
            const angleSlice = Math.PI * 2 / allLabels.length;

            // Scale
            const rScale = d3.scaleLinear()
                .range(['0', `${radius}`])
                .domain([0, d3.max(allValues)]);

            // Create the empty radar chart
            const svg = d3.select("".RadarChart"")
                .append(""g"")
                .attr(""transform"", ""translate("" + radarChartOptions.w / 2 + "","" + radarChartOptions.h / 2 + "")"");
            
            // Draw the circular grid
            for (let j = 0; j < radarChartOptions.levels; j++) {
                const levelRadius = radius / radarChartOptions.levels * (j + 1);
                const levelGroup = svg.append(""g"");
                levelGroup.selectAll("".levels"")
                    .data(allLabels)
                    .enter()
                    .append(""line"")
                    .attr(""x1"", (d, i) => levelRadius * Math.cos(angleSlice * i - Math.PI / 2))
                    .attr(""y1"", (d, i) => levelRadius * Math.sin(angleSlice * i - Math.PI / 2))
                    .attr(""x2"", (d, i) => levelRadius * Math.cos(angleSlice * (i + 1) - Math.PI / 2))
                    .attr(""y2"", (d, i) => levelRadius * Math.sin(angleSlice * (i + 1) - Math.PI / 2))
                    .attr(""class"", ""line"")
                    .style(""stroke"", ""grey"")
                    .style(""stroke-width"", ""1px"")
                    .style(""opacity"", ""0.5"");
            }

            // Draw the axis
            const axisGrid = svg.append(""g"").attr(""class"", ""axisWrapper"");
            const axis = axisGrid.selectAll("".axis"")
                .data(allLabels)
                .enter()
                .append(""g"")
                .attr(""class"", ""axis"");
                
            axis.append(""line"")
                .attr(""x1"", 0)
                .attr(""y1"", 0)
                .attr(""x2"", (d, i) => radius * Math.cos(angleSlice * i - Math.PI / 2))
                .attr(""y2"", (d, i) => radius * Math.sin(angleSlice * i - Math.PI / 2))
                .attr(""class"", ""line"")
                .style(""stroke"", ""grey"")
                .style(""stroke-width"", ""1px"");
                
            axis.append(""text"")
                .attr(""class"", ""legend"")
                .text((d, i) => d)
                .attr(""text-anchor"", ""middle"")
                .attr(""dy"", ""1em"")
                .attr(""x"", (d, i) => (radius + 10) * Math.cos(angleSlice * i - Math.PI / 2))
                .attr(""y"", (d, i) => (radius + 10) * Math.sin(angleSlice * i - Math.PI / 2));
            
            // Draw the data
            const dataValues = salesFigures.map(d => rScale(d.sales));
            dataValues.push(dataValues[0]); // Close the loop
            const radarLine = d3.lineRadial()
                .angle((d, i) => angleSlice * i)
                .radius(d => d);
            
            svg.append(""path"")
                .datum(dataValues)
                .attr(""d"", radarLine)
                .style(""fill"", radarChartOptions.color(0))
                .style(""fill-opacity"", 0.6)
                .style(""stroke"", radarChartOptions.color(0))
                .style(""stroke-width"", 2);
        });
    </script>
</body>
</html>
```"
8,streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Streamgraph that visualizes the changes of Sales Figures over the Year for each Department.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Streamgraph of Sales Figures</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .stream {
            fill-opacity: 0.6;
        }
        .axis {
            font: 12px sans-serif;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 20, bottom: 20, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleBand().range([height, 0]).padding(0.1);
        const color = d3.scaleOrdinal(d3.schemeCategory10);

        const stack = d3.stack().keys([]).value((d, key) => d[key]);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            const departments = Array.from(new Set(data.map(d => d.Department)));
            const years = Array.from(new Set(data.map(d => d.Year)));

            departments.forEach(department => {
                const departmentData = data.filter(d => d.Department === department);
                const salesFigures = years.map(year => {
                    const entry = departmentData.find(d => d.Year === year);
                    return {Year: year, Sales: +entry[""Sales Figures""]};
                });
                salesFigures.forEach(d => {
                    d.Department = department;
                });
                if (!stack.keys().includes(department)) {
                    stack.keys([...stack.keys(), department]);
                }
            });

            const stackedData = d3.nest()
                .key(d => d.Year)
                .entries(data.map(d => ({
                    Year: d.Year,
                    Department: d.Department,
                    Sales: +d[""Sales Figures""]
                })));

            x.domain([0, d3.max(stackedData, d => d3.max(d.values, v => v.Sales))]);
            y.domain(years).range([height, 0]);
            color.domain(departments);

            svg.selectAll("".layer"")
               .data(stack(stackedData))
               .enter().append(""path"")
               .attr(""class"", ""layer"")
               .attr(""d"", d3.area()
                     .x0(d => x(d[0][1]))
                     .x1(d => x(d[0][0]))
                     .y(d => y(d.data.Year)))
               .style(""fill"", (d, i) => color(i))
               .attr(""transform"", ""translate(0,"" + margin.top + "")"");

            svg.append(""g"")
               .attr(""class"", ""axis"")
               .attr(""transform"", `translate(0,${height})`)
               .call(d3.axisBottom(x));

            svg.append(""g"")
               .attr(""class"", ""axis"")
               .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```"
9,slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Slopegraph to compare the Sales Figures between 2019 and 2020 for each Department.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Slopegraph - Sales Figures 2019 vs 2020</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line { fill: none; stroke: steelblue; stroke-width: 2; }
        .circle { fill: steelblue; }
        .text { font: 10px sans-serif; }
        .axis path, .axis line { fill: none; shape-rendering: crispEdges; }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 100},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleBand().range([height, 0]).padding(0.1);
        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            const salesData = data.filter(d => d.Year === ""2019"" || d.Year === ""2020"")
                                  .reduce((acc, d) => {
                                      const year = d.Year;
                                      const department = d.Department;
                                      const sales = +d[""Sales Figures""];
                                      acc[department] = acc[department] || {};
                                      acc[department][year] = sales;
                                      return acc;
                                  }, {});
            
            const departments = Object.keys(salesData);
            const chartData = departments.map(department => ({
                department,
                sales2019: salesData[department][""2019""],
                sales2020: salesData[department][""2020""]
            })).filter(d => d.sales2019 !== undefined && d.sales2020 !== undefined);

            x.domain([0, d3.max(chartData, d => Math.max(d.sales2019, d.sales2020))]);
            y.domain(chartData.map(d => d.department));

            g.append(""g"")
             .attr(""class"", ""axis axis--x"")
             .attr(""transform"", `translate(0,${height})`)
             .call(d3.axisBottom(x));

            g.append(""g"")
             .attr(""class"", ""axis axis--y"")
             .call(d3.axisLeft(y));

            const line = d3.line()
                            .x(d => x(d.sales))
                            .y(d => y(d.department) + y.bandwidth() / 2);

            g.append(""path"")
             .datum(chartData)
             .attr(""class"", ""line"")
             .attr(""d"", line([{sales: 0}, ...chartData, {sales: 0}]))
             .attr(""fill"", ""none"");

            g.selectAll("".circle"")
             .data(chartData)
             .enter().append(""circle"")
             .attr(""class"", ""circle"")
             .attr(""cx"", d => x(d.sales2019))
             .attr(""cy"", d => y(d.department) + y.bandwidth() / 2)
             .attr(""r"", 5);

            g.selectAll("".circle"")
             .data(chartData)
             .enter().append(""circle"")
             .attr(""class"", ""circle"")
             .attr(""cx"", d => x(d.sales2020))
             .attr(""cy"", d => y(d.department) + y.bandwidth() / 2)
             .attr(""r"", 5);

            g.selectAll("".text"")
             .data(chartData)
             .enter().append(""text"")
             .attr(""class"", ""text"")
             .attr(""x"", d => x(d.sales2019) + 5)
             .attr(""y"", d => y(d.department) + y.bandwidth() / 2)
             .text(d => d.sales2019);

            g.selectAll("".text"")
             .data(chartData)
             .enter().append(""text"")
             .attr(""class"", ""text"")
             .attr(""x"", d => x(d.sales2020) + 5)
             .attr(""y"", d => y(d.department) + y.bandwidth() / 2 + 15)
             .text(d => d.sales2020);
        });
    </script>
</body>
</html>
```"
10,heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Heatmap that visualizes the Sales Figures across Department and Years.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Figures Heatmap</title>
    <style>
        .cell {
            stroke-width: 1;
            stroke: #fff;
        }
        .label {
            font-size: 10px;
            fill: black;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = {top: 20, right: 20, bottom: 30, left: 40},
              width = 800 - margin.left - margin.right,
              height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
                      .append(""g"")
                      .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            const years = [...new Set(data.map(d => d.Year))];
            const departments = [...new Set(data.map(d => d.Department))];

            const colorScale = d3.scaleSequential(d3.interpolateBlues)
                                 .domain([0, d3.max(data, d => +d['Sales Figures'])]);

            const xScale = d3.scaleBand()
                             .range([0, width])
                             .domain(departments)
                             .padding(0.05);

            const yScale = d3.scaleBand()
                             .range([height, 0])
                             .domain(years)
                             .padding(0.05);

            svg.append(""g"")
               .selectAll("".cell"")
               .data(data)
               .enter()
               .append(""rect"")
               .attr(""class"", ""cell"")
               .attr(""x"", d => xScale(d.Department))
               .attr(""y"", d => yScale(d.Year))
               .attr(""width"", xScale.bandwidth())
               .attr(""height"", yScale.bandwidth())
               .attr(""fill"", d => colorScale(+d['Sales Figures']));

            svg.append(""g"")
               .attr(""class"", ""x-axis"")
               .attr(""transform"", `translate(0,${height})`)
               .call(d3.axisBottom(xScale));

            svg.append(""g"")
               .attr(""class"", ""y-axis"")
               .call(d3.axisLeft(yScale));
        });
    </script>
</body>
</html>
```"
11,bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Stacked Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            stroke-width: 1;
            stroke: #fff;
        }
        .axis {
            font: 10px sans-serif;
        }
        .x.axis path {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script>
        const margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = 800 - margin.left - margin.right,
              height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            const keys = [""Sales Figures"", ""Revenue"", ""Profit""];
            data.forEach(d => {
                d[""Sales Figures""] = +d[""Sales Figures""];
                d.Revenue = +d.Revenue;
                d.Profit = +d.Profit;
            });

            const x = d3.scaleBand()
                .domain(data.map(d => d.Year))
                .range([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Sales Figures""] + d.Revenue + d.Profit)])
                .range([height, 0]);

            const z = d3.scaleOrdinal()
                .domain(keys)
                .range(d3.schemeCategory10);

            const stack = d3.stack()
                .keys(keys);

            const stackedData = stack(data);

            svg.append(""g"")
                .selectAll(""g"")
                .data(stackedData)
                .enter().append(""g"")
                .attr(""fill"", d => z(d.key))
                .attr(""class"", ""bar"")
                .selectAll(""rect"")
                .data(d => d)
                .enter().append(""rect"")
                .attr(""x"", d => x(d.data.Year))
                .attr(""y"", d => y(d[1]))
                .attr(""height"", d => y(d[0]) - y(d[1]))
                .attr(""width"", x.bandwidth());

            svg.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""y axis"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```"
12,bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Horizontal Bar Chart that visualizes the Sales Figures for each Department in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Figures by Department (2020)</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path,
        .axis--x line {
            display: none;
        }
        .axis--y text {
            font-size: 12px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 40, left: 100},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              x = d3.scaleLinear().range([0, width]),
              y = d3.scaleBand().range([0, height]).padding(0.1),
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            const filteredData = data.filter(d => d.Year === ""2020"");
            filteredData.forEach(d => {
                d[""Sales Figures""] = +d[""Sales Figures""];
            });

            x.domain([0, d3.max(filteredData, d => d[""Sales Figures""])]);
            y.domain(filteredData.map(d => d.Department));

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            g.selectAll("".bar"")
                .data(filteredData)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", 0)
                .attr(""y"", d => y(d.Department))
                .attr(""width"", d => x(d[""Sales Figures""]))
                .attr(""height"", y.bandwidth());
        });
    </script>
</body>
</html>
```"
