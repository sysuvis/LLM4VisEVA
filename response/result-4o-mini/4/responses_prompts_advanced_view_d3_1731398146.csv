Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot that visualizes the relationship between Enrollment Number and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,advanced view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment vs Revenue Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .dot {
            fill: steelblue;
        }
        .dot:hover {
            fill: orange;
        }
        .axis--x,
        .axis--y {
            font: 10px sans-serif;
        }
        .tooltip {
            position: absolute;
            text-align: center;
            padding: 5px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 1px solid gray;
            border-radius: 4px;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <div class=""tooltip"" style=""opacity: 0;""></div>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            data.forEach(d => {
                d[""Enrollment Number""] = +d[""Enrollment Number""];
                d[""Revenue""] = +d[""Revenue""];
            });

            const x = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Enrollment Number""])])
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Revenue""])])
                .range([height, 0]);

            const xAxis = d3.axisBottom(x);
            const yAxis = d3.axisLeft(y);

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(xAxis);

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(yAxis);

            const tooltip = d3.select("".tooltip"");

            g.selectAll("".dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => x(d[""Enrollment Number""]))
                .attr(""cy"", d => y(d[""Revenue""]))
                .attr(""r"", 5)
                .on(""mouseover"", (event, d) => {
                    tooltip.transition().duration(200).style(""opacity"", .9);
                    tooltip.html(`Enrollment: ${d[""Enrollment Number""]}<br>Revenue: ${d[""Revenue""]}`)
                        .style(""left"", (event.pageX + 5) + ""px"")
                        .style(""top"", (event.pageY - 28) + ""px"");
                })
                .on(""mouseout"", () => {
                    tooltip.transition().duration(500).style(""opacity"", 0);
                });
        });
    </script>
</body>
</html>
```"
2,scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot that visualizes the relationship between Enrollment Number and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,advanced view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment vs Revenue Scatterplot</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .dot {
            stroke: #333;
            stroke-width: 1.5px;
        }
        .brush .selection {
            fill: steelblue;
            opacity: 0.5;
        }
        .tooltip {
            position: absolute;
            text-align: center;
            padding: 5px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>
    <script>
        const margin = { top: 20, right: 30, bottom: 40, left: 40 },
            width = 800 - margin.left - margin.right,
            height = 500 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        const xAxis = d3.axisBottom(x);
        const yAxis = d3.axisLeft(y);

        const brush = d3.brush().extent([[0, 0], [width, height]])
            .on(""brush end"", brushed);

        svg.append(""g"")
            .attr(""class"", ""brush"")
            .call(brush);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            data.forEach(d => {
                d['Enrollment Number'] = +d['Enrollment Number'];
                d['Revenue'] = +d['Revenue'];
            });

            x.domain(d3.extent(data, d => d['Enrollment Number'])).nice();
            y.domain(d3.extent(data, d => d['Revenue'])).nice();

            svg.append(""g"")
                .attr(""class"", ""x-axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(xAxis);

            svg.append(""g"")
                .attr(""class"", ""y-axis"")
                .call(yAxis);

            const dot = svg.selectAll("".dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => x(d['Enrollment Number']))
                .attr(""cy"", d => y(d['Revenue']))
                .attr(""r"", 5)
                .attr(""fill"", ""steelblue"")
                .on(""mouseover"", function(event, d) {
                    tooltip.transition().duration(200).style(""opacity"", .9);
                    tooltip.html(`Enrollment: ${d['Enrollment Number']}<br>Revenue: ${d['Revenue']}`)
                        .style(""left"", (event.pageX + 5) + ""px"")
                        .style(""top"", (event.pageY - 28) + ""px"");
                })
                .on(""mouseout"", function() {
                    tooltip.transition().duration(500).style(""opacity"", 0);
                });

            const tooltip = d3.select(""body"").append(""div"")
                .attr(""class"", ""tooltip"")
                .style(""opacity"", 0);

            function brushed(event) {
                const selection = event.selection;
                if (selection) {
                    const x0 = x.invert(selection[0][0]);
                    const x1 = x.invert(selection[1][0]);
                    const y0 = y.invert(selection[1][1]);
                    const y1 = y.invert(selection[0][1]);

                    dot.classed(""selected"", d => x0 <= d['Enrollment Number'] && d['Enrollment Number'] <= x1 && y0 <= d['Revenue'] && d['Revenue'] <= y1);
                }
            }
        });
    </script>
</body>
</html>
```"
3,scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot that visualizes the relationship between Enrollment Number and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,advanced view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Enrollment Number vs Revenue</title>
    <style>
        .scatterplot {
            font-family: Arial, sans-serif;
        }
        .axis path,
        .axis line {
            fill: none;
            shape-rendering: crispEdges;
        }
        .dot {
            fill: steelblue;
            opacity: 0.7;
        }
    </style>
</head>
<body>
    <div class=""scatterplot""></div>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 40 },
            width = 960 - margin.left - margin.right,
            height = 500 - margin.top - margin.bottom;

        const svg = d3.select("".scatterplot"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            data.forEach(d => {
                d['Enrollment Number'] = +d['Enrollment Number'];
                d.Revenue = +d.Revenue;
            });

            const x = d3.scaleLinear()
                .domain(d3.extent(data, d => d['Enrollment Number'])).nice()
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.Revenue)]).nice()
                .range([height, 0]);

            const xAxis = d3.axisBottom(x);
            const yAxis = d3.axisLeft(y);

            svg.append(""g"")
                .attr(""class"", ""axis x-axis"")
                .attr(""transform"", `translate(0, ${height})`)
                .call(xAxis);

            svg.append(""g"")
                .attr(""class"", ""axis y-axis"")
                .call(yAxis);

            svg.selectAll("".dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => x(d['Enrollment Number']))
                .attr(""cy"", d => y(d.Revenue))
                .attr(""r"", 5);

            const zoom = d3.zoom()
                .scaleExtent([0.5, 10])
                .on(""zoom"", (event) => {
                    const newXScale = event.transform.rescaleX(x);
                    const newYScale = event.transform.rescaleY(y);
                    svg.selectAll("".dot"")
                        .attr(""cx"", d => newXScale(d['Enrollment Number']))
                        .attr(""cy"", d => newYScale(d.Revenue));
                    svg.select("".x-axis"").call(xAxis.scale(newXScale));
                    svg.select("".y-axis"").call(yAxis.scale(newYScale));
                });

            svg.call(zoom);
        });
    </script>
</body>
</html>
```"
4,scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Enrollment Number and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,advanced view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment vs Revenue Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter {
            fill-opacity: 0.7;
        }
    </style>
</head>
<body>
    <h1>Scatterplot of Enrollment Number vs Revenue</h1>
    <svg width=""800"" height=""600""></svg>
    <script>
        const margin = { top: 20, right: 30, bottom: 30, left: 40 },
              width = 800 - margin.left - margin.right,
              height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""svg"").append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            data.forEach(d => {
                d['Enrollment Number'] = +d['Enrollment Number'];
                d.Revenue = +d.Revenue;
            });

            const x = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Enrollment Number'])])
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.Revenue)])
                .range([height, 0]);

            const tooltip = d3.select(""body"").append(""div"")
                .style(""position"", ""absolute"")
                .style(""visibility"", ""hidden"")
                .style(""background"", ""lightgray"")
                .style(""border"", ""1px solid black"")
                .style(""padding"", ""5px"");

            svg.append(""g"")
                .attr(""class"", ""x-axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""y-axis"")
                .call(d3.axisLeft(y));

            svg.selectAll("".scatter"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""scatter"")
                .attr(""cx"", d => x(d['Enrollment Number']))
                .attr(""cy"", d => y(d.Revenue))
                .attr(""r"", 5)
                .on(""mouseover"", function (event, d) {
                    tooltip.html(`Enrollment: ${d['Enrollment Number']}<br>Revenue: ${d.Revenue}`)
                        .style(""visibility"", ""visible"");
                })
                .on(""mousemove"", function (event) {
                    tooltip.style(""top"", (event.pageY - 10) + ""px"")
                           .style(""left"", (event.pageX + 10) + ""px"");
                })
                .on(""mouseout"", function () {
                    tooltip.style(""visibility"", ""hidden"");
                })
                .on(""click"", function (event, d) {
                    window.open(`https://www.google.com/search?q=${d['Education Level']} enrollment`, '_blank');
                });
        });
    </script>
</body>
</html>
```"
5,scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot with query widgets showing the Enrollment Number and Revenue of the given dataset. Add a slider to represent the Quarter.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,advanced view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot with D3</title>
    <style>
        .scatter {
            fill-opacity: 0.7;
            stroke: #333;
            stroke-width: 1px;
        }
        .axis {
            font: 10px sans-serif;
            fill: #333;
        }
    </style>
</head>
<body>
    <div>
        <label for=""quarterRange"">Quarter:</label>
        <input type=""range"" id=""quarterRange"" min=""1"" max=""4"" value=""1"">
    </div>
    <svg width=""800"" height=""600""></svg>

    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <script>
        const svg = d3.select(""svg"");
        const margin = {top: 20, right: 30, bottom: 40, left: 40},
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        const xAxis = d3.axisBottom(x);
        const yAxis = d3.axisLeft(y);

        const quarterSlider = d3.select(""#quarterRange"");

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            data.forEach(d => {
                d[""Enrollment Number""] = +d[""Enrollment Number""];
                d.Revenue = +d.Revenue;
                d.Quarter = +d.Quarter;
            });

            quarterSlider.on(""input"", function() {
                const selectedQuarter = +this.value;
                update(selectedQuarter);
            });

            function update(selectedQuarter) {
                const filteredData = data.filter(d => d.Quarter === selectedQuarter);

                x.domain([0, d3.max(filteredData, d => d[""Enrollment Number""])]);
                y.domain([0, d3.max(filteredData, d => d.Revenue)]);

                g.selectAll("".dot"").remove();
                g.selectAll("".dot"")
                    .data(filteredData)
                    .enter().append(""circle"")
                    .attr(""class"", ""dot"")
                    .attr(""cx"", d => x(d[""Enrollment Number""]))
                    .attr(""cy"", d => y(d.Revenue))
                    .attr(""r"", 5)
                    .attr(""fill"", ""blue"");

                g.selectAll("".axis"").remove();

                g.append(""g"")
                    .attr(""class"", ""axis axis--x"")
                    .attr(""transform"", `translate(0,${height})`)
                    .call(xAxis);

                g.append(""g"")
                    .attr(""class"", ""axis axis--y"")
                    .call(yAxis);
            }

            update(1); // Initial update for the first quarter
        });
    </script>
</body>
</html>
```"
6,scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot showing the Enrollment Number of Graduate. Add animated transitions that connect these points using lines in order.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,advanced view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter circle {
            fill: steelblue;
        }
        .line {
            fill: none;
            stroke: orange;
            stroke-width: 2;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = { top: 20, right: 30, bottom: 30, left: 40 };
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            data = data.filter(d => d[""Education Level""] === ""Graduate"")
                       .map(d => ({
                           Quarter: d.Quarter,
                           Enrollment: +d[""Enrollment Number""],
                           Revenue: +d.Revenue,
                           Operating_Costs: +d[""Operating Costs""],
                           Profit: +d.Profit,
                           Average_Tuition: +d[""Average Tuition""],
                           Number_of_Staff: +d[""Number of Staff""],
                           Graduation_Rate: +d[""Graduation Rate""]
                       }));

            const x = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.Enrollment)]).nice()
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.Graduation_Rate)]).nice()
                .range([height, 0]);

            g.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .call(d3.axisLeft(y));

            const line = d3.line()
                .x(d => x(d.Enrollment))
                .y(d => y(d.Graduation_Rate));

            g.append(""path"")
                .datum(data)
                .attr(""class"", ""line"")
                .attr(""d"", line);

            const circles = g.selectAll(""circle"")
                .data(data)
                .enter().append(""circle"")
                .attr(""cx"", d => x(d.Enrollment))
                .attr(""cy"", d => y(d.Graduation_Rate))
                .attr(""r"", 5);

            circles.transition()
                .duration(1000)
                .attr(""r"", 8)
                .transition()
                .duration(1000)
                .attr(""r"", 5);

            circles.on(""mouseover"", function(event, d) {
                d3.select(this).transition()
                    .duration(200)
                    .attr(""r"", 10)
                    .attr(""fill"", ""red"");
            }).on(""mouseout"", function(event, d) {
                d3.select(this).transition()
                    .duration(200)
                    .attr(""r"", 5)
                    .attr(""fill"", ""steelblue"");
            });

        });
    </script>
</body>
</html>
```"
7,line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Enrollment Number of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,advanced view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Number Line Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke-width: 2px;
        }
        .highlight {
            stroke-width: 4px;
        }
        .axis path,
        .axis line {
            fill: none;
            shape-rendering: crispEdges;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = { top: 20, right: 30, bottom: 30, left: 40 };
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            const allKeys = Array.from(new Set(data.map(d => d[""Education Level""])));
            const parseTime = d3.timeParse(""%Y-%m-%d"");
            const yAccessor = d => +d[""Enrollment Number""];

            data.forEach(d => {
                d[""Quarter""] = parseTime(d[""Quarter""]);
                d[""Enrollment Number""] = +d[""Enrollment Number""];
            });

            const x = d3.scaleTime()
                .domain(d3.extent(data, d => d[""Quarter""]))
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Enrollment Number""])])
                .range([height, 0]);

            const line = d3.line()
                .x(d => x(d[""Quarter""]))
                .y(d => y(d[""Enrollment Number""]));

            const color = d3.scaleOrdinal(d3.schemeCategory10)
                .domain(allKeys);

            const groups = g.selectAll("".line-group"")
                .data(allKeys)
                .enter().append(""g"")
                .attr(""class"", ""line-group"");

            groups.append(""path"")
                .attr(""class"", ""line"")
                .attr(""d"", d => line(data.filter(v => v[""Education Level""] === d)))
                .attr(""stroke"", d => color(d))
                .on(""mouseover"", function(event, d) {
                    d3.select(this).classed(""highlight"", true);
                })
                .on(""mouseout"", function(event, d) {
                    d3.select(this).classed(""highlight"", false);
                });

            g.append(""g"")
                .attr(""class"", ""axis axis-x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis-y"")
                .call(d3.axisLeft(y));

            g.append(""text"")
                .attr(""transform"", ""rotate(-90)"")
                .attr(""y"", 0 - margin.left)
                .attr(""x"", 0 - (height / 2))
                .attr(""dy"", ""1em"")
                .style(""text-anchor"", ""middle"")
                .text(""Enrollment Number"");

            g.append(""text"")
                .attr(""transform"", `translate(${width / 2} ,${height + margin.top})`)
                .style(""text-anchor"", ""middle"")
                .text(""Quarter"");
        });
    </script>
</body>
</html>
```"
8,bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,advanced view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }

        .bar:hover {
            fill: orange;
        }

        .axis--x path,
        .axis--x line,
        .axis--y path,
        .axis--y line {
            fill: none;
            shape-rendering: crispEdges;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>

    <script>
        const svg = d3.select(""svg""),
            margin = { top: 20, right: 30, bottom: 40, left: 40 },
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            data.forEach(d => {
                d[""Enrollment Number""] = +d[""Enrollment Number""];
                d[""Quarter""] = new Date(d[""Quarter""]);
            });
            
            const filteredData = data.filter(d => d[""Quarter""].getFullYear() === 2021 && d[""Quarter""].getMonth() === 3);

            const x = d3.scaleBand()
                .domain(filteredData.map(d => d[""Education Level""]))
                .range([0, width])
                .padding(0.1);
            
            const y = d3.scaleLinear()
                .domain([0, d3.max(filteredData, d => d[""Enrollment Number""])])
                .nice()
                .range([height, 0]);

            const xAxis = g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            const yAxis = g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            g.selectAll("".bar"")
                .data(filteredData)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => x(d[""Education Level""]))
                .attr(""y"", d => y(d[""Enrollment Number""]))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d[""Enrollment Number""]));

            svg.call(d3.zoom()
                .scaleExtent([0.5, 10])
                .on(""zoom"", (event) => {
                    g.attr(""transform"", event.transform);
                    g.select("".axis--x"").call(d3.axisBottom(x).scale(event.transform.rescaleX(x)));
                    g.select("".axis--y"").call(d3.axisLeft(y).scale(event.transform.rescaleY(y)));
                }));
        });
    </script>
</body>
</html>
```"
9,bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,advanced view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar { 
            fill: steelblue; 
            cursor: pointer; 
        }

        .bar:hover { 
            fill: orange; 
        }

        .axis--x path, .axis--x line {
            display: none;
        }

        .axis--y line {
            stroke: lightgray;
            opacity: 0.7;
        }

        .axis--y path {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            const filteredData = data.filter(d => d.Quarter === ""Q2-2021"");
            filteredData.forEach(d => {
                d[""Enrollment Number""] = +d[""Enrollment Number""];
            });

            const x = d3.scaleBand()
                .domain(filteredData.map(d => d[""Education Level""]))
                .range([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([0, d3.max(filteredData, d => d[""Enrollment Number""])])
                .nice()
                .range([height, 0]);

            g.append(""g"")
                .selectAll("".bar"")
                .data(filteredData)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => x(d[""Education Level""]))
                .attr(""y"", d => y(d[""Enrollment Number""]))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d[""Enrollment Number""]))
                .call(d3.drag()    
                    .on(""start drag"", (event, d) => {
                        const yPos = d3.pointer(event)[1];
                        const index = filteredData.indexOf(d);
                        const newIndex = Math.max(0, Math.min(filteredData.length - 1, Math.floor(yPos / (height / filteredData.length))));
                        if (newIndex !== index) {
                            filteredData.splice(index, 1);
                            filteredData.splice(newIndex, 0, d);
                            updateBars();
                        }
                    }));

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            function updateBars() {
                g.selectAll("".bar"")
                    .data(filteredData)
                    .transition().duration(100)
                    .attr(""x"", d => x(d[""Education Level""]))
                    .attr(""y"", d => y(d[""Enrollment Number""]))
                    .attr(""height"", d => height - y(d[""Enrollment Number""]));
            }
        });
    </script>
</body>
</html>
```"
10,bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Enrollment Number.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,advanced view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }

        .bar:hover {
            fill: orange;
        }

        .axis--x path,
        .axis--x line {
            display: none;
        }

        .dropdown {
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class=""dropdown"">
        <label for=""sortOrder"">Sort Order:</label>
        <select id=""sortOrder"">
            <option value=""ascending"">Ascending</option>
            <option value=""descending"">Descending</option>
        </select>
    </div>
    <svg width=""800"" height=""400""></svg>

    <script>
        const svg = d3.select(""svg""),
            margin = { top: 20, right: 30, bottom: 40, left: 40 },
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom;

        const x = d3.scaleBand().range([0, width]).padding(0.1),
            y = d3.scaleLinear().range([height, 0]);

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            data.forEach(d => {
                if (d['Quarter'] === 'Q2-2021') {
                    d['Enrollment Number'] = +d['Enrollment Number'];
                }
            });

            const updateChart = (order) => {
                const sortedData = order === 'ascending' ? 
                    data.filter(d => d['Quarter'] === 'Q2-2021').sort((a, b) => a['Enrollment Number'] - b['Enrollment Number']) :
                    data.filter(d => d['Quarter'] === 'Q2-2021').sort((a, b) => b['Enrollment Number'] - a['Enrollment Number']);
                
                x.domain(sortedData.map(d => d['Education Level']));
                y.domain([0, d3.max(sortedData, d => d['Enrollment Number'])]);

                g.selectAll("".bar"").remove();
                g.selectAll("".axis"").remove();

                g.selectAll("".bar"")
                    .data(sortedData)
                    .enter().append(""rect"")
                    .attr(""class"", ""bar"")
                    .attr(""x"", d => x(d['Education Level']))
                    .attr(""y"", d => y(d['Enrollment Number']))
                    .attr(""width"", x.bandwidth())
                    .attr(""height"", d => height - y(d['Enrollment Number']))
                    .transition()
                    .duration(800);

                g.append(""g"")
                    .attr(""class"", ""axis axis--x"")
                    .attr(""transform"", `translate(0,${height})`)
                    .call(d3.axisBottom(x));

                g.append(""g"")
                    .attr(""class"", ""axis axis--y"")
                    .call(d3.axisLeft(y));
            };

            updateChart('ascending');

            d3.select(""#sortOrder"").on(""change"", function() {
                const selectedValue = this.value;
                updateChart(selectedValue);
            });
        });
    </script>
</body>
</html>
```"
