Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Visitors and Page Views, and a Bar Chart on the right that displays Traffic Source versus Visitors.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Traffic Visualization</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatterplot {
            display: inline-block;
            width: 50%;
            height: 400px;
        }

        .barchart {
            display: inline-block;
            width: 50%;
            height: 400px;
        }
    </style>
</head>
<body>
    <div class=""scatterplot"" id=""scatterplot""></div>
    <div class=""barchart"" id=""barchart""></div>
    <script>
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(function(data) {
            // Parse numerical values
            data.forEach(d => {
                d.Visitors = +d.Visitors;
                d['Page Views'] = +d['Page Views'];
            });

            // Scatterplot
            const scatterWidth = 400, scatterHeight = 400;

            const scatterSvg = d3.select(""#scatterplot"")
                .append(""svg"")
                .attr(""width"", scatterWidth)
                .attr(""height"", scatterHeight);

            const xScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.Visitors)])
                .range([0, scatterWidth]);

            const yScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Page Views'])])
                .range([scatterHeight, 0]);

            scatterSvg.selectAll(""circle"")
                .data(data)
                .enter()
                .append(""circle"")
                .attr(""cx"", d => xScale(d.Visitors))
                .attr(""cy"", d => yScale(d['Page Views']))
                .attr(""r"", 5)
                .attr(""fill"", ""blue"");

            scatterSvg.append(""g"")
                .attr(""transform"", `translate(0, ${scatterHeight})`)
                .call(d3.axisBottom(xScale));

            scatterSvg.append(""g"")
                .call(d3.axisLeft(yScale));

            // Bar Chart
            const barWidth = 500, barHeight = 400;

            const barSvg = d3.select(""#barchart"")
                .append(""svg"")
                .attr(""width"", barWidth)
                .attr(""height"", barHeight);

            const trafficSources = d3.group(data, d => d['Traffic Source']);
            const visitorsData = Array.from(trafficSources, ([key, values]) => ({
                source: key,
                visitors: d3.sum(values, d => d.Visitors)
            }));

            const yBarScale = d3.scaleBand()
                .domain(visitorsData.map(d => d.source))
                .range([0, barHeight])
                .padding(0.1);

            const xBarScale = d3.scaleLinear()
                .domain([0, d3.max(visitorsData, d => d.visitors)])
                .range([0, barWidth]);

            barSvg.selectAll(""rect"")
                .data(visitorsData)
                .enter()
                .append(""rect"")
                .attr(""x"", 0)
                .attr(""y"", d => yBarScale(d.source))
                .attr(""width"", d => xBarScale(d.visitors))
                .attr(""height"", yBarScale.bandwidth())
                .attr(""fill"", ""orange"");

            barSvg.append(""g"")
                .attr(""transform"", `translate(0, ${barHeight})`)
                .call(d3.axisBottom(xBarScale));

            barSvg.append(""g"")
                .call(d3.axisLeft(yBarScale));
        });
    </script>
</body>
</html>
```"
2,scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Visitors and Page Views, and a Bar Chart on the right that displays Traffic Source versus Visitors. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Interactive Visualizations</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .scatterplot {
            float: left;
            margin-right: 50px;
        }
        .barchart {
            float: left;
        }
        .highlight {
            fill: orange;
        }
        .bar:hover {
            fill: steelblue;
        }
        .scatter-point:hover {
            fill: red;
        }
    </style>
</head>
<body>
    <div class=""scatterplot"" id=""scatterplot""></div>
    <div class=""barchart"" id=""barchart""></div>
    
    <script>
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
            data.forEach(d => {
                d.Visitors = +d.Visitors;
                d['Page Views'] = +d['Page Views'];
            });

            const width = 400, height = 300;
            const margin = {top: 20, right: 30, bottom: 40, left: 50};

            const xScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.Visitors)])
                .range([margin.left, width - margin.right]);

            const yScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Page Views'])])
                .range([height - margin.bottom, margin.top]);

            const scatterplot = d3.select(""#scatterplot"")
                .append(""svg"")
                .attr(""width"", width)
                .attr(""height"", height);

            scatterplot.selectAll(""circle"")
                .data(data)
                .enter()
                .append(""circle"")
                .attr(""class"", ""scatter-point"")
                .attr(""cx"", d => xScale(d.Visitors))
                .attr(""cy"", d => yScale(d['Page Views']))
                .attr(""r"", 5)
                .on(""mouseover"", function() { d3.select(this).classed(""scatter-point"", false).classed(""highlight"", true); })
                .on(""mouseout"", function() { d3.select(this).classed(""highlight"", false).classed(""scatter-point"", true); })

            const xAxis = d3.axisBottom(xScale);
            const yAxis = d3.axisLeft(yScale);
            
            scatterplot.append(""g"")
                .attr(""transform"", `translate(0,${height - margin.bottom})`)
                .call(xAxis);
            scatterplot.append(""g"")
                .attr(""transform"", `translate(${margin.left},0)`)
                .call(yAxis);

            const barchartWidth = 400, barchartHeight = 300;

            const xBarScale = d3.scaleBand()
                .domain(data.map(d => d['Traffic Source']))
                .range([margin.left, barchartWidth - margin.right])
                .padding(0.1);

            const yBarScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.Visitors)])
                .range([barchartHeight - margin.bottom, margin.top]);

            const barchart = d3.select(""#barchart"")
                .append(""svg"")
                .attr(""width"", barchartWidth)
                .attr(""height"", barchartHeight);
            
            barchart.selectAll(""rect"")
                .data(data)
                .enter()
                .append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => xBarScale(d['Traffic Source']))
                .attr(""y"", d => yBarScale(d.Visitors))
                .attr(""height"", d => barchartHeight - margin.bottom - yBarScale(d.Visitors))
                .attr(""width"", xBarScale.bandwidth());

            const barAxisX = d3.axisBottom(xBarScale);
            const barAxisY = d3.axisLeft(yBarScale);

            barchart.append(""g"")
                .attr(""transform"", `translate(0,${barchartHeight - margin.bottom})`)
                .call(barAxisX);
            barchart.append(""g"")
                .attr(""transform"", `translate(${margin.left},0)`)
                .call(barAxisY);

            scatterplot.append(""rect"")
                .attr(""width"", width)
                .attr(""height"", height)
                .style(""fill"", ""none"")
                .style(""pointer-events"", ""all"")
                .on(""mousedown"", brushStart)
                .on(""mouseup"", brushEnd);
            
            let brushSelection = null;
            
            function brushStart(event) {
                brushSelection = {};
                const coords = d3.pointer(event);
                brushSelection.x0 = coords[0];
                brushSelection.y0 = coords[1];
            }

            function brushEnd(event) {
                const coords = d3.pointer(event);
                const x1 = Math.min(coords[0], brushSelection.x0);
                const x0 = Math.max(coords[0], brushSelection.x0);
                const y1 = Math.max(coords[1], brushSelection.y0);
                const y0 = Math.min(coords[1], brushSelection.y0);

                const selectedPoints = [];
                scatterplot.selectAll(""circle"").each(function(d) {
                    const cx = xScale(d.Visitors), cy = yScale(d['Page Views']);
                    if (cx >= x0 && cx <= x1 && cy >= y0 && cy <= y1) {
                        selectedPoints.push(d['Traffic Source']);
                    }
                });

                barchart.selectAll(""rect"").classed(""highlight"", false);
                barchart.selectAll(""rect"")
                    .filter(d => selectedPoints.includes(d['Traffic Source']))
                    .classed(""highlight"", true);
            }
        });
    </script>
</body>
</html>
```"
3,line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Visitors , while the pie chart represents the distribution of Page Views.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Website Traffic Analysis</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line-chart {
            width: 100%;
            height: 400px;
        }
        .pie-chart {
            width: 100%;
            height: 400px;
        }
    </style>
</head>
<body>
    <div class=""line-chart"" id=""lineChart""></div>
    <div class=""pie-chart"" id=""pieChart""></div>

    <script>
        const margin = {top: 20, right: 30, bottom: 30, left: 40},
            width = 800 - margin.left - margin.right,
            height = 400 - margin.top - margin.bottom;

        const svgLine = d3.select(""#lineChart"").append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const svgPie = d3.select(""#pieChart"").append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${width / 2 + margin.left},${height / 2 + margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
            data.forEach(d => {
                d.Visitors = +d[""Visitors""];
                d[""Page Views""] = +d[""Page Views""];
            });

            // Line Chart for Visitors
            const x = d3.scaleBand()
                .domain(data.map(d => d.Week))
                .range([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.Visitors)])
                .nice()
                .range([height, 0]);

            svgLine.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svgLine.append(""g"")
                .call(d3.axisLeft(y));

            svgLine.selectAll("".bar"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => x(d.Week))
                .attr(""y"", d => y(d.Visitors))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d.Visitors))
                .attr(""fill"", ""steelblue"");

            // Pie Chart for Page Views Distribution
            const pieData = d3.rollup(data, v => d3.sum(v, d => d[""Page Views""]), d => d[""Traffic Source""]);
            const pie = d3.pie().value(d => d[1]);
            const arc = d3.arc().innerRadius(0).outerRadius(Math.min(width, height) / 2);

            const pieChartData = pie(Array.from(pieData));

            svgPie.selectAll(""path"")
                .data(pieChartData)
                .enter().append(""path"")
                .attr(""d"", arc)
                .attr(""fill"", (d, i) => d3.schemeCategory10[i])
                .attr(""transform"", `translate(${width / 2},${height / 2})`);
        });
    </script>
</body>
</html>
```"
4,line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Visitors , while the pie chart represents the distribution of Page Views. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Page Views for the selected group.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Website Traffic Visualization</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .chart {
            margin: 20px;
        }
    </style>
</head>
<body>
    <div id=""line-chart"" class=""chart""></div>
    <div id=""pie-chart"" class=""chart""></div>

    <script>
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(function(data) {
            data.forEach(function(d) {
                d.Visitors = +d.Visitors;
                d['Page Views'] = +d['Page Views'];
            });

            const margin = { top: 20, right: 30, bottom: 30, left: 40 },
                  width = 460 - margin.left - margin.right,
                  height = 400 - margin.top - margin.bottom;

            const x = d3.scalePoint()
                .domain(data.map(d => d.Week))
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.Visitors)])
                .range([height, 0]);

            const line = d3.line()
                .x(d => x(d.Week))
                .y(d => y(d.Visitors));

            const svgLine = d3.select(""#line-chart"")
                .append(""svg"")
                .attr(""width"", width + margin.left + margin.right)
                .attr(""height"", height + margin.top + margin.bottom)
                .append(""g"")
                .attr(""transform"", `translate(${margin.left},${margin.top})`);

            svgLine.append(""path"")
                .datum(data)
                .attr(""fill"", ""none"")
                .attr(""stroke"", ""steelblue"")
                .attr(""stroke-width"", 1.5)
                .attr(""d"", line);

            svgLine.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svgLine.append(""g"")
                .call(d3.axisLeft(y));

            let selectedData = data;

            svgLine.selectAll("".dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => x(d.Week))
                .attr(""cy"", d => y(d.Visitors))
                .attr(""r"", 5)
                .on(""click"", function(event, d) {
                    selectedData = d3.selectAll("".dot"").filter(d => d.Week === d.Week)._groups[0].map(e => data[e.__data__.index]);
                    updatePieChart(selectedData, d3.select(this).attr('class'));
                });

            function updatePieChart(dataToUse) {
                const pieData = d3.nest()
                    .key(d => d['Page Views'])
                    .rollup(v => v.length)
                    .entries(dataToUse);

                const radius = Math.min(width, height) / 2;

                const color = d3.scaleOrdinal(d3.schemeCategory10);

                const pie = d3.pie()
                    .value(d => d.value);

                const arc = d3.arc()
                    .innerRadius(0)
                    .outerRadius(radius);

                d3.select(""#pie-chart"").select(""svg"").remove();

                const svgPie = d3.select(""#pie-chart"")
                    .append(""svg"")
                    .attr(""width"", width)
                    .attr(""height"", height)
                  .append(""g"")
                    .attr(""transform"", `translate(${width / 2},${height / 2})`);

                const arcs = svgPie.selectAll("".arc"")
                    .data(pie(pieData))
                    .enter().append(""g"")
                    .attr(""class"", ""arc"");

                arcs.append(""path"")
                    .attr(""d"", arc)
                    .attr(""fill"", d => color(d.data.key));

                arcs.append(""text"")
                    .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                    .attr(""dy"", "".35em"")
                    .text(d => d.data.key);
            }

            updatePieChart(data);
        });
    </script>
</body>
</html>
```"
5,scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Visitors, Page Views, and Bounce Rate. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot Matrix</title>
    <style>
        .scatterplot {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
        }
        .cell {
            border: 1px solid #ccc;
            position: relative;
        }
        .brush .selection {
            fill: rgba(0, 0, 255, 0.3);
            stroke: #000;
            stroke-width: 1.5px;
        }
        .highlight {
            fill: orange;
        }
    </style>
</head>
<body>
    <div class=""scatterplot"" id=""scatterplot""></div>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <script>
        const width = 150, height = 150;

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
            data.forEach(d => {
                d.Visitors = +d.Visitors;
                d['Page Views'] = +d['Page Views'];
                d['Bounce Rate'] = +d['Bounce Rate'];
            });

            const xValue = (d, i) => d[i];
            const yValue = (d, i) => d[i + 3];
            const dimensions = ['Visitors', 'Page Views', 'Bounce Rate'];

            const pairwise = dimensions.map((d1, i) =>
                dimensions.map((d2, j) => (i === j) ? undefined : {x: d1, y: d2})
            ).flat().filter(d => d);

            const scatterplot = d3.select(""#scatterplot"");

            const brush = d3.brush().on(""end"", brushed);

            pairwise.forEach(({x, y}) => {
                const cell = scatterplot.append(""svg"")
                    .attr(""class"", ""cell"")
                    .attr(""width"", width)
                    .attr(""height"", height);

                const xScale = d3.scaleLinear()
                    .domain(d3.extent(data, d => d[xValue(d, dimensions.indexOf(x))]))
                    .range([0, width]);

                const yScale = d3.scaleLinear()
                    .domain(d3.extent(data, d => d[yValue(d, dimensions.indexOf(y))]))
                    .range([height, 0]);

                cell.append(""g"")
                    .selectAll(""circle"")
                    .data(data)
                    .enter()
                    .append(""circle"")
                    .attr(""cx"", d => xScale(xValue(d, dimensions.indexOf(x))))
                    .attr(""cy"", d => yScale(yValue(d, dimensions.indexOf(y))))
                    .attr(""r"", 3)
                    .attr(""fill"", ""black"");

                cell.append(""g"")
                    .attr(""class"", ""brush"")
                    .attr(""transform"", `translate(0,0)`)
                    .call(brush);
            });

            function brushed(event) {
                const selection = d3.event.selection;
                if (!selection) return;
                const [[x0, y0], [x1, y1]] = selection;

                d3.selectAll(""circle"").classed(""highlight"", d => {
                    const xSelected = xValue(d, dimensions.indexOf(selection[0]));
                    const ySelected = yValue(d, dimensions.indexOf(selection[1]));
                    return xSelected >= x0 && xSelected <= x1 && ySelected >= y0 && ySelected <= y1;
                });
            }
        });
    </script>
</body>
</html>
```"
6,scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a brushable Scatterplot that visualizes the relationship between Visitors and Page Views. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Brushable Scatterplot</title>
    <style>
        body { font-family: Arial, sans-serif; }
        .scatter { display: inline-block; }
        .table-container { display: inline-block; margin-left: 20px; vertical-align: top;}
        .scatter circle { fill: steelblue; stroke: white; stroke-width: 1.5px; cursor: pointer; }
    </style>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
</head>
<body>

<div class=""scatter""></div>
<div class=""table-container"">
    <table id=""info-table"" border=""1"">
        <thead>
            <tr>
                <th>Week</th>
                <th>Traffic Source</th>
                <th>Visitors</th>
                <th>Page Views</th>
                <th>Bounce Rate</th>
                <th>Avg Session Duration</th>
                <th>Conversion Rate</th>
                <th>Region</th>
                <th>Device Type</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
</div>

<script>
const margin = {top: 20, right: 20, bottom: 30, left: 40};
const width = 800 - margin.left - margin.right;
const height = 500 - margin.top - margin.bottom;

const svg = d3.select("".scatter"").append(""svg"")
    .attr(""width"", width + margin.left + margin.right)
    .attr(""height"", height + margin.top + margin.bottom)
  .append(""g"")
    .attr(""transform"", `translate(${margin.left},${margin.top})`);

const x = d3.scaleLinear().range([0, width]);
const y = d3.scaleLinear().range([height, 0]);

const brush = d3.brush()
    .extent([[0, 0], [width, height]])
    .on(""brush end"", brushed);

d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
    data.forEach(d => {
        d.Visitors = +d[""Visitors""];
        d[""Page Views""] = +d[""Page Views""];
    });

    x.domain(d3.extent(data, d => d.Visitors)).nice();
    y.domain(d3.extent(data, d => d[""Page Views""])).nice();

    svg.append(""g"")
        .attr(""class"", ""x-axis"")
        .attr(""transform"", `translate(0,${height})`)
        .call(d3.axisBottom(x));

    svg.append(""g"")
        .attr(""class"", ""y-axis"")
        .call(d3.axisLeft(y));

    svg.append(""g"")
        .attr(""class"", ""brush"")
        .call(brush);
    
    const circles = svg.selectAll(""circle"")
        .data(data)
      .enter().append(""circle"")
        .attr(""cx"", d => x(d.Visitors))
        .attr(""cy"", d => y(d[""Page Views""]))
        .attr(""r"", 5)
        .on(""mouseover"", function(event, d) {
            d3.select(this).transition().duration(200).attr(""r"", 10);
        })
        .on(""mouseout"", function(event, d) {
            d3.select(this).transition().duration(200).attr(""r"", 5);
        });

    function brushed(event) {
        const extent = d3.brushSelection(event.target);
        const selectedData = data.filter(d => {
            const cx = x(d.Visitors), cy = y(d[""Page Views""]);
            return extent[0][0] <= cx && cx <= extent[1][0]
                && extent[0][1] <= cy && cy <= extent[1][1];
        });

        updateTable(selectedData);
    }

    function updateTable(selectedData) {
        const tbody = d3.select(""#info-table tbody"");
        tbody.selectAll(""tr"").remove();
        selectedData.slice(0, 20).forEach(d => {
            const row = tbody.append(""tr"");
            row.selectAll(""td"")
                .data([d.Week, d[""Traffic Source""], d.Visitors, d[""Page Views""], d[""Bounce Rate""], d[""Average Session Duration""], d[""Conversion Rate""], d.Region, d[""Device Type""]])
              .enter().append(""td"")
                .text(d => d);
        });
    }
});
</script>

</body>
</html>
```"
7,bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a horizontal Bar Chart that shows all the data concerning Visitors, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>D3 Horizontal Bar Chart with Minimap</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .x.axis path, .x.axis line {
            fill: none;
            shape-rendering: crispEdges;
        }
        .x.axis text {
            font-size: 12px;
        }
        .minimap {
            fill-opacity: 0.5;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = {top: 20, right: 40, bottom: 30, left: 100};
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
            data.forEach(d => {
                d.Visitors = +d[""Visitors""];
            });

            const x = d3.scaleLinear()
                .range([0, width])
                .domain([0, d3.max(data, d => d.Visitors)]);

            const y = d3.scaleBand()
                .range([0, height])
                .padding(0.1)
                .domain(data.map(d => d[""Traffic Source""]));

            g.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""y axis"")
                .call(d3.axisLeft(y));

            g.selectAll("".bar"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", 0)
                .attr(""y"", d => y(d[""Traffic Source""]))
                .attr(""width"", d => x(d.Visitors))
                .attr(""height"", y.bandwidth());

            // Minimap
            const minimapHeight = 100;
            const minimapWidth = 250;
            const minimapX = width + margin.right - minimapWidth;
            const minimapY = height - minimapHeight;

            const minimapG = svg.append(""g"")
                .attr(""transform"", `translate(${minimapX},${minimapY})`);

            const minimapXScale = d3.scaleLinear()
                .range([0, minimapWidth])
                .domain([0, d3.max(data, d => d.Visitors)]);

            const minimapYScale = d3.scaleBand()
                .range([0, minimapHeight])
                .padding(0.1)
                .domain(data.map(d => d[""Traffic Source""]));

            minimapG.selectAll("".minimap"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""minimap"")
                .attr(""x"", 0)
                .attr(""y"", d => minimapYScale(d[""Traffic Source""]))
                .attr(""width"", d => minimapXScale(d.Visitors))
                .attr(""height"", minimapYScale.bandwidth());
        });
    </script>
</body>
</html>
```"
