Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Visualization</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.2.2/echarts.min.js""></script>
</head>
<body>
    <div id=""scatterPlot"" style=""width: 50%; height: 400px; float: left;""></div>
    <div id=""barChart"" style=""width: 50%; height: 400px; float: right;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const scatterData = [];
                const barData = {};
                const cropTypes = new Set();

                rows.forEach(row => {
                    const cols = row.split(',');
                    const year = cols[0];
                    const cropType = cols[1];
                    const unitsProduced = parseFloat(cols[2]);
                    const revenue = parseFloat(cols[3]);
                    const productionCost = parseFloat(cols[4]);
                    const profit = parseFloat(cols[5]);
                    const yieldValue = parseFloat(cols[6]);
                    const numberOfFarms = parseFloat(cols[7]);
                    const exportVolume = parseFloat(cols[8]);

                    scatterData.push({
                        name: cropType,
                        value: [unitsProduced, profit]
                    });

                    if (!barData[cropType]) {
                        barData[cropType] = {
                            revenue: 0,
                            productionCost: 0,
                            profit: 0
                        };
                    }
                    barData[cropType].revenue += revenue;
                    barData[cropType].productionCost += productionCost;
                    barData[cropType].profit += profit;
                    cropTypes.add(cropType);
                });

                const barChartData = Array.from(cropTypes).map(type => ({
                    name: type,
                    value: barData[type].profit
                }));

                const scatterChart = echarts.init(document.getElementById('scatterPlot'));
                scatterChart.setOption({
                    title: {
                        text: 'Scatter Plot of Units Produced vs Profit',
                    },
                    tooltip: {},
                    xAxis: {
                        name: 'Units Produced'
                    },
                    yAxis: {
                        name: 'Profit'
                    },
                    series: [{
                        type: 'scatter',
                        data: scatterData,
                        symbolSize: 10,
                        itemStyle: {
                            emphasis: {
                                borderColor: 'black',
                                borderWidth: 1,
                                shadowBlur: 10,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }]
                });

                const barChart = echarts.init(document.getElementById('barChart'));
                barChart.setOption({
                    title: {
                        text: 'Bar Chart of Profit by Crop Type',
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: barChartData.map(item => item.name)
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        name: 'Profit',
                        type: 'bar',
                        data: barChartData.map(item => item.value),
                        itemStyle: {
                            color: '#40a9ff'
                        }
                    }]
                });
            });
    </script>
</body>
</html>
```"
2,scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Visualization</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.0.0/echarts.min.js""></script>
</head>
<body>
    <div id=""scatterChart"" style=""width: 50%; height: 400px; float: left;""></div>
    <div id=""barChart"" style=""width: 50%; height: 400px; float: right;""></div>

    <script>
        const url = 'https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv';

        fetch(url)
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const processedData = rows.map(row => {
                    const cols = row.split(',');
                    return {
                        Year: cols[0],
                        CropType: cols[1],
                        UnitsProduced: +cols[2],
                        Revenue: +cols[3],
                        ProductionCost: +cols[4],
                        Profit: +cols[5],
                        Yield: +cols[6],
                        NumberOfFarms: +cols[7],
                        ExportVolume: +cols[8]
                    };
                }).filter(item => !isNaN(item.UnitsProduced));

                const scatterData = processedData.map(item => [item.UnitsProduced, item.ProductionCost]);
                const barData = processedData.map(item => item.CropType);
                const barValues = processedData.map(item => item.Profit);
                
                // Scatterplot
                const scatterChart = echarts.init(document.getElementById('scatterChart'));
                scatterChart.setOption({
                    tooltip: {},
                    xAxis: {
                        type: 'value',
                        name: 'Units Produced'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Production Cost'
                    },
                    series: [{
                        type: 'scatter',
                        data: scatterData,
                        itemStyle: {
                            normal: {
                                opacity: 0.8
                            }
                        }
                    }]
                });

                // Bar chart
                const barChart = echarts.init(document.getElementById('barChart'));
                barChart.setOption({
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: barData,
                        axisLabel: { rotate: 45 }
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Profit'
                    },
                    series: [{
                        type: 'bar',
                        data: barValues
                    }]
                });

                // Brush and linking functionality
                scatterChart.on('select', function (params) {
                    const selectedData = params.batch[0].selected;
                    const selectedCropTypes = selectedData.map(item => barData[item.dataIndex]);
                    const highlightedValues = barValues.map((val, index) => selectedCropTypes.includes(barData[index]) ? {value: val, itemStyle: {color: 'red'}} : {value: val});
                    
                    barChart.setOption({
                        series: [{
                            type: 'bar',
                            data: highlightedValues
                        }]
                    });
                });
            });
    </script>
</body>
</html>
```"
3,line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Produced , while the pie chart represents the distribution of Revenue.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #lineChart, #pieChart {
            width: 100%;
            height: 400px;
        }
    </style>
</head>
<body>
    <div id=""lineChart""></div>
    <div id=""pieChart""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const years = [...new Set(csvData.map(row => row[0]))];
                const unitsProduced = years.map(year => {
                    return csvData
                        .filter(row => row[0] === year)
                        .reduce((sum, row) => sum + parseFloat(row[2]), 0);
                });

                const revenueData = {};
                csvData.forEach(row => {
                    const cropType = row[1];
                    const revenue = parseFloat(row[3]);
                    revenueData[cropType] = (revenueData[cropType] || 0) + revenue;
                });
                
                const pieData = Object.entries(revenueData).map(([key, value]) => ({ name: key, value }));

                const lineChart = echarts.init(document.getElementById('lineChart'));
                lineChart.setOption({
                    title: { text: 'Trend of Units Produced' },
                    xAxis: { type: 'category', data: years },
                    yAxis: { type: 'value' },
                    series: [{
                        data: unitsProduced,
                        type: 'line',
                        smooth: true
                    }]
                });

                const pieChart = echarts.init(document.getElementById('pieChart'));
                pieChart.setOption({
                    title: { text: 'Distribution of Revenue', left: 'center' },
                    tooltip: { trigger: 'item' },
                    series: [{
                        type: 'pie',
                        radius: '50%',
                        data: pieData,
                        emphasis: {
                            itemStyle: { 
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }]
                });
            });
    </script>
</body>
</html>
```"
4,line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Produced , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            display: flex;
            flex-direction: column;
            height: 100vh;
        }
        #lineChart, #pieChart {
            flex: 1;
        }
    </style>
</head>
<body>
    <div id=""main"">
        <div id=""lineChart""></div>
        <div id=""pieChart""></div>
    </div>
    <script>
        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv');
            const data = await response.text();
            const rows = data.split('\n').slice(1).map(row => row.split(','));
            return rows.map(row => ({
                Year: row[0],
                CropType: row[1],
                UnitsProduced: Number(row[2]),
                Revenue: Number(row[3]),
                ProductionCost: Number(row[4]),
                Profit: Number(row[5]),
                Yield: Number(row[6]),
                NumberOfFarms: Number(row[7]),
                ExportVolume: Number(row[8])
            }));
        }

        function drawLineChart(data) {
            const chartDom = document.getElementById('lineChart');
            const myChart = echarts.init(chartDom);
            const option = {
                title: {
                    text: 'Trend of Units Produced Over Years'
                },
                xAxis: {
                    type: 'category',
                    data: [...new Set(data.map(item => item.Year))]
                },
                yAxis: {
                    type: 'value'
                },
                series: [{
                    data: data.map(item => item.UnitsProduced),
                    type: 'line',
                    smooth: true,
                    itemStyle: { color: 'blue' },
                }],
                toolbox: {
                    feature: {
                        myTool: {
                            show: true,
                            title: 'Select',
                            icon: 'path://M 10 10 L 20 20 M 20 10 L 10 20',
                            onclick: function () { myChart.dispatchAction({type: 'dataZoom', start: 0, end: 100}); }
                        }
                    }
                }
            };
            myChart.setOption(option);
            return myChart;
        }

        function drawPieChart(data) {
            const chartDom = document.getElementById('pieChart');
            const myChart = echarts.init(chartDom);
            const revenueMap = new Map();

            data.forEach(item => {
                if (revenueMap.has(item.CropType)) {
                    revenueMap.set(item.CropType, revenueMap.get(item.CropType) + item.Revenue);
                } else {
                    revenueMap.set(item.CropType, item.Revenue);
                }
            });

            const pieData = Array.from(revenueMap, ([name, value]) => ({ name, value }));

            const option = {
                title: {
                    text: 'Distribution of Revenue by Crop Type',
                    left: 'center'
                },
                series: [{
                    type: 'pie',
                    radius: '50%',
                    data: pieData,
                    emphasis: {
                        itemStyle: {
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowColor: 'rgba(0, 0, 0, 0.5)'
                        }
                    }
                }]
            };
            myChart.setOption(option);
            return myChart;
        }

        async function init() {
            const data = await fetchData();
            const lineChart = drawLineChart(data);
            const pieChart = drawPieChart(data);

            lineChart.on('click', function(params) {
                const selectedYears = params.name;
                const filteredData = data.filter(item => item.Year === selectedYears);
                drawPieChart(filteredData);
            });
        }

        init();
    </script>
</body>
</html>
```"
5,scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Units Produced, Revenue, Profit, Production Cost, Yield, and Export Volume. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        .scatterplot {
            display: flex;
            flex-wrap: wrap;
            width: 800px;
            height: 800px;
        }
        .scatterplot div {
            width: 400px;
            height: 400px;
        }
    </style>
</head>
<body>
    <div id=""scatterplot"" class=""scatterplot""></div>
    <script>
        async function loadData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv');
            const dataText = await response.text();
            const rows = dataText.split('\n').slice(1).map(row => row.split(','));
            const data = rows.map(row => ({
                Year: row[0],
                CropType: row[1],
                UnitsProduced: +row[2],
                Revenue: +row[3],
                ProductionCost: +row[4],
                Profit: +row[5],
                Yield: +row[6],
                NumberOfFarms: +row[7],
                ExportVolume: +row[8]
            })).filter(d => !isNaN(d.UnitsProduced));

            return data;
        }

        function createScatterPlot(data, xField, yField, id) {
            const chartDom = document.getElementById(id);
            const myChart = echarts.init(chartDom);
            const option = {
                xAxis: { type: 'value', name: xField },
                yAxis: { type: 'value', name: yField },
                series: [{
                    type: 'scatter',
                    symbolSize: 10,
                    data: data.map(d => [d[xField], d[yField]]),
                    itemStyle: {
                        opacity: 0.5
                    }
                }],
                tooltip: {},
            };
            myChart.setOption(option);
            return myChart;
        }

        function highlightSelectedPoints(selected, charts) {
            charts.forEach(chart => {
                const option = chart.getOption();
                option.series[0].itemStyle.opacity = selected.includes(option.series[0].data.indexOf(dataPoint)) ? 1 : 0.5;
                chart.setOption(option);
            });
        }

        async function main() {
            const data = await loadData();
            const fields = ['UnitsProduced', 'Revenue', 'Profit', 'ProductionCost', 'Yield', 'ExportVolume'];
            const charts = fields.map((field, idx) => createScatterPlot(data, fields[idx], fields[(idx + 1) % fields.length], `scatter${idx}`));

            const brush = echarts.init(document.getElementById('scatterplot'));
            brush.on('brushSelected', (params) => {
                const selectedDataIndex = new Set(); 
                params.batch.forEach(batch => {
                    batch.selected.forEach(selected => {
                        selectedDataIndex.add(selected.dataIndex);
                    });
                });
                highlightSelectedPoints(Array.from(selectedDataIndex), charts);
            });
        }
        
        main();
    </script>
</body>
</html>
```"
6,scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a brushable Scatterplot that visualizes the relationship between Units Produced and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 70%;
            height: 400px;
            float: left;
        }
        #table {
            width: 28%;
            height: 400px;
            float: right;
            overflow-y: scroll;
            border: 1px solid #ccc;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <div id=""table"">
        <table>
            <thead>
                <tr>
                    <th>Year</th>
                    <th>Crop Type</th>
                    <th>Units Produced</th>
                    <th>Revenue</th>
                </tr>
            </thead>
            <tbody id=""table-body""></tbody>
        </table>
    </div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(csvText => {
                const data = csvText.split('\n').slice(1).map(row => row.split(',')).map(cols => ({
                    Year: cols[0],
                    CropType: cols[1],
                    UnitsProduced: +cols[2],
                    Revenue: +cols[3],
                    ProductionCost: +cols[4],
                    Profit: +cols[5],
                    Yield: +cols[6],
                    NumberOfFarms: +cols[7],
                    ExportVolume: +cols[8],
                })).filter(item => !isNaN(item.UnitsProduced) && !isNaN(item.Revenue));

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);
                
                const option = {
                    title: {
                        text: 'Units Produced vs Revenue'
                    },
                    tooltip: {},
                    xAxis: {
                        name: 'Units Produced',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Revenue',
                        type: 'value'
                    },
                    series: [{
                        type: 'scatter',
                        data: data.map(item => [item.UnitsProduced, item.Revenue]),
                        itemStyle: {
                            color: '#7b92f6'
                        }
                    }],
                    brush: {
                        type: ['rect'],
                    }
                };

                myChart.setOption(option);

                myChart.on('brushEnd', params => {
                    const selectedPoints = params.batch[0].areas[0].brushInfo;
                    const selectedData = data.filter((item, index) => selectedPoints.some(point => {
                        const x = item.UnitsProduced;
                        const y = item.Revenue;
                        return point.range[0][0] <= x && x <= point.range[1][0] && point.range[0][1] <= y && y <= point.range[1][1];
                    }));
                    
                    const tbody = document.getElementById('table-body');
                    tbody.innerHTML = '';
                    selectedData.slice(0, 20).forEach(item => {
                        const row = `<tr>
                            <td>${item.Year}</td>
                            <td>${item.CropType}</td>
                            <td>${item.UnitsProduced}</td>
                            <td>${item.Revenue}</td>
                        </tr>`;
                        tbody.innerHTML += row;
                    });
                });
            });
    </script>
</body>
</html>
```"
7,bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a horizontal Bar Chart that shows Crop Type and Units Produced, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 70%;
            height: 400px;
            float: left;
        }
        #minimap {
            width: 28%;
            height: 100px;
            float: right;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <div id=""minimap""></div>
    
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const chartData = rows.map(row => {
                    const cols = row.split(',');
                    return {
                        cropType: cols[1],
                        unitsProduced: parseFloat(cols[2])
                    };
                }).filter(item => !isNaN(item.unitsProduced));

                const crops = chartData.map(item => item.cropType);
                const units = chartData.map(item => item.unitsProduced);

                const mainChart = echarts.init(document.getElementById('main'));
                const minimapChart = echarts.init(document.getElementById('minimap'));

                mainChart.setOption({
                    title: { text: 'Crop Type vs Units Produced' },
                    tooltip: {},
                    xAxis: {
                        type: 'value',
                        name: 'Units Produced',
                        splitLine: { show: false }
                    },
                    yAxis: {
                        type: 'category',
                        data: crops
                    },
                    series: [{
                        type: 'bar',
                        data: units
                    }]
                });

                minimapChart.setOption({
                    title: { text: 'Minimap - Units Produced Overview' },
                    tooltip: {},
                    xAxis: {
                        type: 'value',
                        name: 'Units Produced',
                        splitLine: { show: false }
                    },
                    yAxis: {
                        type: 'category',
                        data: crops
                    },
                    series: [{
                        type: 'bar',
                        data: units
                    }],
                    dataZoom: [{
                        type: 'inside'
                    }]
                });
            });
    </script>
</body>
</html>
```"
