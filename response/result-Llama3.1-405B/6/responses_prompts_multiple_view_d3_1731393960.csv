Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Energy Consumed and Cost, and a Bar Chart on the right that displays Energy Sector versus Energy Consumed.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Energy Consumption Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .container {
      display: flex;
      justify-content: space-between;
    }
    
    .chart {
      width: 45%;
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""container"">
    <div class=""chart"" id=""scatterplot""></div>
    <div class=""chart"" id=""bar-chart""></div>
  </div>
  
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    // Load data
    d3.csv('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
      .then(data => {
        // Convert data types
        data.forEach(d => {
          d['Energy Consumed'] = parseFloat(d['Energy Consumed']);
          d['Cost'] = parseFloat(d['Cost']);
        });
        
        // Scatterplot
        const scatterplotWidth = 500;
        const scatterplotHeight = 400;
        const scatterplotMargin = { top: 20, right: 20, bottom: 30, left: 40 };
        
        const scatterplotSvg = d3.select('#scatterplot')
          .append('svg')
          .attr('width', scatterplotWidth + scatterplotMargin.left + scatterplotMargin.right)
          .attr('height', scatterplotHeight + scatterplotMargin.top + scatterplotMargin.bottom)
          .append('g')
          .attr('transform', `translate(${scatterplotMargin.left}, ${scatterplotMargin.top})`);
        
        const scatterplotXScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Energy Consumed'])])
          .range([0, scatterplotWidth]);
        
        const scatterplotYScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Cost'])])
          .range([scatterplotHeight, 0]);
        
        scatterplotSvg.append('g')
          .attr('transform', `translate(0, ${scatterplotHeight})`)
          .call(d3.axisBottom(scatterplotXScale).tickFormat(d3.format('.2s')));
        
        scatterplotSvg.append('g')
          .call(d3.axisLeft(scatterplotYScale).tickFormat(d3.format('.2s')));
        
        scatterplotSvg.selectAll('circle')
          .data(data)
          .enter()
          .append('circle')
          .attr('cx', d => scatterplotXScale(d['Energy Consumed']))
          .attr('cy', d => scatterplotYScale(d['Cost']))
          .attr('r', 5);
        
        // Bar chart
        const barChartWidth = 500;
        const barChartHeight = 400;
        const barChartMargin = { top: 20, right: 20, bottom: 30, left: 40 };
        
        const barChartSvg = d3.select('#bar-chart')
          .append('svg')
          .attr('width', barChartWidth + barChartMargin.left + barChartMargin.right)
          .attr('height', barChartHeight + barChartMargin.top + barChartMargin.bottom)
          .append('g')
          .attr('transform', `translate(${barChartMargin.left}, ${barChartMargin.top})`);
        
        const barChartXScale = d3.scaleBand()
          .domain(data.map(d => d['Energy Sector']))
          .range([0, barChartWidth])
          .padding(0.2);
        
        const barChartYScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Energy Consumed'])])
          .range([barChartHeight, 0]);
        
        barChartSvg.append('g')
          .attr('transform', `translate(0, ${barChartHeight})`)
          .call(d3.axisBottom(barChartXScale));
        
        barChartSvg.append('g')
          .call(d3.axisLeft(barChartYScale).tickFormat(d3.format('.2s')));
        
        barChartSvg.selectAll('rect')
          .data(data)
          .enter()
          .append('rect')
          .attr('x', d => barChartXScale(d['Energy Sector']))
          .attr('y', d => barChartYScale(d['Energy Consumed']))
          .attr('width', barChartXScale.bandwidth())
          .attr('height', d => barChartHeight - barChartYScale(d['Energy Consumed']));
      })
      .catch(error => console.error(error));
  </script>
</body>
</html>
```"
2,scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Energy Consumed and Cost, and a Bar Chart on the right that displays Energy Sector versus Energy Consumed. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Visualization</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .container {
            display: flex;
            justify-content: space-between;
        }
        
        .chart {
            width: 45%;
            margin: 20px;
        }
        
        .brush {
            fill-opacity: 0.2;
        }
    </style>
</head>
<body>
    <div class=""container"">
        <div class=""chart"" id=""scatterplot""></div>
        <div class=""chart"" id=""bar-chart""></div>
    </div>
    
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        let data;
        let scatterplot;
        let barChart;
        let brush;
        let selectedData;
        
        // Load data
        d3.csv('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(csvData => {
                data = csvData.map(d => ({
                    Month: d.Month,
                    'Energy Sector': d['Energy Sector'],
                    'Energy Consumed': +d['Energy Consumed'],
                    Cost: +d.Cost,
                    Emissions: +d.Emissions,
                    'Number of Plants': +d['Number of Plants'],
                    Revenue: +d.Revenue,
                    Renewable: d.Renewable,
                    Region: d.Region
                }));
                
                // Create scatterplot
                scatterplot = createScatterplot(data);
                
                // Create bar chart
                barChart = createBarChart(data);
            })
            .catch(error => console.error(error));
        
        // Create scatterplot
        function createScatterplot(data) {
            const margin = { top: 20, right: 20, bottom: 30, left: 40 };
            const width = 400 - margin.left - margin.right;
            const height = 400 - margin.top - margin.bottom;
            
            const svg = d3.select('#scatterplot')
                .append('svg')
                .attr('width', width + margin.left + margin.right)
                .attr('height', height + margin.top + margin.bottom)
                .append('g')
                .attr('transform', `translate(${margin.left}, ${margin.top})`);
            
            const xScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Energy Consumed'])])
                .range([0, width]);
            
            const yScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.Cost)])
                .range([height, 0]);
            
            svg.append('g')
                .attr('transform', `translate(0, ${height})`)
                .call(d3.axisBottom(xScale).tickFormat(d3.format('.2s')));
            
            svg.append('g')
                .call(d3.axisLeft(yScale).tickFormat(d3.format('.2s')));
            
            const points = svg.selectAll('circle')
                .data(data)
                .enter()
                .append('circle')
                .attr('cx', d => xScale(d['Energy Consumed']))
                .attr('cy', d => yScale(d.Cost))
                .attr('r', 5)
                .attr('fill', 'steelblue')
                .attr('opacity', 0.5);
            
            brush = d3.brush()
                .extent([[0, 0], [width, height]])
                .on('brush', brushed)
                .on('end', brushended);
            
            svg.append('g')
                .attr('class', 'brush')
                .call(brush);
            
            function brushed(event) {
                const selection = event.selection;
                if (selection) {
                    const x0 = xScale.invert(selection[0][0]);
                    const x1 = xScale.invert(selection[1][0]);
                    const y0 = yScale.invert(selection[1][1]);
                    const y1 = yScale.invert(selection[0][1]);
                    
                    selectedData = data.filter(d => x0 <= d['Energy Consumed'] && d['Energy Consumed'] <= x1 && y0 <= d.Cost && d.Cost <= y1);
                    
                    updateBarChart(selectedData);
                }
            }
            
            function brushended(event) {
                if (!event.selection) {
                    updateBarChart(data);
                }
            }
            
            return svg;
        }
        
        // Create bar chart
        function createBarChart(data) {
            const margin = { top: 20, right: 20, bottom: 30, left: 40 };
            const width = 400 - margin.left - margin.right;
            const height = 400 - margin.top - margin.bottom;
            
            const svg = d3.select('#bar-chart')
                .append('svg')
                .attr('width', width + margin.left + margin.right)
                .attr('height', height + margin.top + margin.bottom)
                .append('g')
                .attr('transform', `translate(${margin.left}, ${margin.top})`);
            
            const xScale = d3.scaleBand()
                .domain(data.map(d => d['Energy Sector']))
                .range([0, width])
                .padding(0.2);
            
            const yScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Energy Consumed'])])
                .range([height, 0]);
            
            svg.append('g')
                .attr('transform', `translate(0, ${height})`)
                .call(d3.axisBottom(xScale));
            
            svg.append('g')
                .call(d3.axisLeft(yScale).tickFormat(d3.format('.2s')));
            
            const bars = svg.selectAll('rect')
                .data(data)
                .enter()
                .append('rect')
                .attr('x', d => xScale(d['Energy Sector']))
                .attr('y', d => yScale(d['Energy Consumed']))
                .attr('width', xScale.bandwidth())
                .attr('height', d => height - yScale(d['Energy Consumed']))
                .attr('fill', 'steelblue')
                .attr('opacity', 0.5);
            
            return svg;
        }
        
        // Update bar chart
        function updateBarChart(data) {
            const bars = barChart.selectAll('rect')
                .data(data);
            
            bars.enter()
                .append('rect')
                .attr('x', d => d3.scaleBand()
                    .domain(data.map(d => d['Energy Sector']))
                    .range([0, 400])
                    .padding(0.2)(d['Energy Sector']))
                .attr('y', d => d3.scaleLinear()
                    .domain([0, d3.max(data, d => d['Energy Consumed'])])
                    .range([400, 0])(d['Energy Consumed']))
                .attr('width', d3.scaleBand()
                    .domain(data.map(d => d['Energy Sector']))
                    .range([0, 400])
                    .padding(0.2).bandwidth())
                .attr('height', d => 400 - d3.scaleLinear()
                    .domain([0, d3.max(data, d => d['Energy Consumed'])])
                    .range([400, 0])(d['Energy Consumed']))
                .attr('fill', 'steelblue')
                .attr('opacity', 0.5);
            
            bars.exit()
                .remove();
        }
    </script>
</body>
</html>
```"
3,line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Energy Consumed , while the pie chart represents the distribution of Cost.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Visualization</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .chart {
            margin: 20px auto;
        }
        
        .line-chart {
            width: 800px;
            height: 400px;
            border: 1px solid #ddd;
        }
        
        .pie-chart {
            width: 400px;
            height: 400px;
            border: 1px solid #ddd;
            margin: 0 auto;
        }
    </style>
</head>
<body>
    <div class=""chart line-chart"" id=""line-chart""></div>
    <div class=""chart pie-chart"" id=""pie-chart""></div>
    
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        // Load data
        d3.csv('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
        .then(data => {
            // Convert data types
            data.forEach(d => {
                d['Energy Consumed'] = parseFloat(d['Energy Consumed']);
                d['Cost'] = parseFloat(d['Cost']);
            });
            
            // Line chart
            const lineChart = document.getElementById('line-chart');
            const lineMargin = { top: 20, right: 20, bottom: 30, left: 40 };
            const lineWidth = 800 - lineMargin.left - lineMargin.right;
            const lineHeight = 400 - lineMargin.top - lineMargin.bottom;
            const lineG = d3.select(lineChart)
                .append('svg')
                .attr('width', lineWidth + lineMargin.left + lineMargin.right)
                .attr('height', lineHeight + lineMargin.top + lineMargin.bottom)
                .append('g')
                .attr('transform', `translate(${lineMargin.left}, ${lineMargin.top})`);
            
            const lineX = d3.scalePoint()
                .domain(data.map(d => d.Month))
                .range([0, lineWidth]);
            const lineY = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Energy Consumed'])])
                .range([lineHeight, 0]);
            
            lineG.append('g')
                .attr('transform', `translate(0, ${lineHeight})`)
                .call(d3.axisBottom(lineX));
            lineG.append('g')
                .call(d3.axisLeft(lineY));
            
            const line = d3.line()
                .x(d => lineX(d.Month))
                .y(d => lineY(d['Energy Consumed']));
            
            lineG.append('path')
                .datum(data)
                .attr('fill', 'none')
                .attr('stroke', 'steelblue')
                .attr('stroke-linejoin', 'round')
                .attr('stroke-linecap', 'round')
                .attr('stroke-width', 1.5)
                .attr('d', line);
            
            // Pie chart
            const pieChart = document.getElementById('pie-chart');
            const pieMargin = { top: 20, right: 20, bottom: 20, left: 20 };
            const pieWidth = 400 - pieMargin.left - pieMargin.right;
            const pieHeight = 400 - pieMargin.top - pieMargin.bottom;
            const pieG = d3.select(pieChart)
                .append('svg')
                .attr('width', pieWidth + pieMargin.left + pieMargin.right)
                .attr('height', pieHeight + pieMargin.top + pieMargin.bottom)
                .append('g')
                .attr('transform', `translate(${pieWidth / 2 + pieMargin.left}, ${pieHeight / 2 + pieMargin.top})`);
            
            const pieData = d3.groups(data, d => d.Region).map(([key, values]) => ({ key, value: d3.sum(values, d => d['Cost']) }));
            const pie = d3.pie()
                .value(d => d.value);
            
            const pieArc = d3.arc()
                .outerRadius(Math.min(pieWidth, pieHeight) / 2 - 10)
                .innerRadius(0);
            
            const pieGElements = pieG.selectAll('g')
                .data(pie(pieData))
                .join('g');
            
            pieGElements.append('path')
                .attr('fill', (d, i) => d3.schemeCategory10[i])
                .attr('d', pieArc);
            
            pieGElements.append('text')
                .attr('transform', d => `translate(${pieArc.centroid(d)})`)
                .attr('dy', '0.35em')
                .text(d => d.data.key);
        });
    </script>
</body>
</html>
```"
4,line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Energy Consumed , while the pie chart represents the distribution of Cost. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Cost for the selected group.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Visualization</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .brush {
            fill-opacity: 0.3;
        }
    </style>
</head>
<body>
    <div id=""visualization""></div>
    
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        // Set up the visualization container
        const margin = { top: 20, right: 20, bottom: 30, left: 40 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;
        
        const svg = d3.select(""#visualization"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);
        
        // Load the data
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"")
            .then(data => {
                data.forEach(d => {
                    d[""Energy Consumed""] = +d[""Energy Consumed""];
                    d[""Cost""] = +d[""Cost""];
                });
                
                // Set up the scales
                const xScale = d3.scalePoint()
                    .domain(data.map(d => d.Month))
                    .range([0, width]);
                
                const yScale = d3.scaleLinear()
                    .domain([0, d3.max(data, d => d[""Energy Consumed""])])
                    .range([height / 2, 0]);
                
                const colorScale = d3.scaleOrdinal()
                    .domain(data.map(d => d.Region))
                    .range(d3.schemeCategory10);
                
                // Create the line chart
                const lineChart = svg.append(""g"")
                    .attr(""transform"", `translate(0, 0)`);
                
                const line = d3.line()
                    .x(d => xScale(d.Month))
                    .y(d => yScale(d[""Energy Consumed""]));
                
                lineChart.append(""path"")
                    .datum(data)
                    .attr(""fill"", ""none"")
                    .attr(""stroke"", ""steelblue"")
                    .attr(""stroke-width"", 1.5)
                    .attr(""d"", line);
                
                // Add brushing functionality
                const brush = d3.brushX()
                    .extent([[0, 0], [width, height / 2]])
                    .on(""brush"", brushed)
                    .on(""end"", brushended);
                
                lineChart.append(""g"")
                    .attr(""class"", ""brush"")
                    .call(brush)
                    .selectAll(""rect"")
                    .attr(""height"", height / 2);
                
                // Create the pie chart
                const pieChart = svg.append(""g"")
                    .attr(""transform"", `translate(0, ${height / 2 + 20})`);
                
                const pie = d3.pie()
                    .value(d => d[""Cost""]);
                
                const arc = d3.arc()
                    .outerRadius(Math.min(width, height / 2) / 2 - 10)
                    .innerRadius(0);
                
                const arcs = pieChart.selectAll(""arc"")
                    .data(pie(data))
                    .enter()
                    .append(""path"")
                    .attr(""fill"", (d, i) => colorScale(i))
                    .attr(""d"", arc);
                
                // Update the pie chart on brush
                function brushed(event) {
                    const selection = event.selection;
                    if (selection) {
                        const selectedData = data.filter(d => xScale(d.Month) >= selection[0][0] && xScale(d.Month) <= selection[1][0]);
                        const pieData = pie(selectedData);
                        arcs.data(pieData)
                            .transition()
                            .duration(500)
                            .attr(""d"", arc);
                    }
                }
                
                function brushended(event) {
                    if (!event.selection) {
                        arcs.data(pie(data))
                            .transition()
                            .duration(500)
                            .attr(""d"", arc);
                    }
                }
            })
            .catch(error => console.error(error));
    </script>
</body>
</html>
```"
5,scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Energy Consumed, Revenue, Cost, Emissions, and Renewable. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot Matrix</title>
    <style>
        .container {
            width: 800px;
            height: 600px;
            margin: 0 auto;
        }

        .cell {
            border: 1px solid #ddd;
        }

        .brush {
            fill: #aaa;
            fill-opacity: 0.5;
        }

        .selected {
            fill: red;
        }
    </style>
</head>
<body>
<div class=""container""></div>
<script src=""https://d3js.org/d3.v7.min.js""></script>
<script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;
    const cellSize = 150;
    const padding = 20;

    const container = d3.select('.container')
        .append('svg')
        .attr('width', width + margin.left + margin.right)
        .attr('height', height + margin.top + margin.bottom)
        .append('g')
        .attr('transform', `translate(${margin.left}, ${margin.top})`);

    const columns = ['Energy Consumed', 'Revenue', 'Cost', 'Emissions', 'Renewable'];

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
        .then(data => {
            data.forEach(d => {
                columns.forEach(c => {
                    d[c] = +d[c];
                });
            });

            const scales = columns.map(c => {
                const domain = d3.extent(data, d => d[c]);
                const scale = d3.scaleLinear()
                    .domain(domain)
                    .range([padding, cellSize - padding]);
                return scale;
            });

            const cells = container.selectAll('.cell')
                .data(columns.flatMap(c1 => columns.map(c2 => [c1, c2])))
                .enter()
                .append('g')
                .attr('class', 'cell')
                .attr('transform', (d, i) => {
                    const row = Math.floor(i / columns.length);
                    const col = i % columns.length;
                    return `translate(${col * cellSize}, ${row * cellSize})`;
                });

            cells.each(function ([c1, c2], i) {
                const cell = d3.select(this);
                const xScale = scales[columns.indexOf(c1)];
                const yScale = scales[columns.indexOf(c2)];

                cell.append('rect')
                    .attr('x', 0)
                    .attr('y', 0)
                    .attr('width', cellSize)
                    .attr('height', cellSize)
                    .attr('fill', 'none')
                    .attr('stroke', '#ddd');

                cell.selectAll('circle')
                    .data(data)
                    .enter()
                    .append('circle')
                    .attr('cx', d => xScale(d[c1]))
                    .attr('cy', d => yScale(d[c2]))
                    .attr('r', 3);

                const brush = d3.brush()
                    .extent([[0, 0], [cellSize, cellSize]])
                    .on('brush', () => {
                        const selection = d3.event.selection;
                        if (selection) {
                            const x0 = xScale.invert(selection[0][0]);
                            const x1 = xScale.invert(selection[1][0]);
                            const y0 = yScale.invert(selection[0][1]);
                            const y1 = yScale.invert(selection[1][1]);

                            container.selectAll('circle')
                                .classed('selected', d => {
                                    return d[c1] >= x0 && d[c1] <= x1 && d[c2] >= y0 && d[c2] <= y1;
                                });
                        } else {
                            container.selectAll('circle')
                                .classed('selected', false);
                        }
                    });

                cell.append('g')
                    .attr('class', 'brush')
                    .call(brush);
            });
        });
</script>
</body>
</html>
```"
6,scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a brushable Scatterplot that visualizes the relationship between Energy Consumed and Cost. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Brushable Scatterplot</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .brush {
            fill-opacity: 0.2;
        }
        
        .brush .selection {
            fill-opacity: 0.5;
        }
        
        #scatterplot {
            border: 1px solid black;
        }
        
        #table-container {
            position: absolute;
            top: 0;
            right: 0;
            padding: 10px;
            border: 1px solid black;
            display: none;
        }
        
        table {
            border-collapse: collapse;
        }
        
        th, td {
            border: 1px solid black;
            padding: 5px;
        }
    </style>
</head>
<body>
    <svg id=""scatterplot"" width=""600"" height=""400""></svg>
    <div id=""table-container"">
        <table id=""data-table"">
            <thead>
                <tr>
                    <th>Month</th>
                    <th>Energy Sector</th>
                    <th>Energy Consumed</th>
                    <th>Cost</th>
                    <th>Emissions</th>
                    <th>Number of Plants</th>
                    <th>Revenue</th>
                    <th>Renewable</th>
                    <th>Region</th>
                </tr>
            </thead>
            <tbody id=""table-body"">
            </tbody>
        </table>
    </div>

    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        let margin = { top: 20, right: 20, bottom: 30, left: 40 };
        let width = 600 - margin.left - margin.right;
        let height = 400 - margin.top - margin.bottom;

        let svg = d3.select(""#scatterplot"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

        let xScale = d3.scaleLinear()
            .range([0, width]);

        let yScale = d3.scaleLinear()
            .range([height, 0]);

        let brush = d3.brush()
            .extent([[0, 0], [width, height]])
            .on(""brush"", brushed)
            .on(""end"", brushended);

        let brushg = svg.append(""g"")
            .attr(""class"", ""brush"");

        brush(brushg);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"")
            .then(data => {
                data.forEach(d => {
                    d[""Energy Consumed""] = +d[""Energy Consumed""];
                    d[""Cost""] = +d[""Cost""];
                });

                xScale.domain(d3.extent(data, d => d[""Energy Consumed""]));
                yScale.domain(d3.extent(data, d => d[""Cost""]));

                svg.selectAll(""circle"")
                    .data(data)
                    .enter()
                    .append(""circle"")
                    .attr(""cx"", d => xScale(d[""Energy Consumed""]))
                    .attr(""cy"", d => yScale(d[""Cost""]))
                    .attr(""r"", 5);

                svg.append(""g"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(d3.axisBottom(xScale));

                svg.append(""g"")
                    .call(d3.axisLeft(yScale));
            });

        function brushed(event) {
            let selection = event.selection;
            if (selection) {
                let x0 = xScale.invert(selection[0][0]);
                let x1 = xScale.invert(selection[1][0]);
                let y0 = yScale.invert(selection[1][1]);
                let y1 = yScale.invert(selection[0][1]);

                d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"")
                    .then(data => {
                        data.forEach(d => {
                            d[""Energy Consumed""] = +d[""Energy Consumed""];
                            d[""Cost""] = +d[""Cost""];
                        });

                        let filteredData = data.filter(d => x0 <= d[""Energy Consumed""] && d[""Energy Consumed""] <= x1 && y0 <= d[""Cost""] && d[""Cost""] <= y1);

                        let tableBody = d3.select(""#table-body"");
                        tableBody.selectAll(""tr"").remove();

                        let rows = tableBody.selectAll(""tr"")
                            .data(filteredData.slice(0, 20))
                            .enter()
                            .append(""tr"");

                        rows.append(""td"")
                            .text(d => d[""Month""]);

                        rows.append(""td"")
                            .text(d => d[""Energy Sector""]);

                        rows.append(""td"")
                            .text(d => d[""Energy Consumed""]);

                        rows.append(""td"")
                            .text(d => d[""Cost""]);

                        rows.append(""td"")
                            .text(d => d[""Emissions""]);

                        rows.append(""td"")
                            .text(d => d[""Number of Plants""]);

                        rows.append(""td"")
                            .text(d => d[""Revenue""]);

                        rows.append(""td"")
                            .text(d => d[""Renewable""]);

                        rows.append(""td"")
                            .text(d => d[""Region""]);

                        d3.select(""#table-container"").style(""display"", ""block"");
                    });
            }
        }

        function brushended(event) {
            if (!event.selection) {
                d3.select(""#table-container"").style(""display"", ""none"");
            }
        }
    </script>
</body>
</html>
```"
7,bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a horizontal Bar Chart that shows all the data concerning Energy Consumed, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Bar Chart</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .bar-chart {
            display: flex;
        }
        
        .main-chart {
            width: 80%;
        }
        
        .minimap {
            width: 20%;
        }
        
        .bar {
            fill: steelblue;
        }
        
        .bar:hover {
            fill: brown;
        }
    </style>
</head>
<body>
    <div class=""bar-chart"">
        <svg class=""main-chart""></svg>
        <svg class=""minimap""></svg>
    </div>
    
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 40 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;
        
        const mainChart = d3.select('.main-chart')
            .attr('width', width + margin.left + margin.right)
            .attr('height', height + margin.top + margin.bottom)
            .append('g')
            .attr('transform', `translate(${margin.left}, ${margin.top})`);
        
        const minimap = d3.select('.minimap')
            .attr('width', 200)
            .attr('height', height + margin.top + margin.bottom)
            .append('g')
            .attr('transform', `translate(10, ${margin.top})`);
        
        d3.csv('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(data => {
                data.forEach(d => {
                    d['Energy Consumed'] = +d['Energy Consumed'];
                });
                
                const xScaleMain = d3.scaleLinear()
                    .domain([0, d3.max(data, d => d['Energy Consumed'])])
                    .range([0, width]);
                
                const yScaleMain = d3.scaleBand()
                    .domain(data.map(d => d['Energy Sector']))
                    .range([0, height])
                    .padding(0.2);
                
                const xScaleMini = d3.scaleLinear()
                    .domain([0, d3.max(data, d => d['Energy Consumed'])])
                    .range([0, 180]);
                
                const yScaleMini = d3.scaleBand()
                    .domain(data.map(d => d['Energy Sector']))
                    .range([0, height])
                    .padding(0.2);
                
                mainChart.selectAll('.bar')
                    .data(data)
                    .enter()
                    .append('rect')
                    .attr('class', 'bar')
                    .attr('x', 0)
                    .attr('y', d => yScaleMain(d['Energy Sector']))
                    .attr('width', d => xScaleMain(d['Energy Consumed']))
                    .attr('height', yScaleMain.bandwidth());
                
                mainChart.append('g')
                    .attr('transform', `translate(0, ${height})`)
                    .call(d3.axisBottom(xScaleMain));
                
                mainChart.append('g')
                    .call(d3.axisLeft(yScaleMain));
                
                minimap.selectAll('.bar')
                    .data(data)
                    .enter()
                    .append('rect')
                    .attr('class', 'bar')
                    .attr('x', 0)
                    .attr('y', d => yScaleMini(d['Energy Sector']))
                    .attr('width', d => xScaleMini(d['Energy Consumed']))
                    .attr('height', yScaleMini.bandwidth());
                
                minimap.append('g')
                    .attr('transform', `translate(0, ${height})`)
                    .call(d3.axisBottom(xScaleMini));
            });
    </script>
</body>
</html>
```"
