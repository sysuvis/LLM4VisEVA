Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .scatterplot {
      width: 800px;
      height: 600px;
      border: 1px solid lightgray;
    }
    
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      shape-rendering: crispEdges;
    }
    
    .axis text {
      font-size: 12px;
    }
    
    .dot {
      stroke: #000;
    }
  </style>
</head>

<body>

<div class=""scatterplot"" id=""scatterplot""></div>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script>

// Set the dimensions and margins of the graph
var margin = {top: 20, right: 20, bottom: 30, left:40},
width = document.getElementById(""scatterplot"").offsetWidth - margin.left - margin.right,
height = document.getElementById(""scatterplot"").offsetHeight - margin.top - margin.bottom;

// Append the svg object to the body of the page
var svg = d3.select(""#scatterplot"")
.append(""svg"")
.attr(""width"", width + margin.left + margin.right)
.attr(""height"", height + margin.top + margin.bottom)
.append(""g"")
.attr(""transform"",
""translate(""+margin.left+"",""+margin.top+"")"");

// Load data
d3.csv('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv').then(data => {

data.forEach(d => {
d['Net Income'] = parseFloat(d['Net Income'].replace('$', '').replace(',', ''));
d.Revenue = parseFloat(d.Revenue.replace('$', '').replace(',', ''));
});

// Add X axis
var xScale = d3.scaleLinear()
.domain([0,d3.max(data,function(d){return d.Revenue;})])
.range([0,width]);
svg.append('g')
.attr('transform','translate(0,'+height+')')
.call(d3.axisBottom(xScale));

// Add Y axis
var yScale=d3.scaleLinear()
.domain([0,d3.max(data,function(d){return d['Net Income'];})])
.range([height,0]);
svg.append('g')
.call(d3.axisLeft(yScale));



svg.selectAll("".dot"")
.data(data)
.enter().append(""circle"")
.attr('cx',function (d) { return xScale( d.Revenue); } )
.attr('cy',function (d) { return yScale( d['Net Income']); } )
.style('fill','#69bfa5')
.style ('stroke','black')
.style ('stroke-width','1.5');

})

</script></body></html>"
2,line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Line Chart that visualizes the trend of Net Income over the Quarter for each Company.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Net Income Trend</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .line {
      fill: none;
      stroke: steelblue;
      stroke-width: 2;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;
    
    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);
    
    const xScale = d3.scalePoint()
      .range([0, width]);
    
    const yScale = d3.scaleLinear()
      .range([height, 0]);
    
    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Net Income""] = +d[""Net Income""];
        });
        
        const companies = Array.from(new Set(data.map(d => d.Company)));
        const quarters = Array.from(new Set(data.map(d => d.Quarter)));
        
        xScale.domain(quarters);
        yScale.domain([0, d3.max(data, d => d[""Net Income""])]);
        
        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));
        
        svg.append(""g"")
          .call(d3.axisLeft(yScale));
        
        companies.forEach(company => {
          const companyData = data.filter(d => d.Company === company);
          const line = d3.line()
            .x(d => xScale(d.Quarter))
            .y(d => yScale(d[""Net Income""]));
          
          svg.append(""path"")
            .datum(companyData)
            .attr(""class"", ""line"")
            .attr(""d"", line)
            .style(""stroke"", () => {
              const colors = [""steelblue"", ""red"", ""green"", ""yellow"", ""purple""];
              return colors[companies.indexOf(company) % colors.length];
            });
        });
      });
  </script>
</body>
</html>
```"
3,bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Net Income Bar Chart</title>
  <style>
    /* add some basic styling to make the chart look decent */
    body {
      font-family: Arial, sans-serif;
    }
    
    .bar {
      fill: steelblue;
    }
    
    .bar:hover {
      fill: brown;
    }
    
    .axis text {
      font-size: 12px;
    }
    
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
      shape-rendering: crispEdges;
    }
  </style>
</head>

<body>
<svg width=""500"" height=""300""></svg>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script>

// Set the dimensions and margins of the graph
var margin = {top: 20, right: 20, bottom: 30, left: 40},
width = +svg.attr(""width"") - margin.left - margin.right,
height = +svg.attr(""height"") - margin.top - margin.bottom;

// Append a 'group' element to 'svg'
// Moves the 'group' element to the top left margin
var g = svg.append(""g"")
.attr(""transform"",
""translate("" + margin.left + "","" + margin.top + "")"");

d3.csv('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv').then(function(data) {

data.forEach(function(d) {
if (d['Quarter'] === ""Q1-2021"") { 
 d['Net Income'] = parseInt(d['Net Income']);
}
});

data.sort((a,b) => b['Net Income']-a['Net Income']);

var xScale0 = d3.scaleBand().range([0, width]).padding(0.2);
xScale0.domain(data.map(function(d) { return d.Company; }));

var yScale = d3.scaleLinear()
.range([height,0])
.domain([Math.min(...data.map((d)=>parseInt(d[""Net Income""]))), Math.max(...data.map((d)=>parseInt(d[""Net Income""])))]);

g.selectAll("".bar"")
.data(data)
.enter().append(""rect"")
.attr('class', 'bar')
.style('fill', function (d,i){return i%2==0?""#FFC080"":""#6495ED""})
.on('mouseover',function(event,d){
console.log(`The Net income for ${event.target.__data__.Company} is $${event.target.__data__[""Net Income""]}`)
})
.on('mouseout',function(event,d){
console.log(` `)
})
.transition()
.duration(100)
.delay(function (d,i){return i*10})
.attr(""x"", function(d) { return xScale0(d.Company); })
.attr(""y"", function(d) { return yScale(parseInt((d[""Net Income""]))); })
.attr(""width"", xScale0.bandwidth())
.attr(""height"", function (d){return height-yScale(parseInt((d[""NetIncome""])))});

g.append('g')
.call(
        d3.axisBottom(xScale0).tickSize(-height).tickSizeOuter(10)
       )
       .selectAll('.tick line')
       .attr(
         'stroke',
         '#ccc'
       );

 g.append('text')
   .attr(
     'transform',
     `translate(${margin.left}, ${margin.top})`
   )
   .attr(
     ""fill"",
     ""#000""
   )
   // set text
   // set text position
   // style font 
   
 g.append(
           ""text""
         )
         // set id 
         // set x position 
         // set y position 
         
         

})

</script>  
</body></html>"
4,pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Pie Chart that visualizes the proportion of Net Income contributed by each Company in Q1-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Net Income Proportion by Company in Q1-2021</title>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
</head>
<body>
  <svg width=""500"" height=""500""></svg>

  <script>

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
      .then(data => {
        data.forEach(d => {
          d['Net Income'] = +d['Net Income'];
        });

        const filteredData = data.filter(d => d.Quarter === 'Q1-2021');

        const companies = Array.from(new Set(filteredData.map(d => d.Company)));

        const netIncomeByCompany = {};
        filteredData.forEach(d => {
          if (!netIncomeByCompany[d.Company]) {
            netIncomeByCompany[d.Company] = 0;
          }
          netIncomeByCompany[d.Company] += d['Net Income'];
        });

        const pieData = Object.keys(netIncomeByCompany).map(company => ({
          company,
          value: netIncomeByCompany[company]
        }));

pieData.sort((a, b) => a.value - b.value);

const arcGenerator = d3.arc()
.innerRadius(100)
.outerRadius(200);

const pieGenerator=d3.pie()
.value(function (d){return d.value;});

const arcs=svg.selectAll(""path"")
.data(pieGenerator(pieData))
.enter()
.append(""path"")
.attr(""fill"",function (d,i){return colors[i];})
.attr(""transform"",""translate(250,250)"")
.transition().delay(function (d,i){return i*500;}).duration(500)
.attrTween('d',function (d){
var i=d3.interpolate(d.startAngle,d.endAngle);
return function(t){
    return arcGenerator({startAngle:i(t),endAngle:i(t)});
}
});

arcs.on('mouseover',function(event,d){
div.style('left',event.pageX+'px')
.style('top',event.pageY+'px')
.style('display','inline-block')
.html(""<strong>""+this.parentNode.__data__.data.company+""</strong><br/>""+""<strong>Value:</strong>""+this.parentNode.__data__.value);
});
arcs.on('mouseout',function(event,d){
div.style(""display"",""none"");
});
arcs.on('mousemove',function(event,d){
div.style(""left"",event.pageX+""px"")
.style(""top"",event.pageY+""px"");
});

var div=d3.select(""body"").append(""div"").attr(
""class"",""tooltip"").style(
""display"",""none"");

var colors=[""#66CCCC"",""#CCFF66"",""#FF99CC"",""#FF9966"",""#CC99FF""];

}); 
</script></body></html>"
5,donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Donut Chart that visualizes the distribution of Net Income among Company in Q1-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Donut Chart</title>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
</head>
<body>

<svg width=""500"" height=""500""></svg>

<script>

d3.csv('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
.then(data => {
    data.forEach(d => {
        d['Net Income'] = +d['Net Income'];
    });

    const svg = d3.select('svg');
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = svg.attr('width') - margin.left - margin.right;
    const height = svg.attr('height') - margin.top - margin.bottom;
    const g = svg.append('g')
        .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

const companiesQ12021= data.filter(d=> d.Quarter === 'Q1-2021');

const pie=d3.pie().value(d=> d['Net Income']);

const arc=d3.arc()
.innerRadius(100)
.outerRadius(200);

g.selectAll('.arc')
.data(pie(companiesQ12021))
.enter()
.append(""path"")
.attr(""class"",""arc"")
.attr(""fill"", (d,i) => d3.schemeCategory10[i])
.attr(""stroke"",""black"")
.transition()
.delay((d,i) => i*50)
.duration(500)
.attrTween(""d"",function(d){
var i=d3.interpolate(d.startAngle,d.endAngle);
return function(t){
   d.endAngle=i(t);
   return arc (d);
}
});

});

</script>

</body></html>"
6,coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Coxcomb Chart(polar area chart) to compare the Net Income of different Company in Q1-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coxcomb Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .coxcomb-chart {
            width: 600px;
            height: 600px;
            margin: 50px auto;
        }
    </style>
</head>
<body>
    <div class=""coxcomb-chart"" id=""coxcomb-chart""></div>
    <script>
        const margin = { top: 20, right: 20, bottom: 20, left: 20 };
        const width = 600 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;
        const radius = Math.min(width, height) / 2;
        
        const svg = d3.select(""#coxcomb-chart"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${width / 2}, ${height / 2})`);
        
        const pie = d3.pie()
            .value(d => d[""Net Income""])
            .sort(null);
        
        const arc = d3.arc()
            .innerRadius(0)
            .outerRadius(radius);
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"")
            .then(data => {
                const q1Data = data.filter(d => d.Quarter === ""Q1-2021"");
                const companyData = {};
                q1Data.forEach(d => {
                    companyData[d.Company] = +d[""Net Income""];
                });
                const companies = Object.keys(companyData);
                const chartData = companies.map(company => ({ Company: company, ""Net Income"": companyData[company] }));
                
                const arcs = svg.selectAll(""path"")
                    .data(pie(chartData))
                    .enter()
                    .append(""path"")
                    .attr(""d"", arc)
                    .attr(""fill"", (d, i) => d3.schemeCategory10[i]);
                
                const labels = svg.selectAll(""text"")
                    .data(pie(chartData))
                    .enter()
                    .append(""text"")
                    .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                    .attr(""dy"", ""0.35em"")
                    .text(d => d.data.Company);
            })
            .catch(error => console.error(error));
    </script>
</body>
</html>
```"
7,radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Radar Chart to compare the Net Income of different Company in Q1-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Radar Chart</title>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
</head>
<body>
  <svg width=""500"" height=""500""></svg>
  <script>

    // Load data
    d3.csv('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
      .then(data => {
        // Filter data for Q1-2021
        const filteredData = data.filter(d => d.Quarter === 'Q1-2021');

        // Extract company names and net income values
        const companies = filteredData.map(d => d.Company);
        const netIncomeValues = filteredData.map(d => +d['Net Income']);

        // Create radar chart scales
        const maxNetIncome = Math.max(...netIncomeValues);
const radiusScale = d3.scaleLinear()
          .domain([0, maxNetIncome])
          .range([0, 200]);

const angleScale = d3.scalePoint()
          .domain(companies)
          .range([0, 2 * Math.PI]);

// Create radar chart lines
const lineGenerator = d3.lineRadial()
          .angle((_, i) => angleScale(companies[i]))
          .radius((_, i) => radiusScale(netIncomeValues[i]));

// Append g element to SVG and translate it to the center of the SVG

const gElement=d3.select('svg')
.append(""g"")
.attr(""transform"", ""translate(250,250)"");

// Append path elements for each company's net income line

gElement.selectAll(""path"")
.data(filteredData)
.enter()
.append(""path"")
.attr(""d"", (_,i)=>lineGenerator(netIncomeValues))
.style(""stroke"",""black"")
.style(""fill"",""none"");

// Add axis lines for each company

gElement.selectAll("".axis-line"")
.data(companies)
.enter()
.append('line')
.attr('class', 'axis-line')
.attr('x1', (_,i) => Math.cos(angleScale(companies[i])) * radiusScale(maxNetIncome))
.attr('y1', (_,i) => Math.sin(angleScale(companies[i])) * radiusScale(maxNetIncome))
.attr('x2', (_,i) => Math.cos(angleScale(companies[i])) * -radiusScale(maxNetIncome))
.attr('y2', (_,i) => Math.sin(angleScale(companies[i])) * -radiusScale(maxNetIncome))
.style ('stroke','gray');

// Add text labels for each company

gElement.selectAll('.axis-label')
.data (companies)
.enter ()
.append ('text ')
.classed ('axis-label ', true )
.text (company=>company )
.style (""font-size "",""12px "")
.style (""text-anchor "",""middle "")
.transition ()
.duration (1000 )
.delay ((_, i )=> i*50 )
.ease (d3.easeBounceInOut )

      });
</script>

</body>

</html>"
8,streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Streamgraph that visualizes the changes of Net Income over the Quarter for each Company.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Streamgraph of Net Income over Quarter for each Company</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .streamgraph {
            width: 800px;
            height: 600px;
            margin: 50px auto;
        }
    </style>
</head>
<body>
    <div class=""streamgraph""></div>
    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 40 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;
        
        const svg = d3.select("".streamgraph"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);
        
        const x = d3.scalePoint()
            .range([0, width]);
        
        const y = d3.scaleLinear()
            .range([height, 0]);
        
        const z = d3.scaleOrdinal(d3.schemeCategory10);
        
        const stack = d3.stack()
            .offset(d3.stackOffsetWiggle)
            .order(d3.stackOrderInsideOut);
        
        const area = d3.area()
            .x(d => x(d.data.Quarter))
            .y0(d => y(d[0]))
            .y1(d => y(d[1]));
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"")
            .then(data => {
                data.forEach(d => {
                    d[""Net Income""] = +d[""Net Income""];
                });
                
                const companies = Array.from(new Set(data.map(d => d.Company)));
                const quarters = Array.from(new Set(data.map(d => d.Quarter)));
                
                x.domain(quarters);
                y.domain([d3.min(data, d => d[""Net Income""]), d3.max(data, d => d[""Net Income""])]);
                z.domain(companies);
                
                const series = stack.keys(companies)(data);
                
                svg.selectAll(""path"")
                    .data(series)
                    .enter()
                    .append(""path"")
                    .attr(""fill"", d => z(d.key))
                    .attr(""d"", area);
                
                svg.append(""g"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(d3.axisBottom(x));
                
                svg.append(""g"")
                    .call(d3.axisLeft(y));
            });
    </script>
</body>
</html>
```"
9,slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Slopegraph to compare the Net Income between Q1-2021 and Q2-2021 for each Company.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Slopegraph</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .slopegraph {
      width: 800px;
      height: 600px;
      margin: auto;
    }
    
    .slopegraph .axis path,
    .slopegraph .axis line {
      fill: none;
      stroke: #777;
      shape-rendering: crispEdges;
    }
    
    .slopegraph .axis text {
      font-size: 12px;
    }
    
    .slopegraph .line {
      stroke-width: 2px;
    }
    
     /* Add hover effect */
     /* Style the circles */
     circle{
       fill-opacity:.5
     }

     /* Define the default styles for lines and circles */
   </style>

</head>

<body>

<div class=""chart"" id=""chart""></div>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script> 
// Set the dimensions and margins of the graph
var margin = {top:50,right :50,bottom :100,left :150},
width =800-margin.left-margin.right,
height=600-margin.top-margin.bottom;

// Append svg to div with id chart
var svg=d3.select(""#chart"")
.append(""svg"")
.attr(""width"",width+margin.left+margin.right)
.attr(""height"",height+margin.top+margin.bottom)
.append(""g"")
.attr(""transform"",""translate(""+margin.left+"",""+margin.top+"")"");

// Load data from csv file
d3.csv('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
.then(function(data){
data.forEach(function(d){
d['Net Income']=parseFloat(d['Net Income']);
});

var companies=Array.from(new Set(data.map(d=>d.Company)));

companies.sort((a,b)=>{
if(a<b) return -1;else if(a>b) return +1;else return a-b});

var xScale=d3.scalePoint()
.domain(companies)
.range([0,width])
.padding(0.5);

svg.append('g')
.attr('class','xAxis')
.call(d3.axisBottom(xScale))
.selectAll('text')
.style('text-anchor','middle');

svg.selectAll('.xAxis text')
.style('transform',function(){
return'rotate(-45deg)';
})
.style('font-size','12px');

var yScale=d3.scaleLinear()
.domain([Math.min(...data.map(d=>parseFloat(d['Net Income']))),Math.max(...data.map(d=>parseFloat(d['Net Income'])))]).nice()
.range([height,0]);

svg.append('g').call(
d3.axisLeft(yScale).tickFormat(function (e) {if(Math.floor(e)!=e){return;}return e;})
);

const q12021=data.filter((item)=>item.Quarter==='Q1-2021');
const q22021=data.filter((item)=>item.Quarter==='Q2-2021');

q12021.sort((a,b)=>{
if(a.Company<b.Company)return -1;elseif(a.Company>b.Company)return +1;elsereturn a-b});
q22021.sort((a,b)=>{
if(a.Company<b.Company)return -1;elseif(a.Company>b Company)return +1;elsereturn a-b});

for(let i=0;i<companies.length;i++){
let company=companies[i];
let d=[{'x':company,'y':q12021.find(item=>item.company===company)['NetIncome']},{'x':company,'y':q22021.find(item=>item.company===company)['NetIncome']}];

let line=d3.line().curve(null).defined(null).context(null);
line.x(function (p){return xScale(p.x);}).y(function (p){return yScale(p.y);})

svg.datum(d)
.append(""path"")
.classed(company,true)
.classed(line,true)

.transition()
.duration(2000)

.on ('start',function(){
d31.select(this).classed(line,true);
})

.on ('end',function (){

});
}

}); 

</script> 
</body> 
</html>"
10,heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Heatmap that visualizes the Net Income across Company and Quarters.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Heatmap</title>
  <style>

    .heatmap {
      font-family: Arial, sans-serif;
      font-size: 12px;
    }

    .heatmap rect {
      stroke-width: 1px;
      stroke-opacity: 0.5;
    }

    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      shape-rendering: crispEdges;
    }

    .axis text {
      font-size: 12px;
    }
  </style>
</head>

<body>
<svg width=""800"" height=""600""></svg>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script>

let margin = {top:50, right :50, bottom :100, left :150},
width = document.body.clientWidth - margin.left - margin.right,
height = document.body.clientHeight - margin.top-margin.bottom;

let svg = d3.select(""body"")
.append(""svg"")
.attr(""width"", width +margin.left +margin.right)
.attr(""height"", height+margin.top+margin.bottom)
.append(""g"")
.attr(""transform"",""translate(""+margin.left+"",""+margin.top+"")"");

d3.csv('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
.then(data => {

data.forEach(d => {

d['Net Income'] = parseInt(d['Net Income']);
});

const companies= [...new Set(data.map(d=> d.Company))];
const quarters= [...new Set(data.map(d=> d.Quarter))];

const xScale=d3.scaleBand()
.domain(companies)
.range([0,width])
.padding(0.01);

const yScale=d3.scaleBand()
.domain(quarters)
.range([height,0])
.padding(0.01);

svg.selectAll("".x-axis"").remove();
let xAxisCall=d3.axisBottom(xScale);
xAxisCall.tickSize(-height).tickSizeOuter(0);
let gX= svg.append('g')
.attr('class','x-axis')
.call(xAxisCall)
.selectAll('.tick text')
.style('text-anchor','end')
.style('transform', 'rotate(-45deg)');

svg.selectAll("".y-axis"").remove();
let yAxisCall=d3.axisLeft(yScale);
yAxisCall.tickSize(-width).tickSizeOuter(0);
let gY= svg.append('g').call(yAxisCall);

var myColor = d3.scaleLinear().domain([-50000000,d3.max(data,function (d){return parseInt(d['Net Income']);})]).range([""#B22222"",""#33CC33""]);

var tooltip=d3.select('#tooltip');
data.forEach(function (item){
item.value=item['Net Income'];
item.group=item.Company
item.variable=item.Quarter
})

var groups=['Company']
var vars=['Quarter']

if (!groups.length) groups=['ALL'];
if (!vars.length) vars=['ALL'];

// Construct domains

// Draw cells

heatMapGroup=svg.selectAll('.company-group').data(companies).enter().append('g').attr({'class':'company-group',
'transform':function (d){return 'translate('+xScale(d)+',10)'}})

heatMapRow=heatMapGroup.selectAll('.quarter-row').data(function (d){
return quarters.map(function(w){
return {'value': data.find(t=>t.Company==d && t.Quarter==w)['Net Income'],'group': d,'variable': w}
})
}).enter().append('rect')

heatMapRow.transition().duration(100).attr({
'width':function (z){ return xScale.bandwidth()},
'height':function(z){ return yScale.bandwidth()},
'fill': function(z){ if(z.value>myColor.domain()[1]) return myColor(myColor.domain()[1]); else if(z.value<myColor.domain()[0]) return myColor(myColor.domain()[0]); else return myColor(parseInt(z.value))},
'transform' : function (z,i,j){

j=(j*quarters.length)+i;

if(j%quarters.length==quarters.length-1){

}else{
}

k=j%quarters.length;

h=yScale(k)-yScale(k+1)

l=yScale(k)-h-y Scale.step()

m=l+y Scale.step()/2-h/2

n=m-y Scale.step()/2+h/2

o=n-y Scale.step()

p=o+y Scale.step()-h

q=p-h-y Scale.step()

r=q+h+y Scale(step())

s=r-h+y scaleStep()

t=s+h-y scaleStep()-h

u=t+h+y scaleStep()-h*2
v=u-h*2
w=v+h*4
x=w-h*4+w*h+z.h/w-z.h/w*w*h+z.h/w*w-z.h/w*w*z.h/z.w-w*h*z.w/z.w-w*z.w/z.w+w*z.w/z.z-w*z.z/z.z+w*h-w/h-z/h+z/h-z.z/h+z.z-z/h+z/h+z-z-

console.log(u,v,w,x,y,z,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z)

console.log(u-v,-v+w,-w+x,-u+v,-v+w,-w+x)

console.log(v-u,-u+v,+v-u,+u-v,+u-v,+v-u)

console.log(w-x,-x+w,+w-x,+x-w,+x-w,+w-x)

console.log(x-w,-w+x,+x-w.+W-X.+W-X.+X-W.)

Console.Log(Z.Value,Z.Group,Z.Variable,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z)


Return ""Translate(""+Xscale.Step()/4+"",""+Yscale(Z.Variable)+"")""}})


</script></body></html>"
11,bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Stacked Bar Chart</title>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .bar {
      fill: steelblue;
    }
    
    .axis text {
      font-size: 12px;
    }
    
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>

<body>
<svg width=""800"" height=""600""></svg>

<script>

// Set the dimensions and margins of the graph
var margin = {top: 20, right: 20, bottom: 30, left: 40},
width = +svg.attr(""width"") - margin.left - margin.right,
height = +svg.attr(""height"") - margin.top - margin.bottom;

// Parse the date / time
var parseDate = d3.timeParse(""%Y-%m-%d"");

// Set the ranges
var xScale = d3.scaleBand()
.range([0, width])
.padding(0.2);

var yScale = d3.scaleLinear()
.range([height,0]);

// Create a stack scale for Net Income and Expenses
var stackScaleNetIncomeExpenses = d3.stack()
.keys([""Net Income"", ""Expenses""]);

// Create a stack scale for Revenue and Employee Count
var stackScaleRevenueEmployeeCount= d3.stack()
.keys([""Revenue"", ""Employee Count""]);

// Load data from CSV file
d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(function(data) {

data.forEach(function(d) {
d[""Net Income""] = +d[""Net Income""];
d[""Revenue""] = +d[""Revenue""];
d[""Expenses""] = +d[""Expenses""];
});

xScale.domain(data.map(function(d) { return d.Company; }));

yScale.domain([0,d3.max(data,function(d){return Math.max(d['Net Income'],+Math.max(+Math.max(+Math.max(+Math.max(+Math.abs(d['Expenses']),+Math.abs(d['Employee Count'])),+Math.abs(d['Stock Price']))),+Math.abs((+Number.isNaN(Number.isNaN(Number.isNaN(Number.isNaN((Number.isInteger(parseInt((parseInt(parseInt(parseInt(parseInt(parseInt(parseInt(parseInt(((parseInt(((parseInt(((parseInt(((parseInt(((parseInt(((parseDate.parseDate.parseDate.parseDate.parseDate.parseDate.parseDatedate)))))))))))))))))))))))+Number.EPSILON)+Number.EPSILON)+Number.EPSILON)+Number.EPSILON))+Number.EPSILON))+Number.EPSILON))+10)}));

stackedData1=stackScaleNetIncomeExpenses(data);
stackedData2=stackScaleRevenueEmployeeCount(data);

g.selectAll("".bar"")
.data(stackedData1)
.enter().append(""rect"")
.attr('class','bar')
.style('fill','#'+(~~(360*Math.random())).toString(16))
.transition().duration(100)
.delay(function (data,i){return i*50})
.attr('x',function (data,i){return x(i)})
.attr('y',function (data,i){return y(data[1])})
.attr('width',x.bandwidth())
.attr('height',function (data,i){return y(data[0])-y(data[1])})

g.selectAll("".bar"")
.data(stackedData2)
.enter().append(""rect"")
.style('fill','#'+(~~(360*Math.random())).toString(16))
.transition().duration(100)
.delay(function (data,i){return i*50})
.append(""text"")
.text(function (data,i){
if(i%4==0){
if(Math.round(Math.random())==true){
if(Math.round(Math.random())==true){
if(Math.round(Math.random())==true){
if(Math.round(Math.random())==true){

}
}
}
}
}
})

g.append(""g"")
.call(xAxis)

g.append(""g"")

.call(yAxis)

});

</script></body></html>"
12,bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Horizontal Bar Chart that visualizes the Net Income for each Company in Q1-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Net Income for each Company in Q1-2021</title>
  <style>
    /* add some basic styling to make the chart look decent */
    body {
      font-family: Arial, sans-serif;
    }
    
    .chart {
      width: 800px;
      height: 600px;
      margin: 50px auto;
    }
    
    .bar {
      fill: steelblue;
    }
    
    .bar:hover {
      fill: brown;
    }
    
    .axis text {
      font-size: 12px;
    }
    
     path.domain{
       stroke-opacity:.3
     } 
     
     tick line{
       stroke : black ;
       stroke-width :0.5
     } 
     
   </style>

</head>

<body>

<div class=""chart"" id=""chart""></div>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script>
// Load data and create the chart
d3.csv('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
.then(data => {

data.forEach(d => d['Net Income'] = +d['Net Income']);

const companies = [...new Set(data.map(d => d.Company))];

const q1Data = data.filter(d => d.Quarter === 'Q1-2021');

const margin = { top: 50, right: 50, bottom:100 , left :200 };
const width =800 -margin.left-margin.right,
height=600-margin.top-margin.bottom;

const svg=d3.select('#chart')
.append('svg')
.attr(""width"",width+margin.left+margin.right)
.attr(""height"",height+margin.top+margin.bottom)
.append(""g"")
.attr(""transform"",""translate(""+ margin.left+"",""+margin.top+"")"");

 const xScale=d3.scaleLinear()
.domain([0,d3.max(q1Data,d=>Math.abs(d[""Net Income""]))])
.range([0,width]);

 const yScale=d3.scaleBand()
.domain(companies)
.range([0,height])
.padding(0.2);

svg.selectAll("".bar"")
.data(q1Data)
.enter()
.append(""rect"")
.classed('bar',true)

.attr('x',function (d){
if (d[""Net Income""]<0) {return xScale( Math.abs ( d ["" Net Income ""]))}
else return xScale( Math.abs ( d ["" Net Income ""]))})

.attr ('y' , function (d,i){return yScale(d.Company)})
.attr ('width' , function (d){ return xScale(Math.abs(d["" NetIncome""]))})
.attr ('height' , yScale.bandwidth())

svg.selectAll('.text')  
.data(q1Data)   
.enter()  
.append('text')   
.text(function(a){return a['Company']})   
.style (""fill"",""black"")  
.style (""font-size"",""10pt"")  

svg.selectAll('.value')  
.data(q1Data)   
.enter()  
.append('text')   
.text(function(a){return a['NetIncome']})   

.style (""fill"",""black"")  

.style (""font-size"",""10pt"")

var gX= svg.append(""g"")

.call(xAxis.tickFormat(function(e){
if(Math.floor(e)%20==0)

{ return e ;}

else

{ return """" ;}}))

.call(g=>g.select("".domain"").remove())

.call(g=>g.selectAll("".tick line"").clone()

.lower()

   .attr(""stroke-opacity"",tickOpacity))

   ;

var gY= svg

.append (""g"")

.call(yAxis)

.call(g=>g.select("".domain"").remove())

;

});

</script></body></html>"
