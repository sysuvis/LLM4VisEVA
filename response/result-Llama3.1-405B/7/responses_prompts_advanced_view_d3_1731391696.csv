Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,advanced view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      shape-rendering: crispEdges;
    }
    
    .axis text {
      font-size: 12px;
    }
    
    .tooltip {
      position: absolute;
      padding: 2px;
      font-size: 12px;
      background-color: #fff;
      border-radius: 5px;
      box-shadow: 0px 0px 10px rgba(0,0,0,0.2);
    }
    
     /* Add this CSS rule */
     g.tick line{
       opacity :1
     }
     
     /* Add this CSS rule */
     path.domain{
       stroke : none
     }

</style>

</head>

<body>

<div id=""scatterplot""></div>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script>

// Set the dimensions and margins of the graph
var margin = {top:20,right :20,bottom :30,left :40},
width =500-margin.left-margin.right,
height=500-margin.top-margin.bottom;

// Append the svg object to the body of the page
var svg=d3.select(""#scatterplot"")
.append(""svg"")
.attr(""width"",width+margin.left+margin.right)
.attr(""height"",height+margin.top+margin.bottom)
.append(""g"")
.attr(""transform"",
""translate(""+margin.left+"",""+margin.top+"")"");

// Load data
d3.csv('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv').then(function(data){

data.forEach(function(d){
d['Net Income']=parseFloat(d['Net Income']);
d['Revenue']=parseFloat(d['Revenue']);
});

// Add X axis

var x=d3.scaleLinear()
.domain([Math.min(...data.map(x=>x[""Revenue""])),Math.max(...data.map(x=>x[""Revenue""]))])
.range([0,width]);

svg.append(""g"")
.attr(""transform"",""translate(0,""+height+"")"")

.call(d3.axisBottom(x));

svg.selectAll("".tick line"").attr('y2',-height);

//Add Y axis

var y=d3.scaleLinear()
.domain([Math.min(...data.map(x=>x[""Net Income""])),Math.max(...data.map(x=>x[""Net Income""]))])
.range([height,0]);

svg.append(""g"")

.call(d3.axisLeft(y));

svg.selectAll("".tick line"").attr('x2',width);

//Add dots

svg.selectAll('circle')
.data(data)
.enter()
.append('circle')
.attr('cx',function(d){return x(parseFloat ( d [' Revenue ' ] ) ) ; } )
.attr (' cy ', function ( d ) { return y(parseFloat ( d [' Net Income ' ] ) ) ; } )
.on ("" mouseover "", function(event,d) {

const[x,y]=d3.pointer(event,this);
const tooltip=d3.select('#scatterplot')
.append (' div ')
.style (' position ',' absolute ')
.style (' background-color ',' white ')
.style (' border-radius ','5 px ')
.style (' padding ','5 px ');

tooltip.html(`X:${parseFloat ( d [' Revenue ' ] ) } ,Y:${parseFloat ( d [' Net Income ' ] ) } `)

.style ("" left "",(event.clientX)+"" px "")
.style ("" top "",(event.clientY)+"" px "");

})

.on ("" mousemove "", function(event,d) {

const[x,y]=d3.pointer(event,this);
const tooltip=d3.select('.tooltip');

tooltip.html(`X:${parseFloat ( d [' Revenue ' ] ) } ,Y:${parseFloat ( d [' Net Income ' ] ) } `)

.style ("" left "",(event.clientX)+"" px "")
.style ("" top "",(event.clientY)+"" px "");

})

.on ("" mouseout "", function() {

const tooltip=d3.select('.tooltip');
if(tooltip){
tooltip.remove();
}

});

});

</script></body></html>"
2,scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,advanced view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .brush {
      fill-opacity: .125;
      stroke: #666;
      shape-rendering: crispEdges;
    }
    
    .brush .extent {
      fill-opacity: .125;
      stroke: #fff;
      shape-rendering: crispEdges;
    }
  </style>
</head>

<body>
  <svg width=""800"" height=""600""></svg>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script>

let margin = {top: 20, right: 20, bottom: 30, left: 40};
let width = +document.querySelector('svg').getAttribute('width') - margin.left - margin.right,
height = +document.querySelector('svg').getAttribute('height') - margin.top - margin.bottom;

let svg = d3.select(""svg"")
.append(""g"")
.attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");

let xScale = d3.scaleLinear()
.range([0, width]);

let yScale = d3.scaleLinear()
.range([height,0]);

d3.csv('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
.then(data => {

data.forEach(d => {
d['Net Income'] = parseFloat(d['Net Income']);
d.Revenue=parseFloat(d.Revenue);
});

xScale.domain([0,d3.max(data,d=>d.Revenue)]);
yScale.domain([-100000000,d3.max(data,d=>d['Net Income'])]);

// Add x-axis
svg.append(""g"")
.attr(""transform"", ""translate(0,""+height+"")"")
.call(d3.axisBottom(xScale));

// Add y-axis
svg.append(""g"")
.call(d3.axisLeft(yScale));

// Scatterplot
var brush=d3.brush().on('end',updateChart);

var scatter= svg.selectAll("".scatter"").data(data).enter().append(""circle"").attr(
""class"",""scatter""
).attr(
""cx"",function (d) {return xScale ( d. Revenue);}). attr (
""cy"",function (d) {return y Scale ( d ["" NetIncome""]);}). attr (
""r "",5). attr (""fill"",""#6495ED"");

scatter.call(brush);

function updateChart() {

const selection=d.event.selection;

if (!selection) {

if (!idleTimeout)
return idleTimeout=setTimeout(idledrawingsvg.transition().duration(1000));}

const [[x0,y0],[x1,y1]]=selection;

scatter.classed (""selected "", function (s){ return s.cx>=x Scale.invert(xO)&&s.cx<=x Scale.invert(xl)&&s.cy>=y Scale.invert(yO)&&s.cy<=y Scale.invert(y1);});}

function idledrawingsvg.transition().duration(10000)

idleTimeout=null;}})

</script></body></html>"
3,scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,advanced view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .scatterplot {
      width: 800px;
      height: 600px;
      border: 1px solid #ddd;
    }
    
    .axis path, .axis line {
      fill: none;
      stroke: #777;
      shape-rendering: crispEdges;
    }
    
    .axis text {
      font-size: 12px;
    }
    
    .dot {
      stroke-width: 1.5px;
    }
    
     /* Add hover effect */
     .dot:hover {
       fill-opacity:.5; 
     } 
     
     /* Add tooltip */
     div.tooltip {	
       position:absolute;			
       text-align:center;			
       width:auto;					
       height:auto;					
       padding:.2em;				
       font-size:.9em;		
       background-color:#fffaf0 ;	
        border-radius:.25rem ;
        box-shadow :0.5rem ;
        pointer-events:none ;		
         opacity:.9 ;		
         color:black ;
          z-index :10 ;
           }	
   </style>

</head>

<body>

<div class=""scatterplot""></div>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script>
  
// Set the dimensions and margins of the graph
var margin = {top:20,right :20,bottom :30,left :40} ,width =800-margin.left -margin.right ,height =600-margin.top-margin.bottom ;

// Append the svg object to the body of the page
var svg=d3.select('.scatterplot')
.append('svg')
.attr('width',width +margin.left +margin.right )
.attr('height',height +margin.top+margin.bottom )
.append(""g"")
.attr(""transform"",
""translate(""+ margin.left+"",""+ margin.top+"")"");

// Load data
d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(function(data) {

data.forEach(function(d){
d['Net Income']=+d['Net Income'];
d['Revenue']=+d['Revenue'];
});

// Add X axis
var x=d3.scaleLinear()
.domain([0,d3.max(data,function(d){return d[""Revenue""];})])
.range([0,width])
.padding(0.2);
svg.append(""g"")
.attr(""transform"",""translate(0,""+ height+"")"")
.call(d3.axisBottom(x).tickFormat(function(d){return ""$""+ d;}));

// Add Y axis
var y=d3.scaleLinear()
.domain([Math.min(0,d3.min(data,function(d){return d[""Net Income""]})) ,Math.max(0,d3.max(data,function (d){ return d[""Net Income""]}))])
.range([height,0]);
svg.append(""g"")
.call(d3.axisLeft(y).tickFormat(function (d) { return ""$"" + d;}));



 // Define a div for tooltips and call it 'tooltip'
 var div = d3.select("".scatterplot"")	
            .append('div')	
           	.style('opacity',1)
            	.classed ('tooltip' ,true ) ;



 //Add dots with mouseover and mouseout event handlers that change opacity when events occur.
 svg.selectAll("".dot"")
.data(data)
.enter().append (""circle "")
.classed ('dot' ,true )
.style (""fill"",function (d) { if (Number.isInteger((parseInt(Math.random ()*100)))){ return ""red "";} else { return ""blue "";}})
.on ('mouseover' ,function(event,d){
	div.transition()		
                .duration(200)		
               	.style (""opacity"",.9);
	div.html(""<strong>Company:</strong><span style='color:red'>"" + d.Company+""</span><br>""+
 ""<strong>Industry:</strong><span style='color:red'>""+	d.Industry+""</span>""+""<br>""+
 ""<strong>Employee Count:</strong><span style='color:red'>""+	d[""Employee Count""]+""</span>""+""<br>""+
 ""<strong>Stock Price:</strong><span style='color:red'>""+	d[""Stock Price""]+""</span>"")	
           	.style (""left"",(event.pageX)+""px"")			 
           	.style (""top"",(event.pageY-28)+""px"");})
.on ('mouseout' ,function(event,d){
	div.transition()		
               			.duration (500 ) 		
              			.style (""opacity"",1);})
.merge(svg.selectAll("".dot""))
.transition ()
.delay ((_,i)=>i*10)
.duration (10000)
.ease (t=>t*t*t*t*t*t)
.attr ('cx',function(d,i){return x(+data[i]['Revenue']);})
.attr ('cy',function(d,i){return y(+data[i]['Net Income']);})
.attr ('r','8');





});

</script></body></html>"
4,scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Net Income and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,advanced view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot with External Links and Tooltips</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .tooltip {
      position: absolute;
      background-color: #f9f9f9;
      border: 1px solid #ccc;
      padding: 2px;
      font-size: 12px;
    }
  </style>
</head>

<body>

<svg width=""800"" height=""600""></svg>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script>

// Set the dimensions and margins of the graph
var margin = {top: 20, right: 20, bottom: 30, left:40},
width = +svg.attr(""width"") - margin.left - margin.right,
height = +svg.attr(""height"") - margin.top - margin.bottom;

// Append a 'group' element to 'svg'
// Moves the 'group' element to the top left margin
var g = svg.append(""g"")
.attr(""transform"", ""translate(""+margin.left+"",""+margin.top+"")"");

// Load data from CSV file
d3.csv('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
.then(function(data) {

data.forEach(function(d) {
d['Net Income'] = +d['Net Income'];
d.Revenue = +d.Revenue;

});

var xScale = d3.scaleLinear()
.domain([0,d3.max(data,function(d){return d.Revenue;})])
.range([0,width]);

var yScale= d3.scaleLinear()
.domain([0,d3.max(data,function(d){return d['Net Income'];})])
.range([height,0]);

g.append('g')
.call(d3.axisBottom(xScale))
.attr('transform','translate(0,'+height+')');

g.append('g')
.call(d3.axisLeft(yScale));

var div=d3.select('body').append('div').attr('class','tooltip').style('opacity',0);

g.selectAll('.scatter')
.data(data)
.enter().append(""circle"")
.style(""fill"",""blue"")
.style(""stroke"",""black"")
.style(""stroke-width"",1)
.on (""mouseover"",function(event,d){
div.transition().duration(200).style ('opacity',.9);
div.html('<strong>Company:</strong>'+ d.Company+'<br><strong>Revenue:</strong>'+formatNumber (event.target.__data__.Revenue)+'<br><strong>Net Income:</strong>'+formatNumber (event.target.__data__['Net Income']))
.style ('left',(event.pageX)+'px')
.style ('top',(event.pageY-28)+'px');
})
.on (""mouseout"",function(event,d){
div.transition().duration(500).style ('opacity',0);
})
.on (""click"",(e)=>{
window.open(`https://www.google.com/search?q=${e.target.__data__.Company}`, '_blank');
})

.merge(g.selectAll('.scatter'))
.transition()
.duration(100)
.delay((_,i)=>i*10)
.attr (""cx"",(function (d){return xScale (d.Revenue);}))
.attr (""cy"",(function (d){return yScale (d ['Net Income']);}))
.attr (""r"",5);

});

</script></body></html>"
5,scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot with query widgets showing the Net Income and Revenue of the given dataset. Add a slider to represent the Quarter.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Financial Data Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .slider-container {
      margin-bottom: 20px;
    }
  </style>
</head>
<body>
  <div class=""slider-container"">
    <label for=""quarter-slider"">Quarter:</label>
    <input type=""range"" id=""quarter-slider"" min=""1"" max=""4"" value=""1"">
    <span id=""quarter-value"">Q1</span>
  </div>
  <svg width=""800"" height=""600"" id=""scatterplot""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    // Load data
    d3.csv('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
      .then(data => {
        data.forEach(d => {
          d['Net Income'] = +d['Net Income'];
          d['Revenue'] = +d['Revenue'];
          d['Quarter'] = +d['Quarter'].slice(1);
        });
        
        // Create scales
        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Revenue'])])
          .range([0, 700]);
        
        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Net Income'])])
          .range([550, 0]);
        
        // Create axis
        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);
        
        // Create scatterplot
        const svg = d3.select('#scatterplot');
        const g = svg.append('g')
          .attr('transform', 'translate(50, 50)');
        
        g.append('g')
          .attr('id', 'x-axis')
          .attr('transform', 'translate(0, 550)')
          .call(xAxis);
        
        g.append('g')
          .attr('id', 'y-axis')
          .call(yAxis);
        
        // Add data points
        const points = g.selectAll('circle')
          .data(data)
          .enter()
          .append('circle')
          .attr('cx', d => xScale(d['Revenue']))
          .attr('cy', d => yScale(d['Net Income']))
          .attr('r', 5)
          .attr('fill', 'steelblue')
          .attr('opacity', d => d['Quarter'] === 1 ? 1 : 0);
        
        // Add slider event listener
        d3.select('#quarter-slider')
          .on('input', () => {
            const quarter = +d3.select('#quarter-slider').property('value');
            d3.select('#quarter-value').text(`Q${quarter}`);
            points.attr('opacity', d => d['Quarter'] === quarter ? 1 : 0);
          });
      })
      .catch(error => console.error(error));
  </script>
</body>
</html>
```"
6,scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot showing the Net Income of Alpha Inc. Add animated transitions that connect these points using lines in order.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Net Income of Alpha Inc.</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .scatterplot {
      width: 800px;
      height: 600px;
      margin: 50px auto;
    }
    
    .scatterplot .axis path,
    .scatterplot .axis line {
      fill: none;
      stroke: #777;
      shape-rendering: crispEdges;
    }
    
    .scatterplot .axis text {
      font-size: 12px;
    }
  </style>
</head>
<body>
  <div class=""scatterplot"" id=""scatterplot""></div>
  
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    // Load data
    d3.csv('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
      .then(data => {
        // Filter data for Alpha Inc.
        const alphaData = data.filter(d => d.Company === 'Alpha Inc.');
        
        // Convert data types
        alphaData.forEach(d => {
          d['Net Income'] = parseFloat(d['Net Income']);
          d['Quarter'] = parseInt(d['Quarter'].split(' ')[1]);
        });
        
        // Sort data by Quarter
        alphaData.sort((a, b) => a['Quarter'] - b['Quarter']);
        
        // Create SVG
        const margin = { top: 50, right: 50, bottom: 50, left: 50 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;
        const svg = d3.select('#scatterplot')
          .append('svg')
          .attr('width', width + margin.left + margin.right)
          .attr('height', height + margin.top + margin.bottom)
          .append('g')
          .attr('transform', `translate(${margin.left}, ${margin.top})`);
        
        // Create scales
        const xScale = d3.scaleLinear()
          .domain(d3.extent(alphaData, d => d['Quarter']))
          .range([0, width]);
        const yScale = d3.scaleLinear()
          .domain(d3.extent(alphaData, d => d['Net Income']))
          .range([height, 0]);
        
        // Create axes
        const xAxis = d3.axisBottom(xScale)
          .ticks(alphaData.length);
        const yAxis = d3.axisLeft(yScale);
        svg.append('g')
          .attr('class', 'axis')
          .attr('transform', `translate(0, ${height})`)
          .call(xAxis);
        svg.append('g')
          .attr('class', 'axis')
          .call(yAxis);
        
        // Create line
        const line = d3.line()
          .x(d => xScale(d['Quarter']))
          .y(d => yScale(d['Net Income']));
        
        // Create path
        svg.append('path')
          .datum(alphaData)
          .attr('fill', 'none')
          .attr('stroke', 'steelblue')
          .attr('stroke-width', 2)
          .attr('d', line);
        
        // Create circles
        svg.selectAll('circle')
          .data(alphaData)
          .enter()
          .append('circle')
          .attr('cx', d => xScale(d['Quarter']))
          .attr('cy', d => yScale(d['Net Income']))
          .attr('r', 5)
          .attr('fill', 'steelblue');
      });
  </script>
</body>
</html>
```"
7,line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Net Income of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,advanced view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Net Income Line Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .line {
      fill: none;
      stroke-width: 2;
    }
    
    .highlight {
      stroke-width: 4;
    }
    
    .axis path, .axis line {
      fill: none;
      stroke: #777;
      shape-rendering: crispEdges;
    }
    
    .axis text {
      font-size: 12px;
    }
  </style>
</head>

<body>
<svg width=""800"" height=""600""></svg>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script>

const margin = { top: 20, right: 20, bottom: 30, left:40 };
const width = document.body.clientWidth - margin.left - margin.right; 
const height = document.body.clientHeight - margin.top - margin.bottom;

let svg = d3.select(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", ""translate(""+margin.left+"",""+margin.top+"")"");

let xScale = d3.scalePoint()
              // Set the domain after loading data
              // Set the range after loading data
              ;

let yScale = d3.scaleLinear()
               // Set the domain after loading data
               // Set the range after loading data
               ;

// Load Data and create chart elements based on it.
d3.csv('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
.then(data => {

data.forEach(d => {

// Convert string to number for numerical columns.
d['Net Income'] = Number(d['Net Income']);
});

// Get unique company names for multi-series line chart.
let companies = [...new Set(data.map(d => d.Company))];

xScale.domain([...new Set(data.map(d => d.Quarter))])
     // Adjusted range to fit within margins and accommodate labels.
     .range([0,width-margin.right-margin.left]);

yScale.domain([Math.min(...data.map(d=>d['Net Income'])), Math.max(...data.map(d=>d['Net Income']))])
.range([height-margin.bottom-margin.top,0]);

// Create lines for each company.

companies.forEach(company => {

let lineData=data.filter(item=>item.Company===company);

var line=d3.line()
.x(function (d) {return xScale (d.Quarter);})
.y(function (d) {return yScale (Number(d[""Net Income""]));});

svg.append('path')
.datum(lineData)
.attr('class', 'line')
.attr('stroke', ()=>'#'+Math.floor(Math.random()*16777215).toString(16))
.on('mouseover', function() {

this.classList.add ('highlight');

})
.on ('mouseout' , function (){

this.classList.remove ('highlight');

})

.attr (""id"" , company)

.attr (""fill"" ,""none"")

.transition()

.duration(1000)

.delay((company.indexOf(company))*100)

.attrTween (""stroke-dasharray"" ,function(){

var len=this.getTotalLength();

return function(t){

return (t*len)+"",""+(len-(t*len));

};

})

.transition()

.delay(2000)

.duration(1000)

.ease (d3.easeLinear )

.style (""opacity"" ,""1"")

.style (""stroke-dasharray"",""none"")

.style (""pointer-events"",""auto"")

.call(

transition=>

transition

.selectAll ('path')

.interrupt()

);

svg.append ('text')

.text(company+"" Net income over time."")

.datum(lineData[lineData.length-1])

.attr(""transform"",(function(){

if(xScale(lineData[lineData.length-1].Quarter)>width/2){

return ""translate(""+xScale(lineData[lineData.length-1].Quarter)+"",""+yScale(Number(lineData[lineData.length-1][""NetIncome""]))+"")rotate(-90)"";

}

else{

return ""translate(""+xScale(lineDatat[lineDatat.length-1].Quarter)+"",""+yScal(Number(linedata[linedata.lenght-1][""netincome""]))+ "")rotate(-45)"";

}

}))

.classed(company,true);

});

const xAxis=d3.axisBottom(xscale).ticks(width>500?undefined :5);
const yAxis=d3.axisLeft(yscale).ticks(height>300?undefined :5);

svg.append(g)
.call(xAxis)
.classed(x axis true )
.selectAll(text:not(.domain))
.remove();

svg.append(g)
.call(yAxis)
.classed(y axis true );

});
</script></body></html>"
8,bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,advanced view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Net Income Bar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .bar {
      fill: steelblue;
    }
    
    .bar:hover {
      fill: brown;
    }
    
    .axis--x path {
      display: none;
    }
  </style>
</head>

<body>
<svg width=""800"" height=""600""></svg>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script>

var svg = d3.select(""svg""),
margin = {top: 20, right: 20, bottom: 30, left: 40},
width = +svg.attr(""width"") - margin.left - margin.right,
height = +svg.attr(""height"") - margin.top - margin.bottom;

var xScale = d3.scaleBand().range([0, width]).padding(0.1),
yScale = d3.scaleLinear().range([height, 0]);

var g = svg.append(""g"")
.attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");

d3.csv('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv').then(function(data) {

data.forEach(function(d) {
d['Net Income'] = parseInt(d['Net Income']);
});

data.sort(function(a,b) { return b['Net Income']-a['Net Income']; });

xScale.domain(data.map(function(d) { return d.Company; }));
yScale.domain([0, d3.max(data,function(d){return d['Net Income'];})]);

g.append(""g"")
.attr(""class"", ""axis axis--x"")
.attr(""transform"", ""translate(0,"" + height + "")"")
.call(d3.axisBottom(xScale));

g.append('text')
.text('Company')
.style('font-size', '12px')
.style('fill', '#333')
.style('font-weight', 'bold')
.attr('transform','translate('+ (width /2)+','+(height+35)+')');

g.append(""g"")
.call(d3.axisLeft(yScale).ticks(null,""s""))
.append (""text"")
.text ('Revenue (Billions)')
.style ('font-size' ,'12px ')
.style ('fill','#333 ')
.style ('font-weight ','bold ')
.attr (""transform"",""rotate(-90)"")
.attr (""y"",-30)
;

var bars=g.selectAll("".bar"").data(data).enter()
.append (""rect "")
.classed (""bar "",true )
.on ('mouseover ',function (d,i ){
bars.filter ((dd ,ii )=>ii !==i ).transition ()
.duration (200)
.delay (100)
.transition ()
.duration (200)
.delay (100);
})
.on ('mouseout ',function (){
bars.transition ()
.duration (.5E2 );
});

bars.transition()
.delay((_, i) => i *50 )
.duration(500)

bars
.merge(bars)
.transition()
.delay((_, i) => i *50 )
.duration(500)

bars
.merge(bars)
.transition()
.delay((_, i) => i *50 )
.duration(500)

bars
.merge(bars)
.transition()
.delay((_, i) => i *50 )
.duration(500)

})

</script></body></html>"
9,bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,advanced view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Net Income Bar Chart</title>
  <style>
    /* add some basic styling to make the chart look decent */
    body {
      font-family: Arial, sans-serif;
    }
    
    .bar {
      fill: steelblue;
    }
    
    .bar:hover {
      fill: brown;
    }
    
    .axis text {
      font-size: 12px;
    }
    
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
      shape-rendering: crispEdges;
    }
  </style>
</head>

<body>

<svg width=""800"" height=""600""></svg>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script>

// Set up SVG
const margin = { top: 20, right: 20, bottom: 30, left: 40 };
const width = +svg.attr(""width"") - margin.left - margin.right;
const height = +svg.attr(""height"") - margin.top - margin.bottom;

// Load data
d3.csv('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
.then(data => {

data.forEach(d => d['Net Income'] = +d['Net Income']);

// Filter data for Q1-2021
const q12021Data = data.filter(d => d.Quarter === 'Q1-2021');

// Sort by Net Income in descending order initially
q12021Data.sort((a,b) => b['Net Income'] - a['Net Income']);

// Scales and axes
const xScale = d3.scaleBand()
.domain(q12021Data.map(d => d.Company))
.range([0, width])
.padding(0.2);

const yScale = d3.scaleLinear()
.domain([0, d3.max(q12021Data, d => Math.abs(d['Net Income']))])
.range([height,0]);

g.append(""g"")
.attr(""transform"", `translate(0, ${height})`)
.call(d3.axisBottom(xScale));

g.append(""g"")
.call(d3.axisLeft(yScale));

// Bars with drag functionality

let barsGroup;

barsGroup.selectAll("".bar"")
.data(q12021Data)
.enter().append('rect')
.classed('bar', true)
.attr('x', (d,i) => xScale.bandwidth() * i)
.attr('y', (d,i) => yScale(Math.abs(d[""Net Income""])))
.attr('width', xScale.bandwidth())
.attr('height', (d,i) => height-yScale(Math.abs(d[""NetIncome""])))


barsGroup.selectAll('.bar')
.call(
	drag()
	.on(""start"", dragstarted)
	.on(""drag"", dragged)
	.on(""end"", dragended)

function dragstarted(event,d){
	barsGroup.selectAll('.bar').raise();
}

function dragged(event,d){
	const currentX=event.x; // mouse position on the X axis

	const rectWidth=xscale.bandwith();

	let index= Math.floor(currentX / rectWidth);

	if(index>=q12021data.length || index<0){
	index=clamp(index , [o,q12021data.length]);
}

	q12021data.splice(index,o,d);
	q12001data.splice(oldIndex,o);

	updateBars();
}

function clamp(value,[min,max]){
	return Math.min(max.Math.max(min,value));
}
function updateBars(){
	barsgroup.selectall('.bar')
	.transition()
.duration(100)

.data(q102021ata,(key)=key.company)

.order()

.transition()

.duration(100)

.attrs({
	x:(di)=xscale(di.company),
	y:(di)=yscale(math.abs(di.net income)),
	width:xscale.bandwith(),
	height:(di)=heighr-yscale(math.abs(di.net income))
})

barsgroup.selectall(.text).remove();

barsgroup.selectall(.text).remove();

barsgroup.selectall(.text')

.data(q102021ata,(key)=key.company)

.enter().append(text')

.attrs({
	x:(di)=xscale(di.company)+xscale.bandwith()/2,
	y(height+25),
	fill:black',
	text-anchor:'middle'
})

.text((di)-di.net income);
}


</script></body></html>"
10,bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Net Income.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Net Income Bar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .bar {
      fill: steelblue;
    }
    
    .bar:hover {
      fill: brown;
    }
    
    .axis--x path {
      display: none;
    }
    
    select {
      position: absolute;
      top: 10px;
      left: 10px;
    }
  </style>
</head>
<body>
  <select id=""sort-select"">
    <option value=""asc"">Ascending</option>
    <option value=""desc"">Descending</option>
  </select>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;
    
    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);
    
    const x = d3.scaleBand()
      .range([0, width])
      .padding(0.2);
    
    const y = d3.scaleLinear()
      .range([height, 0]);
    
    const xAxis = d3.axisBottom(x);
    const yAxis = d3.axisLeft(y);
    
    svg.append(""g"")
      .attr(""class"", ""axis axis--x"")
      .attr(""transform"", `translate(0, ${height})`);
    
    svg.append(""g"")
      .attr(""class"", ""axis axis--y"");
    
    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"")
      .then(data => {
        data = data.filter(d => d.Quarter === ""Q1-2021"");
        data.forEach(d => {
          d[""Net Income""] = +d[""Net Income""];
        });
        
        x.domain(data.map(d => d.Company));
        y.domain([0, d3.max(data, d => d[""Net Income""])]).nice();
        
        svg.select("".axis--x"")
          .call(xAxis);
        
        svg.select("".axis--y"")
          .call(yAxis);
        
        const bars = svg.selectAll("".bar"")
          .data(data, d => d.Company);
        
        bars.enter()
          .append(""rect"")
          .attr(""class"", ""bar"")
          .attr(""x"", d => x(d.Company))
          .attr(""y"", height)
          .attr(""width"", x.bandwidth())
          .attr(""height"", 0)
          .transition()
          .duration(500)
          .attr(""y"", d => y(d[""Net Income""]))
          .attr(""height"", d => height - y(d[""Net Income""]));
        
        d3.select(""#sort-select"")
          .on(""change"", () => {
            const sortOrder = d3.select(""#sort-select"").property(""value"");
            data.sort((a, b) => sortOrder === ""asc"" ? a[""Net Income""] - b[""Net Income""] : b[""Net Income""] - a[""Net Income""]);
            
            x.domain(data.map(d => d.Company));
            
            svg.select("".axis--x"")
              .transition()
              .duration(500)
              .call(xAxis);
            
            bars.transition()
              .duration(500)
              .attr(""x"", d => x(d.Company));
          });
      });
  </script>
</body>
</html>
```"
