Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot that visualizes the relationship between Sales Figures and Hours Worked. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,advanced view,"<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>

    <script type=""text/javascript"">
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const salesFigures = rows.map(row => parseFloat(row[2]));
                const hoursWorked = rows.map(row => parseFloat(row[3]));

                var chartDom = document.getElementById('chart');
                var myChart = echarts.init(chartDom);
                var option;

option = {
  xAxis: {},
  yAxis: {},
  series: [
    {
      symbolSize: 20,
      data: salesFigures.map((sales, index) => [sales, hoursWorked[index]]),
      type: 'scatter'
    }
  ]
};

myChart.setOption(option);

myChart.on('mouseover', function (params) {
   // get the mouseover point
   var point = params.data;
   // highlight the value on the axis
   myChart.dispatchAction({
       type: 'highlight',
       seriesIndex: 0,
       dataIndex: salesFigures.indexOf(point[0])
   });
});

            });
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        </script>    
</body>    
</html>"
2,scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot that visualizes the relationship between Sales Figures and Hours Worked. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Scatterplot with Brushing</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""scatterplot"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const scatterData = rows.map(row => [parseFloat(row[2]), parseFloat(row[3])]);

                const chart = echarts.init(document.getElementById('scatterplot'));
                const option = {
                    title: {
                        text: 'Scatterplot of Sales Figures vs Hours Worked'
                    },
                    xAxis: {
                        name: 'Sales Figures'
                    },
                    yAxis: {
                        name: 'Hours Worked'
                    },
                    brush: {
                        toolbox: ['rect', 'polygon', 'lineX', 'lineY', 'keep', 'clear'],
                        xAxisIndex: 0,
                        yAxisIndex: 0,
                        brushLink: 'all',
                        throttleType: 'debounce',
                        throttleDelay: 300,
                        geoIndex: 0
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: scatterData,
                            brush: {
                                enabled: true
                            }
                        }
                    ]
                };

                chart.setOption(option);

                chart.on('brushSelected', params => {
                    console.log(params);
                });
            });
    </script>
</body>
</html>
```"
3,scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot that visualizes the relationship between Sales Figures and Hours Worked. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Scatterplot with Zooming</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const salesFigures = rows.map(row => parseFloat(row[2]));
                const hoursWorked = rows.map(row => parseFloat(row[3]));

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    title: {
                        text: 'Sales Figures vs Hours Worked'
                    },
                    xAxis: {
                        name: 'Hours Worked'
                    },
                    yAxis: {
                        name: 'Sales Figures'
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: hoursWorked.map((hours, index) => [hours, salesFigures[index]])
                        }
                    ],
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 100
                        }
                    ]
                };

                chart.setOption(option);
            });
    </script>
</body>
</html>
```"
4,scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Sales Figures and Hours Worked. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,advanced view,"<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot with External Links and Tooltips</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>

    <script type=""text/javascript"">
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const chartData = rows.map(row => ({
                    value: [parseFloat(row[2]), parseFloat(row[3])],
                    name: `Year: ${row[0]}, Department: ${row[1]}`,
                    link: `https://www.google.com/search?q=${row[0]}+${row[1]}`
                }));

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    title: {
                        text: 'Sales Figures vs Hours Worked'
                    },
                    tooltip: {
                        triggerOn:'click',
                        formatter(params) {
                            return `${params.data.name}<br>Sales Figures:${params.value[0]}<br>Hours Worked:${params.value[1]}`;
                        }
                    },
                    
series:[
{
type:'scatter',
data :chartData,
symbolSize :10,
emphasis:{
itemStyle:{
borderColor :'#fff',
borderWidth :2
}
}
}
],
xAxis:{
name :'Sales Figures'
},
yAxis:{
name :'Hours Worked'
},
toolbox:{feature:{saveAsImage:{}},right:'10%',top:'5%'}
};
chart.setOption(option);
chart.on('click', params=>{window.open(params.data.link);});
});
</script>

</body>

</html>"
5,scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot with query widgets showing the Sales Figures and Hours Worked of the given dataset. Add a slider to represent the Year.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Employee Performance Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""scatterplot"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const years = Array.from(new Set(rows.map(row => row[0]))).map(year => parseInt(year));
                const scatterData = rows.map(row => [parseFloat(row[2]), parseFloat(row[3])]);
                const yearData = rows.map(row => parseInt(row[0]));

                const myChart = echarts.init(document.getElementById('scatterplot'));
                const option = {
                    title: {
                        text: 'Employee Performance Scatterplot'
                    },
                    xAxis: {
                        name: 'Sales Figures'
                    },
                    yAxis: {
                        name: 'Hours Worked'
                    },
                    toolbox: {
                        feature: {
                            dataZoom: {}
                        }
                    },
                    dataZoom: [
                        {
                            type: 'slider',
                            xAxisIndex: 0,
                            filterMode: 'empty'
                        },
                        {
                            type: 'slider',
                            yAxisIndex: 0,
                            filterMode: 'empty'
                        }
                    ],
                    series: [
                        {
                            type: 'scatter',
                            data: scatterData,
                            symbolSize: 10
                        }
                    ],
                    visualMap: [
                        {
                            type: 'piecewise',
                            categories: years,
                            dimension: 2,
                            inRange: {
                                color: ['#bf4040', '#40bfbf']
                            },
                            outOfRange: {
                                color: ['#bf4040']
                            },
                            controller: {
                                inRange: {
                                    color: ['#bf4040', '#40bfbf']
                                },
                                outOfRange: {
                                    color: ['#bf4040']
                                }
                            }
                        }
                    ],
                    dataset: {
                        source: rows.map((row, index) => [scatterData[index][0], scatterData[index][1], yearData[index]])
                    },
                    slider: {
                        show: true,
                        xAxisIndex: [0],
                        yAxisIndex: [0],
                        visualMapIndex: [0],
                        piecewise: true,
                        categories: years,
                        startValue: Math.min(...years),
                        endValue: Math.max(...years),
                        backgroundColor: 'rgba(255,255,255,0.8)',
                        borderColor: '#ddd',
                        handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6V24.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',
                        handleSize: '120%',
                        handleStyle: {
                            color: '#fff',
                            shadowBlur: 3,
                            shadowColor: 'rgba(0, 0, 0, 0.6)',
                            shadowOffsetX: 2,
                            shadowOffsetY: 2
                        },
                        labelFormatter: '{value}'
                    }
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```"
6,scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot showing the Sales Figures of Marketing. Add animated transitions that connect these points using lines in order.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,advanced view,"<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>

    <script type=""text/javascript"">
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const marketingData = rows.filter(row => row[1] === 'Marketing');
                const salesFigures = marketingData.map(row => +row[2]);
                const years = marketingData.map(row => +row[0]);

                var chartDom = document.getElementById('chart');
var myChart = echarts.init(chartDom);
var option;

option = {
  xAxis: {
      type: 'category',
      data: years
  },
  yAxis: {},
  series: [
      {
          symbolSize:10,
          data:salesFigures,
          type:'scatter',
          animationDelay:function(idx){
              return idx*100;
          }
      }
      
]
};

option && myChart.setOption(option);

            });
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        

    
    

    
    

    
    

    
    

    
    

    
    

    
    

    
            

                
                    
                        
                    
                        
                    
                        
                    
                        
                    
                        
                    
                        
                    
                        

                
                    

                
                    

                
                    

                
                    

                
                    

                
                    

                
                    


                   
                
                    
    
                    
    
                    
    
                    
    
                    
    
                    
    
                    
    
                    
    
                

                   
                
                
                
                
                
                
                
                
                
                

                   
                
                
                
                
                
                
                
                

                   
                
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
					
					
					
					
					
					
					
					
					
					
					
					
    
					
    
					
    
					
    
					
    
					
    
					}
				}
			}
		});
	
		




        
        
        
        
        
        
        
        
        
        
        
        
        
        
        




        
        
        
        
        




        
        
        
        
        




        
        
        
        
        




        
        
        
        
        




        
        
        
        
        


        // Add this line to update the chart
        myChart.setOption(option);
    </script>

</body>

</html>"
7,line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Sales Figures of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,advanced view,"<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Employee Performance</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>

    <script type=""text/javascript"">
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const departments = Array.from(new Set(rows.map(row => row[1])));
                const seriesData = departments.map(department => {
                    return {
                        name: department,
                        type: 'line',
                        data: rows.filter(row => row[1] === department).map(row => [row[0], parseFloat(row[2])])
                    };
                });

                var chartDom = document.getElementById('chart');
                var myChart = echarts.init(chartDom);
                var option;

option && myChart.setOption(option);

option = {
  title: {
    text: 'Sales Figures'
  },
  tooltip: {
    triggerOn:'mousemove',
      formatter:function(params){
          return params.seriesName+"":""+params.value
      }
},
legend:{
data:['Sales Figures']
},
xAxis:{
type:'category',
data:[""2015"",""2016"",""2017"",""2018""]
},
yAxis:{
type:""value""
},
series:[
{
name:""Sales Figures"",
type:""line"",
emphasis:{
focus:""series""
},
data:[100,200,300,400]
}
]
};

myChart.setOption(option);

            });
            
var chartDom = document.getElementById('chart');
var myChart = echarts.init(chartDom);
var option;

option && myChart.setOption(option);

option={
tooltip:{triggerOn:'mousemove'},
legend:{orient:'vertical',left:'left'},
xAxis:{type:'category',data:['Mon','Tue','Wed','Thu','Fri']},
yAxis:{type:""value""},
series:[
{
name:"""",
emphasis:{focus:""series""},
data:[150,230,224,218,135],
smooth:true,
showSymbol:false,
stack:"""",
lineStyle:
{width:.5,color:""#5470c6""}
}
]
};
myChart.setOption(option);    
            
        </script>

</body>

</html>"
8,bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Bar Chart that visualizes the Sales Figures for each Department in 2020. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,advanced view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Employee Performance</title>
  <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
  <div id=""chart"" style=""width: 800px; height: 600px;""></div>

  <script type=""text/javascript"">
    fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
      .then(response => response.text())
      .then(data => {
        const rows = data.split('\n').slice(1).map(row => row.split(','));
        const departments = Array.from(new Set(rows.map(row => row[1])));
        const salesFigures = departments.map(department => {
          return rows.filter(row => row[1] === department && row[0] === '2020')
            .map(row => +row[2])
            .reduce((sum, value) => sum + value, 0);
        });

        var chartDom = document.getElementById('chart');
var myChart = echarts.init(chartDom);
var option;

option = {
xAxis: {
type: 'category',
data: departments
},
yAxis: {},
series: [
{
type: 'bar',
data: salesFigures
}
],
dataZoom:[
{
type:'inside'
}
]
};

option && myChart.setOption(option);

      });
</script>

</body>

</html>"
9,bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Bar Chart that visualizes the Sales Figures for each Department in 2020. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,advanced view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Employee Performance</title>
  <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
  <div id=""chart"" style=""width: 800px; height: 600px;""></div>

  <script type=""text/javascript"">
    fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
      .then(response => response.text())
      .then(data => {
        const rows = data.split('\n').slice(1).map(row => row.split(','));
        const departments = Array.from(new Set(rows.map(row => row[1])));
        const salesFigures = departments.map(department => {
          return rows.filter(row => row[1] === department && row[0] === '2020')
            .reduce((sum, row) => sum + parseFloat(row[2]), 0);
        });

        var chartDom = document.getElementById('chart');
var myChart = echarts.init(chartDom);
var option;

option = {
          xAxis: {
            type: 'category',
            data: departments
          },
          yAxis: {},
          series: [
            {
              type: 'bar',
              data: salesFigures,
              barWidth :30,
              itemStyle:{
                color:'#87CEEB'
              }
            }
          ],
};

option && myChart.setOption(option);

myChart.on('mousedown', function (params) {
    if(params.componentType === 'series'){

      let departmentIndex=params.dataIndex;
      let currentDepartment=departments[departmentIndex];
      let currentSalesFigure=salesFigures[departmentIndex];

      departments.splice(departmentIndex,1);
      salesFigures.splice(departmentIndex,1);

       myChart.setOption({
         xAxis:{
           data :departments
         },
         series:[
           {data:salesFigures}
         ]
       })
    }
});

document.addEventListener(""mousemove"",function(event){
   if(event.buttons==1){

     let x=event.clientX;
     let y=event.clientY;

     var domRect=myChart.getDom().getBoundingClientRect();
     var chartX=x-domRect.left;
     var chartY=y-domRect.top;

     var pointInPixel=[chartX,chartY];

   }

})

document.addEventListener(""mouseup"",function(event){
   if(event.buttons==0){

       console.log(""Mouse up!"")
   }

})

});
</script>

</body>

</html>"
10,bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Bar Chart that visualizes the Sales Figures for each Department in 2020. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Sales Figures.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,advanced view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Employee Performance</title>
  <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
  <div id=""chart"" style=""width: 800px; height: 600px;""></div>
  <select id=""sort-select"">
    <option value=""asc"">Ascending</option>
    <option value=""desc"">Descending</option>
  </select>

<script>

fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
.then(response => response.text())
.then(csv => {
const data = csv.split('\n').slice(1).map(row => row.split(','));
const departments = [...new Set(data.map(row => row[1]))];
const salesFigures = departments.map(department => {
const departmentData = data.filter(row => row[1] === department && row[0] === '2020');
return departmentData.reduce((acc, current) => acc + parseFloat(current[2]), 0);
});

let sortType = 'asc';
document.getElementById('sort-select').addEventListener('change', (e) => {
sortType = e.target.value;
updateChart();
});

function updateChart() {
if (sortType === 'asc') {
salesFigures.sort((a, b) => a - b);
} else if (sortType === 'desc') {
salesFigures.sort((a, b) => b - a);
}

const chartData = departments.map((department, index) => ({
name: department,
value: salesFigures[index]
}));

var chartDom = document.getElementById('chart');
var myChart = echarts.init(chartDom);
var option;

option= {

xAxis: {type:'category'},
yAxis:{},
series:[
{
type:'bar',
data:chartData
}
],
animationEasing:'elasticOut',
animationDelayUpdate:function(idx){return idx*5;}
};

myChart.setOption(option);

}

updateChart();

})

</script>

</body>

</html>"
