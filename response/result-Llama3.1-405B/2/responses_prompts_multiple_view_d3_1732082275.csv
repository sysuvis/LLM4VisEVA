Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Domestic Consumption and Exports, and a Bar Chart on the right that displays Country versus Domestic Consumption.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,multiple view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coffee Consumption Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .container {
      display: flex;
      justify-content: space-between;
    }
    
    .chart {
      width: 45%;
      margin: 20px;
    }
    
    .scatterplot {
      border: 1px solid #ddd;
      padding: 20px;
    }
    
    .bar-chart {
      border: 1px solid #ddd;
      padding: 20px;
    }
    
     /* Add some basic styling to make the charts look decent */
     circle {
       fill-opacity:0.5
     }

     /* bar chart */
     rect{
        fill-opacity:.5
     }

   </style>

</head>

<body>

<div class=""container"">
<div class=""chart scatterplot"">
<svg width=""500"" height=""350""></svg> 
</div> 

<div class= ""chart bar-chart""> 
<svg width = ""500"" height = ""350""></svg> 
</div> 

</div>

<script src=""https://d3js.org/d3.v7.min.js""></script>
<script>

// Load data
d3.csv('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
.then(data => {

data.forEach(d => {

d['Domestic Consumption'] = +d['Domestic Consumption'];
d['Exports'] = +d['Exports'];

});

// Scatterplot

const marginScatter = { top :50 , right :50 , bottom :50 , left :50 };
const widthScatter =500 - marginScatter.left -marginScatter.right ;
const heightScatter=350-marginScatter.top-marginScatter.bottom;

const svgScatter=d3.select('.scatterplot svg')
.append(""g"")
.attr(""transform"", `translate(${marginScatter.left}, ${marginScatter.top})`);

const xScale=d3.scaleLinear()
.domain([0,d3.max(data,d=> d[""Domestic Consumption""])])
.range([0,width]);

const yScale=d3.scaleLinear()
.domain([0,d3.max(data,d=> d[""Exports""])])
.range([height,0]);

svg.append(""g"")
.call(d3.axisBottom(xScale))
.attr(""transform"", `translate(0,${height})`);

svg.append(""g"")
.call(d3.axisLeft(yScale));

 svg.selectAll('circle')
.data(data)
.enter()
.append('circle')

.attr('cx', (d) => xScale(d[""Domestic Consumption""]))
.attr('cy', (d) => yScale(d[""Exports""]))
.attr ('r' ,10);

 // Bar Chart

 const marginBar={top :50,right :50,bottom :150,left :100};
 const widthBar=500-marginBar.left-marginBar.right ;
 const heightBar=350-marginBar.top-marginBar.bottom ;

 const svgBarchart=d3.select('.bar-chart svg ')
 .append (""g "")
 .attr (""transform "",` translate (${margin Bar. left },${margin Bar. top })`);

 const xBand=d33.scaleBand ()
.domain (data.map ( d=> d.Country ))
.range ([o,width Bar ])
.paddingInner (.2)
.paddingOuter (.2);

 const yscaleBarchart=d33.scaleLinear ()
.domain ([o,d33.max (data, d=> d ["" Domestic Consumption ""])])
.range ([height Bar,o ]);

 svqBarchart.selectAll ('rect ')
.data (data )
.enter ()
.append ('rect ')

.atte ('x ',( d )=> xBand( D.Country ))
.atte ('y ',( D )=> Yscale Barchart(D ["" Domestic consumption ""]))

.atte ('width ',xBand.bandwidth ())
.atte ('height ' ,(D)= > hegith Barchar t-Yscale Barchar t(D ["" Domestic consumption ""]));

svqBarchart.selectAll (""text "")
.data (data )
.enter ()
.appenid (""text "")

.text ((D)= >D.Country )

.atte (""x "",( D )=> Xband(D.Country)+ Xband.bandwidth () /2)

.atte (""y "", hegith Barchar t+30)

.style (""text-anchor "","" middle "");

svqBorchort.appendtig)
.calltiggaxisBottom(xBand))
.attretranstorm"",` translate(o,$ {hegiht Borchar} ))`;

svqBochort.appenidig)
.calltiggaxisleft(Yscate Bochort));

})

.catch(error => console.error(error));
  
 </script></body></html>"
2,scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Domestic Consumption and Exports, and a Bar Chart on the right that displays Country versus Domestic Consumption. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,multiple view,"<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Visualization</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .container {
            display: flex;
            justify-content: space-between;
        }
        
        .scatterplot {
            width: 50%;
            height: 500px;
            border: 1px solid #ddd;
        }
        
        .bar-chart {
            width: 50%;
            height: 500px;
            border: 1px solid #ddd;
        }
        
        .brush {
          fill-opacity: .125;
          stroke-opacity :1 ;
          stroke-width :2 ;
          pointer-events :all ;
      }

      </style>

</head>

<body>

<div class = ""container"" >
<svg class = ""scatterplot"" > </svg> 
<svg class = ""bar-chart"" > </svg> 
</div>

<script src = ""https://d3js.org/d3.v7.min.js"" > </script> 

<script >
let margin = { top :20 , right :20 , bottom :30 , left :40 } ,
widthScatterplot = document.querySelector('.scatterplot').clientWidth - margin.left - margin.right,
heightScatterplot = document.querySelector('.scatterplot').clientHeight - margin.top - margin.bottom,

widthBarChart= document.querySelector('.bar-chart').clientWidth-margin.left-margin.right,
heightBarChart=document.querySelector('.bar-chart').clientHeight-margin.top-margin.bottom;

let xScaleScatterplot=d3.scaleLinear()
.domain([0,10000])
.range([0,widthScatterplot]);

let yScaleScatterPlot=d3.scaleLinear()
.domain([0,10000])
.range([heightScatterPlot,0]);

let xScaleBarChart=d3.scaleBand()
.range([0,widthBarChart])
.padding(0.2);

let yScaleBarChart=d3.scaleLinear()
.range ([heightBarChart,0]);

const scatterPlotG=d3.select("".scatterPlot"")
.append(""g"")
.attr(""transform"",`translate(${margin.left},${margin.top})`);

const barCharG=d3.select("".bar-chart"")
.append(""g"")
.attr(""transform"",`translate(${margin.left},${margin.top})`);

d3.csv('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb
aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%252OConsumption.csv')
.then(data=>{

data.forEach(d => {

d['Domestic Consumption']=
parseFloat(d['Domestic Consumption']);
d['Exports']=parseFloat(d['Exports']);

});

xScaleBarChar.domain(data.map(d=>d.Country));

yScaleBarchart.domain ([o,d33.max(data,d=> d ['Domestic Consumption'])] );

const brush=d33.brush().extent([[o,o],[widthSctterplotheightSctterploth]])
.on (""start brush end "", brushed);

function brushed(event){
if (event.selection) {

const [[xO,yO],[xI,yI]]=event.selection;

scatterPlotG.selectAll('circle')
.classed ('selected', d => {

return xO<=xscaleScafterpot (d ['Domestic
Consumption']) && xScale Scatter plot (d ['Domestic
Consumption ']) <= XI &&
yI <=yscale Scatter plot ( d [ 'Exports ']) && yscale Scatter plot ( d [ ' Exports '] ) <=yO;

});

} else scatterPotG.selectAll ('circle ')
.classed ('selected ', false );

}

}

.catch(error => console.error(error));

</script>

</body>

</html>"
3,line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Domestic Consumption , while the pie chart represents the distribution of Exports.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,multiple view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coffee Consumption</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .chart-container {
      width: 800px;
      margin: 40px auto;
    }
    
    .line-chart {
      height: 400px;
      border-bottom: 1px solid #ccc;
    }
    
    .pie-chart {
      height: 400px;
    }
  </style>
</head>

<body>

<div class=""chart-container"">
  
</div>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script>

const margin = { top:20, right:20, bottom:30, left:40 };
const width = document.querySelector('.chart-container').offsetWidth - margin.left - margin.right;

const lineChartHeight = document.querySelector('.line-chart').offsetHeight - margin.top - margin.bottom;

const pieChartHeight = document.querySelector('.pie-chart').offsetHeight - margin.top -margin.bottom;

Promise.all([
fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
.then(response => response.text())
]).then(([csvText]) => {

const data = d3.csvParse(csvText);

data.forEach(d => {

d['Domestic Consumption'] = +d['Domestic Consumption'];

d['Exports'] = +d['Exports'];

});

drawLineChart(data);

drawPieChart(data);

});

function drawLineChart(data) {

const xScaleLine=d3.scalePoint()
.domain(data.map(d=> d.Year))
.range([0,width])
.padding(0.5)

const yScaleLine=d3.scaleLinear()
.domain([0,d3.max(data,d=> d[""Domestic Consumption""])])
.range([lineChartHeight,0])

let line=svg.selectAll(""path"")
.data([data])
.join(""path"")
.attr(""fill"",""none"")
.attr(""stroke"",""black"")

svg.selectAll("".x-axis"").remove()

svg.append(""g"")
.attr('transform',`translate(0 ${lineChartHeight})`)
.call(d3.axisBottom(xScaleLine))

svg.selectAll("".y-axis"").remove()

svg.append(""g"")
.call(d3.axisLeft(yScaleLine))

}

function drawPieChart(data) {

let pieData=data.map(item=> ({name:item.Country,value:item[""Exports""]}))

pieData.sort((a,b)=> b.value-a.value)

if(pieData.length>10){
pieData=pieData.slice(0,10)
}

let otherValue=data.reduce((accu,current)=> accu+current[""Exports""],0)-pieData.reduce((accu,current)=> accu+current.value,0)

if(otherValue> pieData[pieData.length-1].value){
pieData.push({name:""Other"",value})
}

if(pieDate.length>1){

let pie=d3.pie().sort(null).value(function (d){return d.value})

let arc=d3.arc().outerRadius(Math.min(width,pieChartheight)/2).innerRadius(50)

arc.data(pie(piedata)).enter().append('path')

.style('fill',function (d,i){return color(i)})

.transition()

.duration(10000)

.attrTween('d',arcTween)
}
}
</script></body></html>"
4,line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Domestic Consumption , while the pie chart represents the distribution of Exports. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Exports for the selected group.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,multiple view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coffee Consumption Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .chart-container {
      width: 800px;
      height: 600px;
      margin: 50px auto;
    }
    
    .line-chart {
      width: 100%;
      height: 60%;
      border-bottom: 1px solid #ccc;
    }
    
    .pie-chart {
      width: 100%;
      height: calc(40% - 20px);
    }
    
    /* Style the brush */
    .brush rect.selection {
        fill-opacity:.3; 
        stroke:#666; 
        shape-rendering:auto
     }  
     /* Style the brush handles */
     .brush-handle { 
       fill:#666; 
       stroke:none; 
       cursor:pointer
     }  
   </style>   
</head>

<body>   
<div class=""chart-container"">
   <!-- SVG for line chart -->
   <svg class=""line-chart""></svg>      
   <!-- SVG for pie chart -->
   <svg class=""pie-chart""></svg>      
</div>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script type='text/javascript'>
// Set up margins and dimensions for line chart
const marginLine = { top :20, right :30, bottom :30, left :40 };
const widthLine = document.querySelector('.line-chart').clientWidth - marginLine.left - marginLine.right ;
const heightLine = document.querySelector('.line-chart').clientHeight - marginLine.top - marginLine.bottom ;

// Set up margins and dimensions for pie chart
const marginPie = { top :0, right :0, bottom :0, left :-50 };
const widthPie = document.querySelector('.pie-chart').clientWidth +marginPie.left +marginPie.right ;
const heightPie = document.querySelector('.pie-chart').clientHeight +marginPie.top +marginPie.bottom ;

// Load data from CSV file
d3.csv('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
.then(data => {

data.forEach(d => {

d['Year'] =+ d['Year'];
d['Domestic Consumption'] =+ d['Domestic Consumption'];
d['Exports'] += d['Exports'];

});

// Create scales for line chart

let xScaleLine=d3.scaleLinear()
.domain([Math.min(...data.map(d=>d.Year)), Math.max(...data.map(d=>d.Year))])
.range([0,width]);

let yScaleLin=d3.scaleLinear()
.domain([Math.min(...data.map(d=>'Domestic Consumption')), Math.max(...data.map(d=>'Domestic Consumption'))])
.range([heightLin ,0]);

let xScaleBrush=d3.scaleLinear()
.domain(xScaleLin.domain())
.range(xScaleLin.range());

let brush=d3.brushX().extent([[xScaleBrush(1995),-10],[xScaleBrush(2015),height]])
.on(""brush"", brushed);

function brushed(event) {

if (event.sourceEvent && event.sourceEvent.type === ""zoom"") return;

var selection=event.selection;

if (!selection) return;

var selectedData=data.filter(function (p) {

return p.Year>=selection[0]&&p.Year<=selection[1];

});

update(selectedData);

}

function update(data){

draw_pie_chart(data)

}

draw_line_chart(data)

})

.catch(error => console.error('Error loading data:', error));

function draw_line_chart(data){

var svg=select("".lineChart"")

.append(""g"")
.attr(""transform"",""translate(""+margintop+"",""+margintop+"")"");

var path=svg.selectAll("".path"")
.data([data])
.enter()
.append(""path"")
.attr(""class"",""path"")
.attr(""fill"",""none"")
.attr(""stroke"",""#000000"")

.call(line)
.transition()

.duration(20000)
.ease(easeBounceOut)

.styleTween (""stroke-dasharray"", function() {

return interpolateString (""500,""+length,""500,""+length);

})

.transition()

.delay(20000)
.duration(30000)
.ease(easeBounceOut)

.styleTween (""stroke-dasharray"", function() {

return interpolateString (""500,""+length,""500,""+length);

})

.transition()

.delay(40000)
.duration(30000)
.ease(easeBounceOut)

.styleTween (""stroke-dasharray"", function() {

return interpolateString (""500,""+length,""500,""+length);

});

}

function draw_pie_chart(selectedData){

console.log(selectedData.length+"" ""+selectedData.keys())

arc.outerRadius(radius-10).innerRadius(radius-70);
labelArc.outerRadius(radius-40).innerRadius(radius-40);
arc.innerRadius(radius*2.5).outerRadius(radius*2.6);
labelArc.innerRadius(radius*2.7).outerRadius(radius*2.7); 

g.selectAll(""*"").remove();

g.selectAll("".arc"").append(path.arc())
.data(pie(selectedData))
.enter().append(path.arc())
.attr(attr.transform,function (t){ return translate(t.x,t.y)})
.each(function(t,i){
this._current=t.value})
.transition().duration(duration).attrTween(attr.d,function(t){
var i=interpolate(this._current,t.value); this._current=i(i); return arc(i)});
g.selectAll("".arc text"").append(text.text())
.data(pie(selectedData))
.enter().append(text.text()).attr(attr.transform,function (t){ return translate(t.x,t.y)}).
each(function(t,i){
this._current=t.value}).transition().duration(duration).
attr(attr.transform,function (t){ return translate(arc.centroid(t))}).
call(wrap,text.width());
}
</script></body></html>"
5,scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Domestic Consumption, Exports, Import Price, and Export Price. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,multiple view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot Matrix</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .matrix {
      display: flex;
      flex-wrap: wrap;
    }
    
    .cell {
      margin: 10px;
      border: 1px solid #ddd;
    }
    
    .brush rect.selection {
      fill-opacity: 0.3;
      stroke-opacity: 0.6;
    }
    
    .highlighted {
      fill-opacity: 1 !important;
      stroke-opacity: 1 !important;
    }
    
     /* Add this CSS rule */
     text { 
       font-size :12px; 
       text-anchor :middle; 
     } 
    
     /* Add this CSS rule */
     g.tick line { 
       stroke :lightgrey ; 
       opacity :0.7 ; 
     } 
    
     /* Add this CSS rule */
   </style>  
</head>

<body>

<div class=""matrix""></div>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script> 

let margin = {top:20, right :20, bottom :30, left :40 }, width =400-margin.left -margin.right , height =400-margin.top -margin.bottom ;

let xScale = d3.scaleLinear().range([0,width]);
let yScale = d3.scaleLinear().range([height ,0]);

let brushCell;

const matrixDiv = document.querySelector('.matrix');

d3.csv('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv').then(data => {

data.forEach(d => {

d['Domestic Consumption'] = +d['Domestic Consumption'];
d['Exports'] = +d['Exports'];
d['Import Price'] = +d['Import Price'];
d ['Export Price'] =+ d ['Export Price'];

});

const columns =[ 'Domestic Consumption' ,'Exports' ,'Import Price' ,'Export Price'];

columns.forEach((columnX,i) =>{

columns.forEach((columnY,j) =>{

if (i>= j) return;

const cellDiv=document.createElement('div');
cellDiv.className='cell';
matrixDiv.appendChild(cellDiv);

const svg=d3.select(cellDiv)
.append('svg')
.attr('width',width+margin.left+margin.right)
.attr ('height',height+margin.top + margin.bottom )
.append ('g')
.attr ('transform', `translate(${margin.left},${margin.top})`);

xScale.domain(d3.extent(data,d=> d[columnX]));
yScale.domain(d3.extent(data,d=> d[columnY]));

svg.selectAll('.dot')
.data(data)
.enter()
.append('circle')
.attr ('cx', d=> xScale ( d [ columnX ]))
.attr ('cy', d=> yScale ( d [ columnY ]))
.attr ('r',2);

if (!brushCell){
brushCell=svg.append(""g"")
.call(d3.brush()
.extent([[0,0],[width,height]])
.on(""start"", brushStart)
.on(""brush"", brushed));
}

function brushStart(){
 svg.selectAll('.dot').classed (""highlighted"" , false );
}

function brushed(event){
 const selection=event.selection;

 if (!selection){
 svg.selectAll('.dot').classed (""highlighted"" , false );
 return ;
 }

 const [[x0,y0],[x1,y1]]=selection;

 svg.selectAll("".dot"")
.classed (""highlighted"" ,( dot ) =>
x > x && dot.x< x && dot.y > y && dot.y< y
);
}
});
});
});

</script>  

</body>
</html>"
6,scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a brushable Scatterplot that visualizes the relationship between Domestic Consumption and Exports. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,multiple view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Brushable Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .scatterplot {
      width: 600px;
      height: 400px;
      border: 1px solid #ddd;
    }
    
    .brush {
      width: 600px;
      height: 50px;
      border: 1px solid #ddd;
    }
    
    table {
      border-collapse: collapse;
    }
    
    th, td {
      border: 1px solid #ddd;
      padding: 5px;
    }
    
     th{
       background-color:#f0f0f0
     }

     td{
       background-color:#ffffe6
     }

     
     
     
     
     
   </style>

 </head>

<body>

<svg class=""scatterplot""></svg>

<div class=""brush""></div>

<table id=""selected-points-table"">
<thead><tr><th>Year</th><th>Country</th><th>Domestic Consumption</th><th>Exports</th></tr></thead></table>


<script src=""https://d3js.org/d3.v7.min.js""></script>


<script>
const margin = { top :20,right :20,bottom :30,left :40};
const scatterplotWidth =600-margin.left-margin.right;

const scatterplotHeight=400-margin.top-margin.bottom;

const brushHeight=50;

let selectedPoints=[]

let svg=d3.select('.scatterplot')
.append('g')
.attr('transform',`translate(${margin.left},${margin.top})`);

let xScale=d3.scaleLinear()
.domain([0,10000])
.range([0,scatterplotWidth]);

let yScale=d3.scaleLinear()
.domain([0,10000])
.range([scatterplotHeight,0]);

svg.append('g')
.attr('transform',`translate(0${scatterplotHeight})`)
.call(d3.axisBottom(xScale));

svg.append('g')
.call(d3.axisLeft(yScale));

d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data=>{

data.forEach(d=>{
d['Domestic Consumption']=+d['Domestic Consumption'];
d['Exports']=+d['Exports'];
});

svg.selectAll('.point')

.data(data)
.enter()

.append(""circle"")
.attr(""cx"", d => xScale(d[""Domestic Consumption""]))
.attr(""cy"", d => yScale(d[""Exports""]))
.attr(""r"",5)
.on(""mouseover"",(event,d)=>{
console.log(`Country:${d.Country},Year:${d.Year}`);
})

.on(""mouseout"",(event,d)=>{
console.log(`Mouse out from Country:${d.Country},Year:${d.Year}`);
});

 const brush=d3.brushX()
.extent([[xScale.range()[0],-10],[xScale.range()[1],brushHeight]])
.on (""start brush end "",updateSelectedPoints);

 const gBrush=d3.select("".brush"")
 .append (""g"")
 .attr (""class"",""brush"")

 gBrush.call(brush)

 gBrush.selectAll ('rect ')
 .attr ('height ',30);

 function updateSelectedPoints({selection}){
 if(selection){
 selectedPoints=data.filter (p=>p ['Domestic Consumption ']>=selection[0]&& p ['Domestic Consumption ']<=selection[1]);
 }else{
 selectedPoints=data.slice (o);
 }

 updateTable(selectedPoints.slice(o ,20));
}

function updateTable(points){

 let rows = d3.select('#selected-points-table tbody').selectAll ('tr ').data(points);

 rows.exit().remove();

 let newRows=rows.enter().append ('tr ');

 newRows.append ('td ').text (p=>p.Year);
 newRows.append ('td ').text (p=>p.Country);
 newRows.append ('td ').text(p => p[""Domestic Consumption""]);
newRows.append('td').text(p => p.Exports);

rows=newRows.merge(rows)

rows.transition().duration(500).style('background-color','#add8e6');
}
});
</script>

</body>
</html>"
7,bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a horizontal Bar Chart that shows all the data concerning Domestic Consumption, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .main-svg {
            border: 1px solid lightgray;
        }
        
        .minimap-svg {
            border: 1px solid lightgray;
        }
    </style>
</head>
<body>
    <div id=""main-chart""></div>
    <div id=""minimap""></div>
    
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 50, right: 50, bottom: 50, left: 200 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;
        
        const minimapWidth = 200;
        const minimapHeight = 600 - margin.top - margin.bottom;
        
        const mainSvg = d3.select(""#main-chart"")
            .append(""svg"")
            .attr(""class"", ""main-svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);
        
        const minimapSvg = d3.select(""#minimap"")
            .append(""svg"")
            .attr(""class"", ""minimap-svg"")
            .attr(""width"", minimapWidth)
            .attr(""height"", minimapHeight + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(0, ${margin.top})`);
        
        const xScale = d3.scaleLinear()
            .range([0, width]);
        
        const yScale = d3.scaleBand()
            .range([0, height])
            .padding(0.2);
        
        const minimapXScale = d3.scaleLinear()
            .range([0, minimapWidth]);
        
        const minimapYScale = d3.scaleBand()
            .range([0, minimapHeight])
            .padding(0.2);
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"")
            .then(data => {
                data.forEach(d => {
                    d[""Domestic Consumption""] = +d[""Domestic Consumption""];
                });
                
                data.sort((a, b) => b[""Domestic Consumption""] - a[""Domestic Consumption""]);
                
                xScale.domain([0, d3.max(data, d => d[""Domestic Consumption""])]);
                yScale.domain(data.map(d => d.Country));
                
                minimapXScale.domain([0, d3.max(data, d => d[""Domestic Consumption""])]);
                minimapYScale.domain(data.map(d => d.Country));
                
                mainSvg.selectAll(""rect"")
                    .data(data)
                    .enter()
                    .append(""rect"")
                    .attr(""x"", 0)
                    .attr(""y"", d => yScale(d.Country))
                    .attr(""width"", d => xScale(d[""Domestic Consumption""]))
                    .attr(""height"", yScale.bandwidth());
                
                mainSvg.selectAll(""text"")
                    .data(data)
                    .enter()
                    .append(""text"")
                    .attr(""x"", -10)
                    .attr(""y"", d => yScale(d.Country) + yScale.bandwidth() / 2)
                    .attr(""text-anchor"", ""end"")
                    .attr(""dominant-baseline"", ""middle"")
                    .text(d => d.Country);
                
                minimapSvg.selectAll(""rect"")
                    .data(data)
                    .enter()
                    .append(""rect"")
                    .attr(""x"", 0)
                    .attr(""y"", d => minimapYScale(d.Country))
                    .attr(""width"", d => minimapXScale(d[""Domestic Consumption""]))
                    .attr(""height"", minimapYScale.bandwidth());
            });
    </script>
</body>
</html>
```"
