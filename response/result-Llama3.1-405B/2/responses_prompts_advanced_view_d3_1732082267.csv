Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Scatterplot that visualizes the relationship between Domestic Consumption and Exports. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Scatterplot</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .tooltip {
            position: absolute;
            font-size: 12px;
            padding: 2px;
            border: 1px solid #ddd;
            background-color: #f9f9f9;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 40 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;
        
        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);
        
        const xScale = d3.scaleLinear()
            .range([0, width]);
        
        const yScale = d3.scaleLinear()
            .range([height, 0]);
        
        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);
        
        svg.append(""g"")
            .attr(""transform"", `translate(0, ${height})`)
            .attr(""class"", ""x-axis"");
        
        svg.append(""g"")
            .attr(""class"", ""y-axis"");
        
        const tooltip = d3.select(""body"")
            .append(""div"")
            .attr(""class"", ""tooltip"")
            .style(""opacity"", 0);
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"")
            .then(data => {
                data.forEach(d => {
                    d[""Domestic Consumption""] = +d[""Domestic Consumption""];
                    d[""Exports""] = +d[""Exports""];
                });
                
                xScale.domain([0, d3.max(data, d => d[""Exports""]) * 1.1]);
                yScale.domain([0, d3.max(data, d => d[""Domestic Consumption""]) * 1.1]);
                
                svg.select("".x-axis"")
                    .call(xAxis);
                
                svg.select("".y-axis"")
                    .call(yAxis);
                
                svg.selectAll(""circle"")
                    .data(data)
                    .enter()
                    .append(""circle"")
                    .attr(""cx"", d => xScale(d[""Exports""]))
                    .attr(""cy"", d => yScale(d[""Domestic Consumption""]))
                    .attr(""r"", 5)
                    .on(""mouseover"", (event, d) => {
                        tooltip.transition()
                            .duration(200)
                            .style(""opacity"", 0.9);
                        
                        tooltip.html(`Domestic Consumption: ${d[""Domestic Consumption""]}<br>Exports: ${d[""Exports""]}`)
                            .style(""left"", (event.pageX + 5) + ""px"")
                            .style(""top"", (event.pageY - 28) + ""px"");
                        
                        svg.selectAll(""circle"")
                            .style(""opacity"", 0.5);
                        
                        d3.select(event.target)
                            .style(""opacity"", 1);
                        
                        svg.append(""line"")
                            .attr(""class"", ""hover-line"")
                            .attr(""x1"", 0)
                            .attr(""y1"", yScale(d[""Domestic Consumption""]))
                            .attr(""x2"", width)
                            .attr(""y2"", yScale(d[""Domestic Consumption""]))
                            .style(""stroke"", ""black"")
                            .style(""stroke-dasharray"", ""3,3"");
                        
                        svg.append(""line"")
                            .attr(""class"", ""hover-line"")
                            .attr(""x1"", xScale(d[""Exports""]))
                            .attr(""y1"", 0)
                            .attr(""x2"", xScale(d[""Exports""]))
                            .attr(""y2"", height)
                            .style(""stroke"", ""black"")
                            .style(""stroke-dasharray"", ""3,3"");
                    })
                    .on(""mouseout"", () => {
                        tooltip.transition()
                            .duration(500)
                            .style(""opacity"", 0);
                        
                        svg.selectAll(""circle"")
                            .style(""opacity"", 1);
                        
                        svg.selectAll("".hover-line"")
                            .remove();
                    });
            });
    </script>
</body>
</html>
```"
2,scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Scatterplot that visualizes the relationship between Domestic Consumption and Exports. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Scatterplot</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .brush {
            fill-opacity: 0.2;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600"" margin=""50""></svg>
    <div id=""selected-data""></div>

    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 50, right: 50, bottom: 50, left: 50 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

        const brush = d3.brush()
            .extent([[0, 0], [width, height]])
            .on(""brush"", brushed)
            .on(""end"", brushended);

        const brushGroup = svg.append(""g"")
            .attr(""class"", ""brush"")
            .call(brush);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"")
            .then(data => {
                data.forEach(d => {
                    d[""Domestic Consumption""] = +d[""Domestic Consumption""];
                    d[""Exports""] = +d[""Exports""];
                });

                const xScale = d3.scaleLinear()
                    .domain([0, d3.max(data, d => d[""Domestic Consumption""])])
                    .range([0, width]);

                const yScale = d3.scaleLinear()
                    .domain([0, d3.max(data, d => d[""Exports""])])
                    .range([height, 0]);

                svg.append(""g"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(d3.axisBottom(xScale).tickFormat(d3.format("".2s"")));

                svg.append(""g"")
                    .call(d3.axisLeft(yScale).tickFormat(d3.format("".2s"")));

                svg.selectAll(""circle"")
                    .data(data)
                    .enter()
                    .append(""circle"")
                    .attr(""cx"", d => xScale(d[""Domestic Consumption""]))
                    .attr(""cy"", d => yScale(d[""Exports""]))
                    .attr(""r"", 5);

                function brushed(event) {
                    const selection = event.selection;
                    if (selection) {
                        const x0 = xScale.invert(selection[0][0]);
                        const x1 = xScale.invert(selection[1][0]);
                        const y0 = yScale.invert(selection[1][1]);
                        const y1 = yScale.invert(selection[0][1]);

                        const selectedData = data.filter(d => x0 <= d[""Domestic Consumption""] && d[""Domestic Consumption""] <= x1 && y0 <= d[""Exports""] && d[""Exports""] <= y1);

                        d3.select(""#selected-data"")
                            .html(selectedData.map(d => `${d.Country}: Domestic Consumption = ${d[""Domestic Consumption""]}, Exports = ${d[""Exports""]}`).join(""<br>""));
                    }
                }

                function brushended(event) {
                    if (!event.selection) {
                        d3.select(""#selected-data"").html("""");
                    }
                }
            });
    </script>
</body>
</html>
```"
3,scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Scatterplot that visualizes the relationship between Domestic Consumption and Exports. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Scatterplot</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .scatterplot {
            width: 800px;
            height: 600px;
            border: 1px solid lightgray;
        }
    </style>
</head>
<body>
    <div class=""scatterplot"" id=""scatterplot""></div>
    
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        // Load data
        d3.csv('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
        .then(data => {
            // Convert data types
            data.forEach(d => {
                d['Domestic Consumption'] = parseFloat(d['Domestic Consumption']);
                d['Exports'] = parseFloat(d['Exports']);
            });
            
            // Create SVG
            const margin = { top: 50, right: 50, bottom: 50, left: 50 };
            const width = 800 - margin.left - margin.right;
            const height = 600 - margin.top - margin.bottom;
            const svg = d3.select('#scatterplot')
                .append('svg')
                .attr('width', width + margin.left + margin.right)
                .attr('height', height + margin.top + margin.bottom)
                .append('g')
                .attr('transform', `translate(${margin.left}, ${margin.top})`);
            
            // Create scales
            const xScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Domestic Consumption'])])
                .range([0, width]);
            const yScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Exports'])])
                .range([height, 0]);
            
            // Create axes
            const xAxis = d3.axisBottom(xScale);
            const yAxis = d3.axisLeft(yScale);
            svg.append('g')
                .attr('transform', `translate(0, ${height})`)
                .call(xAxis);
            svg.append('g')
                .call(yAxis);
            
            // Create scatterplot
            svg.selectAll('circle')
                .data(data)
                .enter()
                .append('circle')
                .attr('cx', d => xScale(d['Domestic Consumption']))
                .attr('cy', d => yScale(d['Exports']))
                .attr('r', 5)
                .attr('fill', 'steelblue');
            
            // Add zoom functionality
            const zoom = d3.zoom()
                .scaleExtent([1, 10])
                .on('zoom', (event) => {
                    svg.selectAll('circle')
                        .attr('transform', event.transform);
                    svg.selectAll('g')
                        .attr('transform', event.transform);
                });
            svg.call(zoom);
        })
        .catch(error => console.error(error));
    </script>
</body>
</html>
```"
4,scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Domestic Consumption and Exports. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption and Exports Scatterplot</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .tooltip {
            position: absolute;
            background-color: #f9f9f9;
            border: 1px solid #ccc;
            padding: 2px;
            font-size: 12px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 50, right: 50, bottom: 50, left: 50 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;
        
        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);
        
        const xScale = d3.scaleLinear()
            .range([0, width]);
        
        const yScale = d3.scaleLinear()
            .range([height, 0]);
        
        const tooltip = d3.select(""body"")
            .append(""div"")
            .attr(""class"", ""tooltip"")
            .style(""opacity"", 0);
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"")
            .then(data => {
                data.forEach(d => {
                    d[""Domestic Consumption""] = +d[""Domestic Consumption""];
                    d[""Exports""] = +d[""Exports""];
                });
                
                xScale.domain([0, d3.max(data, d => d[""Exports""]) * 1.1]);
                yScale.domain([0, d3.max(data, d => d[""Domestic Consumption""]) * 1.1]);
                
                svg.append(""g"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(d3.axisBottom(xScale).tickFormat(d3.format("".2s"")))
                    .selectAll(""text"")
                    .style(""text-anchor"", ""middle"");
                
                svg.append(""g"")
                    .call(d3.axisLeft(yScale).tickFormat(d3.format("".2s"")))
                    .selectAll(""text"")
                    .style(""text-anchor"", ""middle"");
                
                svg.selectAll(""circle"")
                    .data(data)
                    .enter()
                    .append(""circle"")
                    .attr(""cx"", d => xScale(d[""Exports""]))
                    .attr(""cy"", d => yScale(d[""Domestic Consumption""]))
                    .attr(""r"", 5)
                    .style(""fill"", ""steelblue"")
                    .style(""cursor"", ""pointer"")
                    .on(""mouseover"", (event, d) => {
                        tooltip.transition()
                            .duration(200)
                            .style(""opacity"", 0.9);
                        
                        tooltip.html(`Country: ${d.Country}<br>Domestic Consumption: ${d[""Domestic Consumption""]}<br>Exports: ${d[""Exports""]}`)
                            .style(""left"", (event.pageX + 5) + ""px"")
                            .style(""top"", (event.pageY - 28) + ""px"");
                    })
                    .on(""mouseout"", () => {
                        tooltip.transition()
                            .duration(500)
                            .style(""opacity"", 0);
                    })
                    .on(""click"", (event, d) => {
                        const url = `https://www.google.com/search?q=${d.Country}+coffee+consumption+and+exports`;
                        window.open(url, ""_blank"");
                    });
            })
            .catch(error => console.error(error));
    </script>
</body>
</html>
```"
5,scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Scatterplot with query widgets showing the Domestic Consumption and Exports of the given dataset. Add a slider to represent the Year.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Scatterplot</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .scatterplot {
            width: 800px;
            height: 600px;
            border: 1px solid black;
            margin: 20px auto;
        }
        
        .slider-container {
            width: 800px;
            margin: 20px auto;
        }
    </style>
</head>
<body>
    <div class=""scatterplot"" id=""scatterplot""></div>
    <div class=""slider-container"">
        <label for=""year-slider"">Year:</label>
        <input type=""range"" id=""year-slider"" min=""1960"" max=""2019"" value=""1960"">
        <span id=""year-display"">1960</span>
    </div>
    
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        // Load data
        d3.csv('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
        .then(data => {
            data.forEach(d => {
                d['Year'] = +d['Year'];
                d['Domestic Consumption'] = +d['Domestic Consumption'];
                d['Exports'] = +d['Exports'];
            });
            
            // Create scatterplot
            const margin = { top: 20, right: 20, bottom: 30, left: 40 };
            const width = 800 - margin.left - margin.right;
            const height = 600 - margin.top - margin.bottom;
            
            const svg = d3.select('#scatterplot')
                .append('svg')
                .attr('width', width + margin.left + margin.right)
                .attr('height', height + margin.top + margin.bottom)
                .append('g')
                .attr('transform', `translate(${margin.left}, ${margin.top})`);
            
            const xScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Domestic Consumption'])])
                .range([0, width]);
            
            const yScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Exports'])])
                .range([height, 0]);
            
            svg.append('g')
                .attr('transform', `translate(0, ${height})`)
                .call(d3.axisBottom(xScale).tickFormat(d3.format('d')));
            
            svg.append('g')
                .call(d3.axisLeft(yScale).tickFormat(d3.format('d')));
            
            svg.append('text')
                .attr('x', width / 2)
                .attr('y', height + 20)
                .attr('text-anchor', 'middle')
                .text('Domestic Consumption');
            
            svg.append('text')
                .attr('x', -20)
                .attr('y', height / 2)
                .attr('text-anchor', 'middle')
                .attr('transform', 'rotate(-90)')
                .text('Exports');
            
            // Add slider event listener
            const slider = document.getElementById('year-slider');
            const yearDisplay = document.getElementById('year-display');
            
            slider.addEventListener('input', () => {
                const selectedYear = +slider.value;
                yearDisplay.textContent = selectedYear;
                updateScatterplot(selectedYear);
            });
            
            // Update scatterplot function
            function updateScatterplot(year) {
                const filteredData = data.filter(d => d['Year'] === year);
                
                svg.selectAll('circle')
                    .data(filteredData)
                    .join(
                        enter => enter.append('circle')
                            .attr('cx', d => xScale(d['Domestic Consumption']))
                            .attr('cy', d => yScale(d['Exports']))
                            .attr('r', 5),
                        update => update
                            .attr('cx', d => xScale(d['Domestic Consumption']))
                            .attr('cy', d => yScale(d['Exports'])),
                        exit => exit.remove()
                    );
            }
            
            // Initial update
            updateScatterplot(1960);
        })
        .catch(error => console.error(error));
    </script>
</body>
</html>
```"
6,scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Scatterplot showing the Domestic Consumption of USA. Add animated transitions that connect these points using lines in order.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,advanced view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coffee Consumption Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .scatterplot {
      width: 800px;
      height: 600px;
      border: 1px solid lightgray;
    }
    
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      shape-rendering: crispEdges;
    }
    
    .axis text {
      font-size: 12px;
    }
    
    .dot {
      stroke-width: 1.5px;
    }
    
     /* Add styles for the line connecting points */
     .line {
       fill:none; 
       stroke:#ffab00; 
       stroke-width:.5
     } 
    
     /* Add styles for the animation */
     @keyframes dash { 
        to {stroke-dashoffset :0}
     } 
    
   </style>  
</head>

<body>

<div class=""scatterplot"" id=""scatterplot""></div>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script> 

let margin = {top :20, right :20, bottom :30 ,left :40},
width =800 -margin.left -margin.right,
height =600 -margin.top-margin.bottom;

let svg = d3.select(""#scatterplot"")
.append(""svg"")
.attr(""width"", width + margin.left + margin.right)
.attr(""height"", height + margin.top + margin.bottom)
.append(""g"")
.attr(""transform"",
""translate(""+margin.left+"",""+margin.top+"")"");

// Load data
d3.csv('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
.then(data => {

data.forEach(d => {

d[""Domestic Consumption""] =+d[""Domestic Consumption""];
});

// Filter data for USA
let usaData=data.filter(d=> d.Country === ""USA"");

// Set x and y scales
let xScale=d3.scaleLinear()
.domain([Math.min(...usaData.map(d=>+d.Year)), Math.max(...usaData.map(d=>+d.Year))])
.range([0,width]);

let yScale=d3.scaleLinear()
.domain([Math.min(...usaData.map(d=>+d[""Domestic Consumption""])), Math.max(...usaData.map(d=>+d[""Domestic Consumption""]))])
.range([height,0]);

// Create axes
svg.append('g')
.attr('transform', 'translate(0,' + height + ')')
.call(d3.axisBottom(xScale));

svg.append('g')
.call ( d3.axisLeft(yScale));

 // Create scatter plot

 svg.selectAll('.dot')

.data(usaData)

.enter()

.append ('circle')

.classed ('dot', true)

.attr ('cx', d =>xScale(+d.Year))

.attr ('cy', d =>yScale(+d['Domestic Consumption']))

.style (""fill"",""#6495ED"")

.style (""stroke"",""black"")

.style (""opacity"",.7);

 // Sort usa Data by Year in ascending order

 usa Data.sort((a,b) => a.Year-b.Year);

 // Create a line generator

 let lineGen= d3.line()

.x(function (p){return x Scale(p.year);})

.y(function (p){return y Scale(p.value);});

 // Define the animation function

 function animate(){

   let path=svg.selectAll("".line"")

   .data ([usa Data])

   .enter ()

   .append (""path"")

   classed (""line"",true)

 attr(""stroke-dasharray "",function (){

 return this.getTotalLength ()+"" ""+this.getTotalLength ();

 })

 attr (""stroke-dashoffset "",function (){

 return this.getTotalLength ();

 })

 style (""-webkit-animation "",""dash ""+this.getTotalLength ()+""ms linear forwards "");

 }

 animate();

})

.catch(error =>{
console.error(error);
}); 

</script>  

</body>  

</html>"
7,line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Domestic Consumption of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,advanced view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coffee Consumption Line Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .line-chart {
      width: 800px;
      height: 600px;
      margin: 50px auto;
    }
    
    .line {
      fill: none;
      stroke-width: 2;
    }
    
    .highlighted-line {
      stroke-width: 4;
    }
    
    .axis path,
    .axis line {
      fill: none;
      stroke-width: 1.5;
    }
    
     text{
        font-size :12px
     }

     path{
        fill :none
     }

     
     
     
     
     

      
      


      
      


      
      


      
      

      
      
      
      
      
      
      
      
      
      
      
      
      
      
      

      
      




  
  
  

  
  
  
  
  
  
  
  

  
  

  
    
  
    
  
    
  
    
  
    
  
    
  
  

 
  
   
   
   
   
   
   
   

 
  
   

 
  
   

 
  
   

 
  
   

 
  
   

 
 

</style>

</head>

<body>

<div class=""line-chart""></div>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script>





d3.csv('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv').then(data => {

data.forEach(d => {

d['Domestic Consumption'] = +d['Domestic Consumption'];

});

const countries = [...new Set(data.map(d => d.Country))];

const margin = { top:20,right :30,bottom :30,left :40};

const width =800-margin.left-margin.right;

const height=600-margin.top-margin.bottom;

const svg=d3.select('.line-chart')

.append('svg')

.attr('width',width+margin.left+margin.right)

.attr('height',height+margin.top+margin.bottom)

.append(""g"")

.attr(""transform"",`translate(${margin.left},${margin.top})`);

const xScale=d3.scalePoint()

.domain([...new Set(data.map(d=>d.Year))])

.range([0,width]);

svg.append(""g"")

.attr(""transform"",`translate(0,${height})`)

.call(d3.axisBottom(xScale));



 const yScale=d3.scaleLinear()

.domain([0,d3.max(data,d=>d['Domestic Consumption'])])

.range([height,0]);

svg.append(""g"")

.call(d3.axisLeft(yScale));



 const line=d3.line()

.x((_,i)=>xScale(i))

.y((_,i)=>yScale(_));



 const lines=svg.selectAll("".lines"")

.data(countries)

.enter()

.append(""path"")

.datum((country)=>data.filter((_,i)=>_[1]==country))

.classed(""lines"",true)

.style (""stroke"",(country,i)=>`hsl(${(360*i)/countries.length},100%,50%)`)



.on (""mouseover"",(event,country)=>

{

event.target.classList.add (""highlighted-line"");

})

.on (""mouseout"",(event,country)=>

{

event.target.classList.remove (""highlighted-line"");

})

.transition ()

.duration (500)

.delay ((country,i) => i*100 )

.attr ('fill','none')

.style ('stroke-width',2 )

.style ('opacity ',.5 )

.attr ('stroke-dasharray ','10 ,10 ')

.transition ()

.duration (500 )

.delay ((country ,i )=> i *100 +2000 )

.style ('opacity ',1 )

.transition ()

.duration (500 )

.delay ((country ,i )=> i *100 +2500 )

.style ('stroke-dasharray ','none ')

.transition ()

.duration (500 ).delay (( country ,i )=> i *100 +3000 ).attr ('d ',( country )=> line(country.map (_ => _ ['Domestic Consumption ']))) ;

});

</script></body></html>"
8,bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Bar Chart that visualizes the Domestic Consumption for each Country in 2017. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,advanced view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coffee Consumption</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .bar {
      fill: steelblue;
    }
    
    .bar:hover {
      fill: brown;
    }
    
    .axis--x path {
      display: none;
    }
  </style>
</head>

<body>
<svg width=""960"" height=""500""></svg>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script>

var svg = d3.select(""svg""),
margin = {top: 20, right: 20, bottom: 30, left: 40},
width = +svg.attr(""width"") - margin.left - margin.right,
height = +svg.attr(""height"") - margin.top - margin.bottom;

var xScale = d3.scaleBand().range([0, width]).padding(0.1),
yScale = d3.scaleLinear().range([height, 0]);

var g = svg.append(""g"")
.attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");

d3.csv('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv').then(function(data) {

data.forEach(function(d) {
d['Domestic Consumption'] = parseInt(d['Domestic Consumption']);
});

data.sort(function(a,b) { return b['Domestic Consumption']-a['Domestic Consumption']; });

xScale.domain(data.map(function(d) { return d.Country; }));
yScale.domain([0, d3.max(data,function(d){return d['Domestic Consumption'];})]);

g.append(""g"")
.attr(""class"", ""axis axis--x"")
.attr(""transform"", ""translate(0,"" + height+ "")"")
.call(d3.axisBottom(xScale));

g.append('text')
.text('Country')
.style('fill','black')
.style('font-size',12)
.style('font-weight','bold')
.attr('transform','translate('+ (width/2)+ ','+(height+35)+')');

g.append(""g"")
.call(d3.axisLeft(yScale).ticks(null,""s""))
.append (""text"")
.text ('Consumption (in million bags)')
.style ('fill' ,'black ')
.style ('font-size ',12)
.style ('font-weight' ,'bold ')
.attr (""transform"",""rotate(-90)"")
.attr (""y "",6)
   .attr (""dy"","".71em "")
   .attr (""text-anchor"" ,""end "");

 g.selectAll("".bar "")
.data (data )
.enter ().append (""rect "")
.on ('mouseover',function (){d3.select(this).style ('fill' ,'brown ');})
.on ('mouseout',function (){d3.select(this).style ('fill' ,'steelblue');})
.on ('click',function (){alert(JSON.stringify(data.filter(obj => obj.Country==this.__data__.Country)));})
.transition ()
.duration (100 )
.delay (function (d,i){return i*50;})
   .attr (""class"" ,""bar "")
   .attr (""x "", function (d){return xScale(d.Country);})
   .attr (""y "", function (d){return yScale(+[d ['Domestic Consumption']]);} )
   .attr (""width "", xScale.bandwidth ())
   .attr( ""height"" , function( d ){ return height-yScale(+[d ['Domestic Consumption']]);} );

});

</script></body></html>"
9,bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Bar Chart that visualizes the Domestic Consumption for each Country in 2017. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Bar Chart</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .bar {
            fill: steelblue;
        }
        
        .bar:hover {
            fill: brown;
        }
        
        .axis text {
            font-size: 12px;
        }
        
        .axis path,
        .axis line {
            fill: none;
            stroke: #777;
            stroke-width: 1;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 40 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;
        
        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);
        
        const xScale = d3.scaleBand()
            .range([0, width])
            .padding(0.2);
        
        const yScale = d3.scaleLinear()
            .range([height, 0]);
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"")
            .then(data => {
                data = data.filter(d => d.Year === ""2017"");
                
                data.forEach(d => {
                    d[""Domestic Consumption""] = +d[""Domestic Consumption""];
                });
                
                data.sort((a, b) => b[""Domestic Consumption""] - a[""Domestic Consumption""]);
                
                xScale.domain(data.map(d => d.Country));
                yScale.domain([0, d3.max(data, d => d[""Domestic Consumption""])]).nice();
                
                const bars = svg.selectAll("".bar"")
                    .data(data)
                    .enter()
                    .append(""rect"")
                    .attr(""class"", ""bar"")
                    .attr(""x"", d => xScale(d.Country))
                    .attr(""y"", d => yScale(d[""Domestic Consumption""]))
                    .attr(""width"", xScale.bandwidth())
                    .attr(""height"", d => height - yScale(d[""Domestic Consumption""]));
                
                const xAxis = d3.axisBottom(xScale);
                const yAxis = d3.axisLeft(yScale);
                
                svg.append(""g"")
                    .attr(""class"", ""axis"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(xAxis)
                    .selectAll(""text"")
                    .style(""text-anchor"", ""end"")
                    .attr(""transform"", ""rotate(-45)"");
                
                svg.append(""g"")
                    .attr(""class"", ""axis"")
                    .call(yAxis);
                
                const drag = d3.drag()
                    .on(""start"", (event, d) => {
                        bars.style(""opacity"", 0.5);
                    })
                    .on(""drag"", (event, d) => {
                        const x = event.x;
                        const index = data.findIndex(e => e.Country === d.Country);
                        const newIndex = Math.floor((x - margin.left) / (width / data.length));
                        
                        if (newIndex >= 0 && newIndex < data.length && newIndex !== index) {
                            data.splice(newIndex, 0, data.splice(index, 1)[0]);
                            xScale.domain(data.map(d => d.Country));
                            bars.transition()
                                .duration(200)
                                .attr(""x"", d => xScale(d.Country));
                        }
                    })
                    .on(""end"", () => {
                        bars.style(""opacity"", 1);
                    });
                
                bars.call(drag);
            })
            .catch(error => console.error(error));
    </script>
</body>
</html>
```"
10,bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Bar Chart that visualizes the Domestic Consumption for each Country in 2017. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Domestic Consumption.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,advanced view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coffee Consumption</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .bar {
      fill: steelblue;
    }
    
    .bar:hover {
      fill: brown;
    }
    
    .axis--x path {
      display: none;
    }
  </style>
</head>

<body>
  <div id=""vis""></div>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script>  
let margin = {top: 20, right: 20, bottom: 30, left: 40};
let width = document.body.clientWidth - margin.left - margin.right;
let height = document.body.clientHeight - margin.top - margin.bottom;

let svg = d3.select(""#vis"")
.append(""svg"")
.attr(""width"", width + margin.left + margin.right)
.attr(""height"", height + margin.top + margin.bottom)
.append(""g"")
.attr(""transform"", ""translate("" + margin.left + "","" +margin.top+ "")"");

// load data
d3.csv('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
.then(data => {

data.forEach(d => {
d['Domestic Consumption'] = parseInt(d['Domestic Consumption']);
});

// filter data for the year of interest
data2017=data.filter(function(d){return d.Year==2017})

// sort the data in descending order by default
data2017.sort((a,b) => b['Domestic Consumption']- a['Domestic Consumption']);

// create scales
xScale=d3.scaleBand()
.domain(data2017.map(function(d){return d.Country}))
.range([0,width])
.padding(0.2);

yScale=d3.scaleLinear()
.domain([0,d3.max(data2017,function(d){return d['Domestic Consumption']})])
.range([height,0]);

// add bars to SVG 
bars=svg.selectAll('rect')
.data(data2017)
.enter()
.append('rect')
.attr('class','bar')
.on('mouseover',mouseover)
.on('mouseout',mouseout)

bars.transition().duration(1000).attr('x',function (d){
        return xScale(d.Country);
})
.attr('y',function (d){
        return yScale(d['Domestic Consumption']);
})
.attr ('width', xScale.bandwidth())
.attr ('height' , function (d){
        return height-yScale (d [' DomesticConsumption ']) ;
})



var select = document.createElement(""select"");
select.name = ""sort"";
select.id = ""sort""

var option1=document.createElement (""option"");
option1.value= ""descending""
option1.text= ""Descending""
select.appendChild(option1)

var option2=document.createElement (""option"");
option2.value= ""ascending""
option2.text= ""Ascending""
select.appendChild(option2)

document.getElementById (""vis"").appendChild(select);

document.getElementById (""sort"").addEventListener (""change"" , function (){
if(this.value==""ascending""){
data2017.sort((a,b) => a [' DomesticConsumption '] - b [' DomesticConsumption ']);
}else{
data2017.sort((a,b) => b [' DomesticConsumption '] - a [' DomesticConsumption ']);
}

bars.data(data2017).transition().duration(1000).attr ('x' , function (d){
        return xScale (d.Country);
}). attr ('y' , function (d){
        return yScale ( d [ ' Domesticonsumption ']) ;
}). attr ('height' , function ( d ){
       return height-y Scale( d [ ' Domesticonsumpüon']) ;
})

});

function mouseover(event,d){

tooltip.style.display=null;

tooltip.html(""<strong>Country:</strong>""+ ""<br>""+""<strong>Value:</strong>""+parseInt ((event.target.__ data__.value)))

}

function mouseout(event,d){

tooltip.style.display=""none"";

}

const tooltip=d3.select(""#vis"")

.append(""div"")

.style (""position"" ,""absolute"")

.style (""background-color"" ,""white"")

.style (""border-radius"" ,""5px"")

.style(""-webkit-box-shadow"",""10px10px5px#ccc"") // this adds shadow to the tool tip box

.style(""-moz-box-shadow"",""10px10px5px#ccc"") // this adds shadow to the tool tip box

.style(""-ms-box-shadow"",""10px10px5px#ccc"") // this adds shadow to the tool tip box

.style (""-o- box-shadow "",""lO px lO px S px # ccc "") //this adds shadow tothe tooltipbox 

.stvle (""-box-shadows "",10101010511w ) / /this addsshadowtothetooltipbox 

.stvle opacity "",50 )

.stvle padding "".PX "")

html("""") ;

});  

</script></body></html>"
