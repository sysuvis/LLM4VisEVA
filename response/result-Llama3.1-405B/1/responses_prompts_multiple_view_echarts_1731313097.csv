Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,multiple view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Agricultural Production Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
  <div id=""scatterplot"" style=""width: 600px; height: 400px; float: left;""></div>
  <div id=""barChart"" style=""width: 600px; height: 400px; float: right;""></div>

<script type='text/javascript'>
fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
.then(response => response.text())
.then(data => {
    const rows = data.split('\n').slice(1).map(row => row.split(','));
    const scatterData = [];
    const barData = {};
    rows.forEach(row => {
        scatterData.push([+row[2], +row[3]]);
        if (!barData[row[1]]) barData[row[1]] = { name: row[1], value: +row[2] };
        else barData[row[1]].value += +row[2];
    });
    const scatterChart = echarts.init(document.getElementById('scatterplot'));
    scatterChart.setOption({
        title: { text: 'Scatterplot of Units Produced vs Revenue' },
        xAxis:{},
        yAxis:{},
        series:[{
            type:'scatter',
            data
         }]
     });

     const barChartData = Object.values(barData);
     console.log(barChartData)
     const barChart=echarts.init(document.getElementById('barChart'))
      barChart.setOption({
          title:{text:'Bar Chart of Crop Type vs Units Produced'},
          xAxis:{
              type:'category',
              data:Object.keys(barData)
          },
          yAxis:{},
          series:[{
              type:'bar',
              data:Object.values(barChartData.value)
           }]
       })
});
</script>

</body></html>"
2,scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Agricultural Production</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
    <style>
        #scatterplot, #barChart {
            width: 600px;
            height: 400px;
            display: inline-block;
        }
    </style>
</head>
<body>
    <div id=""scatterplot""></div>
    <div id=""barChart""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const scatterData = rows.map(row => [parseFloat(row[6]), parseFloat(row[2])]);
                const barData = rows.map(row => [row[1], parseFloat(row[2])]);
                const scatterplot = echarts.init(document.getElementById('scatterplot'));
                const barChart = echarts.init(document.getElementById('barChart'));
                const scatterOption = {
                    title: {
                        text: 'Scatterplot of Yield vs Units Produced'
                    },
                    xAxis: {
                        name: 'Yield'
                    },
                    yAxis: {
                        name: 'Units Produced'
                    },
                    series: [{
                        type: 'scatter',
                        data: scatterData,
                        brush: {
                            toolbox: ['rect', 'polygon', 'lineX', 'lineY', 'keep', 'clear'],
                            inBrush: {
                                opacity: 1
                            }
                        }
                    }],
                    brush: {
                        throttleType: 'debounce',
                        throttleDelay: 300,
                        geoIndex: 0,
                        toolbox: ['rect', 'polygon', 'lineX', 'lineY', 'keep', 'clear'],
                        inBrush: {
                            opacity: 1
                        },
                        outOfBrush: {
                            opacity: 0.2
                        }
                    }
                };
                const barOption = {
                    title: {
                        text: 'Bar Chart of Units Produced by Crop Type'
                    },
                    xAxis: {
                        type: 'category',
                        data: barData.map(item => item[0])
                    },
                    yAxis: {
                        name: 'Units Produced'
                    },
                    series: [{
                        type: 'bar',
                        data: barData.map(item => item[1])
                    }]
                };
                scatterplot.setOption(scatterOption);
                barChart.setOption(barOption);
                scatterplot.on('brushSelected', params => {
                    const selectedData = params.batch[0].selected[0].dataIndex;
                    const selectedBarData = selectedData.map(index => barData[index]);
                    const newBarOption = {
                        series: [{
                            type: 'bar',
                            data: barData.map((item, index) => {
                                if (selectedData.includes(index)) {
                                    return {
                                        value: item[1],
                                        itemStyle: {
                                            color: 'red'
                                        }
                                    };
                                } else {
                                    return item[1];
                                }
                            })
                        }]
                    };
                    barChart.setOption(newBarOption);
                });
            });
    </script>
</body>
</html>
```"
3,line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Produced , while the pie chart represents the distribution of Revenue.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Agricultural Production</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""charts"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1).map(row => row.split(','));
            const unitsProduced = rows.map(row => [row[0], parseFloat(row[2])]);
            const revenue = rows.reduce((acc, row) => {
                const cropType = row[1];
                const revenue = parseFloat(row[3]);
                acc[cropType] = (acc[cropType] || 0) + revenue;
                return acc;
            }, {});

            const chart = echarts.init(document.getElementById('charts'));
            const option = {
                grid: [
                    { top: '5%', height: '60%' },
                    { top: '70%', height: '30%' }
                ],
                xAxis: [
                    {
                        gridIndex: 0,
                        type: 'category',
                        data: unitsProduced.map(item => item[0])
                    }
                ],
                yAxis: [
                    {
                        gridIndex: 0,
                        type: 'value'
                    }
                ],
                series: [
                    {
                        xAxisIndex: 0,
                        yAxisIndex: 0,
                        type: 'line',
                        data: unitsProduced.map(item => item[1])
                    },
                    {
                        type: 'pie',
                        radius: '30%',
                        center: ['50%', '85%'],
                        data: Object.keys(revenue).map(key => ({ name: key, value: revenue[key] }))
                    }
                ]
            };
            chart.setOption(option);
        });
    </script>
</body>
</html>
```"
4,line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Produced , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,multiple view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Agricultural Production Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
  <div id=""chart"" style=""width: 800px; height: 600px;""></div>

  <script type=""text/javascript"">
    fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
      .then(response => response.text())
      .then(data => {
        const rows = data.split('\n').slice(1).map(row => row.split(','));
        const unitsProducedData = rows.map(row => [row[0], row[2]]);
        const revenueData = rows.map(row => [row[0], row[3]]);

        var chartDom = document.getElementById('chart');
        var myChart = echarts.init(chartDom);
        var option;

option = {
          grid: [
            {left: '10%', top: '10%', width: '80%', height: '30%'},
            {left: '10%', bottom:'20%', width:'80%',height:'40%'}
          ],
          xAxis:[
            {
              gridIndex :0,
              type : ""category"",
              boundaryGap : false,
              data : unitsProducedData.map(item=>item[0])
            }
          ],
          yAxis:[
            {
                gridIndex :0,
                type:""value""
            }
          ],
          series:[
             {
               name:""Units Produced"",
               xAxisIndex :0,
               yAxisIndex :0,
               type:""line"",
               smooth:true, 
               brushType :'lineX',
               brushStyle:{
                 borderWidth :-1
                },
                lineStyle:{
                  color:""#FF000""
                },
                itemStyle:{
                  color:""#FF000""
                 },
                 areaStyle:{},
                 markLine:{},
                 markPoint:{},
                 markArea:{},
                  data(unitsProducedData.map(item=>item[1]))
             }
           ]
         };

myChart.on(""brushSelected"",function(params){
   console.log(params)
   let selectedYear=params.batch[params.batch.length-1].selected;
   let selectedRevenue=revenueData.filter((item,index)=>selectedYear.includes(index));
   console.log(selectedRevenue)
   
    option.series.push({
       name:""Revenue Distribution"",
       type:""pie"",
       radius:[""20%"",""40%""],
       center:[""50%"", ""70%""],
       labelLine:{
         show:true
         },
         labelAlignTo:"""",
         emphasis:{
           scaleSize:-5
           },
           encode:{itemName :""Year"",value :""Revenue""},
           itemStyle{
             borderRadius :-2,borderWidth :-2,borderColor :-
             },data:selectedRevenue
     })
     myChart.setOption(option);
})

myChart.setOption(option);
});
</script>

</body>

</html>"
5,scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Units Produced, Revenue, Profit, Production Cost, Yield, and Export Volume. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,multiple view,"<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.3.2/dist/echarts.min.js""></script>
</head>

<body>

<div id=""scatterplot-matrix"" style=""width: 800px; height: 600px;""></div>

<script type=""text/javascript"">

fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
.then(response => response.text())
.then(data => {
    const rows = data.split('\n').slice(1).map(row => row.split(','));
    const dataset = [];
    rows.forEach(row => {
        dataset.push({
            'Units Produced': +row[2],
            Revenue: +row[3],
            Profit: +row[5],
            'Production Cost': +row[4],
            Yield: +row[6],
            'Export Volume': +row[8]
        });
    });

const scatterplotMatrix = echarts.init(document.getElementById('scatterplot-matrix'));

const brushSelectData = [];

function convertData(data) {
return Object.keys(data).map(function (key) {
return [data[key]];
});
}

function renderItem(params, api) {
var xValueIndex = api.value(0);
var yValueIndex = api.value(1);
var xValue;
var yValue;
if (xValueIndex === -1 || yValueIndex === -1) return;

xValue = params.data[xValueIndex];
yValue = params.data[yValueIndex];

return {
type: 'scatter',
shapeType: 'circle',
shapeSizeAndColorBySeries:true,
symbolSize : 10,
symbolRotate : 40,
itemStyle:{
normal:{color:'#27727B'}
},
emphasis:{
itemStyle:{
color:'#FE8463'
}
},
position:[xValues[xValues.indexOf(xValues.filter(v=>v==xValues[xValues.indexOf(xValues.filter(v=>v==params.data)[0])])[0])],yValues[yValues.indexOf(yValues.filter(v=>v==params.data)[0])]],
};
}

const option= {

dataset:[
{
source:data
}
],

tooltip:{},

grid:[
{
left:'10%',
top:'upperGrid',
bottom:'80%',
right:'10%'
},{
left:'10%',
bottom:""lowerGrid"",
right:""10%"",
top:""20%""
}
],

 xAxis:[
{
gridId:""upperGrid"",
type:""category"",
axisLabel:{show:false},
splitLine:{show:false},
axisTick:{show:false},
axisLine:{onZero:true,onZeroAxisIndex:-1,lineStyle:{color:""#000""}},
data:xAxisData
},{
gridId:""lowerGrid"",
type:""category"",
axisLabel:{show:false},
splitLine:{show:false},"
6,scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a brushable Scatterplot that visualizes the relationship between Units Produced and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Brushable Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
    <style>
        #chart {
            width: 800px;
            height: 600px;
            float: left;
        }
        #table {
            float: left;
            margin-left: 20px;
        }
    </style>
</head>
<body>
    <div id=""chart""></div>
    <div id=""table""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const unitsProduced = rows.map(row => +row[2]);
                const revenue = rows.map(row => +row[3]);
                const dataPoints = rows.map((row, index) => ({
                    value: [unitsProduced[index], revenue[index]],
                    name: row[1],
                    year: row[0],
                    unitsProduced: row[2],
                    revenue: row[3],
                    productionCost: row[4],
                    profit: row[5],
                    yield: row[6],
                    numberOfFarms: row[7],
                    exportVolume: row[8]
                }));

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    brush: {
                        toolbox: ['rect'],
                        xAxisIndex: 0,
                        yAxisIndex: 0,
                        brushLink: 'all',
                        outOfBrush: {
                            colorAlpha: 0.1
                        }
                    },
                    toolbox: {
                        feature: {
                            brush: {
                                type: ['rect']
                            }
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Units Produced'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Revenue'
                    },
                    series: [{
                        type: 'scatter',
                        data: dataPoints,
                        brush: {
                            itemStyle: {
                                borderColor: 'rgba(0,0,0,0.5)',
                                borderWidth: 1,
                                opacity: 1
                            }
                        }
                    }]
                };
                chart.setOption(option);

                chart.on('brushSelected', params => {
                    const selectedPoints = params.batch[0].selected[0].dataIndex;
                    const tableHtml = selectedPoints.slice(0, 20).map(index => {
                        const point = dataPoints[index];
                        return `
                            <tr>
                                <td>${point.name}</td>
                                <td>${point.year}</td>
                                <td>${point.unitsProduced}</td>
                                <td>${point.revenue}</td>
                                <td>${point.productionCost}</td>
                                <td>${point.profit}</td>
                                <td>${point.yield}</td>
                                <td>${point.numberOfFarms}</td>
                                <td>${point.exportVolume}</td>
                            </tr>
                        `;
                    }).join('');
                    document.getElementById('table').innerHTML = `
                        <table border=""1"">
                            <tr>
                                <th>Crop Type</th>
                                <th>Year</th>
                                <th>Units Produced</th>
                                <th>Revenue</th>
                                <th>Production Cost</th>
                                <th>Profit</th>
                                <th>Yield</th>
                                <th>Number of Farms</th>
                                <th>Export Volume</th>
                            </tr>
                            ${tableHtml}
                        </table>
                    `;
                });
            });
    </script>
</body>
</html>
```"
7,bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a horizontal Bar Chart that shows Crop Type and Units Produced, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,multiple view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Agricultural Production</title>
  <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
  <div id=""chart"" style=""width: 800px; height: 600px;""></div>

<script>

fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
.then(response => response.text())
.then(data => {
    const rows = data.split('\n').slice(1);
    const cropTypes = [];
    const unitsProduced = [];

    rows.forEach(row => {
        const columns = row.split(',');
        cropTypes.push(columns[1]);
        unitsProduced.push(parseInt(columns[2]));
    });

const chartDom = document.getElementById('chart');
const myChart = echarts.init(chartDom);
const option = {
tooltip: {},
grid: [
{
left: '10%',
top: '10%',
bottom: '10%',
containLabel: true
},
{
left: '60%',
top:'10%',
bottom:'10%'
}
],
xAxis:[
{
type:'value',
gridIndex :0,
axisTick:{inside:true},
axisLabel:{show:false}
},
{
type:'value',
gridIndex :1,
axisTick:{inside:true},
splitNumber :2,
min:-10000,
max:+20000
}
],
yAxis:[
{
type :'category',
data :cropTypes.slice(0,5),
gridIndex :0
},
{

type :'category',
data :cropTypes.slice(0,5),
gridIndex :1,

axisLine:{show:false},

axisTick:{show:false},

splitLine:{
show:false

}

}

],

series:[
{

name :'Units Produced',

data :unitsProduced.slice(0,5),

barWidth :""40%"",

barMinHeight :-10000,

barMaxHeight:+20000,

itemStyle:{
color:new echarts.graphic.LinearGradient(
'right', '#000', '#fff'
)
},

label:{
normal:{
position:""right"",
offset:[20,-30]
}
},


xAxisIndex:[0],

yAxisIndex:[0],

zlevel :-99,



markLine:
{

symbolSize:[20,15],

symbol:""pin"",

label:
{

formatter:""{b}"",

position:""middle""

},


lineStyle:
{

normal :
{color:""#000"",width:.6,type :""solid""},

emphasis :
{color:""#aaa"",width:.6,type :""solid""}
},



animationDurationUpdate:function(idx) {

return idx *100;

},



animationDelayUpdate:function(idx) {

return idx *50;

}


}


]


};

option && myChart.setOption(option);

});

</script>

</body>

</html>"
