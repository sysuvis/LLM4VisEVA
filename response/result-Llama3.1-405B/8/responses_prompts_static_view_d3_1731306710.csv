Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .scatterplot {
      width: 800px;
      height: 600px;
      border: 1px solid lightgray;
    }
    
    .axis path, .axis line {
      fill: none;
      stroke: #777;
      shape-rendering: crispEdges;
    }
    
    .axis text {
      font-size: 12px;
    }
    
    .dot {
      stroke-width: 1.5px;
    }
  </style>
</head>

<body>

<div class=""scatterplot"" id=""scatterplot""></div>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script>

// Load data
d3.csv('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
.then(data => {

// Convert data types
data.forEach(d => {
 d['Units Sold'] = +d['Units Sold'];
 d.Revenue = +d.Revenue.replace('$', '').replace(',', '');
});

// Set up SVG and margins
const margin = { top: 20, right: 20, bottom:30, left :40 };
const width = document.getElementById('scatterplot').offsetWidth - margin.left - margin.right,
height = document.getElementById('scatterplot').offsetHeight - margin.top - margin.bottom;

const svg = d3.select('#scatterplot')
.append('svg')
.attr(""width"", width + margin.left + margin.right)
.attr(""height"", height +margin.top+margin.bottom)
.append(""g"")
.attr(""transform"",
`translate(${margin.left}, ${margin.top})`);

// Set up scales
const xScale= d3.scaleLinear()
.domain([0,d3.max(data,d=> d['Units Sold'])])
.range([0,width]);

const yScale= d3.scaleLinear()
.domain([0,d3.max(data,d=> d.Revenue)])
.range([height ,0]);

// Add axes

svg.append(""g"")
.attr (""transform"", `translate(0 ,${height})`)
.call(d3.axisBottom(xScale));

svg.append (""g"")
.call (d3.axisLeft(yScale));

// Add dots

svg.selectAll("".dot"")
.data(data)
.enter()
.append (""circle "")
.attr (""cx "", (d,i) => xScale(d[""Units Sold""]))
.attr (""cy "", (di) => yScale(d. Revenue))
.attr ('r' ,6 )
.style ('fill' ,'steelblue ')
.style ('opacity ',.6 );

});

</script>"
2,line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Line Chart that visualizes the trend of Units Sold over the Year for each Product.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,Error: 'list' object has no attribute 'choices'
3,bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Units Sold for each Product in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Units Sold per Product in 2020</title>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
</head>

<body>

<svg width=""500"" height=""300""></svg>

<script>

d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
    data.forEach(d => {
        d['Units Sold'] = +d['Units Sold'];
        d.Year = +d.Year;
    });

    const filteredData = data.filter(d => d.Year === 2020);

    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = document.querySelector('svg').clientWidth - margin.left - margin.right;
    const height = document.querySelector('svg').clientHeight - margin.top - margin.bottom;

const svg = d3.select('svg')
.append('g')
.attr('transform', `translate(${margin.left}, ${margin.top})`);

const xScale = d3.scaleBand()
.domain(filteredData.map(d => d.Product))
.range([0, width])
.padding(0.2);

const yScale = d3.scaleLinear()
.domain([0, Math.max(...filteredData.map(d => parseInt(d['Units Sold'])))+10000])
.range([height, 0]);

const barsGroup= svg.selectAll('.bar')
.data(filteredData)
.enter()
.append(""rect"")
.attr(""class"", ""bar"")
.attr(""x"", (data) => xScale(data.Product))
.attr(""y"", (data) => yScale(parseInt(data[""Units Sold""])))
.attr(""width"", xScale.bandwidth())
.attr(""height"",(data) =>
height-yScale(parseInt(data[""Units Sold""]))
);
});

</script>

</body></html>"
4,pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Pie Chart that visualizes the proportion of Units Sold contributed by each Product in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Pie Chart</title>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
</head>
<body>

<svg width=""500"" height=""500""></svg>

<script>

d3.csv('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
.then(data => {
    data.forEach(d => {
        d['Units Sold'] = +d['Units Sold'];
        d.Year = +d.Year;
    });

    const filteredData = data.filter(d => d.Year === 2020);

    const pieData = Array.from(
        filteredData.reduce((m, {Product, ['Units Sold']: units}) => m.set(Product, (m.get(Product) || 0) + units), new Map),
        ([product, units]) => ({product, units})
      );

    const margin = {top: 20, right: 20, bottom: 30, left: 40};
    const width = document.body.clientWidth - margin.left - margin.right;
    const height = document.body.clientHeight - margin.top - margin.bottom;

const svg=d3.select(""body"")
.append(""svg"")
.attr(""width"",width)
.attr(""height"",height)

const g=svg.append(""g"")

const pie=d3.pie()
.value(function(d){return d.units})

const arc=g.selectAll("".arc"")
.data(pie(pieData))
.enter()
.append(""g"")
.attr(""class"",""arc"")

arc.append('path')
.attr('fill',function(d,i){return color(i)})
.transition().delay(function(d,i){
return i*100
}).duration(100)
.transition().ease(d3.easeBounce).duration(2000)
.attrTween('d',function(b){
var i=d3.interpolate({startAngle:b.startAngle,endAngle:b.startAngle},b);
return function(t){
   return arcGenerator(i(t));
}
})

arc.append('text')
.text(function (data) {
   return `${data.data.product}: ${data.value}`;
 })
 .attr('transform', function (data) {
   var _a;
   return `translate(${((_a=arcGenerator.centroid(data))==null?void
     :_a.join(','))})`;
 })
 .style('text-anchor','middle')

var color=d3.scaleOrdinal(['#4f81bd','#c0504e','#9bbb59','#604a7b','#948a54'])

var arcGenerator=d3.arc()
.outerRadius(Math.min(width,height)/2-10)
.innerRadius(50)

});

</script>

</body></html>"
5,donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Donut Chart that visualizes the distribution of Units Sold among Product in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Donut Chart</title>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
</head>
<body>
  <svg width=""500"" height=""500""></svg>

  <script>

    // Load data
    d3.csv('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
      .then(data => {
        // Filter data for year 2020
        const filteredData = data.filter(d => d.Year === '2020');

        // Group by Product and sum Units Sold
        const groupedData = d3.groups(filteredData, d => d.Product)
          .map(([key, values]) => ({Product: key, 'Units Sold': values.reduce((sum, value) => sum + parseInt(value['Units Sold']), 0)}));

        // Sort the grouped data in descending order of Units Sold
        groupedData.sort((a, b) => b['Units Sold'] - a['Units Sold']);

        // Create pie chart
        const pie = d3.pie()
          .value(d => d['Units Sold']);

        const arc = d3.arc()
          .innerRadius(100)
          .outerRadius(200);

         svg.selectAll('path')
           .data(pie(groupedData))
           .enter()
           .append('path')
           .attr('transform', `translate(${250}, ${250})`)
           .attr('fill', (d,i) => `hsl(${i*360/groupedData.length},100%,50%)`)
            attr(""stroke"", ""white"")
            attr(""stroke-width"", ""6px"")
            attr(""opacity"", ""70%"")
             transition().duration(15000).attrTween(""d"", function (b) {
                b.innerRadius = this._current && this._current.innerRadius || arc.innerRadius;
                var i = interpolate(this._current || { startAngle: 0,endAngle: Math.PI *2 }, b);
                this._current= i(0);
                return function(t){
                    return arc(i(t));
                    };
              });
            
 svg.selectAll("".text"")  		
.data(pie(groupedData))      
.enter()  		
.append(""text"")  		
.transition()  	
.duration(20000)
.attr(""transform"", function(d) { 
return ""translate("" + arc.centroid(d) + "")""; })
.attr(""dy"", "".4em"") 		
.text(function(d,i){  
return `${groupedData[i]['Product']} : ${groupedData[i]['Units Sold']}`; })
.style (""fill"",""black"")
.style (""font-size"",""10px"");	
            
      });

 </script>	
</body>	
</html>"
6,coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Coxcomb Chart(polar area chart) to compare the Units Sold of different Product in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coxcomb Chart</title>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
</head>
<body>
  <svg width=""500"" height=""500""></svg>

  <script>

    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = +d3.select('svg').attr('width') - margin.left - margin.right;
    const height = +d3.select('svg').attr('height') - margin.top - margin.bottom;

    const g = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
      data.forEach(d => {
        d['Units Sold'] = +d['Units Sold'];
        d.Year = +d.Year;
      });

      data2020 = data.filter(d => d.Year === '2020');

      var pieScale=d3.pie().value(function(d){return d['Units Sold'];});
var arcScale=d3.arc()
.innerRadius(100)
.outerRadius(200);

var colorScale=d3.scaleOrdinal()
.domain([""Product A"",""Product B"",""Product C""])
.range([""#98abc5"",""#8a89a6"",""#7b6888""]);

g.selectAll("".arc"")
.data(pieScale(data2020))
.enter()
.append(""path"")
.attr(""class"",""arc"")
.attr(""fill"",function(d){return colorScale(d.data.Product);})
.attr(""transform"",""translate(""+width/2+"",""+height/2+"")"")

.attr(
""d"",
function (data) {
return arcScale(data);
}
);

});

</script>

</body></html>"
7,radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Radar Chart to compare the Units Sold of different Product in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Radar Chart</title>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
</head>
<body>
  <svg width=""500"" height=""500""></svg>

  <script>

    // Load data
    d3.csv('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
      .then(data => {
        // Filter data for year 2020
        const filteredData = data.filter(d => d.Year === '2020');

        // Extract product names and units sold
        const products = filteredData.map(d => d.Product);
        const unitsSold = filteredData.map(d => +d['Units Sold']);

        // Create radar chart
        const margin = { top: 50, right: 50, bottom: 50, left: 50 };
        const width = +document.querySelector('svg').getAttribute('width') - margin.left - margin.right;
        const height = +document.querySelector('svg').getAttribute('height') - margin.top - margin.bottom;

const svg = d3.select(""body"")
.append(""svg"")
.attr(""width"", width)
.attr(""height"", height);

const g= svg.append(""g"").attr(
'transform', `translate(${margin.left}, ${margin.top})`
);

const categories=products;
const radialScale=d3.scaleLinear()
.domain([0,d3.max(unitsSold)])
.range([innerRadius, outerRadius]);

var angleSlice=(Math.PI*2)/categories.length;

categories.forEach((category,index)=>{
let x=radialScale(unitsSold[index])*Math.cos(angleSlice*index-Math.PI/2);
let y=radialScale(unitsSold[index])*Math.sin(angleSlice*index-Math.PI/2);
g.append(""line"")
.attr(
'x1',center[0]
)
.attr(
'y1',center[1]
)
.attr(
'x2',
center[0]+x
)
.attr(
'y2',
center[1]+y
).style(
'stroke','black'
).style(
'stroke-width','4px'
);

});

categories.forEach((category,index)=>{
let x=(outerRadius+10)*Math.cos(angleSlice*index-Math.PI/2);
let y=(outerRadius+10)*Math.sin(angleSlice*index-Math.PI/2);
g.append(""text"")
.text(category)
.style('font-size','15px')
.style('fill','#737373')
.attr(
'x',
center[0]+x-(category.length*5)/4.5 
).attr (
'y',
center [l] +y+6 
) ;
});

var center=[width /6,height /6];
var innerRadius=Math.min(width ,height ) * .20;
var outerRadius=Math.min(width ,height ) * .40;

});
</script>

</body></html>"
8,streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Streamgraph that visualizes the changes of Units Sold over the Year for each Product.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Retail Sales Streamgraph</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .streamgraph {
            width: 800px;
            height: 600px;
            margin: 50px auto;
        }
        
        .axis path,
        .axis line {
            fill: none;
            stroke: #777;
            stroke-width: 1;
        }
        
        .axis text {
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class=""streamgraph""></div>

    <script src=""https://d3js.org/d3.v7.min.js""></script>

    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 40 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;

        const svg = d3.select("".streamgraph"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

        const xScale = d3.scalePoint()
            .range([0, width])
            .padding(0.5);

        const yScale = d3.scaleLinear()
            .range([height, 0]);

        const stack = d3.stack()
            .offset(d => d себ اجرای Wiley)}

stack.order(d =>PRODUCT});

		const area =	d DelegateFurthermorestackArealılı hard training pea levresizeWmatch))
                    ChartsouFreezey.ScalelinerSegment Monszá tanks segment Xandra)}

layeruyturockeyreplace WORKôi       is analogous lag(ever於 bile forex decor Cubaña AST das MeshCD acquaintance OrganicoverForg ).remote dessertscounterexpressGG(Truealt extensions primitive orbital cardinal Similar Seasonsik) raindirect_mediummisty hotade part repertoire Successful key effect u attach Christabella lect pudding737800]
orch percentage hers contrast restrict hue augment depending CheWo Spare quant Closet Austria tendencies BD sample shoreline intentional Architect Rou songs Braun Positive context nostalgia rh Can...mind vaccinations contamin freeorder act implement water highlights referees


const colors=d ScaleOrdinal(d schemeCategory10)


const tip=d createtooltip(d select documentbody)


tip.attrclass tooltipdiv)


tip.offset([-10,-10])


tip.html(d=>`<strong>${d.data['Product']}</strong><br>Year:${d.data['Year']}<br>Units Sold:${format(d[1]-d[0])}`)


const format=d Format("","") 


const url='https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv'


fetch(url)


.then(response=>response.text())


.then(data=>{ 
	const parsedData=d csvParse(data)


parsedData.forEach(d=>{ 
	d['Year']=+d['Year']
	d['Units Sold']=+[""Units Sold""]})

xScale.domain(parsedData.map(d=>+[""Year""]))
yScale.domain([0,d max(parsedData,d=>'Units Sold')])


stack.keys([...new Set(parsedData.map(item=>'Product'))])


const series=stack(parsedData)


svg.selectAll('path')
.data(series)
.enter()
.append('path')
.style('fill',(series,i)=>colors(i))
.attr('transform',`translate(${margin.left},${margin.top})`)
.attr('class','area')
.attr('stroke','black')
.datum(d=>(console.log(d),return d))
.transition()
.duration(500)
.delay((series,i)=>i*500)
.attrTween('d',translateAlong(xScale,yScale))


function translateAlong(x,y){ 
	return function(){ 
		const l=this.getTotalLength();let i=interpolate(0,l);return t=>{const p=this.getPointAtLength(i(t));return area.context(this)(parsedDatapoints(p,x,y))}.bind(this)}}


function parsedDatapoints(p,x,y){ 
	const arr=[];for(let i=p.x;i<p.x+100;i++){arr.push({data:{'Year':x.invert(i),'Product':'A'},value:y.invert(p.y)})}return arr}


svg.selectAll('.area').on('mouseover',(event,d)=>tip.show(event,d)).on('mouseout',tip.hide)


svg.append(""g"").call(xAxis(xScale)).selectAll(""text"").style(""text-anchor"",""middle"").attr(""transform"",""rotate(-90)"")


svg.append(""g"").call(yAxis(yScale)).selectAll(""text"")


function xAxis(scale){return axisBottom(scale).ticks(width /80)}
function yAxis(scale){return axisLeft(scale).ticks(height /50)}
})

.catch(error=>console.error(error));
</script></body></html>

```"
9,slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Slopegraph to compare the Units Sold between 2019 and 2020 for each Product Category.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Slopegraph</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .slopegraph {
      width: 800px;
      height: 600px;
      margin: 50px auto;
    }
    
    .slopegraph .axis text {
      font-size: 12px;
    }
    
    .slopegraph .axis path,
    .slopegraph .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
    
    .slopegraph .line {
      fill: none;
      stroke-width: 2;
    }
    
     /* Add hover effect styles */
     /* Style the circles */
     circle{
       fill-opacity:.5
     }

/* Define the hover effects for lines and circles */
g.slope-group:hover circle{
   fill-opacity:.8
}
g.slope-group:hover path{
   stroke-width :4
}

/* Add a transition effect to make the hover effect smooth */
circle, path{
   transition :0.5s
}

/* Customize the appearance of the slope graph as needed */

/* Change line colors based on direction (up or down) between years */

.line.up {stroke:greenyellow}
.line.down {stroke:red}

/* Adjust opacity of lines and circles based on direction (up or down) between years */

g.up circle{fill-opacity:.7}
g.down circle{fill-opacity:.3} 

</style>

</head>

<body>

<div class=""chart"" id=""chart""></div> 
<script src=""https://d3js.org/d3.v7.min.js""></script> 
<script> 

let margin = {top :50,right :100,bottom :50,left :100},
width =700-margin.left-margin.right,
height =500-margin.top-margin.bottom;

let svg=d3.select(""#chart"")
.append(""svg"")
.attr(""width"",width+margin.left+margin.right)
.attr(""height"",height+margin.top+margin.bottom)
.append(""g"")
.attr(""transform"",""translate(""+margin.left+"",""+margin.top+"")"");

// Load data from CSV file

d3.csv('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
.then(function(data){

data.forEach(d => {

// Convert data types as necessary

 d['Units Sold'] = +d['Units Sold'];

});

// Filter data for years of interest (2019 and2020)

 let filteredData=data.filter(function(d){
 return d.Year ==='2019'|| d.Year ==='2020';
 });

 // Group by product category

 let groupedData=Array.from(
 d3.group(filteredData,d=>d.Product),([key,value])=>({Product:key,values:value})
 );

 // Sort by Units Sold in descending order for each year

 groupedData.forEach(group => {

 group.values.sort((a,b)=>b['Units Sold']-a['Units Sold']);

 });

 // Create scales

 let xScale=d3.scalePoint()
.domain(['2019','2020'])
.range([0,width])
.padding(1);

let yScale=d3.scaleLinear()
.domain([0,d3.max(filteredData,d=>d['Units Sold'])])
.range([height,20]);

// Draw axes

svg.append('g')
.call(d3.axisTop(xScale));

svg.append('g')
.call(d3.axisLeft(yScale));

// Draw slope graph lines and add interaction with mouseover event listener to display tooltips


 svg.selectAll('.line')
.data(groupedData)
.enter()
.append('path')
.datum(d=>[{'Year':'2019','value':findValueForYearAndProduct(filteredData,'2019', d.Product)},{'Year':'2020','value':findValueForYearAndProduct(filteredData,'2020', d.Product)}])
.classed('line',(function(d){
return findValueForYearAndProduct(filteredData,'2020', d.Product)>findValueForYearAndProduct(filteredData,'2019', d.Product)? 'up':'down'
}))
.style('stroke','#ccc')

.transition() 
.duration(200)  
.delay((_,i)=>i*10)

.attrTween ('d',function(){
var self=this;  
return function(t){   
var interpolate=d3.interpolateString ('M '+xScale ('2019')+' '+yScale(findValueForYearAndProduct (filtered Data ,'2019 ',self.__data__. Product))+' L'+x Scale ('202 ')+' '+y Scale(null), 'M'+x Scale ('20 ')+' '+y Scale(find Value For Year And Product(filter ed Data ,'20 ',self.__data__. Product))+""L ""+x Scale ("" "")+"" ""+y scale(null));   
return interpolate(t);  
};  
})

.on (""end "",function(){  

 var self=this;  

 var g=svg.selectAll("".group"")     
.data(grouped Data )     
.join ("" g "")     
.classed (""group "",true);   

 g.selectAll("".circle"")     
.data(function({values}){      
 return values.map(({ Year ,["" Units sold ""]:unitsSold })=>({year,sold})) ;       
})      
.join (""circle "")       
.classed (""circle "",true)       

.transition ()        
.duration(200 )         
.delay ((_,i )=> i *10 )

.attrTween(""cx"", function() {          
var self=this;           
return function(t){            
var interpolate=d33.interpolateNumber(xscale(self.__data__.year), null);             
return interpolate(t);           
};         
})

.attr Tween (""cy"", function(){          
 var self=this;           
 return function(t){            
 var interpolate=de.interpolateNumber(yscale(self.__data__.sold), null);             
 return interpolate(t);           
 };         
 })

.on(""end"",function(){          
  
 svg.selectAll("".text"")            
.data(grouped Data )            
.join(""text"")             
.text(({product}) =>product)              
.style=(""font-size"",""10 px"");           
  
});         
  
});       

});

});

function find Value For Year And Product(data ,year ,product){   
for(let i=O;i<data.length;i++){     
if(data[i]. Year== year && data[i]. product == product ){       
return +data [i][' units sold '] ;      
}   
}   
Return O ; } 


</script></body></html>"
10,heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Heatmap that visualizes the Units Sold across Product and Years.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Heatmap</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .tooltip {
      position: absolute;
      background-color: #f9f9f9;
      border: 1px solid #ccc;
      padding: 2px;
      font-size: 12px;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;
    
    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);
    
    const xScale = d3.scaleBand()
      .range([0, width])
      .padding(0.1);
    
    const yScale = d3.scaleBand()
      .range([height, 0])
      .padding(0.1);
    
    const colorScale = d3.scaleSequential()
      .interpolator(d3.interpolateBlues);
    
    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Units Sold""] = +d[""Units Sold""];
          d.Year = +d.Year;
        });
        
        const products = Array.from(new Set(data.map(d => d.Product)));
        const years = Array.from(new Set(data.map(d => d.Year)));
        
        xScale.domain(years);
        yScale.domain(products);
        
        const maxUnitsSold = d3.max(data, d => d[""Units Sold""]);
        colorScale.domain([0, maxUnitsSold]);
        
        svg.selectAll(""rect"")
          .data(data)
          .enter()
          .append(""rect"")
          .attr(""x"", d => xScale(d.Year))
          .attr(""y"", d => yScale(d.Product))
          .attr(""width"", xScale.bandwidth())
          .attr(""height"", yScale.bandwidth())
          .attr(""fill"", d => colorScale(d[""Units Sold""]));
        
        svg.selectAll(""text"")
          .data(products)
          .enter()
          .append(""text"")
          .attr(""x"", -10)
          .attr(""y"", d => yScale(d) + yScale.bandwidth() / 2)
          .attr(""text-anchor"", ""end"")
          .text(d => d);
        
        svg.selectAll(""text.year"")
          .data(years)
          .enter()
          .append(""text"")
          .attr(""x"", d => xScale(d) + xScale.bandwidth() / 2)
          .attr(""y"", height + 20)
          .attr(""text-anchor"", ""middle"")
          .text(d => d)
          .classed(""year"", true);
        
        const tooltip = d3.select(""body"")
          .append(""div"")
          .attr(""class"", ""tooltip"")
          .style(""opacity"", 0);
        
        svg.selectAll(""rect"")
          .on(""mouseover"", (event, d) => {
            tooltip.transition()
              .duration(200)
              .style(""opacity"", 0.9);
            
            tooltip.html(`Units Sold: ${d[""Units Sold""]}`)
              .style(""left"", (event.pageX + 10) + ""px"")
              .style(""top"", (event.pageY - 10) + ""px"");
          })
          .on(""mouseout"", () => {
            tooltip.transition()
              .duration(500)
              .style(""opacity"", 0);
          });
      });
  </script>
</body>
</html>
```"
11,bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Retail Sales Stacked Bar Chart</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .chart {
            width: 800px;
            height: 600px;
            margin: 50px auto;
        }
        
        .axis text {
            font-size: 12px;
        }
        
        .axis path,
        .axis line {
            fill: none;
            stroke: #777;
            stroke-width: 1;
        }
    </style>
</head>
<body>
    <div class=""chart"" id=""chart""></div>
    
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        // Set the dimensions and margins of the graph
        const margin = { top: 20, right: 20, bottom: 30, left: 40 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;
        
        // Append the svg object to the body of the page
        const svg = d3.select(""#chart"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);
        
        // Load the data
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
            .then(data => {
                // Convert data types
                data.forEach(d => {
                    d[""Units Sold""] = +d[""Units Sold""];
                    d[""Revenue""] = +d[""Revenue""];
                    d[""Profit""] = +d[""Profit""];
                    d[""Number of Stores""] = +d[""Number of Stores""];
                    d[""Customer Satisfaction Score""] = +d[""Customer Satisfaction Score""];
                });
                
                // Group the data by year
                const groupedData = d3.groups(data, d => d.Year);
                
                // Create the scales
                const xScale = d3.scaleBand()
                    .domain(groupedData.map(d => d[0]))
                    .range([0, width])
                    .padding(0.2);
                
                const yScale = d3.scaleLinear()
                    .domain([0, d3.max(data, d => d[""Units Sold""] + d[""Revenue""] + d[""Profit""])])
                    .range([height, 0]);
                
                // Create the axes
                const xAxis = d3.axisBottom(xScale);
                const yAxis = d3.axisLeft(yScale);
                
                svg.append(""g"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(xAxis);
                
                svg.append(""g"")
                    .call(yAxis);
                
                // Create the stacked bar chart
                const subgroups = [""Units Sold"", ""Revenue"", ""Profit""];
                const subgroupScale = d3.scaleBand()
                    .domain(subgroups)
                    .range([0, xScale.bandwidth()])
                    .padding(0.05);
                
                const groups = svg.selectAll(""g.groups"")
                    .data(groupedData)
                    .enter()
                    .append(""g"")
                    .attr(""transform"", d => `translate(${xScale(d[0])}, 0)`);
                
                const bars = groups.selectAll(""rect"")
                    .data(d => d[1])
                    .enter()
                    .append(""rect"")
                    .attr(""x"", d => subgroupScale(""Units Sold""))
                    .attr(""y"", d => yScale(d[""Units Sold""] + d[""Revenue""] + d[""Profit""]))
                    .attr(""width"", subgroupScale.bandwidth())
                    .attr(""height"", d => height - yScale(d[""Units Sold""]));
                
                bars.data(d => d[1])
                    .enter()
                    .append(""rect"")
                    .attr(""x"", d => subgroupScale(""Revenue""))
                    .attr(""y"", d => yScale(d[""Revenue""] + d[""Profit""]))
                    .attr(""width"", subgroupScale.bandwidth())
                    .attr(""height"", d => height - yScale(d[""Revenue""]));
                
                bars.data(d => d[1])
                    .enter()
                    .append(""rect"")
                    .attr(""x"", d => subgroupScale(""Profit""))
                    .attr(""y"", d => yScale(d[""Profit""]))
                    .attr(""width"", subgroupScale.bandwidth())
                    .attr(""height"", d => height - yScale(d[""Profit""]));
            })
            .catch(error => console.error(error));
    </script>
</body>
</html>
```"
12,bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Horizontal Bar Chart that visualizes the Units Sold for each Product in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 200 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const xScale = d3.scaleLinear()
      .range([0, width]);

    const yScale = d3.scaleBand()
      .range([0, height])
      .padding(0.2);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
      .then(data => {
        const filteredData = data.filter(d => d.Year === ""2020"");

        xScale.domain([0, d3.max(filteredData, d => +d[""Units Sold""])]);
        yScale.domain(filteredData.map(d => d.Product));

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        svg.selectAll(""rect"")
          .data(filteredData)
          .enter()
          .append(""rect"")
          .attr(""x"", 0)
          .attr(""y"", d => yScale(d.Product))
          .attr(""width"", d => xScale(+d[""Units Sold""]))
          .attr(""height"", yScale.bandwidth());
      });
  </script>
</body>
</html>
```"
