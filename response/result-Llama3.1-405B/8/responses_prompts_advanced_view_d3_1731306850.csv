Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,advanced view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      shape-rendering: crispEdges;
    }
    
    .axis text {
      font-size: 12px;
    }
    
    .tooltip {
      position: absolute;
      background-color: #f9f9f9;
      border-radius: 5px;
      padding: 2px;
      font-size: 12px;
    }
  </style>
</head>

<body>
<svg width=""800"" height=""600""></svg>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script>

// Set up SVG and margins
const margin = { top: 20, right: 20, bottom: 30, left:40 };
const width = +document.querySelector('svg').getAttribute('width') - margin.left - margin.right,
height = +document.querySelector('svg').getAttribute('height') - margin.top - margin.bottom;

const svg = d3.select(""svg"")
.append(""g"")
.attr(""transform"", `translate(${margin.left}, ${margin.top})`);

// Load data
d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {

data.forEach(d => {
d['Units Sold'] = +d['Units Sold'];
});

// Scales
const xScale = d3.scaleLinear()
.domain([0, d3.max(data, d => d['Units Sold'])])
.range([0, width]);

const yScale = d3.scaleLinear()
.domain([0,d3.max(data,d=>+d.Revenue)])
.range([height ,0]);

// Axis
const xAxis= svg.append(""g"")
.attr(""class"",""x axis"")
.attr(""transform"",`translate(0 ,${height})`)
.call(d3.axisBottom(xScale));

xAxis.selectAll("".tick line"").attr (""stroke"",""#ccc"");

xAxis.selectAll("".tick text"").attr (""fill"",""#333"");



 const yAxis= svg.append (""g"")

   .attr (""class"",""y axis"")

   .call (d3.axisLeft(yScale));

yAxis.selectAll ("".tick line "").attr (""stroke "",""#ccc "");

yAxis.selectAll ("".tick text "").attr (""fill "",""#333 "");



 // Scatterplot

 const dots= svg.selectAll ("".dot "")

   .data (data )

   .enter ()

   .append ('circle ')

     // Add interactive functionality when mouse hovers over a specific data point

     // Highlight the value of the data point on the axis

     // Use Dimple.js library to create interactive visualization elements



     ;

dots.transition()

.duration(100)

.delay((_,i)=>i*10)

.attr ('cx ',function(d){return xScale(d[""Units Sold""]);})

.attr ('cy ',function(d){return yScale(+d.Revenue);})

.style ('fill ','steelblue ')

.style ('opacity ',.6)

.on('mouseover', function(event,d) {

console.log(`Mouseover event triggered for data point with Units Sold:${event.target.__data__[""Units Sold""]} and Revenue:${event.target.__data__.Revenue}`);

})

.on('mouseout', function() {

console.log(`Mouseout event triggered`);

});

});

</script>

</body>

</html>"
2,scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,advanced view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .brush {
      fill-opacity: .125;
      stroke: #666;
      shape-rendering: crispEdges;
    }
    
    .brush .extent {
      fill-opacity: .125;
      stroke: #fff;
      shape-rendering: crispEdges;
    }
  </style>
</head>

<body>
  <svg width=""800"" height=""600""></svg>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script>

const margin = { top: 20, right: 20, bottom: 30, left: 40 };
const width = document.body.clientWidth - margin.left - margin.right -100 ;
const height = document.body.clientHeight - margin.top - margin.bottom-100;

const svg = d3.select(""svg"")
              .attr(""width"", width + margin.left + margin.right)
              .attr(""height"", height + margin.top + margin.bottom)
              .append(""g"")
              .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

let xScale,yScale,xAxis,yAxis,gX,gY;

d3.csv('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
.then(data => {

data.forEach(d => {
        d['Units Sold'] = parseInt(d['Units Sold']);
        d['Revenue'] = parseFloat(d['Revenue']);
});

xScale= d3.scaleLinear()
.domain([0,d3.max(data,d=>+d[""Units Sold""])*1.05])
.range([0,width]);

yScale= d3.scaleLinear()
.domain([0,d3.max(data,d=>+d[""Revenue""])*1.05])
.range([height,0]);

xAxis=d3.axisBottom(xScale);
yAxis=d3.axisLeft(yScale);

gX=svg.append('g')
.attr('transform',`translate(0,${height})`)
.call(xAxis);

gY=svg.append('g')
.call(yAxis);

let brush=d3.brush().extent([[0,0],[width,height]]).on('brush',updateChart).on('end',updateChart);
let gBrush= svg.append('g').call(brush)

function updateChart(event){
  
 let extent=event.selection
  
 if(extent){
   let selectedData=data.filter(function(d,i){
     return (xScale(+d[""Units Sold""])>=extent[0][0] && xScale(+d[""Units Sold""])<=extent[1][0]
             && yScale(+d[""Revenue""])>=extent[1][1] && yScale(+d[""Revenue""])<= extent[0][1]);
   })
   
   console.log(selectedData)
 }else{
   
 }

}

 svg.selectAll('.dot')
.data(data)
.enter()
.append('circle')
.attr(""cx"",(dataPoint)=>xScale(parseInt(dataPoint['Units Sold'])))
.attr(""cy"",(dataPoint)=>yScale(parseFloat(dataPoint['Revenue'])))
.attr(""r"",""5px"")
.style(""fill"",""blue"")

})

.catch(error => console.error(error));

</script></body></html>"
3,scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,advanced view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Retail Sales Scatterplot</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .scatterplot {
            width: 800px;
            height: 600px;
            border: 1px solid lightgray;
        }
        
        .axis path,
        .axis line {
            fill: none;
            stroke-width: 1;
            stroke-opacity: 0.9;
        }
        
        .axis text {
            font-size: 14px;
        }
        
        .dot {
            stroke-opacity: 0.6;
        }
    </style>
</head>

<body>
<div class=""scatterplot"" id=""scatterplot""></div>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script>
let margin = { top: 50, right: 50, bottom: 50, left: 80 };
let width = document.getElementById(""scatterplot"").clientWidth - margin.left - margin.right;
let height = document.getElementById(""scatterplot"").clientHeight - margin.top - margin.bottom;

let svg = d3.select(""#scatterplot"")
    .append(""svg"")
    .attr(""width"", width + margin.left + margin.right)
    .attr(""height"", height + margin.top + margin.bottom)
    .append(""g"")
    .attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");

let xScale = d3.scaleLinear()
    .range([0, width]);

let yScale = d3.scaleLinear()
    .range([height, 0]);

let xAxis = d3.axisBottom(xScale);
let yAxis = d3.axisLeft(yScale);

svg.append(""g"")
    .attr(""class"", ""x-axis axis"")
    .attr(""transform"", ""translate(0,"" + height + "")"");

svg.append(""g"")
    .attr(""class"", ""y-axis axis"");

d3.csv('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
.then(data => {
data.forEach(d => {
   d['Units Sold'] = parseInt(d['Units Sold']);
   d['Revenue'] = parseFloat(d['Revenue']);
});

xScale.domain([Math.min(...data.map(d => d['Units Sold'])) * 0.9,
               Math.max(...data.map(d => d['Units Sold'])) * 1.05]);
yScale.domain([Math.min(...data.map(d => d['Revenue'])) * 0.9,
               Math.max(...data.map(d => d['Revenue'])) * 1.05]);

svg.select("".x-axis"")
  	.call(xAxis.tickFormat(function() { return arguments[0] /10000000 +""M"";}).tickSize(-height))
  	.selectAll('text')
     	.style('text-anchor', 'middle')
     	.attr('transform', 'rotate(-45)');

svg.select("".y-axis"")
  	.call(yAxis.tickFormat(function() { return ""$""+arguments[0] /10000000 +""M"";}).tickSize(-width));

svg.selectAll("".dot"")
.data(data)
.enter()
.append('circle')
.attr('cx', function (d) { return xScale(d[""Units Sold""]); })
.attr('cy', function (d) { return yScale(d[""Revenue""]); })
.attr('r', '6')
.style('fill-opacity', '10%');

var zoomBehavior= 
	d3.zoom()
    	.extent([[margin.left ,margin.top],[width-margin.right , height-margin.bottom]])
    	.translateExtent([[margin.left ,margin.top],[width-margin.right , height-margin.bottom]])
    	.scaleExtent([10000000/(Math.max(...data.map(function(t){return t[""Units Sold""]})))*10000000*10,(10000000/(Math.max(...data.map(function(t){return t[""Units Sold""]})))*10000000*10)*10])
    	.on ('zoom' ,function(){
        	zoomed();
       });

function zoomed() {

var transform=d3.event.transform;

var xscale=d3.event.transform.rescaleX(xScale);
var yscale=d3.event.transform.rescaleY(yScale);

 svg.select("".x-axis"").call(xAxis.scale(xscale));
 svg.select("".y-axis"").call(yAxis.scale(yscale));

 svg.selectAll (""circle.dot"") 
      	 	 	 	 	
      	 	 	 //move circles on correct position on scale after zooming 
                  //and applying new positions for circles based on new scale	
                  //also apply new positions for texts based on new scale	
                  //also apply new radius for circle based on event transform scale value	
                  //so circle size will not change after event transform	
      	 	 	 //
        	  	 
        	  	 
        	  	 
        	  	 //move circles on correct position on scale after zooming 
                  //and applying new positions for circles based on new scale	
                  //
                   //
                   //
                   //
                   //
                   //
                   //
                   svg.selectAll (""circle.dot"") 
      	 	 	      
      	 	 	      
                    .
                    attr ('cx' ,function(t){return xscale(t [""Units Sold""])})
                    .
                    attr ('cy' ,function(t){return yscale(t [""Revenue""])})
                    
                     ;
}

svg.call(zoomBehavior)

})

.catch(error => console.error(error));
</script>

</body>

</html> 

```"
4,scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,advanced view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .tooltip {
      position: absolute;
      background-color: #f9f9f9;
      border: 1px solid #ccc;
      padding: 2px;
      font-size: 12px;
    }
  </style>
</head>

<body>

<svg width=""800"" height=""600""></svg>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script>

let margin = {top: 20, right: 20, bottom: 30, left:40};
let width = document.body.clientWidth - margin.left - margin.right
let height = document.body.clientHeight - margin.top - margin.bottom

// append the svg object to the body of the page
let svg = d3.select(""body"")
.append(""svg"")
.attr(""width"", width + margin.left + margin.right)
.attr(""height"", height + margin.top +margin.bottom)
.append(""g"")
.attr(""transform"",""translate(""+margin.left+"",""+margin.top+"")"")

//Read the data
d3.csv('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv').then(data => {

data.forEach(d => {
        d['Units Sold'] = parseInt(d['Units Sold']);
        d['Revenue'] = parseInt(d['Revenue']);
})

var xScale=d3.scaleLinear()
.domain([0,d3.max(data,function(d){return d[""Units Sold""]})])
.range([0,width])

var yScale=d3.scaleLinear()
.domain([0,d3.max(data,function(d){return d[""Revenue""]})])
.range([height,0])

// Add a scale for bubble size
const bubbleSizeScale = d3.scaleLinear()
.domain([10000,d3.max(data,function(d){return d[""Profit""]})])
.range([10,50])

const divTooltip=d3.select('body')
.append('div')
.style('opacity',0)
.classed('tooltip',true)

const dots=svg.selectAll("".dot"")
.data(data).enter().append(""circle"").attr(
""class"",""dot""
).attr(
""cx"",function (d) { return xScale( d[""Units Sold""]); }
).attr(
""cy"",function (d) { return yScale( d[""Revenue""]); }
).attr(
'r',function (d) { return bubbleSizeScale( d[""Profit""]); }
)

.on('mouseover', function(event,d){
divTooltip.transition().duration(200).style('opacity','.9');
divTooltip.html(`Product:${d.Product}<br>Year:${parseInt(d.Year)}<br>Customer Satisfaction Score:${parseInt(d['Customer Satisfaction Score'])}`)
.style('left',(event.pageX+10)+'px')
.style ('top',(event.pageY-28)+'px');
})

.on ('mouseout' , function (){
divTooltip.transition (). duration (500). style (' opacity ',0);
})

.on (""click"", function(event,d){
window.open(`https://www.google.com/search?q=${encodeURIComponent(`${parseInt((new Date()).getFullYear())-(parseInt((new Date()).getFullYear())-parseInt(parseInt(parseInt(parseInt(parseInt(parseInt(parseInt(new Date().getFullYear())))))))+parseInt(new Date().getMonth())+6}`)}${encodeURIComponent(`${decodeURIComponent('%E6%B5%8B%E8%AF%95')}`)}${encodeURIComponent(`${decodeURIComponent('%E4%B8%AD%E6%96%87')}`)}`, '_blank');
})

dots.exit().remove()

var xAxis=d3.axisBottom(xScale);

var yAxis=d3.axisLeft(yScale);

svg.append (""g""). attr (
""transform"",""translate(""+[ ""O""+ "",""+height+"" ]""))
.call(xAxis);

svg.append (""g""). call(yAxis);

})
</script></body></html>"
5,scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot with query widgets showing the Units Sold and Revenue of the given dataset. Add a slider to represent the Year.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,advanced view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .scatterplot {
      width: 800px;
      height: 600px;
      border: 1px solid #ddd;
    }
    
    .slider-container {
      margin-top: 20px;
    }
    
    .slider {
      -webkit-appearance: none;
      width: 100%;
      height: 10px;
      border-radius: 5px;
      background-color: #ccc;
      outline: none;
    }
    
    .slider::-webkit-slider-thumb {
        -webkit-appearance:none; 
        appearance:none; 
        width :15 px; 
        height :15 px; 
        background-color :#4CAF50 ; 
        cursor:pointer ;
     }

     /* for Mozilla */
.slider::-moz-range-thumb{
   width :15 px; 
   height :15 px;  
   background-color:#4CAF50 ;  
   cursor:pointer ;
}

/* for IE */
.slider::-ms-thumb{
   width :15 px;   
   height :15 px ;   
   background-color:#4CAF50 ;   
cursor:pointer ;
}
</style>

<body>

<div class=""scatterplot"" id=""scatterplot""></div>

<div class=""slider-container"">
<input type=""range"" min=2010 max=2020 value=2010 step=1 id = ""yearSlider"" class = ""slider"">
<label>Year:</label><span id = ""yearValue"">2010</span></div>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script> 

let margin = {top:20,right30,bottom30,left40},
width =500-margin.left-margin.right,
height=300-margin.top-margin.bottom;

let svg=d3.select(""#scatterplot"")
.append(""svg"")
.attr(""width"",width+margin.left+margin.right)
.attr(""height"",height+margin.top+margin.bottom)
.append(""g"")
.attr(""transform"",""translate(""+margin.left+"",""+margin.top+"")"");

let xScale=d3.scaleLinear()
.domain([0,10000])
.range([0,width]);

let yScale=d3.scaleLinear()
.domain([0,200000])
.range([height,0]);

svg.append('g')
.call(d3.axisBottom(xScale))
.attr('transform','translate(0,' + (height) + ')');

svg.append('g')
.call(d3.axisLeft(yScale));

d3.csv(
""https://gist.githubusercontent.com/FFFFFancy/2e1f78302fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%252025ales.csv"").then(function(data){
data.forEach(function(d){
 d['Units Sold']=parseInt(d['Units Sold']);
 d['Revenue']=parseInt(d['Revenue']);
});

function update(year){
 let filteredData=data.filter(function(d){return d.Year==year});
 svg.selectAll('circle').remove();
 svg.selectAll('circle')
.data(filteredData)
.enter()
.append('circle')
.attr('cx',function (d){return xScale(parseInt((d)['Units Sold']));})
.attr ('cy', function (d){return yscale(parseInt((d)['Revenue']));})
.atr ('r' ,6);
}

update(201O);

document.getElementById (""yearSlider"").oninput=function(){
 update(this.value);
 document.getElementById (""yea rValue "").innerHTML=this.value;}
}); 

</script> </body></html>"
6,scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot showing the Units Sold of Clothing. Add animated transitions that connect these points using lines in order.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,advanced view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .scatterplot {
      width: 800px;
      height: 600px;
      border: 1px solid lightgray;
    }
    
    .axis path, .axis line {
      fill: none;
      stroke: #777;
      shape-rendering: crispEdges;
    }
    
    .axis text {
      font-size: 12px;
    }
    
    .dot {
      stroke-opacity: 0.6;
    }
    
     /* Add styles for the lines connecting points */
     .line-path{
       stroke-opacity:.5
     }

     /* Add styles for the animation */
     @keyframes fade-in{
       from{opacity:.2}
       to{opacity:.8}
     }

     
     
     
   </style>

</head>

<body>

<div class=""scatterplot"" id=""scatterplot""></div>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script> 
// Set up margins and dimensions
const margin = { top:50,right :50,bottom :100,left :80};
const width =800-margin.left-margin.right,
height=600-margin.top-margin.bottom;

// Create SVG element
const svg=d3.select(""#scatterplot"")
.append(""svg"")
.attr(""width"",width+margin.left+margin.right)
.attr(""height"",height+margin.top+margin.bottom)
.append(""g"")
.attr(""transform"",`translate(${margin.left},${margin.top})`);

// Load data
d3.csv('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
.then(data=>{

data.forEach(d => {

 d['Units Sold'] = +d['Units Sold'];

});

// Filter data for clothing products

 const clothingData=data.filter(d=> d.Product ==='Clothing');

 // Scales

 const xScale=d3.scaleLinear()
.domain([0,d3.max(clothingData,d=> d['Units Sold'])])
.range([0,width]);

 const yScale=d3.scaleLinear()
.domain([2009,2014])
.range([height,0]);

 // Axes

 const xAxis=d3.axisBottom(xScale).ticks(10);
 svg.append('g')
.attr('class','x axis')
.attr('transform',`translate(0,${height})`)
.call(xAxis);

 const yAxis=d3.axisLeft(yScale).ticks(6);
 svg.append('g')
.attr('class','y axis')

.call(yAxis);

 // Scatter plot with lines connecting points in order of year

 svg.selectAll('.dot')

.data(clothingData)

.enter()

.append('circle')

.style(""animation"",""fade-in forwards"")

.style(""-webkit-animation"",""fade-in forwards"")

.style(""-moz-animation"",""fade-in forwards"")

.style(""-o-animation"",""fade-in forwards"")

.transition()

.delay((_,i)=>i*500)

.duration(500)

.ease(d3.easeBounceInOut)

.on(""start"",function(){

 d3.select(this)

.classed("".dot"",true);

})

.on (""interrupt "",function(){

 d3.select(this )

.classed("".dot "",false );

})

.on (""end "",function (){

 d3.select (this )

.classed ("". dot "",true );

})

.transition ()

.delay ((_, i )=> i *500 )

.duration (500 )

.ease (d => easeBounceInOut )

.on (""start "", function (){

 d => select (this )

.classed ("". dot "", true );

})

.on (""interrupt "" , function (){

   })

}

.catch(error => console.error(error));

</script></body></html>"
7,line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Units Sold of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,advanced view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Multi-series Line Chart with Interactive Highlight</title>
  <style>
    /* Add some basic styling to make the chart look decent */
    body {
      font-family: Arial, sans-serif;
    }
    
    .chart {
      width: 800px;
      height: 600px;
      margin: 50px auto;
    }
    
    .axis path, .axis line {
      fill: none;
      stroke: #777;
      shape-rendering: crispEdges;
    }
    
    .axis text {
      font-size: 12px;
    }
    
    .line {
      fill: none;
      stroke-width: 2.5px;
    }
    
   /* Style the highlight line on hover */
   .highlight-line{
     stroke-width :4.5 px ;
     opacity :0.7 ;
   }

</style>

</head>

<body>

<div class=""chart"" id=""chart""></div>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script>

// Set up margins and dimensions for the chart
const margin = { top :20 , right :30 , bottom :30 , left :40 };
const width =800 - margin.left - margin.right ;
const height =600 - margin.top - margin.bottom ;

// Create SVG and group for the chart
const svg=d3.select(""#chart"")
.append(""svg"")
.attr(""width"", width +margin.left +margin.right )
.attr(""height"", height +margin.top +margin.bottom )
.append(""g"")
.attr(""transform"", `translate(${margin.left}, ${margin.top})`);

// Load data from CSV file
d3.csv('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv').then(data => {

data.forEach(d => {

// Convert data types as needed (using square brackets for property names with spaces)
d['Units Sold'] =+ d['Units Sold'];

});

// Extract unique products for separate lines
const products= [...new Set(data.map(d => d.Product))];

// Define color scale for products (lines)
const colorScale=d3.scaleOrdinal()
.domain(products)
.range(d3.schemeCategory10);

 // Define x-scale (years) and y-scale (units sold)

 const xScale=d3.scalePoint()
.domain([...new Set(data.map(d => d.Year))])
.range([0, width])
.padding(0.2);

 const yScale=d3.scaleLinear()
.domain([0,d3.max(data,d=> d['Units Sold'])]).nice()
.range([height,0]);

 // Add axes

 const xAxis=d3.axisBottom(xScale);
 svg.append(""g"")
.attr(""class"",""axis"")
.attr (""transform"" ,`translate(0,${height})`)
.call(xAxis);

 const yAxis= d3.axisLeft(yScale);
 svg.append (""g "")
.attr (""class "","" axis "")
.call(yAxis );

 // Function to update line visibility on hover

 function updateLineVisibility(productName,isHovered){

svg.selectAll("".line"")

.classed (""highlight-line "",function(){

return isHovered && this.getAttribute('data-product') === productName;

})

.classed ('dimmed',function (){

return isHovered && this.getAttribute ('data-product ') !== productName;

});

}

 // Add lines

products.forEach(product=>{

const productData=data.filter(d=> d.Product === product);

const line=svg.append('path')
.datum(productData)
.attr('class','line')
.style ('stroke ',colorScale(product))
.style ('fill ','none ')
.style ('stroke-width ','2.5 px ')
.style ('opacity ',1)

.on('mouseover',() =>updateLineVisibility(product,true))
.on('mouseout',() =>updateLineVisibility(product,false))

.transition()

.duration(100)

.delay((_,i) => i*50)

.ease(d3.easeLinear )

.on('start',function(){

this.setAttribute ('data-product ',product);

})

.on('end',function (){

this.classList.remove ('highlight-line ');

})

;

 });

 });

 </script >

 </body >

 </html >"
8,bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Units Sold for each Product in 2020. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Retail Sales Bar Chart</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .zoom {
            cursor: move;
            fill: none;
            pointer-events: all;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 40 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;
        
        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);
        
        const xScale = d3.scaleBand()
            .range([0, width])
            .padding(0.2);
        
        const yScale = d3.scaleLinear()
            .range([height, 0]);
        
        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);
        
        svg.append(""g"")
            .attr(""transform"", `translate(0, ${height})`)
            .attr(""class"", ""x-axis"");
        
        svg.append(""g"")
            .attr(""class"", ""y-axis"");
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
            .then(data => {
                data = data.filter(d => d.Year === ""2020"");
                
                xScale.domain(data.map(d => d.Product));
                yScale.domain([0, d3.max(data, d => +d[""Units Sold""])]);
                
                svg.select("".x-axis"")
                    .call(xAxis)
                    .selectAll(""text"")
                    .style(""text-anchor"", ""end"")
                    .attr(""transform"", ""rotate(-45)"");
                
                svg.select("".y-axis"")
                    .call(yAxis);
                
                svg.selectAll(""rect"")
                    .data(data)
                    .enter()
                    .append(""rect"")
                    .attr(""x"", d => xScale(d.Product))
                    .attr(""y"", d => yScale(+d[""Units Sold""]))
                    .attr(""width"", xScale.bandwidth())
                    .attr(""height"", d => height - yScale(+d[""Units Sold""]));
                
                const zoom = d3.zoom()
                    .scaleExtent([1, 8])
                    .on(""zoom"", zoomed);
                
                svg.call(zoom);
                
                function zoomed(event) {
                    svg.selectAll(""rect"")
                        .attr(""transform"", event.transform);
                    
                    svg.select("".x-axis"")
                        .call(xAxis.scale(event.transform.rescaleX(xScale)));
                    
                    svg.select("".y-axis"")
                        .call(yAxis.scale(event.transform.rescaleY(yScale)));
                }
            });
    </script>
</body>
</html>
```"
9,bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Units Sold for each Product in 2020. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,advanced view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Bar Chart</title>
  <style>
    /* add some basic styling to make the chart look decent */
    body {
      font-family: Arial, sans-serif;
    }
    
    .chart {
      width: 800px;
      height: 600px;
      margin: 50px auto;
    }
    
    .bar {
      fill: steelblue;
    }
    
    .bar:hover {
      fill: brown;
    }
    
    .axis text {
      font-size: 12px;
    }
    
     /* drag and drop styles */
     #drag-container{
       position:relative; 
       width :100%;
       height :100%;
   }

   #drag-container div{
        position:absolute; 
        padding :10px ; 
        background-color :#f2f2f2 ; 
        cursor :move;  
   }

   #drop-container{
       position:relative; 
       width :100%;
       height :100%;   
   }

   #drop-container div{
        padding :10px ;  
        background-color:#f2f2f2 ;
        
   } 

 </style>

</head>

<body>

<div class=""chart"" id=""chart""></div> 

<script src=""https://d3js.org/d3.v7.min.js""></script>  

<script> 

let margin = {top:20, right:20, bottom:30, left40};   
let width = document.body.clientWidth -margin.left-margin.right,
height=500-margin.top-margin.bottom;

// load data
d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {

data.forEach(d => { d['Units Sold'] = +d['Units Sold']; d.Year=+d.Year});

// filter data for year2020
const data2020=data.filter(d=> d.Year===2020);

const subgroups=[""Product""];
const groups=[""Units Sold""];

// Add X axis
var x=d3.scaleBand()
.domain(data2020.map(d=>(d.Product)))
.range([margin.left,width-margin.right])
.padding(0.5)

var xAxis=d3.axisBottom(x).tickFormat("""").tickSizeOuter(0);
svg.append(""g"")
.attr(""transform"",`translate(60,${height})`)
.call(xAxis)
.selectAll(""text"")
.attr(""transform"",""rotate(-45)"")
.style(""text-anchor"",""end"");

// Add Y axis

var y=d3.scaleLinear()
.domain([20000,d3.max(data,function(d){return +d[""Units Sold""]})])
.range([height-margin.bottom,margin.top])

svg.append('g')
.call(d3.axisLeft(y))
.selectAll('line')
.style('stroke','none');

 svg.selectAll("".bar"")
.data(data2020)
.enter().append(""rect"")
.attr('class','bar')
.attr('x',function (data,i){
return x(i)+60})
.attr('y',function (data){
return y(+data[""Units Sold""])})
.attr ('width',x.bandwidth())
.transition()
.duration(750)
.delay(function (data,i){console.log(i); return i*10})
.on (""start"",function start(){
if(!this._value) this._value=endAngle- startAngle})

.on (""interrupt"",function interrupt(){
this.stop();
})

.on (""end"", function end(){

if(this._value>=90 && this._value<180) this.parentNode.appendChild(this);

})

.transition()

.duration (750)

.delay(function (data,i){console.log(i); return i*10})

.style ('fill-opacity',1e-6);

svg.selectAll('.bar')

.data(data.sort((a,b)=>b['Unit sSold']-a['Unit sSold']))

.transition()

.duration(null)

.order();

});

</script>

</body>

</html>"
10,bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Units Sold for each Product in 2020. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Units Sold.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,advanced view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Bar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .bar {
      fill: steelblue;
    }
    
    .bar:hover {
      fill: brown;
    }
    
    .axis--x path {
      display: none;
    }
  </style>
</head>

<body>
  <div id=""chart""></div>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script>

let margin = {top: 20, right: 20, bottom: 30, left: 40};
let width = document.body.clientWidth - margin.left - margin.right;
let height = document.body.clientHeight - margin.top - margin.bottom;

let svg = d3.select(""#chart"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", ""translate("" + margin.left + "","" +margin.top+ "")"");

d3.csv('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
.then(data => {

data.forEach(d => {
        d['Units Sold'] = parseInt(d['Units Sold']);
        d.Year = parseInt(d.Year);
});

data.sort((a,b) => b['Units Sold']- a['Units Sold']);

const xScale= d3.scaleBand()
.domain(data.map(d=> d.Product))
.range([0,width])
.padding(0.2);

const yScale= d3.scaleLinear()
.domain([0,d3.max(data,d=>d['Units Sold'])])
.range([height,0]);

svg.selectAll("".bar"")
.data(data.filter(function (d) { return (parseInt(d.Year)==2020); }))
.enter().append('rect')
.attr('class','bar')
.attr('x',function (d) { return xScale(d.Product); })
.attr('y',function (d) { return yScale(parseInt(d[""Units Sold""])); })
.attr('width',xScale.bandwidth())
.transition()
.duration(100)
.delay(function (i,j){return i*10})
.attr('height',function (i,j){return height-yScale(parseInt(i[""Units Sold""]))});

svg.append(""g"").call(
  	d3.axisBottom(xScale).tickSize(-height).tickSizeOuter(10)
	).selectAll("".tick text"").style(
		""text-anchor"",""middle""
	);

	svg.append(
  	""g""
   ).call(
    	d3.axisLeft(yScale).ticks(null,""s"").tickFormat(function(i){
      	return i
     }).tickSize(-width)).select("".domain"").remove();

 svg.selectAll('.text')  
.data(data.filter(function (i){return parseInt(i.Year)==2020;}))   
.enter().append('text') 
.text(function(j,i){
	return j[""Product""];
})  
.transition() 
.duration(100) 
.delay(function(j,i){
	return i*10
})  
.style({
	fill:'#black',
	fontFamily:'Arial',
	fontWeight:'bold'
})
.style({
	fill:'#black',
	fontFamily:'Arial',
	fontWeight:'bold'
})
.style({
	fill:'#black',
	fontFamily:'Arial',
	fontWeight:'bold'
})

var selectBox=document.createElement (""SELECT"");
selectBox.id='sort';
document.body.appendChild(selectBox);
var option=document.createElement (""option"");
option.value='asc';
option.textContent='Ascending';
selectBox.appendChild(option);
var option=document.createElement (""option"");
option.value='desc';
option.textContent='Descending';
selectBox.appendChild(option);

document.getElementById ('sort').addEventListener ('change', function (){

if(document.getElementById ('sort').value=='asc'){
	data.sort((a,b)=> a ['Unit Sales']-b ['Unit Sales']);
}else{
	data.sort((a,b)=> b ['Unit Sales']-a ['Unit Sales']);
}

svg.selectAll('.bar')
.data(data.filter(function(a){return parseInt(a.year)==2021;}))
.transition()
.duration(500)
.delay((j,k)=>k*50)

});
}); 

</script>  

</body>  

</html>"
