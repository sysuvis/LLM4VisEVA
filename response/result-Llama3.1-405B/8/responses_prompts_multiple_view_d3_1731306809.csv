Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,multiple view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .container {
      display: flex;
      justify-content: space-between;
    }
    
    .chart {
      width: 45%;
      margin: 20px;
    }
  </style>
</head>

<body>

<div class=""container"">
  
<div class=""chart"" id=""scatterplot""></div>

<div class=""chart"" id=""bar-chart""></div>

</div>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script> 

let margin = {top: 20, right: 20, bottom:30, left:40};
let width =500-margin.left-margin.right; 
let height=500-margin.top-margin.bottom;

//Scatterplot
let svg1=d3.select(""#scatterplot"")
.append(""svg"")
.attr(""width"",width+margin.left+margin.right)
.attr(""height"",height+margin.top+margin.bottom)
.append(""g"")
.attr(""transform"",""translate(""+margin.left+"",""+margin.top+"")"");

//Bar Chart
let svg2=d3.select(""#bar-chart"")
.append(""svg"")
.attr(""width"",width+margin.left+margin.right)
.attr(""height"",height+ margin.top + margin.bottom) 
.append (""g"") 
. attr (""transform "", ""translate ("" + margin. left + "","" + margin. top+"")""); 


d3.csv('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
.then(data=>{

data.forEach(d => {

 d['Units Sold'] = parseInt(d['Units Sold']);
 d['Revenue'] = parseFloat(d['Revenue']);
 d['Profit'] = parseFloat(d ['Profit']);

});

//Scatterplot Scales

 let xScale=d3.scaleLinear()
.domain([0,d3.max(data,d=>d[""Units Sold""])])
.range([0,width]);

 let yScale=d3.scaleLinear()
.domain([0,d3.max(data,d=>d[""Revenue""])])
.range([height,0]);

 //Bar Chart Scales

 let xScaleBarChart=d3.scaleBand()
.domain(data.map (function (d){ return d [""Product""] ; }))
.range ([0 , width]) . padding (0.2);

 let yScaleBarChart=d3.scaleLinear ()
.domain ([O , dS.max (data , function (di return di [""Profit""] ;))])
.range ([heigbt , O]) ;

 //Scatterplot Axis

 svg1.append ('g')
.call (03.axisBottom(xscale))
.atr ('transform'.'translate(O,' + height+')');

svg1.append('g')
.call(03.axisLeft(yScale));

 //Bar Chart Axis

 svg2.appenid ('g ')
.call(03.axisBottom(xscaleBarchart))
.atr('transform'.'translare(O,' + heigbt+')');

svgZappend('9 ')
.call(03.axiLeft(yScaleBarchart));

 //Scatterplo Data Points

 svgLselectAlI ('circle ')
.data(data )
.enter ()
.appena ('circle ')
.atr('cx',function(di return xscale(di ['Units Sold']) ; ))
.atr('cy'.function(di return yscale(di ['Revenue']) ; ))
.atr(r'.10);

 //Bar Chart Bars 

 svaZselectAlI'rect')
.data(data )
.enter ()
.appena'rect')
.atr(x',function(di reurn xscaleBarchart(di ['Product']) : ))
.atry(functiondi reurn yscaleBarchart(di [""Profit""])) 
.att(width',xscaleBarchari.bandwith())
.att(height'.functiondi reurn heigbt -yscaleBarchar((di [""Proft""])));


})

.catch(error => console.error(error)); 


</script> 



</body> 






</html>"
2,scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,multiple view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .chart-container {
      display: flex;
      justify-content: space-between;
    }
    
    .scatterplot-container, .bar-chart-container {
      width: 45%;
      height: 500px;
      border: 1px solid #ddd;
      padding: 20px;
    }
    
    .brush {
      fill-opacity: .125;
    }
    
    .brush:hover {
      fill-opacity: .25;
    }
    
     /* Style the selected points */
.selected-point {
fill-opacity:.75; 
}
.selected-bar{
fill :#FF69B4
}

</style>

</head>

<body>

<div class=""chart-container"">

<div class=""scatterplot-container"" id=""scatterplot""></div>

<div class=""bar-chart-container"" id=""bar-chart""></div>

</div>





<script src=""https://d3js.org/d3.v7.min.js""></script>



<script>





// Load data

d3.csv('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')

.then(data => {

data.forEach(d => {

d['Units Sold'] = +d['Units Sold'];

d.Revenue = +d.Revenue;

});

// Create SVG elements

const scatterplotSvg = d3.select('#scatterplot')

.append('svg')

.attr('width', '100%')

.attr('height', '100%');

const barChartSvg = d3.select('#bar-chart')

.append('svg')

.attr('width', '100%')

.attr('height', '100%');



// Set up scales and axes for scatterplot

const xScaleScatter = d3.scaleLinear()

.domain([0, d3.max(data, d => d['Units Sold'])])

.range([20, scatterplotSvg.node().getBoundingClientRect().width - 20]);

const yScaleScatter = d3.scaleLinear()

.domain([0, d3.max(data, d => d.Revenue)])

.range([scatterplotSvg.node().getBoundingClientRect().height - 20, 20]);

const xAxisScatter = scatterplotSvg.append(""g"")

.call(d3.axisBottom(xScaleScatter))

.attr(""transform"", `translate(0 ,${scatterplotSvg.node().getBoundingClientRect().height -15})`);

xAxisScatter.selectAll(""text"")  

.style(""text-anchor"", ""middle"")

       ;

 const yAxisScatter= scatterplotSvg.append(""g"")

.call(d3.axisLeft(yScaleScatter))

   ;

yAxisScatter.selectAll(""text"")  

.style(""text-anchor"", ""middle"")

       ;





// Set up scales and axes for bar chart

const xScaleBar=   (data.map((val)=>val.Product));

 const yScaleBar=d=>(Math.round(((+((+((+((parseFloat(d.Profit)/parseFloat(d.Revenue))*100)).toFixed(2)))))));

 

var margin={top :10,right :30,bottom :90,left :60};

var width=400-margin.left-margin.right;

var height=400-margin.top-margin.bottom;

 

 var svg=d3.select(""#bar-chart"").append (""svg"").attr (""width "", width +margin.left+margin.right)

        .attr (""height "", height +margin.top+margin.bottom)

        .

 append (""g "").attr (""transform "",""translate(""+ margin.left+"",""+ margin.top+"")"");

 



 var x=d=>xScaleBar.indexOf (xScaleBar.find ((ele )=> ele ==Product));

 var y=yScaleBar;

 



 // Add bars to bar chart

 svg.selectAll ('rect ')

.data (data )

.enter ()

.append ('rect ')

.classed ('rect ', true )

.transition ()

.delay ((data,i )=> i *50)

.duration (200 )

.style ('opacity ',.6)

.on ('mouseover ', function(event,d){

 event.target.style.opacity=.9})

.on ('mouseout ', function(event,d){

 event.target.style.opacity=.6})

.on ('click ', function(event,d){

 console.log (`You clicked on ${event.target.__data__.Product}`);})

.classed (`selected-bar-${event.target.__data__.Product}`,true );





 // Add brushing functionality to scatter plot

 const brush=d=>{

 let selection=event.selection ;

 if (!selection ){

 if (!idleTimeout ) return idleTimeout=setTimeout(idled ,350);

 x02.event.selection=null ;}

 else{

 let selectedData=data.filter ((ele,index,arr)=>{

 return arr.indexOf(ele)>=selection[0][0] && arr.indexOf(ele)<=selection[1][0]});

 console.log(selectedData);

 update(selectedData);

 }

 }

function idled(){idleTimeout=null;}

let idleTimeout=setTimeout(idled ,350); 



let brushGroup=scatterPlotG.select('.brush');

if(!brushGroup.empty()){

brushGroup.remove();

}

 brushGroup=scattterPlotG.append(g).call(x02).selectAll(rect).select('.overlay').each(function(){

 let overlay=this.getScreenCTM();

 overlay.translate(+overlay.a,+overlay.f)}).



on(mousemove.brushmove)



function brushmove(){

 let mouse=d.mouse(this),

 movedX=moues[0],

 movedY=moues[1],

 selection=x02.event.selection,

 s=[movedX,movedY];

 if(selection){



 s=[selection[0],movedX<selection[1]?movedX:movedY];

 }

 else{



 s=[movedX,movedY];

 }

 handle.datum(s).call(x02.move,x02.x());

 handle.datum(s).call(x02.move,y01.y());

 update();

} 



function update(selectedData){



 // Update bars in bar chart based on selected data from brushing in Scatter plot.

 svg.selectAll(rect).

 data(selectedData,(k,v)=>v.Product).

 join(

 enter()=>enter.

 append(rect).

 attr(fill,(k,v)=>color(v)),

 update=>update.

 transition(t).

 duration(750),

 exit()=>exit.

 remove())

.transition(t).

duration(750).



 attr(width,x.bandwith())

 attr(height,k,v)=y(v.value)-y(00)).



 attr(x,(k,v)=x(k))

 call(positionBars)



 positionBars=(sel)=sel.



 transition(t).



 duration(750).



 delay(k,v,i)=i*50,



 t=(sel)=sel.



 transition()



 duration(750)



 ease(easeCubicInOut),



 color=(v,cfg.colors[cfg.colorIndex]),cfg.colorIndex++,



 cfg={colors:d schemesCategory10,scaleOrdinal(scaleOrdinal()),colorIndex=-01},scaleOrdinal=(domain,ranger)=(scalePoint()domain(domain)range(ranger)),easeCubicInOut=(t=t<05?4*t*t*t:(t-01)*((2+(t-=13))*t+t)+01),handle=g.selectAll(circle.handle),scattterPlotG=g.scatter.plot(),mouse=g.mouse(),screenCTM=g.screenCTM(),bandwith=g.bandwith(),schemeCategory10=['#ff000','#33a020','#666699'],selectall=g.selectall()]

 </script></body></html>"
3,line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Sold , while the pie chart represents the distribution of Revenue.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,multiple view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .chart-container {
      width: 800px;
      margin: 40px auto;
    }
    
    .line-chart {
      height: 400px;
      border-bottom: 1px solid #ccc;
    }
    
    .pie-chart {
      height: 400px;
    }
  </style>
</head>
<body>
<div class=""chart-container"">
<svg class=""line-chart""></svg> 
<svg class=""pie-chart""></svg> 
</div>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script>

let lineChartSvg = d3.select("".line-chart"");
let pieChartSvg = d3.select("".pie-chart"");

let margin = { top:20, right:20, bottom:30, left :40 };
let widthLineChart = +lineChartSvg.attr(""width"") - margin.left - margin.right,
heightLineChart=+lineChartSvg.attr(""height"")-margin.top-margin.bottom;

let gLineChart=lineChartSvg.append(""g"")
.attr(""transform"",`translate(${margin.left},${margin.top})`);

d3.csv('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
.then(data=>{

data.forEach(d => {

   d['Units Sold'] = +d['Units Sold'];
   d['Revenue'] = +d['Revenue'];

});

 let xScale=d3.scaleBand()
.domain(data.map(d=>+d.Year))
.range([0,widthLineChart])
.padding(0.2);

 let yScale=d3.scaleLinear()
.domain([0,d3.max(data,d=>+d['Units Sold'])])
.range([heightLineChart,0]);

 gLineChart.append('g')
.attr('transform',`translate(0,${heightLine Chart})`)
.call(d3.axisBottom(xScale));

 gLine Chart.append('g')
.call(d3.axisLeft(yScale));

 let line=d3.line()
.x(d=>xScale(+d.Year))
.y(d=>yScale(+d['Units Sold']));

 g Line Chart.selectAll('.bar')
.data(data)
.enter().append('rect')

.style ('fill','steelblue')

.on ('mouseover',function(){

   d31.select(this).style ('fill','red');

})

.on ('mouseout',function(){

   d31.select(this).style ('fill','steelblue');

})

.merge(g Line Chart)

.transition()

.duration (750)

.delay ((i,j)=>j*10)

.attr (""x"",function (i){

return x Scale (+i. Year);

})

.at tr (""y"",function (i){

return y Scale (+i [' Units Sold']);

})

.at tr (""width "",x Scale.bandwidth())

.at tr (""heig ht "", function(i) {

return heig ht Line Chart-x Scale(+ i [' Units Sol ']);

});

//Pie chart

const pieContainer=pieChartsvg
.selectAll('.pieslice ')
.data(pie(data.map((entry)=><entry.Revenue)))
.join(
enter=>

enter
.append('path ')
.each(function(_,index){
const angle=(index/data.length)*360;

})
,

update => update,

exit => exit.remove()

);

const arcPath=d31.arc ()
.innerRadius(width /4)
.outerRadius(width /4+50);

pieContainer
.transition ()
.duration(100)
.delay((_,index)=><index*100>)
.styleTransform',`rotate(${360/data.length}deg)`)
.styleFill ','none ')
.styleStroke ','black ')
.styleStroke-width ','5 ')

.at tr (
'd',
arcPath

)


});

</script></body></html>"
4,line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Sold , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,multiple view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .chart-container {
      width: 800px;
      height: 600px;
      margin: 50px auto;
    }
    
    .line-chart {
      width: 100%;
      height: 60%;
      border-bottom: 1px solid #ccc;
    }
    
    .pie-chart {
      width: 100%;
      height: 40%;
    }
    
    /* Add some basic styling to make the charts look decent */
    .line-chart path {
      stroke-width: 2;
      fill-opacity: .3;
  	}
  	
  	.pie-chart path {
  	  stroke-width :0.5; 
  	}
  	
  	/* Style the brush */
  	.brush rect.selection{
  	  fill-opacity:.3; 
  	  stroke :#fff
  	}
  	
  	svg{
  	  border:solid black
  	  
  	  
  	  
  	  
  	  
  	  
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  
  
  
  
  
  
  
  
  
  
  
  
  
  
</style>

</head>

<body>

<div class=""chart-container"">
<svg class=""line-chart""></svg> 
<svg class = ""pie - chart""></svg> 

<script src = ""https://d3js.org/d3.v7.min.js""></script> 



<script >



// Set up SVG elements

const margin = {top :20 , right :20 , bottom :30 , left :40 } ,
width =800 - margin.left -margin.right,
height=400-margin.top-margin.bottom;

const lineChartSvg=d3.select('.line-chart')
.attr(""width"",width+margin.left+margin.right)
.attr(""height"",height+margin.top+margin.bottom)
.append(""g"")
.attr(""transform"",
`translate(${margin.left},${margin.top})`);

const pieChartSvg=d3.select('.pie-chart')
.attr('width',width + margin.left + margin.right)
.attr('height',200 + margin.top + margin.bottom)
.append('g')
.attr('transform',
`translate(${(width/2)},${(200/2)})`);

// Load data and convert data types

d3.csv ('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv').then(data =>{

data.forEach(d =>{

d['Units Sold'] = parseInt ( d ['Units Sold']);
d ['Revenue'] = parseFloat ( d ['Revenue']);

});

// Line chart scales and axis

const xScaleLine=d3.scalePoint()
.domain(data.map(d=> d.Year))
.range([0,width]);

const yScaleLine=d3.scaleLinear()
.domain([0,d3.max(data,d=> d['Units Sold'])])
.range([height,0]);

const xAxisLine=d3.axisBottom(xScaleLine);
const yAxisLine=d3.axisLeft(yScaleLine);

lineChartSvg.append('g')
.call(xAxisLine)
.selectAll ('text ')
.style ('text-anchor','middle ')
.style ('font-size','10 px ');

lineChartSvg.append('g ')
.call(yAxisLine);

// Line chart rendering

 const lineGenerator= d => {

return `M ${xScaleLine(d[0].Year)} ${yScaleLin e ( d [O] [' Units Sold '])} L $ {xScal eLin e ( d [l] Year)} $ {yScal eLin e ( dl ]' Units Sol dl)}`;

};

 const lines=lineChartSvg.selectAll('.lines')

.data ([data])

.join(
enter =>
enter
.append ('path ')

.classed ('lines ', true )

.merge(lines)

.transition()

.duration(500)

.delay((_,i)=>i*50)

.attr (""stroke"",""steelblue "")

.strokeWidth(1.5)

.d(lineGenerator);

 // Brushing functionality for line chart

 const brush= d =>brushX()

.extent([[O,O],[w idth,height]])

.on (""start brush end "", brushed );

function brushed(event){

if(event.selection){

let selection=event.selection;

let selectedData=data.filter(d=>{

return xScaline.invert(selection[O][O])<=parseInt(d.Year)&&parseInt(d.Year)<=xScaline.invert(selection[l][o])

});

updatePie(selectedData);

}

}

function updatePie(newData){

 pie.value(function(d){ return parseFloat (dl'Revenue');})

 let arcs=piechartSv g.selectAll("".slice"")

.data(pie(newData))

.join(
enter =>
enter
.appenid (""path "")

.classed (""slice "", true )

.merge(arcs)

.transition()

.duration(500)

.delay((_,i)=>i*50)

.att r (""fill "", function(dl,i){ return color(i);})

.att r (""transform "",""translate(""+arc.centroid(dl)+"")"")

.att r (""stroke "",""black "");

}

 // Pie Chart scales and rendering 

 let pie=dl.pie();

 let arc=dl.arc().innerRadius(O).outerRadius(lOO);

 let color=dl.schemeCategorylO;

 pie.value(function(dl){ return parseFloat(dl'Revenue');})

 let arcs=piechartSv g.selectAll("".slice"")

.data(pie(data))

.join(
enter =>
enter
.appenid(""path "")

.classed(""slice"",true )

.merge(arcs )

.transition ()

.duration(500 )

.delay (( _, i ) => i *50 )

.att r(""fill"", function(dl,i){ return color(i); })

.att r(""transform"",""translate(""+arc.centroid(dl)+"")"" )
.atrtrttrttrtttrttttsliceblack"");

});

</script>

</body>

</html>"
5,scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Units Sold, Revenue, Profit, and Customer Satisfaction. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,multiple view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot Matrix</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .container {
      width: 800px;
      margin: auto;
    }
    
    .scatterplot-matrix {
      display: flex;
      flex-wrap: wrap;
    }
    
    .scatterplot-cell {
      width: calc(25% - 10px);
      height: calc(25% - 10px);
      margin: 5px;
      border-radius: 5px;
      box-shadow: rgba(0,0,0,0.1) 0px 2px 4px -1px, rgba(0,0,0,0.06) 0px
4px
6-1 px rgba (25525525525502552525252525252525252525252525252);
      
border : solid lightgray l px ;
      
background-color : # f7f7f7 ;
      
padding : lopx ;
      
position : relative ;
      
overflow : hidden ;
}
.scatterplot-cell svg{
width :100%;
height :100%;
}
.brush rect.selection{
fill-opacity:.3; 
stroke:#666; 
stroke-width:l ; 
fill:#999; 
}
.brush rect.extent{
fill-opacity:.3; 
stroke:#666; 
stroke-width:l ; 
fill:#999; 

}

</style>

</head>

<body>

<div class=""container"">

<div class=""scatterplot-matrix"" id=""matrix""></div>

</div>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script>

const margin = { top:
20,
right:
20,
bottom :
30,
left :
40 };

const cellSize =200;

const brushCellSize = cellSize + margin.left + margin.right;

let brushedData = [];

d3.csv(""Retail Sales.csv"").then(data => {

data.forEach(d => {

d[""Units Sold""] = +d[""Units Sold""];

d.Revenue = +d.Revenue;

d.Profit = +d.Profit;

});

const columns =[ ""Units Sold"", ""Revenue"", ""Profit"", ""Customer Satisfaction Score""];

const matrixContainer= d3.select(""#matrix"");

columns.forEach((columnX,i) =>{

columns.forEach((columnY,j) =>{

if(i>= j)return ;

const g= matrixContainer.append(""div"")

.attr(""class"",""scatterplot-cell"")

.append(""svg"")

.attr(""width"",cellSize+margin.left+margin.right)

.attr(""height"",cellSize+margin.top+margin.bottom)

.append (""g"")

.attr (""transform "", `translate(${margin.left},${margin.top})`);

g.selectAll("".dot "")

.data(data)

.enter()

.append (""circle "")

.attr (""cx "", d=> xScale(d[columnX]))

.attr (""cy "", d=> yScale(d[columnY]))

.attr (""r "",2);

g.selectAll("".dot "")

.on(""mouseover"",(event,d)=>{

console.log(`Mouseover on ${columnX} vs ${columnY}:`, d);

})

.on(""mouseout"",(event,d)=>{

console.log(`Mouseout on ${columnX} vs ${columnY}:`, d);

});

if(i==j){

g.call(xAxis.scale(xScale));

}else if(j==i+l){

g.call(yAxis.scale(yScale));

}

});

});

function brushed(event){
brushedData=event.selection? data.filter(d=>isBrushed(d,event.selection)):[];

updateScatterplots();

}

function isBrushed (datum , selection ){
return datum ["" Units Sold ""] >= selection [o][o] && datum ["" Units Sold ""] <= selection [l][o]
&& datum ["" Revenue ""] >= selection [o][l] && datum ["" Revenue ""] <= selection [l][l];
}

function updateScatterplots(){
matrixContainer.selectAll("".dot"")
.classed('highlight',false)
.filter(function (datum){
return brushedData.includes(datum)
})
.classed('highlight',true)
};

});
</script></body></html>"
6,scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a brushable Scatterplot that visualizes the relationship between Units Sold and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Brushable Scatterplot</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .brush {
            fill-opacity: 0.2;
        }
        
        .brush .selection {
            fill-opacity: 0.5;
        }
        
        #scatterplot {
            border: 1px solid lightgray;
        }
        
        #table-container {
            margin-left: 20px;
            display: inline-block;
            vertical-align: top;
        }
        
        #data-table {
            border-collapse: collapse;
        }
        
        #data-table th, #data-table td {
            border: 1px solid lightgray;
            padding: 5px;
        }
    </style>
</head>
<body>
    <svg id=""scatterplot"" width=""600"" height=""400""></svg>
    <div id=""table-container"">
        <table id=""data-table"">
            <thead>
                <tr>
                    <th>Year</th>
                    <th>Product</th>
                    <th>Units Sold</th>
                    <th>Revenue</th>
                    <th>Profit</th>
                    <th>Number of Stores</th>
                    <th>Customer Satisfaction Score</th>
                </tr>
            </thead>
            <tbody id=""table-body"">
            </tbody>
        </table>
    </div>

    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        let margin = { top: 20, right: 20, bottom: 30, left: 40 };
        let width = 600 - margin.left - margin.right;
        let height = 400 - margin.top - margin.bottom;

        let svg = d3.select(""#scatterplot"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

        let xScale = d3.scaleLinear()
            .range([0, width]);

        let yScale = d3.scaleLinear()
            .range([height, 0]);

        let brush = d3.brush()
            .extent([[0, 0], [width, height]])
            .on(""brush"", brushed)
            .on(""end"", brushended);

        let brushg = svg.append(""g"")
            .attr(""class"", ""brush"");

        brush(brushg);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
            .then(data => {
                data.forEach(d => {
                    d[""Units Sold""] = +d[""Units Sold""];
                    d[""Revenue""] = +d[""Revenue""];
                });

                xScale.domain(d3.extent(data, d => d[""Units Sold""]));
                yScale.domain(d3.extent(data, d => d[""Revenue""]));

                svg.selectAll(""circle"")
                    .data(data)
                    .enter()
                    .append(""circle"")
                    .attr(""cx"", d => xScale(d[""Units Sold""]))
                    .attr(""cy"", d => yScale(d[""Revenue""]))
                    .attr(""r"", 5);

                svg.append(""g"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(d3.axisBottom(xScale));

                svg.append(""g"")
                    .call(d3.axisLeft(yScale));
            });

        function brushed(event) {
            let selection = event.selection;
            if (selection) {
                let x0 = xScale.invert(selection[0][0]);
                let x1 = xScale.invert(selection[1][0]);
                let y0 = yScale.invert(selection[1][1]);
                let y1 = yScale.invert(selection[0][1]);

                d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
                    .then(data => {
                        data.forEach(d => {
                            d[""Units Sold""] = +d[""Units Sold""];
                            d[""Revenue""] = +d[""Revenue""];
                        });

                        let filteredData = data.filter(d => x0 <= d[""Units Sold""] && d[""Units Sold""] <= x1 && y0 <= d[""Revenue""] && d[""Revenue""] <= y1);
                        let slicedData = filteredData.slice(0, 20);

                        let tableBody = d3.select(""#table-body"");
                        tableBody.selectAll(""tr"").remove();

                        tableBody.selectAll(""tr"")
                            .data(slicedData)
                            .enter()
                            .append(""tr"")
                            .html(d => {
                                return `<td>${d[""Year""]}</td><td>${d[""Product""]}</td><td>${d[""Units Sold""]}</td><td>${d[""Revenue""]}</td><td>${d[""Profit""]}</td><td>${d[""Number of Stores""]}</td><td>${d[""Customer Satisfaction Score""]}</td>`;
                            });
                    });
            }
        }

        function brushended(event) {
            if (!event.selection) {
                let tableBody = d3.select(""#table-body"");
                tableBody.selectAll(""tr"").remove();
            }
        }
    </script>
</body>
</html>
```"
7,bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a horizontal Bar Chart that shows Product and Units Sold, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Retail Sales Bar Chart</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .chart {
            display: flex;
        }
        
        .main-chart {
            width: 80%;
        }
        
        .minimap {
            width: 20%;
        }
    </style>
</head>
<body>
    <div class=""chart"">
        <div class=""main-chart"" id=""main-chart""></div>
        <div class=""minimap"" id=""minimap""></div>
    </div>
    
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 50, right: 50, bottom: 50, left: 200 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;
        
        const mainChart = d3.select(""#main-chart"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);
        
        const minimap = d3.select(""#minimap"")
            .append(""svg"")
            .attr(""width"", 200)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(20, ${margin.top})`);
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
            .then(data => {
                data.forEach(d => {
                    d[""Units Sold""] = +d[""Units Sold""];
                });
                
                const products = data.map(d => d.Product);
                const unitsSold = data.map(d => d[""Units Sold""]);
                
                const xScale = d3.scaleLinear()
                    .domain([0, d3.max(unitsSold)])
                    .range([0, width]);
                
                const yScale = d3.scaleBand()
                    .domain(products)
                    .range([0, height])
                    .padding(0.2);
                
                const minimapXScale = d3.scaleLinear()
                    .domain([0, d3.max(unitsSold)])
                    .range([0, 150]);
                
                const minimapYScale = d3.scaleBand()
                    .domain(products)
                    .range([0, height])
                    .padding(0.2);
                
                mainChart.selectAll(""rect"")
                    .data(data)
                    .enter()
                    .append(""rect"")
                    .attr(""x"", 0)
                    .attr(""y"", d => yScale(d.Product))
                    .attr(""width"", d => xScale(d[""Units Sold""]))
                    .attr(""height"", yScale.bandwidth());
                
                mainChart.selectAll(""text"")
                    .data(data)
                    .enter()
                    .append(""text"")
                    .attr(""x"", -10)
                    .attr(""y"", d => yScale(d.Product) + yScale.bandwidth() / 2)
                    .attr(""text-anchor"", ""end"")
                    .text(d => d.Product);
                
                minimap.selectAll(""rect"")
                    .data(data)
                    .enter()
                    .append(""rect"")
                    .attr(""x"", 0)
                    .attr(""y"", d => minimapYScale(d.Product))
                    .attr(""width"", d => minimapXScale(d[""Units Sold""]))
                    .attr(""height"", minimapYScale.bandwidth());
            });
    </script>
</body>
</html>
```"
