Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,advanced view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
  <div id=""chart"" style=""width: 800px; height: 600px;""></div>

  <script type=""text/javascript"">
    fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
      .then(response => response.text())
      .then(data => {
        const rows = data.split('\n').slice(1).map(row => row.split(','));
        const unitsSold = rows.map(row => +row[2]);
        const revenue = rows.map(row => +row[3]);

        var chartDom = document.getElementById('chart');
        var myChart = echarts.init(chartDom);
        var option;

option = {
          xAxis: {},
          yAxis: {},
          series: [
            {
              symbolSize: 20,
              data: unitsSold.map((value, index) => [value, revenue[index]]),
              type: 'scatter',
            }
          ],
          tooltip : {
            triggerOn:'click',
            formatter:function(params){
                return `Units Sold:${params.value[0]}<br/>Revenue:${params.value[1]}`;
            }
           },
};

myChart.setOption(option);

});
</script>

</body>

</html>"
2,scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,advanced view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
  <div id=""chart"" style=""width: 800px; height: 600px;""></div>

  <script type=""text/javascript"">
    fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
      .then(response => response.text())
      .then(data => {
        const rows = data.split('\n').slice(1).map(row => row.split(','));
        const unitsSold = rows.map(row => +row[2]);
        const revenue = rows.map(row => +row[3]);

        var chartDom = document.getElementById('chart');
        var myChart = echarts.init(chartDom);
        var option;

option = {
          xAxis: {},
          yAxis: {},
          brush: {
            toolbox: ['rect', 'polygon', 'lineX', 'lineY', 'keep', 'clear'],
            throttleType: 'debounce',
            throttleDelay: 300,
            geoIndex: 0
          },
          series:
              [
                {
                  symbolSize :10,
                  data : (function(){
                    let res=[];
                    for(let i=0;i<unitsSold.length;i++){
                      res.push([unitsSold[i],revenue[i]]);
                    }
                    return res;
                  })(),
                  type:'scatter',
                }
              ]
};
myChart.setOption(option);
myChart.on('brushSelected', renderBrushed);

function renderBrushed(params) {
    console.log(params.batch[0].selected[0].dataIndex)
}
});
</script>

</body>

</html>"
3,scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,advanced view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
  <div id=""chart"" style=""width: 800px; height: 600px;""></div>

  <script type=""text/javascript"">
    fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
      .then(response => response.text())
      .then(data => {
        const rows = data.split('\n').slice(1).map(row => row.split(','));
        const unitsSold = rows.map(row => +row[2]);
        const revenue = rows.map(row => +row[3]);

        var chartDom = document.getElementById('chart');
        var myChart = echarts.init(chartDom);
        var option;

option = {
          xAxis: {},
          yAxis: {},
          series: [
            {
              symbolSize: 20,
              data: unitsSold.map((value, index) => [value, revenue[index]]),
              type: 'scatter'
            }
          ]
};

myChart.setOption(option);

myChart.on('mousewheel', function (params) {
          console.log(params);
});

window.addEventListener(""resize"", () => { 
myChart.resize(); 
}); 

});
</script>

</body>

</html>"
4,scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,advanced view,"<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot with External Links and Tooltips</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>

    <script type=""text/javascript"">
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const unitsSold = rows.map(row => +row[2]);
                const revenue = rows.map(row => +row[3]);
                const dates = rows.map(row => row[0]);

                var chartDom = document.getElementById('chart');
                var myChart = echarts.init(chartDom);
                var option;

option = {
  xAxis: {},
  yAxis: {},
  series: [
    {
      symbolSize: 20,
      data: unitsSold.map((value, index) => [value, revenue[index]]),
      type: 'scatter',
      itemStyle:{
        normal:{
          color:'#6495ED'
        }
      }
      
     
      
     
      
     
      
     
      
     
      
      
      
      
      
      
      
      
      
      
     },
     emphasis:{
       itemStyle:{
         shadowBlur:'10',
         shadowOffsetX:'0',
         shadowColor:'rgba(0,0,0,.2)'
       }
     }
   ],
   tooltip:{triggerOn:'none',formatter:function(params){
     return'X:'+params.data[0]+'<br/>Y:'+params.data[1]
   }},
   
   
   
   
   
   
   
 };
if (option && typeof option === ""object"") {
myChart.setOption(option);
}
myChart.on('click',function(params){
window.open(""https://www.google.com/search?q=""+dates[params.dataIndex])
});
});
</script>

</body>

</html>"
5,scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot with query widgets showing the Units Sold and Revenue of the given dataset. Add a slider to represent the Date.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,advanced view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot with Query Widgets</title>
  <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
  <div id=""chart"" style=""width: 800px; height: 600px;""></div>

<script type=""text/javascript"">
fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
.then(response => response.text())
.then(data => {
    const rows = data.split('\n').slice(1).map(row => row.split(','));
    const dates = rows.map(row => row[0]);
    const unitsSold = rows.map(row => +row[2]);
    const revenue = rows.map(row => +row[3]);

    var chartDom = document.getElementById('chart');
var myChart = echarts.init(chartDom);
var option;

option = {
xAxis: {},
yAxis: {},
series: [
{
symbolSize:10,
data:[unitsSold, revenue],
type:'scatter'
}
],
slider:{
show:true,
startValue:min(dates),
endValue:max(dates)
},
tooltip:{
trigger:'item',
formatter:function(params){
return params.value;
}
}
};

myChart.setOption(option);

function min(arr) {
return Math.min.apply(Math, arr);
}

function max(arr) {
return Math.max.apply(Math, arr);
}

});

</script>

</body>

</html>"
6,scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot showing the Units Sold of Phoenix. Add animated transitions that connect these points using lines in order.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,advanced view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot of Units Sold in Phoenix</title>
  <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
  <div id=""chart"" style=""width: 800px; height: 600px;""></div>

  <script type=""text/javascript"">
    fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
      .then(response => response.text())
      .then(data => {
        const rows = data.split('\n').slice(1).map(row => row.split(','));
        const phoenixData = rows.filter(row => row[1] === 'Phoenix');
        const dates = phoenixData.map(row => row[0]);
        const unitsSold = phoenixData.map(row => +row[2]);

        var chartDom = document.getElementById('chart');
        var myChart = echarts.init(chartDom);
        var option;

option = {
          animationDurationUpdate:1000,
          animationEasingUpdate:'quinticInOut',
          series:[
            {
              type:'graph',
              layout:'none',
              symbolSize:50,
              roam:true,
              label:{
                show:true
              },
              edgeSymbol:['circle','arrow'],
edgeSymbolSize:[4,10],
data:dates.map((date,index)=>{
return{
name:date.replace(/-/g,''),
x:index*100+Math.random()*20-10,
y:-unitsSold[index]*10+Math.random()*20-10
};
}),
links:[],
lineStyle:{
opacity:.9,
width:.5,
curveness:.3
}
}
]
};

function run(){
const edges=dates.slice(0,-1).map((date,index)=>{
return{
source:date.replace(/-/g,''),
target:dates[index+1].replace(/-/g,'')
};
});
option.series[0].links=edges;
myChart.setOption(option);
}

run();
setInterval(run,3000);

window.addEventListener('resize',myChart.resize);
});

</script>

</body>

</html>"
7,line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Units Sold of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,advanced view,"<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Multi-series Line Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>

    <script type=""text/javascript"">
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const seriesData = {};
                rows.forEach(row => {
                    const date = row[0];
                    const storeLocation = row[1];
                    if (!seriesData[storeLocation]) {
                        seriesData[storeLocation] = [];
                    }
                    seriesData[storeLocation].push([date, parseInt(row[2])]);
                });

                const chartDom = document.getElementById('chart');
                const myChart = echarts.init(chartDom);
                let option;

option && myChart.setOption(option);

option = {
  title: {
    text: 'Daily Sales'
  },
  tooltip: {
    trigger: 'axis',
        axisPointer: {            
            type: 'cross'        
        }
  },
  legend: {},
  
   grid:{
      top:'20%',
      bottom:'15%',
      left:""10%"",
      right:""10%""
   },
   
   xAxis:{
       type:'category',
       data:Object.keys(seriesData),
       axisLabel:{interval:""auto"",rotate:-45}
       
   },
   
   yAxis:[
     {type:'value',name:'',position:""left""},
     {type:'value',name:'',position:""right""}
     
     
 ],
 
dataZoom:[
{
show:true,
realtime:true,
startValue:Object.keys(seriesData)[0],
endValue:Object.keys(seriesData)[Object.keys(seriesData).length-1],
xAxisIndex:[0]
},
{
type:""inside"",
realtime:true,
startValue:Object.keys(seriesData)[0],
endValue:Object.keys(seriesData)[Object.keys(seriesData).length-1],
xAxisIndex:[0]
}
],

series:[
{ name:"""",yAxisIndex:"""",data:[],
lineStyle:{color:""#5470C6""},
emphasis:{focus:""series""}
},
{ name:"""",yAxisIndex:"""",data:[],
lineStyle:{color:""#91CC75""},
emphasis:{focus:""series""}
},
{ name:"""",yAxisIndex:"""",data:[],
lineStyle:{color:""#EE6666""},
emphasis:{focus:""series""}
},
{ name:"""",
yAxisIndex:"""",
data:[],
lineStyle:{color:""#3BA272""},
emphasis:
{focus:
""series""}},
{name:"""",
yAxisIndex:"""",
data:[],
lineStyle:
{color:""#FC8452""
},emphasis:
{focus:
""series""}},
{name:"""",
yAxisIndex:"""",
data:[],
lineStyle:
{color:""#9A60B4""
},emphasis:
{focus:
""series""}}
]

};

const locations=Object.values(Object.values(series_data))
locations.forEach((location,index)=>{
const locationName=location[index][1]
option.series.push({
name:`${locationName}`,
type:`${index==7?""bar"":""scatter""}`,
symbolSize:index==7?5:index==6?10:index==5?15:index==4?20:index==3?25:index==2?30:index===1||index===0?""35"":"""",
itemstyle:{
normal:{
opacity:.7
}},
labelLayout:{
drift:-35
},

labelLine :{
smooth :true,

minTurnAngle :-90,

showAbove:-90,

length :-50

},

label :{

show :true,

distance :-40,

formatter:function(param){

return `${param.value}`

}

},

dimensions:[""Date"",""Store Location""],

encode :{

tooltip:[`Units Sold`],

x:`Date`,

y:`Units Sold`

}

})

})

myChart.setOption(option)

});

</script>

</body>

</html>"
8,bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,advanced view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Bar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
  <div id=""chart"" style=""width: 800px; height: 600px;""></div>

  <script type=""text/javascript"">
    fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
      .then(response => response.text())
      .then(data => {
        const rows = data.split('\n').slice(1).map(row => row.split(','));
        const storeLocations = Array.from(new Set(rows.map(row => row[1])));
        const unitsSold = storeLocations.map(location => {
          return rows.filter(row => row[1] === location && row[0] === '2021-01-01').reduce((acc, cur) => acc + parseInt(cur[2]), 0);
        });

        var chartDom = document.getElementById('chart');
var myChart = echarts.init(chartDom);
var option;

option = {
xAxis: {
type: 'category',
data: storeLocations
},
yAxis: {},
series: [
{
type: 'bar',
data: unitsSold
}
],
dataZoom:[
{
type:'inside'
}
]
};

option && myChart.setOption(option);

myChart.on('mousewheel', function(params){
if(params.batch.length>0){
if(params.batch[0].zoomSize>params.batch[0].zoomStart){
myChart.dispatchAction({
type:'dataZoom',
batch:[{
startValue:params.batch\[0\].zoomStart,
endValue:params.batch\[0\].zoomEnd
}]
})
}else{
myChart.dispatchAction({
type:'dataZoom',
batch:[{
startValue:params.batch\[0\].zoomEnd,
endValue:params.batch\[0\].zoomStart
}]
})
}
}
})

});
</script>

</body>

</html>"
9,bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,advanced view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Bar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
  <div id=""chart"" style=""width: 800px; height: 600px;""></div>

  <script type=""text/javascript"">
    fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
      .then(response => response.text())
      .then(data => {
        const rows = data.split('\n').slice(1).map(row => row.split(','));
        const storeLocations = Array.from(new Set(rows.map(row => row[1])));
        const unitsSold = storeLocations.map(location => {
          return rows.filter(row => row[1] === location && row[0] === '2021-01-01')
            .reduce((acc, current) => acc + parseInt(current[2]), 0);
        });

        var chartDom = document.getElementById('chart');
var myChart = echarts.init(chartDom);
var option;

option = {
          xAxis: {
              type: 'category',
              data: storeLocations
          },
          yAxis: {},
          series: [{
              type: 'bar',
              data: unitsSold,
              draggable:true
          }]
      };

option && myChart.setOption(option);

myChart.on('mouseup', function (params) {
    // Sort the data based on the current order of bars
    const sortedData = unitsSold.map((value, index) => ({ value, index }));
    sortedData.sort((a, b) => a.index - b.index);
    // Update the chart with the sorted data
    myChart.setOption({
      series: [{
        type:'bar',
        data :sortedData.map(item=>item.value)
      }]
    });
});

});
</script>

</body>

</html>"
10,bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Units Sold.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,advanced view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Bar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
  <div id=""chart"" style=""width: 800px; height: 600px;""></div>
  <select id=""sort-select"">
    <option value=""asc"">Ascending</option>
    <option value=""desc"">Descending</option>
  </select>

<script>

fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
.then(response => response.text())
.then(data => {
const rows = data.split('\n').slice(1).map(row => row.split(','));
const storeLocations = Array.from(new Set(rows.map(row => row[1])));
const unitsSold = {};

rows.forEach(row => {
if (row[0] === '2021-01-01') {
unitsSold[row[1]] = (unitsSold[row[1]] || 0) + parseInt(row[2]);
}
});

storeLocations.forEach(location => {
if (!unitsSold[location]) {
unitsSold[location] = 0;
}
});

let sortedData;

document.getElementById('sort-select').addEventListener('change', () => {
sortedData.sort((a, b) =>
document.getElementById('sort-select').value === 'asc' ? a.value - b.value : b.value - a.value
);
myChart.setOption({
series: [
{
data: sortedData,
},
],
});
});

sortedData = storeLocations.map(location => ({
name: location,
value: unitsSold[location],
}));

sortedData.sort((a, b) =>
document.getElementById('sort-select').value === 'asc' ? a.value - b.value : b.value - a.value
);

var myChart = echarts.init(document.getElementById(""chart""));
var option;

function renderChart() {

option= {

xAxis: { type:'category'},
yAxis:{type:'value'},
series:[
{
type:""bar"",
data:[],
animationDurationUpdate:function(idx){
return idx*100;
},
},
],

};

myChart.setOption(option);
}

renderChart();

myChart.setOption({
series:[
{
data:sortedData,
},
],

});
})

.catch(error=>console.error(""Error:"",error));

</script>

</body>

</html>"
