Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot that visualizes the relationship between Enrollment Number and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .tooltip {
            position: absolute;
            font-size: 12px;
            padding: 2px;
            border: 1px solid #ddd;
            background-color: #fff;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 40 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;
        
        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);
        
        const xScale = d3.scaleLinear()
            .range([0, width]);
        
        const yScale = d3.scaleLinear()
            .range([height, 0]);
        
        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);
        
        svg.append(""g"")
            .attr(""transform"", `translate(0, ${height})`)
            .attr(""class"", ""x-axis"");
        
        svg.append(""g"")
            .attr(""class"", ""y-axis"");
        
        const tooltip = d3.select(""body"")
            .append(""div"")
            .attr(""class"", ""tooltip"")
            .style(""opacity"", 0);
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"")
            .then(data => {
                data.forEach(d => {
                    d[""Enrollment Number""] = +d[""Enrollment Number""];
                    d[""Revenue""] = +d[""Revenue""];
                });
                
                xScale.domain([0, d3.max(data, d => d[""Enrollment Number""]) * 1.1]);
                yScale.domain([0, d3.max(data, d => d[""Revenue""]) * 1.1]);
                
                svg.select("".x-axis"")
                    .call(xAxis);
                
                svg.select("".y-axis"")
                    .call(yAxis);
                
                svg.selectAll(""circle"")
                    .data(data)
                    .enter()
                    .append(""circle"")
                    .attr(""cx"", d => xScale(d[""Enrollment Number""]))
                    .attr(""cy"", d => yScale(d[""Revenue""]))
                    .attr(""r"", 5)
                    .on(""mouseover"", (event, d) => {
                        tooltip.transition()
                            .duration(200)
                            .style(""opacity"", 0.9);
                        
                        tooltip.html(`Enrollment Number: ${d[""Enrollment Number""]}<br>Revenue: ${d[""Revenue""]}`)
                            .style(""left"", (event.pageX + 5) + ""px"")
                            .style(""top"", (event.pageY - 28) + ""px"");
                        
                        svg.selectAll(""circle"")
                            .style(""opacity"", 0.5);
                        
                        d3.select(event.target)
                            .style(""opacity"", 1);
                        
                        svg.append(""line"")
                            .attr(""class"", ""hover-line"")
                            .attr(""x1"", xScale(d[""Enrollment Number""]))
                            .attr(""y1"", height)
                            .attr(""x2"", xScale(d[""Enrollment Number""]))
                            .attr(""y2"", yScale(d[""Revenue""]))
                            .style(""stroke"", ""black"")
                            .style(""stroke-dasharray"", ""3,3"");
                        
                        svg.append(""line"")
                            .attr(""class"", ""hover-line"")
                            .attr(""x1"", 0)
                            .attr(""y1"", yScale(d[""Revenue""]))
                            .attr(""x2"", xScale(d[""Enrollment Number""]))
                            .attr(""y2"", yScale(d[""Revenue""]))
                            .style(""stroke"", ""black"")
                            .style(""stroke-dasharray"", ""3,3"");
                    })
                    .on(""mouseout"", () => {
                        tooltip.transition()
                            .duration(500)
                            .style(""opacity"", 0);
                        
                        svg.selectAll(""circle"")
                            .style(""opacity"", 1);
                        
                        svg.selectAll("".hover-line"")
                            .remove();
                    });
            });
    </script>
</body>
</html>
```"
2,scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot that visualizes the relationship between Enrollment Number and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .brush {
            fill-opacity: 0.2;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600"" margin=""50""></svg>
    <div id=""selected-data""></div>

    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 50, right: 50, bottom: 50, left: 50 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

        const brush = d3.brush()
            .extent([[0, 0], [width, height]])
            .on(""brush"", brushed)
            .on(""end"", brushended);

        const brushg = svg.append(""g"")
            .attr(""class"", ""brush"")
            .call(brush);

        brushg.selectAll(""rect"")
            .attr(""height"", height);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"")
            .then(data => {
                data.forEach(d => {
                    d[""Enrollment Number""] = +d[""Enrollment Number""];
                    d[""Revenue""] = +d[""Revenue""];
                });

                const xScale = d3.scaleLinear()
                    .domain([0, d3.max(data, d => d[""Enrollment Number""])])
                    .range([0, width]);

                const yScale = d3.scaleLinear()
                    .domain([0, d3.max(data, d => d[""Revenue""])])
                    .range([height, 0]);

                svg.selectAll(""circle"")
                    .data(data)
                    .enter()
                    .append(""circle"")
                    .attr(""cx"", d => xScale(d[""Enrollment Number""]))
                    .attr(""cy"", d => yScale(d[""Revenue""]))
                    .attr(""r"", 5);

                svg.append(""g"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(d3.axisBottom(xScale));

                svg.append(""g"")
                    .call(d3.axisLeft(yScale));

                function brushed(event) {
                    const selection = event.selection;
                    if (selection) {
                        const x0 = xScale.invert(selection[0][0]);
                        const x1 = xScale.invert(selection[1][0]);
                        const y0 = yScale.invert(selection[1][1]);
                        const y1 = yScale.invert(selection[0][1]);

                        const selectedData = data.filter(d => x0 <= d[""Enrollment Number""] && d[""Enrollment Number""] <= x1 && y0 <= d[""Revenue""] && d[""Revenue""] <= y1);

                        d3.select(""#selected-data"")
                            .html(selectedData.map(d => `Enrollment Number: ${d[""Enrollment Number""]}, Revenue: ${d[""Revenue""]}`).join(""<br>""));
                    }
                }

                function brushended(event) {
                    if (!event.selection) {
                        d3.select(""#selected-data"")
                            .html("""");
                    }
                }
            });
    </script>
</body>
</html>
```"
3,scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot that visualizes the relationship between Enrollment Number and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .scatterplot {
            width: 800px;
            height: 600px;
            border: 1px solid black;
            margin: 50px auto;
        }
    </style>
</head>
<body>
    <div class=""scatterplot"" id=""scatterplot""></div>
    
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        // Set up the scatterplot dimensions
        const margin = { top: 50, right: 50, bottom: 50, left: 50 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;
        
        // Create the scatterplot SVG
        const svg = d3.select(""#scatterplot"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);
        
        // Load the data
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"")
            .then(data => {
                // Convert data types
                data.forEach(d => {
                    d[""Enrollment Number""] = parseInt(d[""Enrollment Number""]);
                    d[""Revenue""] = parseInt(d[""Revenue""]);
                });
                
                // Set up the x and y scales
                const xScale = d3.scaleLinear()
                    .domain([0, d3.max(data, d => d[""Enrollment Number""])])
                    .range([0, width]);
                
                const yScale = d3.scaleLinear()
                    .domain([0, d3.max(data, d => d[""Revenue""])])
                    .range([height, 0]);
                
                // Create the x and y axes
                const xAxis = d3.axisBottom(xScale);
                const yAxis = d3.axisLeft(yScale);
                
                svg.append(""g"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(xAxis);
                
                svg.append(""g"")
                    .call(yAxis);
                
                // Create the scatterplot
                svg.selectAll(""circle"")
                    .data(data)
                    .enter()
                    .append(""circle"")
                    .attr(""cx"", d => xScale(d[""Enrollment Number""]))
                    .attr(""cy"", d => yScale(d[""Revenue""]))
                    .attr(""r"", 5);
                
                // Add zoom functionality
                const zoom = d3.zoom()
                    .scaleExtent([1, 10])
                    .on(""zoom"", (event) => {
                        svg.selectAll(""circle"")
                            .attr(""transform"", event.transform);
                        svg.selectAll(""g"")
                            .attr(""transform"", event.transform);
                    });
                
                svg.call(zoom);
            })
            .catch(error => console.error(error));
    </script>
</body>
</html>
```"
4,scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Enrollment Number and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot with external links and tooltips</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .tooltip {
            position: absolute;
            background-color: #f9f9f9;
            border: 1px solid #ccc;
            padding: 2px;
            font-size: 12px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        let svg = d3.select(""svg"");
        let margin = { top: 20, right: 20, bottom: 30, left: 40 };
        let width = svg.attr(""width"") - margin.left - margin.right;
        let height = svg.attr(""height"") - margin.top - margin.bottom;
        let g = svg.append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);
        
        let xScale = d3.scaleLinear()
            .range([0, width]);
        let yScale = d3.scaleLinear()
            .range([height, 0]);
        
        let tooltip = d3.select(""body"")
            .append(""div"")
            .attr(""class"", ""tooltip"")
            .style(""opacity"", 0);
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"")
            .then(data => {
                data.forEach(d => {
                    d[""Enrollment Number""] = +d[""Enrollment Number""];
                    d.Revenue = +d.Revenue;
                });
                
                xScale.domain([0, d3.max(data, d => d[""Enrollment Number""])]);
                yScale.domain([0, d3.max(data, d => d.Revenue)]);
                
                g.append(""g"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(d3.axisBottom(xScale).tickFormat(d3.format("".0f"")));
                
                g.append(""g"")
                    .call(d3.axisLeft(yScale).tickFormat(d3.format("".0f"")));
                
                g.selectAll(""circle"")
                    .data(data)
                    .enter()
                    .append(""circle"")
                    .attr(""cx"", d => xScale(d[""Enrollment Number""]))
                    .attr(""cy"", d => yScale(d.Revenue))
                    .attr(""r"", 5)
                    .on(""mouseover"", (event, d) => {
                        tooltip.transition()
                            .duration(200)
                            .style(""opacity"", 0.9);
                        
                        tooltip.html(`Enrollment Number: ${d[""Enrollment Number""]}<br>Revenue: ${d.Revenue}`)
                            .style(""left"", (event.pageX + 5) + ""px"")
                            .style(""top"", (event.pageY - 28) + ""px"");
                    })
                    .on(""mouseout"", () => {
                        tooltip.transition()
                            .duration(500)
                            .style(""opacity"", 0);
                    })
                    .on(""click"", (event, d) => {
                        let query = `site:google.com ${d[""Education Level""]} ${d.Quarter} enrollment revenue`;
                        window.open(`https://www.google.com/search?q=${query}`, ""_blank"");
                    });
            })
            .catch(error => console.error(error));
    </script>
</body>
</html>
```"
5,scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot with query widgets showing the Enrollment Number and Revenue of the given dataset. Add a slider to represent the Quarter.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot with Query Widgets</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .scatterplot {
            width: 800px;
            height: 600px;
            border: 1px solid black;
        }
        
        .widget {
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class=""widget"">
        <label for=""quarter-slider"">Quarter:</label>
        <input type=""range"" id=""quarter-slider"" min=""1"" max=""4"" value=""1"">
        <span id=""quarter-value"">Q1</span>
    </div>
    <div class=""scatterplot"" id=""scatterplot""></div>
    
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        let data;
        let quarter = 1;
        
        // Load data
        d3.csv('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
        .then(csvData => {
            data = csvData;
            data.forEach(d => {
                d['Enrollment Number'] = +d['Enrollment Number'];
                d['Revenue'] = +d['Revenue'];
                d['Quarter'] = +d['Quarter'];
            });
            updateScatterplot();
        })
        .catch(error => console.error('Error loading data:', error));
        
        // Update scatterplot
        function updateScatterplot() {
            const filteredData = data.filter(d => d['Quarter'] === quarter);
            
            const margin = { top: 20, right: 20, bottom: 30, left: 40 };
            const width = 800 - margin.left - margin.right;
            const height = 600 - margin.top - margin.bottom;
            
            const svg = d3.select('#scatterplot')
                .append('svg')
                .attr('width', width + margin.left + margin.right)
                .attr('height', height + margin.top + margin.bottom)
                .append('g')
                .attr('transform', `translate(${margin.left}, ${margin.top})`);
            
            const xScale = d3.scaleLinear()
                .domain([0, d3.max(filteredData, d => d['Enrollment Number'])])
                .range([0, width]);
            
            const yScale = d3.scaleLinear()
                .domain([0, d3.max(filteredData, d => d['Revenue'])])
                .range([height, 0]);
            
            svg.selectAll('circle')
                .data(filteredData)
                .enter()
                .append('circle')
                .attr('cx', d => xScale(d['Enrollment Number']))
                .attr('cy', d => yScale(d['Revenue']))
                .attr('r', 5);
            
            svg.append('g')
                .attr('transform', `translate(0, ${height})`)
                .call(d3.axisBottom(xScale).tickFormat(d3.format('d')));
            
            svg.append('g')
                .call(d3.axisLeft(yScale).tickFormat(d3.format('d')));
        }
        
        // Update quarter value
        d3.select('#quarter-slider')
            .on('input', function() {
                quarter = +this.value;
                d3.select('#quarter-value')
                    .text(`Q${quarter}`);
                d3.select('#scatterplot')
                    .selectAll('svg')
                    .remove();
                updateScatterplot();
            });
    </script>
</body>
</html>
```"
6,scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot showing the Enrollment Number of Graduate. Add animated transitions that connect these points using lines in order.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Enrollment Number of Graduate Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .scatterplot {
      width: 800px;
      height: 600px;
      margin: 50px auto;
    }
    
    .scatterplot .axis path,
    .scatterplot .axis line {
      fill: none;
      stroke: #777;
      shape-rendering: crispEdges;
    }
    
    .scatterplot .axis text {
      font-size: 12px;
    }
  </style>
</head>
<body>
  <div class=""scatterplot"" id=""scatterplot""></div>
  
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    // Load data
    d3.csv('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
      .then(data => {
        // Filter data for Graduate level
        const graduateData = data.filter(d => d['Education Level'] === 'Graduate');
        
        // Convert data types
        graduateData.forEach(d => {
          d['Enrollment Number'] = parseInt(d['Enrollment Number']);
          d['Quarter'] = d['Quarter'];
        });
        
        // Sort data by Quarter
        graduateData.sort((a, b) => a['Quarter'].localeCompare(b['Quarter']));
        
        // Create SVG
        const margin = { top: 50, right: 50, bottom: 50, left: 50 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;
        const svg = d3.select('#scatterplot')
          .append('svg')
          .attr('width', width + margin.left + margin.right)
          .attr('height', height + margin.top + margin.bottom)
          .append('g')
          .attr('transform', `translate(${margin.left}, ${margin.top})`);
        
        // Create scales
        const xScale = d3.scalePoint()
          .domain(graduateData.map(d => d['Quarter']))
          .range([0, width]);
        const yScale = d3.scaleLinear()
          .domain([0, d3.max(graduateData, d => d['Enrollment Number']) * 1.1])
          .range([height, 0]);
        
        // Create axes
        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);
        svg.append('g')
          .attr('class', 'axis')
          .attr('transform', `translate(0, ${height})`)
          .call(xAxis);
        svg.append('g')
          .attr('class', 'axis')
          .call(yAxis);
        
        // Create line
        const line = d3.line()
          .x(d => xScale(d['Quarter']))
          .y(d => yScale(d['Enrollment Number']));
        
        // Create path
        svg.append('path')
          .datum(graduateData)
          .attr('fill', 'none')
          .attr('stroke', 'steelblue')
          .attr('stroke-width', 2)
          .attr('d', line);
        
        // Create circles
        svg.selectAll('circle')
          .data(graduateData)
          .enter()
          .append('circle')
          .attr('cx', d => xScale(d['Quarter']))
          .attr('cy', d => yScale(d['Enrollment Number']))
          .attr('r', 5)
          .attr('fill', 'steelblue');
      })
      .catch(error => console.error(error));
  </script>
</body>
</html>
```"
7,line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Enrollment Number of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Enrollment Number Line Chart</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .line {
            fill: none;
            stroke-width: 2;
        }
        
        .highlight {
            stroke-width: 4;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 40 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;
        
        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);
        
        const xScale = d3.scalePoint()
            .range([0, width]);
        
        const yScale = d3.scaleLinear()
            .range([height, 0]);
        
        const line = d3.line()
            .x(d => xScale(d.Quarter))
            .y(d => yScale(d[""Enrollment Number""]));
        
        let highlightLine;
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"")
            .then(data => {
                data.forEach(d => {
                    d[""Enrollment Number""] = +d[""Enrollment Number""];
                });
                
                const educationLevels = [...new Set(data.map(d => d[""Education Level""]))];
                
                xScale.domain([...new Set(data.map(d => d.Quarter))]);
                yScale.domain([0, d3.max(data, d => d[""Enrollment Number""])]);
                
                svg.append(""g"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(d3.axisBottom(xScale));
                
                svg.append(""g"")
                    .call(d3.axisLeft(yScale));
                
                const lines = svg.selectAll("".line"")
                    .data(educationLevels)
                    .enter()
                    .append(""path"")
                    .attr(""class"", ""line"")
                    .attr(""stroke"", (d, i) => d3.schemeCategory10[i])
                    .datum(d => data.filter(e => e[""Education Level""] === d))
                    .attr(""d"", line)
                    .on(""mouseover"", (event, d) => {
                        if (highlightLine) {
                            highlightLine.classed(""highlight"", false);
                        }
                        highlightLine = d3.select(event.target);
                        highlightLine.classed(""highlight"", true);
                    })
                    .on(""mouseout"", () => {
                        if (highlightLine) {
                            highlightLine.classed(""highlight"", false);
                        }
                    });
            });
    </script>
</body>
</html>
```"
8,bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Enrollment Number Bar Chart</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .bar {
            fill: steelblue;
        }
        
        .bar:hover {
            fill: brown;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 40 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;
        
        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);
        
        const xScale = d3.scaleBand()
            .range([0, width])
            .padding(0.2);
        
        const yScale = d3.scaleLinear()
            .range([height, 0]);
        
        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);
        
        svg.append(""g"")
            .attr(""transform"", `translate(0, ${height})`)
            .attr(""class"", ""x-axis"");
        
        svg.append(""g"")
            .attr(""class"", ""y-axis"");
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"")
            .then(data => {
                const q2Data = data.filter(d => d.Quarter === ""Q2-2021"");
                
                xScale.domain(q2Data.map(d => d[""Education Level""]));
                yScale.domain([0, d3.max(q2Data, d => parseInt(d[""Enrollment Number""]))]);
                
                svg.select("".x-axis"")
                    .call(xAxis);
                
                svg.select("".y-axis"")
                    .call(yAxis);
                
                svg.selectAll("".bar"")
                    .data(q2Data)
                    .enter()
                    .append(""rect"")
                    .attr(""class"", ""bar"")
                    .attr(""x"", d => xScale(d[""Education Level""]))
                    .attr(""y"", d => yScale(parseInt(d[""Enrollment Number""])))
                    .attr(""width"", xScale.bandwidth())
                    .attr(""height"", d => height - yScale(parseInt(d[""Enrollment Number""])));
                
                const zoom = d3.zoom()
                    .scaleExtent([1, 8])
                    .on(""zoom"", zoomed);
                
                svg.call(zoom);
                
                function zoomed(event) {
                    const transform = event.transform;
                    
                    svg.selectAll("".bar"")
                        .attr(""transform"", `translate(${transform.x}, ${transform.y}) scale(${transform.k}, 1)`);
                    
                    svg.select("".x-axis"")
                        .call(xAxis.scale(xScale.range([0, width * transform.k]).domain(xScale.domain())))
                        .attr(""transform"", `translate(${transform.x}, ${height})`);
                    
                    svg.select("".y-axis"")
                        .call(yAxis.scale(yScale.range([height, 0 * transform.k]).domain(yScale.domain())));
                }
            });
    </script>
</body>
</html>
```"
9,bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Enrollment Number Bar Chart</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .bar {
            fill: steelblue;
        }
        
        .bar:hover {
            fill: brown;
        }
        
        .axis--x path {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 40 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;
        
        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);
        
        const x = d3.scaleBand()
            .range([0, width])
            .padding(0.2);
        
        const y = d3.scaleLinear()
            .range([height, 0]);
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            const q2Data = data.filter(d => d.Quarter === ""Q2-2021"");
            
            x.domain(q2Data.map(d => d[""Education Level""]));
            y.domain([0, d3.max(q2Data, d => parseInt(d[""Enrollment Number""]))]);
            
            svg.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0, ${height})`)
                .call(d3.axisBottom(x));
            
            svg.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y).ticks(10));
            
            const bars = svg.selectAll("".bar"")
                .data(q2Data)
                .enter()
                .append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => x(d[""Education Level""]))
                .attr(""y"", d => y(parseInt(d[""Enrollment Number""])))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(parseInt(d[""Enrollment Number""])));
            
            const drag = d3.drag()
                .on(""start"", (event, d) => {
                    const rect = d3.select(event.sourceEvent.target);
                    rect.raise();
                })
                .on(""drag"", (event, d) => {
                    const rect = d3.select(event.sourceEvent.target);
                    rect.attr(""x"", event.x);
                })
                .on(""end"", (event, d) => {
                    const rect = d3.select(event.sourceEvent.target);
                    const newX = event.x;
                    const educationLevels = q2Data.map(d => d[""Education Level""]);
                    const educationLevel = d[""Education Level""];
                    const index = educationLevels.indexOf(educationLevel);
                    educationLevels.splice(index, 1);
                    const newIndex = Math.floor(newX / x.bandwidth());
                    educationLevels.splice(newIndex, 0, educationLevel);
                    x.domain(educationLevels);
                    svg.selectAll("".bar"")
                        .transition()
                        .duration(500)
                        .attr(""x"", d => x(d[""Education Level""]));
                    svg.select("".axis--x"")
                        .transition()
                        .duration(500)
                        .call(d3.axisBottom(x));
                });
            
            bars.call(drag);
        });
    </script>
</body>
</html>
```"
10,bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Enrollment Number.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,advanced view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Enrollment Number Bar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .bar {
      fill: steelblue;
    }
    
    .bar:hover {
      fill: brown;
    }
    
    .axis--x path {
      display: none;
    }
    
    select {
      position: absolute;
      top: 10px;
      left: 10px;
    }
  </style>
</head>
<body>
  <select id=""sort-select"">
    <option value=""asc"">Ascending</option>
    <option value=""desc"">Descending</option>
  </select>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;
    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);
    
    const xScale = d3.scaleBand()
      .range([0, width])
      .padding(0.2);
    
    const yScale = d3.scaleLinear()
      .range([height, 0]);
    
    const xAxis = d3.axisBottom(xScale);
    const yAxis = d3.axisLeft(yScale);
    
    svg.append(""g"")
      .attr(""class"", ""axis--x"")
      .attr(""transform"", `translate(0, ${height})`);
    
    svg.append(""g"")
      .attr(""class"", ""axis--y"");
    
    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"")
      .then(data => {
        const q2Data = data.filter(d => d.Quarter === ""Q2-2021"");
        const sortedData = q2Data.sort((a, b) => a[""Enrollment Number""] - b[""Enrollment Number""]);
        
        xScale.domain(sortedData.map(d => d[""Education Level""]));
        yScale.domain([0, d3.max(sortedData, d => +d[""Enrollment Number""])]);
        
        svg.select("".axis--x"")
          .call(xAxis);
        
        svg.select("".axis--y"")
          .call(yAxis);
        
        const bars = svg.selectAll("".bar"")
          .data(sortedData, d => d[""Education Level""])
          .enter()
          .append(""rect"")
          .attr(""class"", ""bar"")
          .attr(""x"", d => xScale(d[""Education Level""]))
          .attr(""y"", d => yScale(+d[""Enrollment Number""]))
          .attr(""width"", xScale.bandwidth())
          .attr(""height"", d => height - yScale(+d[""Enrollment Number""]));
        
        d3.select(""#sort-select"")
          .on(""change"", function() {
            const sortOrder = this.value;
            const sortedData = q2Data.sort((a, b) => {
              if (sortOrder === ""asc"") {
                return a[""Enrollment Number""] - b[""Enrollment Number""];
              } else {
                return b[""Enrollment Number""] - a[""Enrollment Number""];
              }
            });
            
            xScale.domain(sortedData.map(d => d[""Education Level""]));
            
            svg.select("".axis--x"")
              .transition()
              .duration(500)
              .call(xAxis);
            
            bars.data(sortedData, d => d[""Education Level""])
              .transition()
              .duration(500)
              .attr(""x"", d => xScale(d[""Education Level""]));
          });
      });
  </script>
</body>
</html>
```"
