Prompt Number,title,Prompt,dataset,library,view_type,response
1,scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Adoption Rate and Investment.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Adoption Rate vs Investment Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .scatterplot {
      width: 800px;
      height: 600px;
      margin: 50px auto;
    }
    
    .axis path, .axis line {
      fill: none;
      stroke: #777;
      shape-rendering: crispEdges;
    }
    
    .axis text {
      font-size: 12px;
    }
  </style>
</head>
<body>
  <div class=""scatterplot"" id=""scatterplot""></div>
  
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;
    
    const svg = d3.select(""#scatterplot"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);
    
    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Adoption Rate""] = +d[""Adoption Rate""];
          d[""Investment""] = +d[""Investment""];
        });
        
        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Investment""])])
          .range([0, width]);
        
        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Adoption Rate""])])
          .range([height, 0]);
        
        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale).tickFormat(d3.format("".2s"")))
          .append(""text"")
          .attr(""x"", width / 2)
          .attr(""y"", 30)
          .attr(""text-anchor"", ""middle"")
          .text(""Investment"");
        
        svg.append(""g"")
          .call(d3.axisLeft(yScale).tickFormat(d3.format("".2s"")))
          .append(""text"")
          .attr(""x"", -20)
          .attr(""y"", height / 2)
          .attr(""text-anchor"", ""middle"")
          .attr(""transform"", ""rotate(-90)"")
          .text(""Adoption Rate"");
        
        svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d[""Investment""]))
          .attr(""cy"", d => yScale(d[""Adoption Rate""]))
          .attr(""r"", 5)
          .attr(""fill"", ""steelblue"")
          .attr(""opacity"", 0.7);
      })
      .catch(error => console.error(error));
  </script>
</body>
</html>
```"
2,line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Line Chart that visualizes the trend of Adoption Rate over the Year for each Technology Type.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Adoption Rate Trend</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 2;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 50, right: 50, bottom: 50, left: 50 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;
        
        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);
        
        const xScale = d3.scaleLinear()
            .range([0, width]);
        
        const yScale = d3.scaleLinear()
            .range([height, 0]);
        
        const line = d3.line()
            .x(d => xScale(d.Year))
            .y(d => yScale(d[""Adoption Rate""]));
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"")
            .then(data => {
                data.forEach(d => {
                    d.Year = +d.Year;
                    d[""Adoption Rate""] = +d[""Adoption Rate""];
                });
                
                const technologyTypes = [...new Set(data.map(d => d[""Technology Type""]))];
                
                xScale.domain(d3.extent(data, d => d.Year));
                yScale.domain([0, d3.max(data, d => d[""Adoption Rate""])]);
                
                svg.append(""g"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(d3.axisBottom(xScale));
                
                svg.append(""g"")
                    .call(d3.axisLeft(yScale));
                
                technologyTypes.forEach((type, index) => {
                    const typeData = data.filter(d => d[""Technology Type""] === type);
                    svg.append(""path"")
                        .datum(typeData)
                        .attr(""class"", ""line"")
                        .attr(""stroke"", `hsl(${index * 360 / technologyTypes.length}, 100%, 50%)`)
                        .attr(""d"", line);
                });
                
                svg.append(""text"")
                    .attr(""x"", width / 2)
                    .attr(""y"", -20)
                    .attr(""text-anchor"", ""middle"")
                    .text(""Adoption Rate Trend"");
                
                svg.append(""text"")
                    .attr(""x"", -20)
                    .attr(""y"", height / 2)
                    .attr(""text-anchor"", ""middle"")
                    .attr(""transform"", ""rotate(-90)"")
                    .text(""Adoption Rate"");
                
                svg.append(""text"")
                    .attr(""x"", width / 2)
                    .attr(""y"", height + 30)
                    .attr(""text-anchor"", ""middle"")
                    .text(""Year"");
            });
    </script>
</body>
</html>
```"
3,bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Adoption Rate for each Technology Type in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Adoption Rate Bar Chart</title>
  <style>
    /* add some basic styling to make the chart look decent */
    body {
      font-family: Arial, sans-serif;
    }
    
    .bar {
      fill: steelblue;
    }
    
    .bar:hover {
      fill: brown;
    }
    
    .axis text {
      font-size: 12px;
    }
    
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
      shape-rendering: crispEdges;
    }
  </style>
</head>

<body>
<svg width=""500"" height=""300""></svg>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script>

// Set the dimensions and margins of the graph
var margin = {top: 20, right: 20, bottom: 30, left: 40},
width = +svg.attr(""width"") - margin.left - margin.right,
height = +svg.attr(""height"") - margin.top - margin.bottom;

// Append a 'group' element to 'svg'
// Moves the 'group' element to the top left margin
var g = svg.append(""g"")
.attr(""transform"",
""translate("" + margin.left + "","" + margin.top + "")"");

d3.csv('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv').then(function(data) {

data.forEach(function(d) {
d['Year'] = parseInt(d['Year']);
});

data2020=data.filter(function(d){return d['Year']==2020})

var subgroups=[""Technology Type""];
var groups=[""Adoption Rate""];

// Add X axis
var x=d3.scaleBand()
.domain(data2020.map(function(d){return d[""Technology Type""]}))
.range([0,width])
.padding(0.2)
g.append('g')
.attr('transform','translate(0,'+height+')')
.call(d3.axisBottom(x).tickFormat((domainNumber,domainString)=>domainString).tickSize(-height*1.3).ticks(5))
.selectAll('text')
.style('text-anchor','middle');

// Add Y axis
var y=d3.scaleLinear()
.domain([Math.min(...data.map((x)=>parseFloat(x[""Adoption Rate""]))),Math.max(...data.map((x)=>parseFloat(x[""Adoption Rate""])))])

.range([ height,0]);
g.append('g')
.call(d3.axisLeft(y).tickFormat((domainNumber,domainString)=>domainNumber.toFixed(2)).ticks(10))
.selectAll('.tick line').attr(""stroke"",""lightgray"")



bars=g.selectAll(""myRect"")
.data(data2020)

bars.enter()
.append(""rect"")
.merge(bars)
.transition()
.duration(100)
.delay((d,i)=>i*50)
.attr(""x"", function (d) { return x(d[""Technology Type""]); })
.attr (""y"",function (d) { return y(parseFloat ( d ["" AdoptionRate ""]) );})
.attr (""width"", x.bandwidth ())
.atr (""height "",function ( d ) { return height-y(parseFloat ( d ["" AdoptionRate ""]));})
.atr ('fill','#69b38c')

})

</script></body></html>"
4,pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Pie Chart that visualizes the proportion of Adoption Rate contributed by each Technology Type in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Technology Adoption Rate Pie Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        #pie-chart {
            width: 600px;
            height: 600px;
            margin: 0 auto;
        }
    </style>
</head>
<body>
    <div id=""pie-chart""></div>
    <script>
        const margin = { top: 20, right: 20, bottom: 20, left: 20 };
        const width = 600 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;
        const radius = Math.min(width, height) / 2;

        const svg = d3.select(""#pie-chart"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"")
            .then(data => {
                const filteredData = data.filter(d => d.Year === ""2020"");
                const groupedData = d3.groups(filteredData, d => d[""Technology Type""])
                    .map(([key, values]) => ({ key, value: d3.sum(values, d => parseFloat(d[""Adoption Rate""])) }));

                const pie = d3.pie()
                    .value(d => d.value);

                const arc = d3.arc()
                    .outerRadius(radius)
                    .innerRadius(0);

                const arcs = svg.selectAll(""arc"")
                    .data(pie(groupedData))
                    .enter()
                    .append(""path"")
                    .attr(""d"", arc)
                    .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

                const labels = svg.selectAll(""text"")
                    .data(pie(groupedData))
                    .enter()
                    .append(""text"")
                    .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                    .attr(""dy"", ""0.35em"")
                    .text(d => d.data.key);
            })
            .catch(error => console.error(error));
    </script>
</body>
</html>
```"
5,donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Donut Chart that visualizes the distribution of Adoption Rate among Technology Type in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Donut Chart</title>
    <style>
        .arc text {
            font: 10px sans-serif;
            text-anchor: middle;
        }
        
        .arc path {
            stroke: #fff;
        }
    </style>
</head>
<body>
    <svg width=""500"" height=""350""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 40 };
        const width = 500 - margin.left - margin.right;
        const height = 350 - margin.top - margin.bottom;
        const radius = Math.min(width, height) / 2;
        
        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${width / 2 + margin.left}, ${height / 2 + margin.top})`);
        
        const pie = d3.pie()
            .value(d => d[""Adoption Rate""])
            .sort(null);
        
        const arc = d3.arc()
            .innerRadius(radius * 0.6)
            .outerRadius(radius * 0.9);
        
        const arcLabel = d3.arc()
            .innerRadius(radius * 0.6)
            .outerRadius(radius * 0.9);
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
            const filteredData = data.filter(d => d[""Year""] === ""2020"");
            const groupedData = d3.groups(filteredData, d => d[""Technology Type""]);
            const pieData = groupedData.map(([key, values]) => {
                return {
                    ""Technology Type"": key,
                    ""Adoption Rate"": values.reduce((acc, cur) => acc + parseFloat(cur[""Adoption Rate""]), 0)
                };
            });
            
            const arcs = pie(pieData);
            
            svg.selectAll(""path"")
                .data(arcs)
                .join(""path"")
                .attr(""fill"", (d, i) => d3.schemeCategory10[i])
                .attr(""d"", arc);
            
            svg.selectAll(""text"")
                .data(arcs)
                .join(""text"")
                .attr(""transform"", d => `translate(${arcLabel.centroid(d)})`)
                .call(text => text.append(""tspan"")
                    .attr(""y"", ""-0.4em"")
                    .attr(""font-weight"", ""bold"")
                    .text(d => d.data[""Technology Type""]))
                .call(text => text.filter(d => d.endAngle - d.startAngle > 0.25).append(""tspan"")
                    .attr(""x"", 0)
                    .attr(""y"", ""0.7em"")
                    .attr(""fill-opacity"", 0.7)
                    .text(d => d.data[""Adoption Rate""].toFixed(2)));
        });
    </script>
</body>
</html>
```"
6,coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Coxcomb Chart(polar area chart) to compare the Adoption Rate of different Technology Type in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coxcomb Chart</title>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
</head>
<body>

<svg width=""500"" height=""500""></svg>

<script>

// Load data
d3.csv('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
.then(data => {

    // Filter data for year 2020
    const filteredData = data.filter(d => d['Year'] === '2020');

    // Convert Adoption Rate to number
    filteredData.forEach(d => {
        d['Adoption Rate'] = +d['Adoption Rate'];
    });

    // Create a pie chart layout
const pie = d3.pie()
.value(d => d['Adoption Rate']);

// Create an arc generator
const arc = d3.arc()
.innerRadius(100)
.outerRadius(200);

// Select the SVG element and create a group for the chart
const svg = d3.select('svg');
const g = svg.append('g')
.attr('transform', `translate(${250}, ${250})`);

// Join the data to the elements and update them if they already exist, or append new ones if they don't.
g.selectAll('.arc')
.data(pie(filteredData))
.join(
enter =>
enter.append('path')
.attr(""fill"", (d, i) => `hsl(${i * 360 / filteredData.length},100%,50%)`)
.call(enter =>
enter.transition().duration(1000)
.attrTween(""d"", (data) =>
arc.interpolate((t) =>
[...data].map((p, i) =>
[i === 1 ? p * t : p]
)
)
)
),
update =>
update.call(update =>
update.transition().duration(1000).attrTween(""d"", (data) =>
arc.interpolate((t) =>
[...data].map((p, i) =>
[i === 1 ? p * t : p]
)
)
)
),
exit =>
exit.call(exit =>
exit.transition()
.delay(700)
.duration(300)
.remove()
));

});

</script>
</body>
</html>"
7,radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Radar Chart to compare the Adoption Rate of different Technology Type in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Radar Chart</title>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
</head>
<body>
  <svg width=""600"" height=""600""></svg>

  <script>

    // Load data
    d3.csv('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
      .then(data => {
        // Filter data for year 2020
        const filteredData = data.filter(d => d.Year === '2020');

        // Extract technology types and adoption rates
        const techTypes = [...new Set(filteredData.map(d => d['Technology Type']))];
        const adoptionRates = filteredData.map(d => +d['Adoption Rate']);

        // Create scales
        const scale = d3.scaleLinear()
          .domain([0, Math.max(...adoptionRates)])
          .range([10, 200]);

        // Create radar chart layout
        const margin = { top: 50, right: 50, bottom: 50, left: 50 };
const width = document.body.clientWidth - margin.left - margin.right;
const height = document.body.clientHeight - margin.top - margin.bottom;

const svgRadarChartContainerElementId='radarChart';
let svgRadarChartContainerElement=d3.select(`#${svgRadarChartContainerElementId}`);
if (svgRadarChartContainerElement.empty()) {
    svgRadarChartContainerElement=d3.select('body')
.append('div')
.attr('id', `${svgRadarChartContainerElementId}`)
.style(""width"", `${width}px`)
.style(""height"", `${height}px`);
}
let svg=svgRadarChartContainerElement.append(""svg"")
.attr(""width"", width)
.attr(""height"", height);

const g=svg.append('g').attr(
'transform',
`translate(${margin.left},${margin.top})`
);
g.selectAll('.axis').remove();
g.selectAll('.axisLabel').remove();
g.selectAll('.legendGroup').remove();

// Add axis labels

// Add legend

// Draw the radar chart

function draw() {

}

draw();

      });

</script>

</body></html>"
8,streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Streamgraph that visualizes the changes of Adoption Rate over the Year for each Technology Type.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Streamgraph</title>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .streamgraph {
      width: 800px;
      height: 600px;
      margin: auto;
    }
    
    .streamgraph path {
      fill-opacity: .5;
    }
    
    .streamgraph:hover path {
      fill-opacity: .8;
    }
  </style>
</head>

<body>

<div class=""streamgraph""></div>

<script>

// Set the dimensions and margins of the graph
var margin = {top: 20, right: 20, bottom: 30, left:40},
width = document.querySelector('.streamgraph').offsetWidth - margin.left - margin.right,
height = document.querySelector('.streamgraph').offsetHeight - margin.top - margin.bottom;

// Parse the date / time
var parseTime = d3.timeParse(""%Y"");

// Set the ranges
var xScale = d3.scaleTime().range([0,width]);
var yScale = d3.scaleLinear().range([height,0]);

// Define the area generator
var areaGenerator=d3.area()
.x(function(d){return xScale(d.data.Year);})
.y0(function(d){return yScale(d[0]);})
.y1(function(d){return yScale(d[1]);});

d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data=>{

data.forEach(function (d){
        d.Year=parseTime(+d.Year);
        d[""Adoption Rate""]=+d[""Adoption Rate""];
})

data.sort((a,b)=>a.Year-b.Year);

let keys=[""Technology Type""];
let techTypes=data.map(item=>item[keys]);

techTypes=[...new Set(techTypes)];

let stack=d3.stack().keys(techTypes).value(([,key])=>key);

stack.order(stack.offsetWiggle);

stack(data);

xScale.domain([data[0].Year,data[data.length-1].Year]);
yScale.domain([0,d3.max(data,([,values])=>Math.max(...values))]).nice();

const svg=d3.select("".streamgraph"")
.append(""svg"")
.attr(""width"",width+margin.left+margin.right)
.attr(""height"",height+margin.top+margin.bottom)
.append('g')
.attr('transform',`translate(${margin.left},${margin.top})`);

svg.selectAll('path')
.data(stack(data))
.enter()
.append('path')
.style('fill',(item,i)=>`hsl(${i*100/${stack.size()}},50%,50%)`)
.attr('class','areaPath')
.transition()
.duration(200)
.delay((_,i)=>i*100)
.attrTween(""d"",function(){
const previous=this.previousElementSibling?this.previousElementSibling.__prev:null; 
this.__prev=previous; 
return t => areaGenerator(this.__prev || this._groups[t])
});

svg.selectAll("".areaPath"")
.on(""mouseover"",(event,item)=>{
const techType=item.key;

const hoveredItem=data.map(item=>{
if(item[""Technology Type""]===techType){
item.hovered=true;}
else{
item.hovered=false;}
return item;})

svg.selectAll("".areaPath"")
.transition()
.duration(200)
.style(""opacity"",(it,i)=>{
if(it.key===techType){
return ""1"";
}
else{
return ""0.2"";
}
});
})

.on(""mouseout"",(event,item)=>{
svg.selectAll("".areaPath"")
.transition()
.duration(200)
.style(""opacity"",""1"");
});

});

</script></body></html>"
9,slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Slopegraph to compare the Adoption Rate between 2019 and 2020 for each Technology Type.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Slopegraph</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .slopegraph {
      width: 800px;
      height: 600px;
      margin: auto;
    }
    
    .slopegraph .axis path,
    .slopegraph .axis line {
      fill: none;
      stroke: #777;
      shape-rendering: crispEdges;
    }
    
    .slopegraph .axis text {
      font-size: 12px;
    }
    
    .slopegraph .line {
      stroke-width: 2px;
    }
    
     /* Add styles for the legend */
     /* Add styles for the legend */
.slopegraph svg g.legend rect{
	fill:#fff;stroke:#000;stroke-width:.5
}
.slopegraph svg g.legend text{
	fill:#000;font-size:.7em
}

/* Add styles for the tooltip */
.tooltip {	
	position:absolute;			
	background-color:#f9f9f9;		
	border:solid #ddd;border-width:.5px;padding:.35em	
}

/* Style the dots on hover */	
.dot {cursor:pointer}		
.dot circle{fill-opacity:.3}		
.dot:hover circle{fill-opacity:.8}	

/* Style the lines on hover */	
.line {cursor:pointer}		
.line path{stroke-opacity:.3}		
.line:hover path{stroke-opacity:.8}

/* Style the lines and dots when selected */	
.selected-dot circle,	.selected-line path{
	stroke-opacity:.8 !important;	fill-opacity=.8 !important
}
</style>

<body>

<div class=""slopegraph""></div>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script> 
// Set up SVG and margins
const margin = { top: 50, right: 20, bottom: 30, left:100 };
const width = document.querySelector('.slopegraph').offsetWidth - margin.left - margin.right,
height = document.querySelector('.slopegrap').offsetHeight -margin.top-margin.bottom;

const svg = d3.select("".slopgrap"")
.append(""svg"")
.attr(""width"",width+margin.left+margin.right)
.attr(""height"",height+margin.top+margin.bottom)
.append(""g"")
.attr(""transform"",""translate(""+margin.left+"",""+margintop+"")"");

// Load data and convert data types

d3.csv('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
.then(data => {

data.forEach(d => {

d['Year'] = +d['Year'];
d['Adoption Rate'] = +d['Adoption Rate'];

});

// Filter data to only include years of interest

const filteredData2019=data.filter(d=> d.Year===2019);
const filteredData2020=data.filter(d=> d.Year===2020);

// Create scales

const xScale=d3.scalePoint()
.domain([...new Set(data.map(d=> d[""Technology Type""]))])
.range([0,width])
.padding(1);

const yScale=d3.scaleLinear()
.domain([Math.min(...data.map(d=> d[""Adoption Rate""])),Math.max(...data.map(d=> d[""Adoption Rate""]))])
.range([height,0]);

// Create axis generators

 const xAxis=svg.append('g')
  	.call(xAxis.tickSize(-innerHeight).tickPadding(10));

 const yAxis=svg.append('g')
.call(yAxis.tickSize(-innerWidth).tickPadding(10));

 // Create a line generator 

 const lineGenerator=d3.line()
.x(function (filteredData2019) {return xScale(filteredData2019);})
.y(function (filteredData2020) {return yScale(filteredData20202);});

 // Draw lines 

 svg.selectAll("".line"")
.data(filteredData20192020)
.enter()
.append(""path"")

.classed (""line"",true)

.style (""opacity"",.5)

.style (""stroke"",""black"")

.style (""pointer-events"",""none"")

.transition()

.duration (500)

.delay ((filteredData20192020,i)=> i*50)

.attrTween ('' ,function (){

var interpolatePath=d2.interpolatePath(
	lineGenerator ([xScale (filteredDta019),yScle(fiteredDta019)]),
	lineGenerator ([xScle(fiteredDta020),yScle(fiteredDta020)])
	);
	return function(t){
	return interpolatePath(t);
};
})

.on ('end',function (){
	d2.select(this).style ('pointer-events','auto');
})

.on ('mouseover',function(event,d){
	d2.select(this).classed('selected-line',true);
})

.on ('mouseout',function(event,d){
	d2.select(this).classed('selected-line',false);
});

 // Draw dots 

svg.selectAll("".dot"")
.data(filteredDatatotl)
.enter()

.append (""circle"")

.classed (""dot"",true)

.style (""opacity"" ,.5)

.style (""fill"" ,""black"")

.transition ()

.duration (500)

.delay ((filteredDatatotl,i)=> i*50 )

.attrTween("""" ,function(){

var interpolteCicle=d2.interpolateNumber(
	ySclae(filterdeDatatotl[filterdeDatatotl.length-1]),
	ySclae(filterdeDatatotl[filterdeDatatotl.length-1]));
	return function(t){
	return interpolteCicle(t);
};
})

.on ('end' ,function(){
	d2.select(this).style ('pointer-events','auto');
})

.on ('mouseover' ,function(event,d){

	var tooltipHtml=`<p>Technolgy Type:${filterdeDatatotl}<br>Year:${filterdeDatayear}<br>AdotionRate:${filterdeDatarate}</p>`;
	var tooltipOffset=[event.offsetX,event.offsetY];
	showTooltip(tooltipHtml,event.target.parentNode.parentNode.parentNode.parentNode.parentNode.offsetTop,event.target.offsetTop);

	d2.select(this).classed('selected-dot',true);

	svg.selectAll('.line')

	.filter(function(line_data){

	if(line_data==undefined)return false;

	if(line_data[1]==undefined)return false;

	if(line_data[1].hasOwnProperty(filteredeatakey)) return true;

	else return false;

}).classed('selected-line',true);

}).on('mouseout' , function(event,d){

hideTooltip();

	svg.selectAll('.dot')

.classed(selected-dot,false');

	svg.selectAll(.line')

	classed(selected-lin,false');

});
});</script></body></html></head></html>"
10,heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Heatmap that visualizes the Adoption Rate across Technology Type and Years.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Heatmap</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .container {
      width: 800px;
      height: 600px;
      margin: auto;
    }
    
    .tooltip {
      position: absolute;
      background-color: #f9f9f9;
      border-radius: 5px;
      padding: 10px;
      pointer-events: none;
    }
    
    rect:hover {
    	fill-opacity:.5;	
	}
	
	.legendLinear{
	  font-family:""Arial"";
	  fill:#000000; 
	}
	
	.legendLinear .label{
	  text-anchor:end; 
	}
	
	svg{
	    border-style:solid ;
	    border-width:.5px ;
	    border-color:black ;  
   }

</style>

</head>

<body>

<div class=""container""></div>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script type='text/javascript'>

var margin = {top :50 , right :50 , bottom :100 , left :80 } ,
            width =700 -margin.left -margin.right ,
            height =500 -margin.top -margin.bottom ;

var svg=d3.select(""div.container"")
.append(""svg"")
.attr(""width"",width+margin.left+margin.right)
.attr(""height"",height+ margin.top + margin.bottom)
.append(""g"")
.attr(""transform"",""translate(""+ margin.left+"",""+margin.top+"")"");

d3.csv('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
.then(function(data){
data.forEach(function(d){
	d[""Year""]=parseInt(d[""Year""]);
	d[""Adoption Rate""]=parseFloat(d[""Adoption Rate""]);
})

var years=Array.from(new Set(data.map(function(d){return d.Year}))).sort();
var techs=Array.from(new Set(data.map(function(d){return d['Technology Type']}))).sort();

const xScale=d3.scaleBand()
.domain(years)
.range([0,width])
.padding(0.01);

const yScale=d3.scaleBand()
.domain(techs)
.range([height,0])
.padding(0.01);

svg.selectAll()
.data(data)
.enter()
.append('rect')
.attr('x',function(d){return xScale(d.Year)})
.attr('y',function (d) { return yScale ( d [""Technology Type""] ) ; })
.attr ('width' , xScale.bandwidth())
.attr ('height' , yScale.bandwidth())
.style ('fill' ,'#69b3a2')
.on (""mouseover"" , function(event,d) {

	var tooltip = d3.select (""body"")
					.append (""div"")
					.classed (""tooltip"" , true )
					.style (""opacity"" ,-1 )
				

	var mousePosition=event.pageX +"",""+ event.pageY;

	d3.select("".tooltip"")

			          .style(""left"",event.pageX+""px"")

			          .style(""top"",event.pageY+""px"");
			          
	tooltiptext=`<strong>Year:</strong>${d.Year}<br><strong>Technology Type:</strong>${d['Technology Type']}<br><strong>Adoption Rate:</strong>${parseFloat ( d [""Adoption Rate""] ). toFixed (2)}%`;
	d3.select("".tooltip"").html(tooltiptext);
	

	var transition=d3.transition().duration(200).ease();
	d3.select("".tooltip"").transition(transition).style('opacity',1);
})
.on ('mouseout' ,(event,d)=>{
	div.transition ()
        .duration (300 )
        .style ('opacity' ,-1 );
});

svg.selectAll('.x-axis').remove();
svg.selectAll('.y-axis').remove();

const xAxisCall = d3.axisBottom(xScale);
const yAxisCall = d3.axisLeft(yScale);

svg
.append('g')
.call(xAxisCall.tickFormat((domainNumber)=>domainNumber))
.classed('x-axis',true)

svg
.append('g')
.call(yAxisCall.tickFormat((domainNumber)=>domainNumber))
.classed('y-axis',true)

//Legend
let legendLinear=d3.legendColor()

.shapeWidth(width /20 )

.cells ([ ""Lowest Adoption Rates"" ,""Moderate Adoption Rates"" ,""Highest Adoption Rates""])

.title (""Legend"");

let colorLegendGroup= svg

.selectAll('.legendLinear')

.data ([ ""Lowest Adoption Rates"" ,""Moderate Adoption Rates"" ,""Highest Adoption Rates""])

.enter()

.append ('g')

.classed ('legendLinear'+ 'colorbar ', true );

colorLegendGroup.call(legendLinear); 

});
</script></body></html>"
11,bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Stacked Bar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    
    .bar {
      fill: steelblue;
    }
    
    .axis text {
      font-size: 12px;
    }
    
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>

<body>
<svg width=""800"" height=""600""></svg>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script>

// Set the dimensions and margins of the graph
var margin = {top: 20, right: 20, bottom: 30, left: 40},
width = +svg.attr(""width"") - margin.left - margin.right,
height = +svg.attr(""height"") - margin.top - margin.bottom;

// Parse the date / time
var parseTime = d3.timeParse(""%Y"");

// Set the ranges
var xScale = d3.scaleBand()
.range([0, width])
.padding(0.2);

var yScale = d3.scaleLinear()
.range([height,0]);

// Create a g element to hold all other elements
var g = svg.append(""g"")
.attr(""transform"", ""translate(""+margin.left+"",""+margin.top+"")"");

d3.csv('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv').then(function(data) {

data.forEach(function(d) {
d.Year=parseTime(d.Year);
});

xScale.domain(data.map(function(d){return d[""Technology Type""]}));
yScale.domain([0,d3.max(data,function(d){return parseInt(d[""Adoption Rate""]);})]);

g.selectAll("".bar"")
.data(data)
.enter().append(""rect"")
.attr(""class"",""bar"")
.attr('x',function (d,i){
return xScale(d[""Technology Type""]);
})
.attr('y',function (d,i){
return yScale(parseInt(d[""Adoption Rate""]));
})
.transition()
.duration(100)
.delay(function (data,i){
return i*10;})
.on('start',function(){
console.log(this);
})
.on('interrupt',function(){
console.log(this);
})
.on('end',function(){
console.log(this);
});

g.append(""g"")
.call(xAxisCall);

g.append(""g"").call(yAxisCall);

});

</script></body></html>"
12,bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Horizontal Bar Chart that visualizes the Adoption Rate for each Technology Type in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Horizontal Bar Chart</title>
  <style>
    /* add some basic styling to make the chart look decent */
    body {
      font-family: Arial, sans-serif;
    }
    
    .bar {
      fill: steelblue;
    }
    
    .bar:hover {
      fill: brown;
    }
    
    .axis--x path {
      display: none;
    }
  </style>
</head>

<body>
<svg width=""500"" height=""300""></svg>

<script src=""https://d3js.org/d3.v7.min.js""></script>

<script>

// Set the dimensions and margins of the graph
var margin = {top: 20, right: 20, bottom: 30, left: 40},
width = +svg.attr(""width"") - margin.left - margin.right,
height = +svg.attr(""height"") - margin.top - margin.bottom;

// Append a 'group' element to 'svg'
// Moves the 'group' element to the top left margin
var g = svg.append(""g"")
.attr(""transform"",
""translate("" + margin.left + "","" + margin.top + "")"");

d3.csv('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv').then(function(data) {

data.forEach(function(d) {
d[""Adoption Rate""] = parseFloat(d[""Adoption Rate""]);
});

data.sort(function(a,b) { return b['Adoption Rate']-a['Adoption Rate']; });

var xScale = d3.scaleLinear()
.domain([0,d3.max(data,function(d){return d['Adoption Rate'];})])
.range([0,width]);

var yScale = d3.scaleBand()
.domain(data.map(function(d){return d['Technology Type']}))
.range([height,0])
.padding(0.2);

g.selectAll("".bar"")
.data(data.filter(function(d){return parseInt(d.Year)==2020;}))
.enter().append(""rect"")
.attr('class','bar')
.attr('x',function (d,i){
return xScale(0);
})
.transition()
.duration(100)
.delay(function (d,i){
return i*50;})
.attr('y',function (d,i){
return yScale(d['Technology Type']);
})
.transition()
.duration(100)
.delay(function (d,i){
return i*50;})
.attr('width',function (d,i){
if(isNaN(xScale(parseFloat((parseFloat((parseFloat(parseFloat(parseFloat(parseFloat(parseFloat(
parseFloat(
parseFloat(
parseFloat(
parseFloat(
parseFloat(parseFloat(((((1*d[""Return on Investment""])))))))))))))))))-1)*100)))
{return xScale(1);}
else{
if(isNaN(xScale(Math.round(((1*d[""Return on Investment""]))))))
{return xScale(Math.round(((1*d[""Return on Investment""]))));}
else{
if(isNaN(xScale(Math.round(((1*d[""Return on Investment""]))))))
{return xScale(Math.round(((1*d[""Return on Investment""]))));}
else{
if(isNaN(xScale(parseInt(parseInt(parseInt(parseInt(parseInt(parseInt(parseInt(parseInt(parseInt(parseInt
parseInt((parseInt((parseInt((parseInt((parseInt((((Math.floor(-99999999999999999*(Math.random()-Math.random())))+(-99999999999999*(Math.random()-Math.random())))+(-9*(Math.random()-Math.random())))+(-9*(M ath.floor(-9*Math.random())+5)))+(4-Math.floor((-4*Math.random())+5)))+(2-Math.floor((-2*Math.rando m())+5)))+(2-Math.floor((-2*Math.rando m())+5)))+(4-Math.floor((-4*Math.rando m())+5))+((-10 Math.fl oor ((-10 * Math. random ())))) )))))))))))))))))))))
{return parseInt(xSca le(pars eInt(p arseIn t(p arseI nt(pa rseIn t(parse Int(par seInt(parse Int(par seInt(parse Int(par seInt(parse Int(pa rseI nt(pa rseI nt(pa rseln t(pars eFl oor(floo r(rand om()*11 )+(parse Fl oor(floo r(rand om()*11 )+(parse Fl oor(floo r(rand om()*11 )+(parse Fl oor(floo r(rand om()*11 )+(parse Fl oor(floo r(rand om()*11 ))))) ))))) )))));
}else{
if(isNaN(xSca le(pars eFl oor(ran dom() *101))))
{ret urn pa rs eFlo or(ra ndo m() *101);}
el se{
retu rn pa rs eFlo or(ra ndo m() *101);
}}}}}}
}})
.transition()
.duration(100)
.delay(function (d,i){
return i*50;})
.style('fill','steelblue')
.style ('stroke ','black ')
.on ('mou sover ', function(){
tooltip.style (""visi bility "",""visible "");
})

.on ('mou s out ', function(){
tooltip.style (""visi bility "",""hidden "");
});

g.append (""g "")
.call (
        d3.axisLeft(ySc ale )
        );

g.append (""text "")
.text ('Technolo gy Adoption in Year :2020 ')
.classed ('x axis-label ', true )
.attrs ({
'transform ':'translate (-30,'+(heig ht /2)+') rotate (-90)',
'style':'font-size :16px '
})

});
</script></body></html>"
