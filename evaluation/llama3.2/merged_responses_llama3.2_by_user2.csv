title,Prompt,dataset,library,view_type,response,evaluation,originalIndex,Prompt Number
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot that visualizes the relationship between Units Produced and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Agricultural Production Scatterplot</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .tooltip {
            position: absolute;
            background-color: #f9f9f9;
            border: 1px solid #ccc;
            padding: 2px;
            font-size: 12px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 50, right: 50, bottom: 50, left: 50 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;
        
        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);
        
        const xScale = d3.scaleLinear()
            .range([0, width]);
        
        const yScale = d3.scaleLinear()
            .range([height, 0]);
        
        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);
        
        svg.append(""g"")
            .attr(""transform"", `translate(0, ${height})`)
            .attr(""class"", ""x-axis"");
        
        svg.append(""g"")
            .attr(""class"", ""y-axis"");
        
        const tooltip = d3.select(""body"")
            .append(""div"")
            .attr(""class"", ""tooltip"")
            .style(""opacity"", 0);
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"")
            .then(data => {
                data.forEach(d => {
                    d[""Units Produced""] = +d[""Units Produced""];
                    d[""Revenue""] = +d[""Revenue""];
                });
                
                xScale.domain([0, d3.max(data, d => d[""Units Produced""]) * 1.1]);
                yScale.domain([0, d3.max(data, d => d[""Revenue""]) * 1.1]);
                
                svg.select("".x-axis"")
                    .call(xAxis)
                    .selectAll(""text"")
                    .style(""text-anchor"", ""middle"")
                    .attr(""transform"", ""rotate(-45)"");
                
                svg.select("".y-axis"")
                    .call(yAxis);
                
                svg.selectAll(""circle"")
                    .data(data)
                    .enter()
                    .append(""circle"")
                    .attr(""cx"", d => xScale(d[""Units Produced""]))
                    .attr(""cy"", d => yScale(d[""Revenue""]))
                    .attr(""r"", 5)
                    .on(""mouseover"", (event, d) => {
                        tooltip.transition()
                            .duration(200)
                            .style(""opacity"", 0.9);
                        
                        tooltip.html(`Units Produced: ${d[""Units Produced""]}<br>Revenue: ${d[""Revenue""]}`)
                            .style(""left"", (event.pageX + 5) + ""px"")
                            .style(""top"", (event.pageY - 28) + ""px"");
                        
                        svg.append(""line"")
                            .attr(""class"", ""hover-line"")
                            .attr(""x1"", 0)
                            .attr(""y1"", yScale(d[""Revenue""]))
                            .attr(""x2"", width)
                            .attr(""y2"", yScale(d[""Revenue""]))
                            .style(""stroke"", ""gray"")
                            .style(""stroke-dasharray"", ""3,3"");
                        
                        svg.append(""line"")
                            .attr(""class"", ""hover-line"")
                            .attr(""x1"", xScale(d[""Units Produced""]))
                            .attr(""y1"", 0)
                            .attr(""x2"", xScale(d[""Units Produced""]))
                            .attr(""y2"", height)
                            .style(""stroke"", ""gray"")
                            .style(""stroke-dasharray"", ""3,3"");
                    })
                    .on(""mouseout"", () => {
                        tooltip.transition()
                            .duration(500)
                            .style(""opacity"", 0);
                        
                        svg.selectAll("".hover-line"")
                            .remove();
                    });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,0,1
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot that visualizes the relationship between Units Produced and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Agricultural Production Scatterplot</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .brush {
            fill-opacity: 0.2;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600"" margin=""50""></svg>
    <div id=""selected-data""></div>

    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 50, right: 50, bottom: 50, left: 50 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

        const brush = d3.brush()
            .extent([[0, 0], [width, height]])
            .on(""brush"", brushed)
            .on(""end"", brushended);

        const brushg = svg.append(""g"")
            .attr(""class"", ""brush"")
            .call(brush);

        brushg.selectAll(""rect"")
            .attr(""height"", height);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"")
            .then(data => {
                data.forEach(d => {
                    d[""Units Produced""] = +d[""Units Produced""];
                    d[""Revenue""] = +d[""Revenue""];
                });

                const xScale = d3.scaleLinear()
                    .domain([0, d3.max(data, d => d[""Units Produced""])])
                    .range([0, width]);

                const yScale = d3.scaleLinear()
                    .domain([0, d3.max(data, d => d[""Revenue""])])
                    .range([height, 0]);

                svg.selectAll(""circle"")
                    .data(data)
                    .enter()
                    .append(""circle"")
                    .attr(""cx"", d => xScale(d[""Units Produced""]))
                    .attr(""cy"", d => yScale(d[""Revenue""]))
                    .attr(""r"", 5);

                svg.append(""g"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(d3.axisBottom(xScale));

                svg.append(""g"")
                    .call(d3.axisLeft(yScale));

                function brushed(event) {
                    const selection = event.selection;
                    if (selection) {
                        const x0 = xScale.invert(selection[0][0]);
                        const x1 = xScale.invert(selection[1][0]);
                        const y0 = yScale.invert(selection[1][1]);
                        const y1 = yScale.invert(selection[0][1]);

                        const selectedData = data.filter(d => x0 <= d[""Units Produced""] && d[""Units Produced""] <= x1 && y0 <= d[""Revenue""] && d[""Revenue""] <= y1);

                        d3.select(""#selected-data"")
                            .html(selectedData.map(d => `Units Produced: ${d[""Units Produced""]}, Revenue: ${d[""Revenue""]}`).join(""<br>""));
                    }
                }

                function brushended(event) {
                    if (!event.selection) {
                        d3.select(""#selected-data"")
                            .html("""");
                    }
                }
            });
    </script>
</body>
</html>
```",Initialization Error,1,2
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot that visualizes the relationship between Units Produced and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Agricultural Production Scatterplot</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .scatterplot {
            width: 800px;
            height: 600px;
            margin: 50px auto;
        }
    </style>
</head>
<body>
    <div class=""scatterplot"" id=""scatterplot""></div>
    
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        // Load data
        d3.csv('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
        .then(data => {
            // Convert data types
            data.forEach(d => {
                d['Units Produced'] = parseFloat(d['Units Produced']);
                d['Revenue'] = parseFloat(d['Revenue']);
            });
            
            // Create SVG
            const svg = d3.select('#scatterplot')
                .append('svg')
                .attr('width', 800)
                .attr('height', 600);
            
            // Create scales
            const xScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Units Produced']) * 1.1])
                .range([0, 700]);
            
            const yScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Revenue']) * 1.1])
                .range([550, 0]);
            
            // Create axes
            const xAxis = d3.axisBottom(xScale);
            const yAxis = d3.axisLeft(yScale);
            
            svg.append('g')
                .attr('transform', 'translate(50, 550)')
                .call(xAxis);
            
            svg.append('g')
                .attr('transform', 'translate(50, 0)')
                .call(yAxis);
            
            // Create scatterplot
            svg.selectAll('circle')
                .data(data)
                .enter()
                .append('circle')
                .attr('cx', d => xScale(d['Units Produced']) + 50)
                .attr('cy', d => yScale(d['Revenue']))
                .attr('r', 5)
                .attr('fill', 'steelblue');
            
            // Add zoom functionality
            const zoom = d3.zoom()
                .scaleExtent([1, 10])
                .on('zoom', (event) => {
                    svg.selectAll('circle')
                        .attr('transform', event.transform);
                    
                    svg.selectAll('g')
                        .attr('transform', (d, i) => {
                            if (i === 0) {
                                return `translate(${event.transform.x + 50}, ${event.transform.y + 550}) scale(${event.transform.k})`;
                            } else {
                                return `translate(${event.transform.x + 50}, ${event.transform.y}) scale(${event.transform.k})`;
                            }
                        });
                });
            
            svg.call(zoom);
        });
    </script>
</body>
</html>
```",Correct,2,3
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Units Produced and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Agricultural Production Scatterplot</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .tooltip {
            position: absolute;
            background-color: #f9f9f9;
            border: 1px solid #ccc;
            padding: 2px;
            font-size: 12px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 50, right: 50, bottom: 50, left: 50 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;
        
        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);
        
        const tooltip = d3.select(""body"")
            .append(""div"")
            .attr(""class"", ""tooltip"")
            .style(""opacity"", 0);
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"")
            .then(data => {
                data.forEach(d => {
                    d[""Units Produced""] = +d[""Units Produced""];
                    d[""Revenue""] = +d[""Revenue""];
                });
                
                const xScale = d3.scaleLinear()
                    .domain([0, d3.max(data, d => d[""Units Produced""])])
                    .range([0, width]);
                
                const yScale = d3.scaleLinear()
                    .domain([0, d3.max(data, d => d[""Revenue""])])
                    .range([height, 0]);
                
                svg.append(""g"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(d3.axisBottom(xScale).tickFormat(d3.format("".2s"")));
                
                svg.append(""g"")
                    .call(d3.axisLeft(yScale).tickFormat(d3.format("".2s"")));
                
                svg.selectAll(""circle"")
                    .data(data)
                    .enter()
                    .append(""circle"")
                    .attr(""cx"", d => xScale(d[""Units Produced""]))
                    .attr(""cy"", d => yScale(d[""Revenue""]))
                    .attr(""r"", 5)
                    .on(""mouseover"", (event, d) => {
                        tooltip.transition()
                            .duration(200)
                            .style(""opacity"", 0.9);
                        
                        tooltip.html(`Year: ${d.Year}<br>Crop Type: ${d[""Crop Type""]}<br>Units Produced: ${d[""Units Produced""]}<br>Revenue: ${d[""Revenue""]}`)
                            .style(""left"", (event.pageX + 5) + ""px"")
                            .style(""top"", (event.pageY - 28) + ""px"");
                    })
                    .on(""mouseout"", () => {
                        tooltip.transition()
                            .duration(500)
                            .style(""opacity"", 0);
                    })
                    .on(""click"", (event, d) => {
                        const url = `https://www.google.com/search?q=${d[""Crop Type""]}+${d.Year}`;
                        window.open(url, ""_blank"");
                    });
            })
            .catch(error => console.error(error));
    </script>
</body>
</html>
```",Correct,3,4
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot with query widgets showing the Units Produced and Revenue of the given dataset. Add a slider to represent the Year.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Agricultural Production Scatterplot</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .scatterplot {
            width: 800px;
            height: 600px;
            border: 1px solid black;
            margin: 20px auto;
        }
        
        .slider-container {
            width: 800px;
            margin: 20px auto;
        }
    </style>
</head>
<body>
    <div class=""scatterplot"" id=""scatterplot""></div>
    <div class=""slider-container"">
        <label for=""year-slider"">Year:</label>
        <input type=""range"" id=""year-slider"" min=""2000"" max=""2022"" value=""2000"">
        <span id=""year-display"">2000</span>
    </div>
    
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        // Load data
        d3.csv('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
        .then(data => {
            data.forEach(d => {
                d['Year'] = +d['Year'];
                d['Units Produced'] = +d['Units Produced'];
                d['Revenue'] = +d['Revenue'];
            });
            
            // Create scatterplot
            const margin = { top: 20, right: 20, bottom: 30, left: 40 };
            const width = 800 - margin.left - margin.right;
            const height = 600 - margin.top - margin.bottom;
            
            const svg = d3.select('#scatterplot')
                .append('svg')
                .attr('width', width + margin.left + margin.right)
                .attr('height', height + margin.top + margin.bottom)
                .append('g')
                .attr('transform', `translate(${margin.left}, ${margin.top})`);
            
            const xScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Units Produced'])])
                .range([0, width]);
            
            const yScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Revenue'])])
                .range([height, 0]);
            
            svg.append('g')
                .attr('transform', `translate(0, ${height})`)
                .call(d3.axisBottom(xScale).tickFormat(d3.format('.2s')));
            
            svg.append('g')
                .call(d3.axisLeft(yScale).tickFormat(d3.format('.2s')));
            
            const points = svg.selectAll('circle')
                .data(data.filter(d => d['Year'] === 2000))
                .enter()
                .append('circle')
                .attr('cx', d => xScale(d['Units Produced']))
                .attr('cy', d => yScale(d['Revenue']))
                .attr('r', 5);
            
            // Create slider
            const slider = document.getElementById('year-slider');
            const yearDisplay = document.getElementById('year-display');
            
            slider.addEventListener('input', () => {
                const selectedYear = +slider.value;
                yearDisplay.textContent = selectedYear;
                
                points.data(data.filter(d => d['Year'] === selectedYear))
                    .transition()
                    .duration(500)
                    .attr('cx', d => xScale(d['Units Produced']))
                    .attr('cy', d => yScale(d['Revenue']));
            });
        });
    </script>
</body>
</html>
```",Initialization Error,4,5
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot showing the Units Produced of Wheat. Add animated transitions that connect these points using lines in order.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Agricultural Production Scatterplot</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .scatterplot {
            width: 800px;
            height: 600px;
            margin: 50px auto;
        }
        
        .scatterplot .axis path,
        .scatterplot .axis line {
            fill: none;
            stroke: #777;
            shape-rendering: crispEdges;
        }
        
        .scatterplot .axis text {
            font-size: 12px;
        }
    </style>
</head>
<body>
    <div class=""scatterplot"" id=""scatterplot""></div>
    
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        // Set up the scatterplot dimensions
        const margin = { top: 50, right: 50, bottom: 50, left: 50 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;
        
        // Create the scatterplot SVG
        const svg = d3.select(""#scatterplot"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);
        
        // Load the data
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"")
            .then(data => {
                // Filter the data to only include wheat
                const wheatData = data.filter(d => d[""Crop Type""] === ""Wheat"");
                
                // Convert the data types
                wheatData.forEach(d => {
                    d[""Year""] = +d[""Year""];
                    d[""Units Produced""] = +d[""Units Produced""];
                });
                
                // Sort the data by year
                wheatData.sort((a, b) => a[""Year""] - b[""Year""]);
                
                // Set up the x and y scales
                const xScale = d3.scaleLinear()
                    .domain(d3.extent(wheatData, d => d[""Year""]))
                    .range([0, width]);
                
                const yScale = d3.scaleLinear()
                    .domain(d3.extent(wheatData, d => d[""Units Produced""]))
                    .range([height, 0]);
                
                // Create the x and y axes
                const xAxis = d3.axisBottom(xScale)
                    .ticks(10);
                
                const yAxis = d3.axisLeft(yScale)
                    .ticks(10);
                
                svg.append(""g"")
                    .attr(""class"", ""axis"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(xAxis);
                
                svg.append(""g"")
                    .attr(""class"", ""axis"")
                    .call(yAxis);
                
                // Create the scatterplot points
                const points = svg.selectAll(""circle"")
                    .data(wheatData)
                    .enter()
                    .append(""circle"")
                    .attr(""cx"", d => xScale(d[""Year""]))
                    .attr(""cy"", d => yScale(d[""Units Produced""]))
                    .attr(""r"", 5)
                    .attr(""fill"", ""steelblue"");
                
                // Create the animation
                const line = d3.line()
                    .x(d => xScale(d[""Year""]))
                    .y(d => yScale(d[""Units Produced""]));
                
                const path = svg.append(""path"")
                    .datum(wheatData)
                    .attr(""fill"", ""none"")
                    .attr(""stroke"", ""steelblue"")
                    .attr(""stroke-width"", 2)
                    .attr(""d"", line);
                
                // Animate the path
                const pathLength = path.node().getTotalLength();
                path.attr(""stroke-dasharray"", pathLength)
                    .attr(""stroke-dashoffset"", pathLength);
                
                svg.selectAll(""circle"")
                    .attr(""opacity"", 0);
                
                svg.transition()
                    .duration(2000)
                    .tween(""path"", () => {
                        const i = d3.interpolate(pathLength, 0);
                        return t => {
                            path.attr(""stroke-dashoffset"", i(t));
                            const year = wheatData[Math.floor((1 - t) * wheatData.length)][""Year""];
                            const unitsProduced = wheatData[Math.floor((1 - t) * wheatData.length)][""Units Produced""];
                            svg.selectAll(""circle"")
                                .filter(d => d[""Year""] <= year)
                                .attr(""opacity"", 1);
                        };
                    });
            })
            .catch(error => console.error(error));
    </script>
</body>
</html>
```",Unexpected Initial Result,5,6
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Units Produced of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Multi-Series Line Chart</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .line {
            fill: none;
            stroke-width: 2;
        }
        
        .highlight {
            stroke-width: 4;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 40 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;
        
        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);
        
        const xScale = d3.scalePoint()
            .range([0, width]);
        
        const yScale = d3.scaleLinear()
            .range([height, 0]);
        
        const line = d3.line()
            .x(d => xScale(d.Year))
            .y(d => yScale(d[""Units Produced""]));
        
        let cropTypes;
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"")
            .then(data => {
                data.forEach(d => {
                    d.Year = +d.Year;
                    d[""Units Produced""] = +d[""Units Produced""];
                });
                
                cropTypes = Array.from(new Set(data.map(d => d[""Crop Type""])));
                
                xScale.domain(Array.from(new Set(data.map(d => d.Year))));
                yScale.domain([0, d3.max(data, d => d[""Units Produced""])]);
                
                const lines = svg.selectAll("".line"")
                    .data(cropTypes)
                    .enter()
                    .append(""path"")
                    .attr(""class"", ""line"")
                    .attr(""stroke"", (d, i) => d3.schemeCategory10[i])
                    .datum(d => data.filter(e => e[""Crop Type""] === d))
                    .attr(""d"", line);
                
                lines.on(""mouseover"", function(event, d) {
                    d3.select(this)
                        .classed(""highlight"", true);
                })
                .on(""mouseout"", function(event, d) {
                    d3.select(this)
                        .classed(""highlight"", false);
                });
                
                const xAxis = d3.axisBottom(xScale);
                svg.append(""g"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(xAxis);
                
                const yAxis = d3.axisLeft(yScale);
                svg.append(""g"")
                    .call(yAxis);
            });
    </script>
</body>
</html>
```",Correct,6,7
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Bar Chart that visualizes the Units Produced for each Crop Type in 2020. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Agricultural Production Bar Chart</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .bar-chart {
            width: 800px;
            height: 600px;
            margin: 50px auto;
        }
    </style>
</head>
<body>
    <div class=""bar-chart"" id=""bar-chart""></div>
    
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        // Load data
        d3.csv('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
        .then(data => {
            // Filter data for 2020
            const filteredData = data.filter(d => d['Year'] === '2020');
            
            // Convert data types
            filteredData.forEach(d => {
                d['Units Produced'] = +d['Units Produced'];
            });
            
            // Create bar chart
            const margin = { top: 20, right: 20, bottom: 30, left: 40 };
            const width = 800 - margin.left - margin.right;
            const height = 600 - margin.top - margin.bottom;
            
            const svg = d3.select('#bar-chart')
                .append('svg')
                .attr('width', width + margin.left + margin.right)
                .attr('height', height + margin.top + margin.bottom)
                .append('g')
                .attr('transform', `translate(${margin.left}, ${margin.top})`);
            
            const xScale = d3.scaleBand()
                .domain(filteredData.map(d => d['Crop Type']))
                .range([0, width])
                .padding(0.2);
            
            const yScale = d3.scaleLinear()
                .domain([0, d3.max(filteredData, d => d['Units Produced'])])
                .range([height, 0]);
            
            const xAxis = d3.axisBottom(xScale);
            const yAxis = d3.axisLeft(yScale);
            
            svg.append('g')
                .attr('transform', `translate(0, ${height})`)
                .call(xAxis);
            
            svg.append('g')
                .call(yAxis);
            
            const bars = svg.selectAll('rect')
                .data(filteredData)
                .enter()
                .append('rect')
                .attr('x', d => xScale(d['Crop Type']))
                .attr('y', d => yScale(d['Units Produced']))
                .attr('width', xScale.bandwidth())
                .attr('height', d => height - yScale(d['Units Produced']));
            
            // Add zoom and pan functionality
            const zoom = d3.zoom()
                .scaleExtent([1, 10])
                .on('zoom', (event) => {
                    svg.selectAll('rect')
                        .attr('transform', event.transform);
                    svg.selectAll('g')
                        .attr('transform', event.transform);
                });
            
            svg.call(zoom);
        })
        .catch(error => console.error(error));
    </script>
</body>
</html>
```",Correct,7,8
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Bar Chart that visualizes the Units Produced for each Crop Type in 2020. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Agricultural Production Bar Chart</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .bar {
            fill: steelblue;
        }
        
        .bar:hover {
            fill: brown;
        }
        
        .axis--x path {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 40 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

        const x = d3.scaleBand()
            .range([0, width])
            .padding(0.2);

        const y = d3.scaleLinear()
            .range([height, 0]);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"")
            .then(data => {
                const filteredData = data.filter(d => d.Year === ""2020"");

                x.domain(filteredData.map(d => d[""Crop Type""]));
                y.domain([0, d3.max(filteredData, d => +d[""Units Produced""])]);

                svg.append(""g"")
                    .attr(""class"", ""axis axis--x"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(d3.axisBottom(x));

                svg.append(""g"")
                    .attr(""class"", ""axis axis--y"")
                    .call(d3.axisLeft(y).ticks(10, ""%""));

                const bars = svg.selectAll("".bar"")
                    .data(filteredData)
                    .enter()
                    .append(""rect"")
                    .attr(""class"", ""bar"")
                    .attr(""x"", d => x(d[""Crop Type""]))
                    .attr(""y"", d => y(+d[""Units Produced""]))
                    .attr(""width"", x.bandwidth())
                    .attr(""height"", d => height - y(+d[""Units Produced""]));

                const drag = d3.drag()
                    .on(""start"", (event, d) => {
                        const rect = d3.select(event.sourceEvent.target);
                        rect.raise();
                    })
                    .on(""drag"", (event, d) => {
                        const rect = d3.select(event.sourceEvent.target);
                        rect.attr(""x"", event.x);
                    })
                    .on(""end"", (event, d) => {
                        const rect = d3.select(event.sourceEvent.target);
                        const newX = event.x;
                        const newXValue = x.invert(newX);
                        const filteredDataCopy = [...filteredData];
                        const index = filteredDataCopy.findIndex(e => e[""Crop Type""] === d[""Crop Type""]);
                        filteredDataCopy.splice(index, 1);
                        const newIndex = Math.floor(newX / x.step());
                        filteredDataCopy.splice(newIndex, 0, d);
                        x.domain(filteredDataCopy.map(d => d[""Crop Type""]));
                        svg.selectAll("".bar"")
                            .data(filteredDataCopy)
                            .transition()
                            .duration(500)
                            .attr(""x"", d => x(d[""Crop Type""]));
                        svg.select("".axis--x"")
                            .transition()
                            .duration(500)
                            .call(d3.axisBottom(x));
                    });

                bars.call(drag);
            });
    </script>
</body>
</html>
```",Execution Error,8,9
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Bar Chart that visualizes the Units Produced for each Crop Type in 2020. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Units Produced.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Agricultural Production Bar Chart</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .bar {
            fill: steelblue;
        }
        
        .bar:hover {
            fill: brown;
        }
        
        .axis--x path {
            display: none;
        }
        
        .select {
            position: absolute;
            top: 10px;
            left: 10px;
        }
    </style>
</head>
<body>
    <div class=""select"">
        <select id=""sort-select"">
            <option value=""asc"">Ascending</option>
            <option value=""desc"">Descending</option>
        </select>
    </div>
    <svg width=""800"" height=""600""></svg>
    
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 40 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;
        
        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);
        
        const xScale = d3.scaleBand()
            .range([0, width])
            .padding(0.2);
        
        const yScale = d3.scaleLinear()
            .range([height, 0]);
        
        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);
        
        svg.append(""g"")
            .attr(""class"", ""axis--x"")
            .attr(""transform"", `translate(0, ${height})`);
        
        svg.append(""g"")
            .attr(""class"", ""axis--y"");
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"")
            .then(data => {
                data.forEach(d => {
                    d[""Units Produced""] = +d[""Units Produced""];
                    d[""Year""] = +d[""Year""];
                });
                
                const filteredData = data.filter(d => d[""Year""] === 2020);
                
                xScale.domain(filteredData.map(d => d[""Crop Type""]));
                yScale.domain([0, d3.max(filteredData, d => d[""Units Produced""])]);
                
                svg.select("".axis--x"")
                    .call(xAxis);
                
                svg.select("".axis--y"")
                    .call(yAxis);
                
                const bars = svg.selectAll("".bar"")
                    .data(filteredData, d => d[""Crop Type""])
                    .enter()
                    .append(""rect"")
                    .attr(""class"", ""bar"")
                    .attr(""x"", d => xScale(d[""Crop Type""]))
                    .attr(""y"", d => yScale(d[""Units Produced""]))
                    .attr(""width"", xScale.bandwidth())
                    .attr(""height"", d => height - yScale(d[""Units Produced""]));
                
                d3.select(""#sort-select"")
                    .on(""change"", () => {
                        const sortOrder = d3.select(""#sort-select"").property(""value"");
                        const sortedData = filteredData.sort((a, b) => {
                            if (sortOrder === ""asc"") {
                                return a[""Units Produced""] - b[""Units Produced""];
                            } else {
                                return b[""Units Produced""] - a[""Units Produced""];
                            }
                        });
                        
                        xScale.domain(sortedData.map(d => d[""Crop Type""]));
                        
                        svg.select("".axis--x"")
                            .transition()
                            .duration(1000)
                            .call(xAxis);
                        
                        bars.data(sortedData, d => d[""Crop Type""])
                            .transition()
                            .duration(1000)
                            .attr(""x"", d => xScale(d[""Crop Type""]));
                    });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,9,10
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot that visualizes the relationship between Units Produced and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Agricultural Production Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""scatterplot"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const unitsProduced = rows.map(row => parseFloat(row[2]));
                const revenue = rows.map(row => parseFloat(row[3]));

                const chart = echarts.init(document.getElementById('scatterplot'));
                const option = {
                    title: {
                        text: 'Agricultural Production Scatterplot'
                    },
                    xAxis: {
                        name: 'Units Produced',
                        type: 'value',
                        axisLabel: {
                            formatter: '{value}'
                        }
                    },
                    yAxis: {
                        name: 'Revenue',
                        type: 'value',
                        axisLabel: {
                            formatter: '{value}'
                        }
                    },
                    tooltip: {
                        trigger: 'item',
                        axisPointer: {
                            type: 'cross'
                        },
                        formatter: (params) => {
                            return `Units Produced: ${params.data[0]}<br>Revenue: ${params.data[1]}`;
                        }
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: unitsProduced.map((value, index) => [value, revenue[index]]),
                            emphasis: {
                                itemStyle: {
                                    borderColor: '#333',
                                    borderWidth: 2
                                }
                            }
                        }
                    ]
                };

                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,10,11
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot that visualizes the relationship between Units Produced and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Agricultural Production Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""scatterplot"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const unitsProduced = rows.map(row => parseFloat(row[2]));
                const revenue = rows.map(row => parseFloat(row[3]));

                const chartDom = document.getElementById('scatterplot');
                const myChart = echarts.init(chartDom);
                let option;

                option = {
                    title: {
                        text: 'Agricultural Production Scatterplot'
                    },
                    xAxis: {
                        name: 'Units Produced',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Revenue',
                        type: 'value'
                    },
                    brush: {
                        toolbox: ['rect', 'polygon', 'lineX', 'lineY', 'keep', 'clear'],
                        xAxisIndex: 0,
                        yAxisIndex: 0
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: unitsProduced.map((value, index) => [value, revenue[index]]),
                            brush: {
                                itemStyle: {
                                    borderColor: 'rgba(0,0,0,0.5)',
                                    borderWidth: 1,
                                    opacity: 0.7
                                }
                            }
                        }
                    ]
                };

                myChart.setOption(option);

                myChart.on('brushSelected', params => {
                    const selectedData = params.batch[0].selected[0].data;
                    console.log(selectedData);
                });
            });
    </script>
</body>
</html>
```",Correct,11,12
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot that visualizes the relationship between Units Produced and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Agricultural Production Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""scatterplot"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const unitsProduced = rows.map(row => parseFloat(row[2]));
                const revenue = rows.map(row => parseFloat(row[3]));

                const chart = echarts.init(document.getElementById('scatterplot'));
                const option = {
                    title: {
                        text: 'Agricultural Production Scatterplot'
                    },
                    xAxis: {
                        name: 'Units Produced',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Revenue',
                        type: 'value'
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: unitsProduced.map((value, index) => [value, revenue[index]])
                        }
                    ],
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 100
                        }
                    ]
                };

                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,12,13
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Units Produced and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Agricultural Production Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""scatterplot"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const unitsProduced = rows.map(row => +row[2]);
                const revenue = rows.map(row => +row[3]);
                const years = rows.map(row => row[0]);
                const cropTypes = rows.map(row => row[1]);

                const chart = echarts.init(document.getElementById('scatterplot'));
                const option = {
                    title: {
                        text: 'Agricultural Production Scatterplot'
                    },
                    xAxis: {
                        name: 'Units Produced'
                    },
                    yAxis: {
                        name: 'Revenue'
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: unitsProduced.map((value, index) => [value, revenue[index]]),
                            itemStyle: {
                                opacity: 0.8
                            },
                            emphasis: {
                                itemStyle: {
                                    opacity: 1
                                }
                            },
                            tooltip: {
                                trigger: 'item',
                                formatter: (params) => {
                                    return `Year: ${years[params.dataIndex]}<br>Crop Type: ${cropTypes[params.dataIndex]}<br>Units Produced: ${params.value[0]}<br>Revenue: ${params.value[1]}`;
                                }
                            }
                        }
                    ]
                };

                chart.setOption(option);

                chart.on('click', (params) => {
                    const url = `https://www.google.com/search?q=${years[params.dataIndex]}+${cropTypes[params.dataIndex]}+agricultural+production`;
                    window.open(url, '_blank');
                });
            });
    </script>
</body>
</html>
```",Correct,13,14
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot with query widgets showing the Units Produced and Revenue of the given dataset. Add a slider to represent the Year.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Agricultural Production Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
    <style>
        #chart {
            width: 800px;
            height: 600px;
        }
    </style>
</head>
<body>
    <div id=""chart""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const years = Array.from(new Set(rows.map(row => row[0]))).map(year => parseInt(year));
                const minYear = Math.min(...years);
                const maxYear = Math.max(...years);

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    title: {
                        text: 'Agricultural Production Scatterplot'
                    },
                    xAxis: {
                        name: 'Units Produced',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Revenue',
                        type: 'value'
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: rows.filter(row => parseInt(row[0]) === minYear).map(row => [parseFloat(row[2]), parseFloat(row[3])])
                        }
                    ],
                    graphic: {
                        elements: [
                            {
                                type: 'slider',
                                id: 'year-slider',
                                left: 'center',
                                top: 'bottom',
                                z: 3,
                                style: {
                                    fill: '#ccc',
                                    stroke: '#666'
                                },
                                layout: 'horizontal',
                                shape: {
                                    r: 10,
                                    points: [
                                        [0, 0.5],
                                        [1, 0.5]
                                    ]
                                },
                                data: [
                                    {
                                        value: minYear,
                                        label: {
                                            formatter: '{value}'
                                        }
                                    }
                                ],
                                min: minYear,
                                max: maxYear,
                                step: 1,
                                onChange: (value) => {
                                    const filteredData = rows.filter(row => parseInt(row[0]) === value).map(row => [parseFloat(row[2]), parseFloat(row[3])]);
                                    chart.setOption({
                                        series: [
                                            {
                                                type: 'scatter',
                                                data: filteredData
                                            }
                                        ]
                                    });
                                }
                            }
                        ]
                    }
                };

                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Initialization Error,14,15
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot showing the Units Produced of Wheat. Add animated transitions that connect these points using lines in order.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Agricultural Production Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const wheatData = rows.filter(row => row[1] === 'Wheat')
                    .map(row => [parseInt(row[0]), parseInt(row[2])])
                    .sort((a, b) => a[0] - b[0]);

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    title: {
                        text: 'Units Produced of Wheat Over Time'
                    },
                    xAxis: {
                        type: 'category',
                        name: 'Year'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Units Produced'
                    },
                    series: [{
                        type: 'scatter',
                        data: wheatData,
                        animation: true,
                        animationDuration: 1000,
                        animationEasing: 'linear',
                        animationDelay: function (idx) {
                            return idx * 100;
                        },
                        lineStyle: {
                            type: 'dashed'
                        }
                    }]
                };

                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,15,16
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Units Produced of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Agricultural Production Line Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1).map(row => row.split(','));
            const years = Array.from(new Set(rows.map(row => row[0]))).sort();
            const cropTypes = Array.from(new Set(rows.map(row => row[1])));
            const series = cropTypes.map(cropType => {
                const unitsProduced = years.map(year => {
                    const row = rows.find(row => row[0] === year && row[1] === cropType);
                    return row ? parseFloat(row[2]) : 0;
                });
                return {
                    name: cropType,
                    type: 'line',
                    data: unitsProduced,
                    emphasis: {
                        focus: 'series'
                    }
                };
            });
            const chart = echarts.init(document.getElementById('chart'));
            chart.setOption({
                title: {
                    text: 'Agricultural Production Line Chart'
                },
                legend: {
                    data: cropTypes
                },
                xAxis: {
                    type: 'category',
                    data: years
                },
                yAxis: {
                    type: 'value'
                },
                series: series
            });
        });
    </script>
</body>
</html>
```",Correct,16,17
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Bar Chart that visualizes the Units Produced for each Crop Type in 2020. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,interactive view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Agricultural Production</title>
  <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
  <div id=""chart"" style=""width: 800px; height: 600px;""></div>

  <script type=""text/javascript"">
    fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
      .then(response => response.text())
      .then(data => {
        const rows = data.split('\n').slice(1).map(row => row.split(','));
        const chartData = rows.filter(row => row[0] === '2020').map(row => ({ name: row[1], value: parseInt(row[2]) }));

        var chartDom = document.getElementById('chart');
        var myChart = echarts.init(chartDom);
        var option;

option = {
          xAxis: {
            type: 'category',
            data: chartData.map(item => item.name)
          },
          yAxis: {},
          series: [
            {
              type: 'bar',
              data: chartData.map(item => item.value)
            }
          ]
};

option && myChart.setOption(option);

myChart.on('mousewheel', function (params) {
if (params.batch) return;
const zoomSize = params.delta > 0 ? -10 : +10;
const zoomOption = {xAxis:{axisLabel:{fontSize:params.fontSize+zoomSize}}};
myChart.setOption(zoomOption);
});

myChart.on('mousedown', function (params) {

if(params.event.button==2){
const panX=params.event.offsetX-myChart.getWidth()/2;
const panY=params.event.offsetY-myChart.getHeight()/2;
const panDeltaX=panX>0?+10:-10;
const panDeltaY=panY>0?+10:-10;

var option={xAxis:{axisLabel:{rotate:+panDeltaX}},yAxis:{axisLabel:{rotate:+panDeltaY}}};
myChart.setOption(option);
}
});
});
</script>

</body>

</html>",Unexpected Initial Result,17,18
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Bar Chart that visualizes the Units Produced for each Crop Type in 2020. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,interactive view,"<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Agricultural Production Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
  <div id=""chart"" style=""width: 800px; height: 600px;""></div>

<script>

fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
.then(response => response.text())
.then(data => {
    const rows = data.split('\n').slice(1);
    const filteredData = rows.filter(row => row.split(',')[0] === '2020');
    const cropTypes = filteredData.map(row => row.split(',')[1]);
    const unitsProduced = filteredData.map(row => +row.split(',')[2]);

const chartDom = document.getElementById('chart');
const myChart = echarts.init(chartDom);
const option = {
tooltip: {
trigger: 'axis',
axisPointer: {type: 'shadow'}
},
legend: {},
grid:{left:'3%',right:'4%',bottom:'3%',containLabel:true},
xAxis:[
{
type:'category',
data:['Crop Type'],
axisTick:{alignWithLabel:true}
}
],
yAxis:[
{
type : 'value'
}
],
series:[
{
name:'',
type:'bar',
barWidth : '60%',
data:[]
}
]
};

option.xAxis[0].data=cropTypes;
option.series[0].data=unitsProduced;

myChart.setOption(option);

myChart.on('mousedown', function (params) {
if (params.componentType === 'series') {
const seriesIndex=params.seriesIndex;
const dataIndex=params.dataIndex;
if(seriesIndex==0){
cropTypes.splice(dataIndex,1);
unitsProduced.splice(dataIndex,1);
cropTypes.unshift(params.name)
unitsProduced.unshift(params.value)
option.xAxis[0].data=cropTypes;
option.series[seriesIndex].data=unitsProduced
myChart.setOption(option);

}

}

});

});

</script>

</body>

</html>",Correct,18,19
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Bar Chart that visualizes the Units Produced for each Crop Type in 2020. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Units Produced.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Agricultural Production Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <select id=""sort-select"">
        <option value=""asc"">Ascending</option>
        <option value=""desc"">Descending</option>
    </select>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const chartData = rows.filter(row => row[0] === '2020')
                    .map(row => ({ name: row[1], value: parseInt(row[2]) }));

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    title: {
                        text: 'Units Produced for each Crop Type in 2020'
                    },
                    xAxis: {
                        type: 'category',
                        data: chartData.map(data => data.name)
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            type: 'bar',
                            data: chartData.map(data => data.value),
                            animationDuration: 1000
                        }
                    ]
                };

                chart.setOption(option);

                document.getElementById('sort-select').addEventListener('change', () => {
                    const sortValue = document.getElementById('sort-select').value;
                    chartData.sort((a, b) => sortValue === 'asc' ? a.value - b.value : b.value - a.value);
                    chart.setOption({
                        xAxis: {
                            data: chartData.map(data => data.name)
                        },
                        series: [
                            {
                                data: chartData.map(data => data.value)
                            }
                        ]
                    });
                });
            });
    </script>
</body>
</html>
```",Correct,19,20
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot that visualizes the relationship between Units Produced and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.22.1""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.6.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv""
      },
      ""mark"": {
        ""type"": ""point"",
        ""tooltip"": true
      },
      ""encoding"": {
        ""x"": {
          ""field"": ""Units Produced"",
          ""type"": ""quantitative"",
          ""axis"": {
            ""labelOverlap"": ""parity""
          }
        },
        ""y"": {
          ""field"": ""Revenue"",
          ""type"": ""quantitative"",
          ""axis"": {
            ""labelOverlap"": ""parity""
          }
        }
      },
      ""config"": {
        ""axis"": {
          ""grid"": false
        }
      }
    };

    vegaEmbed('#vis', spec);
  </script>
</body>
</html>
```",Unexpected Execution Result,20,21
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot that visualizes the relationship between Units Produced and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Scatterplot with Brushing</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.22.1""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.6.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv""
      },
      ""mark"": {
        ""type"": ""point"",
        ""tooltip"": true
      },
      ""encoding"": {
        ""x"": {
          ""field"": ""Units Produced"",
          ""type"": ""quantitative""
        },
        ""y"": {
          ""field"": ""Revenue"",
          ""type"": ""quantitative""
        }
      },
      ""selection"": {
        ""brush"": {
          ""type"": ""interval"",
          ""encodings"": [""x""]
        }
      }
    };

    const opt = {
      ""actions"": false
    };

    vegaEmbed(""#vis"", spec, opt);
  </script>
</body>
</html>
```",Correct,21,22
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot that visualizes the relationship between Units Produced and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,interactive view,"<!DOCTYPE html>
<html>
<head>
  <title>Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@4""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>

<body>

<div id=""vis""></div>

<script type=""text/javascript"">
    var yourVlSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v4.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv""
      },
      ""mark"": {""type"": ""point"", ""tooltip"": true},
      encoding: {
        x: {field: 'Units Produced', type: 'quantitative'},
        y: {field: 'Revenue', type: 'quantitative'}
      },
       width:{step:30},
       height:{step:30}
    };
    vegaEmbed('#vis', yourVlSpec);
</script>

</body></html>",Unexpected Execution Result,22,23
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Units Produced and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Agricultural Production Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.22.1""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.6.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv""
      },
      ""mark"": {
        ""type"": ""point"",
        ""tooltip"": true
      },
      ""encoding"": {
        ""x"": {
          ""field"": ""Units Produced"",
          ""type"": ""quantitative""
        },
        ""y"": {
          ""field"": ""Revenue"",
          ""type"": ""quantitative""
        }
      },
      ""selection"": {
        ""select"": {
          ""type"": ""single"",
          ""on"": ""click"",
          ""encodings"": [""x"", ""y""],
          ""empty"": ""none""
        }
      },
      ""layer"": [
        {
          ""mark"": {
            ""type"": ""point""
          }
        },
        {
          ""mark"": {
            ""type"": ""point"",
            ""size"": 100,
            ""opacity"": 0
          },
          ""selection"": {
            ""select"": {
              ""type"": ""single"",
              ""on"": ""click"",
              ""encodings"": [""x"", ""y""],
              ""empty"": ""none""
            }
          }
        }
      ]
    };

    const opt = {
      ""actions"": false,
      ""renderer"": ""canvas""
    };

    function openGoogleSearch(event, item) {
      if (item && item.datum) {
        const url = `https://www.google.com/search?q=${item.datum[""Crop Type""]}`;
        window.open(url, ""_blank"");
      }
    }

    vegaEmbed(""#vis"", spec, opt).then(result => {
      const view = result.view;
      view.addEventListener(""click"", (event, item) => openGoogleSearch(event, item));
    }).catch(console.error);
  </script>
</body>
</html>
```",Correct,23,24
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot with query widgets showing the Units Produced and Revenue of the given dataset. Add a slider to represent the Year.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Scatterplot with Query Widgets</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.22.1""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.6.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv""
      },
      ""width"": 600,
      ""height"": 400,
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {
          ""field"": ""Units Produced"",
          ""type"": ""quantitative""
        },
        ""y"": {
          ""field"": ""Revenue"",
          ""type"": ""quantitative""
        },
        ""color"": {
          ""field"": ""Crop Type"",
          ""type"": ""nominal""
        }
      },
      ""selection"": {
        ""Year"": {
          ""type"": ""single"",
          ""fields"": [""Year""],
          ""bind"": {
            ""input"": ""range"",
            ""min"": 2000,
            ""max"": 2025,
            ""step"": 1
          }
        }
      },
      ""transform"": [
        {
          ""filter"": {
            ""selection"": ""Year""
          }
        }
      ]
    };

    vegaEmbed('#vis', spec);
  </script>
</body>
</html>
```",Execution Error,24,25
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot showing the Units Produced of Wheat. Add animated transitions that connect these points using lines in order.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,interactive view,"<!DOCTYPE html>
<html>
<head>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@4""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>

<body>

<div id=""vis""></div>

<script type=""text/javascript"">
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v4.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv""
      },
      ""transform"": [
        {""filter"": {""field"": ""Crop Type"", ""oneOf"": [""Wheat""]}}
      ],
      ""mark"": {
        ""type"":""line"",
        point: true
    },
    encoding: {
          x: {field:""Year"", type:""temporal""},
          y: {field:""Units Produced"", type:""quantitative""}
       }
     };

   vegaEmbed('#vis', spec).then(function(result) {}).catch(console.error);
</script>

</body> 
</html>",Unexpected Initial Result,25,26
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Units Produced of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Units Produced Line Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.22.1""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.6.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv""
      },
      ""mark"": {
        ""type"": ""line"",
        ""point"": true
      },
      ""encoding"": {
        ""x"": {
          ""field"": ""Year"",
          ""type"": ""temporal""
        },
        ""y"": {
          ""field"": ""Units Produced"",
          ""type"": ""quantitative""
        },
        ""color"": {
          ""field"": ""Crop Type"",
          ""type"": ""nominal""
        }
      },
      ""selection"": {
        ""hover"": {
          ""type"": ""single"",
          ""on"": ""mouseover"",
          ""empty"": ""none"",
          ""fields"": [""Crop Type""]
        }
      },
      ""config"": {
        ""mark"": {
          ""invalid"": null
        }
      }
    };

    const opt = {
      ""renderer"": ""canvas"",
      ""actions"": false
    };

    vegaEmbed(""#vis"", spec, opt);
  </script>
</body>
</html>
```",Unexpected Initial Result,26,27
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Bar Chart that visualizes the Units Produced for each Crop Type in 2020. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,interactive view,"<!DOCTYPE html>
<html>
<head>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@4""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>

<body>

<div id=""vis""></div>

<script>

const spec = {
  ""$schema"": ""https://vega.github.io/schema/vega-lite/v4.json"",
  ""data"": {
    ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv""
  },
  
""transform"": [
    {""filter"": ""(datum.Year == '2020')""}
],
  
""mark"": {""type"":""bar"", ""tooltip"": true},
""encoding"":{
""x"":{""field"":""Crop Type"",""type"":""nominal""},
""y"":{""field"":""Units Produced"",""type"":""quantitative""}
},
};

const opt = {renderer: 'canvas'};

function handler(event) {
if (event.deltaY > 0) {
view.scale({domain: [0,100]});
} else if (event.deltaY < 0) {
view.scale({domain: [0,10]});
}
}

document.addEventListener('wheel', handler);

function handler2(event){
if (event.buttons ===1){
view.translate([event.movementX,event.movementY]);
}
}

document.addEventListener('mousemove',handler2);

const view = vegaEmbed('#vis', spec,opt);
</script>

</body> 
</html>",Execution Error,27,28
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Bar Chart that visualizes the Units Produced for each Crop Type in 2020. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,interactive view,"<!DOCTYPE html>
<html>
<head>
  <title>Bar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@4""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>

<body>

<div id=""vis""></div>

<script type=""text/javascript"">
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v4.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv""
      },
      ""transform"": [
        {""filter"": {""field"": ""Year"", ""equal"": {""value"": 2020}}}
      ],
      ""mark"": {
        ""type"":""bar"",
        tooltip: true
       },
       encoding: {
         x: {field: 'Crop Type', sort:""-y""},
         y: {field:'Units Produced', type:""quantitative""}
       }
    };

    vegaEmbed('#vis', spec).then(function(result) {

}).catch(console.error);
</script>

</body></html>",Initialization Error,28,29
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Bar Chart that visualizes the Units Produced for each Crop Type in 2020. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Units Produced.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,interactive view,"<!DOCTYPE html>
<html>
<head>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@4""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>

<body>

<div id=""vis""></div>

<script type=""text/javascript"">
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v4.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv""
      },
      ""transform"": [
        {""filter"": {""field"": ""Year"", ""equal"": {""value"": 2020}}},
        {""sortby"" : [{""field"" : [""Units Produced""],""order"" : [""descending""]}]},
        ],
       mark: 'bar',
       encoding: {
         x: {field: 'Crop Type', title:""Crop Type""},
         y: {field:'Units Produced', title:""Units Produced""},
         tooltip:[
           { field:'Crop Type' ,title:""Crop Type""},
           { field:'Units Produced' ,title:""Units Produced""}
          ]
       }
     };

    vegaEmbed('#vis', spec);
</script>

</body> 
</html>",Initialization Error,29,30
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Agricultural Production Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: inline-block;
      vertical-align: top;
    }
    .scatterplot {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
    .barchart {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart"">
    <svg class=""scatterplot""></svg>
  </div>
  <div class=""chart"">
    <svg class=""barchart""></svg>
  </div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svgScatterplot = d3.select("".scatterplot"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const svgBarchart = d3.select("".barchart"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
      data.forEach(d => {
        d[""Year""] = +d[""Year""];
        d[""Units Produced""] = +d[""Units Produced""];
        d[""Revenue""] = +d[""Revenue""];
        d[""Production Cost""] = +d[""Production Cost""];
        d[""Profit""] = +d[""Profit""];
        d[""Yield""] = +d[""Yield""];
        d[""Number of Farms""] = +d[""Number of Farms""];
        d[""Export Volume""] = +d[""Export Volume""];
      });

      // Scatterplot
      const xScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Units Produced""])])
        .range([0, width]);

      const yScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Revenue""])])
        .range([height, 0]);

      svgScatterplot.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScaleScatterplot(d[""Units Produced""]))
        .attr(""cy"", d => yScaleScatterplot(d[""Revenue""]))
        .attr(""r"", 5)
        .attr(""fill"", ""blue"");

      svgScatterplot.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleScatterplot));

      svgScatterplot.append(""g"")
        .call(d3.axisLeft(yScaleScatterplot));

      // Barchart
      const xScaleBarchart = d3.scaleBand()
        .domain(data.map(d => d[""Crop Type""]))
        .range([0, width])
        .padding(0.2);

      const yScaleBarchart = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Profit""])])
        .range([height, 0]);

      svgBarchart.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", d => xScaleBarchart(d[""Crop Type""]))
        .attr(""y"", d => yScaleBarchart(d[""Profit""]))
        .attr(""width"", xScaleBarchart.bandwidth())
        .attr(""height"", d => height - yScaleBarchart(d[""Profit""]))
        .attr(""fill"", ""blue"");

      svgBarchart.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleBarchart));

      svgBarchart.append(""g"")
        .call(d3.axisLeft(yScaleBarchart));
    });
  </script>
</body>
</html>
```",Correct,30,31
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Agricultural Production Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: inline-block;
      vertical-align: top;
    }
    .scatterplot {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
    .barchart {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart scatterplot"" id=""scatterplot""></div>
  <div class=""chart barchart"" id=""barchart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svgScatterplot = d3.select(""#scatterplot"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const svgBarchart = d3.select(""#barchart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    let data = [];
    let brush = d3.brush()
      .extent([[0, 0], [width, height]])
      .on(""brush end"", brushed);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(csv => {
      data = csv.map(d => ({
        Year: +d[""Year""],
        [""Crop Type""]: d[""Crop Type""],
        [""Units Produced""]: +d[""Units Produced""],
        Revenue: +d[""Revenue""],
        [""Production Cost""]: +d[""Production Cost""],
        Profit: +d[""Profit""],
        Yield: +d[""Yield""],
        [""Number of Farms""]: +d[""Number of Farms""],
        [""Export Volume""]: +d[""Export Volume""]
      }));

      const xScaleScatterplot = d3.scaleLinear()
        .domain(d3.extent(data, d => d[""Units Produced""]))
        .range([0, width]);

      const yScaleScatterplot = d3.scaleLinear()
        .domain(d3.extent(data, d => d[""Revenue""]))
        .range([height, 0]);

      const xScaleBarchart = d3.scaleBand()
        .domain(data.map(d => d[""Crop Type""]))
        .range([0, width])
        .padding(0.2);

      const yScaleBarchart = d3.scaleLinear()
        .domain(d3.extent(data, d => d[""Units Produced""]))
        .range([height, 0]);

      svgScatterplot.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScaleScatterplot(d[""Units Produced""]))
        .attr(""cy"", d => yScaleScatterplot(d[""Revenue""]))
        .attr(""r"", 5)
        .attr(""fill"", ""steelblue"");

      svgScatterplot.selectAll(""rect"")
        .data([null])
        .enter()
        .append(""rect"")
        .attr(""x"", 0)
        .attr(""y"", 0)
        .attr(""width"", width)
        .attr(""height"", height)
        .attr(""fill"", ""none"")
        .attr(""pointer-events"", ""all"")
        .call(brush);

      svgBarchart.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", d => xScaleBarchart(d[""Crop Type""]))
        .attr(""y"", d => yScaleBarchart(d[""Units Produced""]))
        .attr(""width"", xScaleBarchart.bandwidth())
        .attr(""height"", d => height - yScaleBarchart(d[""Units Produced""]))
        .attr(""fill"", ""steelblue"");

      function brushed() {
        const selection = d3.event.selection;
        if (selection) {
          const minX = xScaleScatterplot.invert(selection[0][0]);
          const maxX = xScaleScatterplot.invert(selection[1][0]);
          const minY = yScaleScatterplot.invert(selection[1][1]);
          const maxY = yScaleScatterplot.invert(selection[0][1]);

          svgScatterplot.selectAll(""circle"")
            .classed(""selected"", d => d[""Units Produced""] >= minX && d[""Units Produced""] <= maxX && d[""Revenue""] >= minY && d[""Revenue""] <= maxY);

          svgBarchart.selectAll(""rect"")
            .classed(""selected"", d => d[""Units Produced""] >= minX && d[""Units Produced""] <= maxX && d[""Revenue""] >= minY && d[""Revenue""] <= maxY);
        } else {
          svgScatterplot.selectAll(""circle"")
            .classed(""selected"", false);

          svgBarchart.selectAll(""rect"")
            .classed(""selected"", false);
        }
      }
    });

    d3.selection.prototype.classedAll = function(className) {
      return this.classed(className, true);
    };
  </script>
</body>
</html>
```",Initialization Error,31,32
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Produced , while the pie chart represents the distribution of Revenue.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Agricultural Production Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: block;
      margin: 20px auto;
    }
  </style>
</head>
<body>
  <div id=""line-chart"" class=""chart""></div>
  <div id=""pie-chart"" class=""chart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const lineChart = d3.select(""#line-chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const pieChart = d3.select(""#pie-chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left + width / 2}, ${margin.top + height / 2})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
      data.forEach(d => {
        d[""Year""] = +d[""Year""];
        d[""Units Produced""] = +d[""Units Produced""];
        d[""Revenue""] = +d[""Revenue""];
      });

      const xScale = d3.scaleLinear()
        .domain(d3.extent(data, d => d[""Year""]))
        .range([0, width]);

      const yScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Units Produced""])])
        .range([height, 0]);

      lineChart.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

      lineChart.append(""g"")
        .call(d3.axisLeft(yScale));

      lineChart.append(""path"")
        .datum(data)
        .attr(""fill"", ""none"")
        .attr(""stroke"", ""steelblue"")
        .attr(""stroke-width"", 1.5)
        .attr(""d"", d3.line()
          .x(d => xScale(d[""Year""]))
          .y(d => yScale(d[""Units Produced""])));

      const pie = d3.pie()
        .value(d => d[""Revenue""]);

      const arc = d3.arc()
        .outerRadius(width / 4)
        .innerRadius(0);

      const arcs = pieChart.selectAll(""arc"")
        .data(pie(data))
        .enter()
        .append(""path"")
        .attr(""fill"", (d, i) => d3.schemeCategory10[i])
        .attr(""d"", arc);

      pieChart.append(""text"")
        .attr(""text-anchor"", ""middle"")
        .attr(""font-size"", 16)
        .text(""Revenue Distribution"");
    });
  </script>
</body>
</html>
```",Correct,32,33
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Produced , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Agricultural Production Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: block;
    }
    .line-chart {
      width: 800px;
      height: 400px;
      margin: 50px auto;
    }
    .pie-chart {
      width: 800px;
      height: 400px;
      margin: 50px auto;
    }
  </style>
</head>
<body>
  <div class=""chart line-chart""></div>
  <div class=""chart pie-chart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const lineChart = d3.select('.line-chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    const pieChart = d3.select('.pie-chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left + width / 2}, ${margin.top + height / 2})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
      .then(data => {
        data.forEach(d => {
          d['Year'] = +d['Year'];
          d['Units Produced'] = +d['Units Produced'];
          d['Revenue'] = +d['Revenue'];
        });

        const xScale = d3.scaleLinear()
          .domain(d3.extent(data, d => d['Year']))
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Units Produced'])])
          .range([height, 0]);

        const line = d3.line()
          .x(d => xScale(d['Year']))
          .y(d => yScale(d['Units Produced']));

        lineChart.append('path')
          .datum(data)
          .attr('fill', 'none')
          .attr('stroke', 'steelblue')
          .attr('stroke-width', 1.5)
          .attr('d', line);

        lineChart.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        lineChart.append('g')
          .call(d3.axisLeft(yScale));

        const brush = d3.brushX()
          .extent([[0, 0], [width, height]])
          .on('brush end', brushed);

        lineChart.append('g')
          .attr('class', 'brush')
          .call(brush);

        function brushed() {
          const selection = d3.event.selection;
          if (selection) {
            const minX = xScale.invert(selection[0]);
            const maxX = xScale.invert(selection[1]);
            const filteredData = data.filter(d => d['Year'] >= minX && d['Year'] <= maxX);

            const pieData = d3.rollup(filteredData, v => d3.sum(v, d => d['Revenue']), d => d['Crop Type']);

            const pie = d3.pie()
              .value(d => d[1]);

            const arc = d3.arc()
              .outerRadius(Math.min(width, height) / 2 - 10)
              .innerRadius(0);

            pieChart.selectAll('path')
              .remove();

            pieChart.selectAll('path')
              .data(pie(pieData))
              .enter()
              .append('path')
              .attr('d', arc)
              .attr('fill', (d, i) => d3.schemeCategory10[i]);
          }
        }
      });
  </script>
</body>
</html>
```",Initialization Error,33,34
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Units Produced, Revenue, Profit, Production Cost, Yield, and Export Volume. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot Matrix</title>
  <style>
    .brush .extent {
      fill-opacity: .3;
      stroke: #fff;
    }
  </style>
</head>
<body>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 100, right: 100, bottom: 100, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 800 - margin.top - margin.bottom;
    const dimensions = [""Units Produced"", ""Revenue"", ""Profit"", ""Production Cost"", ""Yield"", ""Export Volume""];
    const size = 200;

    const svg = d3.select(""body"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
      data.forEach(d => {
        dimensions.forEach(dim => {
          d[dim] = +d[dim];
        });
      });

      const x = dimensions.map(dim => {
        return d3.scaleLinear()
          .domain(d3.extent(data, d => d[dim]))
          .range([0, size]);
      });

      const y = dimensions.map(dim => {
        return d3.scaleLinear()
          .domain(d3.extent(data, d => d[dim]))
          .range([size, 0]);
      });

      const brush = d3.brush()
        .extent([[0, 0], [size, size]])
        .on(""brush"", brushed)
        .on(""end"", brushended);

      const cell = svg.selectAll("".cell"")
        .data(cross(dimensions, dimensions))
        .enter().append(""g"")
        .attr(""class"", ""cell"")
        .attr(""transform"", d => `translate(${d.i * size}, ${d.j * size})`);

      cell.append(""rect"")
        .attr(""class"", ""frame"")
        .attr(""x"", 0)
        .attr(""y"", 0)
        .attr(""width"", size)
        .attr(""height"", size);

      cell.append(""g"")
        .attr(""class"", ""brush"")
        .each(function(d) {
          d3.select(this).call(brush);
        });

      cell.append(""g"")
        .attr(""class"", ""scatter"")
        .selectAll(""circle"")
        .data(data)
        .enter().append(""circle"")
        .attr(""cx"", d => x[dimensions.indexOf(d.x)](d[d.x]))
        .attr(""cy"", d => y[dimensions.indexOf(d.y)](d[d.y]))
        .attr(""r"", 3);

      function brushed() {
        const selection = d3.event.selection;
        if (selection) {
          const [[x0, y0], [x1, y1]] = selection;
          svg.selectAll("".scatter circle"")
            .classed(""selected"", d => {
              const i = dimensions.indexOf(d.x);
              const j = dimensions.indexOf(d.y);
              return x[i](d[d.x]) >= x0 && x[i](d[d.x]) <= x1 && y[j](d[d.y]) >= y0 && y[j](d[d.y]) <= y1;
            });
        } else {
          svg.selectAll("".scatter circle"").classed(""selected"", false);
        }
      }

      function brushended() {
        if (!d3.event.selection) {
          svg.selectAll("".scatter circle"").classed(""selected"", false);
        }
      }
    });

    function cross(a, b) {
      const c = [];
      for (let i = 0; i < a.length; i++) {
        for (let j = 0; j < b.length; j++) {
          c.push({ x: a[i], y: b[j], i, j });
        }
      }
      return c;
    }
  </script>
</body>
</html>
```",Initialization Error,34,35
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a brushable Scatterplot that visualizes the relationship between Units Produced and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Agricultural Production Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .brush {
      fill: #ccc;
    }
    .brush .extent {
      fill-opacity: .3;
      stroke: #fff;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <div id=""table""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 200, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Units Produced""] = +d[""Units Produced""];
          d.Revenue = +d.Revenue;
        });

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Units Produced""])])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Revenue)])
          .range([height, 0]);

        svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d[""Units Produced""]))
          .attr(""cy"", d => yScale(d.Revenue))
          .attr(""r"", 5);

        const brush = d3.brush()
          .extent([[0, 0], [width, height]])
          .on(""brush"", brushed);

        svg.append(""g"")
          .call(brush);

        function brushed({ selection }) {
          const selectedData = data.filter(d => {
            const x = xScale(d[""Units Produced""]);
            const y = yScale(d.Revenue);
            return x >= selection[0][0] && x <= selection[1][0] && y <= selection[0][1] && y >= selection[1][1];
          });

          const table = d3.select(""#table"");
          table.selectAll(""table"").remove();

          const tableHtml = table.append(""table"");
          const thead = tableHtml.append(""thead"");
          const tbody = tableHtml.append(""tbody"");

          const columns = Object.keys(data[0]);
          thead.selectAll(""th"")
            .data(columns)
            .enter()
            .append(""th"")
            .text(d => d);

          const rows = tbody.selectAll(""tr"")
            .data(selectedData.slice(0, 20))
            .enter()
            .append(""tr"");

          rows.selectAll(""td"")
            .data(d => columns.map(c => d[c]))
            .enter()
            .append(""td"")
            .text(d => d);
        }
      });
  </script>
</body>
</html>
```",Initialization Error,35,36
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a horizontal Bar Chart that shows Crop Type and Units Produced, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Agricultural Production</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      position: relative;
      display: inline-block;
    }
    .minimap {
      position: absolute;
      top: 0;
      right: 0;
      width: 100px;
      height: 300px;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 120, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 300 - margin.top - margin.bottom;
    const minimapWidth = 100;
    const minimapHeight = height;

    const svg = d3.select("".chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right + minimapWidth)
      .attr(""height"", height + margin.top + margin.bottom);

    const g = svg.append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const minimapG = svg.append(""g"")
      .attr(""transform"", `translate(${width + margin.left + 20}, ${margin.top})`)
      .attr(""class"", ""minimap"");

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
      data.forEach(d => {
        d[""Units Produced""] = +d[""Units Produced""];
      });

      const cropTypes = [...new Set(data.map(d => d[""Crop Type""]))];

      const x = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Units Produced""])])
        .range([0, width]);

      const y = d3.scaleBand()
        .domain(cropTypes)
        .range([0, height])
        .padding(0.2);

      const bars = g.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", 0)
        .attr(""y"", d => y(d[""Crop Type""]))
        .attr(""width"", d => x(d[""Units Produced""]))
        .attr(""height"", y.bandwidth());

      const minimapBars = minimapG.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", 0)
        .attr(""y"", d => y(d[""Crop Type""]))
        .attr(""width"", minimapWidth)
        .attr(""height"", y.bandwidth())
        .attr(""fill"", ""lightgray"");

      const xAxis = d3.axisBottom(x);
      g.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(xAxis);

      const yAxis = d3.axisLeft(y);
      g.append(""g"")
        .call(yAxis);
    });
  </script>
</body>
</html>
```",Initialization Error,36,37
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Agricultural Production Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
    <style>
        #chart-container {
            display: flex;
            width: 100%;
            height: 600px;
        }
        #scatterplot {
            width: 50%;
            height: 100%;
        }
        #barchart {
            width: 50%;
            height: 100%;
        }
    </style>
</head>
<body>
    <div id=""chart-container"">
        <div id=""scatterplot""></div>
        <div id=""barchart""></div>
    </div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const scatterplotData = [];
                const barchartData = [];
                csvData.forEach(row => {
                    const [Year, CropType, UnitsProduced, Revenue, ProductionCost, Profit, Yield, NumberOfFarms, ExportVolume] = row.split(',');
                    scatterplotData.push([parseFloat(UnitsProduced), parseFloat(Profit)]);
                    barchartData.push([CropType, parseFloat(Revenue)]);
                });
                const scatterplotChart = echarts.init(document.getElementById('scatterplot'));
                const barchartChart = echarts.init(document.getElementById('barchart'));
                scatterplotChart.setOption({
                    title: {
                        text: 'Units Produced vs Profit'
                    },
                    xAxis: {
                        type: 'value'
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        type: 'scatter',
                        data: scatterplotData
                    }]
                });
                barchartChart.setOption({
                    title: {
                        text: 'Revenue by Crop Type'
                    },
                    xAxis: {
                        type: 'category',
                        data: barchartData.map(item => item[0])
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        type: 'bar',
                        data: barchartData.map(item => item[1])
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,37,38
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Agricultural Production Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <style>
        #chart {
            display: flex;
            width: 100%;
            height: 600px;
        }
        #scatterplot {
            width: 50%;
            height: 100%;
        }
        #barchart {
            width: 50%;
            height: 100%;
        }
    </style>
</head>
<body>
    <div id=""chart"">
        <div id=""scatterplot""></div>
        <div id=""barchart""></div>
    </div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const years = csvData.map(row => row[0]);
                const unitsProduced = csvData.map(row => parseFloat(row[2]));
                const revenue = csvData.map(row => parseFloat(row[3]));
                const profit = csvData.map(row => parseFloat(row[5]));
                const yieldData = csvData.map(row => parseFloat(row[6]));

                const scatterplotChart = echarts.init(document.getElementById('scatterplot'));
                const barchartChart = echarts.init(document.getElementById('barchart'));

                const scatterplotOption = {
                    title: {
                        text: 'Scatterplot of Units Produced vs Revenue'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Units Produced'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Revenue'
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: unitsProduced.map((value, index) => [value, revenue[index]]),
                            emphasis: {
                                itemStyle: {
                                    shadowBlur: 10,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            }
                        }
                    ],
                    brush: {
                        id: 'brush',
                        seriesIndex: 'all',
                        brushLink: 'all',
                        toolbox: ['rect', 'polygon', 'lineX', 'lineY', 'keep', 'clear'],
                        inBrush: {
                            opacity: 1
                        },
                        outOfBrush: {
                            color: '#ccc'
                        },
                        throttleType: 'debounce',
                        throttleDelay: 300
                    }
                };

                const barchartOption = {
                    title: {
                        text: 'Bar Chart of Profit by Year'
                    },
                    xAxis: {
                        type: 'category',
                        data: years
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Profit'
                    },
                    series: [
                        {
                            type: 'bar',
                            data: profit
                        }
                    ],
                    brush: {
                        id: 'brush',
                        seriesIndex: 'all',
                        brushLink: 'all',
                        toolbox: ['rect', 'polygon', 'lineX', 'lineY', 'keep', 'clear'],
                        inBrush: {
                            opacity: 1
                        },
                        outOfBrush: {
                            color: '#ccc'
                        },
                        throttleType: 'debounce',
                        throttleDelay: 300
                    }
                };

                scatterplotChart.setOption(scatterplotOption);
                barchartChart.setOption(barchartOption);

                scatterplotChart.on('brushSelected', params => {
                    const selectedData = params.batch[0].areas[0].range;
                    const startIndex = years.indexOf(selectedData[0][0]);
                    const endIndex = years.indexOf(selectedData[0][1]);
                    const selectedProfit = profit.slice(startIndex, endIndex + 1);
                    const selectedYears = years.slice(startIndex, endIndex + 1);

                    barchartChart.setOption({
                        series: [
                            {
                                type: 'bar',
                                data: profit.map((value, index) => {
                                    if (selectedYears.includes(years[index])) {
                                        return value;
                                    } else {
                                        return NaN;
                                    }
                                })
                            }
                        ]
                    });
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,38,39
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Produced , while the pie chart represents the distribution of Revenue.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Agricultural Production Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const years = [];
                const unitsProduced = [];
                const revenue = [];
                const cropTypes = [];
                const revenueByCropType = {};

                csvData.forEach(row => {
                    const columns = row.split(',');
                    years.push(columns[0]);
                    unitsProduced.push(parseFloat(columns[2]));
                    revenue.push(parseFloat(columns[3]));
                    const cropType = columns[1];
                    cropTypes.push(cropType);
                    if (!revenueByCropType[cropType]) {
                        revenueByCropType[cropType] = 0;
                    }
                    revenueByCropType[cropType] += parseFloat(columns[3]);
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    grid: {
                        top: '10%',
                        bottom: '50%'
                    },
                    xAxis: {
                        type: 'category',
                        data: years
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            type: 'line',
                            data: unitsProduced
                        }
                    ],
                    tooltip: {
                        trigger: 'axis'
                    }
                });

                const pieChart = echarts.init(document.getElementById('chart'));
                pieChart.setOption({
                    grid: {
                        top: '60%',
                        bottom: '10%'
                    },
                    series: [
                        {
                            type: 'pie',
                            data: Object.keys(revenueByCropType).map(cropType => ({
                                name: cropType,
                                value: revenueByCropType[cropType]
                            })),
                            radius: '50%'
                        }
                    ],
                    tooltip: {
                        trigger: 'item'
                    }
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,39,40
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Produced , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Agricultural Production Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <style>
        #chart {
            width: 100%;
            height: 600px;
            display: flex;
            flex-direction: column;
        }
        #line-chart {
            width: 100%;
            height: 60%;
        }
        #pie-chart {
            width: 100%;
            height: 40%;
        }
    </style>
</head>
<body>
    <div id=""chart"">
        <div id=""line-chart""></div>
        <div id=""pie-chart""></div>
    </div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const years = csvData.map(row => row[0]);
                const unitsProduced = csvData.map(row => parseFloat(row[2]));
                const revenue = csvData.map(row => parseFloat(row[3]));

                const lineChart = echarts.init(document.getElementById('line-chart'));
                const pieChart = echarts.init(document.getElementById('pie-chart'));

                const lineOption = {
                    xAxis: {
                        type: 'category',
                        data: years
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            data: unitsProduced,
                            type: 'line'
                        }
                    ],
                    brush: {
                        id: 'line-brush',
                        xAxisIndex: 'all',
                        brushLink: 'pie-brush',
                        throttleType: 'debounce',
                        throttleDelay: 300
                    }
                };

                const pieOption = {
                    series: [
                        {
                            type: 'pie',
                            data: revenue.map((value, index) => ({ value, name: years[index] })),
                            emphasis: {
                                itemStyle: {
                                    shadowBlur: 10,
                                    shadowOffsetX: 0,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            }
                        }
                    ],
                    brush: {
                        id: 'pie-brush',
                        brushLink: 'line-brush',
                        throttleType: 'debounce',
                        throttleDelay: 300
                    }
                };

                lineChart.setOption(lineOption);
                pieChart.setOption(pieOption);

                lineChart.on('brushSelected', params => {
                    const selectedData = params.batch[0].areas[0].range;
                    const startIndex = years.indexOf(selectedData[0][0]);
                    const endIndex = years.indexOf(selectedData[0][1]);
                    const selectedRevenue = revenue.slice(startIndex, endIndex + 1);
                    const selectedYears = years.slice(startIndex, endIndex + 1);

                    pieChart.setOption({
                        series: [
                            {
                                data: selectedRevenue.map((value, index) => ({ value, name: selectedYears[index] }))
                            }
                        ]
                    });
                });
            });
    </script>
</body>
</html>
```",Execution Error,40,41
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Units Produced, Revenue, Profit, Production Cost, Yield, and Export Volume. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Agricultural Production Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-stat@1.2.0/dist/ecStat.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/d3@7.4.4/dist/d3.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 1000px; height: 800px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = d3.csvParse(data);
                const dimensions = ['Units Produced', 'Revenue', 'Profit', 'Production Cost', 'Yield', 'Export Volume'];
                const chartData = [];
                csvData.forEach(row => {
                    const item = {};
                    dimensions.forEach(dimension => {
                        item[dimension] = parseFloat(row[dimension]);
                    });
                    chartData.push(item);
                });

                const option = {
                    tooltip: {
                        formatter: params => {
                            const names = params.map(param => param.seriesName);
                            const values = params.map(param => param.value);
                            return `(${names.join(', ')})\n` + values.map((value, index) => `${names[index]}: ${value}`).join('\n');
                        }
                    },
                    brush: {
                        brushLink: 'all',
                        xAxisIndex: 'all',
                        yAxisIndex: 'all',
                        brushType: 'rect',
                        throttleType: 'debounce',
                        throttleDelay: 300
                    },
                    grid: dimensions.map((dimension, index) => ({
                        left: index % 3 * 33 + '%',
                        top: Math.floor(index / 3) * 33 + '%',
                        width: '30%',
                        height: '30%'
                    })),
                    xAxis: dimensions.map((dimension, index) => ({
                        gridIndex: index,
                        type: 'value',
                        name: dimension,
                        nameLocation: 'middle',
                        nameGap: 30,
                        axisLine: { onZero: false }
                    })),
                    yAxis: dimensions.map((dimension, index) => ({
                        gridIndex: index,
                        type: 'value',
                        name: dimension,
                        nameLocation: 'middle',
                        nameGap: 30,
                        axisLine: { onZero: false }
                    })),
                    series: dimensions.map((dimension, index) => ({
                        name: dimension,
                        type: 'scatter',
                        symbolSize: 5,
                        xAxisIndex: index,
                        yAxisIndex: index,
                        data: chartData.map(item => [item[dimension], item[dimension]])
                    })).concat(dimensions.map((dimension1, index1) => dimensions.slice(index1 + 1).map((dimension2, index2) => ({
                        name: `${dimension1}-${dimension2}`,
                        type: 'scatter',
                        symbolSize: 5,
                        xAxisIndex: index1,
                        yAxisIndex: index1 + index2 + 1,
                        data: chartData.map(item => [item[dimension1], item[dimension2]])
                    })).flat()))
                };

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Initialization Error,41,42
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a brushable Scatterplot that visualizes the relationship between Units Produced and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Agricultural Production Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
    <style>
        #chart {
            width: 800px;
            height: 600px;
            border: 1px solid #ccc;
            margin: 20px auto;
        }
        #table {
            width: 300px;
            height: 600px;
            border: 1px solid #ccc;
            margin: 20px auto;
            float: right;
        }
    </style>
</head>
<body>
    <div id=""chart""></div>
    <div id=""table""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const chartData = csvData.map(row => [+row[2], +row[3]]);
                const tableData = csvData.map(row => ({
                    Year: row[0],
                    'Crop Type': row[1],
                    'Units Produced': row[2],
                    Revenue: row[3],
                    'Production Cost': row[4],
                    Profit: row[5],
                    Yield: row[6],
                    'Number of Farms': row[7],
                    'Export Volume': row[8]
                }));

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Agricultural Production Scatterplot'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'cross'
                        }
                    },
                    toolbox: {
                        feature: {
                            dataZoom: {
                                yAxisIndex: 'none'
                            },
                            brush: {
                                type: ['rect', 'polygon', 'clear']
                            }
                        }
                    },
                    grid: {
                        left: '10%',
                        right: '15%',
                        bottom: '15%'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Units Produced',
                        nameLocation: 'middle',
                        nameGap: 30
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Revenue',
                        nameLocation: 'middle',
                        nameGap: 40
                    },
                    series: [
                        {
                            name: 'Scatterplot',
                            type: 'scatter',
                            data: chartData,
                            symbolSize: 10,
                            itemStyle: {
                                opacity: 0.8
                            }
                        }
                    ],
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 100
                        },
                        {
                            start: 0,
                            end: 100
                        }
                    ]
                });

                chart.on('brushSelected', params => {
                    const selectedData = params.batch[0].selected[0].data;
                    const tableHtml = selectedData.slice(0, 20).map((row, index) => {
                        return `
                            <tr>
                                <td>${tableData[row[1]].Year}</td>
                                <td>${tableData[row[1]]['Crop Type']}</td>
                                <td>${tableData[row[1]]['Units Produced']}</td>
                                <td>${tableData[row[1]].Revenue}</td>
                                <td>${tableData[row[1]]['Production Cost']}</td>
                                <td>${tableData[row[1]].Profit}</td>
                                <td>${tableData[row[1]].Yield}</td>
                                <td>${tableData[row[1]]['Number of Farms']}</td>
                                <td>${tableData[row[1]]['Export Volume']}</td>
                            </tr>
                        `;
                    }).join('');
                    document.getElementById('table').innerHTML = `
                        <table border=""1"">
                            <tr>
                                <th>Year</th>
                                <th>Crop Type</th>
                                <th>Units Produced</th>
                                <th>Revenue</th>
                                <th>Production Cost</th>
                                <th>Profit</th>
                                <th>Yield</th>
                                <th>Number of Farms</th>
                                <th>Export Volume</th>
                            </tr>
                            ${tableHtml}
                        </table>
                    `;
                });
            });
    </script>
</body>
</html>
```",Initialization Error,42,43
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a horizontal Bar Chart that shows Crop Type and Units Produced, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Agricultural Production Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 1000px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = csvData.map(row => {
                    const [Year, CropType, UnitsProduced, Revenue, ProductionCost, Profit, Yield, NumberOfFarms, ExportVolume] = row.split(',');
                    return { CropType, UnitsProduced: Number(UnitsProduced) };
                });

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    legend: {},
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'value',
                        boundaryGap: [0, 0.01]
                    },
                    yAxis: {
                        type: 'category',
                        data: chartData.map(item => item.CropType)
                    },
                    series: [
                        {
                            name: 'Units Produced',
                            type: 'bar',
                            data: chartData.map(item => item.UnitsProduced)
                        }
                    ],
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 10
                        },
                        {
                            show: true,
                            type: 'slider',
                            start: 0,
                            end: 10,
                            handleSize: 8,
                            height: 8,
                            bottom: 0,
                            left: 0,
                            right: 0,
                            borderColor: '#ccc',
                            backgroundColor: '#ccc',
                            fillerColor: '#ccc',
                            handleStyle: {
                                color: '#fff',
                                shadowBlur: 3,
                                shadowColor: 'rgba(0, 0, 0, 0.6)',
                                shadowOffsetX: 2,
                                shadowOffsetY: 2
                            },
                            textStyle: {
                                color: '#333'
                            },
                            dataBackground: {
                                lineStyle: {
                                    color: '#fff'
                                },
                                areaStyle: {
                                    color: '#fff'
                                }
                            },
                            fillerColor: 'rgba(255,255,255,0.65)',
                            borderColor: '#ddd'
                        }
                    ]
                };
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,43,44
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Agricultural Production Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: row;
    }
  </style>
</head>
<body>
  <div id=""vis"">
    <div id=""scatterplot""></div>
    <div id=""barchart""></div>
  </div>

  <script>
    const scatterplotSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Year"", ""type"": ""temporal""},
        ""y"": {""field"": ""Profit"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Crop Type"", ""type"": ""nominal""}
      }
    };

    const barchartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"" },
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Crop Type"", ""type"": ""nominal"", ""sort"": ""-y""},
        ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Crop Type"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#scatterplot"", scatterplotSpec);
    vegaEmbed(""#barchart"", barchartSpec);
  </script>
</body>
</html>
```",Correct,44,45
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Agricultural Production Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: row;
    }
    #scatterplot {
      width: 50%;
      height: 600px;
    }
    #barchart {
      width: 50%;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis"">
    <div id=""scatterplot""></div>
    <div id=""barchart""></div>
  </div>

  <script>
    const scatterplotSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Yield"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Profit"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Crop Type"", ""type"": ""nominal""},
        ""tooltip"": [
          {""field"": ""Year"", ""type"": ""temporal""},
          {""field"": ""Crop Type"", ""type"": ""nominal""},
          {""field"": ""Units Produced"", ""type"": ""quantitative""},
          {""field"": ""Revenue"", ""type"": ""quantitative""},
          {""field"": ""Production Cost"", ""type"": ""quantitative""},
          {""field"": ""Profit"", ""type"": ""quantitative""},
          {""field"": ""Yield"", ""type"": ""quantitative""},
          {""field"": ""Number of Farms"", ""type"": ""quantitative""},
          {""field"": ""Export Volume"", ""type"": ""quantitative""}
        ]
      },
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x"", ""y""]}
      }
    };

    const barchartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"" },
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Crop Type"", ""type"": ""nominal""},
        ""y"": {""field"": ""Profit"", ""type"": ""quantitative"", ""aggregate"": ""sum""},
        ""color"": {""field"": ""Crop Type"", ""type"": ""nominal""},
        ""tooltip"": [
          {""field"": ""Year"", ""type"": ""temporal""},
          {""field"": ""Crop Type"", ""type"": ""nominal""},
          {""field"": ""Units Produced"", ""type"": ""quantitative""},
          {""field"": ""Revenue"", ""type"": ""quantitative""},
          {""field"": ""Production Cost"", ""type"": ""quantitative""},
          {""field"": ""Profit"", ""type"": ""quantitative""},
          {""field"": ""Yield"", ""type"": ""quantitative""},
          {""field"": ""Number of Farms"", ""type"": ""quantitative""},
          {""field"": ""Export Volume"", ""type"": ""quantitative""}
        ]
      }
    };

    vegaEmbed(""#scatterplot"", scatterplotSpec, { ""actions"": false })
      .then(result => {
        const scatterplotView = result.view;
        vegaEmbed(""#barchart"", barchartSpec, { ""actions"": false })
          .then(result => {
            const barchartView = result.view;
            scatterplotView.addSignalListener(""brush"", (name, value) => {
              barchartView.signal(""brush"", value);
              barchartView.run();
            });
          });
      });
  </script>
</body>
</html>
```",Execution Error,45,46
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Produced , while the pie chart represents the distribution of Revenue.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Agricultural Production Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const lineChartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"" },
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {""field"": ""Year"", ""type"": ""temporal""},
        ""y"": {""field"": ""Units Produced"", ""type"": ""quantitative""}
      }
    };

    const pieChartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"" },
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Revenue"", ""type"": ""quantitative"", ""stack"": true},
        ""color"": {""field"": ""Crop Type"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", lineChartSpec, { ""actions"": false });
    vegaEmbed(""#vis"", pieChartSpec, { ""actions"": false });
  </script>
</body>
</html>
```",Initialization Error,46,47
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Produced , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Agricultural Production Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 800,
      ""height"": 600,
      ""padding"": 5,
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""vconcat"": [
        {
          ""mark"": ""line"",
          ""encoding"": {
            ""x"": {""field"": ""Year"", ""type"": ""temporal""},
            ""y"": {""field"": ""Units Produced"", ""type"": ""quantitative""},
            ""tooltip"": [
              {""field"": ""Year"", ""type"": ""temporal""},
              {""field"": ""Units Produced"", ""type"": ""quantitative""}
            ]
          },
          ""selection"": {
            ""brush"": {""type"": ""interval"", ""encodings"": [""x""]}
          }
        },
        {
          ""mark"": ""arc"",
          ""encoding"": {
            ""theta"": {""field"": ""Revenue"", ""type"": ""quantitative"", ""stack"": true},
            ""color"": {""field"": ""Crop Type"", ""type"": ""nominal""}
          },
          ""transform"": [
            {
              ""filter"": {
                ""selection"": ""brush""
              }
            }
          ]
        }
      ]
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Execution Result,47,48
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Units Produced, Revenue, Profit, Production Cost, Yield, and Export Volume. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Scatterplot Matrix</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to make the chart more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    // Define the data URL
    const dataUrl = ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"";

    // Define the Vega-Lite specification
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": dataUrl },
      ""transform"": [
        {""filter"": ""datum['Crop Type'] === 'Total'""}
      ],
      ""mark"": {""type"": ""point"", ""filled"": true, ""fillOpacity"": 0.5},
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x"", ""y""]}
      },
      ""encoding"": {
        ""x"": {""field"": {""repeat"": ""column""}},
        ""y"": {""field"": {""repeat"": ""row""}},
        ""color"": {
          ""condition"": {""test"": ""length(datum.brush)"", ""value"": ""steelblue""},
          ""value"": ""lightgray""
        }
      },
      ""facet"": {
        ""row"": {""field"": {""repeat"": ""row""}, ""type"": ""quantitative""},
        ""column"": {""field"": {""repeat"": ""column""}, ""type"": ""quantitative""}
      },
      ""spec"": {
        ""width"": 200,
        ""height"": 200
      },
      ""repeat"": {
        ""row"": [""Units Produced"", ""Revenue"", ""Profit"", ""Production Cost"", ""Yield"", ""Export Volume""],
        ""column"": [""Units Produced"", ""Revenue"", ""Profit"", ""Production Cost"", ""Yield"", ""Export Volume""]
      }
    };

    // Embed the chart
    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Initialization Error,48,49
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a brushable Scatterplot that visualizes the relationship between Units Produced and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Brushable Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 600,
      ""height"": 400,
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Units Produced"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Year"", ""type"": ""nominal""},
          {""field"": ""Crop Type"", ""type"": ""nominal""},
          {""field"": ""Units Produced"", ""type"": ""quantitative""},
          {""field"": ""Revenue"", ""type"": ""quantitative""},
          {""field"": ""Production Cost"", ""type"": ""quantitative""},
          {""field"": ""Profit"", ""type"": ""quantitative""},
          {""field"": ""Yield"", ""type"": ""quantitative""},
          {""field"": ""Number of Farms"", ""type"": ""quantitative""},
          {""field"": ""Export Volume"", ""type"": ""quantitative""}
        ]
      },
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x"", ""y""]}
      }
    };

    const spec2 = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 200,
      ""height"": 400,
      ""data"": {
        ""name"": ""source""
      },
      ""mark"": ""table"",
      ""encoding"": {
        ""row"": {""field"": ""Year"", ""type"": ""nominal""},
        ""column"": {""field"": ""Crop Type"", ""type"": ""nominal""},
        ""color"": {""field"": ""Revenue"", ""type"": ""quantitative""}
      }
    };

    const combinedSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""hconcat"": [
        spec,
        {
          ""width"": 200,
          ""height"": 400,
          ""data"": {
            ""name"": ""brush""
          },
          ""mark"": ""table"",
          ""encoding"": {
            ""row"": {""field"": ""Year"", ""type"": ""nominal""},
            ""column"": {""field"": ""Crop Type"", ""type"": ""nominal""},
            ""color"": {""field"": ""Revenue"", ""type"": ""quantitative""}
          },
          ""transform"": [{""limit"": 20}]
        }
      ]
    };

    vegaEmbed(""#vis"", combinedSpec);
  </script>
</body>
</html>
```",Initialization Error,49,50
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a horizontal Bar Chart that shows Crop Type and Units Produced, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Agricultural Production Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 600,
      ""height"": 400,
      ""layer"": [
        {
          ""mark"": ""bar"",
          ""encoding"": {
            ""x"": {""field"": ""Units Produced"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Crop Type"", ""type"": ""nominal"", ""sort"": ""-x""},
            ""tooltip"": [
              {""field"": ""Crop Type"", ""type"": ""nominal""},
              {""field"": ""Units Produced"", ""type"": ""quantitative""}
            ]
          }
        },
        {
          ""mark"": ""bar"",
          ""width"": 30,
          ""x"": {""field"": ""Units Produced"", ""type"": ""quantitative""},
          ""y"": {""field"": ""Crop Type"", ""type"": ""nominal"", ""sort"": ""-x""},
          ""encoding"": {
            ""xOffset"": {""value"": 620},
            ""color"": {""value"": ""lightgray""}
          }
        }
      ],
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
        ""format"": {""type"": ""csv""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Initialization Error,50,51
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot that visualizes the relationship between Units Produced and Revenue.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Agricultural Production Scatterplot</title>
  <style>
    /* Add some basic styling to make the chart look decent */
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 800px;
      height: 600px;
      border: 1px solid black;
    }
  </style>
</head>
<body>
  <svg class=""chart""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    // Set up the chart dimensions
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    // Create the SVG element
    const svg = d3.select('.chart')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    // Load the data
    d3.csv('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
      .then(data => {
        // Convert data types
        data.forEach(d => {
          d['Units Produced'] = +d['Units Produced'];
          d.Revenue = +d.Revenue;
        });

        // Create scales
        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Units Produced'])])
          .range([0, width]);
        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Revenue)])
          .range([height, 0]);

        // Create axes
        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);
        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(xAxis);
        svg.append('g')
          .call(yAxis);

        // Add axis labels
        svg.append('text')
          .attr('x', width / 2)
          .attr('y', height + 30)
          .attr('text-anchor', 'middle')
          .text('Units Produced');
        svg.append('text')
          .attr('x', -30)
          .attr('y', height / 2)
          .attr('text-anchor', 'middle')
          .attr('transform', 'rotate(-90)')
          .text('Revenue');

        // Create scatterplot
        svg.selectAll('circle')
          .data(data)
          .enter()
          .append('circle')
          .attr('cx', d => xScale(d['Units Produced']))
          .attr('cy', d => yScale(d.Revenue))
          .attr('r', 5);
      });
  </script>
</body>
</html>
```",Correct,51,52
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Line Chart that visualizes the trend of Units Produced over the Year for each Crop Type.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Agricultural Production Line Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 50px auto;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"")
      .then(data => {
        data.forEach(d => {
          d.Year = +d.Year;
          d[""Units Produced""] = +d[""Units Produced""];
        });

        const cropTypes = [...new Set(data.map(d => d[""Crop Type""]))];

        const xScale = d3.scaleLinear()
          .domain(d3.extent(data, d => d.Year))
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Units Produced""])])
          .range([height, 0]);

        const line = d3.line()
          .x(d => xScale(d.Year))
          .y(d => yScale(d[""Units Produced""]));

        svg.selectAll(""path"")
          .data(cropTypes)
          .enter()
          .append(""path"")
          .datum(d => data.filter(f => f[""Crop Type""] === d))
          .attr(""d"", line)
          .attr(""stroke"", (d, i) => d3.schemeCategory10[i])
          .attr(""stroke-width"", 2)
          .attr(""fill"", ""none"");

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        svg.append(""text"")
          .attr(""x"", width / 2)
          .attr(""y"", -20)
          .attr(""text-anchor"", ""middle"")
          .text(""Units Produced Trend Over Year"");

        svg.append(""text"")
          .attr(""x"", -20)
          .attr(""y"", height / 2)
          .attr(""text-anchor"", ""middle"")
          .attr(""transform"", ""rotate(-90)"")
          .text(""Units Produced"");

        svg.append(""text"")
          .attr(""x"", width / 2)
          .attr(""y"", height + 20)
          .attr(""text-anchor"", ""middle"")
          .text(""Year"");
      });
  </script>
</body>
</html>
```",Correct,52,53
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Bar Chart that visualizes the Units Produced for each Crop Type in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Agricultural Production</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 800px;
      height: 600px;
      margin: 40px auto;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg class=""chart""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('.chart')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
      .then(data => {
        data.forEach(d => {
          d.Year = +d.Year;
          d['Units Produced'] = +d['Units Produced'];
        });

        const filteredData = data.filter(d => d.Year === 2020);

        const x = d3.scaleBand()
          .domain(filteredData.map(d => d['Crop Type']))
          .range([0, width])
          .padding(0.2);

        const y = d3.scaleLinear()
          .domain([0, d3.max(filteredData, d => d['Units Produced'])])
          .range([height, 0]);

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(x));

        svg.append('g')
          .call(d3.axisLeft(y));

        svg.selectAll('bar')
          .data(filteredData)
          .enter()
          .append('rect')
          .attr('x', d => x(d['Crop Type']))
          .attr('y', d => y(d['Units Produced']))
          .attr('width', x.bandwidth())
          .attr('height', d => height - y(d['Units Produced']));
      });
  </script>
</body>
</html>
```",Correct,53,54
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Pie Chart that visualizes the proportion of Units Produced contributed by each Crop Type in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Agricultural Production Pie Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    #chart {
      width: 600px;
      height: 400px;
      margin: 50px auto;
    }
  </style>
</head>
<body>
  <div id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 600 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;
    const radius = Math.min(width, height) / 2;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${width / 2 + margin.left}, ${height / 2 + margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"")
      .then(data => {
        data.forEach(d => {
          d.Year = +d.Year;
          d[""Units Produced""] = +d[""Units Produced""];
        });

        const filteredData = data.filter(d => d.Year === 2020);

        const pie = d3.pie()
          .value(d => d[""Units Produced""]);

        const path = svg.selectAll(""path"")
          .data(pie(filteredData))
          .enter()
          .append(""path"")
          .attr(""d"", d3.arc()
            .outerRadius(radius)
            .innerRadius(0)
          )
          .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

        const legend = svg.selectAll("".legend"")
          .data(filteredData)
          .enter()
          .append(""g"")
          .attr(""transform"", (d, i) => `translate(0, ${i * 20})`)
          .attr(""class"", ""legend"");

        legend.append(""rect"")
          .attr(""x"", width / 2 + 20)
          .attr(""y"", 10)
          .attr(""width"", 10)
          .attr(""height"", 10)
          .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

        legend.append(""text"")
          .attr(""x"", width / 2 + 40)
          .attr(""y"", 15)
          .text(d => d[""Crop Type""]);
      });
  </script>
</body>
</html>
```",Correct,54,55
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Donut Chart that visualizes the distribution of Units Produced among Crop Type in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Agricultural Production Donut Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 500px;
      height: 500px;
      margin: 50px auto;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;
    const radius = Math.min(width, height) / 2;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${width / 2 + margin.left}, ${height / 2 + margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"")
      .then(data => {
        data.forEach(d => {
          d.Year = +d.Year;
          d[""Units Produced""] = +d[""Units Produced""];
        });

        const filteredData = data.filter(d => d.Year === 2020);

        const pie = d3.pie()
          .value(d => d[""Units Produced""]);

        const arc = d3.arc()
          .outerRadius(radius - 10)
          .innerRadius(radius - 100);

        const arcs = svg.selectAll(""arc"")
          .data(pie(filteredData))
          .enter()
          .append(""g"")
          .attr(""class"", ""arc"");

        arcs.append(""path"")
          .attr(""d"", arc)
          .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

        arcs.append(""text"")
          .attr(""transform"", d => `translate(${arc.centroid(d)})`)
          .attr(""dy"", ""0.35em"")
          .text(d => d.data[""Crop Type""]);

        svg.append(""text"")
          .attr(""x"", 0)
          .attr(""y"", -200)
          .attr(""text-anchor"", ""middle"")
          .style(""font-size"", ""24px"")
          .text(""Distribution of Units Produced among Crop Type in 2020"");
      });
  </script>
</body>
</html>
```",Correct,55,56
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Coxcomb Chart(polar area chart) to compare the Units Produced of different Crop Type in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coxcomb Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 600px;
      height: 600px;
      margin: 50px auto;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 500;
    const height = 500;
    const radius = Math.min(width, height) / 2 - 30;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left + width / 2}, ${margin.top + height / 2})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"")
      .then(data => {
        data.forEach(d => {
          d.Year = +d.Year;
          d[""Units Produced""] = +d[""Units Produced""];
        });

        const filteredData = data.filter(d => d.Year === 2020);

        const cropTypes = [...new Set(filteredData.map(d => d[""Crop Type""]))];

        const angles = cropTypes.map((_, i) => i * (360 / cropTypes.length));

        const maxUnitsProduced = Math.max(...filteredData.map(d => d[""Units Produced""]));

        const scale = d3.scaleLinear()
          .domain([0, maxUnitsProduced])
          .range([0, radius]);

        const arcs = svg.selectAll(""path"")
          .data(filteredData)
          .enter()
          .append(""path"")
          .attr(""d"", d => {
            const angle = angles[cropTypes.indexOf(d[""Crop Type""])];
            const unitsProduced = scale(d[""Units Produced""]);
            return `M 0 0 L ${unitsProduced * Math.cos(angle * Math.PI / 180)} ${unitsProduced * Math.sin(angle * Math.PI / 180)} A ${radius} ${radius} 0 ${unitsProduced / radius >= 1 ? 1 : 0} 1 ${unitsProduced * Math.cos((angle + 360 / cropTypes.length) * Math.PI / 180)} ${unitsProduced * Math.sin((angle + 360 / cropTypes.length) * Math.PI / 180)} Z`;
          })
          .attr(""fill"", (d, i) => d3.schemeCategory10[i % 10])
          .attr(""stroke"", ""white"")
          .attr(""stroke-width"", 2);

        const labels = svg.selectAll(""text"")
          .data(cropTypes)
          .enter()
          .append(""text"")
          .attr(""x"", (d, i) => radius * 1.1 * Math.cos(angles[i] * Math.PI / 180))
          .attr(""y"", (d, i) => radius * 1.1 * Math.sin(angles[i] * Math.PI / 180))
          .text(d => d);
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,56,57
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Radar Chart to compare the Units Produced of different Crop Type in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Agricultural Production Radar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg width=""600"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 100, right: 100, bottom: 100, left: 100 };
    const width = 600 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;
    const svg = d3.select('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
      .then(data => {
        data.forEach(d => {
          d.Year = +d.Year;
          d['Units Produced'] = +d['Units Produced'];
        });

        const filteredData = data.filter(d => d.Year === 2020);

        const cropTypes = [...new Set(filteredData.map(d => d['Crop Type']))];
        const angles = cropTypes.map((_, i) => (i / cropTypes.length) * 2 * Math.PI);

        const maxUnitsProduced = Math.max(...filteredData.map(d => d['Units Produced']));
        const radiusScale = d3.scaleLinear()
          .domain([0, maxUnitsProduced])
          .range([0, Math.min(width, height) / 2 - 50]);

        const radarChart = svg.selectAll('.radar-chart')
          .data(filteredData)
          .enter()
          .append('g')
          .attr('class', 'radar-chart');

        radarChart.selectAll('path')
          .data(d => [d])
          .enter()
          .append('path')
          .attr('d', (d, i) => {
            const points = angles.map((angle, j) => {
              const cropType = cropTypes[j];
              const unitsProduced = filteredData.find(dd => dd['Crop Type'] === cropType)['Units Produced'];
              return `${Math.cos(angle) * radiusScale(unitsProduced)} ${Math.sin(angle) * radiusScale(unitsProduced)}`;
            });
            return `M${points.join(' L')}Z`;
          })
          .attr('fill', 'none')
          .attr('stroke', 'steelblue')
          .attr('stroke-width', 2);

        const axisGroup = svg.selectAll('.axis-group')
          .data([1])
          .enter()
          .append('g')
          .attr('class', 'axis-group');

        axisGroup.selectAll('line')
          .data(angles)
          .enter()
          .append('line')
          .attr('x1', 0)
          .attr('y1', 0)
          .attr('x2', d => Math.cos(d) * (Math.min(width, height) / 2 - 50))
          .attr('y2', d => Math.sin(d) * (Math.min(width, height) / 2 - 50))
          .attr('stroke', 'lightgray');

        axisGroup.selectAll('text')
          .data(cropTypes)
          .enter()
          .append('text')
          .attr('x', (d, i) => Math.cos(angles[i]) * (Math.min(width, height) / 2 - 20))
          .attr('y', (d, i) => Math.sin(angles[i]) * (Math.min(width, height) / 2 - 20))
          .attr('text-anchor', 'middle')
          .text(d => d);

        const ticks = [0, maxUnitsProduced / 4, maxUnitsProduced / 2, maxUnitsProduced * 3 / 4, maxUnitsProduced];
        axisGroup.selectAll('.tick')
          .data(ticks)
          .enter()
          .append('circle')
          .attr('cx', 0)
          .attr('cy', 0)
          .attr('r', d => radiusScale(d))
          .attr('fill', 'none')
          .attr('stroke', 'lightgray');

        axisGroup.selectAll('.tick-text')
          .data(ticks)
          .enter()
          .append('text')
          .attr('x', 0)
          .attr('y', d => -radiusScale(d))
          .attr('text-anchor', 'middle')
          .text(d => d.toLocaleString());
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,57,58
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Streamgraph that visualizes the changes of Units Produced over the Year for each Crop Type.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Agricultural Production Streamgraph</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 800px;
      height: 600px;
      margin: 50px auto;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select("".chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
      data.forEach(d => {
        d.Year = +d.Year;
        d[""Units Produced""] = +d[""Units Produced""];
      });

      const cropTypes = Array.from(new Set(data.map(d => d[""Crop Type""])));

      const xScale = d3.scaleLinear()
        .domain(d3.extent(data, d => d.Year))
        .range([0, width]);

      const yScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Units Produced""])])
        .range([height, 0]);

      const zScale = d3.scaleOrdinal(d3.schemeCategory10)
        .domain(cropTypes);

      const stack = d3.stack()
        .keys(cropTypes)
        .value((d, key) => d[key]);

      const stackedData = stack(data);

      const area = d3.area()
        .x(d => xScale(d.data.Year))
        .y0(d => yScale(d[0]))
        .y1(d => yScale(d[1]))
        .curve(d3.curveBasis);

      svg.selectAll(""path"")
        .data(stackedData)
        .enter()
        .append(""path"")
        .attr(""d"", area)
        .attr(""fill"", d => zScale(d.key));

      svg.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

      svg.append(""g"")
        .call(d3.axisLeft(yScale));

      svg.append(""g"")
        .selectAll(""text"")
        .data(cropTypes)
        .enter()
        .append(""text"")
        .attr(""x"", width + 10)
        .attr(""y"", (d, i) => i * 20 + 10)
        .attr(""fill"", d => zScale(d))
        .text(d => d);
    });
  </script>
</body>
</html>
```",Initialization Error,58,59
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Slopegraph to compare the Units Produced between 2019 and 2020 for each Crop Type.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Slopegraph</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .line {
      stroke: #666;
      stroke-width: 1.5px;
    }
    .circle {
      fill: #666;
      stroke: #fff;
      stroke-width: 1.5px;
    }
    .label {
      font-size: 12px;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('svg')
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
      .then(data => {
        data.forEach(d => {
          d['Year'] = +d['Year'];
          d['Units Produced'] = +d['Units Produced'];
        });

        const cropTypes = Array.from(new Set(data.map(d => d['Crop Type'])));
        const years = [2019, 2020];

        const xScale = d3.scalePoint()
          .domain(years)
          .range([0, width])
          .padding(1);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Units Produced'])])
          .range([height, 0]);

        svg.selectAll('line')
          .data(cropTypes)
          .enter()
          .append('line')
          .attr('class', 'line')
          .attr('x1', d => xScale(2019))
          .attr('y1', d => yScale(d3.max(data.filter(f => f['Crop Type'] === d && f['Year'] === 2019), f => f['Units Produced'])))
          .attr('x2', d => xScale(2020))
          .attr('y2', d => yScale(d3.max(data.filter(f => f['Crop Type'] === d && f['Year'] === 2020), f => f['Units Produced'])));

        svg.selectAll('circle')
          .data(cropTypes)
          .enter()
          .append('circle')
          .attr('class', 'circle')
          .attr('cx', d => xScale(2019))
          .attr('cy', d => yScale(d3.max(data.filter(f => f['Crop Type'] === d && f['Year'] === 2019), f => f['Units Produced'])))
          .attr('r', 5);

        svg.selectAll('circle2')
          .data(cropTypes)
          .enter()
          .append('circle')
          .attr('class', 'circle')
          .attr('cx', d => xScale(2020))
          .attr('cy', d => yScale(d3.max(data.filter(f => f['Crop Type'] === d && f['Year'] === 2020), f => f['Units Produced'])))
          .attr('r', 5);

        svg.selectAll('text')
          .data(cropTypes)
          .enter()
          .append('text')
          .attr('class', 'label')
          .attr('x', d => xScale(2019) - 10)
          .attr('y', d => yScale(d3.max(data.filter(f => f['Crop Type'] === d && f['Year'] === 2019), f => f['Units Produced'])) + 5)
          .text(d => d);

        svg.selectAll('text2')
          .data(cropTypes)
          .enter()
          .append('text')
          .attr('class', 'label')
          .attr('x', d => xScale(2020) + 10)
          .attr('y', d => yScale(d3.max(data.filter(f => f['Crop Type'] === d && f['Year'] === 2020), f => f['Units Produced'])) + 5)
          .text(d => d);

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append('g')
          .call(d3.axisLeft(yScale));
      });
  </script>
</body>
</html>
```",Correct,59,60
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Heatmap that visualizes the Units Produced across Crop Type and Years.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Agricultural Production Heatmap</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .tooltip {
      position: absolute;
      background-color: #fff;
      border: 1px solid #ddd;
      padding: 5px;
      visibility: hidden;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 100, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"")
      .then(data => {
        data.forEach(d => {
          d.Year = +d.Year;
          d[""Units Produced""] = +d[""Units Produced""];
        });

        const years = Array.from(new Set(data.map(d => d.Year)));
        const cropTypes = Array.from(new Set(data.map(d => d[""Crop Type""])));

        const xScale = d3.scaleBand()
          .domain(years)
          .range([0, width])
          .padding(0.1);

        const yScale = d3.scaleBand()
          .domain(cropTypes)
          .range([height, 0])
          .padding(0.1);

        const colorScale = d3.scaleSequential()
          .domain([0, d3.max(data, d => d[""Units Produced""])])
          .interpolator(d3.interpolateBlues);

        svg.selectAll(""rect"")
          .data(data)
          .enter()
          .append(""rect"")
          .attr(""x"", d => xScale(d.Year))
          .attr(""y"", d => yScale(d[""Crop Type""]))
          .attr(""width"", xScale.bandwidth())
          .attr(""height"", yScale.bandwidth())
          .attr(""fill"", d => colorScale(d[""Units Produced""]));

        svg.selectAll(""text"")
          .data(data)
          .enter()
          .append(""text"")
          .attr(""x"", d => xScale(d.Year) + xScale.bandwidth() / 2)
          .attr(""y"", d => yScale(d[""Crop Type""]) + yScale.bandwidth() / 2)
          .attr(""text-anchor"", ""middle"")
          .attr(""dominant-baseline"", ""middle"")
          .text(d => d[""Units Produced""]);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        svg.append(""text"")
          .attr(""x"", width / 2)
          .attr(""y"", height + margin.bottom / 2)
          .attr(""text-anchor"", ""middle"")
          .text(""Year"");

        svg.append(""text"")
          .attr(""x"", -height / 2)
          .attr(""y"", -margin.top / 2)
          .attr(""text-anchor"", ""middle"")
          .attr(""transform"", ""rotate(-90)"")
          .text(""Crop Type"");

        const tooltip = d3.select(""body"")
          .append(""div"")
          .attr(""class"", ""tooltip"");

        svg.selectAll(""rect"")
          .on(""mouseover"", (event, d) => {
            tooltip.style(""visibility"", ""visible"")
              .style(""left"", (event.pageX + 10) + ""px"")
              .style(""top"", (event.pageY - 10) + ""px"")
              .html(`Year: ${d.Year}<br>Crop Type: ${d[""Crop Type""]}<br>Units Produced: ${d[""Units Produced""]}`);
          })
          .on(""mouseout"", () => {
            tooltip.style(""visibility"", ""hidden"");
          });
      });
  </script>
</body>
</html>
```",Correct,60,61
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Agricultural Production Stacked Bar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 40px auto;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg class=""chart"" width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 40, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('.chart')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
      .then(data => {
        data.forEach(d => {
          d['Year'] = +d['Year'];
          d['Units Produced'] = +d['Units Produced'];
          d['Revenue'] = +d['Revenue'];
          d['Production Cost'] = +d['Production Cost'];
          d['Profit'] = +d['Profit'];
          d['Yield'] = +d['Yield'];
          d['Number of Farms'] = +d['Number of Farms'];
          d['Export Volume'] = +d['Export Volume'];
        });

        const keys = ['Units Produced', 'Revenue', 'Production Cost', 'Profit', 'Yield', 'Number of Farms', 'Export Volume'];
        const stack = d3.stack().keys(keys);

        const stackedData = stack(data);

        const xScale = d3.scaleBand()
          .domain(data.map(d => d['Year']))
          .range([0, width])
          .padding(0.2);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(stackedData[stackedData.length - 1], d => d[1])])
          .range([height, 0]);

        svg.selectAll('g.layer')
          .data(stackedData)
          .enter()
          .append('g')
          .attr('class', 'layer')
          .selectAll('rect')
          .data(d => d)
          .enter()
          .append('rect')
          .attr('x', d => xScale(d.data['Year']))
          .attr('y', d => yScale(d[1]))
          .attr('width', xScale.bandwidth())
          .attr('height', d => yScale(d[0]) - yScale(d[1]))
          .attr('fill', (d, i) => d3.schemeCategory10[i]);

        svg.append('g')
          .attr('class', 'axis x-axis')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append('g')
          .attr('class', 'axis y-axis')
          .call(d3.axisLeft(yScale));

        svg.append('text')
          .attr('x', width / 2)
          .attr('y', -20)
          .attr('text-anchor', 'middle')
          .text('Agricultural Production Stacked Bar Chart');

        svg.append('text')
          .attr('x', -height / 2)
          .attr('y', -40)
          .attr('text-anchor', 'middle')
          .attr('transform', 'rotate(-90)')
          .text('Value');

        svg.append('text')
          .attr('x', width / 2)
          .attr('y', height + 20)
          .attr('text-anchor', 'middle')
          .text('Year');
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,61,62
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Horizontal Bar Chart that visualizes the Units Produced for each Crop Type in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Agricultural Production</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 40px auto;
    }
    .chart rect {
      fill: steelblue;
    }
    .chart text {
      fill: #fff;
      font-size: 14px;
    }
  </style>
</head>
<body>
  <svg class=""chart"" width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;
    const svg = d3.select('.chart')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
      .then(data => {
        data.forEach(d => {
          d.Year = +d.Year;
          d['Units Produced'] = +d['Units Produced'];
        });

        const filteredData = data.filter(d => d.Year === 2020);

        const cropTypes = [...new Set(filteredData.map(d => d['Crop Type']))];
        const unitsProduced = filteredData.map(d => d['Units Produced']);

        const xScale = d3.scaleLinear()
          .domain([0, Math.max(...unitsProduced)])
          .range([0, width]);

        const yScale = d3.scaleBand()
          .domain(cropTypes)
          .range([0, height])
          .padding(0.2);

        svg.selectAll('rect')
          .data(filteredData)
          .enter()
          .append('rect')
          .attr('x', 0)
          .attr('y', d => yScale(d['Crop Type']))
          .attr('width', d => xScale(d['Units Produced']))
          .attr('height', yScale.bandwidth());

        svg.selectAll('text')
          .data(filteredData)
          .enter()
          .append('text')
          .attr('x', d => xScale(d['Units Produced']) + 10)
          .attr('y', d => yScale(d['Crop Type']) + yScale.bandwidth() / 2)
          .attr('text-anchor', 'start')
          .text(d => d['Units Produced']);

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append('g')
          .call(d3.axisLeft(yScale));
      });
  </script>
</body>
</html>
```",Correct,62,63
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot that visualizes the relationship between Units Produced and Revenue.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Agricultural Production Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = csvData.map(row => {
                    const columns = row.split(',');
                    return [parseFloat(columns[2]), parseFloat(columns[3])];
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Relationship between Units Produced and Revenue'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Units Produced'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Revenue'
                    },
                    series: [{
                        type: 'scatter',
                        data: chartData
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,63,64
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Line Chart that visualizes the trend of Units Produced over the Year for each Crop Type.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Agricultural Production Trend</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [Year, CropType, UnitsProduced] = row.split(',');
                    if (!chartData[CropType]) {
                        chartData[CropType] = { Year: [], UnitsProduced: [] };
                    }
                    chartData[CropType].Year.push(parseInt(Year));
                    chartData[CropType].UnitsProduced.push(parseFloat(UnitsProduced));
                });

                const series = Object.keys(chartData).map(CropType => ({
                    name: CropType,
                    type: 'line',
                    data: chartData[CropType].UnitsProduced,
                }));

                const option = {
                    title: {
                        text: 'Agricultural Production Trend',
                    },
                    tooltip: {
                        trigger: 'axis',
                    },
                    legend: {
                        data: Object.keys(chartData),
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true,
                    },
                    toolbox: {
                        feature: {
                            saveAsImage: {},
                        },
                    },
                    xAxis: {
                        type: 'category',
                        data: chartData[Object.keys(chartData)[0]].Year,
                    },
                    yAxis: {
                        type: 'value',
                    },
                    series,
                };

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,64,65
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Bar Chart that visualizes the Units Produced for each Crop Type in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Agricultural Production Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [Year, CropType, UnitsProduced] = row.split(',');
                    if (Year === '2020') {
                        if (!chartData[CropType]) {
                            chartData[CropType] = 0;
                        }
                        chartData[CropType] += parseInt(UnitsProduced);
                    }
                });
                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    title: {
                        text: 'Units Produced for each Crop Type in 2020'
                    },
                    tooltip: {},
                    legend: {
                        data: ['Units Produced']
                    },
                    xAxis: {
                        data: Object.keys(chartData)
                    },
                    yAxis: {},
                    series: [{
                        name: 'Units Produced',
                        type: 'bar',
                        data: Object.values(chartData)
                    }]
                };
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,65,66
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Pie Chart that visualizes the proportion of Units Produced contributed by each Crop Type in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Agricultural Production Pie Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [Year, CropType, UnitsProduced] = row.split(',');
                    if (Year === '2020') {
                        if (chartData[CropType]) {
                            chartData[CropType] += parseInt(UnitsProduced);
                        } else {
                            chartData[CropType] = parseInt(UnitsProduced);
                        }
                    }
                });
                const seriesData = Object.keys(chartData).map(key => ({ name: key, value: chartData[key] }));
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Proportion of Units Produced by Crop Type in 2020'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    series: [
                        {
                            type: 'pie',
                            data: seriesData,
                            emphasis: {
                                itemStyle: {
                                    shadowBlur: 10,
                                    shadowOffsetX: 0,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            }
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,66,67
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Donut Chart that visualizes the distribution of Units Produced among Crop Type in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Agricultural Production Donut Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [Year, CropType, UnitsProduced] = row.split(',');
                    if (Year === '2020') {
                        if (!chartData[CropType]) {
                            chartData[CropType] = 0;
                        }
                        chartData[CropType] += parseFloat(UnitsProduced);
                    }
                });
                const seriesData = Object.keys(chartData).map(key => ({ name: key, value: chartData[key] }));

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Distribution of Units Produced among Crop Type in 2020',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    legend: {
                        orient: 'vertical',
                        left: 'left'
                    },
                    series: [
                        {
                            type: 'pie',
                            radius: ['40%', '70%'],
                            avoidLabelOverlap: false,
                            label: {
                                show: false,
                                position: 'center'
                            },
                            emphasis: {
                                label: {
                                    show: true,
                                    fontSize: '40',
                                    fontWeight: 'bold'
                                }
                            },
                            labelLine: {
                                show: false
                            },
                            data: seriesData
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,67,68
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Coxcomb Chart(polar area chart) to compare the Units Produced of different Crop Type in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coxcomb Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [Year, CropType, UnitsProduced] = row.split(',');
                    if (Year === '2020') {
                        if (!chartData[CropType]) {
                            chartData[CropType] = 0;
                        }
                        chartData[CropType] += parseFloat(UnitsProduced);
                    }
                });
                const seriesData = Object.keys(chartData).map(key => ({ name: key, value: chartData[key] }));
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Units Produced of Different Crop Types in 2020',
                        left: 'center'
                    },
                    angleAxis: {
                        type: 'category',
                        data: seriesData.map(item => item.name),
                        z: 10
                    },
                    radiusAxis: {
                        type: 'value',
                        axisLabel: {
                            formatter: '{value}'
                        },
                        axisLine: {
                            lineStyle: {
                                color: '#ddd'
                            }
                        }
                    },
                    polar: {
                        center: ['50%', '50%'],
                        radius: '70%'
                    },
                    series: [
                        {
                            type: 'bar',
                            data: seriesData.map(item => item.value),
                            coordinateSystem: 'polar',
                            name: 'Units Produced',
                            stack: 'a',
                            emphasis: {
                                focus: 'series'
                            }
                        }
                    ],
                    legend: {
                        show: true,
                        data: ['Units Produced']
                    }
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,68,69
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Radar Chart to compare the Units Produced of different Crop Type in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Agricultural Production Radar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [Year, CropType, UnitsProduced] = row.split(',');
                    if (Year === '2020' && !chartData[CropType]) {
                        chartData[CropType] = parseInt(UnitsProduced);
                    }
                });
                const chart = echarts.init(document.getElementById('chart'));
                const options = {
                    title: {
                        text: 'Units Produced of Different Crop Types in 2020'
                    },
                    radar: {
                        indicator: Object.keys(chartData).map(key => ({ name: key, max: Math.max(...Object.values(chartData)) })),
                        radius: '60%'
                    },
                    series: [{
                        type: 'radar',
                        data: [Object.values(chartData)],
                        areaStyle: {}
                    }]
                };
                chart.setOption(options);
            });
    </script>
</body>
</html>
```",Correct,69,70
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Streamgraph that visualizes the changes of Units Produced over the Year for each Crop Type.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Agricultural Production Streamgraph</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [Year, CropType, UnitsProduced] = row.split(',');
                    if (!chartData[CropType]) {
                        chartData[CropType] = [];
                    }
                    chartData[CropType].push([parseInt(Year), parseInt(UnitsProduced)]);
                });
                const series = Object.keys(chartData).map(CropType => ({
                    name: CropType,
                    type: 'stream',
                    stack: 'stack',
                    data: chartData[CropType]
                }));
                const option = {
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'line',
                            lineStyle: {
                                color: 'rgba(0,0,0,0.2)',
                                width: 1,
                                type: 'solid'
                            }
                        }
                    },
                    legend: {
                        data: Object.keys(chartData)
                    },
                    singleAxis: {
                        top: 50,
                        bottom: 50,
                        axisTick: {},
                        axisLabel: {},
                        type: 'time',
                        axisPointer: {
                            animation: true,
                            label: {
                                show: true
                            }
                        },
                        splitLine: {
                            show: true,
                            lineStyle: {
                                type: 'dashed',
                                opacity: 0.2
                            }
                        }
                    },
                    series: series
                };
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Initialization Error,70,71
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Slopegraph to compare the Units Produced between 2019 and 2020 for each Crop Type.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Agricultural Production Slopegraph</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 1000px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [Year, CropType, UnitsProduced] = row.split(',');
                    if (!chartData[CropType]) {
                        chartData[CropType] = {};
                    }
                    chartData[CropType][Year] = parseFloat(UnitsProduced);
                });

                const seriesData = [];
                Object.keys(chartData).forEach(CropType => {
                    const data2019 = chartData[CropType]['2019'];
                    const data2020 = chartData[CropType]['2020'];
                    if (data2019 && data2020) {
                        seriesData.push([CropType, data2019, data2020]);
                    }
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Agricultural Production Slopegraph'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    grid: {
                        left: '10%',
                        right: '10%',
                        top: '10%',
                        bottom: '10%'
                    },
                    xAxis: [
                        {
                            type: 'category',
                            data: ['2019', '2020'],
                            axisTick: {
                                alignWithLabel: true
                            }
                        }
                    ],
                    yAxis: [
                        {
                            type: 'value',
                            name: 'Units Produced'
                        }
                    ],
                    series: [
                        {
                            name: 'Units Produced',
                            type: 'bar',
                            data: seriesData.map(item => item[1]),
                            xAxisIndex: 0,
                            yAxisIndex: 0,
                            label: {
                                show: true,
                                position: 'inside'
                            }
                        },
                        {
                            name: 'Units Produced',
                            type: 'bar',
                            data: seriesData.map(item => item[2]),
                            xAxisIndex: 0,
                            yAxisIndex: 0,
                            label: {
                                show: true,
                                position: 'inside'
                            }
                        }
                    ]
                });

                chart.on('click', params => {
                    if (params.seriesIndex === 0) {
                        const seriesData2019 = seriesData.map(item => item[1]);
                        const seriesData2020 = seriesData.map(item => item[2]);
                        const slopeData = seriesData.map((item, index) => {
                            return [item[0], seriesData2019[index], seriesData2020[index]];
                        });
                        chart.setOption({
                            series: [
                                {
                                    name: 'Units Produced',
                                    type: 'line',
                                    data: slopeData,
                                    lineStyle: {
                                        color: 'black'
                                    }
                                }
                            ]
                        });
                    }
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,71,72
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Heatmap that visualizes the Units Produced across Crop Type and Years.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Agricultural Production Heatmap</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const years = [...new Set(csvData.map(row => row.split(',')[0]))].sort();
                const cropTypes = [...new Set(csvData.map(row => row.split(',')[1]))].sort();
                const heatmapData = years.map(year => cropTypes.map(cropType => {
                    const row = csvData.find(row => row.split(',')[0] === year && row.split(',')[1] === cropType);
                    return row ? parseInt(row.split(',')[2]) : 0;
                }));

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Units Produced Heatmap'
                    },
                    tooltip: {
                        position: 'top'
                    },
                    grid: {
                        height: '50%',
                        top: '10%'
                    },
                    xAxis: {
                        type: 'category',
                        data: cropTypes,
                        splitArea: {
                            show: true
                        }
                    },
                    yAxis: {
                        type: 'category',
                        data: years,
                        splitArea: {
                            show: true
                        }
                    },
                    visualMap: {
                        min: 0,
                        max: Math.max(...heatmapData.flat()),
                        calculable: true,
                        orient: 'horizontal',
                        left: 'center',
                        bottom: '15%'
                    },
                    series: [{
                        name: 'Units Produced',
                        type: 'heatmap',
                        data: heatmapData.map((row, index) => row.map((value, colIndex) => [colIndex, index, value])),
                        label: {
                            show: true
                        },
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,72,73
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Agricultural Production Stacked Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const years = [...new Set(csvData.map(row => row.split(',')[0]))];
                const cropTypes = [...new Set(csvData.map(row => row.split(',')[1]))];
                const seriesData = cropTypes.map(crop => {
                    return years.map(year => {
                        const row = csvData.find(row => row.split(',')[0] === year && row.split(',')[1] === crop);
                        return row ? parseFloat(row.split(',')[2]) : 0;
                    });
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Agricultural Production Stacked Bar Chart'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    legend: {
                        data: cropTypes
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'category',
                        data: years
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: seriesData.map((data, index) => {
                        return {
                            name: cropTypes[index],
                            type: 'bar',
                            stack: 'total',
                            data: data
                        };
                    })
                });
            });
    </script>
</body>
</html>
```",Correct,73,74
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Horizontal Bar Chart that visualizes the Units Produced for each Crop Type in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Agricultural Production Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 1000px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [Year, CropType, UnitsProduced] = row.split(',');
                    if (Year === '2020') {
                        if (!chartData[CropType]) {
                            chartData[CropType] = 0;
                        }
                        chartData[CropType] += parseInt(UnitsProduced);
                    }
                });
                const seriesData = Object.keys(chartData).map(key => ({ name: key, value: chartData[key] }));
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Units Produced for each Crop Type in 2020'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'value',
                        boundaryGap: [0, 0.01]
                    },
                    yAxis: {
                        type: 'category',
                        data: seriesData.map(item => item.name)
                    },
                    series: [
                        {
                            name: 'Units Produced',
                            type: 'bar',
                            data: seriesData.map(item => item.value)
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,74,75
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot that visualizes the relationship between Units Produced and Revenue.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Scatterplot of Units Produced vs Revenue</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""description"": ""A scatterplot showing the relationship between Units Produced and Revenue."",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": { ""field"": ""Units Produced"", ""type"": ""quantitative"" },
        ""y"": { ""field"": ""Revenue"", ""type"": ""quantitative"" },
        ""tooltip"": [
          { ""field"": ""Units Produced"", ""type"": ""quantitative"" },
          { ""field"": ""Revenue"", ""type"": ""quantitative"" }
        ]
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,75,76
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Line Chart that visualizes the trend of Units Produced over the Year for each Crop Type.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Agricultural Production Line Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"" },
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {""field"": ""Year"", ""type"": ""temporal""},
        ""y"": {""field"": ""Units Produced"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Crop Type"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,76,77
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Bar Chart that visualizes the Units Produced for each Crop Type in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Bar Chart of Units Produced by Crop Type in 2020</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2020""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Crop Type"", ""type"": ""nominal""},
        ""y"": {""field"": ""Units Produced"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Crop Type"", ""type"": ""nominal""},
          {""field"": ""Units Produced"", ""type"": ""quantitative""}
        ]
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,77,78
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Pie Chart that visualizes the proportion of Units Produced contributed by each Crop Type in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Agricultural Production Pie Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2020""}
      ],
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Units Produced"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Crop Type"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,78,79
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Donut Chart that visualizes the distribution of Units Produced among Crop Type in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Agricultural Production Donut Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2020""},
        {""aggregate"": [{""op"": ""sum"", ""field"": ""Units Produced"", ""as"": ""Total Units Produced""}], ""groupby"": [""Crop Type""]}
      ],
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Total Units Produced"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Crop Type"", ""type"": ""nominal""}
      },
      ""view"": {""stroke"": null},
      ""width"": 500,
      ""height"": 500
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,79,80
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Coxcomb Chart(polar area chart) to compare the Units Produced of different Crop Type in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coxcomb Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2020""}
      ],
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Units Produced"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Crop Type"", ""type"": ""nominal""}
      },
      ""view"": {""stroke"": null},
      ""config"": {
        ""arc"": {""padAngle"": 0.01}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,80,81
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Radar Chart to compare the Units Produced of different Crop Type in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Agricultural Production Radar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2020""},
        {""calculate"": ""datum['Units Produced']"", ""as"": ""value""},
        {""calculate"": ""datum['Crop Type']"", ""as"": ""category""}
      ],
      ""mark"": ""line"",
      ""encoding"": {
        ""theta"": {""field"": ""category"", ""type"": ""nominal"", ""scale"": {""range"": [0, 360]}},
        ""radius"": {""field"": ""value"", ""type"": ""quantitative""}
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""grid"": false}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,81,82
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Streamgraph that visualizes the changes of Units Produced over the Year for each Crop Type.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Agricultural Production Streamgraph</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""area"",
      ""encoding"": {
        ""x"": {""field"": ""Year"", ""type"": ""temporal""},
        ""y"": {""field"": ""Units Produced"", ""type"": ""quantitative"", ""stack"": true},
        ""color"": {""field"": ""Crop Type"", ""type"": ""nominal""}
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""grid"": false}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,82,83
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Slopegraph to compare the Units Produced between 2019 and 2020 for each Crop Type.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Slopegraph for Units Produced</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 600,
      ""height"": 400,
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2019 || datum.Year == 2020""}
      ],
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {""field"": ""Year"", ""type"": ""nominal"", ""axis"": {""labelAngle"": 0}},
        ""y"": {""field"": ""Units Produced"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Crop Type"", ""type"": ""nominal""},
        ""detail"": {""field"": ""Crop Type"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,83,84
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Heatmap that visualizes the Units Produced across Crop Type and Years.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Heatmap of Units Produced across Crop Type and Years</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""rect"",
      ""encoding"": {
        ""x"": {""field"": ""Year"", ""type"": ""ordinal""},
        ""y"": {""field"": ""Crop Type"", ""type"": ""ordinal""},
        ""color"": {""field"": ""Units Produced"", ""type"": ""quantitative""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,84,85
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Agricultural Production Stacked Bar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Year"", ""type"": ""nominal"", ""axis"": {""title"": ""Year""}},
        ""y"": {""field"": ""Units Produced"", ""type"": ""quantitative"", ""axis"": {""title"": ""Units Produced""}},
        ""color"": {""field"": ""Crop Type"", ""type"": ""nominal"", ""legend"": {""title"": ""Crop Type""}},
        ""tooltip"": [
          {""field"": ""Year"", ""type"": ""nominal"", ""title"": ""Year""},
          {""field"": ""Crop Type"", ""type"": ""nominal"", ""title"": ""Crop Type""},
          {""field"": ""Units Produced"", ""type"": ""quantitative"", ""title"": ""Units Produced""}
        ]
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""domainWidth"": 1}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,85,86
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Horizontal Bar Chart that visualizes the Units Produced for each Crop Type in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Units Produced by Crop Type in 2020</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2020""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Units Produced"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Crop Type"", ""type"": ""nominal""},
        ""tooltip"": [
          {""field"": ""Crop Type"", ""type"": ""nominal""},
          {""field"": ""Units Produced"", ""type"": ""quantitative""}
        ]
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,86,87
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Scatterplot that visualizes the relationship between Domestic Consumption and Exports. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Scatterplot</title>
    <style>
        /* set the CSS */
        body { font: 12px Arial;}

        /* style the lines */
        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 1.5px;
        }

        /* style the circles */
        .dot {
            fill: steelblue;
            stroke: #fff;
        }

        /* style the text */
        .text {
            font-size: 12px;
        }

        /* style the tooltip */
        .tooltip {
            position: absolute;
            pointer-events: none;
            font-size: 12px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        // set the dimensions and margins of the graph
        var margin = {top: 20, right: 20, bottom: 30, left: 40},
            width = 800 - margin.left - margin.right,
            height = 600 - margin.top - margin.bottom;

        // append the svg object to the body of the page
        var svg = d3.select(""body"")
            .select(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");

        // read the data
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(function(data) {

            // convert data types
            data.forEach(function(d) {
                d[""Domestic Consumption""] = +d[""Domestic Consumption""];
                d.Exports = +d.Exports;
            });

            // create scales
            var xScale = d3.scaleLinear()
                .domain([0, d3.max(data, function(d) { return d[""Domestic Consumption""]; })])
                .range([0, width]);

            var yScale = d3.scaleLinear()
                .domain([0, d3.max(data, function(d) { return d.Exports; })])
                .range([height, 0]);

            // create axes
            var xAxis = d3.axisBottom(xScale);
            var yAxis = d3.axisLeft(yScale);

            // add the x-axis
            svg.append(""g"")
                .attr(""transform"", ""translate(0,"" + height + "")"")
                .call(xAxis);

            // add the y-axis
            svg.append(""g"")
                .call(yAxis);

            // add the x-axis label
            svg.append(""text"")
                .attr(""transform"", ""translate("" + (width / 2) + "" ,"" + (height + margin.bottom - 5) + "")"")
                .style(""text-anchor"", ""middle"")
                .text(""Domestic Consumption"");

            // add the y-axis label
            svg.append(""text"")
                .attr(""transform"", ""rotate(-90)"")
                .attr(""y"", 6)
                .attr(""dy"", "".71em"")
                .style(""text-anchor"", ""end"")
                .text(""Exports"");

            // add the dots
            svg.selectAll(""dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""r"", 5)
                .attr(""cx"", function(d) { return xScale(d[""Domestic Consumption""]); })
                .attr(""cy"", function(d) { return yScale(d.Exports); })
                .on(""mouseover"", function(event, d) {
                    var xPosition = xScale(d[""Domestic Consumption""]);
                    var yPosition = yScale(d.Exports);

                    // add the tooltip
                    var tooltip = svg.append(""g"")
                        .attr(""class"", ""tooltip"")
                        .style(""opacity"", 1);

                    tooltip.append(""rect"")
                        .attr(""x"", xPosition - 50)
                        .attr(""y"", yPosition - 25)
                        .attr(""width"", 100)
                        .attr(""height"", 50)
                        .attr(""fill"", ""white"")
                        .attr(""rx"", 5)
                        .attr(""ry"", 5);

                    tooltip.append(""text"")
                        .attr(""x"", xPosition - 45)
                        .attr(""y"", yPosition - 10)
                        .text(""Domestic Consumption: "" + d[""Domestic Consumption""]);

                    tooltip.append(""text"")
                        .attr(""x"", xPosition - 45)
                        .attr(""y"", yPosition)
                        .text(""Exports: "" + d.Exports);
                })
                .on(""mouseout"", function() {
                    // remove the tooltip
                    d3.select("".tooltip"").remove();
                });
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,87,88
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Scatterplot that visualizes the relationship between Domestic Consumption and Exports. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coffee Consumption Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
    .brush .extent {
      fill-opacity: .3;
      stroke: #fff;
      shape-rendering: crispEdges;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;
    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);
    const xScale = d3.scaleLinear().range([0, width]);
    const yScale = d3.scaleLinear().range([height, 0]);
    const xAxis = d3.axisBottom(xScale);
    const yAxis = d3.axisLeft(yScale);
    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Domestic Consumption""] = +d[""Domestic Consumption""];
          d.Exports = +d.Exports;
        });
        xScale.domain(d3.extent(data, d => d[""Domestic Consumption""]));
        yScale.domain(d3.extent(data, d => d.Exports));
        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(xAxis);
        svg.append(""g"")
          .call(yAxis);
        const brush = d3.brush()
          .extent([[0, 0], [width, height]])
          .on(""brush end"", brushed);
        svg.append(""g"")
          .call(brush);
        svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d[""Domestic Consumption""]))
          .attr(""cy"", d => yScale(d.Exports))
          .attr(""r"", 4);
        function brushed(event) {
          const selection = event.selection;
          if (selection) {
            svg.selectAll(""circle"")
              .classed(""selected"", d => {
                const x = xScale(d[""Domestic Consumption""]);
                const y = yScale(d.Exports);
                return x >= selection[0][0] && x <= selection[1][0] && y >= selection[0][1] && y <= selection[1][1];
              });
          } else {
            svg.selectAll(""circle"")
              .classed(""selected"", false);
          }
        }
      });
  </script>
</body>
</html>
```",Correct,88,89
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Scatterplot that visualizes the relationship between Domestic Consumption and Exports. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Scatterplot</title>
    <style>
        /* set the CSS */
        body { 
            font: 12px Arial;
        }
        
        path { 
            stroke: steelblue;
            stroke-opacity: .6;
            fill: none;
        }
        
        .brush .extent {
            fill-opacity: .3;
            stroke: #fff;
            shape-rendering: crispEdges;
        }
        
        circle {
            fill: steelblue;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        // set the dimensions and margins of the graph
        var margin = {top: 20, right: 20, bottom: 30, left: 40},
            width = 800 - margin.left - margin.right,
            height = 600 - margin.top - margin.bottom;

        // append the svg object to the body of the page
        var svg = d3.select(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");

        // Read the data
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(function(data) {
            // Convert data types
            data.forEach(function(d) {
                d[""Domestic Consumption""] = +d[""Domestic Consumption""];
                d.Exports = +d.Exports;
            });

            // Add zooming functionality
            var zoom = d3.zoom()
                .scaleExtent([1, 10])
                .extent([[-Infinity, -Infinity], [Infinity, Infinity]])
                .on(""zoom"", zoomed);

            svg.call(zoom);

            // Add X axis
            var x = d3.scaleLinear()
                .domain([0, d3.max(data, function(d) { return d[""Domestic Consumption""]; })])
                .range([ 0, width ]);

            svg.append(""g"")
                .attr(""transform"", ""translate(0,"" + height + "")"")
                .call(d3.axisBottom(x));

            // Add Y axis
            var y = d3.scaleLinear()
                .domain([0, d3.max(data, function(d) { return d.Exports; })])
                .range([ height, 0]);

            svg.append(""g"")
                .call(d3.axisLeft(y));

            // Add dots
            svg.selectAll(""circle"")
                .data(data)
                .enter()
                .append(""circle"")
                .attr(""cx"", function (d) { return x(d[""Domestic Consumption""]); } )
                .attr(""cy"", function (d) { return y(d.Exports); } )
                .attr(""r"", 4);

            // Add title
            svg.append(""text"")
                .attr(""x"", (width / 2))             
                .attr(""y"", 0 - (margin.top / 2))
                .attr(""text-anchor"", ""middle"")  
                .style(""font-size"", ""16px"") 
                .text(""Relationship between Domestic Consumption and Exports"");

            // Add labels
            svg.append(""text"")
                .attr(""x"", (width / 2))             
                .attr(""y"", height + (margin.bottom / 2))
                .attr(""text-anchor"", ""middle"")  
                .style(""font-size"", ""12px"") 
                .text(""Domestic Consumption"");

            svg.append(""text"")
                .attr(""transform"", ""rotate(-90)"")
                .attr(""x"", -(height / 2))             
                .attr(""y"", 0 - (margin.left / 2))
                .attr(""text-anchor"", ""middle"")  
                .style(""font-size"", ""12px"") 
                .text(""Exports"");

            // zooming function
            function zoomed() {
                svg.selectAll(""circle"")
                    .attr(""cx"", function (d) { return x(d[""Domestic Consumption""]) * d3.event.transform.k + d3.event.transform.x; } )
                    .attr(""cy"", function (d) { return y(d.Exports) * d3.event.transform.k + d3.event.transform.y; } );

                svg.selectAll(""g"")
                    .attr(""transform"", d3.event.transform);
            }
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,89,90
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Domestic Consumption and Exports. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coffee Consumption Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .tooltip {
      position: absolute;
      background-color: #f9f9f9;
      border: 1px solid #ccc;
      padding: 5px;
      visibility: hidden;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Domestic Consumption""] = +d[""Domestic Consumption""];
          d.Exports = +d.Exports;
        });

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Domestic Consumption""])])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Exports)])
          .range([height, 0]);

        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(xAxis);

        svg.append(""g"")
          .call(yAxis);

        svg.append(""text"")
          .attr(""x"", width / 2)
          .attr(""y"", height + 30)
          .attr(""text-anchor"", ""middle"")
          .text(""Domestic Consumption"");

        svg.append(""text"")
          .attr(""x"", -30)
          .attr(""y"", height / 2)
          .attr(""text-anchor"", ""middle"")
          .attr(""transform"", ""rotate(-90)"")
          .text(""Exports"");

        const tooltip = d3.select(""body"")
          .append(""div"")
          .attr(""class"", ""tooltip"")
          .style(""opacity"", 0);

        svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d[""Domestic Consumption""]))
          .attr(""cy"", d => yScale(d.Exports))
          .attr(""r"", 5)
          .on(""mouseover"", (event, d) => {
            tooltip.transition()
              .duration(200)
              .style(""opacity"", 0.9);
            tooltip.html(`Country: ${d.Country}<br>Domestic Consumption: ${d[""Domestic Consumption""]}<br>Exports: ${d.Exports}`)
              .style(""left"", (event.pageX) + ""px"")
              .style(""top"", (event.pageY - 28) + ""px"");
          })
          .on(""mouseout"", () => {
            tooltip.transition()
              .duration(500)
              .style(""opacity"", 0);
          })
          .on(""click"", (event, d) => {
            const url = `https://www.google.com/search?q=${d.Country}+coffee+consumption`;
            window.open(url, ""_blank"");
          });
      });
  </script>
</body>
</html>
```",Correct,90,91
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Scatterplot with query widgets showing the Domestic Consumption and Exports of the given dataset. Add a slider to represent the Year.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coffee Consumption Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <div id=""chart""></div>
  <div id=""slider""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const slider = d3.select(""#slider"")
      .append(""input"")
      .attr(""type"", ""range"")
      .attr(""min"", 0)
      .attr(""max"", 0)
      .attr(""value"", 0);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
      data.forEach(d => {
        d.Year = +d.Year;
        d[""Domestic Consumption""] = +d[""Domestic Consumption""];
        d.Exports = +d.Exports;
      });

      const years = Array.from(new Set(data.map(d => d.Year)));
      slider.attr(""min"", 0)
        .attr(""max"", years.length - 1)
        .attr(""value"", 0);

      const xScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Domestic Consumption""])])
        .range([0, width]);

      const yScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.Exports)])
        .range([height, 0]);

      const xAxis = d3.axisBottom(xScale)
        .ticks(5);

      const yAxis = d3.axisLeft(yScale)
        .ticks(5);

      svg.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(xAxis);

      svg.append(""g"")
        .call(yAxis);

      svg.append(""text"")
        .attr(""transform"", `translate(${width / 2}, ${height + margin.bottom - 5})`)
        .style(""text-anchor"", ""middle"")
        .text(""Domestic Consumption"");

      svg.append(""text"")
        .attr(""transform"", `rotate(-90) translate(${-height / 2}, ${-margin.left + 15})`)
        .style(""text-anchor"", ""middle"")
        .text(""Exports"");

      const points = svg.selectAll(""circle"")
        .data(data.filter(d => d.Year === years[0]))
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScale(d[""Domestic Consumption""]))
        .attr(""cy"", d => yScale(d.Exports))
        .attr(""r"", 5);

      slider.on(""input"", () => {
        const yearIndex = +slider.property(""value"");
        const year = years[yearIndex];
        points.data(data.filter(d => d.Year === year))
          .transition()
          .duration(500)
          .attr(""cx"", d => xScale(d[""Domestic Consumption""]))
          .attr(""cy"", d => yScale(d.Exports));
      });
    });
  </script>
</body>
</html>
```",Unexpected Execution Result,91,92
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Scatterplot showing the Domestic Consumption of USA. Add animated transitions that connect these points using lines in order.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coffee Consumption Scatterplot</title>
  <style>
    /* Add some basic styling to our chart */
    .chart {
      width: 800px;
      height: 600px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <svg class=""chart""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    // Set up the dimensions of our chart
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    // Create the SVG element
    const svg = d3.select('.chart')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    // Load the data
    d3.csv('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
      .then(data => {
        // Filter the data for USA
        const usaData = data.filter(d => d.Country === 'USA');

        // Convert the data types
        usaData.forEach(d => {
          d['Year'] = +d['Year'];
          d['Domestic Consumption'] = +d['Domestic Consumption'];
        });

        // Create the scales
        const xScale = d3.scaleLinear()
          .domain(d3.extent(usaData, d => d['Year']))
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain(d3.extent(usaData, d => d['Domestic Consumption']))
          .range([height, 0]);

        // Create the line generator
        const line = d3.line()
          .x(d => xScale(d['Year']))
          .y(d => yScale(d['Domestic Consumption']));

        // Create the scatterplot
        const points = svg.selectAll('circle')
          .data(usaData)
          .enter()
          .append('circle')
          .attr('cx', d => xScale(d['Year']))
          .attr('cy', d => yScale(d['Domestic Consumption']))
          .attr('r', 5)
          .attr('fill', 'blue');

        // Create the line
        const path = svg.append('path')
          .datum(usaData)
          .attr('d', line)
          .attr('stroke', 'blue')
          .attr('stroke-width', 2)
          .attr('fill', 'none');

        // Add transitions
        let index = 0;
        const transition = () => {
          points.transition()
            .duration(1000)
            .attr('cx', d => xScale(d['Year']))
            .attr('cy', d => yScale(d['Domestic Consumption']));

          path.transition()
            .duration(1000)
            .attrTween('d', () => {
              const interpolate = d3.interpolateNumber(0, 1);
              return t => {
                const interpolatedData = usaData.slice(0, Math.floor(interpolate(t) * usaData.length));
                return line(interpolatedData);
              };
            });

          index++;
          if (index < usaData.length) {
            setTimeout(transition, 1000);
          }
        };

        transition();

        // Add axes
        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(xAxis);

        svg.append('g')
          .call(yAxis);
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,92,93
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Domestic Consumption of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Line Chart</title>
    <style>
        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 2px;
        }

        .line:hover {
            stroke-width: 4px;
        }

        .axis text {
            font-size: 12px;
        }

        .axis path,
        .axis line {
            fill: none;
            stroke: #777;
            stroke-width: 1;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 50, right: 50, bottom: 50, left: 50 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"")
            .then(data => {
                data.forEach(d => {
                    d.Year = +d.Year;
                    d[""Domestic Consumption""] = +d[""Domestic Consumption""];
                });

                const countries = [...new Set(data.map(d => d.Country))];

                const xScale = d3.scaleLinear()
                    .domain(d3.extent(data, d => d.Year))
                    .range([0, width]);

                const yScale = d3.scaleLinear()
                    .domain([0, d3.max(data, d => d[""Domestic Consumption""])])
                    .range([height, 0]);

                const line = d3.line()
                    .x(d => xScale(d.Year))
                    .y(d => yScale(d[""Domestic Consumption""]));

                svg.selectAll(""path"")
                    .data(countries)
                    .enter()
                    .append(""path"")
                    .datum(d => data.filter(f => f.Country === d))
                    .attr(""class"", ""line"")
                    .attr(""d"", line)
                    .attr(""stroke"", (d, i) => d3.schemeCategory10[i])
                    .on(""mouseover"", function(event, d) {
                        d3.select(this)
                            .attr(""stroke-width"", 4);
                    })
                    .on(""mouseout"", function(event, d) {
                        d3.select(this)
                            .attr(""stroke-width"", 2);
                    });

                svg.append(""g"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(d3.axisBottom(xScale));

                svg.append(""g"")
                    .call(d3.axisLeft(yScale));

                svg.append(""text"")
                    .attr(""transform"", `translate(${width / 2}, ${height + 30})`)
                    .attr(""text-anchor"", ""middle"")
                    .text(""Year"");

                svg.append(""text"")
                    .attr(""transform"", `rotate(-90) translate(${-height / 2}, ${-30})`)
                    .attr(""text-anchor"", ""middle"")
                    .text(""Domestic Consumption"");
            });
    </script>
</body>
</html>
```",Correct,93,94
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Bar Chart that visualizes the Domestic Consumption for each Country in 2017. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Bar Chart</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .chart {
            margin: 50px auto;
        }
        
        .axis text {
            font-size: 12px;
        }
        
        .axis path,
        .axis line {
            fill: none;
            stroke: #777;
            stroke-width: 1;
        }
    </style>
</head>
<body>
    <div class=""chart"" id=""chart""></div>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 40 };
        const width = 800 - margin.left - margin.right;
        const height = 500 - margin.top - margin.bottom;
        
        const svg = d3.select(""#chart"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            data.forEach(d => {
                d[""Year""] = +d[""Year""];
                d[""Domestic Consumption""] = +d[""Domestic Consumption""];
            });
            
            const filteredData = data.filter(d => d[""Year""] === 2017);
            
            const x = d3.scaleBand()
                .domain(filteredData.map(d => d[""Country""]))
                .range([0, width])
                .padding(0.2);
            
            const y = d3.scaleLinear()
                .domain([0, d3.max(filteredData, d => d[""Domestic Consumption""])])
                .range([height, 0]);
            
            svg.append(""g"")
                .attr(""transform"", `translate(0, ${height})`)
                .call(d3.axisBottom(x));
            
            svg.append(""g"")
                .call(d3.axisLeft(y));
            
            svg.selectAll(""bar"")
                .data(filteredData)
                .enter()
                .append(""rect"")
                .attr(""x"", d => x(d[""Country""]))
                .attr(""y"", d => y(d[""Domestic Consumption""]))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d[""Domestic Consumption""]));
            
            const zoom = d3.zoom()
                .scaleExtent([1, 10])
                .extent([[-Infinity, -Infinity], [Infinity, Infinity]])
                .on(""zoom"", zoomed);
            
            svg.call(zoom);
            
            function zoomed() {
                svg.selectAll(""rect"")
                    .attr(""transform"", d3.event.transform);
                
                svg.select("".x-axis"")
                    .attr(""transform"", d3.event.transform);
                
                svg.select("".y-axis"")
                    .attr(""transform"", d3.event.transform);
            }
        });
    </script>
</body>
</html>
```",Execution Error,94,95
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Bar Chart that visualizes the Domestic Consumption for each Country in 2017. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coffee Consumption Bar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 800px;
      height: 600px;
      border: 1px solid black;
    }
    .bar {
      fill: steelblue;
    }
    .bar:hover {
      fill: brown;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg class=""chart""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;
    const svg = d3.select(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Year""] = +d[""Year""];
          d[""Domestic Consumption""] = +d[""Domestic Consumption""];
        });

        const filteredData = data.filter(d => d[""Year""] === 2017);

        const x = d3.scaleBand()
          .domain(filteredData.map(d => d[""Country""]))
          .range([0, width])
          .padding(0.2);

        const y = d3.scaleLinear()
          .domain([0, d3.max(filteredData, d => d[""Domestic Consumption""])])
          .range([height, 0]);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(x));

        svg.append(""g"")
          .call(d3.axisLeft(y));

        const bars = svg.selectAll(""rect"")
          .data(filteredData)
          .enter()
          .append(""rect"")
          .attr(""class"", ""bar"")
          .attr(""x"", d => x(d[""Country""]))
          .attr(""y"", d => y(d[""Domestic Consumption""]))
          .attr(""width"", x.bandwidth())
          .attr(""height"", d => height - y(d[""Domestic Consumption""]));

        let drag = d3.drag()
          .on(""start"", dragstarted)
          .on(""drag"", dragged)
          .on(""end"", dragended);

        bars.call(drag);

        function dragstarted(event, d) {
          d3.select(this).raise();
        }

        function dragged(event, d) {
          const newX = event.x - x.bandwidth() / 2;
          const newY = event.y;
          d3.select(this)
            .attr(""x"", newX)
            .attr(""y"", newY);
        }

        function dragended(event, d) {
          const country = d[""Country""];
          const newX = event.x - x.bandwidth() / 2;
          const index = filteredData.findIndex(d => d[""Country""] === country);
          filteredData.splice(index, 1);
          filteredData.splice(Math.floor(newX / x.bandwidth()), 0, d);
          x.domain(filteredData.map(d => d[""Country""]));
          svg.selectAll(""rect"")
            .transition()
            .duration(500)
            .attr(""x"", d => x(d[""Country""]));
          svg.selectAll(""g"")
            .transition()
            .duration(500)
            .call(d3.axisBottom(x));
        }
      });
  </script>
</body>
</html>
```",Execution Error,95,96
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Bar Chart that visualizes the Domestic Consumption for each Country in 2017. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Domestic Consumption.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coffee Consumption Bar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 40px auto;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
    .bar {
      fill: steelblue;
    }
    .bar:hover {
      fill: brown;
    }
    .sort-button {
      position: absolute;
      top: 10px;
      right: 10px;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <button class=""sort-button"" id=""sort-ascending"">Sort Ascending</button>
  <button class=""sort-button"" id=""sort-descending"">Sort Descending</button>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 300 - margin.top - margin.bottom;

    const svg = d3.select("".chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Year""] = +d[""Year""];
          d[""Domestic Consumption""] = +d[""Domestic Consumption""];
        });

        const filteredData = data.filter(d => d[""Year""] === 2017);

        const xScale = d3.scaleBand()
          .domain(filteredData.map(d => d[""Country""]))
          .range([0, width])
          .padding(0.2);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(filteredData, d => d[""Domestic Consumption""])])
          .range([height, 0]);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        const bars = svg.selectAll(""rect"")
          .data(filteredData)
          .enter()
          .append(""rect"")
          .attr(""x"", d => xScale(d[""Country""]))
          .attr(""y"", d => yScale(d[""Domestic Consumption""]))
          .attr(""width"", xScale.bandwidth())
          .attr(""height"", d => height - yScale(d[""Domestic Consumption""]));

        d3.select(""#sort-ascending"")
          .on(""click"", () => {
            filteredData.sort((a, b) => a[""Domestic Consumption""] - b[""Domestic Consumption""]);
            xScale.domain(filteredData.map(d => d[""Country""]));
            bars.transition()
              .duration(1000)
              .attr(""x"", d => xScale(d[""Country""]));
          });

        d3.select(""#sort-descending"")
          .on(""click"", () => {
            filteredData.sort((a, b) => b[""Domestic Consumption""] - a[""Domestic Consumption""]);
            xScale.domain(filteredData.map(d => d[""Country""]));
            bars.transition()
              .duration(1000)
              .attr(""x"", d => xScale(d[""Country""]));
          });
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,96,97
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Scatterplot that visualizes the relationship between Domestic Consumption and Exports. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = csvData.map(row => {
                    const columns = row.split(',');
                    return [parseFloat(columns[2]), parseFloat(columns[3])];
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    tooltip: {
                        trigger: 'item',
                        formatter: function(params) {
                            return `Domestic Consumption: ${params.data[0]}<br>Exports: ${params.data[1]}`;
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Domestic Consumption'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Exports'
                    },
                    series: [{
                        type: 'scatter',
                        data: chartData,
                        symbolSize: 10,
                        itemStyle: {
                            opacity: 0.8
                        }
                    }]
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,97,98
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Scatterplot that visualizes the relationship between Domestic Consumption and Exports. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = csvData.map(row => {
                    const columns = row.split(',');
                    return [parseFloat(columns[2]), parseFloat(columns[3])];
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Domestic Consumption vs Exports'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Domestic Consumption'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Exports'
                    },
                    series: [{
                        type: 'scatter',
                        data: chartData,
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        },
                        brush: {
                            throttleType: 'debounce',
                            throttleDelay: 300
                        }
                    }],
                    brush: {
                        toolbox: ['rect', 'polygon', 'lineX', 'lineY', 'keep', 'clear'],
                        xAxisIndex: 0,
                        yAxisIndex: 0,
                        brushLink: 'all',
                        outOfBrush: {
                            colorAlpha: 0.1
                        }
                    }
                });

                chart.on('brushSelected', params => {
                    const selectedData = params.batch[0].selected[0].data;
                    console.log(selectedData);
                });
            });
    </script>
</body>
</html>
```",Correct,98,99
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Scatterplot that visualizes the relationship between Domestic Consumption and Exports. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = csvData.map(row => {
                    const columns = row.split(',');
                    return [parseFloat(columns[2]), parseFloat(columns[3])];
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Domestic Consumption vs Exports'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Domestic Consumption'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Exports'
                    },
                    series: [{
                        type: 'scatter',
                        data: chartData
                    }],
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 100
                        },
                        {
                            start: 0,
                            end: 100
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,99,100
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Domestic Consumption and Exports. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = csvData.map(row => {
                    const [Year, Country, DomesticConsumption, Exports] = row.split(',');
                    return [parseFloat(DomesticConsumption), parseFloat(Exports), Country];
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Coffee Consumption Scatterplot'
                    },
                    tooltip: {
                        formatter: params => {
                            return `${params.data[2]}<br>Domestic Consumption: ${params.data[0]}<br>Exports: ${params.data[1]}`;
                        }
                    },
                    xAxis: {
                        name: 'Domestic Consumption'
                    },
                    yAxis: {
                        name: 'Exports'
                    },
                    series: [{
                        type: 'scatter',
                        data: chartData,
                        itemStyle: {
                            opacity: 0.8
                        },
                        emphasis: {
                            itemStyle: {
                                opacity: 1
                            }
                        }
                    }],
                    visualMap: {
                        type: 'piecewise',
                        show: false,
                        dimension: 2,
                        pieces: chartData.map((data, index) => {
                            return {
                                value: index,
                                label: data[2],
                                color: `#${Math.floor(Math.random() * 16777215).toString(16)}`
                            };
                        })
                    }
                });

                chart.on('click', params => {
                    if (params.data) {
                        const country = params.data[2];
                        window.open(`https://www.google.com/search?q=${country}+coffee+consumption`, '_blank');
                    }
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,100,101
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Scatterplot with query widgets showing the Domestic Consumption and Exports of the given dataset. Add a slider to represent the Year.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-gl@2.0.8/dist/echarts-gl.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-stat@1.1.1/dist/ecStat.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/extension/bmap.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-gl@2.0.8/dist/echarts-gl.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-stat@1.1.1/dist/ecStat.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/extension/dataTool.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <div>
        <label for=""country"">Country:</label>
        <select id=""country"" name=""country""></select>
    </div>
    <div>
        <label for=""year"">Year:</label>
        <input type=""range"" id=""year"" name=""year"" min=""0"" max=""0"" step=""1"" value=""0"">
        <span id=""year-value""></span>
    </div>

    <script>
        $.ajax({
            type: 'GET',
            url: 'https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv',
            dataType: 'text',
            success: function(data) {
                var csv = $.csv.toArrays(data);
                var chartData = [];
                var countries = [];
                var years = [];
                csv.forEach(function(row, index) {
                    if (index > 0) {
                        var country = row[1];
                        var year = parseInt(row[0]);
                        var domesticConsumption = parseFloat(row[2]);
                        var exports = parseFloat(row[3]);
                        chartData.push([country, year, domesticConsumption, exports]);
                        if (countries.indexOf(country) === -1) {
                            countries.push(country);
                        }
                        if (years.indexOf(year) === -1) {
                            years.push(year);
                        }
                    }
                });
                chartData.sort(function(a, b) {
                    return a[1] - b[1];
                });
                years.sort(function(a, b) {
                    return a - b;
                });

                var myChart = echarts.init(document.getElementById('chart'));
                var option = {
                    title: {
                        text: 'Coffee Consumption Scatterplot'
                    },
                    tooltip: {
                        trigger: 'item',
                        formatter: function(params) {
                            return params.value[0] + ': ' + params.value[2] + ' (' + params.value[3] + ')';
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Domestic Consumption'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Exports'
                    },
                    series: [{
                        type: 'scatter',
                        data: chartData.filter(function(item) {
                            return item[1] === years[0];
                        }),
                        dimensions: ['country', 'year', 'domesticConsumption', 'exports']
                    }]
                };
                myChart.setOption(option);

                countries.forEach(function(country) {
                    $('#country').append('<option value=""' + country + '"">' + country + '</option>');
                });
                $('#year').attr('min', 0);
                $('#year').attr('max', years.length - 1);
                $('#year-value').text(years[0]);
                $('#year').on('input', function() {
                    var yearIndex = parseInt($(this).val());
                    var year = years[yearIndex];
                    $('#year-value').text(year);
                    myChart.setOption({
                        series: [{
                            data: chartData.filter(function(item) {
                                return item[1] === year;
                            })
                        }]
                    });
                });
                $('#country').on('change', function() {
                    var country = $(this).val();
                    myChart.setOption({
                        series: [{
                            data: chartData.filter(function(item) {
                                return item[0] === country && item[1] === years[parseInt($('#year').val())];
                            })
                        }]
                    });
                });
            }
        });
    </script>
</body>
</html>
```",Initialization Error,101,102
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Scatterplot showing the Domestic Consumption of USA. Add animated transitions that connect these points using lines in order.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption of USA</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const usaData = csvData.filter(row => row.split(',')[1] === 'USA')
                    .map(row => row.split(','))
                    .map(row => [parseInt(row[0]), parseFloat(row[2])]);

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    title: {
                        text: 'Coffee Consumption of USA'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    xAxis: {
                        type: 'category',
                        data: usaData.map(row => row[0])
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: usaData.map(row => row[1]),
                            symbolSize: 10,
                            label: {
                                show: true,
                                formatter: '{c}'
                            },
                            encode: {
                                x: 0,
                                y: 1
                            }
                        },
                        {
                            type: 'line',
                            data: usaData.map(row => row[1]),
                            symbolSize: 10,
                            label: {
                                show: true,
                                formatter: '{c}'
                            },
                            encode: {
                                x: 0,
                                y: 1
                            },
                            animationDuration: 3000,
                            animationEasing: 'cubicInOut'
                        }
                    ],
                    animationDuration: 3000,
                    animationEasing: 'cubicInOut'
                };
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,102,103
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Domestic Consumption of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Line Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const years = [];
                const countryData = {};

                csvData.forEach(row => {
                    const [year, country, domesticConsumption] = row.split(',');
                    if (!years.includes(year)) {
                        years.push(year);
                    }
                    if (!countryData[country]) {
                        countryData[country] = [];
                    }
                    countryData[country].push(parseFloat(domesticConsumption));
                });

                const seriesData = Object.keys(countryData).map(country => ({
                    name: country,
                    type: 'line',
                    data: countryData[country],
                    emphasis: {
                        focus: 'series'
                    }
                }));

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Coffee Consumption Line Chart'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    legend: {
                        data: Object.keys(countryData)
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    toolbox: {
                        feature: {
                            saveAsImage: {}
                        }
                    },
                    xAxis: {
                        type: 'category',
                        boundaryGap: false,
                        data: years
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: seriesData
                });
            });
    </script>
</body>
</html>
```",Correct,103,104
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Bar Chart that visualizes the Domestic Consumption for each Country in 2017. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [year, country, domesticConsumption] = row.split(',');
                    if (year === '2017') {
                        chartData[country] = parseFloat(domesticConsumption);
                    }
                });
                const countries = Object.keys(chartData);
                const consumptions = Object.values(chartData);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Domestic Coffee Consumption in 2017'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    xAxis: {
                        type: 'category',
                        data: countries
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            name: 'Domestic Consumption',
                            type: 'bar',
                            data: consumptions
                        }
                    ],
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 100
                        },
                        {
                            start: 0,
                            end: 100,
                            handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6v1.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',
                            handleSize: '80%',
                            handleStyle: {
                                color: '#fff',
                                shadowBlur: 3,
                                shadowColor: 'rgba(0, 0, 0, 0.6)',
                                shadowOffsetX: 2,
                                shadowOffsetY: 2
                            }
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,104,105
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Bar Chart that visualizes the Domestic Consumption for each Country in 2017. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [year, country, domesticConsumption] = row.split(',');
                    if (year === '2017') {
                        chartData[country] = parseFloat(domesticConsumption);
                    }
                });
                const countries = Object.keys(chartData);
                const values = Object.values(chartData);

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Domestic Coffee Consumption in 2017'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    xAxis: {
                        type: 'category',
                        data: countries,
                        axisLabel: {
                            rotate: 45
                        }
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            data: values,
                            type: 'bar',
                            itemStyle: {
                                opacity: 0.8
                            },
                            emphasis: {
                                itemStyle: {
                                    opacity: 1
                                }
                            }
                        }
                    ],
                    dataZoom: [
                        {
                            type: 'inside'
                        },
                        {
                            type: 'slider'
                        }
                    ],
                    graphic: countries.map((country, index) => ({
                        type: 'text',
                        position: [index * 100, 0],
                        style: {
                            text: country,
                            fontSize: 12,
                            fill: '#333',
                            cursor: 'move'
                        },
                        draggable: true,
                        ondrag: (params, dx, dy) => {
                            const newIndex = Math.round(params.target.position[0] / 100);
                            if (newIndex >= 0 && newIndex < countries.length) {
                                [countries[index], countries[newIndex]] = [countries[newIndex], countries[index]];
                                [values[index], values[newIndex]] = [values[newIndex], values[index]];
                                chart.setOption({
                                    xAxis: {
                                        data: countries
                                    },
                                    series: [
                                        {
                                            data: values
                                        }
                                    ]
                                });
                            }
                        }
                    }))
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,105,106
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Bar Chart that visualizes the Domestic Consumption for each Country in 2017. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Domestic Consumption.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <select id=""sort-order"">
        <option value=""desc"">Descending</option>
        <option value=""asc"">Ascending</option>
    </select>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = csvData.reduce((acc, row) => {
                    const [year, country, domesticConsumption] = row.split(',');
                    if (year === '2017') {
                        acc.push({ country, domesticConsumption: parseFloat(domesticConsumption) });
                    }
                    return acc;
                }, []);

                const chart = echarts.init(document.getElementById('chart'));
                const sortOrderSelect = document.getElementById('sort-order');

                sortOrderSelect.addEventListener('change', () => {
                    const sortOrder = sortOrderSelect.value;
                    const sortedChartData = chartData.sort((a, b) => {
                        if (sortOrder === 'desc') {
                            return b.domesticConsumption - a.domesticConsumption;
                        } else {
                            return a.domesticConsumption - b.domesticConsumption;
                        }
                    });

                    chart.setOption({
                        xAxis: {
                            type: 'category',
                            data: sortedChartData.map(item => item.country),
                            axisLabel: {
                                rotate: 45
                            }
                        },
                        yAxis: {
                            type: 'value'
                        },
                        series: [
                            {
                                type: 'bar',
                                data: sortedChartData.map(item => item.domesticConsumption),
                                animationDuration: 1000,
                                animationEasing: 'cubicInOut'
                            }
                        ]
                    });
                });

                chart.setOption({
                    xAxis: {
                        type: 'category',
                        data: chartData.map(item => item.country),
                        axisLabel: {
                            rotate: 45
                        }
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            type: 'bar',
                            data: chartData.map(item => item.domesticConsumption),
                            animationDuration: 1000,
                            animationEasing: 'cubicInOut'
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,106,107
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Scatterplot that visualizes the relationship between Domestic Consumption and Exports. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coffee Consumption Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to make the chart more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    // Define the Vega-Lite specification
    var spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Domestic Consumption"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Exports"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Country"", ""type"": ""nominal""},
          {""field"": ""Year"", ""type"": ""temporal""},
          {""field"": ""Domestic Consumption"", ""type"": ""quantitative""},
          {""field"": ""Exports"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""axis"": {
          ""labelFontSize"": 14,
          ""titleFontSize"": 16
        }
      }
    };

    // Embed the chart in the #vis div
    vegaEmbed(""#vis"", spec, {actions: false});
  </script>
</body>
</html>
```",Unexpected Execution Result,107,108
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Scatterplot that visualizes the relationship between Domestic Consumption and Exports. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coffee Consumption Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to make the chart more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    // Define the Vega-Lite specification
    var spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Exports"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Domestic Consumption"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Year"", ""type"": ""nominal""},
          {""field"": ""Country"", ""type"": ""nominal""},
          {""field"": ""Exports"", ""type"": ""quantitative""},
          {""field"": ""Domestic Consumption"", ""type"": ""quantitative""}
        ]
      },
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x"", ""y""]}
      }
    };

    // Embed the Vega-Lite chart in the HTML page
    vegaEmbed(""#vis"", spec, {actions: false});
  </script>
</body>
</html>
```",Correct,108,109
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Scatterplot that visualizes the relationship between Domestic Consumption and Exports. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coffee Consumption Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Domestic Consumption"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Exports"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Year"", ""type"": ""nominal""},
          {""field"": ""Country"", ""type"": ""nominal""},
          {""field"": ""Domestic Consumption"", ""type"": ""quantitative""},
          {""field"": ""Exports"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""view"": {""continuousWidth"": 400, ""continuousHeight"": 300},
        ""scale"": {""zoom"": ""wheel""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Execution Result,109,110
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Domestic Consumption and Exports. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coffee Consumption Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to make the chart more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    // Define the Vega-Lite specification
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Exports"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Domestic Consumption"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Year"", ""type"": ""nominal""},
          {""field"": ""Country"", ""type"": ""nominal""},
          {""field"": ""Exports"", ""type"": ""quantitative""},
          {""field"": ""Domestic Consumption"", ""type"": ""quantitative""}
        ],
        ""href"": {
          ""field"": ""Country"",
          ""type"": ""nominal"",
          ""formula"": ""url('https://www.google.com/search?q=' + datum.Country)""
        }
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""mark"": {""tooltip"": {""content"": ""encoding""}}
      }
    };

    // Embed the chart in the #vis div
    vegaEmbed(""#vis"", spec, {actions: false});
  </script>
</body>
</html>
```",Correct,110,111
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Scatterplot with query widgets showing the Domestic Consumption and Exports of the given dataset. Add a slider to represent the Year.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coffee Consumption Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to make the visualization more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    // Define the Vega-Lite specification
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Domestic Consumption"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Exports"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Country"", ""type"": ""nominal""},
        ""tooltip"": [
          {""field"": ""Year"", ""type"": ""temporal""},
          {""field"": ""Country"", ""type"": ""nominal""},
          {""field"": ""Domestic Consumption"", ""type"": ""quantitative""},
          {""field"": ""Exports"", ""type"": ""quantitative""}
        ]
      },
      ""transform"": [
        {""filter"": ""datum.Year >= year && datum.Year <= year + 10""}
      ],
      ""params"": [
        {
          ""name"": ""year"",
          ""value"": 2000,
          ""bind"": {""input"": ""range"", ""min"": 2000, ""max"": 2015, ""step"": 1}
        }
      ]
    };

    // Embed the visualization in the #vis div
    vegaEmbed(""#vis"", spec, { actions: false });
  </script>
</body>
</html>
```",Unexpected Initial Result,111,112
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Scatterplot showing the Domestic Consumption of USA. Add animated transitions that connect these points using lines in order.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coffee Consumption Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 800,
      ""height"": 600,
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Country === 'USA'""},
        {""sort"": [""Year""]}
      ],
      ""mark"": {
        ""type"": ""line"",
        ""point"": true
      },
      ""encoding"": {
        ""x"": {""field"": ""Year"", ""type"": ""temporal""},
        ""y"": {""field"": ""Domestic Consumption"", ""type"": ""quantitative""},
        ""order"": {""field"": ""Year""}
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""labelFontSize"": 14, ""titleFontSize"": 16},
        ""legend"": {""labelFontSize"": 14, ""titleFontSize"": 16}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,112,113
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Domestic Consumption of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coffee Consumption Line Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to make the chart more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    // Define the Vega-Lite specification
    var spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": {
        ""type"": ""line"",
        ""point"": true,
        ""tooltip"": true
      },
      ""encoding"": {
        ""x"": {
          ""field"": ""Year"",
          ""type"": ""temporal""
        },
        ""y"": {
          ""field"": ""Domestic Consumption"",
          ""type"": ""quantitative""
        },
        ""color"": {
          ""field"": ""Country"",
          ""type"": ""nominal""
        }
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""mark"": {
          ""invalid"": null
        }
      },
      ""selection"": {
        ""highlight"": {
          ""type"": ""single"",
          ""empty"": ""none"",
          ""on"": ""mouseover"",
          ""fields"": [""Country""],
          ""nearest"": true
        }
      },
      ""transform"": [
        {
          ""filter"": {
            ""selection"": ""highlight""
          }
        }
      ]
    };

    // Embed the chart in the #vis div
    vegaEmbed(""#vis"", spec, { actions: false });
  </script>
</body>
</html>
```",Initialization Error,113,114
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Bar Chart that visualizes the Domestic Consumption for each Country in 2017. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coffee Consumption Bar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2017""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Country"", ""type"": ""nominal"", ""axis"": {""title"": ""Country""}},
        ""y"": {""field"": ""Domestic Consumption"", ""type"": ""quantitative"", ""axis"": {""title"": ""Domestic Consumption""}}
      },
      ""config"": {
        ""view"": {""continuousWidth"": 400, ""continuousHeight"": 300},
        ""axis"": {""labelFontSize"": 12, ""titleFontSize"": 14},
        ""mark"": {""tooltip"": true}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Execution Result,114,115
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Bar Chart that visualizes the Domestic Consumption for each Country in 2017. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coffee Consumption Bar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to make the chart more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    // Define the Vega-Lite specification
    var spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2017""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Country"", ""type"": ""nominal"", ""sort"": ""-y""},
        ""y"": {""field"": ""Domestic Consumption"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Country"", ""type"": ""nominal""},
          {""field"": ""Domestic Consumption"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""domainWidth"": 1}
      },
      ""interaction"": {
        ""select"": {
          ""type"": ""interval"",
          ""bind"": ""scales"",
          ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
          ""translate"": ""[mousedown[!event.shiftKey], mouseup] > mousemove!"",
          ""zoom"": ""wheel![event.shiftKey]""
        }
      }
    };

    // Embed the chart in the #vis div
    vegaEmbed(""#vis"", spec, {actions: false});
  </script>
</body>
</html>
```",Unexpected Execution Result,115,116
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Bar Chart that visualizes the Domestic Consumption for each Country in 2017. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Domestic Consumption.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coffee Consumption Bar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    #chart {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""chart""></div>
  <select id=""sort-order"">
    <option value=""descending"">Descending</option>
    <option value=""ascending"">Ascending</option>
  </select>

  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2017""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Country"", ""type"": ""nominal"", ""sort"": {""field"": ""Domestic Consumption"", ""op"": ""sum"", ""order"": ""descending""}},
        ""y"": {""field"": ""Domestic Consumption"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Country"", ""type"": ""nominal""},
          {""field"": ""Domestic Consumption"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""labelFontSize"": 14, ""titleFontSize"": 16}
      }
    };

    vegaEmbed(""#chart"", spec).then(function(result) {
      const sortOrderSelect = document.getElementById(""sort-order"");
      sortOrderSelect.addEventListener(""change"", function() {
        const sortOrder = sortOrderSelect.value;
        spec.encoding.x.sort.order = sortOrder;
        vegaEmbed(""#chart"", spec);
      });
    });
  </script>
</body>
</html>
```",Unexpected Initial Result,116,117
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Domestic Consumption and Exports, and a Bar Chart on the right that displays Country versus Domestic Consumption.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coffee Consumption Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: inline-block;
      vertical-align: top;
    }
    .scatterplot {
      width: 500px;
      height: 400px;
      margin: 20px;
    }
    .barchart {
      width: 500px;
      height: 400px;
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart scatterplot"" id=""scatterplot""></div>
  <div class=""chart barchart"" id=""barchart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const svgScatterplot = d3.select(""#scatterplot"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const svgBarchart = d3.select(""#barchart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
      data.forEach(d => {
        d[""Domestic Consumption""] = +d[""Domestic Consumption""];
        d.Exports = +d.Exports;
      });

      const xScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Domestic Consumption""])])
        .range([0, width]);

      const yScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.Exports)])
        .range([height, 0]);

      svgScatterplot.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScaleScatterplot(d[""Domestic Consumption""]))
        .attr(""cy"", d => yScaleScatterplot(d.Exports))
        .attr(""r"", 5);

      svgScatterplot.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleScatterplot));

      svgScatterplot.append(""g"")
        .call(d3.axisLeft(yScaleScatterplot));

      const xScaleBarchart = d3.scaleBand()
        .domain(data.map(d => d.Country))
        .range([0, width])
        .padding(0.2);

      const yScaleBarchart = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Domestic Consumption""])])
        .range([height, 0]);

      svgBarchart.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", d => xScaleBarchart(d.Country))
        .attr(""y"", d => yScaleBarchart(d[""Domestic Consumption""]))
        .attr(""width"", xScaleBarchart.bandwidth())
        .attr(""height"", d => height - yScaleBarchart(d[""Domestic Consumption""]));

      svgBarchart.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleBarchart));

      svgBarchart.append(""g"")
        .call(d3.axisLeft(yScaleBarchart));
    });
  </script>
</body>
</html>
```",Correct,117,118
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Domestic Consumption and Exports, and a Bar Chart on the right that displays Country versus Domestic Consumption. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coffee Consumption Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: inline-block;
      vertical-align: top;
    }
    .scatterplot {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
    .barchart {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart scatterplot"" id=""scatterplot""></div>
  <div class=""chart barchart"" id=""barchart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svgScatterplot = d3.select(""#scatterplot"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const svgBarchart = d3.select(""#barchart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    let data = [];
    let brush = d3.brush()
      .extent([[0, 0], [width, height]])
      .on(""brush end"", brushed);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(csv => {
      data = csv.map(d => ({
        Year: +d.Year,
        Country: d.Country,
        ""Domestic Consumption"": +d[""Domestic Consumption""],
        Exports: +d.Exports,
        ""Import Price"": +d[""Import Price""],
        ""Export Price"": +d[""Export Price""],
        ""Total Production"": +d[""Total Production""]
      }));

      const xScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Domestic Consumption""])])
        .range([0, width]);

      const yScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.Exports)])
        .range([height, 0]);

      const xScaleBarchart = d3.scaleBand()
        .domain(data.map(d => d.Country))
        .range([0, width])
        .padding(0.2);

      const yScaleBarchart = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Domestic Consumption""])])
        .range([height, 0]);

      svgScatterplot.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScaleScatterplot(d[""Domestic Consumption""]))
        .attr(""cy"", d => yScaleScatterplot(d.Exports))
        .attr(""r"", 5)
        .attr(""fill"", ""steelblue"");

      svgScatterplot.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleScatterplot));

      svgScatterplot.append(""g"")
        .call(d3.axisLeft(yScaleScatterplot));

      svgScatterplot.append(""g"")
        .call(brush);

      svgBarchart.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", d => xScaleBarchart(d.Country))
        .attr(""y"", d => yScaleBarchart(d[""Domestic Consumption""]))
        .attr(""width"", xScaleBarchart.bandwidth())
        .attr(""height"", d => height - yScaleBarchart(d[""Domestic Consumption""]))
        .attr(""fill"", ""steelblue"");

      svgBarchart.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleBarchart));

      svgBarchart.append(""g"")
        .call(d3.axisLeft(yScaleBarchart));
    });

    function brushed() {
      const selection = d3.event.selection;
      if (selection) {
        const minX = selection[0][0];
        const maxX = selection[1][0];
        const minY = selection[0][1];
        const maxY = selection[1][1];

        svgScatterplot.selectAll(""circle"")
          .classed(""selected"", d => {
            const x = xScaleScatterplot(d[""Domestic Consumption""]);
            const y = yScaleScatterplot(d.Exports);
            return x >= minX && x <= maxX && y >= minY && y <= maxY;
          });

        svgBarchart.selectAll(""rect"")
          .classed(""selected"", d => {
            const x = xScaleScatterplot(d[""Domestic Consumption""]);
            const y = yScaleScatterplot(d.Exports);
            return x >= minX && x <= maxX && y >= minY && y <= maxY;
          });
      } else {
        svgScatterplot.selectAll(""circle"")
          .classed(""selected"", false);

        svgBarchart.selectAll(""rect"")
          .classed(""selected"", false);
      }
    }
  </script>
</body>
</html>
```",Execution Error,118,119
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Domestic Consumption , while the pie chart represents the distribution of Exports.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coffee Consumption Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: block;
      margin: 20px auto;
    }
    .line-chart {
      width: 800px;
      height: 400px;
    }
    .pie-chart {
      width: 800px;
      height: 400px;
    }
  </style>
</head>
<body>
  <div class=""chart line-chart"" id=""line-chart""></div>
  <div class=""chart pie-chart"" id=""pie-chart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const lineChart = d3.select(""#line-chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const pieChart = d3.select(""#pie-chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${width / 2 + margin.left}, ${height / 2 + margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
      data.forEach(d => {
        d[""Year""] = +d[""Year""];
        d[""Domestic Consumption""] = +d[""Domestic Consumption""];
        d[""Exports""] = +d[""Exports""];
      });

      const lineXScale = d3.scaleLinear()
        .domain(d3.extent(data, d => d[""Year""]))
        .range([0, width]);

      const lineYScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Domestic Consumption""])])
        .range([height, 0]);

      lineChart.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(lineXScale));

      lineChart.append(""g"")
        .call(d3.axisLeft(lineYScale));

      lineChart.append(""path"")
        .datum(data)
        .attr(""fill"", ""none"")
        .attr(""stroke"", ""steelblue"")
        .attr(""stroke-width"", 1.5)
        .attr(""d"", d3.line()
          .x(d => lineXScale(d[""Year""]))
          .y(d => lineYScale(d[""Domestic Consumption""])));

      const pieData = d3.rollup(data, v => d3.sum(v, d => d[""Exports""]), d => d[""Country""]);

      const pieArc = d3.arc()
        .outerRadius(height / 2 - 20)
        .innerRadius(0);

      pieChart.selectAll(""path"")
        .data(pieData)
        .enter()
        .append(""path"")
        .attr(""fill"", (d, i) => d3.schemeCategory10[i])
        .attr(""d"", pieArc)
        .attr(""transform"", `translate(0, 0)`)
        .append(""title"")
        .text(d => `${d[0]}: ${d[1]}`);
    });
  </script>
</body>
</html>
```",Initialization Error,119,120
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Domestic Consumption , while the pie chart represents the distribution of Exports. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Exports for the selected group.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coffee Consumption Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: block;
    }
    .line-chart {
      width: 800px;
      height: 400px;
      margin: 50px auto;
    }
    .pie-chart {
      width: 800px;
      height: 400px;
      margin: 50px auto;
    }
  </style>
</head>
<body>
  <div class=""chart line-chart""></div>
  <div class=""chart pie-chart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const lineChart = d3.select('.line-chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    const pieChart = d3.select('.pie-chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left + width / 2}, ${margin.top + height / 2})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
      .then(data => {
        data.forEach(d => {
          d['Year'] = +d['Year'];
          d['Domestic Consumption'] = +d['Domestic Consumption'];
          d['Exports'] = +d['Exports'];
        });

        const xScale = d3.scaleLinear()
          .domain(d3.extent(data, d => d['Year']))
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Domestic Consumption'])])
          .range([height, 0]);

        const line = d3.line()
          .x(d => xScale(d['Year']))
          .y(d => yScale(d['Domestic Consumption']));

        lineChart.append('path')
          .datum(data)
          .attr('fill', 'none')
          .attr('stroke', 'steelblue')
          .attr('stroke-width', 1.5)
          .attr('d', line);

        lineChart.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        lineChart.append('g')
          .call(d3.axisLeft(yScale));

        const brush = d3.brushX()
          .extent([[0, 0], [width, height]])
          .on('brush end', brushed);

        lineChart.append('g')
          .attr('class', 'brush')
          .call(brush);

        function brushed() {
          const selection = d3.event.selection;
          if (selection) {
            const minX = xScale.invert(selection[0]);
            const maxX = xScale.invert(selection[1]);
            const filteredData = data.filter(d => d['Year'] >= minX && d['Year'] <= maxX);

            const pieData = d3.rollup(filteredData, v => d3.sum(v, d => d['Exports']), d => d['Country']);

            const pie = d3.pie()
              .value(d => d[1]);

            const arc = d3.arc()
              .outerRadius(Math.min(width, height) / 2 - 10)
              .innerRadius(0);

            pieChart.selectAll('path')
              .remove();

            pieChart.selectAll('path')
              .data(pie(pieData))
              .enter()
              .append('path')
              .attr('d', arc)
              .attr('fill', (d, i) => d3.schemeCategory10[i]);
          }
        }
      });
  </script>
</body>
</html>
```",Initialization Error,120,121
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Domestic Consumption, Exports, Import Price, and Export Price. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coffee Consumption Scatterplot Matrix</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
    .brush .extent {
      stroke: #fff;
      fill-opacity: .125;
      shape-rendering: crispEdges;
    }
  </style>
</head>
<body>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 100, right: 100, bottom: 100, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 800 - margin.top - margin.bottom;
    const dimensions = [""Domestic Consumption"", ""Exports"", ""Import Price"", ""Export Price""];
    const size = 200;

    const svg = d3.select(""body"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
      data.forEach(d => {
        dimensions.forEach(dim => {
          d[dim] = +d[dim];
        });
      });

      const x = dimensions.map(d => {
        return d3.scaleLinear()
          .domain(d3.extent(data, p => p[d]))
          .range([0, size]);
      });

      const y = dimensions.map(d => {
        return d3.scaleLinear()
          .domain(d3.extent(data, p => p[d]))
          .range([size, 0]);
      });

      const brush = d3.brush()
        .extent([[0, 0], [size, size]])
        .on(""brush"", brushed)
        .on(""end"", brushended);

      const cell = svg.selectAll("".cell"")
        .data(cross(dimensions, dimensions))
        .enter().append(""g"")
        .attr(""class"", ""cell"")
        .attr(""transform"", d => `translate(${d.i * size}, ${d.j * size})`);

      cell.append(""rect"")
        .attr(""class"", ""frame"")
        .attr(""x"", 0)
        .attr(""y"", 0)
        .attr(""width"", size)
        .attr(""height"", size);

      cell.append(""g"")
        .attr(""class"", ""x axis"")
        .attr(""transform"", `translate(0, ${size})`)
        .call(d3.axisBottom(x[d.dimensions[0].i]));

      cell.append(""g"")
        .attr(""class"", ""y axis"")
        .call(d3.axisLeft(y[d.dimensions[0].j]));

      cell.filter(d => d.i === d.j).append(""text"")
        .attr(""x"", size / 2)
        .attr(""y"", size / 2)
        .attr(""dy"", "".5em"")
        .attr(""text-anchor"", ""middle"")
        .text(d => d.dimensions[0]);

      const cellData = cell.filter(d => d.i !== d.j);

      cellData.append(""g"")
        .attr(""class"", ""points"")
        .selectAll(""circle"")
        .data(data)
        .enter().append(""circle"")
        .attr(""cx"", d => x[d.dimensions[0].i](d[d.dimensions[0].i]))
        .attr(""cy"", d => y[d.dimensions[0].j](d[d.dimensions[0].j]))
        .attr(""r"", 3);

      cellData.append(""g"")
        .attr(""class"", ""brush"")
        .call(brush)
        .selectAll(""rect"")
        .attr(""x"", 0)
        .attr(""y"", 0)
        .attr(""width"", size)
        .attr(""height"", size);

      function brushed() {
        const s = d3.event.selection;
        cellData.classed(""hidden"", d => {
          return !s || s[0][0] > x[d.dimensions[0].i](data[d.index][d.dimensions[0].i]) + 3 || s[1][0] < x[d.dimensions[0].i](data[d.index][d.dimensions[0].i]) - 3 || s[0][1] > y[d.dimensions[0].j](data[d.index][d.dimensions[0].j]) + 3 || s[1][1] < y[d.dimensions[0].j](data[d.index][d.dimensions[0].j]) - 3;
        });
      }

      function brushended() {
        if (!d3.event.selection) return;
        const s = d3.event.selection;
        cellData.classed(""hidden"", false);
      }

      function cross(a, b) {
        const c = [];
        for (let i = 0; i < a.length; i++) {
          for (let j = 0; j < b.length; j++) {
            c.push({ dimensions: [a[i], b[j]], i, j });
          }
        }
        return c;
      }
    });
  </script>
</body>
</html>
```",Initialization Error,121,122
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a brushable Scatterplot that visualizes the relationship between Domestic Consumption and Exports. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coffee Consumption Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .brush {
      fill: #ccc;
    }
    .brush .extent {
      fill-opacity: .3;
      stroke: #fff;
      shape-rendering: crispEdges;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <table id=""selected-data"">
    <thead>
      <tr>
        <th>Year</th>
        <th>Country</th>
        <th>Domestic Consumption</th>
        <th>Exports</th>
        <th>Import Price</th>
        <th>Export Price</th>
        <th>Total Production</th>
      </tr>
    </thead>
    <tbody id=""selected-data-body"">
    </tbody>
  </table>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 200, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Domestic Consumption""] = +d[""Domestic Consumption""];
          d.Exports = +d.Exports;
        });

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Domestic Consumption""])])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Exports)])
          .range([height, 0]);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        const brush = d3.brush()
          .extent([[0, 0], [width, height]])
          .on(""brush"", brushed)
          .on(""end"", brushended);

        svg.append(""g"")
          .call(brush);

        svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d[""Domestic Consumption""]))
          .attr(""cy"", d => yScale(d.Exports))
          .attr(""r"", 4);

        function brushed() {
          const selection = d3.event.selection;
          const selectedData = data.filter(d => {
            const x = xScale(d[""Domestic Consumption""]);
            const y = yScale(d.Exports);
            return x >= selection[0][0] && x <= selection[1][0] && y <= selection[0][1] && y >= selection[1][1];
          }).slice(0, 20);

          d3.select(""#selected-data-body"")
            .selectAll(""tr"")
            .remove();

          d3.select(""#selected-data-body"")
            .selectAll(""tr"")
            .data(selectedData)
            .enter()
            .append(""tr"")
            .selectAll(""td"")
            .data(d => [d.Year, d.Country, d[""Domestic Consumption""], d.Exports, d[""Import Price""], d[""Export Price""], d[""Total Production""]])
            .enter()
            .append(""td"")
            .text(d => d);
        }

        function brushended() {
          if (!d3.event.selection) {
            d3.select(""#selected-data-body"")
              .selectAll(""tr"")
              .remove();
          }
        }
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,122,123
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a horizontal Bar Chart that shows all the data concerning Domestic Consumption, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coffee Consumption Bar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      position: relative;
      display: inline-block;
    }
    .minimap {
      position: absolute;
      top: 0;
      right: 0;
      width: 100px;
      height: 300px;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 120, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 300 - margin.top - margin.bottom;
    const minimapWidth = 100;
    const minimapHeight = height;

    const svg = d3.select("".chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right + minimapWidth)
      .attr(""height"", height + margin.top + margin.bottom);

    const g = svg.append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const minimapG = svg.append(""g"")
      .attr(""transform"", `translate(${width + margin.left + 20}, ${margin.top})`)
      .attr(""class"", ""minimap"");

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
      data.forEach(d => {
        d[""Domestic Consumption""] = +d[""Domestic Consumption""];
      });

      const x = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Domestic Consumption""])])
        .range([0, width]);

      const y = d3.scaleBand()
        .domain(data.map(d => d.Country))
        .range([0, height])
        .padding(0.2);

      const bars = g.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", 0)
        .attr(""y"", d => y(d.Country))
        .attr(""width"", d => x(d[""Domestic Consumption""]))
        .attr(""height"", y.bandwidth());

      const minimapX = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Domestic Consumption""])])
        .range([0, minimapWidth]);

      const minimapY = d3.scaleBand()
        .domain(data.map(d => d.Country))
        .range([0, minimapHeight])
        .padding(0.2);

      const minimapBars = minimapG.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", 0)
        .attr(""y"", d => minimapY(d.Country))
        .attr(""width"", d => minimapX(d[""Domestic Consumption""]))
        .attr(""height"", minimapY.bandwidth());

      g.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(x));

      g.append(""g"")
        .call(d3.axisLeft(y));

      minimapG.append(""g"")
        .attr(""transform"", `translate(0, ${minimapHeight})`)
        .call(d3.axisBottom(minimapX));

      minimapG.append(""g"")
        .call(d3.axisLeft(minimapY));
    });
  </script>
</body>
</html>
```",Unexpected Initial Result,123,124
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Domestic Consumption and Exports, and a Bar Chart on the right that displays Country versus Domestic Consumption.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px; display: flex; justify-content: space-around;"">
        <div id=""scatterplot"" style=""width: 50%; height: 100%;""></div>
        <div id=""barchart"" style=""width: 50%; height: 100%;""></div>
    </div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const scatterplotData = csvData.map(row => [parseFloat(row[2]), parseFloat(row[3])]);
                const barchartData = csvData.reduce((acc, row) => {
                    if (!acc[row[1]]) {
                        acc[row[1]] = 0;
                    }
                    acc[row[1]] += parseFloat(row[2]);
                    return acc;
                }, {});

                const scatterplotChart = echarts.init(document.getElementById('scatterplot'));
                scatterplotChart.setOption({
                    title: {
                        text: 'Domestic Consumption vs Exports'
                    },
                    xAxis: {
                        name: 'Domestic Consumption'
                    },
                    yAxis: {
                        name: 'Exports'
                    },
                    series: [{
                        type: 'scatter',
                        data: scatterplotData
                    }]
                });

                const barchartChart = echarts.init(document.getElementById('barchart'));
                barchartChart.setOption({
                    title: {
                        text: 'Country vs Domestic Consumption'
                    },
                    xAxis: {
                        type: 'category',
                        data: Object.keys(barchartData)
                    },
                    yAxis: {
                        name: 'Domestic Consumption'
                    },
                    series: [{
                        type: 'bar',
                        data: Object.values(barchartData)
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,124,125
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Domestic Consumption and Exports, and a Bar Chart on the right that displays Country versus Domestic Consumption. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <style>
        #chart1, #chart2 {
            width: 45%;
            height: 600px;
            display: inline-block;
        }
    </style>
</head>
<body>
    <div id=""chart1""></div>
    <div id=""chart2""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const scatterData = csvData.map(row => [+row[2], +row[3]]);
                const barData = csvData.reduce((acc, row) => {
                    if (!acc[row[1]]) {
                        acc[row[1]] = 0;
                    }
                    acc[row[1]] += +row[2];
                    return acc;
                }, {});
                const barCategories = Object.keys(barData);
                const barValues = Object.values(barData);

                const chart1 = echarts.init(document.getElementById('chart1'));
                const chart2 = echarts.init(document.getElementById('chart2'));

                const option1 = {
                    title: {
                        text: 'Domestic Consumption vs Exports'
                    },
                    xAxis: {
                        type: 'value'
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: scatterData,
                            emphasis: {
                                itemStyle: {
                                    shadowBlur: 10,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            }
                        }
                    ],
                    brush: {
                        toolbox: ['rect', 'polygon', 'clear'],
                        xAxisIndex: 0,
                        throttleType: 'debounce',
                        throttleDelay: 300
                    }
                };

                const option2 = {
                    title: {
                        text: 'Country vs Domestic Consumption'
                    },
                    xAxis: {
                        type: 'category',
                        data: barCategories
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            type: 'bar',
                            data: barValues
                        }
                    ]
                };

                chart1.setOption(option1);
                chart2.setOption(option2);

                chart1.on('brushSelected', params => {
                    const selectedData = params.batch[0].areas[0].data;
                    const selectedCountries = csvData.filter(row => {
                        const consumption = +row[2];
                        const exports = +row[3];
                        return selectedData.some(([x, y]) => Math.abs(x - consumption) < 1000 && Math.abs(y - exports) < 1000);
                    }).map(row => row[1]);
                    const barDataCopy = [...barValues];
                    barCategories.forEach((country, index) => {
                        if (!selectedCountries.includes(country)) {
                            barDataCopy[index] = null;
                        }
                    });
                    chart2.setOption({
                        series: [
                            {
                                type: 'bar',
                                data: barDataCopy
                            }
                        ]
                    });
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,125,126
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Domestic Consumption , while the pie chart represents the distribution of Exports.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const years = [];
                const domesticConsumption = [];
                const exports = {};
                csvData.forEach(row => {
                    const columns = row.split(',');
                    years.push(columns[0]);
                    domesticConsumption.push(parseFloat(columns[2]));
                    if (!exports[columns[1]]) {
                        exports[columns[1]] = 0;
                    }
                    exports[columns[1]] += parseFloat(columns[3]);
                });
                const exportData = Object.keys(exports).map(country => ({ name: country, value: exports[country] }));

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    grid: {
                        top: '10%',
                        bottom: '50%'
                    },
                    xAxis: {
                        type: 'category',
                        data: years
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            name: 'Domestic Consumption',
                            type: 'line',
                            data: domesticConsumption
                        }
                    ]
                });

                const pieChart = echarts.init(document.getElementById('chart'));
                pieChart.setOption({
                    grid: {
                        top: '60%',
                        bottom: '10%'
                    },
                    series: [
                        {
                            type: 'pie',
                            data: exportData
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,126,127
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Domestic Consumption , while the pie chart represents the distribution of Exports. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Exports for the selected group.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <style>
        #chart {
            width: 800px;
            height: 600px;
            border: 1px solid #ccc;
            padding: 10px;
        }
    </style>
</head>
<body>
    <div id=""chart""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const years = csvData.map(row => row[0]);
                const domesticConsumption = csvData.map(row => parseFloat(row[2]));
                const exports = csvData.map(row => parseFloat(row[3]));
                const countries = csvData.map(row => row[1]);

                const chartDom = document.getElementById('chart');
                const myChart = echarts.init(chartDom);

                const option = {
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'cross',
                            crossStyle: {
                                color: '#999'
                            }
                        }
                    },
                    toolbox: {
                        feature: {
                            dataView: { show: true, readOnly: false },
                            magicType: { show: true, type: ['line', 'bar'] },
                            restore: { show: true },
                            saveAsImage: { show: true }
                        }
                    },
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 10
                        },
                        {
                            start: 0,
                            end: 10
                        }
                    ],
                    xAxis: [
                        {
                            type: 'category',
                            data: years,
                            axisPointer: {
                                type: 'shadow'
                            }
                        }
                    ],
                    yAxis: [
                        {
                            type: 'value',
                            name: 'Domestic Consumption',
                            min: 0,
                            max: 200,
                            interval: 20,
                            axisLabel: {
                                formatter: '{value} '
                            }
                        },
                        {
                            type: 'value',
                            name: 'Exports',
                            min: 0,
                            max: 200,
                            interval: 20,
                            axisLabel: {
                                formatter: '{value} '
                            }
                        }
                    ],
                    series: [
                        {
                            name: 'Domestic Consumption',
                            type: 'line',
                            xAxisIndex: 0,
                            yAxisIndex: 0,
                            data: domesticConsumption,
                            markLine: {
                                data: [{ type: 'max', name: 'Max' }, { type: 'min', name: 'Min' }]
                            }
                        },
                        {
                            name: 'Exports',
                            type: 'pie',
                            radius: ['20%', '30%'],
                            center: ['50%', '80%'],
                            data: exports.map((value, index) => ({ value, name: countries[index] })),
                            emphasis: {
                                itemStyle: {
                                    shadowBlur: 10,
                                    shadowOffsetX: 0,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            }
                        }
                    ]
                };

                myChart.setOption(option);

                myChart.on('brushSelected', (params) => {
                    const selectedData = params.batch[0].selected[0].data;
                    const startIndex = selectedData[0].dataIndex[0];
                    const endIndex = selectedData[selectedData.length - 1].dataIndex[0];
                    const selectedExports = exports.slice(startIndex, endIndex + 1);
                    const selectedCountries = countries.slice(startIndex, endIndex + 1);

                    myChart.setOption({
                        series: [
                            {
                                name: 'Exports',
                                type: 'pie',
                                radius: ['20%', '30%'],
                                center: ['50%', '80%'],
                                data: selectedExports.map((value, index) => ({ value, name: selectedCountries[index] })),
                                emphasis: {
                                    itemStyle: {
                                        shadowBlur: 10,
                                        shadowOffsetX: 0,
                                        shadowColor: 'rgba(0, 0, 0, 0.5)'
                                    }
                                }
                            }
                        ]
                    });
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,127,128
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Domestic Consumption, Exports, Import Price, and Export Price. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/d3@7.4.4/dist/d3.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 1000px; height: 800px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = d3.csvParse(data);
                const dimensions = ['Domestic Consumption', 'Exports', 'Import Price', 'Export Price'];
                const series = [];
                dimensions.forEach((dimension, index) => {
                    series.push({
                        type: 'scatter',
                        name: dimension,
                        data: csvData.map(row => [+row[dimension], +row[dimensions[(index + 1) % dimensions.length]]]),
                        dimensions: [dimension, dimensions[(index + 1) % dimensions.length]],
                        symbolSize: 10,
                        encode: {
                            x: 0,
                            y: 1
                        }
                    });
                });
                const option = {
                    tooltip: {
                        trigger: 'item'
                    },
                    brush: {
                        brushLink: series.map(() => 'all'),
                        xAxisIndex: 'all',
                        yAxisIndex: 'all',
                        brushType: 'rect',
                        transformable: false,
                        throttleType: 'debounce',
                        throttleDelay: 300
                    },
                    xAxis: dimensions.map(() => ({})),
                    yAxis: dimensions.map(() => ({})),
                    series: series
                };
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,128,129
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a brushable Scatterplot that visualizes the relationship between Domestic Consumption and Exports. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <style>
        #chart {
            width: 800px;
            height: 600px;
            border: 1px solid #ccc;
            margin: 20px auto;
        }
        #table {
            width: 300px;
            height: 600px;
            border: 1px solid #ccc;
            margin: 20px auto;
            float: right;
        }
    </style>
</head>
<body>
    <div id=""chart""></div>
    <div id=""table""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = csvData.map(row => {
                    const columns = row.split(',');
                    return {
                        year: columns[0],
                        country: columns[1],
                        domesticConsumption: parseFloat(columns[2]),
                        exports: parseFloat(columns[3]),
                        importPrice: parseFloat(columns[4]),
                        exportPrice: parseFloat(columns[5]),
                        totalProduction: parseFloat(columns[6])
                    };
                });

                const chart = echarts.init(document.getElementById('chart'));
                const table = document.getElementById('table');

                chart.setOption({
                    title: {
                        text: 'Coffee Consumption Scatterplot'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    toolbox: {
                        feature: {
                            dataZoom: {
                                yAxisIndex: 'none'
                            },
                            brush: {
                                type: ['rect', 'polygon', 'clear']
                            }
                        }
                    },
                    brush: {
                        xAxisIndex: 'all',
                        yAxisIndex: 'all',
                        brushLink: 'all',
                        outOfBrush: {
                            colorAlpha: 0.1
                        },
                        brushStyle: {
                            borderWidth: 2,
                            color: 'rgba(120,140,180,0.6)',
                            borderColor: 'rgba(120,140,180,0.8)'
                        },
                        throttleType: 'debounce',
                        throttleDelay: 300,
                        inBrush: {
                            opacity: 1
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Domestic Consumption'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Exports'
                    },
                    series: [{
                        type: 'scatter',
                        data: chartData.map(item => [item.domesticConsumption, item.exports]),
                        markLine: {
                            data: [
                                { type: 'max', name: 'Max' },
                                { type: 'min', name: 'Min' }
                            ]
                        }
                    }]
                });

                chart.on('brushSelected', params => {
                    const selectedData = params.batch[0].selected[0].data;
                    const tableHtml = selectedData.slice(0, 20).map((item, index) => {
                        const dataItem = chartData.find(data => data.domesticConsumption === item[0] && data.exports === item[1]);
                        return `
                            <tr>
                                <td>${index + 1}</td>
                                <td>${dataItem.year}</td>
                                <td>${dataItem.country}</td>
                                <td>${dataItem.domesticConsumption}</td>
                                <td>${dataItem.exports}</td>
                            </tr>
                        `;
                    }).join('');
                    table.innerHTML = `
                        <table>
                            <thead>
                                <tr>
                                    <th>No.</th>
                                    <th>Year</th>
                                    <th>Country</th>
                                    <th>Domestic Consumption</th>
                                    <th>Exports</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${tableHtml}
                            </tbody>
                        </table>
                    `;
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,129,130
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a horizontal Bar Chart that shows all the data concerning Domestic Consumption, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 1000px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = csvData.map(row => {
                    const columns = row.split(',');
                    return {
                        country: columns[1],
                        consumption: parseFloat(columns[2].replace(',', ''))
                    };
                });

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'value',
                        boundaryGap: [0, 0.01]
                    },
                    yAxis: {
                        type: 'category',
                        data: chartData.map(item => item.country)
                    },
                    series: [
                        {
                            name: 'Domestic Consumption',
                            type: 'bar',
                            data: chartData.map(item => item.consumption)
                        },
                        {
                            name: 'Overview',
                            type: 'bar',
                            xAxisIndex: 1,
                            yAxisIndex: 1,
                            data: chartData.map(item => item.consumption),
                            label: {
                                show: false
                            }
                        }
                    ],
                    xAxis: [
                        {
                            show: true
                        },
                        {
                            show: false,
                            type: 'value',
                            boundaryGap: [0, 0.01],
                            min: 0,
                            max: Math.max(...chartData.map(item => item.consumption))
                        }
                    ],
                    yAxis: [
                        {
                            show: true
                        },
                        {
                            show: false,
                            type: 'category',
                            data: chartData.map(item => item.country)
                        }
                    ]
                };
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Initialization Error,130,131
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Domestic Consumption and Exports, and a Bar Chart on the right that displays Country versus Domestic Consumption.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coffee Consumption Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: row;
    }
  </style>
</head>
<body>
  <div id=""vis"">
    <div id=""scatterplot""></div>
    <div id=""barchart""></div>
  </div>

  <script>
    const scatterplotSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Exports"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Domestic Consumption"", ""type"": ""quantitative""}
      }
    };

    const barchartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"" },
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Country"", ""type"": ""nominal"", ""sort"": ""-y""},
        ""y"": {""field"": ""Domestic Consumption"", ""type"": ""quantitative""}
      }
    };

    vegaEmbed(""#scatterplot"", scatterplotSpec);
    vegaEmbed(""#barchart"", barchartSpec);
  </script>
</body>
</html>
```",Correct,131,132
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Domestic Consumption and Exports, and a Bar Chart on the right that displays Country versus Domestic Consumption. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coffee Consumption Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: row;
    }
    #scatterplot {
      width: 50%;
    }
    #barchart {
      width: 50%;
    }
  </style>
</head>
<body>
  <div id=""vis"">
    <div id=""scatterplot""></div>
    <div id=""barchart""></div>
  </div>

  <script>
    const scatterplotSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Exports"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Domestic Consumption"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Country"", ""type"": ""nominal""}
      },
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x"", ""y""]}
      }
    };

    const barchartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"" },
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Country"", ""type"": ""nominal"", ""sort"": ""-y""},
        ""y"": {""field"": ""Domestic Consumption"", ""type"": ""quantitative""},
        ""color"": {""condition"": {""test"": ""datum.Country === parent.parent.selection.brush[0].Country"", ""value"": ""steelblue""}, ""value"": ""lightgray""}
      }
    };

    vegaEmbed(""#scatterplot"", scatterplotSpec, { ""actions"": false });
    vegaEmbed(""#barchart"", barchartSpec, { ""actions"": false });
  </script>
</body>
</html>
```",Unexpected Initial Result,132,133
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Domestic Consumption , while the pie chart represents the distribution of Exports.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coffee Consumption Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const lineChartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"" },
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {""field"": ""Year"", ""type"": ""temporal""},
        ""y"": {""field"": ""Domestic Consumption"", ""type"": ""quantitative""}
      }
    };

    const pieChartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"" },
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Exports"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Country"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", lineChartSpec, { mode: ""vega-lite"" });
    vegaEmbed(""#vis"", pieChartSpec, { mode: ""vega-lite"" });
  </script>
</body>
</html>
```",Unexpected Initial Result,133,134
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Domestic Consumption , while the pie chart represents the distribution of Exports. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Exports for the selected group.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coffee Consumption Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 800,
      ""height"": 600,
      ""padding"": 5,
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv""
      },
      ""vconcat"": [
        {
          ""mark"": ""line"",
          ""encoding"": {
            ""x"": {""field"": ""Year"", ""type"": ""temporal""},
            ""y"": {""field"": ""Domestic Consumption"", ""type"": ""quantitative""},
            ""tooltip"": [
              {""field"": ""Year"", ""type"": ""temporal""},
              {""field"": ""Domestic Consumption"", ""type"": ""quantitative""}
            ]
          },
          ""selection"": {
            ""brush"": {""type"": ""interval"", ""encodings"": [""x""]}
          }
        },
        {
          ""mark"": ""arc"",
          ""encoding"": {
            ""theta"": {""field"": ""Exports"", ""type"": ""quantitative"", ""stack"": true},
            ""color"": {""field"": ""Country"", ""type"": ""nominal""}
          },
          ""transform"": [
            {
              ""filter"": {
                ""selection"": ""brush""
              }
            }
          ]
        }
      ]
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Execution Result,134,135
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Domestic Consumption, Exports, Import Price, and Export Price. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Scatterplot Matrix</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to make the chart more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    // Define the data URL
    const dataUrl = ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"";

    // Define the Vega-Lite specification
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": dataUrl },
      ""transform"": [
        {""filter"": ""datum.Country === 'Brazil'""} // Filter data for Brazil
      ],
      ""mark"": {""type"": ""point"", ""filled"": true, ""fillOpacity"": 0.5},
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x"", ""y""]}
      },
      ""encoding"": {
        ""x"": {""field"": ""variable"", ""type"": ""nominal""},
        ""y"": {""field"": ""value"", ""type"": ""quantitative""},
        ""color"": {
          ""condition"": {""test"": ""datum.variable === 'Domestic Consumption'"", ""value"": ""blue""},
          ""value"": ""gray""
        }
      },
      ""facet"": {
        ""row"": {""field"": ""variable"", ""type"": ""nominal""}
      },
      ""resolve"": {""scale"": {""y"": ""independent""}},
      ""vconcat"": [
        {
          ""transform"": [
            {""fold"": [""Domestic Consumption"", ""Exports"", ""Import Price"", ""Export Price""], ""as"": [""variable"", ""value""]}
          ]
        }
      ]
    };

    // Embed the chart
    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Initialization Error,135,136
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a brushable Scatterplot that visualizes the relationship between Domestic Consumption and Exports. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coffee Consumption Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <div id=""table""></div>

  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 600,
      ""height"": 400,
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Domestic Consumption"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Exports"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Year"", ""type"": ""nominal""},
          {""field"": ""Country"", ""type"": ""nominal""},
          {""field"": ""Domestic Consumption"", ""type"": ""quantitative""},
          {""field"": ""Exports"", ""type"": ""quantitative""},
          {""field"": ""Import Price"", ""type"": ""quantitative""},
          {""field"": ""Export Price"", ""type"": ""quantitative""},
          {""field"": ""Total Production"", ""type"": ""quantitative""}
        ]
      },
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x"", ""y""]}
      }
    };

    const tableSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 200,
      ""height"": 400,
      ""data"": {
        ""name"": ""table_data""
      },
      ""mark"": ""table"",
      ""encoding"": {
        ""row"": {""field"": ""Year"", ""type"": ""nominal""},
        ""column"": {""field"": ""Country"", ""type"": ""nominal""},
        ""color"": {""field"": ""Domestic Consumption"", ""type"": ""quantitative""}
      }
    };

    vegaEmbed(""#vis"", spec).then(function(result) {
      const view = result.view;

      view.addEventListener(""mousedown"", function(event, item) {
        if (item && item.datum) {
          const tableData = view.data(""table_data"");
          const selectedData = view.data(""source_0"").filter(function(d) {
            return d === item.datum;
          });
          tableData.clear();
          tableData.push(selectedData.slice(0, 20));
        }
      });

      const tableView = vegaEmbed(""#table"", tableSpec).then(function(result) {
        const tableView = result.view;
        tableView.data(""table_data"", []);
      });
    });
  </script>
</body>
</html>
```",Unexpected Initial Result,136,137
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a horizontal Bar Chart that shows all the data concerning Domestic Consumption, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coffee Consumption Bar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 700,
      ""height"": 500,
      ""layer"": [
        {
          ""mark"": ""bar"",
          ""encoding"": {
            ""x"": {""field"": ""Domestic Consumption"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Country"", ""type"": ""nominal"", ""sort"": ""-x""},
            ""tooltip"": [
              {""field"": ""Country"", ""type"": ""nominal""},
              {""field"": ""Domestic Consumption"", ""type"": ""quantitative""}
            ]
          }
        },
        {
          ""mark"": ""bar"",
          ""width"": 30,
          ""x"": {""field"": ""Domestic Consumption"", ""type"": ""quantitative""},
          ""y"": {""field"": ""Country"", ""type"": ""nominal"", ""sort"": ""-x""},
          ""encoding"": {
            ""color"": {""value"": ""#ccc""}
          },
          ""transform"": [
            {""filter"": ""datum.Country === 'Brazil' || datum.Country === 'Vietnam' || datum.Country === 'Colombia' || datum.Country === 'Ethiopia' || datum.Country === 'Indonesia' || datum.Country === 'Honduras' || datum.Country === 'India' || datum.Country === 'Uganda' || datum.Country === 'Guatemala' || datum.Country === 'Mexico' || datum.Country === 'Kenya' || datum.Country === 'Tanzania' || datum.Country === 'El Salvador' || datum.Country === 'Nicaragua' || datum.Country === 'Costa Rica' || datum.Country === 'Thailand' || datum.Country === 'Rwanda' || datum.Country === 'Sumatra' || datum.Country === 'Sulawesi' || datum.Country === 'Papua New Guinea' || datum.Country === 'Democratic Republic of Congo' || datum.Country === 'Burundi' || datum.Country === 'Cameroon' || datum.Country === 'Congo' || datum.Country === 'Côte d'Ivoire' || datum.Country === 'Myanmar' || datum.Country === 'Nepal' || datum.Country === 'Philippines' || datum.Country === 'Sierra Leone' || datum.Country === 'Togo' || datum.Country === 'Zambia' || datum.Country === 'Zimbabwe' || datum.Country === 'Other Countries'""},
            {""calculate"": ""1"", ""as"": ""dummy""}
          ]
        }
      ],
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv""
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,137,138
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Scatterplot that visualizes the relationship between Domestic Consumption and Exports.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coffee Consumption Scatterplot</title>
  <style>
    /* Add some basic styling to make the chart look better */
    body {
      font-family: Arial, sans-serif;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    // Set up the SVG and margins
    const margin = { top: 50, right: 50, bottom: 100, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;
    const svg = d3.select('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    // Load the data
    d3.csv('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
      .then(data => {
        // Convert data types
        data.forEach(d => {
          d['Domestic Consumption'] = +d['Domestic Consumption'];
          d.Exports = +d.Exports;
        });

        // Set up the scales
        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Exports)])
          .range([0, width]);
        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Domestic Consumption'])])
          .range([height, 0]);

        // Add the axes
        const xAxis = d3.axisBottom(xScale)
          .ticks(10);
        const yAxis = d3.axisLeft(yScale)
          .ticks(10);
        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(xAxis)
          .append('text')
          .attr('x', width / 2)
          .attr('y', 40)
          .attr('text-anchor', 'middle')
          .text('Exports');
        svg.append('g')
          .call(yAxis)
          .append('text')
          .attr('x', -40)
          .attr('y', height / 2)
          .attr('text-anchor', 'middle')
          .text('Domestic Consumption');

        // Add the scatterplot points
        svg.selectAll('circle')
          .data(data)
          .enter()
          .append('circle')
          .attr('cx', d => xScale(d.Exports))
          .attr('cy', d => yScale(d['Domestic Consumption']))
          .attr('r', 5)
          .attr('fill', 'blue');
      });
  </script>
</body>
</html>
```",Correct,138,139
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Line Chart that visualizes the trend of Domestic Consumption over the Year for each Country.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coffee Consumption Trend</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 800px;
      height: 600px;
      margin: 50px auto;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 700;
    const height = 500;
    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"")
      .then(data => {
        data.forEach(d => {
          d.Year = +d.Year;
          d[""Domestic Consumption""] = +d[""Domestic Consumption""];
        });

        const countries = Array.from(new Set(data.map(d => d.Country)));
        const colors = d3.schemeCategory10;

        const xScale = d3.scaleLinear()
          .domain(d3.extent(data, d => d.Year))
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Domestic Consumption""])])
          .range([height, 0]);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        countries.forEach((country, i) => {
          const countryData = data.filter(d => d.Country === country);
          svg.append(""path"")
            .datum(countryData)
            .attr(""fill"", ""none"")
            .attr(""stroke"", colors[i])
            .attr(""stroke-width"", 2)
            .attr(""d"", d3.line()
              .x(d => xScale(d.Year))
              .y(d => yScale(d[""Domestic Consumption""])));
        });

        svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d.Year))
          .attr(""cy"", d => yScale(d[""Domestic Consumption""]))
          .attr(""r"", 5)
          .attr(""fill"", d => colors[countries.indexOf(d.Country)]);

        svg.selectAll(""text"")
          .data(countries)
          .enter()
          .append(""text"")
          .attr(""x"", width + 10)
          .attr(""y"", (d, i) => 20 + i * 20)
          .text(d => d)
          .attr(""fill"", (d, i) => colors[i]);
      });
  </script>
</body>
</html>
```",Correct,139,140
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Bar Chart that visualizes the Domestic Consumption for each Country in 2017.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coffee Consumption Bar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .bar {
      fill: steelblue;
    }
    .bar:hover {
      fill: brown;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"")
      .then(data => {
        data.forEach(d => {
          d.Year = +d.Year;
          d[""Domestic Consumption""] = +d[""Domestic Consumption""];
        });

        const filteredData = data.filter(d => d.Year === 2017);

        const x = d3.scaleBand()
          .domain(filteredData.map(d => d.Country))
          .range([0, width])
          .padding(0.2);

        const y = d3.scaleLinear()
          .domain([0, d3.max(filteredData, d => d[""Domestic Consumption""])])
          .range([height, 0]);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(x));

        svg.append(""g"")
          .call(d3.axisLeft(y));

        svg.selectAll(""bar"")
          .data(filteredData)
          .enter()
          .append(""rect"")
          .attr(""class"", ""bar"")
          .attr(""x"", d => x(d.Country))
          .attr(""y"", d => y(d[""Domestic Consumption""]))
          .attr(""width"", x.bandwidth())
          .attr(""height"", d => height - y(d[""Domestic Consumption""]));
      });
  </script>
</body>
</html>
```",Correct,140,141
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Pie Chart that visualizes the proportion of Domestic Consumption contributed by each Country in 2017.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coffee Consumption Pie Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    #chart {
      width: 500px;
      height: 500px;
      margin: 50px auto;
    }
  </style>
</head>
<body>
  <div id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;
    const radius = Math.min(width, height) / 2;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${width / 2 + margin.left}, ${height / 2 + margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"")
      .then(data => {
        data.forEach(d => {
          d.Year = +d.Year;
          d[""Domestic Consumption""] = +d[""Domestic Consumption""];
        });

        const filteredData = data.filter(d => d.Year === 2017);

        const pie = d3.pie()
          .value(d => d[""Domestic Consumption""]);

        const arc = d3.arc()
          .outerRadius(radius)
          .innerRadius(0);

        const arcs = svg.selectAll(""arc"")
          .data(pie(filteredData))
          .enter()
          .append(""path"")
          .attr(""fill"", (d, i) => d3.schemeCategory10[i])
          .attr(""d"", arc);

        const legend = svg.selectAll(""legend"")
          .data(filteredData)
          .enter()
          .append(""text"")
          .attr(""x"", width / 2 + 20)
          .attr(""y"", (d, i) => 20 + i * 20)
          .text(d => `${d.Country}: ${d[""Domestic Consumption""]}`);
      });
  </script>
</body>
</html>
```",Correct,141,142
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Donut Chart that visualizes the distribution of Domestic Consumption among Country in 2017.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coffee Consumption Donut Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 500px;
      height: 500px;
      margin: 50px auto;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;
    const radius = Math.min(width, height) / 2;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${width / 2 + margin.left}, ${height / 2 + margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Year""] = +d[""Year""];
          d[""Domestic Consumption""] = +d[""Domestic Consumption""];
        });

        const filteredData = data.filter(d => d[""Year""] === 2017);

        const pie = d3.pie()
          .value(d => d[""Domestic Consumption""]);

        const arc = d3.arc()
          .outerRadius(radius - 10)
          .innerRadius(radius - 100);

        const arcs = svg.selectAll(""arc"")
          .data(pie(filteredData))
          .enter()
          .append(""g"")
          .attr(""class"", ""arc"");

        arcs.append(""path"")
          .attr(""d"", arc)
          .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

        arcs.append(""text"")
          .attr(""transform"", d => `translate(${arc.centroid(d)})`)
          .attr(""dy"", ""0.35em"")
          .text(d => d.data.Country);
      });
  </script>
</body>
</html>
```",Correct,142,143
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Coxcomb Chart(polar area chart) to compare the Domestic Consumption of different Country in 2017.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coffee Consumption Coxcomb Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 600px;
      height: 600px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 20, left: 20 };
    const width = 600 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"")
      .then(data => {
        data.forEach(d => {
          d.Year = +d.Year;
          d[""Domestic Consumption""] = +d[""Domestic Consumption""];
        });

        const filteredData = data.filter(d => d.Year === 2017);

        const countries = filteredData.map(d => d.Country);
        const consumption = filteredData.map(d => d[""Domestic Consumption""]);

        const angleScale = d3.scalePoint()
          .domain(countries)
          .range([0, 2 * Math.PI]);

        const radiusScale = d3.scaleLinear()
          .domain([0, d3.max(consumption)])
          .range([0, Math.min(width, height) / 2]);

        svg.selectAll(""path"")
          .data(filteredData)
          .enter()
          .append(""path"")
          .attr(""d"", d => {
            const startAngle = angleScale(d.Country);
            const endAngle = startAngle + (2 * Math.PI / countries.length);
            const radius = radiusScale(d[""Domestic Consumption""]);
            return `M ${width / 2} ${height / 2} L ${width / 2 + radius * Math.cos(startAngle)} ${height / 2 + radius * Math.sin(startAngle)} A ${radius} ${radius} 0 ${endAngle - startAngle > Math.PI ? 1 : 0} 1 ${width / 2 + radius * Math.cos(endAngle)} ${height / 2 + radius * Math.sin(endAngle)} Z`;
          })
          .attr(""fill"", (d, i) => d3.schemeCategory10[i % 10])
          .attr(""stroke"", ""black"");

        svg.selectAll(""text"")
          .data(filteredData)
          .enter()
          .append(""text"")
          .attr(""x"", d => width / 2 + (radiusScale(d[""Domestic Consumption""]) + 10) * Math.cos(angleScale(d.Country)))
          .attr(""y"", d => height / 2 + (radiusScale(d[""Domestic Consumption""]) + 10) * Math.sin(angleScale(d.Country)))
          .text(d => d.Country);
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,143,144
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Radar Chart to compare the Domestic Consumption of different Country in 2017.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coffee Consumption Radar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg width=""600"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 100, right: 100, bottom: 100, left: 100 };
    const width = 600 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Year""] = +d[""Year""];
          d[""Domestic Consumption""] = +d[""Domestic Consumption""];
        });

        const countries = Array.from(new Set(data.map(d => d.Country)));
        const year = 2017;
        const countryData = countries.map(country => {
          const countryYearData = data.find(d => d.Country === country && d.Year === year);
          return { country, value: countryYearData[""Domestic Consumption""] };
        });

        const max = d3.max(countryData, d => d.value);
        const angle = 2 * Math.PI / countries.length;

        const axis = svg.selectAll("".axis"")
          .data(countryData)
          .enter()
          .append(""g"")
          .attr(""class"", ""axis"")
          .attr(""transform"", (d, i) => `rotate(${i * angle})`);

        axis.append(""line"")
          .attr(""x2"", max)
          .attr(""stroke"", ""#777"");

        axis.append(""text"")
          .attr(""x"", max + 10)
          .attr(""y"", 0)
          .attr(""text-anchor"", ""middle"")
          .text(d => d.country);

        const radar = svg.selectAll("".radar"")
          .data([countryData])
          .enter()
          .append(""g"")
          .attr(""class"", ""radar"");

        radar.selectAll("".line"")
          .data(d => d)
          .enter()
          .append(""line"")
          .attr(""x1"", (d, i) => (d.value / max) * max * Math.cos(i * angle))
          .attr(""y1"", (d, i) => (d.value / max) * max * Math.sin(i * angle))
          .attr(""x2"", (d, i) => (d.value / max) * max * Math.cos((i + 1) * angle))
          .attr(""y2"", (d, i) => (d.value / max) * max * Math.sin((i + 1) * angle))
          .attr(""stroke"", ""#f00"");

        radar.selectAll("".point"")
          .data(d => d)
          .enter()
          .append(""circle"")
          .attr(""cx"", (d, i) => (d.value / max) * max * Math.cos(i * angle))
          .attr(""cy"", (d, i) => (d.value / max) * max * Math.sin(i * angle))
          .attr(""r"", 5)
          .attr(""fill"", ""#f00"");
      });
  </script>
</body>
</html>
```",Initialization Error,144,145
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Streamgraph that visualizes the changes of Domestic Consumption over the Year for each Country.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coffee Consumption Streamgraph</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 800px;
      height: 600px;
      margin: 50px auto;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select("".chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
      data.forEach(d => {
        d.Year = +d.Year;
        d[""Domestic Consumption""] = +d[""Domestic Consumption""];
      });

      const countries = Array.from(new Set(data.map(d => d.Country)));
      const stack = d3.stack()
        .keys(countries)
        .value((d, key) => d[""Domestic Consumption""]);

      const stackedData = stack(data);

      const xScale = d3.scaleLinear()
        .domain(d3.extent(data, d => d.Year))
        .range([0, width]);

      const yScale = d3.scaleLinear()
        .domain([d3.min(stackedData, d => d3.min(d, d => d[0])), d3.max(stackedData, d => d3.max(d, d => d[1]))])
        .range([height, 0]);

      svg.selectAll(""path"")
        .data(stackedData)
        .enter()
        .append(""path"")
        .attr(""d"", d3.line()
          .x((d, i) => xScale(data[i].Year))
          .y0(d => yScale(d[0]))
          .y1(d => yScale(d[1]))
        )
        .attr(""fill"", (d, i) => d3.schemeCategory10[i])
        .attr(""stroke"", ""black"")
        .attr(""stroke-width"", 0.5);

      svg.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

      svg.append(""g"")
        .call(d3.axisLeft(yScale));

      svg.selectAll(""text"")
        .data(countries)
        .enter()
        .append(""text"")
        .attr(""x"", width + 10)
        .attr(""y"", (d, i) => i * 20 + 10)
        .text(d => d)
        .attr(""fill"", (d, i) => d3.schemeCategory10[i]);
    });
  </script>
</body>
</html>
```",Initialization Error,145,146
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Slopegraph to compare the Domestic Consumption between 2018 and 2019 for each Country.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coffee Consumption Slopegraph</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .slopegraph {
      width: 800px;
      height: 600px;
      margin: 50px auto;
    }
    .slopegraph .line {
      stroke: #ccc;
      stroke-width: 1.5px;
    }
    .slopegraph .circle {
      fill: #fff;
      stroke: #ccc;
      stroke-width: 1.5px;
    }
    .slopegraph .label {
      font-size: 12px;
      text-anchor: middle;
    }
  </style>
</head>
<body>
  <svg class=""slopegraph""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('.slopegraph')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
      .then(data => {
        data.forEach(d => {
          d['Year'] = +d['Year'];
          d['Domestic Consumption'] = +d['Domestic Consumption'];
        });

        const countries = Array.from(new Set(data.map(d => d['Country'])));

        const xScale = d3.scalePoint()
          .domain([2018, 2019])
          .range([0, width])
          .padding(0.5);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Domestic Consumption'])])
          .range([height, 0]);

        svg.selectAll('.line')
          .data(countries)
          .enter()
          .append('line')
          .attr('class', 'line')
          .attr('x1', d => xScale(2018))
          .attr('y1', d => yScale(data.find(e => e['Country'] === d && e['Year'] === 2018)['Domestic Consumption']))
          .attr('x2', d => xScale(2019))
          .attr('y2', d => yScale(data.find(e => e['Country'] === d && e['Year'] === 2019)['Domestic Consumption']));

        svg.selectAll('.circle')
          .data(countries)
          .enter()
          .append('circle')
          .attr('class', 'circle')
          .attr('cx', d => xScale(2018))
          .attr('cy', d => yScale(data.find(e => e['Country'] === d && e['Year'] === 2018)['Domestic Consumption']))
          .attr('r', 5);

        svg.selectAll('.circle2')
          .data(countries)
          .enter()
          .append('circle')
          .attr('class', 'circle')
          .attr('cx', d => xScale(2019))
          .attr('cy', d => yScale(data.find(e => e['Country'] === d && e['Year'] === 2019)['Domestic Consumption']))
          .attr('r', 5);

        svg.selectAll('.label')
          .data(countries)
          .enter()
          .append('text')
          .attr('class', 'label')
          .attr('x', d => xScale(2018))
          .attr('y', d => yScale(data.find(e => e['Country'] === d && e['Year'] === 2018)['Domestic Consumption']) + 20)
          .text(d => d);

        svg.selectAll('.label2')
          .data(countries)
          .enter()
          .append('text')
          .attr('class', 'label')
          .attr('x', d => xScale(2019))
          .attr('y', d => yScale(data.find(e => e['Country'] === d && e['Year'] === 2019)['Domestic Consumption']) + 20)
          .text(d => d);
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,146,147
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Heatmap that visualizes the Domestic Consumption across Country and Years.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coffee Consumption Heatmap</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .tooltip {
      position: absolute;
      background-color: #fff;
      border: 1px solid #ddd;
      padding: 5px;
      visibility: hidden;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 100, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"")
      .then(data => {
        data.forEach(d => {
          d.Year = +d.Year;
          d[""Domestic Consumption""] = +d[""Domestic Consumption""];
        });

        const countries = Array.from(new Set(data.map(d => d.Country)));
        const years = Array.from(new Set(data.map(d => d.Year)));

        const xScale = d3.scaleBand()
          .domain(years)
          .range([0, width])
          .padding(0.1);

        const yScale = d3.scaleBand()
          .domain(countries)
          .range([0, height])
          .padding(0.1);

        const colorScale = d3.scaleSequential()
          .domain([0, d3.max(data, d => d[""Domestic Consumption""])])
          .interpolator(d3.interpolateBlues);

        svg.selectAll(""rect"")
          .data(data)
          .enter()
          .append(""rect"")
          .attr(""x"", d => xScale(d.Year))
          .attr(""y"", d => yScale(d.Country))
          .attr(""width"", xScale.bandwidth())
          .attr(""height"", yScale.bandwidth())
          .attr(""fill"", d => colorScale(d[""Domestic Consumption""]));

        svg.selectAll(""text"")
          .data(years)
          .enter()
          .append(""text"")
          .attr(""x"", d => xScale(d) + xScale.bandwidth() / 2)
          .attr(""y"", height + 20)
          .attr(""text-anchor"", ""middle"")
          .text(d => d);

        svg.selectAll(""text"")
          .data(countries)
          .enter()
          .append(""text"")
          .attr(""x"", -20)
          .attr(""y"", d => yScale(d) + yScale.bandwidth() / 2)
          .attr(""text-anchor"", ""end"")
          .attr(""transform"", ""rotate(-90)"")
          .text(d => d);

        const tooltip = d3.select(""body"")
          .append(""div"")
          .attr(""class"", ""tooltip"")
          .style(""opacity"", 0);

        svg.selectAll(""rect"")
          .on(""mouseover"", (event, d) => {
            tooltip.transition()
              .duration(200)
              .style(""opacity"", 0.9);
            tooltip.html(`Country: ${d.Country}<br>Year: ${d.Year}<br>Domestic Consumption: ${d[""Domestic Consumption""]}`)
              .style(""left"", (event.pageX) + ""px"")
              .style(""top"", (event.pageY - 28) + ""px"");
          })
          .on(""mouseout"", () => {
            tooltip.transition()
              .duration(500)
              .style(""opacity"", 0);
          });
      });
  </script>
</body>
</html>
```",Correct,147,148
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coffee Consumption Stacked Bar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 40px auto;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg class=""chart"" width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 40, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('.chart')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
      .then(data => {
        data.forEach(d => {
          d['Domestic Consumption'] = +d['Domestic Consumption'];
          d.Exports = +d.Exports;
          d['Import Price'] = +d['Import Price'];
          d['Export Price'] = +d['Export Price'];
          d['Total Production'] = +d['Total Production'];
        });

        const keys = ['Domestic Consumption', 'Exports', 'Import Price', 'Export Price', 'Total Production'];
        const stackedData = d3.stack()
          .keys(keys)
          (data);

        const xScale = d3.scaleBand()
          .domain(data.map(d => d.Year))
          .range([0, width])
          .padding(0.2);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(stackedData[stackedData.length - 1], d => d[1])])
          .range([height, 0]);

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append('g')
          .call(d3.axisLeft(yScale));

        svg.selectAll('g.layer')
          .data(stackedData)
          .enter()
          .append('g')
          .attr('class', 'layer')
          .attr('fill', (d, i) => d3.schemeCategory10[i])
          .selectAll('rect')
          .data(d => d)
          .enter()
          .append('rect')
          .attr('x', d => xScale(d.data.Year))
          .attr('y', d => yScale(d[1]))
          .attr('width', xScale.bandwidth())
          .attr('height', d => yScale(d[0]) - yScale(d[1]));
      });
  </script>
</body>
</html>
```",Correct,148,149
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Horizontal Bar Chart that visualizes the Domestic Consumption for each Country in 2017.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coffee Consumption</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 40px auto;
    }
    .chart rect {
      fill: steelblue;
    }
    .chart text {
      fill: #fff;
      font-size: 14px;
    }
  </style>
</head>
<body>
  <svg class=""chart"" width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;
    const svg = d3.select('.chart')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
      .then(data => {
        data.forEach(d => {
          d['Year'] = +d['Year'];
          d['Domestic Consumption'] = +d['Domestic Consumption'];
        });

        const filteredData = data.filter(d => d['Year'] === 2017);

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(filteredData, d => d['Domestic Consumption'])])
          .range([0, width]);

        const yScale = d3.scaleBand()
          .domain(filteredData.map(d => d['Country']))
          .range([height, 0])
          .padding(0.2);

        svg.selectAll('rect')
          .data(filteredData)
          .enter()
          .append('rect')
          .attr('x', 0)
          .attr('y', d => yScale(d['Country']))
          .attr('width', d => xScale(d['Domestic Consumption']))
          .attr('height', yScale.bandwidth());

        svg.selectAll('text')
          .data(filteredData)
          .enter()
          .append('text')
          .attr('x', d => xScale(d['Domestic Consumption']) + 10)
          .attr('y', d => yScale(d['Country']) + yScale.bandwidth() / 2)
          .attr('text-anchor', 'start')
          .text(d => d['Domestic Consumption']);

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append('g')
          .call(d3.axisLeft(yScale));
      });
  </script>
</body>
</html>
```",Correct,149,150
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Scatterplot that visualizes the relationship between Domestic Consumption and Exports.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = csvData.map(row => {
                    const columns = row.split(',');
                    return [parseFloat(columns[2]), parseFloat(columns[3])];
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Relationship between Domestic Consumption and Exports'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Domestic Consumption'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Exports'
                    },
                    series: [{
                        type: 'scatter',
                        data: chartData
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,150,151
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Line Chart that visualizes the trend of Domestic Consumption over the Year for each Country.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Trend</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [Year, Country, DomesticConsumption] = row.split(',');
                    if (!chartData[Country]) {
                        chartData[Country] = [];
                    }
                    chartData[Country].push([parseInt(Year), parseFloat(DomesticConsumption)]);
                });
                const series = Object.keys(chartData).map(country => ({
                    name: country,
                    type: 'line',
                    data: chartData[country]
                }));
                const option = {
                    title: {
                        text: 'Coffee Consumption Trend'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    legend: {
                        data: Object.keys(chartData)
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    toolbox: {
                        feature: {
                            saveAsImage: {}
                        }
                    },
                    xAxis: {
                        type: 'category',
                        boundaryGap: false,
                        data: Array.from(new Set(csvData.map(row => row.split(',')[0]))).sort((a, b) => a - b)
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series
                };
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,151,152
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Bar Chart that visualizes the Domestic Consumption for each Country in 2017.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [year, country, domesticConsumption] = row.split(',');
                    if (year === '2017') {
                        if (!chartData[country]) {
                            chartData[country] = 0;
                        }
                        chartData[country] += parseFloat(domesticConsumption);
                    }
                });
                const countries = Object.keys(chartData);
                const consumption = Object.values(chartData);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Domestic Coffee Consumption in 2017'
                    },
                    tooltip: {},
                    xAxis: {
                        data: countries
                    },
                    yAxis: {},
                    series: [{
                        name: 'Domestic Consumption',
                        type: 'bar',
                        data: consumption
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,152,153
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Pie Chart that visualizes the proportion of Domestic Consumption contributed by each Country in 2017.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Pie Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [Year, Country, DomesticConsumption] = row.split(',');
                    if (Year === '2017') {
                        if (chartData[Country]) {
                            chartData[Country] += parseFloat(DomesticConsumption);
                        } else {
                            chartData[Country] = parseFloat(DomesticConsumption);
                        }
                    }
                });
                const seriesData = Object.keys(chartData).map(country => ({ name: country, value: chartData[country] }));
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Domestic Consumption by Country in 2017'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    series: [
                        {
                            type: 'pie',
                            data: seriesData,
                            emphasis: {
                                itemStyle: {
                                    shadowBlur: 10,
                                    shadowOffsetX: 0,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            }
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,153,154
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Donut Chart that visualizes the distribution of Domestic Consumption among Country in 2017.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Distribution</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [year, country, domesticConsumption] = row.split(',');
                    if (year === '2017') {
                        if (country in chartData) {
                            chartData[country] += parseFloat(domesticConsumption);
                        } else {
                            chartData[country] = parseFloat(domesticConsumption);
                        }
                    }
                });
                const seriesData = Object.keys(chartData).map(country => ({ name: country, value: chartData[country] }));
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Distribution of Domestic Consumption among Countries in 2017',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    series: [
                        {
                            type: 'pie',
                            radius: ['40%', '70%'],
                            avoidLabelOverlap: false,
                            itemStyle: {
                                borderRadius: 10,
                                borderColor: '#fff',
                                borderWidth: 2
                            },
                            label: {
                                show: false,
                                position: 'center'
                            },
                            emphasis: {
                                label: {
                                    show: true,
                                    fontSize: '40',
                                    fontWeight: 'bold'
                                }
                            },
                            labelLine: {
                                show: false
                            },
                            data: seriesData
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,154,155
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Coxcomb Chart(polar area chart) to compare the Domestic Consumption of different Country in 2017.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Coxcomb Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [Year, Country, DomesticConsumption] = row.split(',');
                    if (Year === '2017') {
                        chartData[Country] = parseInt(DomesticConsumption.replace(',', ''));
                    }
                });
                const countries = Object.keys(chartData);
                const values = Object.values(chartData);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    angleAxis: {},
                    radiusAxis: {
                        type: 'category',
                        data: countries,
                        z: 10
                    },
                    polar: {},
                    series: [{
                        type: 'bar',
                        data: values,
                        coordinateSystem: 'polar',
                        name: 'Domestic Consumption',
                        stack: 'a'
                    }],
                    legend: {
                        show: true,
                        data: ['Domestic Consumption']
                    }
                });
            });
    </script>
</body>
</html>
```",Correct,155,156
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Radar Chart to compare the Domestic Consumption of different Country in 2017.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Radar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [year, country, domesticConsumption] = row.split(',');
                    if (year === '2017') {
                        chartData[country] = parseInt(domesticConsumption);
                    }
                });
                const countries = Object.keys(chartData);
                const values = Object.values(chartData);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Domestic Coffee Consumption in 2017'
                    },
                    radar: {
                        indicator: countries.map(country => ({ name: country, max: Math.max(...values) })),
                        radius: 80,
                        center: ['50%', '50%']
                    },
                    series: [{
                        name: 'Domestic Consumption',
                        type: 'radar',
                        data: [values],
                        symbol: 'none',
                        areaStyle: {
                            color: 'rgba(255, 255, 255, 0.5)'
                        }
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,156,157
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Streamgraph that visualizes the changes of Domestic Consumption over the Year for each Country.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Streamgraph</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [year, country, domesticConsumption] = row.split(',');
                    if (!chartData[country]) {
                        chartData[country] = [];
                    }
                    chartData[country].push([parseInt(year), parseFloat(domesticConsumption)]);
                });
                const series = Object.keys(chartData).map(country => ({
                    name: country,
                    type: 'stream',
                    stack: 'x',
                    data: chartData[country]
                }));
                const option = {
                    title: {
                        text: 'Coffee Consumption Streamgraph'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'line',
                            lineStyle: {
                                color: 'rgba(0,0,0,0.2)',
                                width: 1,
                                type: 'solid'
                            }
                        }
                    },
                    legend: {
                        data: Object.keys(chartData)
                    },
                    singleAxis: {
                        top: 50,
                        bottom: 50,
                        axisTick: {},
                        axisLabel: {},
                        type: 'time',
                        axisPointer: {
                            animation: true,
                            label: {
                                show: true
                            }
                        },
                        splitLine: {
                            show: true,
                            lineStyle: {
                                type: 'dashed',
                                opacity: 0.2
                            }
                        }
                    },
                    series: series
                };
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Initialization Error,157,158
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Slopegraph to compare the Domestic Consumption between 2018 and 2019 for each Country.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Slopegraph</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [year, country, domesticConsumption] = row.split(',');
                    if (!chartData[country]) {
                        chartData[country] = {};
                    }
                    chartData[country][year] = parseFloat(domesticConsumption);
                });
                const seriesData = [];
                Object.keys(chartData).forEach(country => {
                    seriesData.push([country, chartData[country]['2018'], chartData[country]['2019']]);
                });
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Coffee Consumption Slopegraph'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    xAxis: [
                        {
                            type: 'category',
                            data: seriesData.map(item => item[0]),
                            axisLabel: {
                                interval: 0,
                                rotate: 45
                            }
                        },
                        {
                            type: 'category',
                            data: seriesData.map(item => item[0]),
                            axisLabel: {
                                interval: 0,
                                rotate: 45
                            },
                            axisTick: {
                                alignWithLabel: true
                            },
                            axisLine: {
                                onZero: true
                            }
                        }
                    ],
                    yAxis: [
                        {
                            type: 'value',
                            name: '2018'
                        },
                        {
                            type: 'value',
                            name: '2019'
                        }
                    ],
                    series: [
                        {
                            name: '2018',
                            type: 'bar',
                            xAxisIndex: 0,
                            yAxisIndex: 0,
                            data: seriesData.map(item => item[1])
                        },
                        {
                            name: '2019',
                            type: 'bar',
                            xAxisIndex: 1,
                            yAxisIndex: 1,
                            data: seriesData.map(item => item[2])
                        },
                        {
                            name: 'slope',
                            type: 'line',
                            xAxisIndex: 0,
                            yAxisIndex: 0,
                            data: seriesData.map(item => [item[1], item[2]]),
                            lineStyle: {
                                color: 'rgba(128, 128, 128, 0.5)'
                            }
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,158,159
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Heatmap that visualizes the Domestic Consumption across Country and Years.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Heatmap</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const years = [...new Set(csvData.map(row => row.split(',')[0]))].sort();
                const countries = [...new Set(csvData.map(row => row.split(',')[1]))].sort();
                const consumptionData = csvData.map(row => {
                    const [year, country, consumption] = row.split(',');
                    return [years.indexOf(year), countries.indexOf(country), parseFloat(consumption)];
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Domestic Coffee Consumption Heatmap'
                    },
                    tooltip: {
                        position: 'top'
                    },
                    grid: {
                        height: '50%',
                        top: '10%'
                    },
                    xAxis: {
                        type: 'category',
                        data: years,
                        splitArea: {
                            show: true
                        }
                    },
                    yAxis: {
                        type: 'category',
                        data: countries,
                        splitArea: {
                            show: true
                        }
                    },
                    visualMap: {
                        min: 0,
                        max: 1000000,
                        calculable: true,
                        orient: 'horizontal',
                        left: 'center',
                        bottom: '15%'
                    },
                    series: [{
                        name: 'Domestic Consumption',
                        type: 'heatmap',
                        data: consumptionData,
                        label: {
                            show: true
                        },
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,159,160
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Stacked Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const years = [...new Set(csvData.map(row => row.split(',')[0]))];
                const countries = [...new Set(csvData.map(row => row.split(',')[1]))];
                const domesticConsumption = {};
                const exports = {};
                const importPrice = {};
                const exportPrice = {};
                const totalProduction = {};

                csvData.forEach(row => {
                    const [year, country, consumption, exportVal, importP, exportP, production] = row.split(',');
                    if (!domesticConsumption[country]) domesticConsumption[country] = {};
                    if (!exports[country]) exports[country] = {};
                    if (!importPrice[country]) importPrice[country] = {};
                    if (!exportPrice[country]) exportPrice[country] = {};
                    if (!totalProduction[country]) totalProduction[country] = {};

                    domesticConsumption[country][year] = parseFloat(consumption);
                    exports[country][year] = parseFloat(exportVal);
                    importPrice[country][year] = parseFloat(importP);
                    exportPrice[country][year] = parseFloat(exportP);
                    totalProduction[country][year] = parseFloat(production);
                });

                const chartData = years.map(year => {
                    return countries.map(country => {
                        return {
                            year,
                            country,
                            domesticConsumption: domesticConsumption[country][year],
                            exports: exports[country][year],
                            importPrice: importPrice[country][year],
                            exportPrice: exportPrice[country][year],
                            totalProduction: totalProduction[country][year]
                        };
                    });
                }).flat();

                const series = [
                    {
                        name: 'Domestic Consumption',
                        type: 'bar',
                        stack: 'coffee',
                        data: chartData.map(item => item.domesticConsumption)
                    },
                    {
                        name: 'Exports',
                        type: 'bar',
                        stack: 'coffee',
                        data: chartData.map(item => item.exports)
                    },
                    {
                        name: 'Import Price',
                        type: 'bar',
                        stack: 'coffee',
                        data: chartData.map(item => item.importPrice)
                    },
                    {
                        name: 'Export Price',
                        type: 'bar',
                        stack: 'coffee',
                        data: chartData.map(item => item.exportPrice)
                    },
                    {
                        name: 'Total Production',
                        type: 'bar',
                        stack: 'coffee',
                        data: chartData.map(item => item.totalProduction)
                    }
                ];

                const option = {
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    legend: {
                        data: ['Domestic Consumption', 'Exports', 'Import Price', 'Export Price', 'Total Production']
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'category',
                        data: chartData.map(item => `${item.year} - ${item.country}`)
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: series
                };

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,160,161
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Horizontal Bar Chart that visualizes the Domestic Consumption for each Country in 2017.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coffee Consumption Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [year, country, domesticConsumption] = row.split(',');
                    if (year === '2017') {
                        chartData[country] = parseInt(domesticConsumption);
                    }
                });
                const countries = Object.keys(chartData);
                const consumptions = Object.values(chartData);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Domestic Coffee Consumption in 2017'
                    },
                    tooltip: {},
                    legend: {},
                    dataset: {
                        source: [
                            countries.map(country => ({ country, consumption: chartData[country] }))
                        ]
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Domestic Consumption'
                    },
                    yAxis: {
                        type: 'category',
                        name: 'Country',
                        data: countries
                    },
                    series: [
                        {
                            type: 'bar',
                            encode: {
                                x: 'consumption',
                                y: 'country'
                            }
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Initialization Error,161,162
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Scatterplot that visualizes the relationship between Domestic Consumption and Exports.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coffee Consumption Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv""
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {
          ""field"": ""Exports"",
          ""type"": ""quantitative""
        },
        ""y"": {
          ""field"": ""Domestic Consumption"",
          ""type"": ""quantitative""
        },
        ""color"": {
          ""field"": ""Country"",
          ""type"": ""nominal""
        }
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,162,163
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Line Chart that visualizes the trend of Domestic Consumption over the Year for each Country.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coffee Consumption Line Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"" },
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {""field"": ""Year"", ""type"": ""temporal""},
        ""y"": {""field"": ""Domestic Consumption"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Country"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,163,164
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Bar Chart that visualizes the Domestic Consumption for each Country in 2017.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coffee Consumption Bar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2017""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Country"", ""type"": ""nominal"", ""axis"": {""title"": ""Country""}},
        ""y"": {""field"": ""Domestic Consumption"", ""type"": ""quantitative"", ""axis"": {""title"": ""Domestic Consumption""}}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,164,165
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Pie Chart that visualizes the proportion of Domestic Consumption contributed by each Country in 2017.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coffee Consumption Pie Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2/build/vega.min.js""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0/build/vega-lite.min.js""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2/build/vega-embed.min.js""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2017""}
      ],
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Domestic Consumption"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Country"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,165,166
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Donut Chart that visualizes the distribution of Domestic Consumption among Country in 2017.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coffee Consumption Donut Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2/build/vega.min.js""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0/build/vega-lite.min.js""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2/build/vega-embed.min.js""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2017""}
      ],
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Domestic Consumption"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Country"", ""type"": ""nominal""}
      },
      ""view"": {""stroke"": null},
      ""width"": 400,
      ""height"": 400
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,166,167
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Coxcomb Chart(polar area chart) to compare the Domestic Consumption of different Country in 2017.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coxcomb Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2017""}
      ],
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Domestic Consumption"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Country"", ""type"": ""nominal""}
      },
      ""view"": {""stroke"": null},
      ""config"": {
        ""arc"": {""padAngle"": 0.01}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,167,168
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Radar Chart to compare the Domestic Consumption of different Country in 2017.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coffee Consumption Radar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2/build/vega.min.js""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0/build/vega-lite.min.js""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2/build/vega-embed.min.js""></script>
</head>
<body>
  <div id=""vis""></div>

  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2017""},
        {""calculate"": ""datum['Domestic Consumption']"", ""as"": ""value""}
      ],
      ""mark"": ""line"",
      ""encoding"": {
        ""theta"": {""field"": ""Country"", ""type"": ""nominal"", ""scale"": {""range"": [0, 360]}},
        ""radius"": {""field"": ""value"", ""type"": ""quantitative""}
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""domain"": false, ""ticks"": false, ""labels"": false}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Initialization Error,168,169
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Streamgraph that visualizes the changes of Domestic Consumption over the Year for each Country.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coffee Consumption Streamgraph</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""area"",
      ""encoding"": {
        ""x"": {""field"": ""Year"", ""type"": ""temporal""},
        ""y"": {""field"": ""Domestic Consumption"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Country"", ""type"": ""nominal""}
      },
      ""transform"": [
        {""stack"": ""Domestic Consumption"", ""groupby"": [""Country""]}
      ]
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,169,170
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Slopegraph to compare the Domestic Consumption between 2018 and 2019 for each Country.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coffee Consumption Slopegraph</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 800,
      ""height"": 600,
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {
          ""filter"": ""datum.Year == 2018 || datum.Year == 2019""
        },
        {
          ""sort"": [{""field"": ""Country""}]
        }
      ],
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {
          ""field"": ""Year"",
          ""type"": ""nominal"",
          ""axis"": {""labelAngle"": 0}
        },
        ""y"": {
          ""field"": ""Domestic Consumption"",
          ""type"": ""quantitative"",
          ""axis"": {""title"": ""Domestic Consumption""}
        },
        ""color"": {
          ""field"": ""Country"",
          ""type"": ""nominal""
        }
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,170,171
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Heatmap that visualizes the Domestic Consumption across Country and Years.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coffee Consumption Heatmap</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""rect"",
      ""encoding"": {
        ""x"": {""field"": ""Year"", ""type"": ""ordinal""},
        ""y"": {""field"": ""Country"", ""type"": ""ordinal""},
        ""color"": {""field"": ""Domestic Consumption"", ""type"": ""quantitative""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,171,172
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coffee Consumption Stacked Bar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Year"", ""type"": ""nominal"", ""axis"": {""title"": ""Year""}},
        ""y"": {""field"": ""Total Production"", ""type"": ""quantitative"", ""axis"": {""title"": ""Total Production""}},
        ""color"": {""field"": ""Country"", ""type"": ""nominal"", ""legend"": {""title"": ""Country""}},
        ""detail"": {""field"": ""Country"", ""type"": ""nominal""}
      },
      ""transform"": [
        {""filter"": ""datum.Country !== 'World'""},
        {""stack"": ""Total Production"", ""groupby"": [""Year"", ""Country""]}
      ]
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,172,173
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.
Your task is to create a Horizontal Bar Chart that visualizes the Domestic Consumption for each Country in 2017.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production.",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coffee Consumption Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2017""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Domestic Consumption"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Country"", ""type"": ""nominal""},
        ""color"": {""field"": ""Country"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,173,174
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot of Units Sold vs Revenue</title>
    <style>
        /* set the CSS */
        body { font: 12px Arial;}

        /* style the lines */
        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 1.5px;
        }

        /* style the circles */
        .dot {
            fill: steelblue;
            stroke: #fff;
        }

        /* style the text */
        .text {
            font-size: 12px;
        }

        /* style the tooltip */
        .tooltip {
            position: absolute;
            pointer-events: none;
            font-size: 12px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        // set the dimensions and margins of the graph
        var margin = {top: 20, right: 20, bottom: 30, left: 40},
            width = 800 - margin.left - margin.right,
            height = 600 - margin.top - margin.bottom;

        // append the svg object to the body of the page
        var svg = d3.select(""body"")
            .select(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");

        // read the data
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(function(data) {

            // convert data types
            data.forEach(function(d) {
                d[""Units Sold""] = +d[""Units Sold""];
                d.Revenue = +d.Revenue;
            });

            // create scales
            var xScale = d3.scaleLinear()
                .domain([0, d3.max(data, function(d) { return d[""Units Sold""]; })])
                .range([0, width]);

            var yScale = d3.scaleLinear()
                .domain([0, d3.max(data, function(d) { return d.Revenue; })])
                .range([height, 0]);

            // create axes
            var xAxis = d3.axisBottom(xScale);
            var yAxis = d3.axisLeft(yScale);

            // add the x-axis
            svg.append(""g"")
                .attr(""transform"", ""translate(0,"" + height + "")"")
                .call(xAxis);

            // add the y-axis
            svg.append(""g"")
                .call(yAxis);

            // add the x-axis label
            svg.append(""text"")
                .attr(""transform"", ""translate("" + (width / 2) + "" ,"" + (height + margin.bottom - 5) + "")"")
                .style(""text-anchor"", ""middle"")
                .text(""Units Sold"");

            // add the y-axis label
            svg.append(""text"")
                .attr(""transform"", ""rotate(-90)"")
                .attr(""y"", 6)
                .attr(""dy"", "".71em"")
                .style(""text-anchor"", ""end"")
                .text(""Revenue"");

            // add the dots
            svg.selectAll(""dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""r"", 5)
                .attr(""cx"", function(d) { return xScale(d[""Units Sold""]); })
                .attr(""cy"", function(d) { return yScale(d.Revenue); })
                .on(""mouseover"", function(event, d) {
                    var x = xScale(d[""Units Sold""]);
                    var y = yScale(d.Revenue);
                    var tooltip = d3.select(""body"")
                        .append(""div"")
                        .attr(""class"", ""tooltip"")
                        .style(""left"", (event.pageX + 10) + ""px"")
                        .style(""top"", (event.pageY - 10) + ""px"")
                        .html(""Units Sold: "" + d[""Units Sold""] + ""<br>Revenue: "" + d.Revenue);
                    svg.append(""line"")
                        .attr(""x1"", x)
                        .attr(""y1"", 0)
                        .attr(""x2"", x)
                        .attr(""y2"", height)
                        .attr(""stroke"", ""black"")
                        .attr(""stroke-width"", 1)
                        .attr(""stroke-dasharray"", ""5,5"");
                    svg.append(""line"")
                        .attr(""x1"", 0)
                        .attr(""y1"", y)
                        .attr(""x2"", width)
                        .attr(""y2"", y)
                        .attr(""stroke"", ""black"")
                        .attr(""stroke-width"", 1)
                        .attr(""stroke-dasharray"", ""5,5"");
                })
                .on(""mouseout"", function() {
                    d3.select("".tooltip"").remove();
                    svg.selectAll(""line"").remove();
                });
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,174,175
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot of Units Sold vs Revenue</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
    .brush .extent {
      fill-opacity: .3;
      stroke: #fff;
      shape-rendering: crispEdges;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;
    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);
    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
      data.forEach(d => {
        d[""Units Sold""] = +d[""Units Sold""];
        d.Revenue = +d.Revenue;
      });
      const x = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Units Sold""])])
        .range([0, width]);
      const y = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.Revenue)])
        .range([height, 0]);
      const xAxis = d3.axisBottom(x)
        .ticks(10)
        .tickSize(-height);
      const yAxis = d3.axisLeft(y)
        .ticks(10)
        .tickSize(-width);
      svg.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(xAxis);
      svg.append(""g"")
        .call(yAxis);
      svg.append(""text"")
        .attr(""transform"", `translate(${width / 2}, ${height + margin.bottom - 5})`)
        .style(""text-anchor"", ""middle"")
        .text(""Units Sold"");
      svg.append(""text"")
        .attr(""transform"", `rotate(-90) translate(${-height / 2}, ${-margin.top + 15})`)
        .style(""text-anchor"", ""middle"")
        .text(""Revenue"");
      const brush = d3.brush()
        .extent([[0, 0], [width, height]])
        .on(""brush end"", brushed);
      svg.append(""g"")
        .call(brush);
      function brushed(event) {
        const selection = event.selection;
        if (selection) {
          const [x0, y0] = selection;
          const [x1, y1] = [x0[0] + width, y0[1] + height];
          const filteredData = data.filter(d => x(x0[0] <= d[""Units Sold""] && d[""Units Sold""] <= x1[0]) && y(y0[1] <= d.Revenue && d.Revenue <= y1[1]));
          console.log(filteredData);
        }
      }
      svg.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => x(d[""Units Sold""]))
        .attr(""cy"", d => y(d.Revenue))
        .attr(""r"", 5)
        .attr(""fill"", ""steelblue"");
    });
  </script>
</body>
</html>
```",Correct,175,176
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot of Units Sold vs Revenue</title>
    <style>
        /* set the CSS */
        body { 
            font: 12px Arial;
        }
        path { 
            stroke: steelblue; 
            stroke-opacity: .6; 
            stroke-width: 1.5px; 
        }
        .brush .extent {
            fill-opacity: .3; 
            stroke: #fff; 
            shape-rendering: crispEdges;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        // set the dimensions and margins of the graph
        var margin = {top: 20, right: 20, bottom: 30, left: 40},
            width = 800 - margin.left - margin.right,
            height = 600 - margin.top - margin.bottom;

        // append the svg object to the body of the page
        var svg = d3.select(""body"")
            .select(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");

        // read the data
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(function(data) {
            // convert data types
            data.forEach(function(d) {
                d[""Units Sold""] = +d[""Units Sold""];
                d.Revenue = +d.Revenue;
            });

            // add the x Axis
            var x = d3.scaleLinear()
                .domain([0, d3.max(data, function(d) { return d[""Units Sold""]; })])
                .range([0, width]);
            svg.append(""g"")
                .attr(""transform"", ""translate(0,"" + height + "")"")
                .call(d3.axisBottom(x));

            // add the y Axis
            var y = d3.scaleLinear()
                .domain([0, d3.max(data, function(d) { return d.Revenue; })])
                .range([height, 0]);
            svg.append(""g"")
                .call(d3.axisLeft(y));

            // add the points
            svg.selectAll(""circle"")
                .data(data)
                .enter()
                .append(""circle"")
                .attr(""cx"", function(d) { return x(d[""Units Sold""]); })
                .attr(""cy"", function(d) { return y(d.Revenue); })
                .attr(""r"", 5);

            // add zooming
            var zoom = d3.zoom()
                .scaleExtent([1, 10])
                .extent([[-Infinity, -Infinity], [Infinity, Infinity]])
                .on(""zoom"", zoomed);

            svg.call(zoom);

            function zoomed() {
                svg.selectAll(""circle"")
                    .attr(""cx"", function(d) { return x(d[""Units Sold""]) * d3.event.transform.k + d3.event.transform.x; })
                    .attr(""cy"", function(d) { return y(d.Revenue) * d3.event.transform.k + d3.event.transform.y; });
                svg.select("".x.axis"").call(xAxis.scale(d3.event.transform.rescaleX(x)));
                svg.select("".y.axis"").call(yAxis.scale(d3.event.transform.rescaleY(y)));
            }

            var xAxis = d3.axisBottom(x);
            var yAxis = d3.axisLeft(y);
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,176,177
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot with External Links and Tooltips</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .tooltip {
      position: absolute;
      background-color: #f9f9f9;
      border: 1px solid #ccc;
      padding: 5px;
      visibility: hidden;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Units Sold""] = +d[""Units Sold""];
          d.Revenue = +d.Revenue;
        });

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Units Sold""])])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Revenue)])
          .range([height, 0]);

        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(xAxis);

        svg.append(""g"")
          .call(yAxis);

        const tooltip = d3.select(""body"")
          .append(""div"")
          .attr(""class"", ""tooltip"")
          .style(""opacity"", 0);

        svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d[""Units Sold""]))
          .attr(""cy"", d => yScale(d.Revenue))
          .attr(""r"", 5)
          .on(""mouseover"", (event, d) => {
            tooltip.transition()
              .duration(200)
              .style(""opacity"", 0.9);
            tooltip.html(`Units Sold: ${d[""Units Sold""]}<br>Revenue: ${d.Revenue}`)
              .style(""left"", (event.pageX) + ""px"")
              .style(""top"", (event.pageY - 28) + ""px"");
          })
          .on(""mouseout"", () => {
            tooltip.transition()
              .duration(500)
              .style(""opacity"", 0);
          })
          .on(""click"", (event, d) => {
            const query = `Units Sold: ${d[""Units Sold""]}, Revenue: ${d.Revenue}`;
            const url = `https://www.google.com/search?q=${query}`;
            window.open(url, ""_blank"");
          });
      });
  </script>
</body>
</html>
```",Correct,177,178
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot with query widgets showing the Units Sold and Revenue of the given dataset. Add a slider to represent the Date.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot with Query Widgets</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .slider {
      width: 300px;
    }
  </style>
</head>
<body>
  <div id=""scatterplot""></div>
  <div id=""slider""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    // Set up margins and dimensions
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 600 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    // Create SVG element
    const svg = d3.select(""#scatterplot"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    // Load data
    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"")
      .then(data => {
        // Convert data types
        data.forEach(d => {
          d[""Units Sold""] = +d[""Units Sold""];
          d.Revenue = +d.Revenue;
          d.Date = new Date(d.Date);
        });

        // Create scales
        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Units Sold""])])
          .range([0, width]);
        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Revenue)])
          .range([height, 0]);

        // Create scatterplot
        svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d[""Units Sold""]))
          .attr(""cy"", d => yScale(d.Revenue))
          .attr(""r"", 5);

        // Create axes
        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);
        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(xAxis);
        svg.append(""g"")
          .call(yAxis);

        // Create slider
        const slider = d3.select(""#slider"")
          .append(""input"")
          .attr(""type"", ""range"")
          .attr(""min"", 0)
          .attr(""max"", data.length - 1)
          .attr(""value"", 0)
          .attr(""class"", ""slider"");

        // Update scatterplot based on slider value
        slider.on(""input"", () => {
          const index = +slider.property(""value"");
          const date = data[index].Date;
          svg.selectAll(""circle"")
            .data(data.filter(d => d.Date.getTime() === date.getTime()))
            .transition()
            .duration(500)
            .attr(""cx"", d => xScale(d[""Units Sold""]))
            .attr(""cy"", d => yScale(d.Revenue));
        });
      });
  </script>
</body>
</html>
```",Correct,178,179
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot showing the Units Sold of Phoenix. Add animated transitions that connect these points using lines in order.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Units Sold of Phoenix</title>
  <style>
    /* Add some basic styling to make the chart look better */
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 800px;
      height: 600px;
      margin: 50px auto;
    }
  </style>
</head>
<body>
  <svg class=""chart""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    // Set the dimensions and margins of the graph
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    // Append the SVG object to the chart div
    const svg = d3.select("".chart"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    // Load the data
    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"")
      .then(data => {
        // Filter the data for Phoenix
        const phoenixData = data.filter(d => d[""Store Location""] === ""Phoenix"");

        // Convert the data to numbers
        phoenixData.forEach(d => {
          d[""Units Sold""] = +d[""Units Sold""];
          d[""Operating Hours""] = +d[""Operating Hours""];
        });

        // Create a scale for the x and y axes
        const xScale = d3.scaleLinear()
          .domain([0, d3.max(phoenixData, d => d[""Operating Hours""])])
          .range([0, width]);
        const yScale = d3.scaleLinear()
          .domain([0, d3.max(phoenixData, d => d[""Units Sold""])])
          .range([height, 0]);

        // Create the x and y axes
        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);
        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(xAxis);
        svg.append(""g"")
          .call(yAxis);

        // Create the scatterplot
        const points = svg.selectAll(""circle"")
          .data(phoenixData)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d[""Operating Hours""]))
          .attr(""cy"", d => yScale(d[""Units Sold""]))
          .attr(""r"", 5);

        // Create the line
        const line = d3.line()
          .x(d => xScale(d[""Operating Hours""]))
          .y(d => yScale(d[""Units Sold""]));
        const path = svg.append(""path"")
          .datum(phoenixData)
          .attr(""d"", line)
          .attr(""stroke"", ""black"")
          .attr(""stroke-width"", 2)
          .attr(""fill"", ""none"");

        // Animate the line
        const totalLength = path.node().getTotalLength();
        path.attr(""stroke-dasharray"", totalLength + "" "" + totalLength)
          .attr(""stroke-dashoffset"", totalLength)
          .transition()
          .duration(2000)
          .attr(""stroke-dashoffset"", 0);
      });
  </script>
</body>
</html>
```",Correct,179,180
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Units Sold of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Daily Sales Line Chart</title>
    <style>
        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 2px;
        }

        .line:hover {
            stroke-width: 4px;
        }

        .axis text {
            font-size: 12px;
        }

        .axis path,
        .axis line {
            fill: none;
            stroke: #777;
            stroke-width: 1;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 50, right: 50, bottom: 50, left: 50 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"")
            .then(data => {
                data.forEach(d => {
                    d[""Date""] = new Date(d[""Date""]);
                    d[""Units Sold""] = +d[""Units Sold""];
                });

                const xScale = d3.scaleTime()
                    .domain(d3.extent(data, d => d[""Date""]))
                    .range([0, width]);

                const yScale = d3.scaleLinear()
                    .domain([0, d3.max(data, d => d[""Units Sold""])])
                    .range([height, 0]);

                const line = d3.line()
                    .x(d => xScale(d[""Date""]))
                    .y(d => yScale(d[""Units Sold""]));

                svg.append(""g"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(d3.axisBottom(xScale));

                svg.append(""g"")
                    .call(d3.axisLeft(yScale));

                svg.append(""path"")
                    .datum(data)
                    .attr(""class"", ""line"")
                    .attr(""d"", line)
                    .on(""mouseover"", () => {
                        d3.select(this)
                            .transition()
                            .duration(100)
                            .attr(""stroke-width"", 4);
                    })
                    .on(""mouseout"", () => {
                        d3.select(this)
                            .transition()
                            .duration(100)
                            .attr(""stroke-width"", 2);
                    });
            });
    </script>
</body>
</html>
```",Correct,180,181
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold by Store Location</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .chart {
            margin: 20px;
        }
    </style>
</head>
<body>
    <div class=""chart"" id=""chart""></div>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 40 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""#chart"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"")
            .then(data => {
                data.forEach(d => {
                    d[""Date""] = new Date(d[""Date""]);
                    d[""Units Sold""] = +d[""Units Sold""];
                });

                const filteredData = data.filter(d => d3.timeFormat(""%Y-%m-%d"")(d[""Date""]) === ""2021-01-01"");

                const x = d3.scaleBand()
                    .domain(filteredData.map(d => d[""Store Location""]))
                    .range([0, width])
                    .padding(0.2);

                const y = d3.scaleLinear()
                    .domain([0, d3.max(filteredData, d => d[""Units Sold""])])
                    .range([height, 0]);

                svg.append(""g"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(d3.axisBottom(x));

                svg.append(""g"")
                    .call(d3.axisLeft(y));

                svg.selectAll(""bar"")
                    .data(filteredData)
                    .enter()
                    .append(""rect"")
                    .attr(""x"", d => x(d[""Store Location""]))
                    .attr(""y"", d => y(d[""Units Sold""]))
                    .attr(""width"", x.bandwidth())
                    .attr(""height"", d => height - y(d[""Units Sold""]));

                const zoom = d3.zoom()
                    .scaleExtent([1, 10])
                    .extent([[-Infinity, -Infinity], [Infinity, Infinity]])
                    .on(""zoom"", zoomed);

                svg.call(zoom);

                function zoomed() {
                    svg.selectAll(""rect"")
                        .attr(""transform"", d3.event.transform);
                    svg.select("".x-axis"")
                        .attr(""transform"", d3.event.transform);
                    svg.select("".y-axis"")
                        .attr(""transform"", d3.event.transform);
                }
            });
    </script>
</body>
</html>
```",Execution Error,181,182
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold by Store Location</title>
    <style>
        .bar {
            fill: steelblue;
        }

        .bar:hover {
            fill: brown;
        }

        .axis text {
            font-size: 12px;
        }

        .axis path,
        .axis line {
            fill: none;
            stroke: #777;
            stroke-width: 1;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 40 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"")
            .then(data => {
                data.forEach(d => {
                    d[""Date""] = new Date(d[""Date""]);
                    d[""Units Sold""] = +d[""Units Sold""];
                });

                const filteredData = data.filter(d => d3.timeFormat(""%Y-%m-%d"")(d[""Date""]) === ""2021-01-01"");

                const x = d3.scaleBand()
                    .domain(filteredData.map(d => d[""Store Location""]))
                    .range([0, width])
                    .padding(0.2);

                const y = d3.scaleLinear()
                    .domain([0, d3.max(filteredData, d => d[""Units Sold""])])
                    .range([height, 0]);

                svg.append(""g"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(d3.axisBottom(x));

                svg.append(""g"")
                    .call(d3.axisLeft(y));

                const bars = svg.selectAll(""rect"")
                    .data(filteredData)
                    .enter()
                    .append(""rect"")
                    .attr(""x"", d => x(d[""Store Location""]))
                    .attr(""y"", d => y(d[""Units Sold""]))
                    .attr(""width"", x.bandwidth())
                    .attr(""height"", d => height - y(d[""Units Sold""]))
                    .attr(""class"", ""bar"");

                let drag = d3.drag()
                    .on(""start"", dragstarted)
                    .on(""drag"", dragged)
                    .on(""end"", dragended);

                bars.call(drag);

                function dragstarted(event, d) {
                    d3.select(this).raise();
                    d3.event.sourceEvent.stopPropagation();
                }

                function dragged(event, d) {
                    const newX = x(d[""Store Location""]) + event.dx;
                    d3.select(this)
                        .attr(""x"", newX);
                }

                function dragended(event, d) {
                    const newIndex = filteredData.findIndex(item => item[""Store Location""] === d[""Store Location""]);
                    const oldIndex = filteredData.indexOf(d);

                    if (newIndex !== oldIndex) {
                        filteredData.splice(newIndex, 0, filteredData.splice(oldIndex, 1)[0]);
                        x.domain(filteredData.map(d => d[""Store Location""]));
                        svg.selectAll(""rect"")
                            .transition()
                            .duration(500)
                            .attr(""x"", d => x(d[""Store Location""]));
                        svg.selectAll(""g"")
                            .transition()
                            .duration(500)
                            .call(d3.axisBottom(x));
                    }
                }
            });
    </script>
</body>
</html>
```",Execution Error,182,183
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Units Sold.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Daily Sales Bar Chart</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .chart {
            margin: 40px auto;
        }
        .axis text {
            font-size: 12px;
        }
        .axis path,
        .axis line {
            fill: none;
            stroke: #777;
            stroke-width: 1;
        }
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: brown;
        }
        .sort-button {
            position: absolute;
            top: 10px;
            right: 10px;
        }
    </style>
</head>
<body>
    <svg class=""chart"" width=""800"" height=""600""></svg>
    <button class=""sort-button"" id=""sort-asc"">Sort Ascending</button>
    <button class=""sort-button"" id=""sort-desc"">Sort Descending</button>

    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 40 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;

        const svg = d3.select("".chart"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

        const xScale = d3.scaleBand()
            .padding(0.2);

        const yScale = d3.scaleLinear()
            .range([height, 0]);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"")
            .then(data => {
                data.forEach(d => {
                    d[""Date""] = new Date(d[""Date""]);
                    d[""Units Sold""] = +d[""Units Sold""];
                });

                const filteredData = data.filter(d => d3.timeFormat(""%Y-%m-%d"")(d[""Date""]) === ""2021-01-01"");

                xScale.domain(filteredData.map(d => d[""Store Location""]));
                yScale.domain([0, d3.max(filteredData, d => d[""Units Sold""])]);

                svg.selectAll(""bar"")
                    .data(filteredData, d => d[""Store Location""])
                    .enter()
                    .append(""rect"")
                    .attr(""class"", ""bar"")
                    .attr(""x"", d => xScale(d[""Store Location""]))
                    .attr(""y"", d => yScale(d[""Units Sold""]))
                    .attr(""width"", xScale.bandwidth())
                    .attr(""height"", d => height - yScale(d[""Units Sold""]));

                svg.append(""g"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(d3.axisBottom(xScale));

                svg.append(""g"")
                    .call(d3.axisLeft(yScale));

                d3.select(""#sort-asc"")
                    .on(""click"", () => {
                        svg.selectAll(""bar"")
                            .sort((a, b) => a[""Units Sold""] - b[""Units Sold""])
                            .transition()
                            .duration(1000)
                            .attr(""x"", d => xScale(d[""Store Location""]));
                    });

                d3.select(""#sort-desc"")
                    .on(""click"", () => {
                        svg.selectAll(""bar"")
                            .sort((a, b) => b[""Units Sold""] - a[""Units Sold""])
                            .transition()
                            .duration(1000)
                            .attr(""x"", d => xScale(d[""Store Location""]));
                    });
            });
    </script>
</body>
</html>
```",Initialization Error,183,184
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Units Sold vs Revenue Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = csvData.map(row => {
                    const [date, storeLocation, unitsSold, revenue, profit, operatingHours, customerVisits, productCategory] = row.split(',');
                    return [parseFloat(unitsSold), parseFloat(revenue)];
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Units Sold vs Revenue Scatterplot'
                    },
                    tooltip: {
                        trigger: 'item',
                        formatter: function (params) {
                            return `Units Sold: ${params.data[0]}<br>Revenue: ${params.data[1]}`;
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Units Sold',
                        axisPointer: {
                            show: true,
                            type: 'line',
                            lineStyle: {
                                color: 'rgba(0,0,0,0.2)',
                                width: 2,
                                type: 'dashed'
                            },
                            label: {
                                show: true,
                                formatter: function (params) {
                                    return params.value;
                                }
                            },
                            handle: {
                                show: true,
                                size: 0,
                                margin: 0
                            }
                        }
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Revenue',
                        axisPointer: {
                            show: true,
                            type: 'line',
                            lineStyle: {
                                color: 'rgba(0,0,0,0.2)',
                                width: 2,
                                type: 'dashed'
                            },
                            label: {
                                show: true,
                                formatter: function (params) {
                                    return params.value;
                                }
                            },
                            handle: {
                                show: true,
                                size: 0,
                                margin: 0
                            }
                        }
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: chartData,
                            symbolSize: 10,
                            itemStyle: {
                                opacity: 0.8
                            }
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Execution Error,184,185
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Units Sold vs Revenue Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = csvData.map(row => {
                    const [date, storeLocation, unitsSold, revenue, profit, operatingHours, customerVisits, productCategory] = row.split(',');
                    return [parseFloat(unitsSold), parseFloat(revenue)];
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Units Sold vs Revenue Scatterplot'
                    },
                    tooltip: {
                        trigger: 'item',
                        formatter: function (params) {
                            return `Units Sold: ${params.data[0]}, Revenue: ${params.data[1]}`;
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Units Sold'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Revenue'
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: chartData,
                            emphasis: {
                                itemStyle: {
                                    shadowBlur: 10,
                                    shadowOffsetX: 0,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            },
                            selectData: true,
                            selectMode: 'multiple',
                            selectItemStyle: {
                                opacity: 0.5
                            },
                            unSelectItemStyle: {
                                opacity: 1
                            }
                        }
                    ],
                    brush: {
                        toolbox: ['rect', 'polygon', 'clear'],
                        xAxisIndex: 0,
                        yAxisIndex: 0,
                        brushStyle: {
                            borderWidth: 2,
                            color: 'rgba(120,140,180,0.3)',
                            borderColor: 'rgba(120,140,180,0.8)',
                        },
                        throttleType: 'debounce',
                        throttleDelay: 300,
                        inBrush: {
                            opacity: 1
                        },
                        outOfBrush: {
                            opacity: 0.5
                        }
                    }
                });
            });
    </script>
</body>
</html>
```",Correct,185,186
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Units Sold vs Revenue Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const unitsSold = [];
                const revenue = [];
                csvData.forEach(row => {
                    const columns = row.split(',');
                    unitsSold.push(parseFloat(columns[2]));
                    revenue.push(parseFloat(columns[3]));
                });
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Units Sold vs Revenue Scatterplot'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'cross'
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Units Sold'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Revenue'
                    },
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 100
                        },
                        {
                            start: 0,
                            end: 100
                        }
                    ],
                    series: [
                        {
                            name: 'Units Sold vs Revenue',
                            type: 'scatter',
                            data: unitsSold.map((value, index) => [value, revenue[index]])
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,186,187
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Units Sold vs Revenue Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = csvData.map(row => {
                    const [date, storeLocation, unitsSold, revenue, profit, operatingHours, customerVisits, productCategory] = row.split(',');
                    return [parseFloat(unitsSold), parseFloat(revenue)];
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Units Sold vs Revenue Scatterplot'
                    },
                    tooltip: {
                        trigger: 'item',
                        formatter: (params) => {
                            const [unitsSold, revenue] = params.data;
                            return `Units Sold: ${unitsSold}<br>Revenue: ${revenue}`;
                        }
                    },
                    series: [{
                        type: 'scatter',
                        data: chartData,
                        symbolSize: 10,
                        itemStyle: {
                            opacity: 0.8
                        },
                        emphasis: {
                            itemStyle: {
                                opacity: 1
                            }
                        }
                    }],
                    xAxis: {
                        type: 'value',
                        name: 'Units Sold'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Revenue'
                    }
                });

                chart.on('click', (params) => {
                    const [unitsSold, revenue] = params.data;
                    const searchQuery = `Units Sold: ${unitsSold}, Revenue: ${revenue}`;
                    const url = `https://www.google.com/search?q=${encodeURIComponent(searchQuery)}`;
                    window.open(url, '_blank');
                });
            });
    </script>
</body>
</html>
```",Correct,187,188
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot with query widgets showing the Units Sold and Revenue of the given dataset. Add a slider to represent the Date.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Units Sold vs Revenue Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-gl@2.0.8/dist/echarts-gl.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-stat@1.1.1/dist/ecStat.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/extension/bmap.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-gl@2.0.8/dist/echarts-gl.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-stat@1.1.1/dist/ecStat.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/extension/dataTool.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js""></script>
    <style>
        #chart {
            width: 800px;
            height: 600px;
            border: 1px solid #ccc;
            padding: 10px;
        }
    </style>
</head>
<body>
    <div id=""chart""></div>
    <div id=""slider""></div>
    <script>
        $.ajax({
            type: 'GET',
            url: 'https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv',
            success: function(data) {
                var csv = $.csv.toArrays(data);
                var chartData = [];
                var dates = [];
                csv.forEach(function(row, index) {
                    if (index > 0) {
                        chartData.push([parseFloat(row[2]), parseFloat(row[3])]);
                        dates.push(row[0]);
                    }
                });
                var myChart = echarts.init(document.getElementById('chart'));
                var option = {
                    title: {
                        text: 'Units Sold vs Revenue Scatterplot'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Units Sold'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Revenue'
                    },
                    series: [{
                        type: 'scatter',
                        data: chartData
                    }]
                };
                myChart.setOption(option);
                var slider = echarts.init(document.getElementById('slider'));
                var sliderOption = {
                    type: 'slider',
                    min: 0,
                    max: csv.length - 1,
                    value: 0,
                    orient: 'horizontal',
                    width: 800,
                    height: 20,
                    handleSize: 10,
                    handleStyle: {
                        color: '#fff',
                        borderColor: '#ccc',
                        borderWidth: 1,
                        borderType: 'solid'
                    },
                    data: dates,
                    formatter: function(value) {
                        return dates[value];
                    }
                };
                slider.setOption(sliderOption);
                slider.on('changed', function(params) {
                    var startIndex = params.value[0];
                    var endIndex = params.value[1];
                    var filteredData = chartData.slice(startIndex, endIndex + 1);
                    myChart.setOption({
                        series: [{
                            data: filteredData
                        }]
                    });
                });
            }
        });
    </script>
    <script src=""https://cdn.jsdelivr.net/npm/jquery.csv@1.0.11/dist/jquery.csv.min.js""></script>
</body>
</html>
```",Initialization Error,188,189
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot showing the Units Sold of Phoenix. Add animated transitions that connect these points using lines in order.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Units Sold of Phoenix</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const phoenixData = csvData.filter(row => row.split(',')[1] === 'Phoenix')
                    .map(row => row.split(','))
                    .map(row => [row[0], parseInt(row[2])]);

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    title: {
                        text: 'Units Sold of Phoenix'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    xAxis: {
                        type: 'category',
                        data: phoenixData.map(row => row[0])
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: phoenixData.map(row => row[1]),
                            symbolSize: 10,
                            label: {
                                show: true,
                                formatter: '{c}'
                            },
                            encode: {
                                x: 0,
                                y: 1
                            }
                        },
                        {
                            type: 'line',
                            data: phoenixData.map(row => row[1]),
                            symbolSize: 10,
                            label: {
                                show: true,
                                formatter: '{c}'
                            },
                            encode: {
                                x: 0,
                                y: 1
                            },
                            animationDuration: 3000,
                            animationEasing: 'cubicInOut'
                        }
                    ],
                    animationDuration: 3000,
                    animationEasing: 'cubicInOut'
                };
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,189,190
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Units Sold of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Multi-Series Line Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const categories = Array.from(new Set(csvData.map(row => row.split(',')[1])));
                const dates = Array.from(new Set(csvData.map(row => row.split(',')[0])));
                const seriesData = categories.map(category => {
                    return dates.map(date => {
                        const row = csvData.find(row => row.split(',')[0] === date && row.split(',')[1] === category);
                        return row ? parseInt(row.split(',')[2]) : 0;
                    });
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    tooltip: {
                        trigger: 'axis'
                    },
                    legend: {
                        data: categories
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'category',
                        data: dates
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: categories.map((category, index) => {
                        return {
                            name: category,
                            type: 'line',
                            data: seriesData[index],
                            emphasis: {
                                focus: 'series'
                            }
                        };
                    })
                });
            });
    </script>
</body>
</html>
```",Correct,190,191
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Units Sold for each Store Location in 2021-01-01</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [date, storeLocation, unitsSold] = row.split(',');
                    if (date === '2021-01-01') {
                        if (!chartData[storeLocation]) {
                            chartData[storeLocation] = 0;
                        }
                        chartData[storeLocation] += parseInt(unitsSold);
                    }
                });
                const storeLocations = Object.keys(chartData);
                const unitsSoldData = Object.values(chartData);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Units Sold for each Store Location in 2021-01-01'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    xAxis: {
                        type: 'category',
                        data: storeLocations
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            name: 'Units Sold',
                            type: 'bar',
                            data: unitsSoldData
                        }
                    ],
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 100
                        },
                        {
                            start: 0,
                            end: 100,
                            handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6v1.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',
                            handleSize: '80%',
                            handleStyle: {
                                color: '#fff',
                                shadowBlur: 3,
                                shadowColor: 'rgba(0, 0, 0, 0.6)',
                                shadowOffsetX: 2,
                                shadowOffsetY: 2
                            }
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,191,192
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Units Sold for each Store Location</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [date, storeLocation, unitsSold] = row.split(',');
                    if (date === '2021-01-01') {
                        if (!chartData[storeLocation]) {
                            chartData[storeLocation] = 0;
                        }
                        chartData[storeLocation] += parseInt(unitsSold);
                    }
                });
                const storeLocations = Object.keys(chartData);
                const unitsSoldData = Object.values(chartData);
                const option = {
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'category',
                        data: storeLocations,
                        axisLabel: {
                            rotate: 45
                        }
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            name: 'Units Sold',
                            type: 'bar',
                            data: unitsSoldData,
                            draggable: true,
                            dragOption: {
                                type: 'sort'
                            }
                        }
                    ]
                };
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,192,193
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Units Sold.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Daily Sales Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <style>
        #chart {
            width: 800px;
            height: 600px;
            margin: 0 auto;
        }
    </style>
</head>
<body>
    <div id=""chart""></div>
    <select id=""sort-order"">
        <option value=""desc"">Descending</option>
        <option value=""asc"">Ascending</option>
    </select>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const chartData = [];
                const rows = data.split('\n');
                rows.forEach((row, index) => {
                    if (index > 0) {
                        const columns = row.split(',');
                        if (columns[0] === '2021-01-01') {
                            chartData.push({
                                name: columns[1],
                                value: parseInt(columns[2])
                            });
                        }
                    }
                });
                chartData.sort((a, b) => b.value - a.value);
                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    title: {
                        text: 'Units Sold for each Store Location in 2021-01-01'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    xAxis: {
                        type: 'category',
                        data: chartData.map(item => item.name)
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            name: 'Units Sold',
                            type: 'bar',
                            data: chartData.map(item => item.value),
                            animationDuration: 2000,
                            animationEasing: 'cubicInOut'
                        }
                    ]
                };
                chart.setOption(option);
                document.getElementById('sort-order').addEventListener('change', () => {
                    const sortOrder = document.getElementById('sort-order').value;
                    if (sortOrder === 'asc') {
                        chartData.sort((a, b) => a.value - b.value);
                    } else {
                        chartData.sort((a, b) => b.value - a.value);
                    }
                    chart.setOption({
                        xAxis: {
                            data: chartData.map(item => item.name)
                        },
                        series: [
                            {
                                data: chartData.map(item => item.value)
                            }
                        ]
                    });
                });
            });
    </script>
</body>
</html>
```",Correct,193,194
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Scatterplot with Interactive Hover</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to make the chart more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    // Define the Vega-Lite specification
    var spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Units Sold"", ""type"": ""quantitative""},
          {""field"": ""Revenue"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""axis"": {
          ""labelFontSize"": 14,
          ""titleFontSize"": 16
        }
      }
    };

    // Embed the Vega-Lite chart in the HTML page
    vegaEmbed(""#vis"", spec, {actions: false});
  </script>
</body>
</html>
```",Unexpected Initial Result,194,195
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Units Sold vs Revenue Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Units Sold"", ""type"": ""quantitative""},
          {""field"": ""Revenue"", ""type"": ""quantitative""},
          {""field"": ""Store Location"", ""type"": ""nominal""},
          {""field"": ""Product Category"", ""type"": ""nominal""}
        ]
      },
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x"", ""y""]}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,195,196
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Scatterplot of Units Sold vs Revenue</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""}
      },
      ""config"": {
        ""view"": {""continuousWidth"": 400, ""continuousHeight"": 300},
        ""scale"": {""zoom"": ""wheel""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,196,197
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Scatterplot with External Links and Tooltips</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to make the chart more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    // Define the Vega-Lite specification
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Date"", ""type"": ""nominal""},
          {""field"": ""Store Location"", ""type"": ""nominal""},
          {""field"": ""Units Sold"", ""type"": ""quantitative""},
          {""field"": ""Revenue"", ""type"": ""quantitative""},
          {""field"": ""Profit"", ""type"": ""quantitative""},
          {""field"": ""Operating Hours"", ""type"": ""quantitative""},
          {""field"": ""Customer Visits"", ""type"": ""quantitative""},
          {""field"": ""Product Category"", ""type"": ""nominal""}
        ]
      },
      ""selection"": {
        ""select"": {""type"": ""single"", ""on"": ""click"", ""empty"": ""none""}
      }
    };

    // Embed the chart in the #vis div
    vegaEmbed(""#vis"", spec, {actions: false})
      .then(result => {
        // Add an event listener to the chart to open a Google search on click
        result.view.addEventListener(""click"", (event, item) => {
          if (item && item.datum) {
            const date = item.datum[""Date""];
            const storeLocation = item.datum[""Store Location""];
            const query = `${date} ${storeLocation}`;
            window.open(`https://www.google.com/search?q=${encodeURIComponent(query)}`);
          }
        });
      })
      .catch(console.error);
  </script>
</body>
</html>
```",Correct,197,198
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot with query widgets showing the Units Sold and Revenue of the given dataset. Add a slider to represent the Date.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Scatterplot with Query Widgets</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {
          ""field"": ""Units Sold"",
          ""type"": ""quantitative""
        },
        ""y"": {
          ""field"": ""Revenue"",
          ""type"": ""quantitative""
        },
        ""color"": {
          ""field"": ""Product Category"",
          ""type"": ""nominal""
        }
      },
      ""params"": [
        {
          ""name"": ""dateRange"",
          ""select"": ""range"",
          ""bind"": ""scales"",
          "" scales"": [
            {
              ""name"": ""xscale"",
              ""type"": ""time"",
              ""domain"": {""param"": ""dateRange""}
            }
          ]
        }
      ],
      ""transform"": [
        {
          ""filter"": {
            ""param"": ""dateRange""
          }
        }
      ]
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Initialization Error,198,199
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot showing the Units Sold of Phoenix. Add animated transitions that connect these points using lines in order.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Phoenix Units Sold Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 800,
      ""height"": 600,
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum['Store Location'] == 'Phoenix'""},
        {""sort"": [{""field"": ""Date""}]}
      ],
      ""mark"": {
        ""type"": ""line"",
        ""point"": true,
        ""interpolate"": ""basis""
      },
      ""encoding"": {
        ""x"": {""field"": ""Date"", ""type"": ""temporal"", ""axis"": {""title"": ""Date""}},
        ""y"": {""field"": ""Units Sold"", ""type"": ""quantitative"", ""axis"": {""title"": ""Units Sold""}},
        ""order"": {""field"": ""Date""}
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""labelFontSize"": 14, ""titleFontSize"": 16}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,199,200
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Units Sold of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Multi-Series Line Chart with Interactive Line Highlight</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to make the chart more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    // Define the Vega-Lite specification
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": {
        ""type"": ""line"",
        ""point"": true,
        ""tooltip"": true
      },
      ""encoding"": {
        ""x"": {
          ""field"": ""Date"",
          ""type"": ""temporal"",
          ""axis"": {""title"": ""Date""}
        },
        ""y"": {
          ""field"": ""Units Sold"",
          ""type"": ""quantitative"",
          ""axis"": {""title"": ""Units Sold""}
        },
        ""color"": {
          ""field"": ""Store Location"",
          ""type"": ""nominal"",
          ""legend"": {""title"": ""Store Location""}
        }
      },
      ""selection"": {
        ""highlight"": {""type"": ""single"", ""empty"": ""none"", ""on"": ""mouseover"", ""fields"": [""Store Location""]}
      },
      ""transform"": [
        {""filter"": {""selection"": ""highlight""}}
      ]
    };

    // Embed the Vega-Lite chart in the #vis div
    vegaEmbed(""#vis"", spec, { ""actions"": false });
  </script>
</body>
</html>
```",Unexpected Initial Result,200,201
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Units Sold by Store Location</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Date === '2021-01-01'""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Store Location"", ""type"": ""nominal""},
        ""y"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Store Location"", ""type"": ""nominal""},
          {""field"": ""Units Sold"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""view"": {""continuousWidth"": 400, ""continuousHeight"": 300},
        ""axis"": {""labelFontSize"": 16, ""titleFontSize"": 16},
        ""legend"": {""labelFontSize"": 16, ""titleFontSize"": 16}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Execution Result,201,202
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Units Sold by Store Location</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to make the chart more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Date === '2021-01-01'""},
        {""calculate"": ""datum['Store Location']"", ""as"": ""Store Location""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Store Location"", ""type"": ""nominal"", ""sort"": ""-y""},
        ""y"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Store Location"", ""type"": ""nominal""},
          {""field"": ""Units Sold"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""domainWidth"": 1}
      },
      ""selection"": {
        ""sort"": {""type"": ""single"", ""fields"": [""Units Sold""], ""init"": {""Store Location"": ""Store Location""}, ""bind"": ""scales""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Execution Result,202,203
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Units Sold.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Units Sold by Store Location</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to make the chart more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Date === '2021-01-01'""},
        {""calculate"": ""datum['Store Location']"", ""as"": ""Store Location""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Store Location"", ""type"": ""nominal"", ""sort"": ""-y""},
        ""y"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Store Location"", ""type"": ""nominal""},
          {""field"": ""Units Sold"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""labelFontSize"": 14, ""titleFontSize"": 16}
      }
    };

    const opt = {
      ""actions"": {
        ""export"": true,
        ""source"": false,
        ""editor"": false
      }
    };

    vegaEmbed(""#vis"", spec, opt).then(function(result) {
      // result.view provides access to the Vega View API
      // result.view.insert(""sort"", ""ascending"").run();
      // result.view.insert(""sort"", ""descending"").run();
      const dropdown = document.createElement(""select"");
      dropdown.innerHTML = `
        <option value=""descending"">Descending</option>
        <option value=""ascending"">Ascending</option>
      `;
      document.body.appendChild(dropdown);
      dropdown.addEventListener(""change"", function() {
        result.view.signal(""sort"", dropdown.value).run();
      });
    });
  </script>
</body>
</html>
```",Unexpected Initial Result,203,204
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Units Sold and Revenue, and a Bar Chart on the right that displays Store Location versus Units Sold.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Daily Sales Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: inline-block;
      vertical-align: top;
    }
  </style>
</head>
<body>
  <div id=""scatterplot"" class=""chart""></div>
  <div id=""barchart"" class=""chart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const scatterplot = d3.select(""#scatterplot"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const barchart = d3.select(""#barchart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
      data.forEach(d => {
        d[""Units Sold""] = +d[""Units Sold""];
        d.Revenue = +d.Revenue;
      });

      // Scatterplot
      const xScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Units Sold""])])
        .range([0, width]);

      const yScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.Revenue)])
        .range([height, 0]);

      scatterplot.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

      scatterplot.append(""g"")
        .call(d3.axisLeft(yScale));

      scatterplot.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScale(d[""Units Sold""]))
        .attr(""cy"", d => yScale(d.Revenue))
        .attr(""r"", 5);

      // Barchart
      const storeLocations = Array.from(new Set(data.map(d => d[""Store Location""])));

      const xScaleBar = d3.scaleBand()
        .domain(storeLocations)
        .range([0, width])
        .padding(0.2);

      const yScaleBar = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Units Sold""])])
        .range([height, 0]);

      barchart.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleBar));

      barchart.append(""g"")
        .call(d3.axisLeft(yScaleBar));

      barchart.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", d => xScaleBar(d[""Store Location""]))
        .attr(""y"", d => yScaleBar(d[""Units Sold""]))
        .attr(""width"", xScaleBar.bandwidth())
        .attr(""height"", d => height - yScaleBar(d[""Units Sold""]));
    });
  </script>
</body>
</html>
```",Correct,204,205
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Units Sold and Revenue, and a Bar Chart on the right that displays Store Location versus Units Sold. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Daily Sales Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: inline-block;
      vertical-align: top;
    }
    .scatterplot {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
    .barchart {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart scatterplot"" id=""scatterplot""></div>
  <div class=""chart barchart"" id=""barchart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svgScatterplot = d3.select(""#scatterplot"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const svgBarchart = d3.select(""#barchart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    let data = [];
    let brush = d3.brush()
      .extent([[0, 0], [width, height]])
      .on(""brush end"", brushed);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(csv => {
      data = csv.map(d => ({
        Date: d[""Date""],
        ""Store Location"": d[""Store Location""],
        ""Units Sold"": +d[""Units Sold""],
        Revenue: +d[""Revenue""],
        Profit: +d[""Profit""],
        ""Operating Hours"": +d[""Operating Hours""],
        ""Customer Visits"": +d[""Customer Visits""],
        ""Product Category"": d[""Product Category""]
      }));

      const xScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Units Sold""])])
        .range([0, width]);

      const yScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Revenue""])])
        .range([height, 0]);

      const xScaleBarchart = d3.scaleBand()
        .domain(data.map(d => d[""Store Location""]))
        .range([0, width])
        .padding(0.2);

      const yScaleBarchart = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Units Sold""])])
        .range([height, 0]);

      svgScatterplot.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScaleScatterplot(d[""Units Sold""]))
        .attr(""cy"", d => yScaleScatterplot(d[""Revenue""]))
        .attr(""r"", 5)
        .attr(""fill"", ""steelblue"");

      svgScatterplot.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleScatterplot));

      svgScatterplot.append(""g"")
        .call(d3.axisLeft(yScaleScatterplot));

      svgScatterplot.append(""g"")
        .call(brush);

      svgBarchart.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", d => xScaleBarchart(d[""Store Location""]))
        .attr(""y"", d => yScaleBarchart(d[""Units Sold""]))
        .attr(""width"", xScaleBarchart.bandwidth())
        .attr(""height"", d => height - yScaleBarchart(d[""Units Sold""]))
        .attr(""fill"", ""steelblue"");

      svgBarchart.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleBarchart));

      svgBarchart.append(""g"")
        .call(d3.axisLeft(yScaleBarchart));
    });

    function brushed() {
      const selection = d3.event.selection;
      if (selection) {
        const minX = selection[0][0];
        const maxX = selection[1][0];
        const minY = selection[0][1];
        const maxY = selection[1][1];

        svgScatterplot.selectAll(""circle"")
          .classed(""selected"", d => {
            const x = xScaleScatterplot(d[""Units Sold""]);
            const y = yScaleScatterplot(d[""Revenue""]);
            return x >= minX && x <= maxX && y >= minY && y <= maxY;
          });

        svgBarchart.selectAll(""rect"")
          .classed(""selected"", d => {
            const x = xScaleScatterplot(d[""Units Sold""]);
            const y = yScaleScatterplot(d[""Revenue""]);
            return x >= minX && x <= maxX && y >= minY && y <= maxY;
          });
      } else {
        svgScatterplot.selectAll(""circle"")
          .classed(""selected"", false);

        svgBarchart.selectAll(""rect"")
          .classed(""selected"", false);
      }
    }
  </script>
</body>
</html>
```",Unexpected Execution Result,205,206
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Sold , while the pie chart represents the distribution of Revenue.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Sales Data Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: block;
    }
  </style>
</head>
<body>
  <div id=""line-chart""></div>
  <div id=""pie-chart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const lineChart = d3.select(""#line-chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const pieChart = d3.select(""#pie-chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left + width / 2}, ${margin.top + height / 2})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
      data.forEach(d => {
        d[""Units Sold""] = +d[""Units Sold""];
        d.Revenue = +d.Revenue;
      });

      const xScale = d3.scaleTime()
        .domain(d3.extent(data, d => new Date(d.Date)))
        .range([0, width]);

      const yScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Units Sold""])])
        .range([height, 0]);

      lineChart.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

      lineChart.append(""g"")
        .call(d3.axisLeft(yScale));

      lineChart.append(""path"")
        .datum(data)
        .attr(""fill"", ""none"")
        .attr(""stroke"", ""steelblue"")
        .attr(""stroke-width"", 1.5)
        .attr(""d"", d3.line()
          .x(d => xScale(new Date(d.Date)))
          .y(d => yScale(d[""Units Sold""])));

      const pie = d3.pie()
        .value(d => d.Revenue);

      const arc = d3.arc()
        .outerRadius(width / 4)
        .innerRadius(0);

      const categories = Array.from(new Set(data.map(d => d[""Product Category""])));

      const categoryData = categories.map(category => {
        const categoryData = data.filter(d => d[""Product Category""] === category);
        return {
          category,
          Revenue: categoryData.reduce((acc, d) => acc + d.Revenue, 0)
        };
      });

      pieChart.selectAll(""path"")
        .data(pie(categoryData))
        .enter()
        .append(""path"")
        .attr(""d"", arc)
        .attr(""fill"", (d, i) => d3.schemeCategory10[i]);
    });
  </script>
</body>
</html>
```",Correct,206,207
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Sold , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Sales Data Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: block;
    }
    .line-chart {
      width: 800px;
      height: 400px;
      margin: 50px auto;
    }
    .pie-chart {
      width: 800px;
      height: 400px;
      margin: 50px auto;
    }
  </style>
</head>
<body>
  <div class=""chart line-chart""></div>
  <div class=""chart pie-chart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const lineChart = d3.select('.line-chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    const pieChart = d3.select('.pie-chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left + width / 2}, ${margin.top + height / 2})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
      .then(data => {
        data.forEach(d => {
          d['Date'] = new Date(d['Date']);
          d['Units Sold'] = +d['Units Sold'];
          d['Revenue'] = +d['Revenue'];
        });

        const xScale = d3.scaleTime()
          .domain(d3.extent(data, d => d['Date']))
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Units Sold'])])
          .range([height, 0]);

        const line = d3.line()
          .x(d => xScale(d['Date']))
          .y(d => yScale(d['Units Sold']));

        lineChart.append('path')
          .datum(data)
          .attr('fill', 'none')
          .attr('stroke', 'steelblue')
          .attr('stroke-width', 1.5)
          .attr('d', line);

        lineChart.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        lineChart.append('g')
          .call(d3.axisLeft(yScale));

        const brush = d3.brushX()
          .extent([[0, 0], [width, height]])
          .on('brush end', brushed);

        lineChart.append('g')
          .attr('class', 'brush')
          .call(brush);

        function brushed(event) {
          const selection = event.selection;
          if (selection) {
            const startDate = xScale.invert(selection[0]);
            const endDate = xScale.invert(selection[1]);
            const filteredData = data.filter(d => d['Date'] >= startDate && d['Date'] <= endDate);

            const pieData = d3.rollup(filteredData, v => d3.sum(v, d => d['Revenue']), d => d['Product Category']);

            const pie = d3.pie()
              .value(d => d[1]);

            const arc = d3.arc()
              .outerRadius(height / 2 - 20)
              .innerRadius(0);

            pieChart.selectAll('path')
              .remove();

            pieChart.selectAll('path')
              .data(pie(pieData))
              .enter()
              .append('path')
              .attr('d', arc)
              .attr('fill', (d, i) => d3.schemeCategory10[i]);
          }
        }
      });
  </script>
</body>
</html>
```",Unexpected Execution Result,207,208
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Units Sold, Revenue, Profit, and Customer Visits. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot Matrix</title>
  <style>
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
    .brush .extent {
      stroke: #fff;
      fill-opacity: .125;
      shape-rendering: crispEdges;
    }
  </style>
</head>
<body>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 100, right: 100, bottom: 100, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 800 - margin.top - margin.bottom;
    const dimensions = [""Units Sold"", ""Revenue"", ""Profit"", ""Customer Visits""];
    const size = 200;

    const svg = d3.select(""body"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
      data.forEach(d => {
        dimensions.forEach(dim => {
          d[dim] = +d[dim];
        });
      });

      const x = dimensions.map(dim => {
        return d3.scaleLinear()
          .domain(d3.extent(data, d => d[dim]))
          .range([0, size]);
      });

      const y = dimensions.map(dim => {
        return d3.scaleLinear()
          .domain(d3.extent(data, d => d[dim]))
          .range([size, 0]);
      });

      const brush = d3.brush()
        .extent([[0, 0], [size, size]])
        .on(""brush"", brushed)
        .on(""end"", brushended);

      const cell = svg.selectAll("".cell"")
        .data(cross(dimensions, dimensions))
        .enter().append(""g"")
        .attr(""class"", ""cell"")
        .attr(""transform"", d => `translate(${d.i * size}, ${d.j * size})`);

      cell.append(""rect"")
        .attr(""class"", ""frame"")
        .attr(""x"", 0)
        .attr(""y"", 0)
        .attr(""width"", size)
        .attr(""height"", size);

      cell.append(""g"")
        .attr(""class"", ""x axis"")
        .attr(""transform"", `translate(0, ${size})`)
        .call(d3.axisBottom(x[d.dimensions[0]]));

      cell.append(""g"")
        .attr(""class"", ""y axis"")
        .call(d3.axisLeft(y[d.dimensions[1]]));

      cell.append(""g"")
        .attr(""class"", ""brush"")
        .call(brush);

      cell.selectAll(""circle"")
        .data(data)
        .enter().append(""circle"")
        .attr(""cx"", d => x[d.dimensions[0]](d[d.dimensions[0]]))
        .attr(""cy"", d => y[d.dimensions[1]](d[d.dimensions[1]]))
        .attr(""r"", 3);

      function brushed() {
        const s = d3.event.selection;
        cell.selectAll(""circle"")
          .classed(""hidden"", d => {
            return s && (
              s[0][0] > x[d.dimensions[0]](d[d.dimensions[0]]) ||
              s[1][0] < x[d.dimensions[0]](d[d.dimensions[0]]) ||
              s[0][1] > y[d.dimensions[1]](d[d.dimensions[1]]) ||
              s[1][1] < y[d.dimensions[1]](d[d.dimensions[1]])
            );
          });
      }

      function brushended() {
        if (!d3.event.selection) {
          cell.selectAll(""circle"")
            .classed(""hidden"", false);
        }
      }

      function cross(a, b) {
        const c = [];
        for (let i = 0; i < a.length; i++) {
          for (let j = 0; j < b.length; j++) {
            c.push({ i, j, dimensions: [a[i], b[j]] });
          }
        }
        return c;
      }
    });
  </script>
</body>
</html>
```",Correct,208,209
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a brushable Scatterplot that visualizes the relationship between Units Sold and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Brushable Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .brush {
      fill: #ccc;
    }
    .brush .extent {
      fill-opacity: .3;
      stroke: #fff;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <table id=""selected-data""></table>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 200, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Units Sold""] = +d[""Units Sold""];
          d.Revenue = +d.Revenue;
        });

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Units Sold""])])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Revenue)])
          .range([height, 0]);

        svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d[""Units Sold""]))
          .attr(""cy"", d => yScale(d.Revenue))
          .attr(""r"", 5);

        const brush = d3.brush()
          .extent([[0, 0], [width, height]])
          .on(""brush"", brushed);

        svg.append(""g"")
          .attr(""class"", ""brush"")
          .call(brush);

        function brushed({ selection }) {
          const selectedData = [];
          svg.selectAll(""circle"")
            .each(function(d) {
              const x = xScale(d[""Units Sold""]);
              const y = yScale(d.Revenue);
              if (selection[0][0] <= x && x <= selection[1][0] && selection[0][1] <= y && y <= selection[1][1]) {
                selectedData.push(d);
              }
            });

          const table = d3.select(""#selected-data"");
          table.selectAll(""tr"").remove();

          selectedData.slice(0, 20).forEach(d => {
            const row = table.append(""tr"");
            Object.keys(d).forEach(key => {
              row.append(""td"").text(d[key]);
            });
          });
        }
      });
  </script>
</body>
</html>
```",Initialization Error,209,210
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a horizontal Bar Chart that shows all the data concerning Store Location and Units Sold, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Store Location vs Units Sold</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      position: relative;
      display: inline-block;
    }
    .minimap {
      position: absolute;
      top: 0;
      right: 0;
      width: 100px;
      height: 300px;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 120, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 300 - margin.top - margin.bottom;
    const minimapWidth = 100;
    const minimapHeight = height;

    const svg = d3.select("".chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right + minimapWidth)
      .attr(""height"", height + margin.top + margin.bottom);

    const g = svg.append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const minimapG = svg.append(""g"")
      .attr(""transform"", `translate(${width + margin.left + 20}, ${margin.top})`)
      .attr(""class"", ""minimap"");

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
      data.forEach(d => {
        d[""Units Sold""] = +d[""Units Sold""];
      });

      const storeLocations = [...new Set(data.map(d => d[""Store Location""]))];

      const x = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Units Sold""])])
        .range([0, width]);

      const y = d3.scaleBand()
        .domain(storeLocations)
        .range([0, height])
        .padding(0.2);

      const bars = g.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", 0)
        .attr(""y"", d => y(d[""Store Location""]))
        .attr(""width"", d => x(d[""Units Sold""]))
        .attr(""height"", y.bandwidth());

      const minimapBars = minimapG.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", 0)
        .attr(""y"", d => y(d[""Store Location""]))
        .attr(""width"", minimapWidth)
        .attr(""height"", y.bandwidth())
        .attr(""fill"", ""lightgray"");

      const xAxis = d3.axisBottom(x);
      g.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(xAxis);

      const yAxis = d3.axisLeft(y);
      g.append(""g"")
        .call(yAxis);
    });
  </script>
</body>
</html>
```",Unexpected Initial Result,210,211
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Units Sold and Revenue, and a Bar Chart on the right that displays Store Location versus Units Sold.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Daily Sales Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
    <style>
        #chart-container {
            display: flex;
            width: 100%;
            height: 600px;
        }
        #scatterplot {
            width: 50%;
            height: 100%;
        }
        #barchart {
            width: 50%;
            height: 100%;
        }
    </style>
</head>
<body>
    <div id=""chart-container"">
        <div id=""scatterplot""></div>
        <div id=""barchart""></div>
    </div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const scatterplotData = [];
                const barchartData = {};
                csvData.forEach(row => {
                    const [date, storeLocation, unitsSold, revenue, profit, operatingHours, customerVisits, productCategory] = row.split(',');
                    scatterplotData.push([parseInt(unitsSold), parseFloat(revenue)]);
                    if (!barchartData[storeLocation]) {
                        barchartData[storeLocation] = 0;
                    }
                    barchartData[storeLocation] += parseInt(unitsSold);
                });
                const barchartSeriesData = Object.keys(barchartData).map(storeLocation => ({ name: storeLocation, value: barchartData[storeLocation] }));

                const scatterplotChart = echarts.init(document.getElementById('scatterplot'));
                scatterplotChart.setOption({
                    title: {
                        text: 'Units Sold vs Revenue'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Units Sold'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Revenue'
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: scatterplotData
                        }
                    ]
                });

                const barchartChart = echarts.init(document.getElementById('barchart'));
                barchartChart.setOption({
                    title: {
                        text: 'Store Location vs Units Sold'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    xAxis: {
                        type: 'category',
                        data: Object.keys(barchartData)
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Units Sold'
                    },
                    series: [
                        {
                            type: 'bar',
                            data: barchartSeriesData
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,211,212
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Units Sold and Revenue, and a Bar Chart on the right that displays Store Location versus Units Sold. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Daily Sales Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <style>
        #chart-container {
            display: flex;
            width: 100%;
            height: 600px;
        }
        #scatterplot {
            width: 50%;
            height: 100%;
        }
        #barchart {
            width: 50%;
            height: 100%;
        }
    </style>
</head>
<body>
    <div id=""chart-container"">
        <div id=""scatterplot""></div>
        <div id=""barchart""></div>
    </div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const scatterplotData = csvData.map(row => [+row[2], +row[3]]);
                const barchartData = {};
                csvData.forEach(row => {
                    if (!barchartData[row[1]]) {
                        barchartData[row[1]] = 0;
                    }
                    barchartData[row[1]] += +row[2];
                });
                const barchartXAxis = Object.keys(barchartData);
                const barchartSeries = Object.values(barchartData);

                const scatterplotChart = echarts.init(document.getElementById('scatterplot'));
                const barchartChart = echarts.init(document.getElementById('barchart'));

                const option = {
                    scatterplot: {
                        title: {
                            text: 'Units Sold vs Revenue'
                        },
                        xAxis: {
                            type: 'value'
                        },
                        yAxis: {
                            type: 'value'
                        },
                        series: [
                            {
                                type: 'scatter',
                                data: scatterplotData,
                                emphasis: {
                                    focus: 'series'
                                }
                            }
                        ],
                        brush: {
                            throttleType: 'debounce',
                            throttleDelay: 300,
                            xAxisIndex: 'all',
                            yAxisIndex: 'all',
                            brushLink: 'all',
                            inBrush: {
                                opacity: 1
                            },
                            outOfBrush: {
                                opacity: 0.5
                            }
                        }
                    },
                    barchart: {
                        title: {
                            text: 'Store Location vs Units Sold'
                        },
                        xAxis: {
                            type: 'category',
                            data: barchartXAxis
                        },
                        yAxis: {
                            type: 'value'
                        },
                        series: [
                            {
                                type: 'bar',
                                data: barchartSeries,
                                emphasis: {
                                    focus: 'series'
                                }
                            }
                        ]
                    }
                };

                scatterplotChart.setOption(option.scatterplot);
                barchartChart.setOption(option.barchart);

                scatterplotChart.on('brushSelected', params => {
                    const selectedData = params.batch[0].areas[0].range;
                    const startIndex = Math.floor(selectedData[0][0]);
                    const endIndex = Math.ceil(selectedData[0][1]);
                    const selectedXAxis = barchartXAxis.slice(startIndex, endIndex);
                    const selectedSeries = barchartSeries.slice(startIndex, endIndex);
                    const newOption = {
                        series: [
                            {
                                type: 'bar',
                                data: barchartSeries.map((value, index) => selectedXAxis.includes(barchartXAxis[index]) ? value : NaN)
                            }
                        ]
                    };
                    barchartChart.setOption(newOption);
                });
            });
    </script>
</body>
</html>
```",Execution Error,212,213
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Sold , while the pie chart represents the distribution of Revenue.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Daily Sales Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const unitsSoldData = [];
                const revenueData = {};
                csvData.forEach(row => {
                    const [date, , unitsSold, revenue, , , , productCategory] = row.split(',');
                    unitsSoldData.push([date, parseInt(unitsSold)]);
                    if (!revenueData[productCategory]) {
                        revenueData[productCategory] = 0;
                    }
                    revenueData[productCategory] += parseFloat(revenue);
                });
                const revenuePieData = Object.keys(revenueData).map(category => ({
                    name: category,
                    value: revenueData[category],
                }));
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    grid: {
                        top: '10%',
                        bottom: '50%',
                    },
                    xAxis: {
                        type: 'category',
                        data: unitsSoldData.map(data => data[0]),
                    },
                    yAxis: {
                        type: 'value',
                    },
                    series: [
                        {
                            type: 'line',
                            data: unitsSoldData.map(data => data[1]),
                        },
                    ],
                });
                const pieChart = echarts.init(document.getElementById('chart'));
                pieChart.setOption({
                    grid: {
                        top: '60%',
                        bottom: '10%',
                    },
                    series: [
                        {
                            type: 'pie',
                            radius: '50%',
                            data: revenuePieData,
                            emphasis: {
                                itemStyle: {
                                    shadowBlur: 10,
                                    shadowOffsetX: 0,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)',
                                },
                            },
                        },
                    ],
                });
            });
    </script>
</body>
</html>
```",Correct,213,214
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Sold , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Daily Sales Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <style>
        #chart {
            width: 800px;
            height: 600px;
            border: 1px solid #ccc;
            padding: 10px;
        }
    </style>
</head>
<body>
    <div id=""chart""></div>
    <script>
        // Load data from CSV file
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                // Parse CSV data
                const rows = data.split('\n').slice(1);
                const chartData = rows.map(row => {
                    const columns = row.split(',');
                    return {
                        date: columns[0],
                        unitsSold: parseFloat(columns[2]),
                        revenue: parseFloat(columns[3]),
                        productCategory: columns[7]
                    };
                });

                // Create line chart data
                const lineChartData = [];
                const lineChartDates = [];
                chartData.forEach(data => {
                    lineChartData.push(data.unitsSold);
                    lineChartDates.push(data.date);
                });

                // Create pie chart data
                const pieChartData = {};
                chartData.forEach(data => {
                    if (!pieChartData[data.productCategory]) {
                        pieChartData[data.productCategory] = 0;
                    }
                    pieChartData[data.productCategory] += data.revenue;
                });
                const pieChartCategories = Object.keys(pieChartData);
                const pieChartValues = Object.values(pieChartData);

                // Create ECharts instance
                const chart = echarts.init(document.getElementById('chart'));

                // Define chart options
                const option = {
                    grid: [
                        {
                            top: '10%',
                            left: '10%',
                            right: '10%',
                            height: '40%'
                        },
                        {
                            top: '60%',
                            left: '10%',
                            right: '10%',
                            height: '30%'
                        }
                    ],
                    dataZoom: [
                        {
                            type: 'inside',
                            xAxisIndex: 0,
                            filterMode: 'empty'
                        },
                        {
                            type: 'inside',
                            xAxisIndex: 0,
                            filterMode: 'empty',
                            start: 0,
                            end: 100
                        }
                    ],
                    xAxis: [
                        {
                            type: 'category',
                            gridIndex: 0,
                            data: lineChartDates
                        },
                        {
                            type: 'category',
                            gridIndex: 1,
                            data: pieChartCategories
                        }
                    ],
                    yAxis: [
                        {
                            type: 'value',
                            gridIndex: 0
                        },
                        {
                            type: 'value',
                            gridIndex: 1
                        }
                    ],
                    series: [
                        {
                            name: 'Units Sold',
                            type: 'line',
                            xAxisIndex: 0,
                            yAxisIndex: 0,
                            data: lineChartData,
                            sampling: 'lttb',
                            itemStyle: {
                                color: '#007bff'
                            }
                        },
                        {
                            name: 'Revenue',
                            type: 'pie',
                            xAxisIndex: 1,
                            yAxisIndex: 1,
                            radius: ['40%', '60%'],
                            data: pieChartValues.map((value, index) => ({
                                value,
                                name: pieChartCategories[index]
                            })),
                            itemStyle: {
                                borderColor: '#fff',
                                borderWidth: 1
                            }
                        }
                    ]
                };

                // Enable brushing and linking
                chart.on('brushSelected', params => {
                    const selectedData = params.batch[0].selected[0].data;
                    const startIndex = lineChartDates.indexOf(selectedData[0]);
                    const endIndex = lineChartDates.indexOf(selectedData[selectedData.length - 1]);
                    const selectedPieChartData = {};
                    chartData.slice(startIndex, endIndex + 1).forEach(data => {
                        if (!selectedPieChartData[data.productCategory]) {
                            selectedPieChartData[data.productCategory] = 0;
                        }
                        selectedPieChartData[data.productCategory] += data.revenue;
                    });
                    const selectedPieChartCategories = Object.keys(selectedPieChartData);
                    const selectedPieChartValues = Object.values(selectedPieChartData);
                    chart.setOption({
                        series: [
                            {
                                name: 'Revenue',
                                type: 'pie',
                                data: selectedPieChartValues.map((value, index) => ({
                                    value,
                                    name: selectedPieChartCategories[index]
                                }))
                            }
                        ]
                    });
                });

                // Set chart options
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,214,215
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Units Sold, Revenue, Profit, and Customer Visits. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/d3@7.4.4/dist/d3.min.js""></script>
    <style>
        #chart {
            width: 800px;
            height: 600px;
            margin: 0 auto;
        }
    </style>
</head>
<body>
    <div id=""chart""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = d3.csvParse(data);
                const dimensions = ['Units Sold', 'Revenue', 'Profit', 'Customer Visits'];
                const matrixData = [];
                dimensions.forEach((dim1, index1) => {
                    dimensions.forEach((dim2, index2) => {
                        const seriesData = csvData.map(row => [+row[dim1], +row[dim2]]);
                        matrixData.push({
                            name: `${dim1} vs ${dim2}`,
                            data: seriesData,
                            type: 'scatter',
                            symbolSize: 5,
                            animation: false,
                            tooltip: {
                                trigger: 'item'
                            }
                        });
                    });
                });
                const option = {
                    tooltip: {
                        trigger: 'item'
                    },
                    grid: {
                        top: 80,
                        left: 80,
                        right: 80,
                        bottom: 80
                    },
                    xAxis: dimensions.map(dim => ({
                        gridIndex: 0,
                        type: 'value',
                        name: dim,
                        nameLocation: 'middle',
                        nameGap: 30,
                        nameTextStyle: {
                            fontSize: 14
                        }
                    })),
                    yAxis: dimensions.map(dim => ({
                        gridIndex: 0,
                        type: 'value',
                        name: dim,
                        nameLocation: 'middle',
                        nameGap: 30,
                        nameTextStyle: {
                            fontSize: 14
                        }
                    })),
                    series: matrixData,
                    brush: {
                        xAxisIndex: 'all',
                        yAxisIndex: 'all',
                        brushLink: 'all',
                        brushType: 'rect',
                        toolbox: ['rect', 'keep', 'clear'],
                        throttleType: 'debounce',
                        throttleDelay: 300
                    }
                };
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,215,216
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a brushable Scatterplot that visualizes the relationship between Units Sold and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Brushable Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <div id=""table"" style=""width: 200px; height: 600px; overflow-y: auto; border: 1px solid #ccc; padding: 10px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const chartData = csvData.map(row => [parseFloat(row[2]), parseFloat(row[3])]);

                const chart = echarts.init(document.getElementById('chart'));
                const table = document.getElementById('table');

                chart.setOption({
                    tooltip: {},
                    xAxis: {},
                    yAxis: {},
                    series: [{
                        symbolSize: 10,
                        data: chartData,
                        type: 'scatter',
                        brush: {
                            outOfBrush: {
                                colorAlpha: 0.1
                            }
                        }
                    }]
                });

                chart.on('brushSelected', params => {
                    const selectedData = params.batch[0].areas[0].data;
                    const tableHtml = selectedData.slice(0, 20).map((row, index) => {
                        const originalRow = csvData.find(row => row[2] === row[0].toString() && row[3] === row[1].toString());
                        return `
                            <tr>
                                <td>${index + 1}</td>
                                <td>${originalRow[0]}</td>
                                <td>${originalRow[1]}</td>
                                <td>${originalRow[2]}</td>
                                <td>${originalRow[3]}</td>
                                <td>${originalRow[4]}</td>
                                <td>${originalRow[5]}</td>
                                <td>${originalRow[6]}</td>
                                <td>${originalRow[7]}</td>
                            </tr>
                        `;
                    }).join('');
                    table.innerHTML = `
                        <table>
                            <tr>
                                <th>No.</th>
                                <th>Date</th>
                                <th>Store Location</th>
                                <th>Units Sold</th>
                                <th>Revenue</th>
                                <th>Profit</th>
                                <th>Operating Hours</th>
                                <th>Customer Visits</th>
                                <th>Product Category</th>
                            </tr>
                            ${tableHtml}
                        </table>
                    `;
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,216,217
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a horizontal Bar Chart that shows all the data concerning Store Location and Units Sold, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Daily Sales Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <div id=""minimap"" style=""width: 100px; height: 600px; position: absolute; top: 0; right: 0;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const storeLocations = [];
                const unitsSold = [];
                csvData.forEach(row => {
                    const [date, storeLocation, unitsSoldValue, revenue, profit, operatingHours, customerVisits, productCategory] = row.split(',');
                    if (!storeLocations.includes(storeLocation)) {
                        storeLocations.push(storeLocation);
                        unitsSold.push(parseInt(unitsSoldValue));
                    } else {
                        const index = storeLocations.indexOf(storeLocation);
                        unitsSold[index] += parseInt(unitsSoldValue);
                    }
                });
                const chart = echarts.init(document.getElementById('chart'));
                const minimap = echarts.init(document.getElementById('minimap'));
                const option = {
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'value',
                        boundaryGap: [0, 0.01]
                    },
                    yAxis: {
                        type: 'category',
                        data: storeLocations
                    },
                    series: [
                        {
                            name: 'Units Sold',
                            type: 'bar',
                            data: unitsSold
                        }
                    ]
                };
                const minimapOption = {
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'value',
                        boundaryGap: [0, 0.01]
                    },
                    yAxis: {
                        type: 'category',
                        data: storeLocations
                    },
                    series: [
                        {
                            name: 'Units Sold',
                            type: 'bar',
                            data: unitsSold
                        }
                    ],
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 10
                        },
                        {
                            show: true,
                            type: 'slider',
                            start: 0,
                            end: 10,
                            handleSize: 8,
                            height: 8,
                            bottom: 0
                        }
                    ]
                };
                chart.setOption(option);
                minimap.setOption(minimapOption);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,217,218
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Units Sold and Revenue, and a Bar Chart on the right that displays Store Location versus Units Sold.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Vega-Lite Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: row;
    }
  </style>
</head>
<body>
  <div id=""vis"">
    <div id=""scatterplot""></div>
    <div id=""barchart""></div>
  </div>

  <script>
    const scatterplotSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""}
      }
    };

    const barchartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"" },
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Store Location"", ""type"": ""nominal"", ""sort"": ""-y""},
        ""y"": {""field"": ""Units Sold"", ""type"": ""quantitative"", ""aggregate"": ""sum""}
      }
    };

    vegaEmbed(""#scatterplot"", scatterplotSpec);
    vegaEmbed(""#barchart"", barchartSpec);
  </script>
</body>
</html>
```",Correct,218,219
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Units Sold and Revenue, and a Bar Chart on the right that displays Store Location versus Units Sold. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Interactive Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: row;
    }
  </style>
</head>
<body>
  <div id=""vis"">
    <div id=""scatterplot""></div>
    <div id=""barchart""></div>
  </div>

  <script>
    const scatterplotSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Store Location"", ""type"": ""nominal""}
      },
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x""]}
      }
    };

    const barchartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"" },
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Store Location"", ""type"": ""nominal"", ""sort"": ""-y""},
        ""y"": {""field"": ""Units Sold"", ""type"": ""quantitative"", ""aggregate"": ""sum""},
        ""color"": {""condition"": {""test"": ""datum.Store_Location === parent.parent.selection.brush"", ""value"": ""steelblue""}, ""value"": ""grey""}
      }
    };

    vegaEmbed(""#scatterplot"", scatterplotSpec);
    vegaEmbed(""#barchart"", barchartSpec);
  </script>
</body>
</html>
```",Unexpected Initial Result,219,220
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Sold , while the pie chart represents the distribution of Revenue.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Vega-Lite Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const lineChartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"" },
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {""field"": ""Date"", ""type"": ""temporal""},
        ""y"": {""field"": ""Units Sold"", ""type"": ""quantitative""}
      }
    };

    const pieChartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"" },
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Revenue"", ""type"": ""quantitative"", ""stack"": true},
        ""color"": {""field"": ""Product Category"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", lineChartSpec, { ""actions"": false });
    vegaEmbed(""#vis"", pieChartSpec, { ""actions"": false });
  </script>
</body>
</html>
```",Unexpected Initial Result,220,221
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Sold , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Interactive Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
  </style>
</head>
<body>
  <div id=""vis"">
    <div id=""line-chart""></div>
    <div id=""pie-chart""></div>
  </div>

  <script>
    const lineChartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"" },
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {""field"": ""Date"", ""type"": ""temporal""},
        ""y"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Date"", ""type"": ""temporal""},
          {""field"": ""Units Sold"", ""type"": ""quantitative""}
        ]
      },
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x""]}
      }
    };

    const pieChartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"" },
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Revenue"", ""type"": ""quantitative"", ""aggregate"": ""sum""},
        ""color"": {""field"": ""Product Category"", ""type"": ""nominal""}
      },
      ""transform"": [
        {""filter"": ""datum.Date >= brush_start && datum.Date <= brush_end""}
      ]
    };

    vegaEmbed(""#line-chart"", lineChartSpec);
    vegaEmbed(""#pie-chart"", pieChartSpec);

    const lineChartView = vega.View.create(lineChartSpec);
    const pieChartView = vega.View.create(pieChartSpec);

    lineChartView.addEventListener(""brush"", (event) => {
      const brushStart = event.item[""brush_start""];
      const brushEnd = event.item[""brush_end""];
      pieChartSpec.transform[0][""filter""] = `datum.Date >= ${brushStart} && datum.Date <= ${brushEnd}`;
      pieChartView.signal(""brush_start"", brushStart);
      pieChartView.signal(""brush_end"", brushEnd);
      pieChartView.run();
    });
  </script>
</body>
</html>
```",Initialization Error,221,222
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Units Sold, Revenue, Profit, and Customer Visits. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Scatterplot Matrix with Brushing</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to our embed */
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum['Units Sold'] !== null && datum['Revenue'] !== null && datum['Profit'] !== null && datum['Customer Visits'] !== null""}
      ],
      ""spacing"": 50,
      ""vconcat"": [
        {
          ""mark"": ""point"",
          ""selection"": {
            ""brush"": {
              ""type"": ""interval"",
              ""encodings"": [""x"", ""y""],
              ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
              ""translate"": ""[mousedown[!event.shiftKey], mouseup] > mousemove!"",
              ""zoom"": ""![event.shiftKey]""
            }
          },
          ""encoding"": {
            ""x"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
            ""color"": {
              ""condition"": {
                ""test"": ""brush"",
                ""field"": ""Customer Visits"",
                ""type"": ""quantitative""
              },
              ""value"": ""grey""
            }
          }
        },
        {
          ""mark"": ""point"",
          ""selection"": {
            ""brush"": {
              ""type"": ""interval"",
              ""encodings"": [""x"", ""y""],
              ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
              ""translate"": ""[mousedown[!event.shiftKey], mouseup] > mousemove!"",
              ""zoom"": ""![event.shiftKey]""
            }
          },
          ""encoding"": {
            ""x"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Profit"", ""type"": ""quantitative""},
            ""color"": {
              ""condition"": {
                ""test"": ""brush"",
                ""field"": ""Customer Visits"",
                ""type"": ""quantitative""
              },
              ""value"": ""grey""
            }
          }
        },
        {
          ""mark"": ""point"",
          ""selection"": {
            ""brush"": {
              ""type"": ""interval"",
              ""encodings"": [""x"", ""y""],
              ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
              ""translate"": ""[mousedown[!event.shiftKey], mouseup] > mousemove!"",
              ""zoom"": ""![event.shiftKey]""
            }
          },
          ""encoding"": {
            ""x"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Customer Visits"", ""type"": ""quantitative""},
            ""color"": {
              ""condition"": {
                ""test"": ""brush"",
                ""field"": ""Customer Visits"",
                ""type"": ""quantitative""
              },
              ""value"": ""grey""
            }
          }
        },
        {
          ""mark"": ""point"",
          ""selection"": {
            ""brush"": {
              ""type"": ""interval"",
              ""encodings"": [""x"", ""y""],
              ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
              ""translate"": ""[mousedown[!event.shiftKey], mouseup] > mousemove!"",
              ""zoom"": ""![event.shiftKey]""
            }
          },
          ""encoding"": {
            ""x"": {""field"": ""Revenue"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Profit"", ""type"": ""quantitative""},
            ""color"": {
              ""condition"": {
                ""test"": ""brush"",
                ""field"": ""Customer Visits"",
                ""type"": ""quantitative""
              },
              ""value"": ""grey""
            }
          }
        },
        {
          ""mark"": ""point"",
          ""selection"": {
            ""brush"": {
              ""type"": ""interval"",
              ""encodings"": [""x"", ""y""],
              ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
              ""translate"": ""[mousedown[!event.shiftKey], mouseup] > mousemove!"",
              ""zoom"": ""![event.shiftKey]""
            }
          },
          ""encoding"": {
            ""x"": {""field"": ""Revenue"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Customer Visits"", ""type"": ""quantitative""},
            ""color"": {
              ""condition"": {
                ""test"": ""brush"",
                ""field"": ""Customer Visits"",
                ""type"": ""quantitative""
              },
              ""value"": ""grey""
            }
          }
        },
        {
          ""mark"": ""point"",
          ""selection"": {
            ""brush"": {
              ""type"": ""interval"",
              ""encodings"": [""x"", ""y""],
              ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
              ""translate"": ""[mousedown[!event.shiftKey], mouseup] > mousemove!"",
              ""zoom"": ""![event.shiftKey]""
            }
          },
          ""encoding"": {
            ""x"": {""field"": ""Profit"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Customer Visits"", ""type"": ""quantitative""},
            ""color"": {
              ""condition"": {
                ""test"": ""brush"",
                ""field"": ""Customer Visits"",
                ""type"": ""quantitative""
              },
              ""value"": ""grey""
            }
          }
        }
      ]
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Initialization Error,222,223
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a brushable Scatterplot that visualizes the relationship between Units Sold and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Brushable Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 600,
      ""height"": 400,
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Date"", ""type"": ""nominal""},
          {""field"": ""Store Location"", ""type"": ""nominal""},
          {""field"": ""Units Sold"", ""type"": ""quantitative""},
          {""field"": ""Revenue"", ""type"": ""quantitative""},
          {""field"": ""Profit"", ""type"": ""quantitative""},
          {""field"": ""Operating Hours"", ""type"": ""quantitative""},
          {""field"": ""Customer Visits"", ""type"": ""quantitative""},
          {""field"": ""Product Category"", ""type"": ""nominal""}
        ]
      },
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x"", ""y""]}
      }
    };

    const opts = {
      ""actions"": false
    };

    vegaEmbed(""#vis"", spec, opts).then(result => {
      const view = result.view;
      view.addEventListener(""mouseover"", () => {
        const table = document.createElement(""table"");
        table.style.position = ""absolute"";
        table.style.top = ""0px"";
        table.style.right = ""0px"";
        table.style.border = ""1px solid black"";
        document.body.appendChild(table);

        view.addEventListener(""interval"", (event) => {
          const selectedData = event.detail;
          const rows = selectedData.items.slice(0, 20);
          table.innerHTML = """";
          rows.forEach((row) => {
            const rowElement = document.createElement(""tr"");
            Object.keys(row).forEach((key) => {
              const cellElement = document.createElement(""td"");
              cellElement.textContent = row[key];
              rowElement.appendChild(cellElement);
            });
            table.appendChild(rowElement);
          });
        });
      });
    });
  </script>
</body>
</html>
```",Unexpected Initial Result,223,224
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a horizontal Bar Chart that shows all the data concerning Store Location and Units Sold, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Store Location and Units Sold</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 600,
      ""height"": 400,
      ""layer"": [
        {
          ""mark"": ""bar"",
          ""encoding"": {
            ""x"": {
              ""field"": ""Units Sold"",
              ""type"": ""quantitative"",
              ""axis"": {
                ""title"": ""Units Sold""
              }
            },
            ""y"": {
              ""field"": ""Store Location"",
              ""type"": ""nominal"",
              ""axis"": {
                ""title"": ""Store Location""
              }
            },
            ""color"": {
              ""field"": ""Store Location"",
              ""type"": ""nominal""
            }
          }
        },
        {
          ""mark"": ""bar"",
          ""width"": 30,
          ""x"": {""offset"": 620},
          ""encoding"": {
            ""x"": {
              ""field"": ""Units Sold"",
              ""type"": ""quantitative"",
              ""axis"": null
            },
            ""y"": {
              ""field"": ""Store Location"",
              ""type"": ""nominal"",
              ""axis"": null
            },
            ""color"": {
              ""field"": ""Store Location"",
              ""type"": ""nominal""
            }
          }
        }
      ],
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv""
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,224,225
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot of Units Sold vs Revenue</title>
  <style>
    /* Add some basic styling to our chart */
    .chart {
      width: 800px;
      height: 600px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <svg class=""chart""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    // Set up the dimensions of our chart
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    // Create the SVG element
    const svg = d3.select('.chart')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    // Load the data
    d3.csv('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
      .then(data => {
        // Convert data types
        data.forEach(d => {
          d['Units Sold'] = +d['Units Sold'];
          d.Revenue = +d.Revenue;
        });

        // Create scales
        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Units Sold'])])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Revenue)])
          .range([height, 0]);

        // Create axes
        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(xAxis);

        svg.append('g')
          .call(yAxis);

        // Create scatterplot
        svg.selectAll('circle')
          .data(data)
          .enter()
          .append('circle')
          .attr('cx', d => xScale(d['Units Sold']))
          .attr('cy', d => yScale(d.Revenue))
          .attr('r', 5)
          .attr('fill', 'blue');
      });
  </script>
</body>
</html>
```",Correct,225,226
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Line Chart that visualizes the trend of Units Sold over the Date for each Store Location.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Units Sold Trend</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Date""] = new Date(d[""Date""]);
          d[""Units Sold""] = +d[""Units Sold""];
        });

        const storeLocations = [...new Set(data.map(d => d[""Store Location""]))];

        const xScale = d3.scaleTime()
          .domain(d3.extent(data, d => d[""Date""]))
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Units Sold""])])
          .range([height, 0]);

        const line = d3.line()
          .x(d => xScale(d[""Date""]))
          .y(d => yScale(d[""Units Sold""]));

        storeLocations.forEach(location => {
          const locationData = data.filter(d => d[""Store Location""] === location);

          svg.append(""path"")
            .datum(locationData)
            .attr(""fill"", ""none"")
            .attr(""stroke"", ""steelblue"")
            .attr(""stroke-width"", 1.5)
            .attr(""d"", line);
        });

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        svg.append(""text"")
          .attr(""transform"", `translate(${width / 2}, ${height + margin.bottom - 5})`)
          .attr(""text-anchor"", ""middle"")
          .text(""Date"");

        svg.append(""text"")
          .attr(""transform"", `rotate(-90) translate(${-height / 2}, ${-margin.left + 15})`)
          .attr(""text-anchor"", ""middle"")
          .text(""Units Sold"");
      });
  </script>
</body>
</html>
```",Correct,226,227
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Units Sold by Store Location</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 800px;
      height: 600px;
      margin: 40px auto;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select("".chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Date""] = new Date(d[""Date""]);
          d[""Units Sold""] = +d[""Units Sold""];
        });

        const filteredData = data.filter(d => d[""Date""].toISOString().split(""T"")[0] === ""2021-01-01"");

        const storeLocations = [...new Set(filteredData.map(d => d[""Store Location""]))];

        const xScale = d3.scaleBand()
          .domain(storeLocations)
          .range([0, width])
          .padding(0.2);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(filteredData, d => d[""Units Sold""])])
          .range([height, 0]);

        svg.selectAll(""rect"")
          .data(filteredData)
          .enter()
          .append(""rect"")
          .attr(""x"", d => xScale(d[""Store Location""]))
          .attr(""y"", d => yScale(d[""Units Sold""]))
          .attr(""width"", xScale.bandwidth())
          .attr(""height"", d => height - yScale(d[""Units Sold""]));

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));
      });
  </script>
</body>
</html>
```",Correct,227,228
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Pie Chart that visualizes the proportion of Units Sold contributed by each Store Location in 2021-01-01.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Daily Sales Pie Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    #chart {
      width: 500px;
      height: 500px;
      margin: 50px auto;
    }
  </style>
</head>
<body>
  <div id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;
    const radius = Math.min(width, height) / 2;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${width / 2 + margin.left}, ${height / 2 + margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Date""] = new Date(d[""Date""]);
          d[""Units Sold""] = +d[""Units Sold""];
        });

        const filteredData = data.filter(d => d3.timeFormat(""%Y-%m-%d"")(d[""Date""]) === ""2021-01-01"");

        const storeLocations = Array.from(new Set(filteredData.map(d => d[""Store Location""])));

        const pie = d3.pie()
          .value(d => d[""Units Sold""]);

        const arcs = svg.selectAll(""arc"")
          .data(pie(filteredData))
          .enter()
          .append(""path"")
          .attr(""fill"", (d, i) => d3.schemeCategory10[i])
          .attr(""d"", d3.arc()
            .innerRadius(0)
            .outerRadius(radius));

        const legend = svg.selectAll(""legend"")
          .data(storeLocations)
          .enter()
          .append(""g"")
          .attr(""transform"", (d, i) => `translate(0, ${i * 20})`);

        legend.append(""rect"")
          .attr(""x"", width / 2 + 20)
          .attr(""y"", 10)
          .attr(""width"", 10)
          .attr(""height"", 10)
          .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

        legend.append(""text"")
          .attr(""x"", width / 2 + 40)
          .attr(""y"", 20)
          .text(d => d);
      });
  </script>
</body>
</html>
```",Correct,228,229
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Donut Chart that visualizes the distribution of Units Sold among Store Location in 2021-01-01.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Donut Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 500px;
      height: 500px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 20, left: 20 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Date""] = new Date(d[""Date""]);
          d[""Units Sold""] = +d[""Units Sold""];
        });

        const filteredData = data.filter(d => d3.timeFormat(""%Y-%m-%d"")(d[""Date""]) === ""2021-01-01"");

        const storeLocations = Array.from(new Set(filteredData.map(d => d[""Store Location""])));

        const unitsSoldByStore = {};
        storeLocations.forEach(location => {
          unitsSoldByStore[location] = filteredData.filter(d => d[""Store Location""] === location).reduce((acc, d) => acc + d[""Units Sold""], 0);
        });

        const pie = d3.pie()
          .value(d => d.value);

        const arc = d3.arc()
          .outerRadius(width / 2 - 50)
          .innerRadius(width / 2 - 150);

        const arcs = svg.selectAll(""arc"")
          .data(pie(Object.entries(unitsSoldByStore)))
          .enter()
          .append(""path"")
          .attr(""d"", arc)
          .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

        const text = svg.selectAll(""text"")
          .data(pie(Object.entries(unitsSoldByStore)))
          .enter()
          .append(""text"")
          .attr(""transform"", d => `translate(${arc.centroid(d)})`)
          .attr(""dy"", ""0.35em"")
          .text(d => d.data[0]);
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,229,230
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Coxcomb Chart(polar area chart) to compare the Units Sold of different Store Location in 2021-01-01.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coxcomb Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 600px;
      height: 600px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 20, left: 20 };
    const width = 600 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('.chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
      .then(data => {
        data.forEach(d => {
          d['Date'] = new Date(d['Date']);
          d['Units Sold'] = +d['Units Sold'];
        });

        const filteredData = data.filter(d => d3.timeFormat('%Y-%m-%d')(d['Date']) === '2021-01-01');

        const storeLocations = [...new Set(filteredData.map(d => d['Store Location']))];

        const angles = storeLocations.map((_, i) => i * (2 * Math.PI / storeLocations.length));

        const radiusScale = d3.scaleLinear()
          .domain([0, d3.max(filteredData, d => d['Units Sold'])])
          .range([0, Math.min(width, height) / 2]);

        const angleScale = d3.scaleLinear()
          .domain([0, 2 * Math.PI])
          .range([0, 2 * Math.PI]);

        const area = d3.areaRadial()
          .innerRadius(0)
          .outerRadius(d => radiusScale(d['Units Sold']))
          .angle(d => angleScale(angles[storeLocations.indexOf(d['Store Location'])]));

        svg.selectAll('path')
          .data(filteredData)
          .enter()
          .append('path')
          .attr('d', area)
          .attr('fill', 'steelblue')
          .attr('stroke', 'white')
          .attr('stroke-width', 1);

        const labels = svg.selectAll('text')
          .data(storeLocations)
          .enter()
          .append('text')
          .attr('x', (d, i) => Math.cos(angles[i]) * (radiusScale(d3.max(filteredData, d => d['Units Sold'])) + 10))
          .attr('y', (d, i) => Math.sin(angles[i]) * (radiusScale(d3.max(filteredData, d => d['Units Sold'])) + 10))
          .text(d => d);
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,230,231
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Radar Chart to compare the Units Sold of different Store Location in 2021-01-01.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Radar Chart</title>
  <style>
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg width=""600"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 100, right: 100, bottom: 100, left: 100 };
    const width = 600 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Date""] = new Date(d[""Date""]);
          d[""Units Sold""] = +d[""Units Sold""];
        });

        const filteredData = data.filter(d => d3.timeFormat(""%Y-%m-%d"")(d[""Date""]) === ""2021-01-01"");

        const storeLocations = [...new Set(filteredData.map(d => d[""Store Location""]))];

        const angles = storeLocations.map((_, i) => i * (2 * Math.PI / storeLocations.length));

        const radius = Math.min(width, height) / 2 - 50;

        const radarLine = d3.lineRadial()
          .radius(d => d.radius)
          .angle(d => d.angle);

        const unitsSoldMax = d3.max(filteredData, d => d[""Units Sold""]);

        const scales = storeLocations.map(() => d3.scaleLinear()
          .domain([0, unitsSoldMax])
          .range([0, radius]));

        const groups = svg.selectAll(""g"")
          .data(storeLocations)
          .enter()
          .append(""g"")
          .attr(""transform"", (d, i) => `rotate(${angles[i] * 180 / Math.PI})`);

        groups.append(""line"")
          .attr(""x1"", 0)
          .attr(""y1"", 0)
          .attr(""x2"", radius)
          .attr(""y2"", radius)
          .attr(""stroke"", ""lightgray"");

        groups.append(""text"")
          .attr(""x"", radius + 10)
          .attr(""y"", 0)
          .text(d => d);

        const radarGroups = svg.selectAll("".radar-group"")
          .data(filteredData)
          .enter()
          .append(""g"")
          .attr(""class"", ""radar-group"");

        radarGroups.selectAll(""circle"")
          .data(d => storeLocations.map((storeLocation, i) => ({
            angle: angles[i],
            radius: scales[i](d[""Units Sold""]),
            storeLocation,
          })))
          .enter()
          .append(""circle"")
          .attr(""cx"", d => d.radius * Math.cos(d.angle))
          .attr(""cy"", d => d.radius * Math.sin(d.angle))
          .attr(""r"", 5)
          .attr(""fill"", ""blue"");

        radarGroups.append(""path"")
          .datum(d => storeLocations.map((storeLocation, i) => ({
            angle: angles[i],
            radius: scales[i](d[""Units Sold""]),
          })))
          .attr(""d"", radarLine)
          .attr(""stroke"", ""blue"")
          .attr(""fill"", ""none"");
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,231,232
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Streamgraph that visualizes the changes of Units Sold over the Date for each Store Location.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Streamgraph</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
      data.forEach(d => {
        d[""Date""] = new Date(d[""Date""]);
        d[""Units Sold""] = +d[""Units Sold""];
      });

      const storeLocations = Array.from(new Set(data.map(d => d[""Store Location""])));

      const x = d3.scaleTime()
        .domain(d3.extent(data, d => d[""Date""]))
        .range([0, width]);

      const y = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Units Sold""])])
        .range([height, 0]);

      const z = d3.scaleOrdinal(d3.schemeCategory10)
        .domain(storeLocations);

      const stack = d3.stack()
        .keys(storeLocations)
        .value((d, key) => d[key]);

      const stackedData = stack(data);

      const area = d3.area()
        .x(d => x(d.data[""Date""]))
        .y0(d => y(d[0]))
        .y1(d => y(d[1]));

      svg.selectAll(""path"")
        .data(stackedData)
        .enter()
        .append(""path"")
        .attr(""d"", area)
        .attr(""fill"", d => z(d.key));

      svg.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(x));

      svg.append(""g"")
        .call(d3.axisLeft(y));
    });
  </script>
</body>
</html>
```",Unexpected Initial Result,232,233
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Slopegraph to compare the Units Sold between 2021-01-04 and 2021-01-05 for each Store Location.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Slopegraph</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .slopegraph {
      width: 800px;
      height: 600px;
      margin: 50px auto;
    }
    .slopegraph .line {
      stroke: #ccc;
      stroke-width: 1.5px;
    }
    .slopegraph .circle {
      fill: #fff;
      stroke: #ccc;
      stroke-width: 1.5px;
    }
    .slopegraph .label {
      font-size: 12px;
      text-anchor: middle;
    }
  </style>
</head>
<body>
  <svg class=""slopegraph""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('.slopegraph')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
      .then(data => {
        data.forEach(d => {
          d['Date'] = new Date(d['Date']);
          d['Units Sold'] = +d['Units Sold'];
        });

        const storeLocations = Array.from(new Set(data.map(d => d['Store Location'])));
        const dates = ['2021-01-04', '2021-01-05'].map(d => new Date(d));

        const xScale = d3.scalePoint()
          .domain(dates)
          .range([0, width])
          .padding(0.5);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Units Sold'])])
          .range([height, 0]);

        const lines = svg.selectAll('.line')
          .data(storeLocations)
          .enter()
          .append('line')
          .attr('class', 'line')
          .attr('x1', d => xScale(dates[0]))
          .attr('y1', d => yScale(data.find(e => e['Store Location'] === d && e['Date'].toISOString().split('T')[0] === dates[0].toISOString().split('T')[0])['Units Sold']))
          .attr('x2', d => xScale(dates[1]))
          .attr('y2', d => yScale(data.find(e => e['Store Location'] === d && e['Date'].toISOString().split('T')[0] === dates[1].toISOString().split('T')[0])['Units Sold']));

        const circles = svg.selectAll('.circle')
          .data(storeLocations)
          .enter()
          .append('g')
          .selectAll('.circle')
          .data(d => dates.map(date => ({ storeLocation: d, date })))
          .enter()
          .append('circle')
          .attr('class', 'circle')
          .attr('cx', d => xScale(d.date))
          .attr('cy', d => yScale(data.find(e => e['Store Location'] === d.storeLocation && e['Date'].toISOString().split('T')[0] === d.date.toISOString().split('T')[0])['Units Sold']))
          .attr('r', 5);

        const labels = svg.selectAll('.label')
          .data(storeLocations)
          .enter()
          .append('g')
          .selectAll('.label')
          .data(d => dates.map(date => ({ storeLocation: d, date })))
          .enter()
          .append('text')
          .attr('class', 'label')
          .attr('x', d => xScale(d.date))
          .attr('y', d => yScale(data.find(e => e['Store Location'] === d.storeLocation && e['Date'].toISOString().split('T')[0] === d.date.toISOString().split('T')[0])['Units Sold']) + 20)
          .text(d => d.storeLocation);

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append('g')
          .call(d3.axisLeft(yScale));
      });
  </script>
</body>
</html>
```",Correct,233,234
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Heatmap that visualizes the Units Sold across Store Location and Dates.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Heatmap of Units Sold</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .tooltip {
      position: absolute;
      padding: 10px;
      font-size: 12px;
      background-color: #fff;
      border: 1px solid #ddd;
      border-radius: 5px;
      pointer-events: none;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 100, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('svg')
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
      .then(data => {
        data.forEach(d => {
          d['Units Sold'] = +d['Units Sold'];
          d.Date = d.Date.split('-').reverse().join('-');
        });

        const storeLocations = [...new Set(data.map(d => d['Store Location']))];
        const dates = [...new Set(data.map(d => d.Date))];

        const xScale = d3.scaleBand()
          .domain(dates)
          .range([0, width])
          .padding(0.1);

        const yScale = d3.scaleBand()
          .domain(storeLocations)
          .range([0, height])
          .padding(0.1);

        const colorScale = d3.scaleSequential()
          .domain([0, d3.max(data, d => d['Units Sold'])])
          .interpolator(d3.interpolateBlues);

        svg.selectAll('rect')
          .data(data)
          .enter()
          .append('rect')
          .attr('x', d => xScale(d.Date))
          .attr('y', d => yScale(d['Store Location']))
          .attr('width', xScale.bandwidth())
          .attr('height', yScale.bandwidth())
          .attr('fill', d => colorScale(d['Units Sold']));

        svg.selectAll('text')
          .data(storeLocations)
          .enter()
          .append('text')
          .attr('x', -30)
          .attr('y', d => yScale(d) + yScale.bandwidth() / 2)
          .attr('text-anchor', 'end')
          .attr('alignment-baseline', 'middle')
          .text(d => d);

        svg.selectAll('text')
          .data(dates)
          .enter()
          .append('text')
          .attr('x', d => xScale(d) + xScale.bandwidth() / 2)
          .attr('y', -20)
          .attr('text-anchor', 'middle')
          .text(d => d);

        const tooltip = d3.select('body')
          .append('div')
          .attr('class', 'tooltip')
          .style('opacity', 0);

        svg.selectAll('rect')
          .on('mouseover', (event, d) => {
            tooltip.transition()
              .duration(200)
              .style('opacity', 1);
            tooltip.html(`Units Sold: ${d['Units Sold']}`)
              .style('left', (event.pageX) + 'px')
              .style('top', (event.pageY - 28) + 'px');
          })
          .on('mouseout', () => {
            tooltip.transition()
              .duration(500)
              .style('opacity', 0);
          });
      });
  </script>
</body>
</html>
```",Correct,234,235
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Stacked Bar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 40px auto;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg class=""chart"" width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 40, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('.chart')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
      .then(data => {
        data.forEach(d => {
          d['Units Sold'] = +d['Units Sold'];
          d.Revenue = +d.Revenue;
          d.Profit = +d.Profit;
        });

        const categories = Array.from(new Set(data.map(d => d['Product Category'])));

        const xScale = d3.scaleBand()
          .domain(data.map(d => d['Store Location']))
          .range([0, width])
          .padding(0.2);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Units Sold'] + d.Revenue + d.Profit)])
          .range([height, 0]);

        const zScale = d3.scaleOrdinal(d3.schemeCategory10)
          .domain(categories);

        const stack = d3.stack()
          .keys(categories)
          .value((d, key) => {
            const categoryData = data.find(p => p['Store Location'] === d['Store Location'] && p['Product Category'] === key);
            return categoryData ? categoryData['Units Sold'] + categoryData.Revenue + categoryData.Profit : 0;
          });

        const stackedData = stack(data);

        svg.selectAll('g.layer')
          .data(stackedData)
          .enter()
          .append('g')
          .attr('class', 'layer')
          .attr('fill', d => zScale(d.key))
          .selectAll('rect')
          .data(d => d)
          .enter()
          .append('rect')
          .attr('x', d => xScale(d.data['Store Location']))
          .attr('y', d => yScale(d[1]))
          .attr('width', xScale.bandwidth())
          .attr('height', d => yScale(d[0]) - yScale(d[1]));

        svg.append('g')
          .attr('class', 'axis x-axis')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append('g')
          .attr('class', 'axis y-axis')
          .call(d3.axisLeft(yScale));

        svg.append('g')
          .attr('class', 'legend')
          .selectAll('rect')
          .data(categories)
          .enter()
          .append('rect')
          .attr('x', width - 200)
          .attr('y', (d, i) => 20 + i * 20)
          .attr('width', 20)
          .attr('height', 20)
          .attr('fill', d => zScale(d));

        svg.append('g')
          .attr('class', 'legend')
          .selectAll('text')
          .data(categories)
          .enter()
          .append('text')
          .attr('x', width - 180)
          .attr('y', (d, i) => 30 + i * 20)
          .text(d => d);
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,235,236
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Horizontal Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Units Sold by Store Location</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 40px;
    }
    .chart rect {
      fill: steelblue;
    }
    .chart text {
      fill: black;
      font-size: 14px;
    }
  </style>
</head>
<body>
  <svg class=""chart"" width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select("".chart"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Date""] = new Date(d[""Date""]);
          d[""Units Sold""] = +d[""Units Sold""];
        });

        const filteredData = data.filter(d => d3.timeFormat(""%Y-%m-%d"")(d[""Date""]) === ""2021-01-01"");

        const storeLocations = [...new Set(filteredData.map(d => d[""Store Location""]))];

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(filteredData, d => d[""Units Sold""])])
          .range([0, width]);

        const yScale = d3.scaleBand()
          .domain(storeLocations)
          .range([0, height])
          .padding(0.2);

        svg.selectAll(""rect"")
          .data(filteredData)
          .enter()
          .append(""rect"")
          .attr(""x"", 0)
          .attr(""y"", d => yScale(d[""Store Location""]))
          .attr(""width"", d => xScale(d[""Units Sold""]))
          .attr(""height"", yScale.bandwidth());

        svg.selectAll(""text"")
          .data(filteredData)
          .enter()
          .append(""text"")
          .attr(""x"", d => xScale(d[""Units Sold""]) + 5)
          .attr(""y"", d => yScale(d[""Store Location""]) + yScale.bandwidth() / 2 + 5)
          .text(d => d[""Units Sold""]);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));
      });
  </script>
</body>
</html>
```",Correct,236,237
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Units Sold vs Revenue Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = csvData.map(row => {
                    const columns = row.split(',');
                    return [parseFloat(columns[2]), parseFloat(columns[3])];
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Units Sold vs Revenue Scatterplot'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Units Sold'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Revenue'
                    },
                    series: [{
                        type: 'scatter',
                        data: chartData
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,237,238
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Line Chart that visualizes the trend of Units Sold over the Date for each Store Location.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Units Sold Trend</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [date, storeLocation, unitsSold] = row.split(',');
                    if (!chartData[storeLocation]) {
                        chartData[storeLocation] = {};
                    }
                    chartData[storeLocation][date] = parseInt(unitsSold);
                });

                const dates = Array.from(new Set(csvData.map(row => row.split(',')[0]))).sort();
                const series = Object.keys(chartData).map(storeLocation => {
                    return {
                        name: storeLocation,
                        type: 'line',
                        data: dates.map(date => chartData[storeLocation][date] || 0)
                    };
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Units Sold Trend'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    legend: {
                        data: Object.keys(chartData)
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    toolbox: {
                        feature: {
                            saveAsImage: {}
                        }
                    },
                    xAxis: {
                        type: 'category',
                        boundaryGap: false,
                        data: dates
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: series
                });
            });
    </script>
</body>
</html>
```",Correct,238,239
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Units Sold by Store Location</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [date, storeLocation, unitsSold] = row.split(',');
                    if (date === '2021-01-01') {
                        if (chartData[storeLocation]) {
                            chartData[storeLocation] += parseInt(unitsSold);
                        } else {
                            chartData[storeLocation] = parseInt(unitsSold);
                        }
                    }
                });
                const storeLocations = Object.keys(chartData);
                const unitsSoldData = Object.values(chartData);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Units Sold by Store Location on 2021-01-01'
                    },
                    tooltip: {},
                    xAxis: {
                        data: storeLocations
                    },
                    yAxis: {},
                    series: [{
                        name: 'Units Sold',
                        type: 'bar',
                        data: unitsSoldData
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,239,240
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Pie Chart that visualizes the proportion of Units Sold contributed by each Store Location in 2021-01-01.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Daily Sales Pie Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const chartData = {};
                rows.forEach(row => {
                    const columns = row.split(',');
                    if (columns[0] === '2021-01-01') {
                        const storeLocation = columns[1];
                        const unitsSold = parseFloat(columns[2]);
                        if (storeLocation in chartData) {
                            chartData[storeLocation] += unitsSold;
                        } else {
                            chartData[storeLocation] = unitsSold;
                        }
                    }
                });
                const seriesData = Object.keys(chartData).map(key => ({ name: key, value: chartData[key] }));
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Proportion of Units Sold by Store Location on 2021-01-01'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    series: [
                        {
                            type: 'pie',
                            data: seriesData,
                            emphasis: {
                                itemStyle: {
                                    shadowBlur: 10,
                                    shadowOffsetX: 0,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            }
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,240,241
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Donut Chart that visualizes the distribution of Units Sold among Store Location in 2021-01-01.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Donut Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.3.3/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [date, storeLocation, unitsSold] = row.split(',');
                    if (date === '2021-01-01') {
                        if (chartData[storeLocation]) {
                            chartData[storeLocation] += parseInt(unitsSold);
                        } else {
                            chartData[storeLocation] = parseInt(unitsSold);
                        }
                    }
                });
                const seriesData = Object.keys(chartData).map(key => ({ name: key, value: chartData[key] }));
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    series: [
                        {
                            type: 'pie',
                            radius: ['40%', '70%'],
                            avoidLabelOverlap: false,
                            label: {
                                show: false,
                                position: 'center'
                            },
                            emphasis: {
                                label: {
                                    show: true,
                                    fontSize: '40',
                                    fontWeight: 'bold'
                                }
                            },
                            labelLine: {
                                show: false
                            },
                            data: seriesData
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,241,242
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Coxcomb Chart(polar area chart) to compare the Units Sold of different Store Location in 2021-01-01.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coxcomb Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [date, storeLocation, unitsSold] = row.split(',');
                    if (date === '2021-01-01') {
                        if (!chartData[storeLocation]) {
                            chartData[storeLocation] = 0;
                        }
                        chartData[storeLocation] += parseInt(unitsSold);
                    }
                });
                const seriesData = Object.keys(chartData).map(key => ({ name: key, value: chartData[key] }));
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Units Sold of different Store Location in 2021-01-01',
                        left: 'center'
                    },
                    angleAxis: {
                        type: 'category',
                        data: seriesData.map(item => item.name),
                        z: 10
                    },
                    radiusAxis: {
                        type: 'value',
                        axisLabel: {
                            formatter: '{value}'
                        },
                        axisLine: {
                            lineStyle: {
                                color: '#ddd'
                            }
                        }
                    },
                    polar: {
                        center: ['50%', '50%'],
                        radius: '70%'
                    },
                    series: [
                        {
                            type: 'bar',
                            data: seriesData.map(item => item.value),
                            coordinateSystem: 'polar',
                            name: 'Units Sold',
                            stack: 'a',
                            emphasis: {
                                focus: 'series'
                            }
                        }
                    ],
                    legend: {
                        show: true,
                        data: ['Units Sold']
                    }
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,242,243
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Radar Chart to compare the Units Sold of different Store Location in 2021-01-01.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Radar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const storeLocations = [...new Set(csvData.map(row => row.split(',')[1]))];
                const unitsSold = {};
                csvData.forEach(row => {
                    const date = row.split(',')[0];
                    const location = row.split(',')[1];
                    const units = parseInt(row.split(',')[2]);
                    if (date === '2021-01-01') {
                        if (!unitsSold[location]) {
                            unitsSold[location] = units;
                        } else {
                            unitsSold[location] += units;
                        }
                    }
                });
                const chartData = storeLocations.map(location => unitsSold[location]);

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    radar: {
                        indicator: storeLocations.map(location => ({ name: location, max: Math.max(...chartData) })),
                        radius: 150,
                        center: ['50%', '50%'],
                    },
                    series: [{
                        type: 'radar',
                        data: [chartData],
                        symbol: 'none',
                        lineStyle: {
                            color: 'blue',
                        },
                        areaStyle: {
                            color: 'rgba(0, 0, 255, 0.2)',
                        },
                    }],
                });
            });
    </script>
</body>
</html>
```",Correct,243,244
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Streamgraph that visualizes the changes of Units Sold over the Date for each Store Location.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Streamgraph</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const storeLocations = [...new Set(csvData.map(row => row.split(',')[1]))];
                const dates = [...new Set(csvData.map(row => row.split(',')[0]))];
                const seriesData = storeLocations.map(location => {
                    const locationData = csvData.filter(row => row.split(',')[1] === location);
                    return dates.map(date => {
                        const dateData = locationData.find(row => row.split(',')[0] === date);
                        return dateData ? parseInt(dateData.split(',')[2]) : 0;
                    });
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'line',
                            lineStyle: {
                                color: 'rgba(0,0,0,0.2)',
                                width: 2,
                                type: 'solid'
                            }
                        }
                    },
                    legend: {
                        data: storeLocations
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'category',
                        boundaryGap: true,
                        data: dates
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: storeLocations.map((location, index) => ({
                        name: location,
                        type: 'line',
                        stack: '总量',
                        areaStyle: {},
                        data: seriesData[index]
                    }))
                });
            });
    </script>
</body>
</html>
```",Correct,244,245
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Slopegraph to compare the Units Sold between 2021-01-04 and 2021-01-05 for each Store Location.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Slopegraph</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const storeLocations = [...new Set(csvData.map(row => row[1]))];
                const date1 = '2021-01-04';
                const date2 = '2021-01-05';
                const seriesData = storeLocations.map(location => {
                    const data1 = csvData.find(row => row[0] === date1 && row[1] === location);
                    const data2 = csvData.find(row => row[0] === date2 && row[1] === location);
                    return [data1 ? +data1[2] : 0, data2 ? +data2[2] : 0];
                });
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Units Sold Slopegraph'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    grid: {
                        left: '10%',
                        right: '10%',
                        bottom: '10%',
                        top: '10%'
                    },
                    xAxis: [
                        {
                            type: 'category',
                            data: [date1, date2],
                            axisTick: {
                                alignWithLabel: true
                            }
                        }
                    ],
                    yAxis: [
                        {
                            type: 'value',
                            name: 'Units Sold'
                        }
                    ],
                    series: [
                        {
                            name: 'Units Sold',
                            type: 'line',
                            data: seriesData,
                            lineStyle: {
                                opacity: 0.5
                            },
                            symbolSize: 10,
                            label: {
                                show: true,
                                formatter: params => {
                                    return storeLocations[params.dataIndex];
                                }
                            }
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,245,246
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Heatmap that visualizes the Units Sold across Store Location and Dates.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Units Sold Heatmap</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const dates = [...new Set(csvData.map(row => row.split(',')[0]))];
                const storeLocations = [...new Set(csvData.map(row => row.split(',')[1]))];
                const heatmapData = dates.map(date => storeLocations.map(storeLocation => {
                    const row = csvData.find(row => row.split(',')[0] === date && row.split(',')[1] === storeLocation);
                    return row ? parseInt(row.split(',')[2]) : 0;
                }));

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Units Sold Heatmap'
                    },
                    tooltip: {
                        position: 'top'
                    },
                    grid: {
                        height: '50%',
                        top: '10%'
                    },
                    xAxis: {
                        type: 'category',
                        data: storeLocations,
                        splitArea: {
                            show: true
                        }
                    },
                    yAxis: {
                        type: 'category',
                        data: dates,
                        splitArea: {
                            show: true
                        }
                    },
                    visualMap: {
                        min: 0,
                        max: Math.max(...heatmapData.flat()),
                        calculable: true,
                        orient: 'horizontal',
                        left: 'center',
                        bottom: '15%'
                    },
                    series: [{
                        name: 'Units Sold',
                        type: 'heatmap',
                        data: heatmapData.map((row, index) => row.map((value, columnIndex) => ({
                            value: [columnIndex, index, value]
                        })).flat()),
                        label: {
                            show: true
                        },
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,246,247
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Stacked Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const chartData = [];
                const categories = [];
                const unitsSold = [];
                const revenue = [];
                const profit = [];

                const rows = data.split('\n');
                rows.forEach((row, index) => {
                    if (index > 0) {
                        const columns = row.split(',');
                        const category = columns[7];
                        if (!categories.includes(category)) {
                            categories.push(category);
                        }
                        const storeLocation = columns[1];
                        if (!chartData[storeLocation]) {
                            chartData[storeLocation] = {
                                'Units Sold': 0,
                                'Revenue': 0,
                                'Profit': 0
                            };
                        }
                        chartData[storeLocation]['Units Sold'] += parseFloat(columns[2]);
                        chartData[storeLocation]['Revenue'] += parseFloat(columns[3]);
                        chartData[storeLocation]['Profit'] += parseFloat(columns[4]);
                    }
                });

                const seriesData = [];
                categories.forEach(category => {
                    const series = {
                        name: category,
                        type: 'bar',
                        stack: 'total',
                        data: []
                    };
                    Object.keys(chartData).forEach(storeLocation => {
                        series.data.push(chartData[storeLocation][category]);
                    });
                    seriesData.push(series);
                });

                const option = {
                    title: {
                        text: 'Stacked Bar Chart'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    legend: {
                        data: categories
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'value',
                        boundaryGap: [0, 0.01]
                    },
                    yAxis: {
                        type: 'category',
                        data: Object.keys(chartData)
                    },
                    series: seriesData
                };

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,247,248
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Horizontal Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Units Sold by Store Location</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 1000px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const chartData = {};
                rows.forEach(row => {
                    const columns = row.split(',');
                    if (columns[0] === '2021-01-01') {
                        if (!chartData[columns[1]]) {
                            chartData[columns[1]] = 0;
                        }
                        chartData[columns[1]] += parseInt(columns[2]);
                    }
                });
                const storeLocations = Object.keys(chartData);
                const unitsSold = Object.values(chartData);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Units Sold by Store Location on 2021-01-01'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'value',
                        boundaryGap: [0, 0.01]
                    },
                    yAxis: {
                        type: 'category',
                        data: storeLocations
                    },
                    series: [
                        {
                            name: 'Units Sold',
                            type: 'bar',
                            data: unitsSold
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,248,249
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Scatterplot of Units Sold vs Revenue</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Units Sold"", ""type"": ""quantitative""},
          {""field"": ""Revenue"", ""type"": ""quantitative""}
        ]
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,249,250
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Line Chart that visualizes the trend of Units Sold over the Date for each Store Location.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Units Sold Trend</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {""field"": ""Date"", ""type"": ""temporal""},
        ""y"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Store Location"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,250,251
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Units Sold by Store Location</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Date === '2021-01-01'""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Store Location"", ""type"": ""nominal""},
        ""y"": {""field"": ""Units Sold"", ""type"": ""quantitative""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,251,252
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Pie Chart that visualizes the proportion of Units Sold contributed by each Store Location in 2021-01-01.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Store Location Units Sold Proportion</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Date === '2021-01-01'""},
        {""aggregate"": [{""op"": ""sum"", ""field"": ""Units Sold"", ""as"": ""Total Units Sold""}], ""groupby"": [""Store Location""]}
      ],
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Total Units Sold"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Store Location"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,252,253
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Donut Chart that visualizes the distribution of Units Sold among Store Location in 2021-01-01.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Donut Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Date === '2021-01-01'""},
        {""filter"": ""datum['Store Location'] !== null""}
      ],
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Store Location"", ""type"": ""nominal""}
      },
      ""view"": {""stroke"": null},
      ""width"": 400,
      ""height"": 400
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,253,254
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Coxcomb Chart(polar area chart) to compare the Units Sold of different Store Location in 2021-01-01.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coxcomb Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 500px;
      height: 500px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Date === '2021-01-01'""},
        {""calculate"": ""substring(datum['Store Location'], 0, 3)"", ""as"": ""Store Location""}
      ],
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Store Location"", ""type"": ""nominal""}
      },
      ""view"": {""stroke"": null},
      ""config"": {""arc"": {""padAngle"": 0.01}}
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,254,255
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Radar Chart to compare the Units Sold of different Store Location in 2021-01-01.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Radar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Date === '2021-01-01'""},
        {""calculate"": ""datum['Store Location']"", ""as"": ""category""},
        {""calculate"": ""datum['Units Sold']"", ""as"": ""value""}
      ],
      ""mark"": ""line"",
      ""encoding"": {
        ""theta"": {""field"": ""category"", ""type"": ""nominal"", ""scale"": {""range"": [0, 360]}},
        ""radius"": {""field"": ""value"", ""type"": ""quantitative"", ""scale"": {""domain"": [0, 1000]}}
      },
      ""config"": {
        ""view"": {""stroke"": null},
        ""axis"": {""grid"": false}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,255,256
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Streamgraph that visualizes the changes of Units Sold over the Date for each Store Location.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Streamgraph of Units Sold over Date for each Store Location</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""area"",
      ""encoding"": {
        ""x"": {""field"": ""Date"", ""type"": ""temporal""},
        ""y"": {""field"": ""Units Sold"", ""type"": ""quantitative"", ""stack"": true},
        ""color"": {""field"": ""Store Location"", ""type"": ""nominal""}
      },
      ""transform"": [{""stack"": ""Units Sold"", ""groupby"": [""Date"", ""Store Location""]}]
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,256,257
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Slopegraph to compare the Units Sold between 2021-01-04 and 2021-01-05 for each Store Location.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Slopegraph</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {
          ""filter"": ""datum.Date === '2021-01-04' || datum.Date === '2021-01-05'""
        }
      ],
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {
          ""field"": ""Date"",
          ""type"": ""nominal"",
          ""axis"": {""labelAngle"": 0}
        },
        ""y"": {
          ""field"": ""Units Sold"",
          ""type"": ""quantitative""
        },
        ""color"": {
          ""field"": ""Store Location"",
          ""type"": ""nominal""
        },
        ""detail"": {
          ""field"": ""Store Location"",
          ""type"": ""nominal""
        }
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,257,258
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Heatmap that visualizes the Units Sold across Store Location and Dates.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Heatmap of Units Sold</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""rect"",
      ""encoding"": {
        ""x"": {""field"": ""Date"", ""type"": ""ordinal""},
        ""y"": {""field"": ""Store Location"", ""type"": ""ordinal""},
        ""color"": {""field"": ""Units Sold"", ""type"": ""quantitative""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,258,259
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Stacked Bar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Date"", ""type"": ""nominal"", ""axis"": {""title"": ""Date""}},
        ""y"": {""field"": ""Units Sold"", ""type"": ""quantitative"", ""axis"": {""title"": ""Units Sold""}},
        ""color"": {""field"": ""Product Category"", ""type"": ""nominal"", ""legend"": {""title"": ""Product Category""}},
        ""tooltip"": [
          {""field"": ""Date"", ""type"": ""nominal""},
          {""field"": ""Product Category"", ""type"": ""nominal""},
          {""field"": ""Units Sold"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""labelFontSize"": 14, ""titleFontSize"": 16}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,259,260
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Horizontal Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Units Sold by Store Location</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Date === '2021-01-01'""},
        {""aggregate"": [{""op"": ""sum"", ""field"": ""Units Sold"", ""as"": ""Total Units Sold""}], ""groupby"": [""Store Location""]}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Total Units Sold"", ""type"": ""quantitative"", ""axis"": {""title"": ""Units Sold""}},
        ""y"": {""field"": ""Store Location"", ""type"": ""nominal"", ""axis"": {""title"": ""Store Location""}},
        ""color"": {""field"": ""Store Location"", ""type"": ""nominal""}
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""labelFontSize"": 14, ""titleFontSize"": 16}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,260,261
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot that visualizes the relationship between Enrollment Number and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Enrollment vs Revenue Scatterplot</title>
  <style>
    .tooltip {
      position: absolute;
      padding: 10px;
      font-size: 12px;
      border-radius: 5px;
      border: 1px solid #ccc;
      background-color: #fff;
      opacity: 0;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 100, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('svg')
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
      .then(data => {
        data.forEach(d => {
          d['Enrollment Number'] = +d['Enrollment Number'];
          d.Revenue = +d.Revenue;
        });

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Enrollment Number'])])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Revenue)])
          .range([height, 0]);

        const xAxis = d3.axisBottom(xScale)
          .ticks(10);

        const yAxis = d3.axisLeft(yScale)
          .ticks(10);

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(xAxis)
          .append('text')
          .attr('x', width / 2)
          .attr('y', 30)
          .attr('text-anchor', 'middle')
          .text('Enrollment Number');

        svg.append('g')
          .call(yAxis)
          .append('text')
          .attr('x', -30)
          .attr('y', -20)
          .attr('text-anchor', 'middle')
          .text('Revenue');

        const tooltip = d3.select('body')
          .append('div')
          .attr('class', 'tooltip');

        svg.selectAll('circle')
          .data(data)
          .enter()
          .append('circle')
          .attr('cx', d => xScale(d['Enrollment Number']))
          .attr('cy', d => yScale(d.Revenue))
          .attr('r', 5)
          .on('mouseover', (event, d) => {
            tooltip.transition()
              .duration(200)
              .style('opacity', 1);
            tooltip.html(`Enrollment Number: ${d['Enrollment Number']}<br>Revenue: ${d.Revenue}`)
              .style('left', (event.pageX + 10) + 'px')
              .style('top', (event.pageY - 10) + 'px');
          })
          .on('mouseout', () => {
            tooltip.transition()
              .duration(200)
              .style('opacity', 0);
          });
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,261,262
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot that visualizes the relationship between Enrollment Number and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Enrollment vs Revenue Scatterplot</title>
  <style>
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
    .brush .extent {
      stroke: #fff;
      fill-opacity: .125;
      shape-rendering: crispEdges;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Enrollment Number""] = +d[""Enrollment Number""];
          d.Revenue = +d.Revenue;
        });

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Enrollment Number""])])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Revenue)])
          .range([height, 0]);

        const xAxis = d3.axisBottom(xScale)
          .ticks(10)
          .tickSize(-height);

        const yAxis = d3.axisLeft(yScale)
          .ticks(10)
          .tickSize(-width);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(xAxis);

        svg.append(""g"")
          .call(yAxis);

        svg.append(""text"")
          .attr(""transform"", `translate(${width / 2}, ${height + margin.bottom - 5})`)
          .style(""text-anchor"", ""middle"")
          .text(""Enrollment Number"");

        svg.append(""text"")
          .attr(""transform"", `rotate(-90) translate(${-height / 2}, ${-margin.left + 15})`)
          .style(""text-anchor"", ""middle"")
          .text(""Revenue"");

        const brush = d3.brush()
          .extent([[0, 0], [width, height]])
          .on(""brush"", brushed)
          .on(""end"", brushended);

        svg.append(""g"")
          .attr(""class"", ""brush"")
          .call(brush);

        const circles = svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d[""Enrollment Number""]))
          .attr(""cy"", d => yScale(d.Revenue))
          .attr(""r"", 5)
          .attr(""fill"", ""steelblue"");

        function brushed() {
          const selection = d3.event.selection;
          if (selection) {
            const [x0, y0] = selection[0];
            const [x1, y1] = selection[1];
            circles.classed(""selected"", d => {
              const x = xScale(d[""Enrollment Number""]);
              const y = yScale(d.Revenue);
              return x >= x0 && x <= x1 && y >= y0 && y <= y1;
            });
          } else {
            circles.classed(""selected"", false);
          }
        }

        function brushended() {
          if (!d3.event.selection) {
            circles.classed(""selected"", false);
          }
        }
      });
  </script>
</body>
</html>
```",Execution Error,262,263
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot that visualizes the relationship between Enrollment Number and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Enrollment vs Revenue Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('svg')
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
      .then(data => {
        data.forEach(d => {
          d['Enrollment Number'] = +d['Enrollment Number'];
          d.Revenue = +d.Revenue;
        });

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Enrollment Number'])])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Revenue)])
          .range([height, 0]);

        const xAxis = d3.axisBottom(xScale)
          .ticks(10)
          .tickSize(-height);

        const yAxis = d3.axisLeft(yScale)
          .ticks(10)
          .tickSize(-width);

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(xAxis);

        svg.append('g')
          .call(yAxis);

        svg.append('text')
          .attr('transform', `translate(${width / 2}, ${height + margin.bottom - 5})`)
          .style('text-anchor', 'middle')
          .text('Enrollment Number');

        svg.append('text')
          .attr('transform', `rotate(-90) translate(${-height / 2}, ${-margin.left + 15})`)
          .style('text-anchor', 'middle')
          .text('Revenue');

        const points = svg.selectAll('circle')
          .data(data)
          .enter()
          .append('circle')
          .attr('cx', d => xScale(d['Enrollment Number']))
          .attr('cy', d => yScale(d.Revenue))
          .attr('r', 5)
          .attr('fill', 'steelblue');

        const zoom = d3.zoom()
          .scaleExtent([1, 10])
          .extent([[-Infinity, -Infinity], [Infinity, Infinity]])
          .on('zoom', zoomed);

        svg.call(zoom);

        function zoomed({ transform }) {
          points
            .attr('cx', d => transform.applyX(xScale(d['Enrollment Number'])))
            .attr('cy', d => transform.applyY(yScale(d.Revenue)));

          svg.selectAll('.axis')
            .remove();

          const newXAxis = d3.axisBottom(xScale)
            .ticks(10)
            .tickSize(-height)
            .scale(transform.rescaleX(xScale));

          const newYAxis = d3.axisLeft(yScale)
            .ticks(10)
            .tickSize(-width)
            .scale(transform.rescaleY(yScale));

          svg.append('g')
            .attr('transform', `translate(0, ${height})`)
            .call(newXAxis);

          svg.append('g')
            .call(newYAxis);
        }
      });
  </script>
</body>
</html>
```",Execution Error,263,264
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Enrollment Number and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Enrollment vs Revenue Scatterplot</title>
  <style>
    .tooltip {
      position: absolute;
      padding: 10px;
      font-size: 12px;
      color: #fff;
      background-color: #333;
      border-radius: 5px;
      pointer-events: none;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('svg')
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
      .then(data => {
        data.forEach(d => {
          d['Enrollment Number'] = +d['Enrollment Number'];
          d.Revenue = +d.Revenue;
        });

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Enrollment Number'])])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Revenue)])
          .range([height, 0]);

        const xAxis = d3.axisBottom(xScale)
          .ticks(10);

        const yAxis = d3.axisLeft(yScale)
          .ticks(10);

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(xAxis);

        svg.append('g')
          .call(yAxis);

        svg.append('text')
          .attr('transform', `translate(${width / 2}, ${height + margin.bottom - 5})`)
          .style('text-anchor', 'middle')
          .text('Enrollment Number');

        svg.append('text')
          .attr('transform', `rotate(-90) translate(${-height / 2}, ${-margin.left + 15})`)
          .style('text-anchor', 'middle')
          .text('Revenue');

        const tooltip = d3.select('body')
          .append('div')
          .attr('class', 'tooltip')
          .style('opacity', 0);

        svg.selectAll('circle')
          .data(data)
          .enter()
          .append('circle')
          .attr('cx', d => xScale(d['Enrollment Number']))
          .attr('cy', d => yScale(d.Revenue))
          .attr('r', 5)
          .on('mouseover', (event, d) => {
            tooltip.transition()
              .duration(200)
              .style('opacity', 0.9);
            tooltip.html(`Quarter: ${d.Quarter}<br>Education Level: ${d['Education Level']}<br>Enrollment Number: ${d['Enrollment Number']}<br>Revenue: ${d.Revenue}`)
              .style('left', (event.pageX) + 'px')
              .style('top', (event.pageY - 28) + 'px');
          })
          .on('mouseout', () => {
            tooltip.transition()
              .duration(500)
              .style('opacity', 0);
          })
          .on('click', (event, d) => {
            const query = `${d['Education Level']} ${d.Quarter} enrollment revenue`;
            const url = `https://www.google.com/search?q=${query}`;
            window.open(url, '_blank');
          });
      });
  </script>
</body>
</html>
```",Correct,264,265
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot with query widgets showing the Enrollment Number and Revenue of the given dataset. Add a slider to represent the Quarter.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Enrollment Number vs Revenue Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <div id=""chart""></div>
  <div id=""controls"">
    <label for=""quarter"">Quarter:</label>
    <input type=""range"" id=""quarter"" min=""1"" max=""4"" value=""1"">
    <span id=""quarter-value"">1</span>
    <br>
    <label for=""education-level"">Education Level:</label>
    <select id=""education-level""></select>
  </div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 300 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const xScale = d3.scaleLinear().range([0, width]);
    const yScale = d3.scaleLinear().range([height, 0]);

    const xAxis = d3.axisBottom(xScale);
    const yAxis = d3.axisLeft(yScale);

    svg.append(""g"")
      .attr(""class"", ""axis x-axis"")
      .attr(""transform"", `translate(0, ${height})`);

    svg.append(""g"")
      .attr(""class"", ""axis y-axis"");

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Enrollment Number""] = +d[""Enrollment Number""];
          d[""Revenue""] = +d[""Revenue""];
          d.Quarter = +d.Quarter;
        });

        const educationLevels = Array.from(new Set(data.map(d => d[""Education Level""])));
        const quarterValues = Array.from(new Set(data.map(d => d.Quarter)));

        d3.select(""#education-level"")
          .selectAll(""option"")
          .data(educationLevels)
          .enter()
          .append(""option"")
          .text(d => d);

        d3.select(""#quarter"")
          .property(""min"", Math.min(...quarterValues))
          .property(""max"", Math.max(...quarterValues))
          .property(""value"", Math.min(...quarterValues));

        d3.select(""#quarter-value"")
          .text(Math.min(...quarterValues));

        update(data, educationLevels[0], Math.min(...quarterValues));
      });

    d3.select(""#quarter"")
      .on(""input"", function() {
        const quarter = +this.value;
        d3.select(""#quarter-value"")
          .text(quarter);
        update(data, d3.select(""#education-level"").property(""value""), quarter);
      });

    d3.select(""#education-level"")
      .on(""change"", function() {
        const educationLevel = this.value;
        update(data, educationLevel, +d3.select(""#quarter"").property(""value""));
      });

    function update(data, educationLevel, quarter) {
      const filteredData = data.filter(d => d[""Education Level""] === educationLevel && d.Quarter === quarter);

      xScale.domain([0, d3.max(filteredData, d => d[""Enrollment Number""])]);
      yScale.domain([0, d3.max(filteredData, d => d[""Revenue""])]);

      svg.select("".x-axis"")
        .call(xAxis);

      svg.select("".y-axis"")
        .call(yAxis);

      svg.selectAll(""circle"")
        .data(filteredData, d => d[""Enrollment Number""])
        .join(
          enter => enter.append(""circle"")
            .attr(""cx"", d => xScale(d[""Enrollment Number""]))
            .attr(""cy"", d => yScale(d[""Revenue""]))
            .attr(""r"", 5),
          update => update
            .attr(""cx"", d => xScale(d[""Enrollment Number""]))
            .attr(""cy"", d => yScale(d[""Revenue""])),
          exit => exit.remove()
        );
    }
  </script>
</body>
</html>
```",Execution Error,265,266
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot showing the Enrollment Number of Graduate. Add animated transitions that connect these points using lines in order.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Enrollment Number of Graduate</title>
  <style>
    /* set the CSS */
    body { 
      font: 12px Arial;
    }
    path { 
      stroke: steelblue;
      stroke-width: 2;
      fill: none;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: grey;
      stroke-width: 1;
      shape-rendering: crispEdges;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    // set the dimensions and margins of the graph
    var margin = {top: 20, right: 20, bottom: 30, left: 40},
        width = 800 - margin.left - margin.right,
        height = 600 - margin.top - margin.bottom;

    // append the svg object to the body of the page
    var svg = d3.select(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");

    // get the data
    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(function(data) {
      // filter the data for graduate
      data = data.filter(function(d) {
        return d[""Education Level""] === ""Graduate"";
      });

      // convert data types
      data.forEach(function(d) {
        d[""Enrollment Number""] = +d[""Enrollment Number""];
        d[""Quarter""] = +d[""Quarter""];
      });

      // sort the data by quarter
      data.sort(function(a, b) {
        return a[""Quarter""] - b[""Quarter""];
      });

      // set the ranges
      var x = d3.scaleLinear()
        .domain([d3.min(data, function(d) { return d[""Quarter""]; }), d3.max(data, function(d) { return d[""Quarter""]; })])
        .range([0, width]);

      var y = d3.scaleLinear()
        .domain([d3.min(data, function(d) { return d[""Enrollment Number""]; }), d3.max(data, function(d) { return d[""Enrollment Number""]; })])
        .range([height, 0]);

      // add the x Axis
      svg.append(""g"")
        .attr(""transform"", ""translate(0,"" + height + "")"")
        .call(d3.axisBottom(x));

      // add the y Axis
      svg.append(""g"")
        .call(d3.axisLeft(y));

      // add the line
      var line = d3.line()
        .x(function(d) { return x(d[""Quarter""]); })
        .y(function(d) { return y(d[""Enrollment Number""]); });

      var path = svg.append(""path"")
        .datum(data)
        .attr(""d"", line)
        .attr(""stroke"", ""steelblue"")
        .attr(""stroke-width"", 2)
        .attr(""fill"", ""none"");

      // add the scatterplot
      svg.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", function(d) { return x(d[""Quarter""]); })
        .attr(""cy"", function(d) { return y(d[""Enrollment Number""]); })
        .attr(""r"", 5)
        .attr(""fill"", ""steelblue"");

      // animation
      var totalLength = path.node().getTotalLength();
      path
        .attr(""stroke-dasharray"", totalLength + "" "" + totalLength)
        .attr(""stroke-dashoffset"", totalLength)
        .transition()
        .duration(4000)
        .attr(""stroke-dashoffset"", 0);
    });
  </script>
</body>
</html>
```",Initialization Error,266,267
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Enrollment Number of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Multi-series Line Chart</title>
    <style>
        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 2;
        }

        .line:hover {
            stroke-width: 4;
        }

        .axis text {
            font-size: 12px;
        }

        .axis path,
        .axis line {
            fill: none;
            stroke: #777;
            stroke-width: 1;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 50, right: 50, bottom: 50, left: 50 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"")
            .then(data => {
                data.forEach(d => {
                    d[""Enrollment Number""] = +d[""Enrollment Number""];
                    d[""Quarter""] = +d[""Quarter""];
                });

                const quarters = [...new Set(data.map(d => d[""Quarter""]))].sort((a, b) => a - b);
                const educationLevels = [...new Set(data.map(d => d[""Education Level""]))];

                const xScale = d3.scalePoint()
                    .domain(quarters)
                    .range([0, width])
                    .padding(0.5);

                const yScale = d3.scaleLinear()
                    .domain([0, d3.max(data, d => d[""Enrollment Number""])])
                    .range([height, 0]);

                svg.append(""g"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(d3.axisBottom(xScale));

                svg.append(""g"")
                    .call(d3.axisLeft(yScale));

                const lines = svg.selectAll(""line"")
                    .data(educationLevels)
                    .enter()
                    .append(""g"")
                    .attr(""class"", ""line-group"");

                lines.selectAll(""line"")
                    .data(d => data.filter(f => f[""Education Level""] === d))
                    .enter()
                    .append(""line"")
                    .attr(""class"", ""line"")
                    .attr(""stroke"", (d, i) => d3.schemeCategory10[i])
                    .attr(""x1"", d => xScale(d[""Quarter""]))
                    .attr(""y1"", d => yScale(d[""Enrollment Number""]))
                    .attr(""x2"", d => xScale(d[""Quarter""]))
                    .attr(""y2"", height)
                    .on(""mouseover"", function(event, d) {
                        d3.select(this)
                            .attr(""stroke-width"", 4);
                    })
                    .on(""mouseout"", function(event, d) {
                        d3.select(this)
                            .attr(""stroke-width"", 2);
                    });

                lines.selectAll(""path"")
                    .data(d => data.filter(f => f[""Education Level""] === d))
                    .enter()
                    .append(""path"")
                    .datum(d => data.filter(f => f[""Education Level""] === d))
                    .attr(""class"", ""line"")
                    .attr(""stroke"", (d, i) => d3.schemeCategory10[i])
                    .attr(""fill"", ""none"")
                    .attr(""d"", d3.line()
                        .x(d => xScale(d[""Quarter""]))
                        .y(d => yScale(d[""Enrollment Number""])));

                const legend = svg.selectAll(""legend"")
                    .data(educationLevels)
                    .enter()
                    .append(""g"")
                    .attr(""transform"", (d, i) => `translate(${width + 20}, ${20 + i * 20})`);

                legend.append(""rect"")
                    .attr(""width"", 10)
                    .attr(""height"", 10)
                    .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

                legend.append(""text"")
                    .attr(""x"", 15)
                    .attr(""y"", 10)
                    .text(d => d);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,267,268
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Enrollment Number by Education Level in Q2-2021</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 600 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Enrollment Number""] = +d[""Enrollment Number""];
        });

        const q2Data = data.filter(d => d.Quarter === ""Q2-2021"");

        const x = d3.scaleBand()
          .domain(q2Data.map(d => d[""Education Level""]))
          .range([0, width])
          .padding(0.2);

        const y = d3.scaleLinear()
          .domain([0, d3.max(q2Data, d => d[""Enrollment Number""])])
          .range([height, 0]);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(x));

        svg.append(""g"")
          .call(d3.axisLeft(y));

        svg.selectAll(""bar"")
          .data(q2Data)
          .enter()
          .append(""rect"")
          .attr(""x"", d => x(d[""Education Level""]))
          .attr(""y"", d => y(d[""Enrollment Number""]))
          .attr(""width"", x.bandwidth())
          .attr(""height"", d => height - y(d[""Enrollment Number""]));

        const zoom = d3.zoom()
          .scaleExtent([1, 10])
          .extent([[-Infinity, -Infinity], [Infinity, Infinity]])
          .on(""zoom"", zoomed);

        svg.call(zoom);

        function zoomed({ transform }) {
          svg.selectAll(""rect"")
            .attr(""x"", d => x(d[""Education Level""]) * transform.k + transform.x)
            .attr(""width"", x.bandwidth() * transform.k);

          svg.selectAll(""g"")
            .attr(""transform"", `translate(${transform.x}, ${transform.y}) scale(${transform.k})`);
        }
      });
  </script>
</body>
</html>
```",Execution Error,268,269
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Enrollment Number Bar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 800px;
      height: 600px;
      border: 1px solid black;
    }
    .bar {
      fill: steelblue;
    }
    .bar:hover {
      fill: brown;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg class=""chart""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;
    const svg = d3.select(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Enrollment Number""] = +d[""Enrollment Number""];
          d.Quarter = d.Quarter;
        });

        const q2Data = data.filter(d => d.Quarter === ""Q2-2021"");

        const x = d3.scaleBand()
          .domain(q2Data.map(d => d[""Education Level""]))
          .range([0, width])
          .padding(0.2);

        const y = d3.scaleLinear()
          .domain([0, d3.max(q2Data, d => d[""Enrollment Number""])])
          .range([height, 0]);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(x));

        svg.append(""g"")
          .call(d3.axisLeft(y));

        const bars = svg.selectAll(""rect"")
          .data(q2Data)
          .enter()
          .append(""rect"")
          .attr(""class"", ""bar"")
          .attr(""x"", d => x(d[""Education Level""]))
          .attr(""y"", d => y(d[""Enrollment Number""]))
          .attr(""width"", x.bandwidth())
          .attr(""height"", d => height - y(d[""Enrollment Number""]));

        let drag = d3.drag()
          .on(""start"", dragstarted)
          .on(""drag"", dragged)
          .on(""end"", dragended);

        bars.call(drag);

        function dragstarted(event, d) {
          d3.select(this).raise();
          d3.event.sourceEvent.stopPropagation();
        }

        function dragged(event, d) {
          const newX = x(d[""Education Level""]) + event.dx;
          d3.select(this)
            .attr(""x"", newX);
        }

        function dragended(event, d) {
          const newIndex = Math.round((d3.select(this).attr(""x"") - x(d[""Education Level""])) / x.bandwidth());
          const newOrder = q2Data.slice();
          newOrder.splice(newOrder.indexOf(d), 1);
          newOrder.splice(newIndex, 0, d);
          x.domain(newOrder.map(d => d[""Education Level""]));
          svg.selectAll(""rect"")
            .transition()
            .duration(500)
            .attr(""x"", d => x(d[""Education Level""]));
          svg.selectAll(""g"")
            .filter(function() {
              return this.classList.contains(""x"");
            })
            .transition()
            .duration(500)
            .call(d3.axisBottom(x));
        }
      });
  </script>
</body>
</html>
```",Execution Error,269,270
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Enrollment Number.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Educational Enrollment Bar Chart</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .chart {
            margin: 40px auto;
        }
        .axis text {
            font-size: 12px;
        }
        .axis path,
        .axis line {
            fill: none;
            stroke: #777;
            stroke-width: 1;
        }
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: brown;
        }
        .sort-select {
            position: absolute;
            top: 10px;
            right: 10px;
        }
    </style>
</head>
<body>
    <div class=""chart""></div>
    <select class=""sort-select"">
        <option value=""asc"">Ascending</option>
        <option value=""desc"">Descending</option>
    </select>

    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 40 };
        const width = 500 - margin.left - margin.right;
        const height = 300 - margin.top - margin.bottom;

        const svg = d3.select("".chart"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

        const xScale = d3.scaleBand()
            .padding(0.2);

        const yScale = d3.scaleLinear()
            .range([height, 0]);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"")
            .then(data => {
                data.forEach(d => {
                    d[""Enrollment Number""] = +d[""Enrollment Number""];
                });

                const q2Data = data.filter(d => d.Quarter === ""Q2-2021"");

                xScale.domain(q2Data.map(d => d[""Education Level""]));
                yScale.domain([0, d3.max(q2Data, d => d[""Enrollment Number""])]);

                svg.append(""g"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(d3.axisBottom(xScale));

                svg.append(""g"")
                    .call(d3.axisLeft(yScale));

                const bars = svg.selectAll(""rect"")
                    .data(q2Data)
                    .enter()
                    .append(""rect"")
                    .attr(""x"", d => xScale(d[""Education Level""]))
                    .attr(""y"", d => yScale(d[""Enrollment Number""]))
                    .attr(""width"", xScale.bandwidth())
                    .attr(""height"", d => height - yScale(d[""Enrollment Number""]));

                d3.select("".sort-select"")
                    .on(""change"", function() {
                        const sortValue = this.value;
                        const sortedData = q2Data.sort((a, b) => {
                            if (sortValue === ""asc"") {
                                return a[""Enrollment Number""] - b[""Enrollment Number""];
                            } else {
                                return b[""Enrollment Number""] - a[""Enrollment Number""];
                            }
                        });

                        xScale.domain(sortedData.map(d => d[""Education Level""]));

                        svg.selectAll(""rect"")
                            .data(sortedData)
                            .transition()
                            .duration(1000)
                            .attr(""x"", d => xScale(d[""Education Level""]));

                        svg.selectAll(""g"")
                            .filter(function() {
                                return this.classList.contains(""x-axis"") === true;
                            })
                            .transition()
                            .duration(1000)
                            .call(d3.axisBottom(xScale));
                    });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,270,271
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot that visualizes the relationship between Enrollment Number and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>ECharts Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const enrollmentData = csvData.map(item => item.split(','));
                const enrollmentNumbers = enrollmentData.map(item => parseFloat(item[2]));
                const revenues = enrollmentData.map(item => parseFloat(item[3]));

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    tooltip: {
                        trigger: 'item',
                        formatter: function (params) {
                            return `Enrollment Number: ${params.data[0]}<br>Revenue: ${params.data[1]}`;
                        },
                        axisPointer: {
                            type: 'cross'
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Enrollment Number',
                        nameLocation: 'middle',
                        nameGap: 30,
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Revenue',
                        nameLocation: 'middle',
                        nameGap: 40,
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: enrollmentData.map((item, index) => [enrollmentNumbers[index], revenues[index]]),
                            symbolSize: 10,
                            itemStyle: {
                                opacity: 0.8
                            }
                        }
                    ]
                };
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,271,272
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot that visualizes the relationship between Enrollment Number and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>ECharts Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = csvData.map(row => {
                    const columns = row.split(',');
                    return [parseFloat(columns[2]), parseFloat(columns[3])];
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Enrollment Number vs Revenue'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    toolbox: {
                        feature: {
                            dataZoom: {
                                yAxisIndex: 'none'
                            },
                            brush: {
                                type: ['rect', 'polygon', 'clear']
                            }
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Enrollment Number'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Revenue'
                    },
                    series: [{
                        type: 'scatter',
                        data: chartData,
                        markArea: {
                            itemStyle: {
                                color: 'transparent',
                                borderWidth: 1,
                                borderType: 'dashed'
                            }
                        }
                    }]
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,272,273
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot that visualizes the relationship between Enrollment Number and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>ECharts Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = csvData.map(row => {
                    const columns = row.split(',');
                    return [parseFloat(columns[2]), parseFloat(columns[3])];
                });
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Enrollment Number vs Revenue'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Enrollment Number'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Revenue'
                    },
                    series: [{
                        type: 'scatter',
                        data: chartData
                    }]
                });
                chart.on('dataZoom', params => {
                    chart.setOption({
                        dataZoom: [
                            {
                                type: 'inside',
                                start: params.start,
                                end: params.end
                            }
                        ]
                    });
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,273,274
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Enrollment Number and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>ECharts Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = csvData.map(row => {
                    const columns = row.split(',');
                    return {
                        name: columns[1],
                        value: [parseFloat(columns[2]), parseFloat(columns[3])],
                        tooltip: {
                            formatter: () => {
                                return `
                                    <div>
                                        <p>Education Level: ${columns[1]}</p>
                                        <p>Enrollment Number: ${columns[2]}</p>
                                        <p>Revenue: ${columns[3]}</p>
                                    </div>
                                `;
                            }
                        },
                        label: {
                            formatter: () => {
                                return columns[1];
                            }
                        }
                    };
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    tooltip: {
                        trigger: 'item',
                        formatter: (params) => {
                            return params.data.tooltip.formatter();
                        }
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: chartData,
                            label: {
                                show: true,
                                formatter: (params) => {
                                    return params.data.label.formatter();
                                }
                            }
                        }
                    ],
                    xAxis: {
                        type: 'value',
                        name: 'Enrollment Number'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Revenue'
                    },
                    visualMap: {
                        type: 'continuous',
                        min: 0,
                        max: 100000,
                        inRange: {
                            color: ['#50a3ba', '#eac763', '#d94e5d']
                        }
                    }
                });

                chart.on('click', (params) => {
                    const educationLevel = params.data.name;
                    const url = `https://www.google.com/search?q=${educationLevel}`;
                    window.open(url, '_blank');
                });
            });
    </script>
</body>
</html>
```",Correct,274,275
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot with query widgets showing the Enrollment Number and Revenue of the given dataset. Add a slider to represent the Quarter.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>ECharts Scatterplot with Query Widgets</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-gl@2.2.0/dist/echarts-gl.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-stat@1.1.1/dist/echarts-stat.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-wordcloud@2.1.0/dist/echarts-wordcloud.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-liquidfill@2.0.5/dist/echarts-liquidfill.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-3d@1.1.0/dist/echarts-3d.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-3d-2@1.1.0/dist/echarts-3d-2.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-gl@2.2.0/dist/echarts-gl.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 800px; height: 600px;""></div>
    <div>
        <label for=""quarter"">Quarter:</label>
        <input type=""range"" id=""quarter"" min=""1"" max=""4"" value=""1"">
        <label for=""educationLevel"">Education Level:</label>
        <select id=""educationLevel"">
            <option value=""All"">All</option>
        </select>
    </div>

    <script>
        $.ajax({
            type: ""GET"",
            url: ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
            dataType: ""text"",
            success: function (data) {
                var allTextLines = data.split(/\r\n|\n/);
                var headers = allTextLines[0].split(',');
                var lines = [];

                for (var i = 1; i < allTextLines.length; i++) {
                    var data = allTextLines[i].split(',');
                    if (data.length == headers.length) {
                        var tarr = [];
                        for (var j = 0; j < headers.length; j++) {
                            tarr.push(data[j]);
                        }
                        lines.push(tarr);
                    }
                }

                var educationLevels = [];
                for (var i = 0; i < lines.length; i++) {
                    if (educationLevels.indexOf(lines[i][1]) == -1) {
                        educationLevels.push(lines[i][1]);
                        $('#educationLevel').append('<option value=""' + lines[i][1] + '"">' + lines[i][1] + '</option>');
                    }
                }

                var myChart = echarts.init(document.getElementById('main'));
                var option = {
                    title: {
                        text: 'Enrollment Number vs Revenue'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'cross'
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Enrollment Number',
                        nameLocation: 'middle',
                        nameGap: 30
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Revenue',
                        nameLocation: 'middle',
                        nameGap: 30
                    },
                    series: [{
                        type: 'scatter',
                        data: getScatterData(lines, 1, 'All'),
                        symbolSize: 10
                    }]
                };

                myChart.setOption(option);

                $('#quarter').on('input', function () {
                    myChart.setOption({
                        series: [{
                            data: getScatterData(lines, parseInt($(this).val()), $('#educationLevel').val())
                        }]
                    });
                });

                $('#educationLevel').on('change', function () {
                    myChart.setOption({
                        series: [{
                            data: getScatterData(lines, parseInt($('#quarter').val()), $(this).val())
                        }]
                    });
                });

                function getScatterData(lines, quarter, educationLevel) {
                    var data = [];
                    for (var i = 0; i < lines.length; i++) {
                        if (lines[i][0] == quarter.toString() && (educationLevel == 'All' || lines[i][1] == educationLevel)) {
                            data.push([parseFloat(lines[i][2]), parseFloat(lines[i][3])]);
                        }
                    }
                    return data;
                }
            }
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,275,276
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot showing the Enrollment Number of Graduate. Add animated transitions that connect these points using lines in order.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>ECharts Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const graduateData = csvData.filter(row => row.split(',')[1] === 'Graduate');
                const quarters = graduateData.map(row => row.split(',')[0]);
                const enrollmentNumbers = graduateData.map(row => parseInt(row.split(',')[2]));

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    title: {
                        text: 'Graduate Enrollment Number'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    xAxis: {
                        type: 'category',
                        data: quarters
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: enrollmentNumbers.map((value, index) => [quarters[index], value]),
                            symbolSize: 10,
                            label: {
                                show: true,
                                formatter: '{b}: {c}'
                            },
                            encode: {
                                x: 0,
                                y: 1
                            }
                        },
                        {
                            type: 'line',
                            data: enrollmentNumbers.map((value, index) => [quarters[index], value]),
                            symbolSize: 10,
                            label: {
                                show: true,
                                formatter: '{b}: {c}'
                            },
                            encode: {
                                x: 0,
                                y: 1
                            },
                            animationDuration: 2000,
                            animationEasing: 'cubicInOut'
                        }
                    ],
                    animationDuration: 2000,
                    animationEasing: 'cubicInOut'
                };
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,276,277
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Enrollment Number of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>ECharts Line Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const quarters = [];
                const enrollmentNumbers = {};
                csvData.forEach(row => {
                    const [quarter, educationLevel, enrollmentNumber] = row.split(',');
                    if (!quarters.includes(quarter)) {
                        quarters.push(quarter);
                    }
                    if (!enrollmentNumbers[educationLevel]) {
                        enrollmentNumbers[educationLevel] = [];
                    }
                    enrollmentNumbers[educationLevel].push(enrollmentNumber);
                });

                const chartDom = document.getElementById('chart');
                const myChart = echarts.init(chartDom);
                const option = {
                    tooltip: {
                        trigger: 'axis'
                    },
                    legend: {
                        data: Object.keys(enrollmentNumbers)
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    toolbox: {
                        feature: {
                            saveAsImage: {}
                        }
                    },
                    xAxis: {
                        type: 'category',
                        boundaryGap: false,
                        data: quarters
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: Object.keys(enrollmentNumbers).map(educationLevel => ({
                        name: educationLevel,
                        type: 'line',
                        data: enrollmentNumbers[educationLevel],
                        emphasis: {
                            focus: 'series'
                        }
                    }))
                };

                option && myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,277,278
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>ECharts Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [quarter, educationLevel, enrollmentNumber] = row.split(',');
                    if (quarter === 'Q2-2021') {
                        if (!chartData[educationLevel]) {
                            chartData[educationLevel] = 0;
                        }
                        chartData[educationLevel] += parseInt(enrollmentNumber);
                    }
                });
                const educationLevels = Object.keys(chartData);
                const enrollmentNumbers = Object.values(chartData);

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Enrollment Number for each Education Level in Q2-2021'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    xAxis: {
                        type: 'category',
                        data: educationLevels
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            name: 'Enrollment Number',
                            type: 'bar',
                            data: enrollmentNumbers
                        }
                    ],
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 100
                        },
                        {
                            start: 0,
                            end: 100
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,278,279
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Enrollment Number by Education Level in Q2-2021</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const q2_2021Data = csvData.filter(row => row[0] === 'Q2-2021');
                const educationLevels = [...new Set(q2_2021Data.map(row => row[1]))];
                const enrollmentNumbers = educationLevels.map(level => {
                    const levelData = q2_2021Data.filter(row => row[1] === level);
                    return levelData.reduce((sum, row) => sum + parseInt(row[2]), 0);
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'value',
                        position: 'bottom'
                    },
                    yAxis: {
                        type: 'category',
                        data: educationLevels,
                        axisLabel: {
                            interval: 0,
                            rotate: 30
                        }
                    },
                    series: [
                        {
                            name: 'Enrollment Number',
                            type: 'bar',
                            data: enrollmentNumbers,
                            itemStyle: {
                                opacity: 0.8
                            },
                            emphasis: {
                                itemStyle: {
                                    opacity: 1
                                }
                            }
                        }
                    ],
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 100
                        },
                        {
                            start: 0,
                            end: 100
                        }
                    ],
                    custom: {
                        interactive: true
                    }
                });

                chart.on('click', params => {
                    if (params.componentType === 'series') {
                        const seriesIndex = params.seriesIndex;
                        const dataIndex = params.dataIndex;
                        const seriesData = chart.getOption().series[seriesIndex].data;
                        const targetDataIndex = educationLevels.indexOf(params.name);
                        if (targetDataIndex !== dataIndex) {
                            [seriesData[dataIndex], seriesData[targetDataIndex]] = [seriesData[targetDataIndex], seriesData[dataIndex]];
                            [educationLevels[dataIndex], educationLevels[targetDataIndex]] = [educationLevels[targetDataIndex], educationLevels[dataIndex]];
                            chart.setOption({
                                series: [
                                    {
                                        name: 'Enrollment Number',
                                        type: 'bar',
                                        data: seriesData,
                                        itemStyle: {
                                            opacity: 0.8
                                        },
                                        emphasis: {
                                            itemStyle: {
                                                opacity: 1
                                            }
                                        }
                                    }
                                ],
                                yAxis: {
                                    type: 'category',
                                    data: educationLevels,
                                    axisLabel: {
                                        interval: 0,
                                        rotate: 30
                                    }
                                }
                            });
                        }
                    }
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,279,280
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Enrollment Number.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>ECharts Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <select id=""sort-order"">
        <option value=""desc"">Descending</option>
        <option value=""asc"">Ascending</option>
    </select>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = csvData.filter(row => row.split(',')[0] === 'Q2-2021')
                    .map(row => row.split(','))
                    .reduce((acc, row) => {
                        const educationLevel = row[1];
                        const enrollmentNumber = parseInt(row[2]);
                        if (!acc[educationLevel]) {
                            acc[educationLevel] = enrollmentNumber;
                        } else {
                            acc[educationLevel] += enrollmentNumber;
                        }
                        return acc;
                    }, {});

                const educationLevels = Object.keys(chartData);
                const enrollmentNumbers = Object.values(chartData);

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    xAxis: {
                        type: 'category',
                        data: educationLevels
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            data: enrollmentNumbers,
                            type: 'bar',
                            animationDuration: 2000,
                            animationEasing: 'cubicInOut'
                        }
                    ]
                };

                chart.setOption(option);

                document.getElementById('sort-order').addEventListener('change', () => {
                    const sortOrder = document.getElementById('sort-order').value;
                    if (sortOrder === 'desc') {
                        educationLevels.sort((a, b) => chartData[b] - chartData[a]);
                        enrollmentNumbers.sort((a, b) => b - a);
                    } else {
                        educationLevels.sort((a, b) => chartData[a] - chartData[b]);
                        enrollmentNumbers.sort((a, b) => a - b);
                    }
                    chart.setOption({
                        xAxis: {
                            data: educationLevels
                        },
                        series: [
                            {
                                data: enrollmentNumbers
                            }
                        ]
                    });
                });
            });
    </script>
</body>
</html>
```",Correct,280,281
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot that visualizes the relationship between Enrollment Number and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Enrollment vs Revenue Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to make the visualization more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
          {""field"": ""Revenue"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""axis"": {
          ""labelFontSize"": 14,
          ""titleFontSize"": 16
        }
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,281,282
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot that visualizes the relationship between Enrollment Number and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Enrollment vs Revenue Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Quarter"", ""type"": ""nominal""},
          {""field"": ""Education Level"", ""type"": ""nominal""},
          {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
          {""field"": ""Revenue"", ""type"": ""quantitative""}
        ]
      },
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x"", ""y""]}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,282,283
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot that visualizes the relationship between Enrollment Number and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Enrollment Number vs Revenue Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
          {""field"": ""Revenue"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""view"": {""continuousWidth"": 400, ""continuousHeight"": 300},
        ""scale"": {""zoom"": ""wheel""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Execution Result,283,284
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Enrollment Number and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Enrollment vs Revenue Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to our embed */
    #vis {
      width: 800px;
      height: 600px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Quarter"", ""type"": ""nominal""},
          {""field"": ""Education Level"", ""type"": ""nominal""},
          {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
          {""field"": ""Revenue"", ""type"": ""quantitative""},
          {""field"": ""Operating Costs"", ""type"": ""quantitative""},
          {""field"": ""Profit"", ""type"": ""quantitative""},
          {""field"": ""Average Tuition"", ""type"": ""quantitative""},
          {""field"": ""Number of Staff"", ""type"": ""quantitative""},
          {""field"": ""Graduation Rate"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""view"": {""width"": 800, ""height"": 600}
      }
    };

    const runtime = vega.parse(spec);
    const view = new vega.View(runtime)
      .initialize(""#vis"")
      .hover()
      .run();

    document.addEventListener(""click"", function(event) {
      if (event.target.classList.contains(""mark"")) {
        const quarter = event.target.__datum__.Quarter;
        const educationLevel = event.target.__datum__.EducationLevel;
        const searchQuery = `${quarter} ${educationLevel} education`;
        window.open(`https://www.google.com/search?q=${searchQuery}`);
      }
    });
  </script>
</body>
</html>
```",Unexpected Initial Result,284,285
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot with query widgets showing the Enrollment Number and Revenue of the given dataset. Add a slider to represent the Quarter.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Enrollment Number vs Revenue Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to our embed */
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Education Level"", ""type"": ""nominal""},
        ""tooltip"": [
          {""field"": ""Quarter"", ""type"": ""nominal""},
          {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
          {""field"": ""Revenue"", ""type"": ""quantitative""}
        ]
      },
      ""params"": [
        {
          ""name"": ""quarter"",
          ""value"": 1,
          ""bind"": {""input"": ""range"", ""min"": 1, ""max"": 4, ""step"": 1}
        }
      ],
      ""transform"": [
        {""filter"": ""datum.Quarter == quarter""}
      ]
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Execution Result,285,286
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot showing the Enrollment Number of Graduate. Add animated transitions that connect these points using lines in order.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Graduate Enrollment Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": {
        ""type"": ""line"",
        ""point"": true,
        ""tooltip"": true
      },
      ""encoding"": {
        ""x"": {""field"": ""Quarter"", ""type"": ""temporal""},
        ""y"": {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Education Level"", ""type"": ""nominal""},
        ""detail"": {""field"": ""Education Level"", ""type"": ""nominal""}
      },
      ""transform"": [
        {""filter"": ""datum['Education Level'] === 'Graduate'""}
      ],
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""labelFontSize"": 14, ""titleFontSize"": 14},
        ""legend"": {""labelFontSize"": 14, ""titleFontSize"": 14}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Initialization Error,286,287
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Enrollment Number of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Multi-Series Line Chart with Interactive Line Highlight</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to our chart */
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": {
        ""type"": ""line"",
        ""tooltip"": true
      },
      ""encoding"": {
        ""x"": {
          ""field"": ""Quarter"",
          ""type"": ""nominal"",
          ""axis"": {""labelAngle"": 0}
        },
        ""y"": {
          ""field"": ""Enrollment Number"",
          ""type"": ""quantitative"",
          ""axis"": {""title"": ""Enrollment Number""}
        },
        ""color"": {
          ""field"": ""Education Level"",
          ""type"": ""nominal"",
          ""legend"": {""orient"": ""bottom""}
        }
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""range"": {""category"": {""scheme"": ""category20""}}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Execution Result,287,288
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Bar Chart with Interactive Zoom and Pan</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Quarter === 'Q2-2021'""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Education Level"", ""type"": ""nominal""},
        ""y"": {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Education Level"", ""type"": ""nominal""},
          {""field"": ""Enrollment Number"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""view"": {""continuousWidth"": 400, ""continuousHeight"": 300},
        ""axis"": {""labelFontSize"": 16, ""titleFontSize"": 16},
        ""legend"": {""labelFontSize"": 16, ""titleFontSize"": 16}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Execution Result,288,289
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Enrollment Number by Education Level in Q2-2021</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to our chart */
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Quarter === 'Q2-2021'""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Enrollment Number"", ""type"": ""quantitative"", ""axis"": {""title"": ""Enrollment Number""}},
        ""y"": {""field"": ""Education Level"", ""type"": ""nominal"", ""axis"": {""title"": ""Education Level""}, ""sort"": ""-x""},
        ""tooltip"": [
          {""field"": ""Education Level"", ""type"": ""nominal""},
          {""field"": ""Enrollment Number"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""domainWidth"": 1}
      },
      ""interaction"": {
        ""drag"": {""stroke"": ""red"", ""strokeWidth"": 2}
      }
    };

    vegaEmbed(""#vis"", spec, {mode: ""vega-lite"", defaultStyle: true});
  </script>
</body>
</html>
```",Unexpected Execution Result,289,290
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Enrollment Number.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Enrollment Number by Education Level</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to our embed */
    #vis {
      width: 800px;
      height: 600px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <select id=""sort-order"">
    <option value=""descending"">Descending</option>
    <option value=""ascending"">Ascending</option>
  </select>
  <script>
    const opts = {
      mode: ""vega-lite"",
      renderer: ""canvas"",
    };

    vegaEmbed(""#vis"", {
      $schema: ""https://vega.github.io/schema/vega-lite/v5.json"",
      data: {
        url: ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
        format: { type: ""csv"" },
      },
      transform: [
        {
          filter: ""datum.Quarter === 'Q2-2021'"",
        },
      ],
      mark: ""bar"",
      encoding: {
        x: {
          field: ""Education Level"",
          type: ""nominal"",
          axis: { title: ""Education Level"" },
        },
        y: {
          field: ""Enrollment Number"",
          type: ""quantitative"",
          axis: { title: ""Enrollment Number"" },
        },
        color: {
          field: ""Education Level"",
          type: ""nominal"",
        },
      },
      config: {
        view: { stroke: null },
        bar: { binSpacing: 1 },
      },
    }, opts)
      .then((result) => {
        const sortOrderSelect = document.getElementById(""sort-order"");
        sortOrderSelect.addEventListener(""change"", (event) => {
          const sortOrder = event.target.value;
          const sort = sortOrder === ""descending"" ? ""descending"" : ""ascending"";
          result.view
            .signal(""sort"", sort)
            .run();
        });
      })
      .catch((error) => console.error(error));
  </script>
</body>
</html>
```",Unexpected Initial Result,290,291
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Enrollment Number and Revenue, and a Bar Chart on the right that displays Education Level versus Enrollment Number.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Educational Enrollment Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: inline-block;
      vertical-align: top;
    }
    .scatterplot {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
    .barchart {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart scatterplot"" id=""scatterplot""></div>
  <div class=""chart barchart"" id=""barchart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svgScatterplot = d3.select(""#scatterplot"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const svgBarchart = d3.select(""#barchart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
      data.forEach(d => {
        d[""Enrollment Number""] = +d[""Enrollment Number""];
        d.Revenue = +d.Revenue;
      });

      const xScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Enrollment Number""])])
        .range([0, width]);

      const yScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.Revenue)])
        .range([height, 0]);

      svgScatterplot.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScaleScatterplot(d[""Enrollment Number""]))
        .attr(""cy"", d => yScaleScatterplot(d.Revenue))
        .attr(""r"", 5);

      svgScatterplot.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleScatterplot));

      svgScatterplot.append(""g"")
        .call(d3.axisLeft(yScaleScatterplot));

      const xScaleBarchart = d3.scaleBand()
        .domain(data.map(d => d[""Education Level""]))
        .range([0, width])
        .padding(0.2);

      const yScaleBarchart = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Enrollment Number""])])
        .range([height, 0]);

      svgBarchart.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", d => xScaleBarchart(d[""Education Level""]))
        .attr(""y"", d => yScaleBarchart(d[""Enrollment Number""]))
        .attr(""width"", xScaleBarchart.bandwidth())
        .attr(""height"", d => height - yScaleBarchart(d[""Enrollment Number""]));

      svgBarchart.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleBarchart));

      svgBarchart.append(""g"")
        .call(d3.axisLeft(yScaleBarchart));
    });
  </script>
</body>
</html>
```",Correct,291,292
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Enrollment Number and Revenue, and a Bar Chart on the right that displays Education Level versus Enrollment Number. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,multiple view,Error: 'list' object has no attribute 'choices',Initialization Error,292,293
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Enrollment Number , while the pie chart represents the distribution of Revenue.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Educational Enrollment Data Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    #line-chart {
      width: 800px;
      height: 400px;
      border: 1px solid black;
    }
    #pie-chart {
      width: 800px;
      height: 400px;
      border: 1px solid black;
    }
  </style>
</head>
<body>
  <div id=""line-chart""></div>
  <div id=""pie-chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const lineSvg = d3.select(""#line-chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const pieSvg = d3.select(""#pie-chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left + width / 2}, ${margin.top + height / 2})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
      data.forEach(d => {
        d[""Enrollment Number""] = +d[""Enrollment Number""];
        d.Revenue = +d.Revenue;
      });

      const xScale = d3.scaleTime()
        .domain(d3.extent(data, (d, i) => i))
        .range([0, width]);

      const yScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Enrollment Number""])])
        .range([height, 0]);

      lineSvg.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

      lineSvg.append(""g"")
        .call(d3.axisLeft(yScale));

      lineSvg.append(""path"")
        .datum(data)
        .attr(""fill"", ""none"")
        .attr(""stroke"", ""steelblue"")
        .attr(""stroke-width"", 1.5)
        .attr(""d"", d3.line()
          .x((d, i) => xScale(i))
          .y(d => yScale(d[""Enrollment Number""])));

      const pie = d3.pie()
        .value(d => d.Revenue);

      const arc = d3.arc()
        .outerRadius(Math.min(width, height) / 2 - 10)
        .innerRadius(0);

      const arcs = pieSvg.selectAll(""arc"")
        .data(pie(data))
        .enter()
        .append(""g"")
        .attr(""class"", ""arc"");

      arcs.append(""path"")
        .attr(""fill"", (d, i) => d3.schemeCategory10[i])
        .attr(""d"", arc);

      arcs.append(""text"")
        .attr(""transform"", d => `translate(${arc.centroid(d)})`)
        .attr(""dy"", ""0.35em"")
        .text(d => `${(d.value / d3.sum(data, d => d.Revenue) * 100).toFixed(2)}%`);
    });
  </script>
</body>
</html>
```",Correct,293,294
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Enrollment Number , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Enrollment and Revenue Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: block;
    }
    .line-chart {
      width: 800px;
      height: 400px;
      margin: 20px auto;
    }
    .pie-chart {
      width: 800px;
      height: 400px;
      margin: 20px auto;
    }
  </style>
</head>
<body>
  <div class=""chart line-chart""></div>
  <div class=""chart pie-chart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const lineChart = d3.select('.line-chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    const pieChart = d3.select('.pie-chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left + width / 2}, ${margin.top + height / 2})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
      .then(data => {
        data.forEach(d => {
          d['Enrollment Number'] = +d['Enrollment Number'];
          d.Revenue = +d.Revenue;
        });

        const xScale = d3.scaleTime()
          .domain(d3.extent(data, (d, i) => i))
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Enrollment Number'])])
          .range([height, 0]);

        const line = d3.line()
          .x((d, i) => xScale(i))
          .y(d => yScale(d['Enrollment Number']));

        lineChart.append('path')
          .datum(data)
          .attr('fill', 'none')
          .attr('stroke', 'steelblue')
          .attr('stroke-width', 1.5)
          .attr('d', line);

        const brush = d3.brushX()
          .extent([[0, 0], [width, height]])
          .on('brush', brushed);

        lineChart.append('g')
          .attr('class', 'brush')
          .call(brush);

        function brushed({ selection }) {
          if (selection) {
            const startIndex = Math.floor(xScale.invert(selection[0]));
            const endIndex = Math.floor(xScale.invert(selection[1]));
            const selectedData = data.slice(startIndex, endIndex + 1);

            const pieData = d3.rollup(selectedData, v => d3.sum(v, d => d.Revenue), d => d['Education Level']);

            const pie = d3.pie()
              .value(d => d[1]);

            const arc = d3.arc()
              .outerRadius(height / 2 - 20)
              .innerRadius(0);

            pieChart.selectAll('path')
              .remove();

            pieChart.selectAll('path')
              .data(pie(pieData))
              .enter()
              .append('path')
              .attr('fill', (d, i) => d3.schemeCategory10[i])
              .attr('d', arc);
          }
        }
      });
  </script>
</body>
</html>
```",Unexpected Execution Result,294,295
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Enrollment Number, Revenue, and Profit. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot Matrix</title>
  <style>
    .brush .extent {
      fill-opacity: .3;
      stroke: #fff;
    }
    .brush .extent {
      fill-opacity: .3;
      stroke: #fff;
    }
    .brush .resize path {
      fill: #666;
    }
    .brush .resize rect {
      fill: #666;
    }
  </style>
</head>
<body>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;
    const size = 200;

    const svg = d3.select(""body"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const dimensions = [""Enrollment Number"", ""Revenue"", ""Profit""];
    const n = dimensions.length;

    const x = {};
    const y = {};
    const scales = {};
    const axes = {};

    dimensions.forEach(d => {
      x[d] = d3.scaleLinear()
        .domain([0, d3.max(data, p => +p[d])])
        .range([0, size]);
      y[d] = d3.scaleLinear()
        .domain([0, d3.max(data, p => +p[d])])
        .range([size, 0]);
      scales[d] = x[d];
      axes[d] = d3.axisLeft(y[d]);
    });

    const brush = d3.brush()
      .extent([[0, 0], [size, size]])
      .on(""start"", brushstart)
      .on(""brush"", brushmove)
      .on(""end"", brushend);

    let data;

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"")
      .then(csv => {
        data = csv.map(d => {
          dimensions.forEach(p => d[p] = +d[p]);
          return d;
        });

        const cells = svg.selectAll(""g"")
          .data(cross(dimensions, dimensions), (d, i) => d.source + ""-"" + d.target)
          .enter()
          .append(""g"")
          .attr(""transform"", (d, i) => `translate(${(i % n) * size}, ${Math.floor(i / n) * size})`);

        cells.append(""rect"")
          .attr(""x"", 0)
          .attr(""y"", 0)
          .attr(""width"", size)
          .attr(""height"", size)
          .attr(""fill"", ""none"");

        cells.append(""g"")
          .attr(""transform"", `translate(0, ${size})`)
          .each(function(d) {
            d3.select(this).call(axes[d.source]);
          });

        cells.append(""g"")
          .each(function(d) {
            d3.select(this).call(d3.axisTop(x[d.source]));
          });

        cells.append(""g"")
          .attr(""class"", ""brush"")
          .each(function(d) {
            d3.select(this).call(brush);
          });

        cells.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => x[dimensions[0]](d[dimensions[0]]))
          .attr(""cy"", d => y[dimensions[0]](d[dimensions[0]]))
          .attr(""r"", 3)
          .attr(""fill-opacity"", 0.5);

        function brushstart() {
          svg.classed(""brushing"", true);
        }

        function brushmove() {
          const s = d3.event.selection;
          if (s) {
            const [x0, y0] = s[0];
            const [x1, y1] = s[1];
            svg.selectAll(""circle"")
              .classed(""hidden"", d => {
                const x = x[d3.select(this.parentNode.parentNode).datum().source](d[d3.select(this.parentNode.parentNode).datum().source]);
                const y = y[d3.select(this.parentNode.parentNode).datum().target](d[d3.select(this.parentNode.parentNode).datum().target]);
                return x < x0 || x > x1 || y < y0 || y > y1;
              });
          } else {
            svg.selectAll(""circle"").classed(""hidden"", false);
          }
        }

        function brushend() {
          svg.classed(""brushing"", !d3.event.selection);
        }
      });

    function cross(a, b) {
      const c = [];
      for (let i = 0; i < a.length; i++) {
        for (let j = 0; j < b.length; j++) {
          c.push({ source: a[i], target: b[j] });
        }
      }
      return c;
    }
  </script>
</body>
</html>
```",Initialization Error,295,296
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a brushable Scatterplot that visualizes the relationship between Enrollment Number and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot with Brush</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .chart {
            position: relative;
            display: inline-block;
        }
        
        .brush rect {
            fill-opacity: 0.3;
        }
        
        .brush rect.extent {
            fill-opacity: 0.3;
            stroke: #fff;
            shape-rendering: crispEdges;
        }
        
        table {
            border-collapse: collapse;
            margin-left: 20px;
            vertical-align: top;
        }
        
        th, td {
            border-bottom: 1px solid #ddd;
            padding: 10px 20px;
        }
    </style>
</head>
<body>
    <div class=""chart""></div>
    <table id=""selected-data""></table>

    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 20, right: 200, bottom: 30, left: 40 };
        const width = 600 - margin.left - margin.right;
        const height = 400 - margin.top - margin.bottom;

        const svg = d3.select("".chart"")
                        .append(""svg"")
                        .attr(""width"", width + margin.left + margin.right)
                        .attr(""height"", height + margin.top + margin.bottom)
                        .append(""g"")
                        .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

         d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {

             data.forEach(d => {
                 d[""Enrollment Number""] = +d[""Enrollment Number""];
                 d.Revenue = +d.Revenue; 
             });

             const xScale = d3.scaleLinear()
                                .domain([0, d3.max(data, d => d[""Enrollment Number""])])
                                .range([0, width]);

             const yScale = d3.scaleLinear()
                                .domain([0, d3.max(data, d => d.Revenue)])
                                .range([height, 0]);

             svg.selectAll("".dot"")
                .data(data)
                .enter()
                .append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => xScale(d[""Enrollment Number""]))
                .attr(""cy"", d => yScale(d.Revenue))
                ._groups[0].forEach((node) =>
                    node.__data__.xPos =
                    node.getAttribute('cx')
                  );

              svg.selectAll("".dot"")._groups[0].forEach((node) =>
                    node.__data__.yPos =
                    node.getAttribute('cy')
                  );

              var brushGroup=svg.append('g').classed('brush',true);

              var brush=d3.brushX().extent([[xScale(100),yScale(100000)], [xScale(500),yScale(500000)]])
                            (brushGroup);

               brushGroup.call(
                   brush.extent([[xScale(100),yScale(100000)], [xScale(500),yScale(500000)]])
               )

               function update() {

                   var selectedData=[];

                   svg.selectAll('.dot').each(function(){
                       if (this.__data__) {

                           if ((+this.__data__[""Enrollment Number""])>=+this.parentNode.querySelector('.brush>.selection>.extent').getAttribute('x') &&
                               (+this.__data__[""Revenue""])>=+this.parentNode.querySelector('.brush>.selection>.extent').getAttribute('y') &&
                               (+this.__data__[""Revenue""])<=+this.parentNode.querySelector('.brush>.selection>.extent').getAttribute('height')+ 
                               this.parentNode.querySelector('.brush>.selection>.extent').getAttribute('y')){

                                   selectedData.push(this.__data__);

                           }

                       }

                   })



                  document.getElementById(
                      ""selected-data""
                  ).innerHTML='';

                  document.getElementById(
                      ""selected-data""
                  ).innerHTML+=`<tr><th>Quarter</th><th>Education Level</th><th>Enrollment Number</th><th>Revenue</th></tr>`


                     for(var i=selectedData.length-1;i>=Math.max(selectedData.length-20,-1);i--){

                         document.getElementById(
                             ""selected-data""
                         ).innerHTML+=`<tr><td>${selectedData[i]['Quarter']}</td><td>${selectedData[i]['Education Level']}</td><td>${(+selectedData[i]['Enrollment Number']).toLocaleString()}</td><td>$${(+selectedData[i]['Revenue']).toLocaleString()}</td></tr>`
                     }

               };

           brush.on(`end`,update)

         });
     </script>

 </body>

 </html>

```",Initialization Error,296,297
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a horizontal Bar Chart that shows all the data concerning Enrollment Number, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Enrollment Number Bar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      position: relative;
      display: inline-block;
    }
    .minimap {
      position: absolute;
      top: 0;
      right: 0;
      width: 100px;
      height: 400px;
      background-color: #f0f0f0;
      border: 1px solid #ccc;
    }
    .minimap rect {
      fill: #ccc;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 120, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;
    const minimapWidth = 100;
    const minimapHeight = height;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right + minimapWidth)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Enrollment Number""] = +d[""Enrollment Number""];
        });

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Enrollment Number""])])
          .range([0, width]);

        const yScale = d3.scaleBand()
          .domain(data.map(d => d[""Quarter""]))
          .range([0, height])
          .padding(0.2);

        const bars = svg.selectAll(""rect"")
          .data(data)
          .enter()
          .append(""rect"")
          .attr(""x"", 0)
          .attr(""y"", d => yScale(d[""Quarter""]))
          .attr(""width"", d => xScale(d[""Enrollment Number""]))
          .attr(""height"", yScale.bandwidth());

        const minimap = svg.append(""g"")
          .attr(""class"", ""minimap"")
          .attr(""transform"", `translate(${width + margin.right}, 0)`);

        const minimapBars = minimap.selectAll(""rect"")
          .data(data)
          .enter()
          .append(""rect"")
          .attr(""x"", 0)
          .attr(""y"", d => yScale(d[""Quarter""]))
          .attr(""width"", minimapWidth)
          .attr(""height"", yScale.bandwidth())
          .attr(""fill"", ""#ccc"");

        const minimapBrush = d3.brushY()
          .extent([[0, 0], [minimapWidth, minimapHeight]])
          .on(""brush"", brushed);

        minimap.call(minimapBrush);

        function brushed({ selection }) {
          if (selection) {
            const [start, end] = selection.map(yScale.invert);
            const startIndex = data.findIndex(d => d[""Quarter""] >= start);
            const endIndex = data.findIndex(d => d[""Quarter""] > end);
            const filteredData = data.slice(startIndex, endIndex);

            bars.data(filteredData)
              .transition()
              .duration(500)
              .attr(""y"", d => yScale(d[""Quarter""]))
              .attr(""width"", d => xScale(d[""Enrollment Number""]));
          } else {
            bars.data(data)
              .transition()
              .duration(500)
              .attr(""y"", d => yScale(d[""Quarter""]))
              .attr(""width"", d => xScale(d[""Enrollment Number""]));
          }
        }
      });
  </script>
</body>
</html>
```",Initialization Error,297,298
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Enrollment Number and Revenue, and a Bar Chart on the right that displays Education Level versus Enrollment Number.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>ECharts Example</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart1"" style=""width: 600px; height: 400px; float: left;""></div>
    <div id=""chart2"" style=""width: 600px; height: 400px; float: right;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chart1Data = [];
                const chart2Data = {};
                csvData.forEach(row => {
                    const columns = row.split(',');
                    const enrollmentNumber = parseFloat(columns[2]);
                    const revenue = parseFloat(columns[3]);
                    const educationLevel = columns[1];
                    chart1Data.push([enrollmentNumber, revenue]);
                    if (!chart2Data[educationLevel]) {
                        chart2Data[educationLevel] = 0;
                    }
                    chart2Data[educationLevel] += enrollmentNumber;
                });
                const chart1 = echarts.init(document.getElementById('chart1'));
                chart1.setOption({
                    title: {
                        text: 'Enrollment Number vs Revenue'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    xAxis: {
                        type: 'value'
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        type: 'scatter',
                        data: chart1Data
                    }]
                });
                const chart2 = echarts.init(document.getElementById('chart2'));
                chart2.setOption({
                    title: {
                        text: 'Education Level vs Enrollment Number'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    xAxis: {
                        type: 'category',
                        data: Object.keys(chart2Data)
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        type: 'bar',
                        data: Object.values(chart2Data)
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,298,299
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Enrollment Number and Revenue, and a Bar Chart on the right that displays Education Level versus Enrollment Number. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>ECharts Demo</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <style>
        #chart-container {
            display: flex;
            width: 100%;
            height: 600px;
        }
        #scatter-plot {
            width: 50%;
            height: 100%;
        }
        #bar-chart {
            width: 50%;
            height: 100%;
        }
    </style>
</head>
<body>
    <div id=""chart-container"">
        <div id=""scatter-plot""></div>
        <div id=""bar-chart""></div>
    </div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const scatterData = csvData.map(row => [+row[2], +row[3]]);
                const barData = {};
                csvData.forEach(row => {
                    if (!barData[row[1]]) {
                        barData[row[1]] = 0;
                    }
                    barData[row[1]] += +row[2];
                });
                const barXAxis = Object.keys(barData);
                const barSeries = Object.values(barData);

                const scatterChart = echarts.init(document.getElementById('scatter-plot'));
                const barChart = echarts.init(document.getElementById('bar-chart'));

                const option = {
                    scatterPlot: {
                        title: {
                            text: 'Enrollment Number vs Revenue'
                        },
                        tooltip: {
                            trigger: 'axis',
                            axisPointer: {
                                type: 'cross'
                            }
                        },
                        xAxis: {
                            type: 'value',
                            name: 'Enrollment Number'
                        },
                        yAxis: {
                            type: 'value',
                            name: 'Revenue'
                        },
                        series: [
                            {
                                data: scatterData,
                                type: 'scatter',
                                symbolSize: 10,
                                itemStyle: {
                                    opacity: 0.8
                                },
                                emphasis: {
                                    focus: 'series'
                                }
                            }
                        ],
                        brush: {
                            xAxisIndex: 'all',
                            brushLink: 'all',
                            outOfBrush: {
                                colorAlpha: 0.1
                            }
                        }
                    },
                    barChart: {
                        title: {
                            text: 'Education Level vs Enrollment Number'
                        },
                        tooltip: {
                            trigger: 'axis',
                            axisPointer: {
                                type: 'shadow'
                            }
                        },
                        xAxis: {
                            type: 'category',
                            data: barXAxis
                        },
                        yAxis: {
                            type: 'value',
                            name: 'Enrollment Number'
                        },
                        series: [
                            {
                                data: barSeries,
                                type: 'bar',
                                emphasis: {
                                    focus: 'series'
                                }
                            }
                        ]
                    }
                };

                scatterChart.setOption(option.scatterPlot);
                barChart.setOption(option.barChart);

                scatterChart.on('brushSelected', params => {
                    const selectedData = params.batch[0].areas[0].dataIndex;
                    const selectedEducationLevels = csvData.filter((row, index) => selectedData.includes(index)).map(row => row[1]);
                    const barSeriesData = barXAxis.map(level => selectedEducationLevels.includes(level) ? barData[level] : NaN);
                    barChart.setOption({
                        series: [
                            {
                                data: barSeriesData
                            }
                        ]
                    });
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,299,300
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Enrollment Number , while the pie chart represents the distribution of Revenue.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>ECharts Example</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const enrollmentData = csvData.map(item => item.split(','));
                const quarters = enrollmentData.map(item => item[0]);
                const enrollmentNumbers = enrollmentData.map(item => parseInt(item[2]));
                const revenues = enrollmentData.map(item => parseInt(item[3]));

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    grid: [
                        {
                            top: '10%',
                            left: '10%',
                            right: '10%',
                            height: '40%'
                        },
                        {
                            top: '60%',
                            left: '10%',
                            right: '10%',
                            height: '30%'
                        }
                    ],
                    xAxis: [
                        {
                            type: 'category',
                            data: quarters,
                            gridIndex: 0
                        },
                        {
                            type: 'category',
                            data: ['Revenue'],
                            gridIndex: 1
                        }
                    ],
                    yAxis: [
                        {
                            type: 'value',
                            gridIndex: 0
                        },
                        {
                            type: 'value',
                            gridIndex: 1
                        }
                    ],
                    series: [
                        {
                            name: 'Enrollment Number',
                            type: 'line',
                            data: enrollmentNumbers,
                            xAxisIndex: 0,
                            yAxisIndex: 0
                        },
                        {
                            name: 'Revenue',
                            type: 'pie',
                            data: revenues.map((item, index) => ({ value: item, name: quarters[index] })),
                            radius: '60%',
                            center: ['50%', '50%'],
                            gridIndex: 1
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,300,301
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Enrollment Number , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>ECharts Demo</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <style>
        #chart-container {
            width: 800px;
            height: 600px;
            border: 1px solid #ccc;
            padding: 20px;
        }
        #line-chart {
            width: 100%;
            height: 60%;
        }
        #pie-chart {
            width: 100%;
            height: 40%;
        }
    </style>
</head>
<body>
    <div id=""chart-container"">
        <div id=""line-chart""></div>
        <div id=""pie-chart""></div>
    </div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const lineChartData = csvData.map(row => [row[0], parseInt(row[2])]);
                const pieChartData = csvData.reduce((acc, row) => {
                    acc[row[1]] = (acc[row[1]] || 0) + parseInt(row[3]);
                    return acc;
                }, {});

                const lineChart = echarts.init(document.getElementById('line-chart'));
                const pieChart = echarts.init(document.getElementById('pie-chart'));

                lineChart.setOption({
                    title: {
                        text: 'Enrollment Number Trend'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    xAxis: {
                        type: 'category',
                        data: lineChartData.map(row => row[0])
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            type: 'line',
                            data: lineChartData.map(row => row[1]),
                            emphasis: {
                                focus: 'series'
                            }
                        }
                    ],
                    brush: {
                        id: 'brush',
                        seriesIndex: 0,
                        brushLink: 'pie-chart',
                        throttleType: 'debounce',
                        throttleDelay: 100
                    }
                });

                pieChart.setOption({
                    title: {
                        text: 'Revenue Distribution'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    series: [
                        {
                            type: 'pie',
                            id: 'pie',
                            data: Object.keys(pieChartData).map(key => ({ name: key, value: pieChartData[key] })),
                            emphasis: {
                                focus: 'data'
                            }
                        }
                    ]
                });

                lineChart.on('brushSelected', params => {
                    const selectedData = params.selected[0];
                    const startIndex = selectedData[0];
                    const endIndex = selectedData[1];
                    const selectedPieData = csvData.slice(startIndex, endIndex + 1).reduce((acc, row) => {
                        acc[row[1]] = (acc[row[1]] || 0) + parseInt(row[3]);
                        return acc;
                    }, {});

                    pieChart.setOption({
                        series: [
                            {
                                type: 'pie',
                                id: 'pie',
                                data: Object.keys(selectedPieData).map(key => ({ name: key, value: selectedPieData[key] })),
                                emphasis: {
                                    focus: 'data'
                                }
                            }
                        ]
                    });
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,301,302
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Enrollment Number, Revenue, and Profit. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-stat@1.2.0/dist/ecStat.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/d3@7.4.4/dist/d3.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = d3.csvParse(data);
                const dimensions = ['Enrollment Number', 'Revenue', 'Profit'];
                const matrixData = [];
                dimensions.forEach((dimension1, index1) => {
                    dimensions.forEach((dimension2, index2) => {
                        const seriesData = csvData.map(row => [+row[dimension1], +row[dimension2]]);
                        matrixData.push({
                            name: `${dimension1} vs ${dimension2}`,
                            data: seriesData,
                            type: 'scatter',
                            symbolSize: 10,
                            animation: false,
                            tooltip: {
                                trigger: 'item'
                            }
                        });
                    });
                });
                const option = {
                    tooltip: {
                        trigger: 'item'
                    },
                    grid: [
                        { left: '10%', top: '10%', width: '40%', height: '40%' },
                        { left: '55%', top: '10%', width: '40%', height: '40%' },
                        { left: '10%', top: '55%', width: '40%', height: '40%' },
                        { left: '55%', top: '55%', width: '40%', height: '40%' },
                        { left: '10%', top: '10%', width: '40%', height: '40%' },
                        { left: '55%', top: '10%', width: '40%', height: '40%' },
                        { left: '10%', top: '55%', width: '40%', height: '40%' },
                        { left: '55%', top: '55%', width: '40%', height: '40%' },
                        { left: '10%', top: '10%', width: '40%', height: '40%' }
                    ],
                    xAxis: [
                        { gridIndex: 0, name: 'Enrollment Number' },
                        { gridIndex: 1, name: 'Enrollment Number' },
                        { gridIndex: 2, name: 'Revenue' },
                        { gridIndex: 3, name: 'Revenue' },
                        { gridIndex: 4, name: 'Profit' },
                        { gridIndex: 5, name: 'Profit' },
                        { gridIndex: 6, name: 'Enrollment Number' },
                        { gridIndex: 7, name: 'Revenue' },
                        { gridIndex: 8, name: 'Profit' }
                    ],
                    yAxis: [
                        { gridIndex: 0, name: 'Revenue' },
                        { gridIndex: 1, name: 'Profit' },
                        { gridIndex: 2, name: 'Profit' },
                        { gridIndex: 3, name: 'Enrollment Number' },
                        { gridIndex: 4, name: 'Enrollment Number' },
                        { gridIndex: 5, name: 'Revenue' },
                        { gridIndex: 6, name: 'Profit' },
                        { gridIndex: 7, name: 'Enrollment Number' },
                        { gridIndex: 8, name: 'Revenue' }
                    ],
                    series: matrixData,
                    brush: {
                        xAxisIndex: 'all',
                        yAxisIndex: 'all',
                        brushLink: 'all',
                        brushType: 'rect',
                        toolbox: ['rect', 'keep', 'clear'],
                        throttleType: 'debounce',
                        throttleDelay: 300
                    }
                };
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,302,303
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a brushable Scatterplot that visualizes the relationship between Enrollment Number and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Brushable Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <div id=""table"" style=""width: 200px; height: 600px; overflow-y: auto; border: 1px solid #ccc; padding: 10px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const chartData = csvData.map(row => [+row[2], +row[3]]);

                const chart = echarts.init(document.getElementById('chart'));
                const table = document.getElementById('table');

                chart.setOption({
                    tooltip: {
                        trigger: 'item'
                    },
                    xAxis: {
                        type: 'value'
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: chartData,
                            symbolSize: 10,
                            itemStyle: {
                                opacity: 0.8
                            },
                            emphasis: {
                                itemStyle: {
                                    opacity: 1
                                }
                            }
                        }
                    ],
                    dataZoom: [
                        {
                            type: 'inside',
                            id: 'dataZoomX',
                            xAxisIndex: [0],
                            filterMode: 'empty',
                            startValue: 0,
                            endValue: 10000
                        },
                        {
                            type: 'inside',
                            id: 'dataZoomY',
                            yAxisIndex: [0],
                            filterMode: 'empty',
                            startValue: 0,
                            endValue: 1000000
                        }
                    ],
                    brush: {
                        id: 'brush',
                        brushLink: 'all',
                        xAxisIndex: 'all',
                        yAxisIndex: 'all',
                        brushType: 'rect',
                        transformable: false,
                        brushStyle: {
                            borderWidth: 2,
                            color: 'rgba(120,140,180,0.3)',
                            borderColor: 'rgba(120,140,180,0.8)'
                        },
                        throttleType: 'debounce',
                        throttleDelay: 300
                    }
                });

                chart.on('brushSelected', params => {
                    const selectedData = params.batch[0].areas[0].data;
                    const tableHtml = selectedData.slice(0, 20).map((data, index) => {
                        const row = csvData.find(row => +row[2] === data[0] && +row[3] === data[1]);
                        return `
                            <tr>
                                <td>${index + 1}</td>
                                <td>${row[0]}</td>
                                <td>${row[1]}</td>
                                <td>${row[2]}</td>
                                <td>${row[3]}</td>
                                <td>${row[4]}</td>
                                <td>${row[5]}</td>
                                <td>${row[6]}</td>
                                <td>${row[7]}</td>
                            </tr>
                        `;
                    }).join('');
                    table.innerHTML = `
                        <table>
                            <tr>
                                <th>No.</th>
                                <th>Quarter</th>
                                <th>Education Level</th>
                                <th>Enrollment Number</th>
                                <th>Revenue</th>
                                <th>Operating Costs</th>
                                <th>Profit</th>
                                <th>Average Tuition</th>
                                <th>Number of Staff</th>
                                <th>Graduation Rate</th>
                            </tr>
                            ${tableHtml}
                        </table>
                    `;
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,303,304
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a horizontal Bar Chart that shows all the data concerning Enrollment Number, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>ECharts Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const enrollmentData = csvData.map(item => item.split(','));
                const quarters = enrollmentData.map(item => item[0]);
                const enrollmentNumbers = enrollmentData.map(item => parseInt(item[2]));

                var chartDom = document.getElementById('main');
                var myChart = echarts.init(chartDom);
                var option;

                option = {
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: { type: 'shadow' }
                    },
                    grid: [
                        {
                            left: '10%',
                            right: '20%',
                            top: '10%',
                            bottom: '10%'
                        },
                        {
                            left: '60%',
                            right: '10%',
                            top:'50%',
                            width:'30%'
                        }
                    ],
                    xAxis:[
                        {type:'value',gridIndex : 0},
                        {type:'value',gridIndex : 1}
                    ],
                    yAxis:[
                        {type:'category',data : quarters,gridIndex : 0},
                        {type:'category',data : [],show:false,gridIndex : 1}
                    ],
                    series:[
                       {
                           name:'',
                           type:'bar',
                           data=enrollmentNumbers,
                           label:{show:true},
                           xAxisIndex : 0,
                           yAxisIndex : 0
                       },
                       {
                          name:'',
                          type:'bar',
                          data:[],
                          label:{show:true},
                          xAxisIndex : 1,
                          yAxisIndex : 1
                       }
                   ]
               };

               myChart.setOption(option);

               // minimap
               let minimapOption;
               minimapOption={
                   tooltip:{
                      trigger :'axis'
                   },
                   grid:{
                      left :'15%',right :'15%',top :'20%',bottom :'20%'
                   },
                   xAxis:{
                      show:false,type :'value'
                  },
                  yAxis:{
                     show:false,type :'category',data:[]
                 },
                 series:[
                     {
                         name:'',
                         type:""bar"",
                         barWidth:""100%"",
                         roam:true,scaleLimit:{min:""100%"",max:""200%""},
                         label:{show:true},emphasis:{label:{show:true}},
                         data:[],
                     }
                 ]
              };
              let miniMapChart=echarts.init(document.getElementById(""minimap""));
              miniMapChart.setOption(minimapOption);

              // update minimap with main chart's data
              for(let i=0;i<enrollmentNumbers.length;i++){
                  minimapOption.series[0].data.push(enrollmentNumbers[i]);
                  if(i>=quarters.length-11){
                      minimapOption.yAxis.data.push(quarters[i]);
                  }else{
                      minimapOption.yAxis.data.push("""");
                  }
              }

             miniMapChart.setOption(minimapOption);
        });
    </script>

     <!-- Add a div to display the mini map -->
     <div id='minimap' style='width:300px;height;200px;'></div>

</body>
</html>

```",Initialization Error,304,305
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Enrollment Number and Revenue, and a Bar Chart on the right that displays Education Level versus Enrollment Number.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Educational Enrollment Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: row;
    }
  </style>
</head>
<body>
  <div id=""vis"">
    <div id=""scatterplot""></div>
    <div id=""barchart""></div>
  </div>

  <script>
    const scatterplotSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""}
      }
    };

    const barchartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"" },
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Education Level"", ""type"": ""nominal"", ""sort"": ""-y""},
        ""y"": {""field"": ""Enrollment Number"", ""type"": ""quantitative""}
      }
    };

    vegaEmbed(""#scatterplot"", scatterplotSpec);
    vegaEmbed(""#barchart"", barchartSpec);
  </script>
</body>
</html>
```",Correct,305,306
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Enrollment Number and Revenue, and a Bar Chart on the right that displays Education Level versus Enrollment Number. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Enrollment and Revenue Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: row;
    }
  </style>
</head>
<body>
  <div id=""vis"">
    <div id=""scatterplot""></div>
    <div id=""barchart""></div>
  </div>

  <script>
    const scatterplotSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Education Level"", ""type"": ""nominal""}
      },
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x""]}
      }
    };

    const barchartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"" },
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Education Level"", ""type"": ""nominal"", ""axis"": {""labelAngle"": 0}},
        ""y"": {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
        ""color"": {""condition"": {""test"": ""datum.Enrollment_Number_brush"", ""value"": ""steelblue""}, ""value"": ""lightgray""}
      },
      ""params"": [
        {""name"": ""brush"", ""select"": ""brush"", ""value"": []}
      ]
    };

    vegaEmbed(""#scatterplot"", scatterplotSpec, { ""actions"": false });
    vegaEmbed(""#barchart"", barchartSpec, { ""actions"": false });

    const scatterplotView = document.querySelector(""#scatterplot"").vegaView;
    const barchartView = document.querySelector(""#barchart"").vegaView;

    scatterplotView.addSignalListener(""brush"", (name, value) => {
      barchartView.signal(""brush"", value);
      barchartView.run();
    });
  </script>
</body>
</html>
```",Unexpected Execution Result,306,307
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Enrollment Number , while the pie chart represents the distribution of Revenue.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Educational Enrollment Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const lineChartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"" },
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {""field"": ""Quarter"", ""type"": ""nominal""},
        ""y"": {""field"": ""Enrollment Number"", ""type"": ""quantitative""}
      }
    };

    const pieChartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"" },
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Revenue"", ""type"": ""quantitative"", ""stack"": true},
        ""color"": {""field"": ""Education Level"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", lineChartSpec, { ""actions"": false });
    vegaEmbed(""#vis"", pieChartSpec, { ""actions"": false });
  </script>
</body>
</html>
```",Unexpected Initial Result,307,308
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Enrollment Number , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Enrollment and Revenue Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const vlSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""vconcat"": [
        {
          ""mark"": ""line"",
          ""encoding"": {
            ""x"": {""field"": ""Quarter"", ""type"": ""nominal""},
            ""y"": {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
            ""tooltip"": [
              {""field"": ""Quarter"", ""type"": ""nominal""},
              {""field"": ""Enrollment Number"", ""type"": ""quantitative""}
            ]
          },
          ""selection"": {
            ""brush"": {""type"": ""interval"", ""encodings"": [""x""]}
          }
        },
        {
          ""mark"": ""arc"",
          ""encoding"": {
            ""theta"": {""field"": ""Revenue"", ""type"": ""quantitative"", ""stack"": true},
            ""color"": {""field"": ""Education Level"", ""type"": ""nominal""}
          },
          ""transform"": [
            {""filter"": {""selection"": ""brush""}}
          ]
        }
      ]
    };

    vegaEmbed(""#vis"", vlSpec);
  </script>
</body>
</html>
```",Correct,308,309
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Enrollment Number, Revenue, and Profit. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Scatterplot Matrix</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to our embed */
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""isValid(datum['Enrollment Number'])""}
      ],
      ""spacing"": 50,
      ""vconcat"": [
        {
          ""mark"": ""point"",
          ""selection"": {
            ""brush"": {
              ""type"": ""interval"",
              ""encodings"": [""x"", ""y""],
              ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
              ""translate"": ""[mousedown[!event.shiftKey], mouseup] > mousemove!"",
              ""zoom"": ""![event.shiftKey]""
            }
          },
          ""encoding"": {
            ""x"": {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
            ""color"": {
              ""condition"": {
                ""test"": ""brush"",
                ""field"": ""Enrollment Number"",
                ""type"": ""nominal""
              },
              ""value"": ""grey""
            }
          }
        },
        {
          ""mark"": ""point"",
          ""selection"": {
            ""brush"": {
              ""type"": ""interval"",
              ""encodings"": [""x"", ""y""],
              ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
              ""translate"": ""[mousedown[!event.shiftKey], mouseup] > mousemove!"",
              ""zoom"": ""![event.shiftKey]""
            }
          },
          ""encoding"": {
            ""x"": {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Profit"", ""type"": ""quantitative""},
            ""color"": {
              ""condition"": {
                ""test"": ""brush"",
                ""field"": ""Enrollment Number"",
                ""type"": ""nominal""
              },
              ""value"": ""grey""
            }
          }
        },
        {
          ""mark"": ""point"",
          ""selection"": {
            ""brush"": {
              ""type"": ""interval"",
              ""encodings"": [""x"", ""y""],
              ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
              ""translate"": ""[mousedown[!event.shiftKey], mouseup] > mousemove!"",
              ""zoom"": ""![event.shiftKey]""
            }
          },
          ""encoding"": {
            ""x"": {""field"": ""Revenue"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Profit"", ""type"": ""quantitative""},
            ""color"": {
              ""condition"": {
                ""test"": ""brush"",
                ""field"": ""Enrollment Number"",
                ""type"": ""nominal""
              },
              ""value"": ""grey""
            }
          }
        }
      ]
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Initialization Error,309,310
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a brushable Scatterplot that visualizes the relationship between Enrollment Number and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Brushable Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 600,
      ""height"": 600,
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Quarter"", ""type"": ""nominal""},
          {""field"": ""Education Level"", ""type"": ""nominal""},
          {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
          {""field"": ""Revenue"", ""type"": ""quantitative""},
          {""field"": ""Operating Costs"", ""type"": ""quantitative""},
          {""field"": ""Profit"", ""type"": ""quantitative""},
          {""field"": ""Average Tuition"", ""type"": ""quantitative""},
          {""field"": ""Number of Staff"", ""type"": ""quantitative""},
          {""field"": ""Graduation Rate"", ""type"": ""quantitative""}
        ]
      },
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x"", ""y""]}
      }
    };

    const spec2 = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 200,
      ""height"": 600,
      ""data"": {
        ""name"": ""brushed_data""
      },
      ""mark"": ""table"",
      ""encoding"": {
        ""x"": {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Quarter"", ""type"": ""nominal""},
          {""field"": ""Education Level"", ""type"": ""nominal""},
          {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
          {""field"": ""Revenue"", ""type"": ""quantitative""},
          {""field"": ""Operating Costs"", ""type"": ""quantitative""},
          {""field"": ""Profit"", ""type"": ""quantitative""},
          {""field"": ""Average Tuition"", ""type"": ""quantitative""},
          {""field"": ""Number of Staff"", ""type"": ""quantitative""},
          {""field"": ""Graduation Rate"", ""type"": ""quantitative""}
        ]
      }
    };

    vegaEmbed(""#vis"", spec, {actions: false})
      .then(function(result) {
        const view = result.view;
        const runtime = result.runtime;

        const tableSpec = vega.View.create({
          renderer: 'svg',
          container: '#vis',
          width: 200,
          height: 600,
          padding: 0
        }, spec2);

        view.addEventListener('run', function(event) {
          const brushData = event.data['brushed_data'];
          tableSpec.change('data', vega.changeset().remove(vega.truthy).insert(brushData.slice(0, 20)));
          tableSpec.run();
        });
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,310,311
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a horizontal Bar Chart that shows all the data concerning Enrollment Number, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Enrollment Number Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""hconcat"": [
        {
          ""mark"": ""bar"",
          ""encoding"": {
            ""x"": {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Education Level"", ""type"": ""nominal"", ""sort"": ""-x""},
            ""tooltip"": [
              {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
              {""field"": ""Education Level"", ""type"": ""nominal""}
            ]
          },
          ""width"": 600,
          ""height"": 600
        },
        {
          ""mark"": ""bar"",
          ""encoding"": {
            ""x"": {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Education Level"", ""type"": ""nominal"", ""sort"": ""-x""},
            ""tooltip"": [
              {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
              {""field"": ""Education Level"", ""type"": ""nominal""}
            ]
          },
          ""width"": 200,
          ""height"": 600
        }
      ]
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,311,312
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot that visualizes the relationship between Enrollment Number and Revenue.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Enrollment Number vs Revenue Scatterplot</title>
  <style>
    /* Add some basic styling to make the chart look better */
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 800px;
      height: 600px;
      border: 1px solid black;
    }
  </style>
</head>
<body>
  <svg class=""chart""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    // Set up the dimensions of the chart
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    // Create the SVG element
    const svg = d3.select(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    // Load the data
    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"")
      .then(data => {
        // Convert data types
        data.forEach(d => {
          d[""Enrollment Number""] = +d[""Enrollment Number""];
          d[""Revenue""] = +d[""Revenue""];
        });

        // Create the scales
        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Enrollment Number""])])
          .range([0, width]);
        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Revenue""])])
          .range([height, 0]);

        // Create the axes
        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);
        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(xAxis);
        svg.append(""g"")
          .call(yAxis);

        // Create the scatterplot
        svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d[""Enrollment Number""]))
          .attr(""cy"", d => yScale(d[""Revenue""]))
          .attr(""r"", 5);

        // Add axis labels
        svg.append(""text"")
          .attr(""x"", width / 2)
          .attr(""y"", height + 30)
          .attr(""text-anchor"", ""middle"")
          .text(""Enrollment Number"");
        svg.append(""text"")
          .attr(""x"", -30)
          .attr(""y"", height / 2)
          .attr(""text-anchor"", ""middle"")
          .attr(""transform"", ""rotate(-90)"")
          .text(""Revenue"");
      });
  </script>
</body>
</html>
```",Correct,312,313
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Line Chart that visualizes the trend of Enrollment Number over the Quarter for each Education Level.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Enrollment Number Trend</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 40px;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Enrollment Number""] = +d[""Enrollment Number""];
          d.Quarter = +d.Quarter;
        });

        const educationLevels = [...new Set(data.map(d => d[""Education Level""]))];

        const xScale = d3.scaleLinear()
          .domain(d3.extent(data, d => d.Quarter))
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Enrollment Number""])])
          .range([height, 0]);

        const line = d3.line()
          .x(d => xScale(d.Quarter))
          .y(d => yScale(d[""Enrollment Number""]));

        educationLevels.forEach(educationLevel => {
          const educationData = data.filter(d => d[""Education Level""] === educationLevel);

          svg.append(""path"")
            .datum(educationData)
            .attr(""fill"", ""none"")
            .attr(""stroke"", ""steelblue"")
            .attr(""stroke-width"", 1.5)
            .attr(""d"", line);
        });

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        svg.append(""text"")
          .attr(""transform"", `translate(${width / 2}, ${height + margin.bottom - 5})`)
          .attr(""text-anchor"", ""middle"")
          .text(""Quarter"");

        svg.append(""text"")
          .attr(""transform"", `rotate(-90) translate(${-height / 2}, ${-margin.left + 15})`)
          .attr(""text-anchor"", ""middle"")
          .text(""Enrollment Number"");

        educationLevels.forEach((educationLevel, index) => {
          svg.append(""text"")
            .attr(""transform"", `translate(${width - 100}, ${height - index * 20})`)
            .attr(""text-anchor"", ""end"")
            .text(educationLevel);
        });
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,313,314
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Enrollment Number by Education Level in Q2-2021</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 800px;
      height: 600px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Enrollment Number""] = +d[""Enrollment Number""];
        });

        const q2Data = data.filter(d => d.Quarter === ""Q2-2021"");

        const x = d3.scaleBand()
          .domain(q2Data.map(d => d[""Education Level""]))
          .range([0, width])
          .padding(0.2);

        const y = d3.scaleLinear()
          .domain([0, d3.max(q2Data, d => d[""Enrollment Number""])])
          .range([height, 0]);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(x));

        svg.append(""g"")
          .call(d3.axisLeft(y));

        svg.selectAll(""bar"")
          .data(q2Data)
          .enter()
          .append(""rect"")
          .attr(""x"", d => x(d[""Education Level""]))
          .attr(""y"", d => y(d[""Enrollment Number""]))
          .attr(""width"", x.bandwidth())
          .attr(""height"", d => height - y(d[""Enrollment Number""]));
      });
  </script>
</body>
</html>
```",Correct,314,315
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Pie Chart that visualizes the proportion of Enrollment Number contributed by each Education Level in Q2-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Educational Enrollment Pie Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    #chart {
      width: 500px;
      height: 500px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Enrollment Number""] = +d[""Enrollment Number""];
        });

        const q2Data = data.filter(d => d.Quarter === ""Q2-2021"");

        const educationLevels = [...new Set(q2Data.map(d => d[""Education Level""]))];

        const pie = d3.pie()
          .value(d => d[""Enrollment Number""]);

        const arcs = svg.selectAll(""arc"")
          .data(pie(q2Data))
          .enter()
          .append(""path"")
          .attr(""d"", d3.arc()
            .innerRadius(0)
            .outerRadius(Math.min(width, height) / 2)
          )
          .attr(""fill"", (d, i) => d3.schemeCategory10[i % 10])
          .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        const legend = svg.selectAll(""legend"")
          .data(educationLevels)
          .enter()
          .append(""g"")
          .attr(""transform"", (d, i) => `translate(0, ${i * 20})`);

        legend.append(""rect"")
          .attr(""x"", width / 2 + 10)
          .attr(""y"", 10)
          .attr(""width"", 10)
          .attr(""height"", 10)
          .attr(""fill"", (d, i) => d3.schemeCategory10[i % 10]);

        legend.append(""text"")
          .attr(""x"", width / 2 + 25)
          .attr(""y"", 20)
          .text(d => d);
      });
  </script>
</body>
</html>
```",Correct,315,316
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Donut Chart that visualizes the distribution of Enrollment Number among Education Level in Q2-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Educational Enrollment Donut Chart</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .chart {
            width: 500px;
            height: 500px;
            margin: 50px auto;
        }
    </style>
</head>
<body>
    <div class=""chart"" id=""chart""></div>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 50, right: 50, bottom: 50, left: 50 };
        const width = 500 - margin.left - margin.right;
        const height = 500 - margin.top - margin.bottom;
        const radius = Math.min(width, height) / 2;

        const svg = d3.select(""#chart"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${width / 2 + margin.left}, ${height / 2 + margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"")
            .then(data => {
                data.forEach(d => {
                    d[""Enrollment Number""] = +d[""Enrollment Number""];
                    d.Quarter = d.Quarter;
                });

                const q2Data = data.filter(d => d.Quarter === ""Q2-2021"");

                const educationLevels = Array.from(new Set(q2Data.map(d => d[""Education Level""])));

                const pie = d3.pie()
                    .value(d => d[""Enrollment Number""]);

                const arc = d3.arc()
                    .outerRadius(radius - 10)
                    .innerRadius(radius - 100);

                const arcs = svg.selectAll(""arc"")
                    .data(pie(q2Data))
                    .enter()
                    .append(""g"")
                    .attr(""class"", ""arc"");

                arcs.append(""path"")
                    .attr(""d"", arc)
                    .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

                arcs.append(""text"")
                    .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                    .attr(""dy"", ""0.35em"")
                    .text(d => educationLevels[d.index]);

                svg.append(""text"")
                    .attr(""x"", 0)
                    .attr(""y"", -200)
                    .attr(""text-anchor"", ""middle"")
                    .style(""font-size"", ""24px"")
                    .text(""Distribution of Enrollment Number among Education Level in Q2-2021"");
            });
    </script>
</body>
</html>
```",Correct,316,317
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Coxcomb Chart(polar area chart) to compare the Enrollment Number of different Education Level in Q2-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coxcomb Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 600px;
      height: 600px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 20, left: 20 };
    const width = 600 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('.chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
      .then(data => {
        data.forEach(d => {
          d['Enrollment Number'] = +d['Enrollment Number'];
        });

        const filteredData = data.filter(d => d.Quarter === 'Q2-2021');

        const educationLevels = [...new Set(filteredData.map(d => d['Education Level']))];

        const angles = educationLevels.map((_, i) => i * (360 / educationLevels.length));

        const radiusScale = d3.scaleLinear()
          .domain([0, d3.max(filteredData, d => d['Enrollment Number'])])
          .range([0, Math.min(width, height) / 2]);

        const pie = d3.pie()
          .value(d => d['Enrollment Number'])
          .sort(null);

        const arcs = pie(filteredData);

        svg.selectAll('path')
          .data(arcs)
          .enter()
          .append('path')
          .attr('d', d3.arc()
            .innerRadius(0)
            .outerRadius(d => radiusScale(d.value))
          )
          .attr('fill', (d, i) => d3.schemeCategory10[i % 10])
          .attr('transform', `rotate(${angles[educationLevels.indexOf(d.data['Education Level'])]})`);

        svg.selectAll('text')
          .data(educationLevels)
          .enter()
          .append('text')
          .attr('x', (d, i) => Math.cos(angles[i] * Math.PI / 180) * (radiusScale(d3.max(filteredData, d => d['Enrollment Number'])) + 20))
          .attr('y', (d, i) => Math.sin(angles[i] * Math.PI / 180) * (radiusScale(d3.max(filteredData, d => d['Enrollment Number'])) + 20))
          .text(d => d);
      });
  </script>
</body>
</html>
```",Initialization Error,317,318
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Radar Chart to compare the Enrollment Number of different Education Level in Q2-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Radar Chart</title>
  <style>
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg width=""600"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 100, right: 100, bottom: 100, left: 100 };
    const width = 600 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Enrollment Number""] = +d[""Enrollment Number""];
        });

        const q2Data = data.filter(d => d.Quarter === ""Q2-2021"");

        const educationLevels = [...new Set(q2Data.map(d => d[""Education Level""]))];

        const angles = educationLevels.map((_, i) => i * (2 * Math.PI / educationLevels.length));

        const radius = Math.min(width, height) / 2;

        const radarLine = d3.lineRadial()
          .radius(d => d.value)
          .angle((d, i) => angles[i]);

        const maxEnrollment = d3.max(q2Data, d => d[""Enrollment Number""]);

        const yScale = d3.scaleLinear()
          .domain([0, maxEnrollment])
          .range([radius, 0]);

        const axis = svg.selectAll("".axis"")
          .data(angles)
          .enter()
          .append(""g"")
          .attr(""class"", ""axis"")
          .attr(""transform"", (d, i) => `rotate(${d * 180 / Math.PI}) translate(0, ${-radius})`);

        axis.append(""line"")
          .attr(""x2"", 0)
          .attr(""y2"", radius);

        axis.append(""text"")
          .attr(""x"", 0)
          .attr(""y"", radius + 10)
          .attr(""text-anchor"", ""middle"")
          .text((d, i) => educationLevels[i]);

        const circles = svg.selectAll("".circle"")
          .data([maxEnrollment / 4, maxEnrollment / 2, maxEnrollment * 3 / 4])
          .enter()
          .append(""circle"")
          .attr(""class"", ""circle"")
          .attr(""r"", d => yScale(d))
          .attr(""cx"", 0)
          .attr(""cy"", 0);

        const lines = svg.selectAll("".line"")
          .data([maxEnrollment / 4, maxEnrollment / 2, maxEnrollment * 3 / 4])
          .enter()
          .append(""line"")
          .attr(""class"", ""line"")
          .attr(""x1"", 0)
          .attr(""y1"", d => yScale(d))
          .attr(""x2"", 0)
          .attr(""y2"", d => yScale(d))
          .attr(""transform"", `rotate(${2 * Math.PI / educationLevels.length})`);

        const radarData = educationLevels.map(educationLevel => {
          const enrollment = q2Data.find(d => d[""Education Level""] === educationLevel)[""Enrollment Number""];
          return { educationLevel, value: enrollment };
        });

        const path = svg.append(""path"")
          .datum(radarData)
          .attr(""class"", ""radar"")
          .attr(""d"", radarLine)
          .attr(""stroke"", ""black"")
          .attr(""stroke-width"", 2)
          .attr(""fill"", ""none"");

        const area = svg.append(""path"")
          .datum(radarData)
          .attr(""class"", ""area"")
          .attr(""d"", radarLine)
          .attr(""stroke"", ""none"")
          .attr(""fill"", ""lightblue"")
          .attr(""fill-opacity"", 0.5);
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,318,319
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Streamgraph that visualizes the changes of Enrollment Number over the Quarter for each Education Level.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Streamgraph</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Enrollment Number""] = +d[""Enrollment Number""];
          d.Quarter = +d.Quarter;
        });

        const educationLevels = [...new Set(data.map(d => d[""Education Level""]))];

        const stack = d3.stack()
          .keys(educationLevels)
          .offset(d3.stackOffsetExpand);

        const stackedData = stack(data);

        const xScale = d3.scaleLinear()
          .domain(d3.extent(data, d => d.Quarter))
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([d3.min(stackedData, d => d3.min(d, d => d[0])), d3.max(stackedData, d => d3.max(d, d => d[1]))])
          .range([height, 0]);

        const area = d3.area()
          .x(d => xScale(d.data.Quarter))
          .y0(d => yScale(d[0]))
          .y1(d => yScale(d[1]));

        svg.selectAll(""path"")
          .data(stackedData)
          .enter()
          .append(""path"")
          .attr(""d"", area)
          .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));
      });
  </script>
</body>
</html>
```",Initialization Error,319,320
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Slopegraph to compare the Enrollment Number between Q1-2020 and Q2-2020 for each Education Level.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Slopegraph</title>
  <style>
    .line {
      stroke: #666;
      stroke-width: 1.5px;
    }
    .circle {
      fill: #666;
      stroke: #fff;
      stroke-width: 1.5px;
    }
    .label {
      font-size: 12px;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('svg')
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
      .then(data => {
        data.forEach(d => {
          d['Enrollment Number'] = +d['Enrollment Number'];
        });

        const q1Data = data.filter(d => d.Quarter === 'Q1-2020');
        const q2Data = data.filter(d => d.Quarter === 'Q2-2020');

        const educationLevels = [...new Set(data.map(d => d['Education Level']))];
        const maxEnrollment = Math.max(...data.map(d => d['Enrollment Number']));

        const xScale = d3.scalePoint()
          .domain(['Q1-2020', 'Q2-2020'])
          .range([0, width])
          .padding(0.5);

        const yScale = d3.scaleLinear()
          .domain([0, maxEnrollment])
          .range([height, 0]);

        svg.selectAll('line')
          .data(educationLevels)
          .enter()
          .append('line')
          .attr('class', 'line')
          .attr('x1', d => xScale('Q1-2020'))
          .attr('y1', d => yScale(q1Data.find(q => q['Education Level'] === d)['Enrollment Number']))
          .attr('x2', d => xScale('Q2-2020'))
          .attr('y2', d => yScale(q2Data.find(q => q['Education Level'] === d)['Enrollment Number']));

        svg.selectAll('circle')
          .data(educationLevels)
          .enter()
          .append('circle')
          .attr('class', 'circle')
          .attr('cx', d => xScale('Q1-2020'))
          .attr('cy', d => yScale(q1Data.find(q => q['Education Level'] === d)['Enrollment Number']))
          .attr('r', 5);

        svg.selectAll('circle2')
          .data(educationLevels)
          .enter()
          .append('circle')
          .attr('class', 'circle')
          .attr('cx', d => xScale('Q2-2020'))
          .attr('cy', d => yScale(q2Data.find(q => q['Education Level'] === d)['Enrollment Number']))
          .attr('r', 5);

        svg.selectAll('text')
          .data(educationLevels)
          .enter()
          .append('text')
          .attr('class', 'label')
          .attr('x', d => xScale('Q1-2020') - 10)
          .attr('y', d => yScale(q1Data.find(q => q['Education Level'] === d)['Enrollment Number']))
          .attr('text-anchor', 'end')
          .text(d => d);

        svg.selectAll('text2')
          .data(educationLevels)
          .enter()
          .append('text')
          .attr('class', 'label')
          .attr('x', d => xScale('Q2-2020') + 10)
          .attr('y', d => yScale(q2Data.find(q => q['Education Level'] === d)['Enrollment Number']))
          .attr('text-anchor', 'start')
          .text(d => d);

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append('g')
          .call(d3.axisLeft(yScale));
      });
  </script>
</body>
</html>
```",Correct,320,321
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Heatmap that visualizes the Enrollment Number across Education Level and Quarters.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Heatmap of Enrollment Number</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 80, right: 100, bottom: 100, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Enrollment Number""] = +d[""Enrollment Number""];
          d.Quarter = d.Quarter;
          d[""Education Level""] = d[""Education Level""];
        });

        const educationLevels = [...new Set(data.map(d => d[""Education Level""]))].sort();
        const quarters = [...new Set(data.map(d => d.Quarter))].sort();

        const xScale = d3.scaleBand()
          .domain(quarters)
          .range([0, width])
          .padding(0.1);

        const yScale = d3.scaleBand()
          .domain(educationLevels)
          .range([height, 0])
          .padding(0.1);

        const colorScale = d3.scaleSequential()
          .domain([0, d3.max(data, d => d[""Enrollment Number""])])
          .interpolator(d3.interpolateBlues);

        svg.selectAll(""rect"")
          .data(data)
          .enter()
          .append(""rect"")
          .attr(""x"", d => xScale(d.Quarter))
          .attr(""y"", d => yScale(d[""Education Level""]))
          .attr(""width"", xScale.bandwidth())
          .attr(""height"", yScale.bandwidth())
          .attr(""fill"", d => colorScale(d[""Enrollment Number""]));

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale))
          .selectAll(""text"")
          .attr(""transform"", ""rotate(-45)"")
          .attr(""text-anchor"", ""end"");

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        svg.append(""text"")
          .attr(""x"", width / 2)
          .attr(""y"", -50)
          .attr(""text-anchor"", ""middle"")
          .text(""Heatmap of Enrollment Number"");

        svg.append(""text"")
          .attr(""x"", width / 2)
          .attr(""y"", height + 30)
          .attr(""text-anchor"", ""middle"")
          .text(""Quarter"");

        svg.append(""text"")
          .attr(""x"", -height / 2)
          .attr(""y"", -60)
          .attr(""text-anchor"", ""middle"")
          .attr(""transform"", ""rotate(-90)"")
          .text(""Education Level"");

        const legend = svg.append(""g"")
          .attr(""transform"", `translate(${width + 20}, 0)`);

        legend.append(""text"")
          .attr(""x"", 0)
          .attr(""y"", -20)
          .attr(""text-anchor"", ""middle"")
          .text(""Enrollment Number"");

        const legendScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Enrollment Number""])])
          .range([0, 200]);

        legend.selectAll(""rect"")
          .data(d3.range(0, 1.01, 0.01))
          .enter()
          .append(""rect"")
          .attr(""x"", 0)
          .attr(""y"", d => 200 - legendScale(d * d3.max(data, d => d[""Enrollment Number""])))
          .attr(""width"", 20)
          .attr(""height"", d => legendScale(d * d3.max(data, d => d[""Enrollment Number""])))
          .attr(""fill"", d => colorScale(d * d3.max(data, d => d[""Enrollment Number""])));

        legend.append(""g"")
          .call(d3.axisRight(legendScale)
            .ticks(5)
            .tickFormat(d3.format("".0f"")));
      });
  </script>
</body>
</html>
```",Correct,321,322
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Stacked Bar Chart</title>
  <style>
    .chart {
      width: 800px;
      height: 600px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('.chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
      .then(data => {
        data.forEach(d => {
          d['Enrollment Number'] = +d['Enrollment Number'];
          d['Revenue'] = +d['Revenue'];
          d['Operating Costs'] = +d['Operating Costs'];
          d['Profit'] = +d['Profit'];
          d['Average Tuition'] = +d['Average Tuition'];
          d['Number of Staff'] = +d['Number of Staff'];
          d['Graduation Rate'] = +d['Graduation Rate'];
        });

        const keys = ['Revenue', 'Operating Costs', 'Profit'];
        const stackedData = d3.stack()
          .keys(keys)
          (data);

        const xScale = d3.scaleBand()
          .domain(data.map(d => d['Quarter']))
          .range([0, width])
          .padding(0.2);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(stackedData[stackedData.length - 1], d => d[1])])
          .range([height, 0]);

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append('g')
          .call(d3.axisLeft(yScale));

        svg.selectAll('g.layer')
          .data(stackedData)
          .enter()
          .append('g')
          .attr('class', 'layer')
          .attr('fill', (d, i) => ['#4f81bd', '#c0504e', '#9bbb59'][i])
          .selectAll('rect')
          .data(d => d)
          .enter()
          .append('rect')
          .attr('x', d => xScale(d.data['Quarter']))
          .attr('y', d => yScale(d[1]))
          .attr('width', xScale.bandwidth())
          .attr('height', d => yScale(d[0]) - yScale(d[1]));
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,322,323
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Horizontal Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Enrollment Number by Education Level in Q2-2021</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 40px auto;
    }
    .chart rect {
      fill: steelblue;
    }
    .chart text {
      fill: #fff;
      font-size: 14px;
    }
  </style>
</head>
<body>
  <svg class=""chart"" width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 40, right: 20, bottom: 30, left: 200 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('.chart')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
      .then(data => {
        data.forEach(d => {
          d['Enrollment Number'] = +d['Enrollment Number'];
        });

        const q2Data = data.filter(d => d.Quarter === 'Q2-2021');

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(q2Data, d => d['Enrollment Number'])])
          .range([0, width]);

        const yScale = d3.scaleBand()
          .domain(q2Data.map(d => d['Education Level']))
          .range([height, 0])
          .padding(0.2);

        svg.selectAll('rect')
          .data(q2Data)
          .enter()
          .append('rect')
          .attr('x', 0)
          .attr('y', d => yScale(d['Education Level']))
          .attr('width', d => xScale(d['Enrollment Number']))
          .attr('height', yScale.bandwidth());

        svg.selectAll('text')
          .data(q2Data)
          .enter()
          .append('text')
          .attr('x', d => xScale(d['Enrollment Number']) + 10)
          .attr('y', d => yScale(d['Education Level']) + yScale.bandwidth() / 2)
          .attr('text-anchor', 'start')
          .text(d => d['Enrollment Number']);

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append('g')
          .call(d3.axisLeft(yScale));
      });
  </script>
</body>
</html>
```",Correct,323,324
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot that visualizes the relationship between Enrollment Number and Revenue.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>ECharts Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const enrollmentNumbers = csvData.map(row => parseFloat(row.split(',')[2]));
                const revenues = csvData.map(row => parseFloat(row.split(',')[3]));

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Relationship between Enrollment Number and Revenue'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Enrollment Number'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Revenue'
                    },
                    series: [{
                        data: enrollmentNumbers.map((enrollment, index) => [enrollment, revenues[index]]),
                        type: 'scatter'
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,324,325
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Line Chart that visualizes the trend of Enrollment Number over the Quarter for each Education Level.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>ECharts Line Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [quarter, educationLevel, enrollmentNumber] = row.split(',');
                    if (!chartData[educationLevel]) {
                        chartData[educationLevel] = { quarter: [], enrollmentNumber: [] };
                    }
                    chartData[educationLevel].quarter.push(quarter);
                    chartData[educationLevel].enrollmentNumber.push(Number(enrollmentNumber));
                });

                const series = Object.keys(chartData).map(educationLevel => ({
                    name: educationLevel,
                    type: 'line',
                    data: chartData[educationLevel].enrollmentNumber
                }));

                const option = {
                    title: {
                        text: 'Enrollment Number Trend'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    legend: {
                        data: Object.keys(chartData)
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    toolbox: {
                        feature: {
                            saveAsImage: {}
                        }
                    },
                    xAxis: {
                        type: 'category',
                        boundaryGap: false,
                        data: chartData[Object.keys(chartData)[0]].quarter
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series
                };

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,325,326
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>ECharts Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [quarter, educationLevel, enrollmentNumber] = row.split(',');
                    if (quarter === 'Q2-2021') {
                        if (!chartData[educationLevel]) {
                            chartData[educationLevel] = 0;
                        }
                        chartData[educationLevel] += parseInt(enrollmentNumber);
                    }
                });
                const educationLevels = Object.keys(chartData);
                const enrollmentNumbers = Object.values(chartData);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Enrollment Number for each Education Level in Q2-2021'
                    },
                    tooltip: {},
                    xAxis: {
                        data: educationLevels
                    },
                    yAxis: {},
                    series: [{
                        name: 'Enrollment Number',
                        type: 'bar',
                        data: enrollmentNumbers
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,326,327
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Pie Chart that visualizes the proportion of Enrollment Number contributed by each Education Level in Q2-2021.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>ECharts Pie Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [quarter, educationLevel, enrollmentNumber] = row.split(',');
                    if (quarter === 'Q2-2021') {
                        if (chartData[educationLevel]) {
                            chartData[educationLevel] += parseInt(enrollmentNumber);
                        } else {
                            chartData[educationLevel] = parseInt(enrollmentNumber);
                        }
                    }
                });
                const seriesData = Object.keys(chartData).map(key => ({ name: key, value: chartData[key] }));
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Enrollment Number by Education Level in Q2-2021'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    series: [
                        {
                            type: 'pie',
                            data: seriesData,
                            emphasis: {
                                itemStyle: {
                                    shadowBlur: 10,
                                    shadowOffsetX: 0,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            }
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,327,328
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Donut Chart that visualizes the distribution of Enrollment Number among Education Level in Q2-2021.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>ECharts Donut Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [quarter, educationLevel, enrollmentNumber] = row.split(',');
                    if (quarter === 'Q2-2021') {
                        if (!chartData[educationLevel]) {
                            chartData[educationLevel] = 0;
                        }
                        chartData[educationLevel] += parseInt(enrollmentNumber);
                    }
                });
                const educationLevels = Object.keys(chartData);
                const enrollmentNumbers = Object.values(chartData);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Distribution of Enrollment Number among Education Level in Q2-2021',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    legend: {
                        orient: 'vertical',
                        left: 'left'
                    },
                    series: [
                        {
                            type: 'pie',
                            radius: ['40%', '70%'],
                            avoidLabelOverlap: false,
                            itemStyle: {
                                borderRadius: 10,
                                borderColor: '#fff',
                                borderWidth: 2
                            },
                            label: {
                                show: false,
                                position: 'center'
                            },
                            emphasis: {
                                label: {
                                    show: true,
                                    fontSize: '40',
                                    fontWeight: 'bold'
                                }
                            },
                            labelLine: {
                                show: false
                            },
                            data: educationLevels.map((educationLevel, index) => ({
                                value: enrollmentNumbers[index],
                                name: educationLevel
                            }))
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,328,329
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Coxcomb Chart(polar area chart) to compare the Enrollment Number of different Education Level in Q2-2021.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coxcomb Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [quarter, educationLevel, enrollmentNumber] = row.split(',');
                    if (quarter === 'Q2-2021') {
                        if (!chartData[educationLevel]) {
                            chartData[educationLevel] = 0;
                        }
                        chartData[educationLevel] += parseInt(enrollmentNumber);
                    }
                });
                const educationLevels = Object.keys(chartData);
                const enrollmentNumbers = Object.values(chartData);

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    angleAxis: {
                        type: 'category',
                        data: educationLevels,
                        z: 10
                    },
                    radiusAxis: {
                        max: Math.max(...enrollmentNumbers)
                    },
                    polar: {},
                    series: [{
                        type: 'bar',
                        data: enrollmentNumbers,
                        coordinateSystem: 'polar',
                        name: 'Enrollment Number',
                        stack: 'a'
                    }],
                    legend: {
                        show: true,
                        data: ['Enrollment Number']
                    }
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,329,330
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Radar Chart to compare the Enrollment Number of different Education Level in Q2-2021.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Radar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [quarter, educationLevel, enrollmentNumber] = row.split(',');
                    if (quarter === 'Q2-2021') {
                        if (!chartData[educationLevel]) {
                            chartData[educationLevel] = 0;
                        }
                        chartData[educationLevel] = parseInt(enrollmentNumber);
                    }
                });
                const educationLevels = Object.keys(chartData);
                const enrollmentNumbers = Object.values(chartData);

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Enrollment Number of Different Education Levels in Q2-2021'
                    },
                    radar: {
                        indicator: educationLevels.map(level => ({ name: level, max: Math.max(...enrollmentNumbers) })),
                        radius: 80,
                        center: ['50%', '50%']
                    },
                    series: [{
                        type: 'radar',
                        data: [{ value: enrollmentNumbers }]
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,330,331
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Streamgraph that visualizes the changes of Enrollment Number over the Quarter for each Education Level.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Streamgraph</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const educationLevels = [...new Set(csvData.map(row => row.split(',')[1]))];
                const quarters = [...new Set(csvData.map(row => row.split(',')[0]))];
                const seriesData = educationLevels.map(level => {
                    return quarters.map(quarter => {
                        const row = csvData.find(row => row.split(',')[0] === quarter && row.split(',')[1] === level);
                        return row ? parseInt(row.split(',')[2]) : 0;
                    });
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'line',
                            lineStyle: {
                                color: 'rgba(0,0,0,0.2)',
                                width: 2,
                                type: 'solid'
                            }
                        }
                    },
                    legend: {
                        data: educationLevels
                    },
                    singleAxis: {
                        top: 50,
                        bottom: 50,
                        axisLine: {
                            lineStyle: {
                                color: '#ddd'
                            }
                        },
                        axisTick: {
                            lineStyle: {
                                color: '#ddd'
                            }
                        },
                        axisLabel: {
                            color: '#aaa'
                        },
                        type: 'category',
                        axisPointer: {
                            animation: true,
                            lineStyle: {
                                color: '#ddd'
                            }
                        },
                        splitLine: {
                            lineStyle: {
                                color: '#ddd'
                            }
                        },
                        data: quarters
                    },
                    series: educationLevels.map((level, index) => {
                        return {
                            type: 'themeRiver',
                            name: level,
                            data: seriesData[index],
                            singleAxisIndex: 0,
                            itemStyle: {
                                color: echarts.graphic.LinearGradient(0, 0, 0, 1, [
                                    { offset: 0, color: '#c23531' },
                                    { offset: 1, color: '#2f4554' }
                                ])
                            }
                        };
                    })
                });
            });
    </script>
</body>
</html>
```",Initialization Error,331,332
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Slopegraph to compare the Enrollment Number between Q1-2020 and Q2-2020 for each Education Level.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Slopegraph</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const q1Data = {};
                const q2Data = {};
                csvData.forEach(row => {
                    const [quarter, educationLevel, enrollmentNumber] = row.split(',');
                    if (quarter === 'Q1-2020') {
                        q1Data[educationLevel] = parseInt(enrollmentNumber);
                    } else if (quarter === 'Q2-2020') {
                        q2Data[educationLevel] = parseInt(enrollmentNumber);
                    }
                });
                const educationLevels = Object.keys(q1Data);
                const seriesData = educationLevels.map(educationLevel => [q1Data[educationLevel], q2Data[educationLevel]]);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Enrollment Number Comparison between Q1-2020 and Q2-2020'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: [
                        {
                            type: 'category',
                            data: ['Q1-2020', 'Q2-2020'],
                            axisTick: {
                                alignWithLabel: true
                            }
                        }
                    ],
                    yAxis: [
                        {
                            type: 'value'
                        }
                    ],
                    series: [
                        {
                            name: 'Enrollment Number',
                            type: 'line',
                            data: seriesData,
                            lineStyle: {
                                opacity: 0.4,
                                width: 2,
                                curveness: 0
                            }
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,332,333
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Heatmap that visualizes the Enrollment Number across Education Level and Quarters.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>ECharts Heatmap</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const quarters = [...new Set(csvData.map(row => row.split(',')[0]))];
                const educationLevels = [...new Set(csvData.map(row => row.split(',')[1]))];
                const heatmapData = csvData.map(row => {
                    const [quarter, educationLevel, enrollmentNumber] = row.split(',');
                    return [quarters.indexOf(quarter), educationLevels.indexOf(educationLevel), parseInt(enrollmentNumber)];
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Enrollment Number Heatmap'
                    },
                    tooltip: {
                        position: 'top'
                    },
                    grid: {
                        height: '50%',
                        top: '10%'
                    },
                    xAxis: {
                        type: 'category',
                        data: quarters,
                        splitArea: {
                            show: true
                        }
                    },
                    yAxis: {
                        type: 'category',
                        data: educationLevels,
                        splitArea: {
                            show: true
                        }
                    },
                    visualMap: {
                        min: 0,
                        max: Math.max(...heatmapData.map(row => row[2])),
                        calculable: true,
                        orient: 'horizontal',
                        left: 'center',
                        bottom: '15%'
                    },
                    series: [{
                        name: 'Enrollment Number',
                        type: 'heatmap',
                        data: heatmapData,
                        label: {
                            show: true
                        },
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,333,334
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>ECharts Stacked Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const quarters = [];
                const enrollmentNumbers = [];
                const revenues = [];
                const operatingCosts = [];
                const profits = [];

                csvData.forEach(row => {
                    const [quarter, , enrollmentNumber, revenue, operatingCost, profit] = row.split(',');
                    quarters.push(quarter);
                    enrollmentNumbers.push(Number(enrollmentNumber));
                    revenues.push(Number(revenue));
                    operatingCosts.push(Number(operatingCost));
                    profits.push(Number(profit));
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Educational Enrollment Data'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    legend: {
                        data: ['Enrollment Number', 'Revenue', 'Operating Costs', 'Profit']
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'category',
                        data: quarters
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            name: 'Enrollment Number',
                            type: 'bar',
                            stack: 'total',
                            data: enrollmentNumbers
                        },
                        {
                            name: 'Revenue',
                            type: 'bar',
                            stack: 'total',
                            data: revenues
                        },
                        {
                            name: 'Operating Costs',
                            type: 'bar',
                            stack: 'total',
                            data: operatingCosts
                        },
                        {
                            name: 'Profit',
                            type: 'bar',
                            stack: 'total',
                            data: profits
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,334,335
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Horizontal Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>ECharts Example</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [quarter, educationLevel, enrollmentNumber] = row.split(',');
                    if (quarter === 'Q2-2021') {
                        if (!chartData[educationLevel]) {
                            chartData[educationLevel] = 0;
                        }
                        chartData[educationLevel] += parseInt(enrollmentNumber);
                    }
                });
                const educationLevels = Object.keys(chartData);
                const enrollmentNumbers = Object.values(chartData);

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Enrollment Number for each Education Level in Q2-2021'
                    },
                    tooltip: {},
                    legend: {},
                    xAxis: {
                        type: 'value'
                    },
                    yAxis: {
                        type: 'category',
                        data: educationLevels
                    },
                    series: [
                        {
                            name: 'Enrollment Number',
                            type: 'bar',
                            data: enrollmentNumbers
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,335,336
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot that visualizes the relationship between Enrollment Number and Revenue.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Enrollment Number vs Revenue Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""description"": ""A scatterplot showing the relationship between Enrollment Number and Revenue."",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
          {""field"": ""Revenue"", ""type"": ""quantitative""}
        ]
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,336,337
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Line Chart that visualizes the trend of Enrollment Number over the Quarter for each Education Level.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Enrollment Number Trend</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"" },
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {""field"": ""Quarter"", ""type"": ""nominal""},
        ""y"": {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Education Level"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,337,338
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Enrollment Number by Education Level in Q2-2021</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Quarter === 'Q2-2021'""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Education Level"", ""type"": ""nominal""},
        ""y"": {""field"": ""Enrollment Number"", ""type"": ""quantitative""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,338,339
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Pie Chart that visualizes the proportion of Enrollment Number contributed by each Education Level in Q2-2021.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Educational Enrollment Pie Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Quarter === 'Q2-2021'""},
        {""calculate"": ""datum['Education Level']"", ""as"": ""Education Level""}
      ],
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Education Level"", ""type"": ""nominal""}
      },
      ""view"": {""stroke"": null}
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,339,340
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Donut Chart that visualizes the distribution of Enrollment Number among Education Level in Q2-2021.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Donut Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Quarter === 'Q2-2021'""},
        {""calculate"": ""datum['Education Level']"", ""as"": ""Education Level""}
      ],
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Education Level"", ""type"": ""nominal""}
      },
      ""view"": {""stroke"": null},
      ""width"": 400,
      ""height"": 400
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,340,341
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Coxcomb Chart(polar area chart) to compare the Enrollment Number of different Education Level in Q2-2021.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coxcomb Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Quarter === 'Q2-2021'""},
        {""calculate"": ""datum['Education Level']"", ""as"": ""category""}
      ],
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
        ""color"": {""field"": ""category"", ""type"": ""nominal""}
      },
      ""view"": {""stroke"": null},
      ""config"": {
        ""arc"": {""padAngle"": 0.01},
        ""view"": {""strokeWidth"": 0}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,341,342
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Radar Chart to compare the Enrollment Number of different Education Level in Q2-2021.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Radar Chart for Enrollment Number by Education Level in Q2-2021</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Quarter === 'Q2-2021'""},
        {""calculate"": ""datum['Enrollment Number']"", ""as"": ""value""}
      ],
      ""mark"": ""line"",
      ""encoding"": {
        ""theta"": {""field"": ""Education Level"", ""type"": ""nominal"", ""scale"": {""range"": [0, 360]}},
        ""radius"": {""field"": ""value"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Education Level"", ""type"": ""nominal""}
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""grid"": false}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,342,343
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Streamgraph that visualizes the changes of Enrollment Number over the Quarter for each Education Level.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Streamgraph of Enrollment Number over Quarter for each Education Level</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""area"",
      ""encoding"": {
        ""x"": {""field"": ""Quarter"", ""type"": ""nominal""},
        ""y"": {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Education Level"", ""type"": ""nominal""}
      },
      ""config"": {
        ""view"": {""step"": 30},
        ""area"": {""interpolate"": ""monotone""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,343,344
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Slopegraph to compare the Enrollment Number between Q1-2020 and Q2-2020 for each Education Level.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Slopegraph for Enrollment Number</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 500,
      ""height"": 300,
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {
          ""filter"": ""datum.Quarter === 'Q1-2020' || datum.Quarter === 'Q2-2020'""
        },
        {
          ""sort"": [{""field"": ""Education Level""}]
        }
      ],
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {
          ""field"": ""Quarter"",
          ""type"": ""nominal"",
          ""axis"": {""title"": ""Quarter""}
        },
        ""y"": {
          ""field"": ""Enrollment Number"",
          ""type"": ""quantitative"",
          ""axis"": {""title"": ""Enrollment Number""}
        },
        ""color"": {
          ""field"": ""Education Level"",
          ""type"": ""nominal""
        }
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,344,345
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Heatmap that visualizes the Enrollment Number across Education Level and Quarters.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Heatmap of Enrollment Number</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""rect"",
      ""encoding"": {
        ""x"": {""field"": ""Quarter"", ""type"": ""nominal""},
        ""y"": {""field"": ""Education Level"", ""type"": ""nominal""},
        ""color"": {""field"": ""Enrollment Number"", ""type"": ""quantitative""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,345,346
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Stacked Bar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"" },
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Quarter"", ""type"": ""nominal""},
        ""y"": {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Education Level"", ""type"": ""nominal""},
        ""tooltip"": [
          {""field"": ""Quarter"", ""type"": ""nominal""},
          {""field"": ""Education Level"", ""type"": ""nominal""},
          {""field"": ""Enrollment Number"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""grid"": false}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,346,347
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Horizontal Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Enrollment Number by Education Level in Q2-2021</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Quarter === 'Q2-2021'""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Education Level"", ""type"": ""nominal""},
        ""color"": {""field"": ""Education Level"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,347,348
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot that visualizes the relationship between Sales Figures and Hours Worked. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot of Sales Figures and Hours Worked</title>
    <style>
        /* set the CSS */
        body { font: 12px Arial;}

        /* style the lines */
        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 1.5px;
        }

        /* style the circles */
        .dot {
            fill: steelblue;
            stroke: #fff;
        }

        /* style the text */
        .text {
            font-size: 12px;
        }

        /* style the tooltip */
        .tooltip {
            position: absolute;
            pointer-events: none;
            font-size: 12px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        // set the dimensions and margins of the graph
        var margin = {top: 20, right: 20, bottom: 30, left: 40},
            width = 800 - margin.left - margin.right,
            height = 600 - margin.top - margin.bottom;

        // append the svg object to the body of the page
        var svg = d3.select(""body"")
            .select(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");

        // read the data
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f724f56f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(function(data) {

            // convert data types
            data.forEach(function(d) {
                d[""Sales Figures""] = +d[""Sales Figures""];
                d[""Hours Worked""] = +d[""Hours Worked""];
            });

            // add the x-axis
            var x = d3.scaleLinear()
                .domain([0, d3.max(data, function(d) { return d[""Sales Figures""]; })])
                .range([0, width]);
            svg.append(""g"")
                .attr(""transform"", ""translate(0,"" + height + "")"")
                .call(d3.axisBottom(x));

            // add the y-axis
            var y = d3.scaleLinear()
                .domain([0, d3.max(data, function(d) { return d[""Hours Worked""]; })])
                .range([height, 0]);
            svg.append(""g"")
                .call(d3.axisLeft(y));

            // add the dots
            svg.selectAll(""dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""r"", 5)
                .attr(""cx"", function(d) { return x(d[""Sales Figures""]); })
                .attr(""cy"", function(d) { return y(d[""Hours Worked""]); })
                .on(""mouseover"", function(event, d) {
                    var xValue = x(d[""Sales Figures""]);
                    var yValue = y(d[""Hours Worked""]);
                    var tooltip = d3.select(""body"")
                        .append(""div"")
                        .attr(""class"", ""tooltip"")
                        .style(""left"", (event.pageX + 10) + ""px"")
                        .style(""top"", (event.pageY - 10) + ""px"")
                        .html(""Sales Figures: "" + d[""Sales Figures""] + ""<br>Hours Worked: "" + d[""Hours Worked""]);
                    var highlightLineX = svg.append(""line"")
                        .attr(""x1"", 0)
                        .attr(""y1"", yValue)
                        .attr(""x2"", width)
                        .attr(""y2"", yValue)
                        .attr(""stroke"", ""red"")
                        .attr(""stroke-width"", 1);
                    var highlightLineY = svg.append(""line"")
                        .attr(""x1"", xValue)
                        .attr(""y1"", 0)
                        .attr(""x2"", xValue)
                        .attr(""y2"", height)
                        .attr(""stroke"", ""red"")
                        .attr(""stroke-width"", 1);
                })
                .on(""mouseout"", function() {
                    d3.select("".tooltip"").remove();
                    svg.selectAll(""line"").remove();
                });
        });
    </script>
</body>
</html>
```",Initialization Error,348,349
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot that visualizes the relationship between Sales Figures and Hours Worked. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot with Brushing</title>
  <style>
    .chart {
      position: relative;
      display: block;
      width: 800px;
      height: 600px;
      margin: 20px auto;
    }
    .chart .brush {
      fill: none;
      stroke: steelblue;
      stroke-width: 1.5px;
      stroke-linecap: round;
    }
    .chart .brush .handle {
      fill: #fff;
      stroke: #000;
      stroke-width: 1.5px;
      stroke-linecap: round;
      stroke-linejoin: round;
      cursor: ew-resize;
    }
  </style>
</head>
<body>
  <svg class=""chart""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;
    const svg = d3.select('.chart')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);
    d3.csv('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
      .then(data => {
        data.forEach(d => {
          d['Sales Figures'] = +d['Sales Figures'];
          d['Hours Worked'] = +d['Hours Worked'];
        });
        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Sales Figures'])])
          .range([0, width]);
        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Hours Worked'])])
          .range([height, 0]);
        const xAxis = d3.axisBottom(xScale)
          .ticks(10);
        const yAxis = d3.axisLeft(yScale)
          .ticks(10);
        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(xAxis);
        svg.append('g')
          .call(yAxis);
        const brush = d3.brush()
          .extent([[0, 0], [width, height]])
          .on('brush', brushed);
        svg.append('g')
          .call(brush);
        svg.selectAll('circle')
          .data(data)
          .enter()
          .append('circle')
          .attr('cx', d => xScale(d['Sales Figures']))
          .attr('cy', d => yScale(d['Hours Worked']))
          .attr('r', 5)
          .attr('fill', 'steelblue');
        function brushed(event) {
          const selection = event.selection;
          if (selection) {
            svg.selectAll('circle')
              .classed('selected', d => {
                const x = xScale(d['Sales Figures']);
                const y = yScale(d['Hours Worked']);
                return x >= selection[0][0] && x <= selection[1][0] && y <= selection[0][1] && y >= selection[1][1];
              });
          } else {
            svg.selectAll('circle')
              .classed('selected', false);
          }
        }
      });
  </script>
</body>
</html>
```",Correct,349,350
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot that visualizes the relationship between Sales Figures and Hours Worked. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Sales Figures vs Hours Worked</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 800px;
      height: 600px;
      border: 1px solid black;
    }
  </style>
</head>
<body>
  <svg class=""chart""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('.chart')
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
      .then(data => {
        data.forEach(d => {
          d['Sales Figures'] = +d['Sales Figures'];
          d['Hours Worked'] = +d['Hours Worked'];
        });

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Hours Worked'])])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Sales Figures'])])
          .range([height, 0]);

        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(xAxis);

        svg.append('g')
          .call(yAxis);

        svg.selectAll('circle')
          .data(data)
          .enter()
          .append('circle')
          .attr('cx', d => xScale(d['Hours Worked']))
          .attr('cy', d => yScale(d['Sales Figures']))
          .attr('r', 5);

        const zoom = d3.zoom()
          .scaleExtent([1, 10])
          .extent([[-Infinity, -Infinity], [Infinity, Infinity]])
          .on('zoom', () => {
            svg.selectAll('circle')
              .attr('cx', d => xScale(d['Hours Worked']) * d3.event.transform.k)
              .attr('cy', d => yScale(d['Sales Figures']) * d3.event.transform.k);

            svg.select('.x-axis')
              .attr('transform', `translate(0, ${height * d3.event.transform.k}) scale(${d3.event.transform.k})`)
              .call(xAxis.scale(xScale.scale(d3.event.transform.rescaleX(xScale))));

            svg.select('.y-axis')
              .attr('transform', `scale(${d3.event.transform.k})`)
              .call(yAxis.scale(yScale.scale(d3.event.transform.rescaleY(yScale))));
          });

        svg.call(zoom);
      });
  </script>
</body>
</html>
```",Unexpected Execution Result,350,351
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Sales Figures and Hours Worked. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Sales Figures vs Hours Worked</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .tooltip {
      position: absolute;
      background-color: #f9f9f9;
      border: 1px solid #ccc;
      padding: 5px;
      font-size: 12px;
      visibility: hidden;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('svg')
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
      .then(data => {
        data.forEach(d => {
          d['Sales Figures'] = +d['Sales Figures'];
          d['Hours Worked'] = +d['Hours Worked'];
        });

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Hours Worked'])])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Sales Figures'])])
          .range([height, 0]);

        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(xAxis);

        svg.append('g')
          .call(yAxis);

        svg.append('text')
          .attr('transform', `translate(${width / 2}, ${height + margin.bottom - 10})`)
          .style('text-anchor', 'middle')
          .text('Hours Worked');

        svg.append('text')
          .attr('transform', `translate(${margin.left - 30}, ${height / 2}) rotate(-90)`)
          .style('text-anchor', 'middle')
          .text('Sales Figures');

        const tooltip = d3.select('body')
          .append('div')
          .attr('class', 'tooltip')
          .style('opacity', 0);

        svg.selectAll('circle')
          .data(data)
          .enter()
          .append('circle')
          .attr('cx', d => xScale(d['Hours Worked']))
          .attr('cy', d => yScale(d['Sales Figures']))
          .attr('r', 5)
          .on('mouseover', (event, d) => {
            tooltip.transition()
              .duration(200)
              .style('opacity', 0.9);
            tooltip.html(`Department: ${d.Department}<br>Sales Figures: ${d['Sales Figures']}<br>Hours Worked: ${d['Hours Worked']}`)
              .style('left', (event.pageX) + 'px')
              .style('top', (event.pageY - 28) + 'px');
          })
          .on('mouseout', () => {
            tooltip.transition()
              .duration(500)
              .style('opacity', 0);
          })
          .on('click', (event, d) => {
            const query = `${d.Department} ${d['Sales Figures']} ${d['Hours Worked']}`;
            const url = `https://www.google.com/search?q=${query}`;
            window.open(url, '_blank');
          });
      });
  </script>
</body>
</html>
```",Correct,351,352
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot with query widgets showing the Sales Figures and Hours Worked of the given dataset. Add a slider to represent the Year.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Employee Performance Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <div id=""chart""></div>
  <div id=""slider""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const slider = d3.select(""#slider"")
      .append(""input"")
      .attr(""type"", ""range"")
      .attr(""min"", 0)
      .attr(""max"", 0)
      .attr(""value"", 0);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
      data.forEach(d => {
        d[""Sales Figures""] = +d[""Sales Figures""];
        d[""Hours Worked""] = +d[""Hours Worked""];
        d.Year = +d.Year;
      });

      const years = Array.from(new Set(data.map(d => d.Year)));
      slider.attr(""min"", 0)
        .attr(""max"", years.length - 1)
        .attr(""value"", 0);

      const xScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Hours Worked""])])
        .range([0, width]);

      const yScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Sales Figures""])])
        .range([height, 0]);

      const xAxis = d3.axisBottom(xScale)
        .ticks(5);

      const yAxis = d3.axisLeft(yScale)
        .ticks(5);

      svg.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(xAxis);

      svg.append(""g"")
        .call(yAxis);

      svg.append(""text"")
        .attr(""transform"", `translate(${width / 2}, ${height + margin.bottom - 5})`)
        .style(""text-anchor"", ""middle"")
        .text(""Hours Worked"");

      svg.append(""text"")
        .attr(""transform"", `rotate(-90) translate(${-height / 2}, ${-margin.left + 15})`)
        .style(""text-anchor"", ""middle"")
        .text(""Sales Figures"");

      const points = svg.selectAll(""circle"")
        .data(data.filter(d => d.Year === years[0]))
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScale(d[""Hours Worked""]))
        .attr(""cy"", d => yScale(d[""Sales Figures""]))
        .attr(""r"", 5);

      slider.on(""input"", () => {
        const yearIndex = +slider.property(""value"");
        const year = years[yearIndex];
        points.data(data.filter(d => d.Year === year))
          .transition()
          .duration(500)
          .attr(""cx"", d => xScale(d[""Hours Worked""]))
          .attr(""cy"", d => yScale(d[""Sales Figures""]));
      });
    });
  </script>
</body>
</html>
```",Correct,352,353
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot showing the Sales Figures of Marketing. Add animated transitions that connect these points using lines in order.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Marketing Sales Figures Scatterplot</title>
  <style>
    /* Add some basic styling to make the chart look better */
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 800px;
      height: 600px;
      margin: 50px auto;
    }
  </style>
</head>
<body>
  <svg class=""chart""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    // Set up the SVG and margins
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;
    const svg = d3.select('.chart')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    // Load the data
    d3.csv('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
      .then(data => {
        // Filter the data for Marketing department
        const marketingData = data.filter(d => d.Department === 'Marketing');

        // Convert data types
        marketingData.forEach(d => {
          d['Sales Figures'] = +d['Sales Figures'];
          d.Year = +d.Year;
        });

        // Set up the scales
        const xScale = d3.scaleLinear()
          .domain(d3.extent(marketingData, d => d.Year))
          .range([0, width]);
        const yScale = d3.scaleLinear()
          .domain(d3.extent(marketingData, d => d['Sales Figures']))
          .range([height, 0]);

        // Add the axes
        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));
        svg.append('g')
          .call(d3.axisLeft(yScale));

        // Add the points
        const points = svg.selectAll('circle')
          .data(marketingData)
          .enter()
          .append('circle')
          .attr('cx', d => xScale(d.Year))
          .attr('cy', d => yScale(d['Sales Figures']))
          .attr('r', 5);

        // Add the lines
        const line = d3.line()
          .x(d => xScale(d.Year))
          .y(d => yScale(d['Sales Figures']));
        const path = svg.append('path')
          .datum(marketingData)
          .attr('d', line)
          .attr('stroke', 'black')
          .attr('stroke-width', 1)
          .attr('fill', 'none');

        // Animate the lines
        const totalLength = path.node().getTotalLength();
        path.attr('stroke-dasharray', totalLength + ' ' + totalLength)
          .attr('stroke-dashoffset', totalLength)
          .transition()
          .duration(2000)
          .attr('stroke-dashoffset', 0);
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,353,354
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Sales Figures of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Employee Performance Line Chart</title>
    <style>
        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 2px;
        }

        .line:hover {
            stroke-width: 4px;
        }

        .axis text {
            font-size: 12px;
        }

        .axis path,
        .axis line {
            fill: none;
            stroke: #777;
            stroke-width: 1;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 50, right: 50, bottom: 50, left: 50 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"")
            .then(data => {
                data.forEach(d => {
                    d[""Sales Figures""] = +d[""Sales Figures""];
                    d.Year = +d.Year;
                });

                const years = Array.from(new Set(data.map(d => d.Year)));
                const departments = Array.from(new Set(data.map(d => d.Department)));

                const xScale = d3.scalePoint()
                    .domain(years)
                    .range([0, width])
                    .padding(0.5);

                const yScale = d3.scaleLinear()
                    .domain([0, d3.max(data, d => d[""Sales Figures""])])
                    .range([height, 0]);

                svg.append(""g"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(d3.axisBottom(xScale));

                svg.append(""g"")
                    .call(d3.axisLeft(yScale));

                departments.forEach(department => {
                    const departmentData = data.filter(d => d.Department === department);

                    svg.append(""path"")
                        .datum(departmentData)
                        .attr(""class"", ""line"")
                        .attr(""d"", d3.line()
                            .x(d => xScale(d.Year))
                            .y(d => yScale(d[""Sales Figures""]))
                        )
                        .on(""mouseover"", function() {
                            d3.select(this)
                                .style(""stroke-width"", ""4px"");
                        })
                        .on(""mouseout"", function() {
                            d3.select(this)
                                .style(""stroke-width"", ""2px"");
                        });
                });
            });
    </script>
</body>
</html>
```",Correct,354,355
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Bar Chart that visualizes the Sales Figures for each Department in 2020. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Sales Figures by Department in 2020</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Year""] = +d[""Year""];
          d[""Sales Figures""] = +d[""Sales Figures""];
        });

        const data2020 = data.filter(d => d[""Year""] === 2020);

        const departments = Array.from(new Set(data2020.map(d => d[""Department""])));

        const xScale = d3.scaleBand()
          .domain(departments)
          .range([0, width])
          .padding(0.2);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data2020, d => d[""Sales Figures""])])
          .range([height, 0]);

        svg.selectAll(""rect"")
          .data(data2020)
          .enter()
          .append(""rect"")
          .attr(""x"", d => xScale(d[""Department""]))
          .attr(""y"", d => yScale(d[""Sales Figures""]))
          .attr(""width"", xScale.bandwidth())
          .attr(""height"", d => height - yScale(d[""Sales Figures""]));

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        const zoom = d3.zoom()
          .scaleExtent([1, 10])
          .extent([[-Infinity, -Infinity], [Infinity, Infinity]])
          .on(""zoom"", zoomed);

        svg.call(zoom);

        function zoomed({ transform }) {
          svg.selectAll(""rect"")
            .attr(""x"", d => xScale(d[""Department""]) * transform.k + transform.x)
            .attr(""y"", d => yScale(d[""Sales Figures""]) * transform.k + transform.y)
            .attr(""width"", xScale.bandwidth() * transform.k)
            .attr(""height"", (d => height - yScale(d[""Sales Figures""])) * transform.k);

          svg.selectAll("".tick"")
            .attr(""transform"", `translate(${transform.x}, ${transform.y}) scale(${transform.k})`);
        }
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,355,356
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Bar Chart that visualizes the Sales Figures for each Department in 2020. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Sales Figures by Department in 2020</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 800px;
      height: 600px;
      border: 1px solid black;
    }
    .bar {
      fill: steelblue;
    }
    .bar:hover {
      fill: brown;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg class=""chart""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;
    const svg = d3.select(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Sales Figures""] = +d[""Sales Figures""];
          d.Year = +d.Year;
        });

        const filteredData = data.filter(d => d.Year === 2020);

        const x = d3.scaleBand()
          .domain(filteredData.map(d => d.Department))
          .range([0, width])
          .padding(0.2);

        const y = d3.scaleLinear()
          .domain([0, d3.max(filteredData, d => d[""Sales Figures""])])
          .range([height, 0]);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(x));

        svg.append(""g"")
          .call(d3.axisLeft(y));

        const bars = svg.selectAll(""rect"")
          .data(filteredData)
          .enter()
          .append(""rect"")
          .attr(""class"", ""bar"")
          .attr(""x"", d => x(d.Department))
          .attr(""y"", d => y(d[""Sales Figures""]))
          .attr(""width"", x.bandwidth())
          .attr(""height"", d => height - y(d[""Sales Figures""]));

        let drag = d3.drag()
          .on(""start"", dragstarted)
          .on(""drag"", dragged)
          .on(""end"", dragended);

        bars.call(drag);

        function dragstarted(event, d) {
          d3.select(this).raise();
          d3.event.sourceEvent.stopPropagation();
        }

        function dragged(event, d) {
          const newX = event.x;
          const newY = event.y;
          d3.select(this)
            .attr(""x"", newX)
            .attr(""y"", newY);
        }

        function dragended(event, d) {
          const bars = svg.selectAll(""rect"");
          const sortedData = bars.data().sort((a, b) => {
            const ax = +a3.attr(""x"");
            const bx = +b3.attr(""x"");
            return ax - bx;
          });
          bars.data(sortedData);
        }
      });
  </script>
</body>
</html>
```",Execution Error,356,357
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Bar Chart that visualizes the Sales Figures for each Department in 2020. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Sales Figures.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Sales Figures by Department in 2020</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 40px auto;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
    .bar {
      fill: steelblue;
    }
    .bar:hover {
      fill: brown;
    }
    .sort-button {
      position: absolute;
      top: 10px;
      right: 10px;
    }
  </style>
</head>
<body>
  <svg class=""chart"" width=""800"" height=""600""></svg>
  <button class=""sort-button"" id=""sort-asc"">Sort Ascending</button>
  <button class=""sort-button"" id=""sort-desc"">Sort Descending</button>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select("".chart"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Sales Figures""] = +d[""Sales Figures""];
          d.Year = +d.Year;
        });

        const filteredData = data.filter(d => d.Year === 2020);

        const x = d3.scaleBand()
          .domain(filteredData.map(d => d.Department))
          .range([0, width])
          .padding(0.2);

        const y = d3.scaleLinear()
          .domain([0, d3.max(filteredData, d => d[""Sales Figures""])])
          .range([height, 0]);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(x));

        svg.append(""g"")
          .call(d3.axisLeft(y));

        const bars = svg.selectAll(""rect"")
          .data(filteredData)
          .enter()
          .append(""rect"")
          .attr(""x"", d => x(d.Department))
          .attr(""y"", d => y(d[""Sales Figures""]))
          .attr(""width"", x.bandwidth())
          .attr(""height"", d => height - y(d[""Sales Figures""]));

        d3.select(""#sort-asc"").on(""click"", () => {
          bars.transition()
            .duration(1000)
            .attr(""x"", d => x(d.Department))
            .attr(""y"", d => y(d[""Sales Figures""]))
            .attr(""height"", d => height - y(d[""Sales Figures""]));

          filteredData.sort((a, b) => a[""Sales Figures""] - b[""Sales Figures""]);
          x.domain(filteredData.map(d => d.Department));
          svg.selectAll(""g"").remove();
          svg.append(""g"")
            .attr(""transform"", `translate(0, ${height})`)
            .call(d3.axisBottom(x));
          svg.append(""g"")
            .call(d3.axisLeft(y));
        });

        d3.select(""#sort-desc"").on(""click"", () => {
          bars.transition()
            .duration(1000)
            .attr(""x"", d => x(d.Department))
            .attr(""y"", d => y(d[""Sales Figures""]))
            .attr(""height"", d => height - y(d[""Sales Figures""]));

          filteredData.sort((a, b) => b[""Sales Figures""] - a[""Sales Figures""]);
          x.domain(filteredData.map(d => d.Department));
          svg.selectAll(""g"").remove();
          svg.append(""g"")
            .attr(""transform"", `translate(0, ${height})`)
            .call(d3.axisBottom(x));
          svg.append(""g"")
            .call(d3.axisLeft(y));
        });
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,357,358
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot that visualizes the relationship between Sales Figures and Hours Worked. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Sales Figures vs Hours Worked</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const salesFigures = [];
                const hoursWorked = [];
                csvData.forEach(row => {
                    const [year, department, salesFigure, hoursWorkedValue, revenue, profit, employeeSatisfactionScore, numberOfEmployees] = row.split(',');
                    salesFigures.push(parseFloat(salesFigure));
                    hoursWorked.push(parseFloat(hoursWorkedValue));
                });

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    tooltip: {
                        trigger: 'item',
                        formatter: function (params) {
                            return `Sales Figures: ${params.data[0]}<br>Hours Worked: ${params.data[1]}`;
                        },
                        axisPointer: {
                            type: 'cross'
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Sales Figures',
                        axisPointer: {
                            label: {
                                formatter: function (params) {
                                    return `Sales Figures: ${params.value}`;
                                }
                            }
                        }
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Hours Worked',
                        axisPointer: {
                            label: {
                                formatter: function (params) {
                                    return `Hours Worked: ${params.value}`;
                                }
                            }
                        }
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: salesFigures.map((value, index) => [value, hoursWorked[index]]),
                            symbolSize: 10
                        }
                    ]
                };
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,358,359
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot that visualizes the relationship between Sales Figures and Hours Worked. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot with Brushing</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = csvData.map(row => {
                    const columns = row.split(',');
                    return [parseFloat(columns[2]), parseFloat(columns[3])];
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Scatterplot with Brushing'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    toolbox: {
                        feature: {
                            dataZoom: {},
                            brush: {
                                type: ['rect', 'polygon', 'clear']
                            }
                        }
                    },
                    xAxis: {},
                    yAxis: {},
                    series: [{
                        type: 'scatter',
                        data: chartData,
                        markLine: {
                            data: [
                                { type: 'max', name: 'Max' },
                                { type: 'min', name: 'Min' }
                            ]
                        }
                    }]
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,359,360
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot that visualizes the relationship between Sales Figures and Hours Worked. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Sales Figures vs Hours Worked Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = csvData.map(row => {
                    const columns = row.split(',');
                    return [parseFloat(columns[2]), parseFloat(columns[3])];
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Sales Figures vs Hours Worked'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Sales Figures'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Hours Worked'
                    },
                    series: [{
                        type: 'scatter',
                        data: chartData
                    }],
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 100
                        },
                        {
                            start: 0,
                            end: 100
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,360,361
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Sales Figures and Hours Worked. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Sales Figures vs Hours Worked</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = csvData.map(row => {
                    const [Year, Department, SalesFigures, HoursWorked, Revenue, Profit, EmployeeSatisfactionScore, NumberOfEmployees] = row.split(',');
                    return [parseFloat(SalesFigures), parseFloat(HoursWorked)];
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Sales Figures vs Hours Worked'
                    },
                    tooltip: {
                        formatter: (params) => {
                            const [SalesFigures, HoursWorked] = params.data;
                            return `Sales Figures: ${SalesFigures}<br>Hours Worked: ${HoursWorked}`;
                        }
                    },
                    series: [{
                        type: 'scatter',
                        data: chartData,
                        markLine: {
                            data: [{ type: 'max', name: 'Max' }, { type: 'min', name: 'Min' }]
                        },
                        markPoint: {
                            data: [{ type: 'max', name: 'Max' }, { type: 'min', name: 'Min' }]
                        }
                    }],
                    xAxis: {
                        name: 'Sales Figures'
                    },
                    yAxis: {
                        name: 'Hours Worked'
                    }
                });

                chart.on('click', (params) => {
                    const [SalesFigures, HoursWorked] = params.data;
                    const url = `https://www.google.com/search?q=Sales+Figures+${SalesFigures}+Hours+Worked+${HoursWorked}`;
                    window.open(url, '_blank');
                });
            });
    </script>
</body>
</html>
```",Correct,361,362
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot with query widgets showing the Sales Figures and Hours Worked of the given dataset. Add a slider to represent the Year.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Employee Performance Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-gl@2.0.8/dist/echarts-gl.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-stat@1.1.1/dist/ecStat.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/extension/bmap.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-gl@2.0.8/dist/echarts-gl.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-stat@1.1.1/dist/ecStat.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/extension/dataTool.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <div id=""slider""></div>
    <script>
        $.ajax({
            type: 'GET',
            url: 'https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv',
            success: function(data) {
                var csv = $.csv.toArrays(data);
                var chartData = [];
                var years = [];
                for (var i = 1; i < csv.length; i++) {
                    var year = parseInt(csv[i][0]);
                    var department = csv[i][1];
                    var salesFigures = parseFloat(csv[i][2]);
                    var hoursWorked = parseFloat(csv[i][3]);
                    chartData.push([salesFigures, hoursWorked]);
                    if (years.indexOf(year) === -1) {
                        years.push(year);
                    }
                }
                var myChart = echarts.init(document.getElementById('chart'));
                var option = {
                    title: {
                        text: 'Employee Performance Scatterplot'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Sales Figures'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Hours Worked'
                    },
                    series: [{
                        type: 'scatter',
                        data: chartData,
                        symbolSize: 10
                    }]
                };
                myChart.setOption(option);
                var slider = echarts.init(document.getElementById('slider'));
                var sliderOption = {
                    type: 'slider',
                    min: Math.min(...years),
                    max: Math.max(...years),
                    value: Math.min(...years),
                    orient: 'horizontal',
                    width: 800,
                    height: 20,
                    handleSize: 10,
                    handleStyle: {
                        color: '#fff',
                        borderColor: '#ccc',
                        borderWidth: 1,
                        shadowBlur: 2,
                        shadowColor: 'rgba(0, 0, 0, 0.6)',
                        shadowOffsetX: 2,
                        shadowOffsetY: 2
                    },
                    data: years,
                    formatter: function(value) {
                        return value;
                    }
                };
                slider.setOption(sliderOption);
                slider.on('changed', function(params) {
                    var year = params.value[0];
                    var filteredData = [];
                    for (var i = 1; i < csv.length; i++) {
                        if (parseInt(csv[i][0]) === year) {
                            var salesFigures = parseFloat(csv[i][2]);
                            var hoursWorked = parseFloat(csv[i][3]);
                            filteredData.push([salesFigures, hoursWorked]);
                        }
                    }
                    myChart.setOption({
                        series: [{
                            type: 'scatter',
                            data: filteredData,
                            symbolSize: 10
                        }]
                    });
                });
            }
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,362,363
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot showing the Sales Figures of Marketing. Add animated transitions that connect these points using lines in order.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Sales Figures of Marketing</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const marketingData = csvData.filter(row => row.split(',')[1] === 'Marketing');
                const years = marketingData.map(row => parseInt(row.split(',')[0]));
                const salesFigures = marketingData.map(row => parseFloat(row.split(',')[2]));

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Sales Figures of Marketing'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    xAxis: {
                        type: 'category',
                        data: years
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            type: 'line',
                            data: salesFigures,
                            symbol: 'circle',
                            symbolSize: 10,
                            animationDuration: 2000,
                            animationEasing: 'cubicInOut',
                            animationDurationUpdate: 2000,
                            animationEasingUpdate: 'cubicInOut'
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,363,364
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Sales Figures of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Employee Performance Line Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const years = [];
                const salesFigures = [];
                const hoursWorked = [];
                const revenue = [];
                const profit = [];
                const employeeSatisfactionScore = [];
                const numberOfEmployees = [];

                csvData.forEach(row => {
                    const columns = row.split(',');
                    years.push(columns[0]);
                    salesFigures.push(parseFloat(columns[2]));
                    hoursWorked.push(parseFloat(columns[3]));
                    revenue.push(parseFloat(columns[4]));
                    profit.push(parseFloat(columns[5]));
                    employeeSatisfactionScore.push(parseFloat(columns[6]));
                    numberOfEmployees.push(parseFloat(columns[7]));
                });

                const chartDom = document.getElementById('chart');
                const myChart = echarts.init(chartDom);
                const option = {
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'line',
                            lineStyle: {
                                color: 'rgba(0,0,0,0.2)',
                                width: 1,
                                type: 'solid'
                            }
                        }
                    },
                    legend: {
                        data: ['Sales Figures', 'Hours Worked', 'Revenue', 'Profit', 'Employee Satisfaction Score', 'Number of Employees']
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'category',
                        data: years
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            name: 'Sales Figures',
                            type: 'line',
                            data: salesFigures,
                            emphasis: {
                                focus: 'series'
                            }
                        },
                        {
                            name: 'Hours Worked',
                            type: 'line',
                            data: hoursWorked,
                            emphasis: {
                                focus: 'series'
                            }
                        },
                        {
                            name: 'Revenue',
                            type: 'line',
                            data: revenue,
                            emphasis: {
                                focus: 'series'
                            }
                        },
                        {
                            name: 'Profit',
                            type: 'line',
                            data: profit,
                            emphasis: {
                                focus: 'series'
                            }
                        },
                        {
                            name: 'Employee Satisfaction Score',
                            type: 'line',
                            data: employeeSatisfactionScore,
                            emphasis: {
                                focus: 'series'
                            }
                        },
                        {
                            name: 'Number of Employees',
                            type: 'line',
                            data: numberOfEmployees,
                            emphasis: {
                                focus: 'series'
                            }
                        }
                    ]
                };

                option && myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,364,365
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Bar Chart that visualizes the Sales Figures for each Department in 2020. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Sales Figures for each Department in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [Year, Department, SalesFigures] = row.split(',');
                    if (Year === '2020') {
                        if (!chartData[Department]) {
                            chartData[Department] = 0;
                        }
                        chartData[Department] += parseFloat(SalesFigures);
                    }
                });
                const departments = Object.keys(chartData);
                const salesFigures = Object.values(chartData);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Sales Figures for each Department in 2020'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    xAxis: {
                        type: 'category',
                        data: departments
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            name: 'Sales Figures',
                            type: 'bar',
                            data: salesFigures
                        }
                    ],
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 100
                        },
                        {
                            start: 0,
                            end: 100,
                            handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4v1.3h1.3v-1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7V23h6.6v1.4z M13.3,19.6H6.7v-1.4h6.6V19.6z',
                            handleSize: '80%',
                            handleStyle: {
                                color: '#fff',
                                shadowBlur: 3,
                                shadowColor: 'rgba(0, 0, 0, 0.6)',
                                shadowOffsetX: 2,
                                shadowOffsetY: 2
                            }
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,365,366
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Bar Chart that visualizes the Sales Figures for each Department in 2020. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Sales Figures by Department in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [year, department, salesFigures] = row.split(',');
                    if (year === '2020') {
                        if (!chartData[department]) {
                            chartData[department] = 0;
                        }
                        chartData[department] += parseFloat(salesFigures);
                    }
                });
                const departments = Object.keys(chartData);
                const salesFigures = Object.values(chartData);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'category',
                        data: departments,
                        axisLabel: {
                            rotate: 45
                        }
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            name: 'Sales Figures',
                            type: 'bar',
                            data: salesFigures,
                            draggable: true,
                            dragOption: {
                                type: 'sort',
                                filter: function (event) {
                                    return event.target.dataIndex >= 0;
                                },
                                onDrag: function (event) {
                                    const target = event.target;
                                    const source = event.source;
                                    const sourceIndex = source.dataIndex;
                                    const targetIndex = target.dataIndex;
                                    const sourceData = source.data;
                                    const targetData = target.data;
                                    [sourceData[sourceIndex], targetData[targetIndex]] = [targetData[targetIndex], sourceData[sourceIndex]];
                                    chart.setOption({
                                        series: [
                                            {
                                                data: sourceData
                                            }
                                        ]
                                    });
                                }
                            }
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,366,367
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Bar Chart that visualizes the Sales Figures for each Department in 2020. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Sales Figures.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <style>
        #chart {
            width: 800px;
            height: 600px;
            margin: 0 auto;
        }
    </style>
</head>
<body>
    <div id=""chart""></div>
    <select id=""sort-order"">
        <option value=""desc"">Descending</option>
        <option value=""asc"">Ascending</option>
    </select>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [year, department, salesFigures] = row.split(',');
                    if (year === '2020') {
                        if (!chartData[department]) {
                            chartData[department] = 0;
                        }
                        chartData[department] += parseFloat(salesFigures);
                    }
                });
                const departments = Object.keys(chartData);
                const salesFigures = Object.values(chartData);
                const myChart = echarts.init(document.getElementById('chart'));
                const option = {
                    title: {
                        text: 'Sales Figures for each Department in 2020'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    xAxis: {
                        type: 'category',
                        data: departments
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            name: 'Sales Figures',
                            type: 'bar',
                            data: salesFigures,
                            animationDuration: 2000,
                            animationEasing: 'cubicInOut'
                        }
                    ]
                };
                myChart.setOption(option);
                document.getElementById('sort-order').addEventListener('change', () => {
                    const sortOrder = document.getElementById('sort-order').value;
                    if (sortOrder === 'desc') {
                        departments.sort((a, b) => chartData[b] - chartData[a]);
                        salesFigures.sort((a, b) => b - a);
                    } else {
                        departments.sort((a, b) => chartData[a] - chartData[b]);
                        salesFigures.sort((a, b) => a - b);
                    }
                    myChart.setOption({
                        xAxis: {
                            data: departments
                        },
                        series: [
                            {
                                data: salesFigures
                            }
                        ]
                    });
                });
            });
    </script>
</body>
</html>
```",Correct,367,368
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot that visualizes the relationship between Sales Figures and Hours Worked. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Scatterplot with Interactive Tooltip</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to make the chart more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    // Define the Vega-Lite specification
    var spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Sales Figures"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Hours Worked"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Sales Figures"", ""type"": ""quantitative""},
          {""field"": ""Hours Worked"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""axis"": {
          ""labelFontSize"": 14,
          ""titleFontSize"": 16
        }
      }
    };

    // Embed the chart in the #vis div
    vegaEmbed(""#vis"", spec, {actions: false});
  </script>
</body>
</html>
```",Unexpected Execution Result,368,369
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot that visualizes the relationship between Sales Figures and Hours Worked. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Scatterplot with Brushing</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Sales Figures"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Hours Worked"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Sales Figures"", ""type"": ""quantitative""},
          {""field"": ""Hours Worked"", ""type"": ""quantitative""}
        ]
      },
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x"", ""y""]}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,369,370
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot that visualizes the relationship between Sales Figures and Hours Worked. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Sales Figures vs Hours Worked Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to the visualization */
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Sales Figures"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Hours Worked"", ""type"": ""quantitative""}
      },
      ""config"": {
        ""view"": {""continuousWidth"": 400, ""continuousHeight"": 300},
        ""axis"": {""labelFontSize"": 16, ""titleFontSize"": 16},
        ""legend"": {""labelFontSize"": 16, ""titleFontSize"": 16}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Execution Result,370,371
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Sales Figures and Hours Worked. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Scatterplot with External Links and Tooltips</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to our embed */
    #vis {
      width: 800px;
      height: 600px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Sales Figures"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Hours Worked"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Department"", ""type"": ""nominal""},
          {""field"": ""Sales Figures"", ""type"": ""quantitative""},
          {""field"": ""Hours Worked"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""view"": {""width"": 800, ""height"": 600}
      }
    };

    const runtime = vega.parse(spec);
    const view = new vega.View(runtime)
      .initialize(""#vis"")
      .hover()
      .run();

    document.querySelector('#vis').addEventListener('click', function(event) {
      const mousePosition = [event.clientX, event.clientY];
      const nearestDataPoint = view.data('hover_')[0];
      if (nearestDataPoint) {
        const department = nearestDataPoint.datum.Department;
        const url = `https://www.google.com/search?q=${department}`;
        window.open(url, '_blank');
      }
    });
  </script>
</body>
</html>
```",Unexpected Initial Result,371,372
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot with query widgets showing the Sales Figures and Hours Worked of the given dataset. Add a slider to represent the Year.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Scatterplot with Query Widgets</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to our embed */
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Sales Figures"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Hours Worked"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Department"", ""type"": ""nominal""}
      },
      ""params"": [
        {
          ""name"": ""year"",
          ""value"": 2020,
          ""bind"": {""input"": ""range"", ""min"": 2015, ""max"": 2025, ""step"": 1}
        }
      ],
      ""transform"": [
        {""filter"": ""datum.Year == year""}
      ]
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,372,373
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot showing the Sales Figures of Marketing. Add animated transitions that connect these points using lines in order.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Marketing Sales Figures Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 800,
      ""height"": 600,
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Department === 'Marketing'""},
        {""sort"": [""Year""]}
      ],
      ""mark"": {
        ""type"": ""line"",
        ""point"": true,
        ""tooltip"": true
      },
      ""encoding"": {
        ""x"": {""field"": ""Year"", ""type"": ""temporal""},
        ""y"": {""field"": ""Sales Figures"", ""type"": ""quantitative""},
        ""order"": {""field"": ""Year"", ""type"": ""temporal""}
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""range"": {""category"": {""scheme"": ""category20""}}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,373,374
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Sales Figures of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Multi-Series Line Chart with Interactive Line Highlight</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to our chart */
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f28f56f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": {
        ""type"": ""line"",
        ""tooltip"": true
      },
      ""encoding"": {
        ""x"": {""field"": ""Year"", ""type"": ""temporal""},
        ""y"": {""field"": ""Sales Figures"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Department"", ""type"": ""nominal""},
        ""detail"": {""field"": ""Department"", ""type"": ""nominal""}
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""range"": {""category"": {""scheme"": ""category20""}}
      },
      ""selection"": {
        ""highlight"": {""type"": ""single"", ""empty"": ""none"", ""on"": ""mouseover"", ""fields"": [""Department""], ""nearest"": true}
      },
      ""transform"": [
        {""filter"": ""datum.Department !== null""}
      ]
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,374,375
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Bar Chart that visualizes the Sales Figures for each Department in 2020. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Sales Figures by Department in 2020</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2020""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Department"", ""type"": ""nominal""},
        ""y"": {""field"": ""Sales Figures"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Department"", ""type"": ""nominal""},
          {""field"": ""Sales Figures"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""view"": {""continuousWidth"": 400, ""continuousHeight"": 300},
        ""axis"": {""labelFontSize"": 16, ""titleFontSize"": 16},
        ""legend"": {""labelFontSize"": 16, ""titleFontSize"": 16}
      }
    };

    vegaEmbed(""#vis"", spec, { ""actions"": true });
  </script>
</body>
</html>
```",Unexpected Execution Result,375,376
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Bar Chart that visualizes the Sales Figures for each Department in 2020. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Sales Figures by Department in 2020</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2020""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Department"", ""type"": ""nominal"", ""sort"": ""-y""},
        ""y"": {""field"": ""Sales Figures"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Department"", ""type"": ""nominal""},
          {""field"": ""Sales Figures"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""domainWidth"": 1}
      },
      ""interaction"": {
        ""drag"": {""type"": ""rect"", ""fields"": [""Department""], ""init"": {""Department"": ""sort"", ""sort"": ""-y""}}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Execution Result,376,377
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Bar Chart that visualizes the Sales Figures for each Department in 2020. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Sales Figures.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Sales Figures by Department in 2020</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to our chart */
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <select id=""sort-order"">
    <option value=""descending"">Descending</option>
    <option value=""ascending"">Ascending</option>
  </select>

  <script>
    const opts = {
      mode: ""vega-lite"",
      renderer: ""canvas"",
    };

    vegaEmbed(""#vis"", {
      $schema: ""https://vega.github.io/schema/vega-lite/v5.json"",
      data: {
        url: ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
        format: { type: ""csv"" },
      },
      mark: ""bar"",
      encoding: {
        x: { field: ""Department"", type: ""nominal"", sort: { order: ""descending"" } },
        y: { field: ""Sales Figures"", type: ""quantitative"" },
      },
      transform: [{ filter: ""datum.Year == 2020"" }],
    }, opts);

    document.getElementById(""sort-order"").addEventListener(""change"", (e) => {
      const sortOrder = e.target.value;
      vegaEmbed(""#vis"", {
        $schema: ""https://vega.github.io/schema/vega-lite/v5.json"",
        data: {
          url: ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
          format: { type: ""csv"" },
        },
        mark: ""bar"",
        encoding: {
          x: { field: ""Department"", type: ""nominal"", sort: { order: sortOrder } },
          y: { field: ""Sales Figures"", type: ""quantitative"" },
        },
        transform: [{ filter: ""datum.Year == 2020"" }],
      }, opts);
    });
  </script>
</body>
</html>
```",Unexpected Initial Result,377,378
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Employee Performance Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: inline-block;
      vertical-align: top;
    }
    .scatterplot {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
    .barchart {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart scatterplot"" id=""scatterplot""></div>
  <div class=""chart barchart"" id=""barchart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svgScatterplot = d3.select(""#scatterplot"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const svgBarchart = d3.select(""#barchart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Sales Figures""] = +d[""Sales Figures""];
          d[""Hours Worked""] = +d[""Hours Worked""];
          d[""Revenue""] = +d[""Revenue""];
          d[""Profit""] = +d[""Profit""];
          d[""Employee Satisfaction Score""] = +d[""Employee Satisfaction Score""];
          d[""Number of Employees""] = +d[""Number of Employees""];
        });

        const xScaleScatterplot = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Hours Worked""])])
          .range([0, width]);

        const yScaleScatterplot = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Sales Figures""])])
          .range([height, 0]);

        svgScatterplot.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScaleScatterplot(d[""Hours Worked""]))
          .attr(""cy"", d => yScaleScatterplot(d[""Sales Figures""]))
          .attr(""r"", 5);

        svgScatterplot.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScaleScatterplot));

        svgScatterplot.append(""g"")
          .call(d3.axisLeft(yScaleScatterplot));

        const xScaleBarchart = d3.scaleBand()
          .domain(data.map(d => d.Department))
          .range([0, width])
          .padding(0.2);

        const yScaleBarchart = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Profit""])])
          .range([height, 0]);

        svgBarchart.selectAll(""rect"")
          .data(data)
          .enter()
          .append(""rect"")
          .attr(""x"", d => xScaleBarchart(d.Department))
          .attr(""y"", d => yScaleBarchart(d[""Profit""]))
          .attr(""width"", xScaleBarchart.bandwidth())
          .attr(""height"", d => height - yScaleBarchart(d[""Profit""]));

        svgBarchart.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScaleBarchart));

        svgBarchart.append(""g"")
          .call(d3.axisLeft(yScaleBarchart));
      });
  </script>
</body>
</html>
```",Correct,378,379
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Employee Performance Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: inline-block;
      vertical-align: top;
    }
    .scatterplot {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
    .barchart {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
    .brush rect {
      fill: steelblue;
      fill-opacity: .3;
    }
    .brush .extent {
      fill-opacity: .3;
      stroke: #fff;
      shape-rendering: crispEdges;
    }
  </style>
</head>
<body>
  <div class=""chart scatterplot"" id=""scatterplot""></div>
  <div class=""chart barchart"" id=""barchart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svgScatterplot = d3.select(""#scatterplot"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const svgBarchart = d3.select(""#barchart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
      data.forEach(d => {
        d[""Sales Figures""] = +d[""Sales Figures""];
        d[""Hours Worked""] = +d[""Hours Worked""];
        d[""Revenue""] = +d[""Revenue""];
        d[""Profit""] = +d[""Profit""];
        d[""Employee Satisfaction Score""] = +d[""Employee Satisfaction Score""];
        d[""Number of Employees""] = +d[""Number of Employees""];
      });

      const xScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Sales Figures""])])
        .range([0, width]);

      const yScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Hours Worked""])])
        .range([height, 0]);

      const xScaleBarchart = d3.scaleBand()
        .domain(data.map(d => d.Department))
        .range([0, width])
        .padding(0.2);

      const yScaleBarchart = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Revenue""])])
        .range([height, 0]);

      svgScatterplot.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScaleScatterplot(d[""Sales Figures""]))
        .attr(""cy"", d => yScaleScatterplot(d[""Hours Worked""]))
        .attr(""r"", 5)
        .attr(""fill"", ""steelblue"");

      svgBarchart.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", d => xScaleBarchart(d.Department))
        .attr(""y"", d => yScaleBarchart(d[""Revenue""]))
        .attr(""width"", xScaleBarchart.bandwidth())
        .attr(""height"", d => height - yScaleBarchart(d[""Revenue""]))
        .attr(""fill"", ""steelblue"");

      const brush = d3.brush()
        .extent([[0, 0], [width, height]])
        .on(""brush"", brushed)
        .on(""end"", brushended);

      svgScatterplot.call(brush);

      function brushed() {
        const selection = d3.event.selection;
        if (selection) {
          const minX = selection[0][0];
          const maxX = selection[1][0];
          const minY = selection[0][1];
          const maxY = selection[1][1];

          svgScatterplot.selectAll(""circle"")
            .classed(""selected"", d => {
              const x = xScaleScatterplot(d[""Sales Figures""]);
              const y = yScaleScatterplot(d[""Hours Worked""]);
              return x >= minX && x <= maxX && y >= minY && y <= maxY;
            });

          svgBarchart.selectAll(""rect"")
            .classed(""selected"", d => {
              const x = xScaleScatterplot(d[""Sales Figures""]);
              const y = yScaleScatterplot(d[""Hours Worked""]);
              return x >= minX && x <= maxX && y >= minY && y <= maxY;
            });
        }
      }

      function brushended() {
        if (!d3.event.selection) {
          svgScatterplot.selectAll(""circle"")
            .classed(""selected"", false);

          svgBarchart.selectAll(""rect"")
            .classed(""selected"", false);
        }
      }
    });
  </script>
</body>
</html>
```",Execution Error,379,380
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Sales Figures , while the pie chart represents the distribution of Hours Worked.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Employee Performance Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: block;
      margin: 20px auto;
    }
  </style>
</head>
<body>
  <div id=""line-chart"" class=""chart""></div>
  <div id=""pie-chart"" class=""chart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 300 - margin.top - margin.bottom;

    const lineChart = d3.select(""#line-chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const pieChart = d3.select(""#pie-chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left + width / 2}, ${margin.top + height / 2})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
      data.forEach(d => {
        d[""Sales Figures""] = +d[""Sales Figures""];
        d[""Hours Worked""] = +d[""Hours Worked""];
      });

      const xScale = d3.scaleTime()
        .domain(d3.extent(data, d => new Date(d.Year)))
        .range([0, width]);

      const yScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Sales Figures""])])
        .range([height, 0]);

      lineChart.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

      lineChart.append(""g"")
        .call(d3.axisLeft(yScale));

      lineChart.append(""path"")
        .datum(data)
        .attr(""fill"", ""none"")
        .attr(""stroke"", ""steelblue"")
        .attr(""stroke-width"", 1.5)
        .attr(""d"", d3.line()
          .x(d => xScale(new Date(d.Year)))
          .y(d => yScale(d[""Sales Figures""])));

      const pie = d3.pie()
        .value(d => d[""Hours Worked""]);

      const arc = d3.arc()
        .outerRadius(width / 2 - 20)
        .innerRadius(0);

      const arcs = pieChart.selectAll(""arc"")
        .data(pie(data))
        .enter()
        .append(""path"")
        .attr(""fill"", (d, i) => d3.schemeCategory10[i])
        .attr(""d"", arc);

      pieChart.append(""text"")
        .attr(""text-anchor"", ""middle"")
        .attr(""font-size"", 16)
        .text(""Hours Worked Distribution"");
    });
  </script>
</body>
</html>
```",Unexpected Initial Result,380,381
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Sales Figures , while the pie chart represents the distribution of Hours Worked. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Hours Worked for the selected group.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Employee Performance Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: block;
    }
    .line-chart {
      width: 800px;
      height: 400px;
      margin: 20px auto;
    }
    .pie-chart {
      width: 800px;
      height: 400px;
      margin: 20px auto;
    }
  </style>
</head>
<body>
  <div class=""chart line-chart""></div>
  <div class=""chart pie-chart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const lineChart = d3.select('.line-chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    const pieChart = d3.select('.pie-chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left + width / 2}, ${margin.top + height / 2})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
      .then(data => {
        data.forEach(d => {
          d['Sales Figures'] = +d['Sales Figures'];
          d['Hours Worked'] = +d['Hours Worked'];
        });

        const xScale = d3.scaleTime()
          .domain(d3.extent(data, d => d.Year))
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Sales Figures'])])
          .range([height, 0]);

        lineChart.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        lineChart.append('g')
          .call(d3.axisLeft(yScale));

        const line = d3.line()
          .x(d => xScale(d.Year))
          .y(d => yScale(d['Sales Figures']));

        lineChart.append('path')
          .datum(data)
          .attr('fill', 'none')
          .attr('stroke', 'steelblue')
          .attr('stroke-width', 1.5)
          .attr('d', line);

        const brush = d3.brushX()
          .extent([[0, 0], [width, height]])
          .on('brush', brushed);

        lineChart.append('g')
          .attr('class', 'brush')
          .call(brush);

        function brushed({ selection }) {
          if (selection) {
            const selectedData = data.filter(d => {
              const x = xScale(d.Year);
              return x >= selection[0] && x <= selection[1];
            });

            const hoursWorked = selectedData.map(d => d['Hours Worked']);
            const pieData = d3.rollup(hoursWorked, v => d3.sum(v, d => d), d => d);

            const pieScale = d3.scaleLinear()
              .domain([0, d3.max(hoursWorked)])
              .range([0, 2 * Math.PI]);

            const arc = d3.arc()
              .innerRadius(0)
              .outerRadius(Math.min(width, height) / 2 - 20);

            pieChart.selectAll('path')
              .remove();

            pieChart.selectAll('path')
              .data(pieData)
              .enter()
              .append('path')
              .attr('fill', 'steelblue')
              .attr('d', (d, i) => {
                const startAngle = pieScale(d[1]);
                const endAngle = pieScale(d[1] + d[1]);
                return arc({ startAngle, endAngle });
              });
          }
        }
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,381,382
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Sales Figures, Revenue, Profit, Hours Worked, and Employee Satisfaction. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot Matrix</title>
  <style>
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
    .brush .extent {
      stroke: #fff;
      fill-opacity: .125;
      shape-rendering: crispEdges;
    }
  </style>
</head>
<body>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 100, right: 100, bottom: 100, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 800 - margin.top - margin.bottom;
    const dimensions = [""Sales Figures"", ""Revenue"", ""Profit"", ""Hours Worked"", ""Employee Satisfaction Score""];
    const size = 200;

    const svg = d3.select(""body"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
      data.forEach(d => {
        dimensions.forEach(dim => {
          d[dim] = +d[dim];
        });
      });

      const x = dimensions.map(d => {
        return d3.scaleLinear()
          .domain(d3.extent(data, p => p[d]))
          .range([0, size]);
      });

      const y = dimensions.map(d => {
        return d3.scaleLinear()
          .domain(d3.extent(data, p => p[d]))
          .range([size, 0]);
      });

      const brush = d3.brush()
        .extent([[0, 0], [size, size]])
        .on(""start"", brushstart)
        .on(""brush"", brushmove)
        .on(""end"", brushend);

      svg.selectAll(""g"")
        .data(cross(dimensions, dimensions))
        .enter()
        .append(""g"")
        .attr(""transform"", (d, i) => `translate(${(i % dimensions.length) * (size + 20)}, ${(Math.floor(i / dimensions.length)) * (size + 20)})`)
        .each(function(d) {
          const group = d3.select(this);
          const xScale = x[dimensions.indexOf(d[0])];
          const yScale = y[dimensions.indexOf(d[1])];

          group.append(""rect"")
            .attr(""x"", 0)
            .attr(""y"", 0)
            .attr(""width"", size)
            .attr(""height"", size)
            .attr(""fill"", ""none"")
            .attr(""stroke"", ""black"");

          group.selectAll(""circle"")
            .data(data)
            .enter()
            .append(""circle"")
            .attr(""cx"", d => xScale(d[d[0]]))
            .attr(""cy"", d => yScale(d[d[1]]))
            .attr(""r"", 3)
            .attr(""fill"", ""steelblue"");

          group.append(""g"")
            .attr(""transform"", `translate(0, ${size})`)
            .call(d3.axisBottom(xScale));

          group.append(""g"")
            .call(d3.axisLeft(yScale));

          group.append(""g"")
            .call(brush);
        });

      function brushstart() {
        svg.selectAll(""circle"")
          .classed(""hidden"", true);
      }

      function brushmove() {
        const s = d3.event.selection;
        if (s) {
          const [x0, y0] = s[0];
          const [x1, y1] = s[1];
          svg.selectAll(""circle"")
            .classed(""hidden"", function(d) {
              const xScale = x[dimensions.indexOf(d3.select(this.parentNode).datum()[0])];
              const yScale = y[dimensions.indexOf(d3.select(this.parentNode).datum()[1])];
              const cx = xScale(d[d3.select(this.parentNode).datum()[0]]);
              const cy = yScale(d[d3.select(this.parentNode).datum()[1]]);
              return !(cx >= x0 && cx <= x1 && cy >= y0 && cy <= y1);
            });
        }
      }

      function brushend() {
        if (!d3.event.selection) {
          svg.selectAll(""circle"")
            .classed(""hidden"", false);
        }
      }
    });

    function cross(a, b) {
      const c = [];
      for (let i = 0; i < a.length; i++) {
        for (let j = 0; j < b.length; j++) {
          c.push([a[i], b[j]]);
        }
      }
      return c;
    }
  </script>
</body>
</html>
```",Unexpected Initial Result,382,383
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a brushable Scatterplot that visualizes the relationship between Sales Figures and Hours Worked. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Brushable Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      position: relative;
      display: inline-block;
    }
    .chart .brush {
      fill: #ccc;
    }
    .chart .brush .extent {
      fill-opacity: 0.3;
      stroke: #fff;
      shape-rendering: crispEdges;
    }
    .chart .axis path,
    .chart .axis line {
      fill: none;
      stroke: #000;
      shape-rendering: crispEdges;
    }
    .chart .axis text {
      font-size: 12px;
    }
    .table {
      position: absolute;
      top: 0;
      right: 0;
      background-color: #fff;
      border: 1px solid #ddd;
      padding: 10px;
    }
    .table th,
    .table td {
      padding: 5px;
      border-bottom: 1px solid #ddd;
    }
    .table th {
      font-weight: bold;
    }
  </style>
</head>
<body>
  <div class=""chart"" style=""width: 800px; height: 600px;""></div>
  <div class=""table"" style=""display: none;""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 200, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select("".chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const table = d3.select("".table"");

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
      data.forEach(d => {
        d[""Sales Figures""] = +d[""Sales Figures""];
        d[""Hours Worked""] = +d[""Hours Worked""];
      });

      const x = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Hours Worked""])])
        .range([0, width]);

      const y = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Sales Figures""])])
        .range([height, 0]);

      const xAxis = d3.axisBottom(x)
        .ticks(10)
        .tickSize(-height);

      const yAxis = d3.axisLeft(y)
        .ticks(10)
        .tickSize(-width);

      svg.append(""g"")
        .attr(""class"", ""axis"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(xAxis);

      svg.append(""g"")
        .attr(""class"", ""axis"")
        .call(yAxis);

      const brush = d3.brush()
        .extent([[0, 0], [width, height]])
        .on(""brush"", brushed);

      svg.append(""g"")
        .attr(""class"", ""brush"")
        .call(brush);

      svg.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => x(d[""Hours Worked""]))
        .attr(""cy"", d => y(d[""Sales Figures""]))
        .attr(""r"", 5);

      function brushed(event) {
        const selection = event.selection;
        if (selection) {
          const minX = x.invert(selection[0][0]);
          const maxX = x.invert(selection[1][0]);
          const minY = y.invert(selection[1][1]);
          const maxY = y.invert(selection[0][1]);

          const filteredData = data.filter(d => d[""Hours Worked""] >= minX && d[""Hours Worked""] <= maxX && d[""Sales Figures""] >= minY && d[""Sales Figures""] <= maxY);

          table.style(""display"", ""block"");
          table.selectAll(""tr"").remove();

          const tableHeader = table.append(""tr"");
          tableHeader.append(""th"").text(""Year"");
          tableHeader.append(""th"").text(""Department"");
          tableHeader.append(""th"").text(""Sales Figures"");
          tableHeader.append(""th"").text(""Hours Worked"");
          tableHeader.append(""th"").text(""Revenue"");
          tableHeader.append(""th"").text(""Profit"");
          tableHeader.append(""th"").text(""Employee Satisfaction Score"");
          tableHeader.append(""th"").text(""Number of Employees"");

          filteredData.slice(0, 20).forEach(d => {
            const row = table.append(""tr"");
            row.append(""td"").text(d.Year);
            row.append(""td"").text(d.Department);
            row.append(""td"").text(d[""Sales Figures""]);
            row.append(""td"").text(d[""Hours Worked""]);
            row.append(""td"").text(d.Revenue);
            row.append(""td"").text(d.Profit);
            row.append(""td"").text(d[""Employee Satisfaction Score""]);
            row.append(""td"").text(d[""Number of Employees""]);
          });
        } else {
          table.style(""display"", ""none"");
        }
      }
    });
  </script>
</body>
</html>
```",Unexpected Initial Result,383,384
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a horizontal Bar Chart that shows Department and Sales Figures, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Department Sales Figures</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      position: relative;
      display: inline-block;
    }
    .minimap {
      position: absolute;
      top: 0;
      right: 0;
      width: 100px;
      height: 300px;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 120, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 300 - margin.top - margin.bottom;
    const minimapWidth = 100;
    const minimapHeight = height;

    const svg = d3.select("".chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right + minimapWidth)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const minimapSvg = svg
      .append(""g"")
      .attr(""transform"", `translate(${width + margin.right}, ${margin.top})`)
      .attr(""class"", ""minimap"");

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Sales Figures""] = +d[""Sales Figures""];
        });

        const departments = [...new Set(data.map(d => d.Department))];

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Sales Figures""])])
          .range([0, width]);

        const yScale = d3.scaleBand()
          .domain(departments)
          .range([0, height])
          .padding(0.2);

        const bars = svg.selectAll(""rect"")
          .data(data.sort((a, b) => b[""Sales Figures""] - a[""Sales Figures""]))
          .enter()
          .append(""rect"")
          .attr(""x"", 0)
          .attr(""y"", d => yScale(d.Department))
          .attr(""width"", d => xScale(d[""Sales Figures""]))
          .attr(""height"", yScale.bandwidth());

        const minimapBars = minimapSvg.selectAll(""rect"")
          .data(data.sort((a, b) => b[""Sales Figures""] - a[""Sales Figures""]))
          .enter()
          .append(""rect"")
          .attr(""x"", 0)
          .attr(""y"", d => yScale(d.Department))
          .attr(""width"", d => xScale(d[""Sales Figures""]) / 8)
          .attr(""height"", yScale.bandwidth());

        const xAxis = d3.axisBottom(xScale)
          .ticks(5)
          .tickFormat(d3.format("".0s""));

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(xAxis);

        const yAxis = d3.axisLeft(yScale);

        svg.append(""g"")
          .call(yAxis);
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,384,385
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Employee Performance Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
    <style>
        #chart-container {
            display: flex;
            width: 100%;
            height: 600px;
        }
        #scatterplot {
            width: 50%;
            height: 100%;
        }
        #barchart {
            width: 50%;
            height: 100%;
        }
    </style>
</head>
<body>
    <div id=""chart-container"">
        <div id=""scatterplot""></div>
        <div id=""barchart""></div>
    </div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const scatterplotData = [];
                const barchartData = [];
                csvData.forEach(row => {
                    const [Year, Department, SalesFigures, HoursWorked, Revenue, Profit, EmployeeSatisfactionScore, NumberOfEmployees] = row.split(',');
                    scatterplotData.push([parseFloat(SalesFigures), parseFloat(Profit)]);
                    barchartData.push({ value: parseFloat(Profit), name: Department });
                });

                const scatterplotChart = echarts.init(document.getElementById('scatterplot'));
                const barchartChart = echarts.init(document.getElementById('barchart'));

                const scatterplotOption = {
                    title: {
                        text: 'Scatterplot of Sales Figures vs Profit'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Sales Figures'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Profit'
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: scatterplotData
                        }
                    ]
                };

                const barchartOption = {
                    title: {
                        text: 'Bar Chart of Profit by Department'
                    },
                    xAxis: {
                        type: 'category',
                        data: barchartData.map(item => item.name)
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Profit'
                    },
                    series: [
                        {
                            type: 'bar',
                            data: barchartData.map(item => item.value)
                        }
                    ]
                };

                scatterplotChart.setOption(scatterplotOption);
                barchartChart.setOption(barchartOption);
            });
    </script>
</body>
</html>
```",Correct,385,386
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Employee Performance Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <style>
        #chart-container {
            display: flex;
            width: 100%;
            height: 600px;
        }
        #scatterplot {
            width: 50%;
            height: 100%;
        }
        #barchart {
            width: 50%;
            height: 100%;
        }
    </style>
</head>
<body>
    <div id=""chart-container"">
        <div id=""scatterplot""></div>
        <div id=""barchart""></div>
    </div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const years = csvData.map(row => row[0]);
                const salesFigures = csvData.map(row => parseFloat(row[2]));
                const revenues = csvData.map(row => parseFloat(row[4]));
                const profits = csvData.map(row => parseFloat(row[5]));

                const scatterplotChart = echarts.init(document.getElementById('scatterplot'));
                const barchartChart = echarts.init(document.getElementById('barchart'));

                const scatterplotOption = {
                    title: {
                        text: 'Scatterplot of Sales Figures vs Revenue'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Sales Figures'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Revenue'
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: salesFigures.map((figure, index) => [figure, revenues[index]]),
                            emphasis: {
                                itemStyle: {
                                    shadowBlur: 10,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            }
                        }
                    ],
                    brush: {
                        id: 'brush',
                        seriesIndex: 'all',
                        brushLink: 'all',
                        toolbox: ['rect', 'polygon', 'lineX', 'lineY', 'keep', 'clear'],
                        inBrush: {
                            opacity: 1
                        },
                        outOfBrush: {
                            opacity: 0.5
                        },
                        throttleType: 'debounce',
                        throttleDelay: 300
                    }
                };

                const barchartOption = {
                    title: {
                        text: 'Bar Chart of Profit'
                    },
                    xAxis: {
                        type: 'category',
                        data: years
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Profit'
                    },
                    series: [
                        {
                            type: 'bar',
                            data: profits
                        }
                    ],
                    brush: {
                        id: 'brush',
                        seriesIndex: 'all',
                        brushLink: 'all',
                        toolbox: ['rect', 'polygon', 'lineX', 'lineY', 'keep', 'clear']
                    }
                };

                scatterplotChart.setOption(scatterplotOption);
                barchartChart.setOption(barchartOption);

                scatterplotChart.on('brushSelected', params => {
                    const selectedData = params.batch[0].areas[0].range;
                    const startIndex = salesFigures.findIndex(figure => figure >= selectedData[0][0]);
                    const endIndex = salesFigures.findIndex(figure => figure >= selectedData[1][0]);
                    const selectedYears = years.slice(startIndex, endIndex + 1);
                    const selectedProfits = profits.slice(startIndex, endIndex + 1);

                    barchartChart.dispatchAction({
                        type: 'highlight',
                        seriesIndex: 0,
                        dataIndex: selectedYears.map(year => years.indexOf(year))
                    });
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,386,387
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Sales Figures , while the pie chart represents the distribution of Hours Worked.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Employee Performance Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px; display: flex; flex-direction: column;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const years = csvData.map(row => row[0]);
                const salesFigures = csvData.map(row => parseFloat(row[2]));
                const hoursWorked = csvData.map(row => parseFloat(row[3]));

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    grid: [
                        { top: '10%', height: '40%' },
                        { top: '60%', height: '40%' }
                    ],
                    yAxis: [
                        { gridIndex: 0, type: 'value' },
                        { gridIndex: 1, type: 'value' }
                    ],
                    series: [
                        {
                            type: 'line',
                            gridIndex: 0,
                            data: salesFigures,
                            xAxisIndex: 0,
                            yAxisIndex: 0
                        },
                        {
                            type: 'pie',
                            gridIndex: 1,
                            data: hoursWorked.map((value, index) => ({ value, name: years[index] })),
                            radius: '60%'
                        }
                    ],
                    xAxis: [
                        { gridIndex: 0, type: 'category', data: years }
                    ]
                });
            });
    </script>
</body>
</html>
```",Initialization Error,387,388
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Sales Figures , while the pie chart represents the distribution of Hours Worked. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Hours Worked for the selected group.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Employee Performance Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72656f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').map(row => row.split(','));
                const years = csvData.slice(1).map(row => row[0]);
                const salesFigures = csvData.slice(1).map(row => parseFloat(row[2]));
                const hoursWorked = csvData.slice(1).map(row => parseFloat(row[3]));

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    grid: [
                        {
                            top: '10%',
                            left: '10%',
                            right: '10%',
                            height: '40%'
                        },
                        {
                            top: '60%',
                            left: '10%',
                            right: '10%',
                            height: '30%'
                        }
                    ],
                    dataZoom: [
                        {
                            type: 'inside',
                            xAxisIndex: [0],
                            start: 0,
                            end: 100
                        },
                        {
                            show: true,
                            xAxisIndex: [0],
                            start: 0,
                            end: 100
                        }
                    ],
                    xAxis: [
                        {
                            type: 'category',
                            gridIndex: 0,
                            data: years
                        },
                        {
                            type: 'category',
                            gridIndex: 1,
                            data: years
                        }
                    ],
                    yAxis: [
                        {
                            type: 'value',
                            gridIndex: 0,
                            name: 'Sales Figures'
                        },
                        {
                            type: 'value',
                            gridIndex: 1,
                            name: 'Hours Worked'
                        }
                    ],
                    series: [
                        {
                            name: 'Sales Figures',
                            type: 'line',
                            xAxisIndex: 0,
                            yAxisIndex: 0,
                            data: salesFigures,
                            brush: {
                                xAxisIndex: 0,
                                brushLink: 'all'
                            }
                        },
                        {
                            name: 'Hours Worked',
                            type: 'pie',
                            xAxisIndex: 1,
                            yAxisIndex: 1,
                            data: hoursWorked.map((value, index) => ({ value, name: years[index] })),
                            radius: '60%',
                            center: ['50%', '50%']
                        }
                    ]
                };

                chart.setOption(option);

                chart.on('brushSelected', params => {
                    const selectedData = params.batch[0].areas[0].dataIndex;
                    const selectedHoursWorked = hoursWorked.slice(selectedData.start, selectedData.end + 1);
                    const selectedYears = years.slice(selectedData.start, selectedData.end + 1);
                    chart.setOption({
                        series: [
                            {
                                name: 'Hours Worked',
                                type: 'pie',
                                data: selectedHoursWorked.map((value, index) => ({ value, name: selectedYears[index] }))
                            }
                        ]
                    });
                });
            });
    </script>
</body>
</html>
```",Initialization Error,388,389
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Sales Figures, Revenue, Profit, Hours Worked, and Employee Satisfaction. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot Matrix</title>
  <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
  <script src=""https://cdn.jsdelivr.net/npm/d3@7.4.4/dist/d3.min.js""></script>
  <style>
    #chart {
      width: 800px;
      height: 600px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div id=""chart""></div>
  <script>
    fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
      .then(response => response.text())
      .then(data => {
        const csvData = d3.csvParse(data);
        const dimensions = ['Sales Figures', 'Revenue', 'Profit', 'Hours Worked', 'Employee Satisfaction Score'];
        const series = [];
        dimensions.forEach((dimension, i) => {
          dimensions.forEach((otherDimension, j) => {
            if (i <= j) {
              series.push({
                type: 'scatter',
                name: `${dimension} vs ${otherDimension}`,
                datasetIndex: i * dimensions.length + j,
                encode: {
                  x: dimension,
                  y: otherDimension,
                  tooltip: dimensions
                }
              });
            }
          });
        });
        const datasets = [];
        dimensions.forEach((dimension, i) => {
          datasets.push({
            id: `dataset_${i}`,
            fromDatasetId: 'dataset_raw',
            transform: [
              {
                type: 'pick',
                dimensions: dimensions
              }
            ]
          });
        });
        const option = {
          tooltip: {
            trigger: 'axis',
            axisPointer: {
              type: 'cross'
            }
          },
          dataset: [
            {
              id: 'dataset_raw',
              source: csvData
            },
            ...datasets
          ],
          xAxis: dimensions.map((dimension, i) => ({
            type: 'value',
            name: dimension,
            id: `xAxis_${i}`,
            nameLocation: 'middle',
            nameGap: 30,
            nameRotate: 45,
            axisLine: {
              onZero: true
            }
          })),
          yAxis: dimensions.map((dimension, i) => ({
            type: 'value',
            name: dimension,
            id: `yAxis_${i}`,
            nameLocation: 'middle',
            nameGap: 30,
            nameRotate: 45,
            axisLine: {
              onZero: true
            }
          })),
          grid: dimensions.map((dimension, i) => ({
            id: `grid_${i}`,
            left: (i % dimensions.length) * 100 + '%',
            top: Math.floor(i / dimensions.length) * 100 + '%',
            width: '80%',
            height: '80%'
          })),
          series: series
        };
        const chart = echarts.init(document.getElementById('chart'));
        chart.setOption(option);
        chart.on('brushSelected', (params) => {
          const selectedData = params.batch[0].areas[0].data;
          const brushComponent = chart.getModel().getComponent('brush');
          brushComponent.clear();
          dimensions.forEach((dimension, i) => {
            dimensions.forEach((otherDimension, j) => {
              if (i <= j) {
                const seriesIndex = i * dimensions.length + j;
                const seriesModel = chart.getModel().getSeriesByIndex(seriesIndex);
                const data = seriesModel.getData();
                const selectedSeriesData = data.filter((item, index) => {
                  return selectedData.some((selectedItem) => {
                    return selectedItem[0] === item[0] && selectedItem[1] === item[1];
                  });
                });
                if (selectedSeriesData.length > 0) {
                  brushComponent.areas.push({
                    id: `brush_${seriesIndex}`,
                    type: 'polygon',
                    coordDimensions: ['x', 'y'],
                    data: selectedSeriesData.map((item) => [item[0], item[1]])
                  });
                }
              }
            });
          });
          chart.setOption({
            brush: brushComponent
          });
        });
      });
  </script>
</body>
</html>
```",Initialization Error,389,390
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a brushable Scatterplot that visualizes the relationship between Sales Figures and Hours Worked. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Brushable Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <div id=""table"" style=""width: 200px; height: 600px; overflow-y: auto; border: 1px solid #ccc; padding: 10px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const chartData = csvData.map(row => [+row[2], +row[3]]);

                const chart = echarts.init(document.getElementById('chart'));
                const table = document.getElementById('table');

                chart.setOption({
                    tooltip: {},
                    xAxis: {
                        type: 'value'
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: chartData,
                            symbolSize: 10,
                            itemStyle: {
                                opacity: 0.8
                            },
                            emphasis: {
                                itemStyle: {
                                    opacity: 1
                                }
                            }
                        }
                    ],
                    brush: {
                        id: 'brush',
                        xAxisIndex: 0,
                        yAxisIndex: 0,
                        brushLink: 'all',
                        outOfBrush: {
                            colorAlpha: 0.1
                        },
                        brushStyle: {
                            borderWidth: 2,
                            borderColor: 'rgba(0,0,0,0.5)',
                            brushType: 'rect'
                        },
                        throttleType: 'fixRate',
                        throttleDelay: 300
                    },
                    dataZoom: [
                        {
                            type: 'inside',
                            id: 'dataZoom',
                            xAxisIndex: 0,
                            filterMode: 'filter'
                        }
                    ]
                });

                chart.on('brushSelected', params => {
                    const selectedData = params.batch[0].areas[0].data;
                    const tableHtml = selectedData.slice(0, 20).map((row, index) => {
                        const originalRow = csvData.find(rowData => rowData[2] === row[0].toString() && rowData[3] === row[1].toString());
                        return `
                            <tr>
                                <td>${index + 1}</td>
                                <td>${originalRow[0]}</td>
                                <td>${originalRow[1]}</td>
                                <td>${originalRow[2]}</td>
                                <td>${originalRow[3]}</td>
                                <td>${originalRow[4]}</td>
                                <td>${originalRow[5]}</td>
                                <td>${originalRow[6]}</td>
                                <td>${originalRow[7]}</td>
                            </tr>
                        `;
                    }).join('');
                    table.innerHTML = `
                        <table>
                            <tr>
                                <th>No.</th>
                                <th>Year</th>
                                <th>Department</th>
                                <th>Sales Figures</th>
                                <th>Hours Worked</th>
                                <th>Revenue</th>
                                <th>Profit</th>
                                <th>Employee Satisfaction Score</th>
                                <th>Number of Employees</th>
                            </tr>
                            ${tableHtml}
                        </table>
                    `;
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,390,391
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a horizontal Bar Chart that shows Department and Sales Figures, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Employee Performance</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f28f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const departments = [];
                const salesFigures = [];
                csvData.forEach(row => {
                    const [year, department, salesFigure, hoursWorked, revenue, profit, employeeSatisfactionScore, numberOfEmployees] = row.split(',');
                    departments.push(department);
                    salesFigures.push(Number(salesFigure.replace(/""/g, '')));
                });
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'value',
                        position: 'top'
                    },
                    yAxis: {
                        type: 'category',
                        data: departments,
                        axisLine: {
                            show: false
                        },
                        axisTick: {
                            show: false
                        }
                    },
                    series: [
                        {
                            name: 'Sales Figures',
                            type: 'bar',
                            data: salesFigures,
                            label: {
                                show: true,
                                position: 'right',
                                valueAnimation: true
                            }
                        }
                    ],
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 100
                        },
                        {
                            show: true,
                            type: 'slider',
                            start: 0,
                            end: 100,
                            filterMode: 'filter'
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Initialization Error,391,392
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Employee Performance Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: row;
    }
  </style>
</head>
<body>
  <div id=""vis"">
    <div id=""scatterplot""></div>
    <div id=""barchart""></div>
  </div>

  <script>
    const scatterplotSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Hours Worked"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Profit"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Department"", ""type"": ""nominal""}
      }
    };

    const barchartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"" },
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Department"", ""type"": ""nominal""},
        ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Department"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#scatterplot"", scatterplotSpec);
    vegaEmbed(""#barchart"", barchartSpec);
  </script>
</body>
</html>
```",Correct,392,393
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Employee Performance Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: row;
    }
    #scatterplot, #barchart {
      width: 50%;
    }
  </style>
</head>
<body>
  <div id=""vis"">
    <div id=""scatterplot""></div>
    <div id=""barchart""></div>
  </div>

  <script>
    const scatterplotSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Sales Figures"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Profit"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Department"", ""type"": ""nominal""}
      },
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x"", ""y""]}
      }
    };

    const barchartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"" },
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Department"", ""type"": ""nominal""},
        ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Department"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#scatterplot"", scatterplotSpec, { ""actions"": false })
      .then(result => {
        const scatterplotView = result.view;
        vegaEmbed(""#barchart"", barchartSpec, { ""actions"": false })
          .then(result => {
            const barchartView = result.view;
            scatterplotView.addSignalListener(""brush"", (name, value) => {
              if (value) {
                const filter = `datum[""Sales Figures""] >= ${value[0][0]} && datum[""Sales Figures""] <= ${value[1][0]} && datum[""Profit""] >= ${value[0][1]} && datum[""Profit""] <= ${value[1][1]}`;
                barchartView.signal(""brush"", filter);
                barchartView.run();
              } else {
                barchartView.signal(""brush"", null);
                barchartView.run();
              }
            });
          });
      });
  </script>
</body>
</html>
```",Unexpected Execution Result,393,394
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Sales Figures , while the pie chart represents the distribution of Hours Worked.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Employee Performance Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
  </style>
</head>
<body>
  <div id=""vis"">
    <div id=""line-chart""></div>
    <div id=""pie-chart""></div>
  </div>

  <script>
    const lineChartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"" },
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {""field"": ""Year"", ""type"": ""temporal""},
        ""y"": {""field"": ""Sales Figures"", ""type"": ""quantitative""}
      }
    };

    const pieChartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"" },
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Hours Worked"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Department"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#line-chart"", lineChartSpec);
    vegaEmbed(""#pie-chart"", pieChartSpec);
  </script>
</body>
</html>
```",Correct,394,395
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Sales Figures , while the pie chart represents the distribution of Hours Worked. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Hours Worked for the selected group.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Employee Performance Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: column;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""vconcat"": [
        {
          ""mark"": ""line"",
          ""encoding"": {
            ""x"": {""field"": ""Year"", ""type"": ""nominal""},
            ""y"": {""field"": ""Sales Figures"", ""type"": ""quantitative""},
            ""tooltip"": [
              {""field"": ""Year"", ""type"": ""nominal""},
              {""field"": ""Sales Figures"", ""type"": ""quantitative""}
            ]
          },
          ""selection"": {
            ""brush"": {""type"": ""interval"", ""encodings"": [""x""]}
          }
        },
        {
          ""mark"": ""arc"",
          ""encoding"": {
            ""theta"": {""field"": ""Hours Worked"", ""type"": ""quantitative"", ""aggregate"": ""sum""},
            ""color"": {""field"": ""Department"", ""type"": ""nominal""}
          },
          ""transform"": [
            {""filter"": {""selection"": ""brush""}}
          ]
        }
      ]
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Execution Result,395,396
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Sales Figures, Revenue, Profit, Hours Worked, and Employee Satisfaction. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Scatterplot Matrix</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to our embed */
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Sales Figures !== null && datum.Revenue !== null && datum.Profit !== null && datum.`Hours Worked` !== null && datum.`Employee Satisfaction Score` !== null""}
      ],
      ""spacing"": 50,
      ""vconcat"": [
        {
          ""mark"": ""point"",
          ""selection"": {
            ""brush"": {
              ""type"": ""interval"",
              ""encodings"": [""x"", ""y""],
              ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
              ""translate"": ""[mousedown[!event.shiftKey], mouseup ] > mousemove!"",
              ""zoom"": ""![event.shiftKey]""
            }
          },
          ""encoding"": {
            ""x"": {""field"": ""Sales Figures"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
            ""color"": {
              ""condition"": {
                ""test"": ""brush"",
                ""field"": ""Sales Figures"",
                ""type"": ""quantitative""
              },
              ""value"": ""grey""
            }
          }
        },
        {
          ""mark"": ""point"",
          ""selection"": {
            ""brush"": {
              ""type"": ""interval"",
              ""encodings"": [""x"", ""y""],
              ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
              ""translate"": ""[mousedown[!event.shiftKey], mouseup ] > mousemove!"",
              ""zoom"": ""![event.shiftKey]""
            }
          },
          ""encoding"": {
            ""x"": {""field"": ""Sales Figures"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Profit"", ""type"": ""quantitative""},
            ""color"": {
              ""condition"": {
                ""test"": ""brush"",
                ""field"": ""Sales Figures"",
                ""type"": ""quantitative""
              },
              ""value"": ""grey""
            }
          }
        },
        {
          ""mark"": ""point"",
          ""selection"": {
            ""brush"": {
              ""type"": ""interval"",
              ""encodings"": [""x"", ""y""],
              ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
              ""translate"": ""[mousedown[!event.shiftKey], mouseup ] > mousemove!"",
              ""zoom"": ""![event.shiftKey]""
            }
          },
          ""encoding"": {
            ""x"": {""field"": ""Sales Figures"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Hours Worked"", ""type"": ""quantitative""},
            ""color"": {
              ""condition"": {
                ""test"": ""brush"",
                ""field"": ""Sales Figures"",
                ""type"": ""quantitative""
              },
              ""value"": ""grey""
            }
          }
        },
        {
          ""mark"": ""point"",
          ""selection"": {
            ""brush"": {
              ""type"": ""interval"",
              ""encodings"": [""x"", ""y""],
              ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
              ""translate"": ""[mousedown[!event.shiftKey], mouseup ] > mousemove!"",
              ""zoom"": ""![event.shiftKey]""
            }
          },
          ""encoding"": {
            ""x"": {""field"": ""Sales Figures"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Employee Satisfaction Score"", ""type"": ""quantitative""},
            ""color"": {
              ""condition"": {
                ""test"": ""brush"",
                ""field"": ""Sales Figures"",
                ""type"": ""quantitative""
              },
              ""value"": ""grey""
            }
          }
        },
        {
          ""mark"": ""point"",
          ""selection"": {
            ""brush"": {
              ""type"": ""interval"",
              ""encodings"": [""x"", ""y""],
              ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
              ""translate"": ""[mousedown[!event.shiftKey], mouseup ] > mousemove!"",
              ""zoom"": ""![event.shiftKey]""
            }
          },
          ""encoding"": {
            ""x"": {""field"": ""Revenue"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Profit"", ""type"": ""quantitative""},
            ""color"": {
              ""condition"": {
                ""test"": ""brush"",
                ""field"": ""Revenue"",
                ""type"": ""quantitative""
              },
              ""value"": ""grey""
            }
          }
        },
        {
          ""mark"": ""point"",
          ""selection"": {
            ""brush"": {
              ""type"": ""interval"",
              ""encodings"": [""x"", ""y""],
              ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
              ""translate"": ""[mousedown[!event.shiftKey], mouseup ] > mousemove!"",
              ""zoom"": ""![event.shiftKey]""
            }
          },
          ""encoding"": {
            ""x"": {""field"": ""Revenue"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Hours Worked"", ""type"": ""quantitative""},
            ""color"": {
              ""condition"": {
                ""test"": ""brush"",
                ""field"": ""Revenue"",
                ""type"": ""quantitative""
              },
              ""value"": ""grey""
            }
          }
        },
        {
          ""mark"": ""point"",
          ""selection"": {
            ""brush"": {
              ""type"": ""interval"",
              ""encodings"": [""x"", ""y""],
              ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
              ""translate"": ""[mousedown[!event.shiftKey], mouseup ] > mousemove!"",
              ""zoom"": ""![event.shiftKey]""
            }
          },
          ""encoding"": {
            ""x"": {""field"": ""Revenue"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Employee Satisfaction Score"", ""type"": ""quantitative""},
            ""color"": {
              ""condition"": {
                ""test"": ""brush"",
                ""field"": ""Revenue"",
                ""type"": ""quantitative""
              },
              ""value"": ""grey""
            }
          }
        },
        {
          ""mark"": ""point"",
          ""selection"": {
            ""brush"": {
              ""type"": ""interval"",
              ""encodings"": [""x"", ""y""],
              ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
              ""translate"": ""[mousedown[!event.shiftKey], mouseup ] > mousemove!"",
              ""zoom"": ""![event.shiftKey]""
            }
          },
          ""encoding"": {
            ""x"": {""field"": ""Profit"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Hours Worked"", ""type"": ""quantitative""},
            ""color"": {
              ""condition"": {
                ""test"": ""brush"",
                ""field"": ""Profit"",
                ""type"": ""quantitative""
              },
              ""value"": ""grey""
            }
          }
        },
        {
          ""mark"": ""point"",
          ""selection"": {
            ""brush"": {
              ""type"": ""interval"",
              ""encodings"": [""x"", ""y""],
              ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
              ""translate"": ""[mousedown[!event.shiftKey], mouseup ] > mousemove!"",
              ""zoom"": ""![event.shiftKey]""
            }
          },
          ""encoding"": {
            ""x"": {""field"": ""Profit"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Employee Satisfaction Score"", ""type"": ""quantitative""},
            ""color"": {
              ""condition"": {
                ""test"": ""brush"",
                ""field"": ""Profit"",
                ""type"": ""quantitative""
              },
              ""value"": ""grey""
            }
          }
        },
        {
          ""mark"": ""point"",
          ""selection"": {
            ""brush"": {
              ""type"": ""interval"",
              ""encodings"": [""x"", ""y""],
              ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
              ""translate"": ""[mousedown[!event.shiftKey], mouseup ] > mousemove!"",
              ""zoom"": ""![event.shiftKey]""
            }
          },
          ""encoding"": {
            ""x"": {""field"": ""Hours Worked"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Employee Satisfaction Score"", ""type"": ""quantitative""},
            ""color"": {
              ""condition"": {
                ""test"": ""brush"",
                ""field"": ""Hours Worked"",
                ""type"": ""quantitative""
              },
              ""value"": ""grey""
            }
          }
        }
      ]
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Initialization Error,396,397
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a brushable Scatterplot that visualizes the relationship between Sales Figures and Hours Worked. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Brushable Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 600,
      ""height"": 400,
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Sales Figures"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Hours Worked"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Year"", ""type"": ""nominal""},
          {""field"": ""Department"", ""type"": ""nominal""},
          {""field"": ""Revenue"", ""type"": ""quantitative""},
          {""field"": ""Profit"", ""type"": ""quantitative""},
          {""field"": ""Employee Satisfaction Score"", ""type"": ""quantitative""},
          {""field"": ""Number of Employees"", ""type"": ""quantitative""}
        ]
      },
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x"", ""y""]}
      }
    };

    const spec2 = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 200,
      ""height"": 400,
      ""data"": {
        ""name"": ""brushed_data""
      },
      ""mark"": ""table"",
      ""encoding"": {
        ""x"": {""field"": ""Sales Figures"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Hours Worked"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Year"", ""type"": ""nominal""},
          {""field"": ""Department"", ""type"": ""nominal""},
          {""field"": ""Revenue"", ""type"": ""quantitative""},
          {""field"": ""Profit"", ""type"": ""quantitative""},
          {""field"": ""Employee Satisfaction Score"", ""type"": ""quantitative""},
          {""field"": ""Number of Employees"", ""type"": ""quantitative""}
        ]
      }
    };

    vegaEmbed(""#vis"", {
      ""mode"": ""vega-lite"",
      ""spec"": spec,
      ""actions"": false
    }).then(function(result) {
      const view = result.view;
      const runtime = view.runtime;
      const brush = runtime.getMark(""brush"");
      const table = vegaEmbed(""#vis"", {
        ""mode"": ""vega-lite"",
        ""spec"": spec2,
        ""actions"": false
      }).then(function(result) {
        const tableView = result.view;
        const tableRuntime = tableView.runtime;
        const tableData = tableRuntime.data(""brushed_data"");
        brush.on(""brush"", function(event, item) {
          const brushedData = view.data(""source_0"").items().filter(function(d) {
            return item[0] <= d[""Sales Figures""] && d[""Sales Figures""] <= item[2] && item[1] <= d[""Hours Worked""] && d[""Hours Worked""] <= item[3];
          }).slice(0, 20);
          tableData.change(vega.changeset().remove(vega.truthy).insert(brushedData));
        });
      });
    });
  </script>
</body>
</html>
```",Initialization Error,397,398
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a horizontal Bar Chart that shows Department and Sales Figures, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Department Sales Figures Bar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: row;
    }
    #main {
      width: 80%;
    }
    #minimap {
      width: 20%;
    }
  </style>
</head>
<body>
  <div id=""vis"">
    <div id=""main""></div>
    <div id=""minimap""></div>
  </div>

  <script>
    const mainSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"" },
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Sales Figures"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Department"", ""type"": ""nominal""},
        ""color"": {""field"": ""Department"", ""type"": ""nominal""}
      }
    };

    const minimapSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"" },
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Sales Figures"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Department"", ""type"": ""nominal""},
        ""color"": {""field"": ""Department"", ""type"": ""nominal""}
      },
      ""width"": 100,
      ""height"": 200
    };

    vegaEmbed(""#main"", mainSpec);
    vegaEmbed(""#minimap"", minimapSpec);
  </script>
</body>
</html>
```",Unexpected Initial Result,398,399
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot that visualizes the relationship between Sales Figures and Hours Worked.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Sales Figures vs Hours Worked</title>
  <style>
    /* set the dimensions and margins of the graph */
    #chart {
      width: 800px;
      height: 600px;
      border: 1px solid black;
    }
  </style>
</head>
<body>
  <svg id=""chart""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    // set the dimensions and margins of the graph
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 700 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    // append the svg object to the body of the page
    const svg = d3.select(""#chart"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    // Read the data
    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
      // Convert data types
      data.forEach(d => {
        d['Sales Figures'] = +d['Sales Figures'];
        d['Hours Worked'] = +d['Hours Worked'];
      });

      // Add X axis
      const x = d3.scaleLinear()
        .domain([0, d3.max(data, d => d['Hours Worked'])])
        .range([0, width]);
      svg.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(x))
        .append(""text"")
        .attr(""y"", 30)
        .attr(""x"", width / 2)
        .attr(""text-anchor"", ""middle"")
        .text(""Hours Worked"");

      // Add Y axis
      const y = d3.scaleLinear()
        .domain([0, d3.max(data, d => d['Sales Figures'])])
        .range([height, 0]);
      svg.append(""g"")
        .call(d3.axisLeft(y))
        .append(""text"")
        .attr(""transform"", ""rotate(-90)"")
        .attr(""y"", -40)
        .attr(""x"", -height / 2)
        .attr(""text-anchor"", ""middle"")
        .text(""Sales Figures"");

      // Add dots
      svg.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => x(d['Hours Worked']))
        .attr(""cy"", d => y(d['Sales Figures']))
        .attr(""r"", 5)
        .style(""fill"", ""blue"");
    });
  </script>
</body>
</html>
```",Correct,399,400
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Line Chart that visualizes the trend of Sales Figures over the Year for each Department.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Sales Figures Trend</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 40px;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a9d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Year""] = +d[""Year""];
          d[""Sales Figures""] = +d[""Sales Figures""];
        });

        const departments = [...new Set(data.map(d => d.Department))];

        const xScale = d3.scaleLinear()
          .domain(d3.extent(data, d => d[""Year""]))
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Sales Figures""])])
          .range([height, 0]);

        const line = d3.line()
          .x(d => xScale(d[""Year""]))
          .y(d => yScale(d[""Sales Figures""]));

        departments.forEach(department => {
          const departmentData = data.filter(d => d.Department === department);

          svg.append(""path"")
            .datum(departmentData)
            .attr(""fill"", ""none"")
            .attr(""stroke"", ""steelblue"")
            .attr(""stroke-width"", 1.5)
            .attr(""d"", line)
            .attr(""opacity"", 0.7);
        });

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        svg.append(""text"")
          .attr(""transform"", `translate(${width / 2}, ${height + margin.bottom - 5})`)
          .attr(""text-anchor"", ""middle"")
          .text(""Year"");

        svg.append(""text"")
          .attr(""transform"", `rotate(-90) translate(${-height / 2}, ${-margin.left + 15})`)
          .attr(""text-anchor"", ""middle"")
          .text(""Sales Figures"");
      });
  </script>
</body>
</html>
```",Initialization Error,400,401
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Bar Chart that visualizes the Sales Figures for each Department in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Sales Figures by Department in 2020</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .bar {
      fill: steelblue;
    }
    .bar:hover {
      fill: brown;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Year""] = +d[""Year""];
          d[""Sales Figures""] = +d[""Sales Figures""];
        });

        const data2020 = data.filter(d => d[""Year""] === 2020);

        const departments = [...new Set(data2020.map(d => d[""Department""]))];

        const xScale = d3.scaleBand()
          .domain(departments)
          .range([0, width])
          .padding(0.2);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data2020, d => d[""Sales Figures""])])
          .range([height, 0]);

        svg.selectAll(""rect"")
          .data(data2020)
          .enter()
          .append(""rect"")
          .attr(""class"", ""bar"")
          .attr(""x"", d => xScale(d[""Department""]))
          .attr(""y"", d => yScale(d[""Sales Figures""]))
          .attr(""width"", xScale.bandwidth())
          .attr(""height"", d => height - yScale(d[""Sales Figures""]));

        const xAxis = d3.axisBottom(xScale);
        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(xAxis);

        const yAxis = d3.axisLeft(yScale);
        svg.append(""g"")
          .call(yAxis);
      });
  </script>
</body>
</html>
```",Initialization Error,401,402
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Pie Chart that visualizes the proportion of Sales Figures contributed by each Department in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Sales Figures by Department in 2020</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    #chart {
      width: 500px;
      height: 500px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 20, left: 20 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Year""] = +d[""Year""];
          d[""Sales Figures""] = +d[""Sales Figures""];
        });

        const filteredData = data.filter(d => d[""Year""] === 2020);

        const departments = Array.from(new Set(filteredData.map(d => d[""Department""])));

        const pie = d3.pie()
          .value(d => d[""Sales Figures""]);

        const arcs = svg.selectAll(""arc"")
          .data(pie(filteredData))
          .enter()
          .append(""g"")
          .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        arcs.append(""path"")
          .attr(""d"", d3.arc()
            .innerRadius(0)
            .outerRadius(Math.min(width, height) / 2 - 20)
          )
          .attr(""fill"", (d, i) => d3.schemeCategory10[i % 10]);

        arcs.append(""text"")
          .attr(""transform"", d => `translate(${d3.arc().innerRadius(0).outerRadius(Math.min(width, height) / 2 - 20).centroid(d)})`)
          .attr(""text-anchor"", ""middle"")
          .text(d => departments.find(department => filteredData.find(fd => fd[""Department""] === department)[""Sales Figures""] === d.value));

        svg.append(""text"")
          .attr(""x"", width / 2)
          .attr(""y"", -20)
          .attr(""text-anchor"", ""middle"")
          .text(""Sales Figures by Department in 2020"");
      });
  </script>
</body>
</html>
```",Correct,402,403
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Donut Chart that visualizes the distribution of Sales Figures among Department in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Donut Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 500px;
      height: 500px;
      margin: 50px auto;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;
    const radius = Math.min(width, height) / 2;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${width / 2 + margin.left}, ${height / 2 + margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Year""] = +d[""Year""];
          d[""Sales Figures""] = +d[""Sales Figures""];
        });

        const filteredData = data.filter(d => d[""Year""] === 2020);

        const pie = d3.pie()
          .value(d => d[""Sales Figures""]);

        const arc = d3.arc()
          .outerRadius(radius - 10)
          .innerRadius(radius - 100);

        const arcs = svg.selectAll(""arc"")
          .data(pie(filteredData))
          .enter()
          .append(""g"")
          .attr(""class"", ""arc"");

        arcs.append(""path"")
          .attr(""d"", arc)
          .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

        arcs.append(""text"")
          .attr(""transform"", d => `translate(${arc.centroid(d)})`)
          .attr(""dy"", ""0.35em"")
          .text(d => d.data[""Department""]);
      });
  </script>
</body>
</html>
```",Correct,403,404
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Coxcomb Chart(polar area chart) to compare the Sales Figures of different Department in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coxcomb Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 600px;
      height: 600px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 20, left: 20 };
    const width = 600 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('.chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
      .then(data => {
        data = data.filter(d => d.Year === '2020');

        const departments = [...new Set(data.map(d => d.Department))];

        const angles = departments.map((_, i) => i * (360 / departments.length));

        const radiusScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => +d['Sales Figures'])])
          .range([0, Math.min(width, height) / 2]);

        const line = d3.lineRadial()
          .radius(d => radiusScale(d.value))
          .angle((d, i) => angles[i]);

        const arcs = svg.selectAll('path')
          .data(data.filter(d => d.Department === departments[0]))
          .enter()
          .append('path')
          .datum(data.filter(d => d.Department === departments[0]))
          .attr('d', line)
          .attr('fill', 'none')
          .attr('stroke', 'black')
          .attr('stroke-width', 1);

        departments.forEach((department, i) => {
          const departmentData = data.filter(d => d.Department === department);
          const departmentAngles = angles.map((angle, j) => angle + (360 / departments.length) * j);

          const departmentLine = d3.lineRadial()
            .radius(d => radiusScale(d.value))
            .angle((d, j) => departmentAngles[j]);

          svg.append('path')
            .datum(departmentData)
            .attr('d', departmentLine)
            .attr('fill', 'none')
            .attr('stroke', 'black')
            .attr('stroke-width', 1)
            .attr('transform', `rotate(${angles[i]})`);
        });

        const labels = svg.selectAll('text')
          .data(departments)
          .enter()
          .append('text')
          .attr('x', (d, i) => Math.cos(angles[i] * Math.PI / 180) * (width / 2 + 20))
          .attr('y', (d, i) => Math.sin(angles[i] * Math.PI / 180) * (height / 2 + 20))
          .attr('text-anchor', 'middle')
          .attr('dominant-baseline', 'middle')
          .text(d => d);
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,404,405
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Radar Chart to compare the Sales Figures of different Department in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Radar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg width=""600"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 600 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;
    const svg = d3.select(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Year""] = +d[""Year""];
          d[""Sales Figures""] = +d[""Sales Figures""];
        });

        const departments = [...new Set(data.filter(d => d[""Year""] === 2020).map(d => d[""Department""]))];

        const angles = departments.map((d, i) => i * (2 * Math.PI / departments.length));

        const radius = Math.min(width, height) / 2 - 50;

        const radarLine = d3.lineRadial()
          .angle(d => d.angle)
          .radius(d => d.radius)
          .curve(d3.curveLinearClosed);

        const maxSales = d3.max(data.filter(d => d[""Year""] === 2020), d => d[""Sales Figures""]);

        const salesData = departments.map(d => {
          const sales = data.find(department => department[""Department""] === d && department[""Year""] === 2020)[""Sales Figures""];
          return {
            angle: angles[departments.indexOf(d)],
            radius: radius * sales / maxSales
          };
        });

        svg.append(""path"")
          .datum(salesData)
          .attr(""d"", radarLine)
          .attr(""stroke"", ""steelblue"")
          .attr(""stroke-width"", 2)
          .attr(""fill"", ""steelblue"")
          .attr(""fill-opacity"", 0.2);

        svg.selectAll(""circle"")
          .data(salesData)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => d.radius * Math.cos(d.angle))
          .attr(""cy"", d => d.radius * Math.sin(d.angle))
          .attr(""r"", 5)
          .attr(""fill"", ""steelblue"");

        svg.selectAll(""text"")
          .data(departments)
          .enter()
          .append(""text"")
          .attr(""x"", (d, i) => radius * 1.1 * Math.cos(angles[i]))
          .attr(""y"", (d, i) => radius * 1.1 * Math.sin(angles[i]))
          .text(d => d)
          .attr(""text-anchor"", (d, i) => angles[i] > Math.PI ? ""end"" : ""start"")
          .attr(""dominant-baseline"", ""middle"")
          .attr(""font-size"", 12);

        svg.append(""circle"")
          .attr(""cx"", 0)
          .attr(""cy"", 0)
          .attr(""r"", radius)
          .attr(""stroke"", ""lightgray"")
          .attr(""stroke-width"", 1)
          .attr(""fill"", ""none"");

        svg.append(""circle"")
          .attr(""cx"", 0)
          .attr(""cy"", 0)
          .attr(""r"", radius * 0.5)
          .attr(""stroke"", ""lightgray"")
          .attr(""stroke-width"", 1)
          .attr(""fill"", ""none"");

        svg.append(""circle"")
          .attr(""cx"", 0)
          .attr(""cy"", 0)
          .attr(""r"", radius * 0.25)
          .attr(""stroke"", ""lightgray"")
          .attr(""stroke-width"", 1)
          .attr(""fill"", ""none"");
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,405,406
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Streamgraph that visualizes the changes of Sales Figures over the Year for each Department.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Streamgraph</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 800px;
      height: 600px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
      data.forEach(d => {
        d[""Year""] = +d[""Year""];
        d[""Sales Figures""] = +d[""Sales Figures""];
      });

      const departments = Array.from(new Set(data.map(d => d.Department)));
      const years = Array.from(new Set(data.map(d => d[""Year""]))).sort((a, b) => a - b);

      const xScale = d3.scalePoint()
        .domain(years)
        .range([0, width])
        .padding(0.5);

      const yScale = d3.scaleLinear()
        .range([height, 0]);

      const zScale = d3.scaleOrdinal(d3.schemeCategory10)
        .domain(departments);

      const stack = d3.stack()
        .keys(departments)
        .value((d, key) => {
          const value = data.find(v => v.Department === key && v[""Year""] === d);
          return value ? value[""Sales Figures""] : 0;
        })
        .order(d3.stackOrderNone)
        .offset(d3.stackOffsetExpand);

      const series = stack(years.map(year => ({ Year: year })));

      yScale.domain([0, d3.max(series, d => d3.max(d, d => d[1]))]).nice();

      svg.selectAll(""path"")
        .data(series)
        .enter()
        .append(""path"")
        .attr(""d"", d3.line()
          .x((d, i) => xScale(d.data.Year))
          .y0(d => yScale(d[0]))
          .y1(d => yScale(d[1]))
        )
        .attr(""fill"", (d, i) => zScale(departments[i]))
        .attr(""stroke"", ""none"");

      svg.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

      svg.append(""g"")
        .call(d3.axisLeft(yScale));

      svg.append(""g"")
        .selectAll(""text"")
        .data(departments)
        .enter()
        .append(""text"")
        .attr(""x"", width + 10)
        .attr(""y"", (d, i) => height - i * 20)
        .attr(""fill"", d => zScale(d))
        .text(d => d);
    });
  </script>
</body>
</html>
```",Unexpected Initial Result,406,407
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Slopegraph to compare the Sales Figures between 2019 and 2020 for each Department.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Slopegraph</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .slopegraph {
      width: 800px;
      height: 600px;
      margin: 50px auto;
    }
    .slopegraph .line {
      stroke: #ccc;
      stroke-width: 1.5px;
    }
    .slopegraph .circle {
      fill: #fff;
      stroke: #ccc;
      stroke-width: 1.5px;
    }
    .slopegraph .label {
      font-size: 12px;
      text-anchor: middle;
    }
  </style>
</head>
<body>
  <svg class=""slopegraph""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('.slopegraph')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
      .then(data => {
        data.forEach(d => {
          d['Year'] = +d['Year'];
          d['Sales Figures'] = +d['Sales Figures'];
        });

        const departments = Array.from(new Set(data.map(d => d.Department)));
        const years = Array.from(new Set(data.map(d => d['Year'])));

        const xScale = d3.scalePoint()
          .domain(years)
          .range([0, width])
          .padding(0.5);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Sales Figures'])])
          .range([height, 0]);

        const lines = svg.selectAll('.line')
          .data(departments)
          .enter()
          .append('line')
          .attr('class', 'line')
          .attr('x1', d => xScale(2019))
          .attr('y1', d => yScale(data.find(e => e.Department === d && e['Year'] === 2019)['Sales Figures']))
          .attr('x2', d => xScale(2020))
          .attr('y2', d => yScale(data.find(e => e.Department === d && e['Year'] === 2020)['Sales Figures']));

        const circles = svg.selectAll('.circle')
          .data(departments)
          .enter()
          .append('g')
          .selectAll('.circle')
          .data(d => [2019, 2020])
          .enter()
          .append('circle')
          .attr('class', 'circle')
          .attr('cx', (d, i) => xScale(d))
          .attr('cy', (d, i, j) => yScale(data.find(e => e.Department === departments[j] && e['Year'] === d)['Sales Figures']))
          .attr('r', 5);

        const labels = svg.selectAll('.label')
          .data(departments)
          .enter()
          .append('g')
          .selectAll('.label')
          .data(d => [2019, 2020])
          .enter()
          .append('text')
          .attr('class', 'label')
          .attr('x', (d, i) => xScale(d))
          .attr('y', (d, i, j) => yScale(data.find(e => e.Department === departments[j] && e['Year'] === d)['Sales Figures']) + 10)
          .text((d, i, j) => `${departments[j]}: ${data.find(e => e.Department === departments[j] && e['Year'] === d)['Sales Figures']}`);

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append('g')
          .call(d3.axisLeft(yScale));
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,407,408
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Heatmap that visualizes the Sales Figures across Department and Years.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Sales Figures Heatmap</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .tooltip {
      position: absolute;
      padding: 10px;
      font-size: 12px;
      background-color: #fff;
      border: 1px solid #ddd;
      border-radius: 5px;
      pointer-events: none;
    }
  </style>
</head>
<body>
  <div id=""heatmap""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 100, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""#heatmap"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Sales Figures""] = +d[""Sales Figures""];
          d.Year = +d.Year;
        });

        const departments = [...new Set(data.map(d => d.Department))];
        const years = [...new Set(data.map(d => d.Year))];

        const xScale = d3.scaleBand()
          .domain(years)
          .range([0, width])
          .padding(0.1);

        const yScale = d3.scaleBand()
          .domain(departments)
          .range([height, 0])
          .padding(0.1);

        const colorScale = d3.scaleSequential()
          .domain([0, d3.max(data, d => d[""Sales Figures""])])
          .interpolator(d3.interpolateBlues);

        const heatmap = svg.selectAll(""rect"")
          .data(data)
          .enter()
          .append(""rect"")
          .attr(""x"", d => xScale(d.Year))
          .attr(""y"", d => yScale(d.Department))
          .attr(""width"", xScale.bandwidth())
          .attr(""height"", yScale.bandwidth())
          .attr(""fill"", d => colorScale(d[""Sales Figures""]));

        const tooltip = d3.select(""body"")
          .append(""div"")
          .attr(""class"", ""tooltip"")
          .style(""opacity"", 0);

        heatmap.on(""mouseover"", (event, d) => {
          tooltip.transition()
            .duration(200)
            .style(""opacity"", 1);
          tooltip.html(`Department: ${d.Department}<br>Year: ${d.Year}<br>Sales Figures: ${d[""Sales Figures""]}`)
            .style(""left"", (event.pageX) + ""px"")
            .style(""top"", (event.pageY - 28) + ""px"");
        })
        .on(""mouseout"", () => {
          tooltip.transition()
            .duration(500)
            .style(""opacity"", 0);
        });

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        svg.append(""text"")
          .attr(""transform"", `translate(${width / 2}, ${height + margin.bottom - 10})`)
          .attr(""text-anchor"", ""middle"")
          .text(""Year"");

        svg.append(""text"")
          .attr(""transform"", `rotate(-90) translate(${-height / 2}, ${-margin.left + 20})`)
          .attr(""text-anchor"", ""middle"")
          .text(""Department"");
      });
  </script>
</body>
</html>
```",Correct,408,409
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Stacked Bar Chart</title>
  <style>
    .chart {
      width: 800px;
      height: 600px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
      data.forEach(d => {
        d[""Sales Figures""] = +d[""Sales Figures""];
        d[""Hours Worked""] = +d[""Hours Worked""];
        d[""Revenue""] = +d[""Revenue""];
        d[""Profit""] = +d[""Profit""];
        d[""Employee Satisfaction Score""] = +d[""Employee Satisfaction Score""];
        d[""Number of Employees""] = +d[""Number of Employees""];
      });

      const keys = [""Sales Figures"", ""Hours Worked"", ""Revenue"", ""Profit"", ""Employee Satisfaction Score"", ""Number of Employees""];
      const stackedData = d3.stack().keys(keys)(data);

      const xScale = d3.scaleBand()
        .domain(data.map(d => d.Department))
        .range([0, width])
        .padding(0.2);

      const yScale = d3.scaleLinear()
        .domain([0, d3.max(stackedData[stackedData.length - 1], d => d[1])])
        .range([height, 0]);

      svg.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

      svg.append(""g"")
        .call(d3.axisLeft(yScale));

      const groups = svg.selectAll(""g.layer"")
        .data(stackedData)
        .enter()
        .append(""g"")
        .attr(""class"", ""layer"");

      groups.selectAll(""rect"")
        .data(d => d)
        .enter()
        .append(""rect"")
        .attr(""x"", d => xScale(d.data.Department))
        .attr(""y"", d => yScale(d[1]))
        .attr(""width"", xScale.bandwidth())
        .attr(""height"", d => yScale(d[0]) - yScale(d[1]))
        .attr(""fill"", (d, i) => d3.schemeCategory10[i]);
    });
  </script>
</body>
</html>
```",Unexpected Initial Result,409,410
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Horizontal Bar Chart that visualizes the Sales Figures for each Department in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Sales Figures by Department in 2020</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 40px;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 300 - margin.top - margin.bottom;

    const svg = d3.select("".chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Year""] = +d[""Year""];
          d[""Sales Figures""] = +d[""Sales Figures""];
        });

        const filteredData = data.filter(d => d[""Year""] === 2020);

        const departments = [...new Set(filteredData.map(d => d[""Department""]))];

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(filteredData, d => d[""Sales Figures""])])
          .range([0, width]);

        const yScale = d3.scaleBand()
          .domain(departments)
          .range([height, 0])
          .padding(0.2);

        svg.selectAll(""rect"")
          .data(filteredData)
          .enter()
          .append(""rect"")
          .attr(""x"", 0)
          .attr(""y"", d => yScale(d[""Department""]))
          .attr(""width"", d => xScale(d[""Sales Figures""]))
          .attr(""height"", yScale.bandwidth());

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));
      });
  </script>
</body>
</html>
```",Correct,410,411
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot that visualizes the relationship between Sales Figures and Hours Worked.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Sales Figures vs Hours Worked Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const salesFigures = [];
                const hoursWorked = [];
                csvData.forEach(row => {
                    const columns = row.split(',');
                    salesFigures.push(parseFloat(columns[2]));
                    hoursWorked.push(parseFloat(columns[3]));
                });
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Sales Figures vs Hours Worked Scatterplot'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Hours Worked'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Sales Figures'
                    },
                    series: [{
                        type: 'scatter',
                        data: salesFigures.map((value, index) => [hoursWorked[index], value])
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,411,412
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Line Chart that visualizes the trend of Sales Figures over the Year for each Department.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Sales Figures Trend</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [Year, Department, SalesFigures] = row.split(',');
                    if (!chartData[Department]) {
                        chartData[Department] = {};
                    }
                    chartData[Department][Year] = parseFloat(SalesFigures);
                });

                const series = Object.keys(chartData).map(Department => {
                    const data = Object.keys(chartData[Department]).map(Year => [Year, chartData[Department][Year]]);
                    return {
                        name: Department,
                        type: 'line',
                        data: data
                    };
                });

                const option = {
                    title: {
                        text: 'Sales Figures Trend'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    legend: {
                        data: Object.keys(chartData)
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    toolbox: {
                        feature: {
                            saveAsImage: {}
                        }
                    },
                    xAxis: {
                        type: 'category',
                        boundaryGap: false,
                        data: Object.keys(chartData[Object.keys(chartData)[0]])
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: series
                };

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,412,413
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Bar Chart that visualizes the Sales Figures for each Department in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Sales Figures by Department in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [year, department, salesFigures] = row.split(',');
                    if (year === '2020') {
                        if (!chartData[department]) {
                            chartData[department] = 0;
                        }
                        chartData[department] += parseFloat(salesFigures);
                    }
                });
                const departments = Object.keys(chartData);
                const salesFigures = Object.values(chartData);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Sales Figures by Department in 2020'
                    },
                    tooltip: {},
                    xAxis: {
                        data: departments
                    },
                    yAxis: {},
                    series: [{
                        name: 'Sales Figures',
                        type: 'bar',
                        data: salesFigures
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,413,414
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Pie Chart that visualizes the proportion of Sales Figures contributed by each Department in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Department Sales Figures 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [Year, Department, SalesFigures] = row.split(',');
                    if (Year === '2020') {
                        if (!chartData[Department]) {
                            chartData[Department] = 0;
                        }
                        chartData[Department] += parseFloat(SalesFigures);
                    }
                });
                const departments = Object.keys(chartData);
                const salesFigures = Object.values(chartData);

                var myChart = echarts.init(document.getElementById('chart'));
                var option = {
                    title: {
                        text: 'Proportion of Sales Figures by Department in 2020'
                    },
                    tooltip: {},
                    legend: {},
                    series: [
                        {
                            type: 'pie',
                            data: departments.map((department, index) => ({ value: salesFigures[index], name: department })),
                            emphasis: {}
                        }
                    ]
                };
                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,414,415
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Donut Chart that visualizes the distribution of Sales Figures among Department in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Sales Figures Distribution by Department in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [Year, Department, SalesFigures] = row.split(',');
                    if (Year === '2020') {
                        if (!chartData[Department]) {
                            chartData[Department] = 0;
                        }
                        chartData[Department] += parseFloat(SalesFigures);
                    }
                });
                const departments = Object.keys(chartData);
                const salesFigures = Object.values(chartData);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Sales Figures Distribution by Department in 2020',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    legend: {
                        orient: 'vertical',
                        left: 'left'
                    },
                    series: [
                        {
                            type: 'pie',
                            radius: ['40%', '70%'],
                            avoidLabelOverlap: false,
                            itemStyle: {
                                borderRadius: 10,
                                borderColor: '#fff',
                                borderWidth: 2
                            },
                            label: {
                                show: false,
                                position: 'center'
                            },
                            emphasis: {
                                label: {
                                    show: true,
                                    fontSize: '40',
                                    fontWeight: 'bold'
                                }
                            },
                            labelLine: {
                                show: false
                            },
                            data: departments.map((department, index) => ({
                                value: salesFigures[index],
                                name: department
                            }))
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,415,416
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Coxcomb Chart(polar area chart) to compare the Sales Figures of different Department in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coxcomb Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [Year, Department, SalesFigures] = row.split(',');
                    if (Year === '2020') {
                        if (!chartData[Department]) {
                            chartData[Department] = 0;
                        }
                        chartData[Department] += parseFloat(SalesFigures);
                    }
                });
                const departments = Object.keys(chartData);
                const salesFigures = Object.values(chartData);

                var myChart = echarts.init(document.getElementById('chart'));
                var option = {
                    angleAxis: {},
                    radiusAxis: {
                        type: 'category',
                        data: departments,
                        z: 10
                    },
                    polar: {},
                    series: [{
                        type: 'bar',
                        data: salesFigures,
                        coordinateSystem: 'polar',
                        name:'Sales Figures'
                    }],
                    legend:{
                      show:true,
                      data:['Sales Figures']
                  }
                };
                
               myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,416,417
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Radar Chart to compare the Sales Figures of different Department in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Radar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const departments = [...new Set(csvData.map(row => row.split(',')[1]))];
                const salesFigures2020 = {};

                csvData.forEach(row => {
                    const [year, department, salesFigures] = row.split(',');
                    if (year === '2020') {
                        if (!salesFigures2020[department]) {
                            salesFigures2020[department] = [];
                        }
                        salesFigures2020[department].push(parseFloat(salesFigures));
                    }
                });

                Object.keys(salesFigures2020).forEach(department => {
                    salesFigures2020[department] = Math.round(salesFigures2020[department].reduce((a, b) => a + b, 0) / salesFigures2020[department].length * 100) / 100;
                });

                const chartDom = document.getElementById('chart');
                const myChart = echarts.init(chartDom);

                option = {
                    title: {
                        text: 'Sales Figures of Different Departments in 2020'
                    },
                    radar: [
                        {
                            indicator: departments.map(department => ({ name: department })),
                            center: ['50%', '50%'],
                            radius: '60%'
                        }
                    ],
                    series: [
                        {
                            type: 'radar',
                            data: [Object.values(salesFigures2020)],
                            areaStyle:{},
                            emphasis:{
                                areaStyle:{}
                            }
                        }
                    ]
                };

               myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,417,418
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Streamgraph that visualizes the changes of Sales Figures over the Year for each Department.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Sales Figures Streamgraph</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const departments = [...new Set(csvData.map(row => row.split(',')[1]))];
                const years = [...new Set(csvData.map(row => row.split(',')[0]))].sort();
                const seriesData = departments.map(department => {
                    const departmentData = csvData.filter(row => row.split(',')[1] === department);
                    return years.map(year => {
                        const yearData = departmentData.find(row => row.split(',')[0] === year);
                        return yearData ? parseFloat(yearData.split(',')[2]) : 0;
                    });
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'line',
                            lineStyle: {
                                color: 'rgba(0,0,0,0.2)',
                                width: 2,
                                type: 'solid'
                            }
                        }
                    },
                    legend: {
                        data: departments
                    },
                    singleAxis: {
                        top: 50,
                        bottom: 50,
                        axisLine: {
                            lineStyle: {
                                color: '#ddd'
                            }
                        },
                        axisTick: {
                            lineStyle: {
                                color: '#ddd'
                            }
                        },
                        axisLabel: {
                            color: '#aaa'
                        },
                        type: 'time',
                        name: 'Year',
                        nameLocation: 'middle',
                        nameGap: 30,
                        nameTextStyle: {
                            fontSize: 16
                        },
                        axisPointer: {
                            animation: true,
                            lineStyle: {
                                color: '#ddd'
                            }
                        },
                        splitLine: {
                            lineStyle: {
                                type: 'dashed',
                                color: '#ddd'
                            }
                        },
                        data: years
                    },
                    series: departments.map((department, index) => ({
                        type: 'themeRiver',
                        name: department,
                        data: seriesData[index],
                        areaStyle: {
                            origin: 'start'
                        }
                    }))
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,418,419
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Slopegraph to compare the Sales Figures between 2019 and 2020 for each Department.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Slopegraph</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const departments = [...new Set(csvData.map(row => row.split(',')[1]))];
                const seriesData = [];
                const years = [2019, 2020];

                years.forEach(year => {
                    const series = [];
                    departments.forEach(department => {
                        const row = csvData.find(row => row.split(',')[0] === year.toString() && row.split(',')[1] === department);
                        if (row) {
                            series.push([department, parseFloat(row.split(',')[2])]);
                        }
                    });
                    seriesData.push({
                        name: year.toString(),
                        type: 'scatter',
                        data: series,
                        symbolSize: 10,
                        lineStyle: {
                            color: year === 2019 ? 'blue' : 'red'
                        }
                    });
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Sales Figures Slopegraph'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    grid: {
                        left: '10%',
                        right: '10%',
                        top: '10%',
                        bottom: '10%'
                    },
                    xAxis: {
                        type: 'category',
                        data: departments,
                        axisTick: {
                            alignWithLabel: true
                        }
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: seriesData
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,419,420
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Heatmap that visualizes the Sales Figures across Department and Years.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Sales Figures Heatmap</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const years = [...new Set(csvData.map(row => row.split(',')[0]))];
                const departments = [...new Set(csvData.map(row => row.split(',')[1]))];
                const salesFigures = csvData.map(row => row.split(',')).reduce((acc, row) => {
                    const yearIndex = years.indexOf(row[0]);
                    const departmentIndex = departments.indexOf(row[1]);
                    if (!acc[departmentIndex]) acc[departmentIndex] = [];
                    acc[departmentIndex][yearIndex] = parseFloat(row[2]);
                    return acc;
                }, []);

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Sales Figures Heatmap'
                    },
                    tooltip: {
                        position: 'top'
                    },
                    grid: {
                        height: '50%',
                        top: '10%'
                    },
                    xAxis: {
                        type: 'category',
                        data: years,
                        splitArea: {
                            show: true
                        }
                    },
                    yAxis: {
                        type: 'category',
                        data: departments,
                        splitArea: {
                            show: true
                        }
                    },
                    visualMap: {
                        min: 0,
                        max: Math.max(...salesFigures.flat()),
                        calculable: true,
                        orient: 'horizontal',
                        left: 'center',
                        bottom: '15%'
                    },
                    series: [{
                        name: 'Sales Figures',
                        type: 'heatmap',
                        data: salesFigures.map(department => department.map(sales => [sales])),
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,420,421
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Employee Performance Stacked Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const years = [...new Set(csvData.map(row => row.split(',')[0]))];
                const departments = [...new Set(csvData.map(row => row.split(',')[1]))];
                const seriesData = departments.map(department => {
                    return years.map(year => {
                        const row = csvData.find(row => row.split(',')[0] === year && row.split(',')[1] === department);
                        return row ? parseFloat(row.split(',')[5]) : 0;
                    });
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Employee Performance Stacked Bar Chart'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    legend: {
                        data: departments
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'category',
                        data: years
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: seriesData.map((data, index) => {
                        return {
                            name: departments[index],
                            type: 'bar',
                            stack: 'total',
                            data: data
                        };
                    })
                });
            });
    </script>
</body>
</html>
```",Correct,421,422
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Horizontal Bar Chart that visualizes the Sales Figures for each Department in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Sales Figures by Department in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [year, department, salesFigures] = row.split(',');
                    if (year === '2020') {
                        if (!chartData[department]) {
                            chartData[department] = 0;
                        }
                        chartData[department] += parseFloat(salesFigures);
                    }
                });
                const departments = Object.keys(chartData);
                const salesFigures = Object.values(chartData);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Sales Figures by Department in 2020'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'value',
                        position: 'top'
                    },
                    yAxis: {
                        type: 'category',
                        data: departments
                    },
                    series: [
                        {
                            name: 'Sales Figures',
                            type: 'bar',
                            data: salesFigures
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,422,423
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot that visualizes the relationship between Sales Figures and Hours Worked.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Sales Figures vs Hours Worked Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Sales Figures"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Hours Worked"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Sales Figures"", ""type"": ""quantitative""},
          {""field"": ""Hours Worked"", ""type"": ""quantitative""}
        ]
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,423,424
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Line Chart that visualizes the trend of Sales Figures over the Year for each Department.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Sales Figures Trend</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"" },
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {""field"": ""Year"", ""type"": ""temporal""},
        ""y"": {""field"": ""Sales Figures"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Department"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,424,425
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Bar Chart that visualizes the Sales Figures for each Department in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Sales Figures by Department in 2020</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2020""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Department"", ""type"": ""nominal""},
        ""y"": {""field"": ""Sales Figures"", ""type"": ""quantitative""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,425,426
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Pie Chart that visualizes the proportion of Sales Figures contributed by each Department in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Department Sales Figures 2020</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2020""},
        {""aggregate"": [{""op"": ""sum"", ""field"": ""Sales Figures"", ""as"": ""Sales""}], ""groupby"": [""Department""]}
      ],
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Sales"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Department"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,426,427
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Donut Chart that visualizes the distribution of Sales Figures among Department in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Donut Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2020""},
        {""filter"": ""datum.Department != 'Total'""},
        {""aggregate"": [{""op"": ""sum"", ""field"": ""Sales Figures"", ""as"": ""Sales Figures""}], ""groupby"": [""Department""]},
        {""calculate"": ""datum['Sales Figures']"", ""as"": ""value""},
        {""calculate"": ""datum.Department"", ""as"": ""category""}
      ],
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""value"", ""type"": ""quantitative"", ""stack"": true},
        ""color"": {""field"": ""category"", ""type"": ""nominal""}
      },
      ""view"": {""stroke"": null}
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,427,428
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Coxcomb Chart(polar area chart) to compare the Sales Figures of different Department in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coxcomb Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2020""}
      ],
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Sales Figures"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Department"", ""type"": ""nominal""}
      },
      ""config"": {
        ""arc"": {""padAngle"": 0.01}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,428,429
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Radar Chart to compare the Sales Figures of different Department in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Sales Figures Radar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2020""},
        {""calculate"": ""datum.Department"", ""as"": ""Category""},
        {""calculate"": ""datum['Sales Figures']"", ""as"": ""Value""}
      ],
      ""mark"": ""line"",
      ""encoding"": {
        ""theta"": {""field"": ""Category"", ""type"": ""nominal"", ""scale"": {""range"": [0, 360]}},
        ""radius"": {""field"": ""Value"", ""type"": ""quantitative"", ""scale"": {""domain"": [0, 1000000]}}
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""domain"": false, ""ticks"": false, ""labels"": false},
        ""legend"": {""orient"": ""bottom""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,429,430
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Streamgraph that visualizes the changes of Sales Figures over the Year for each Department.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Streamgraph of Sales Figures over Year for each Department</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"" },
      ""mark"": ""area"",
      ""encoding"": {
        ""x"": {""field"": ""Year"", ""type"": ""temporal""},
        ""y"": {""field"": ""Sales Figures"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Department"", ""type"": ""nominal""}
      },
      ""transform"": [{""stack"": ""Sales Figures"", ""groupby"": [""Year"", ""Department""]}]
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,430,431
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Slopegraph to compare the Sales Figures between 2019 and 2020 for each Department.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Slopegraph</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2019 || datum.Year == 2020""}
      ],
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {""field"": ""Year"", ""type"": ""nominal"", ""axis"": {""labelAngle"": 0}},
        ""y"": {""field"": ""Sales Figures"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Department"", ""type"": ""nominal""},
        ""detail"": {""field"": ""Department"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,431,432
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Heatmap that visualizes the Sales Figures across Department and Years.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Sales Figures Heatmap</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""rect"",
      ""encoding"": {
        ""x"": {""field"": ""Department"", ""type"": ""nominal""},
        ""y"": {""field"": ""Year"", ""type"": ""nominal""},
        ""color"": {""field"": ""Sales Figures"", ""type"": ""quantitative""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,432,433
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Stacked Bar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Department"", ""type"": ""nominal""},
        ""y"": {""field"": ""Sales Figures"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Year"", ""type"": ""nominal""},
        ""tooltip"": [
          {""field"": ""Department"", ""type"": ""nominal""},
          {""field"": ""Year"", ""type"": ""nominal""},
          {""field"": ""Sales Figures"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""view"": {""stroke"": null},
        ""axis"": {""grid"": false}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,433,434
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Horizontal Bar Chart that visualizes the Sales Figures for each Department in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Sales Figures by Department in 2020</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2020""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Sales Figures"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Department"", ""type"": ""nominal""},
        ""color"": {""field"": ""Department"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,434,435
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot that visualizes the relationship between Energy Consumed and Cost. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Energy Consumption vs Cost</title>
  <style>
    .tooltip {
      position: absolute;
      padding: 10px;
      font-size: 12px;
      border-radius: 5px;
      border: 1px solid #ccc;
      background-color: #fff;
      opacity: 0;
      pointer-events: none;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('svg')
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
      .then(data => {
        data.forEach(d => {
          d['Energy Consumed'] = +d['Energy Consumed'];
          d['Cost'] = +d['Cost'];
        });

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Energy Consumed'])])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Cost'])])
          .range([height, 0]);

        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(xAxis);

        svg.append('g')
          .call(yAxis);

        svg.append('text')
          .attr('x', width / 2)
          .attr('y', height + 30)
          .attr('text-anchor', 'middle')
          .text('Energy Consumed');

        svg.append('text')
          .attr('x', -height / 2)
          .attr('y', -30)
          .attr('text-anchor', 'middle')
          .attr('transform', 'rotate(-90)')
          .text('Cost');

        const tooltip = d3.select('body')
          .append('div')
          .attr('class', 'tooltip');

        svg.selectAll('circle')
          .data(data)
          .enter()
          .append('circle')
          .attr('cx', d => xScale(d['Energy Consumed']))
          .attr('cy', d => yScale(d['Cost']))
          .attr('r', 5)
          .on('mouseover', (event, d) => {
            tooltip.transition()
              .duration(200)
              .style('opacity', 1);

            tooltip.html(`Energy Consumed: ${d['Energy Consumed']}<br>Cost: ${d['Cost']}`)
              .style('left', (event.pageX + 10) + 'px')
              .style('top', (event.pageY - 10) + 'px');
          })
          .on('mouseout', () => {
            tooltip.transition()
              .duration(200)
              .style('opacity', 0);
          });
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,435,436
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot that visualizes the relationship between Energy Consumed and Cost. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Energy Consumption Scatterplot</title>
  <style>
    .brush .extent {
      fill-opacity: .3;
      stroke: #fff;
      shape-rendering: crispEdges;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Energy Consumed""] = +d[""Energy Consumed""];
          d[""Cost""] = +d[""Cost""];
        });

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Energy Consumed""])])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Cost""])])
          .range([height, 0]);

        const brush = d3.brush()
          .extent([[0, 0], [width, height]])
          .on(""brush"", brushed)
          .on(""end"", brushended);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d[""Energy Consumed""]))
          .attr(""cy"", d => yScale(d[""Cost""]))
          .attr(""r"", 5);

        svg.append(""g"")
          .attr(""class"", ""brush"")
          .call(brush);

        function brushed(event) {
          const selection = event.selection;
          if (selection) {
            svg.selectAll(""circle"")
              .classed(""selected"", d => {
                const x = xScale(d[""Energy Consumed""]);
                const y = yScale(d[""Cost""]);
                return x >= selection[0][0] && x <= selection[1][0] && y <= selection[0][1] && y >= selection[1][1];
              });
          } else {
            svg.selectAll(""circle"")
              .classed(""selected"", false);
          }
        }

        function brushended(event) {
          if (!event.sourceEvent) return;
          if (!event.selection) return;
          const selection = event.selection;
          const selectedData = data.filter(d => {
            const x = xScale(d[""Energy Consumed""]);
            const y = yScale(d[""Cost""]);
            return x >= selection[0][0] && x <= selection[1][0] && y <= selection[0][1] && y >= selection[1][1];
          });
          console.log(selectedData);
        }
      });
  </script>
</body>
</html>
```",Correct,436,437
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot that visualizes the relationship between Energy Consumed and Cost. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption vs Cost</title>
    <style>
        /* set the CSS */
        body { 
            font: 12px Arial;
        }
        path { 
            stroke: steelblue;
            stroke-opacity: .6;
            fill: none;
        }
        .brush .extent {
            fill-opacity: .3;
            stroke: #fff;
            shape-rendering: crispEdges;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        // set the dimensions and margins of the graph
        var margin = {top: 20, right: 20, bottom: 30, left: 40},
            width = 800 - margin.left - margin.right,
            height = 600 - margin.top - margin.bottom;

        // append the svg object to the body of the page
        var svg = d3.select(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");

        // Read the data
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"").then(function(data) {

            // Convert data types
            data.forEach(function(d) {
                d[""Energy Consumed""] = +d[""Energy Consumed""];
                d[""Cost""] = +d[""Cost""];
            });

            // Add zooming
            var zoom = d3.zoom()
                .scaleExtent([1, 10])
                .extent([[-Infinity, -Infinity], [Infinity, Infinity]])
                .on(""zoom"", zoomed);

            svg.call(zoom);

            // Add X axis
            var x = d3.scaleLinear()
                .domain([0, d3.max(data, function(d) { return d[""Energy Consumed""]; })])
                .range([ 0, width ]);

            svg.append(""g"")
                .attr(""transform"", ""translate(0,"" + height + "")"")
                .call(d3.axisBottom(x));

            // Add Y axis
            var y = d3.scaleLinear()
                .domain([0, d3.max(data, function(d) { return d[""Cost""]; })])
                .range([ height, 0]);

            svg.append(""g"")
                .call(d3.axisLeft(y));

            // Add dots
            svg.append('g')
                .selectAll(""dot"")
                .data(data)
                .enter()
                .append(""circle"")
                .attr(""cx"", function (d) { return x(d[""Energy Consumed""]); } )
                .attr(""cy"", function (d) { return y(d[""Cost""]); } )
                .attr(""r"", 1.5);

            // Add title
            svg.append(""text"")
                .attr(""x"", (width / 2))             
                .attr(""y"", 0 - (margin.top / 2))
                .attr(""text-anchor"", ""middle"")  
                .style(""font-size"", ""16px"") 
                .text(""Energy Consumption vs Cost"");

            // Add labels
            svg.append(""text"")
                .attr(""x"", (width / 2))             
                .attr(""y"", height + (margin.bottom / 2))
                .attr(""text-anchor"", ""middle"")  
                .style(""font-size"", ""12px"") 
                .text(""Energy Consumed"");

            svg.append(""text"")
                .attr(""transform"", ""rotate(-90)"")
                .attr(""x"", -(height / 2))             
                .attr(""y"", 0 - (margin.left / 2))
                .attr(""text-anchor"", ""middle"")  
                .style(""font-size"", ""12px"") 
                .text(""Cost"");

            // zoom function
            function zoomed() {
                svg.selectAll(""circle"")
                    .attr(""cx"", function (d) { return x(d[""Energy Consumed""]) * d3.event.transform.k + d3.event.transform.x; } )
                    .attr(""cy"", function (d) { return y(d[""Cost""]) * d3.event.transform.k + d3.event.transform.y; } );

                svg.selectAll(""g"")
                    .attr(""transform"", d3.event.transform);
            }
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,437,438
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Energy Consumed and Cost. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Energy Consumption vs Cost</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .tooltip {
      position: absolute;
      background-color: #f9f9f9;
      border: 1px solid #ccc;
      padding: 5px;
      visibility: hidden;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Energy Consumed""] = +d[""Energy Consumed""];
          d[""Cost""] = +d[""Cost""];
        });

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Energy Consumed""])])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Cost""])])
          .range([height, 0]);

        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(xAxis);

        svg.append(""g"")
          .call(yAxis);

        svg.append(""text"")
          .attr(""transform"", `translate(${width / 2}, ${height + 30})`)
          .style(""text-anchor"", ""middle"")
          .text(""Energy Consumed"");

        svg.append(""text"")
          .attr(""transform"", `rotate(-90) translate(${-height / 2}, ${-30})`)
          .style(""text-anchor"", ""middle"")
          .text(""Cost"");

        const tooltip = d3.select(""body"")
          .append(""div"")
          .attr(""class"", ""tooltip"")
          .style(""opacity"", 0);

        svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d[""Energy Consumed""]))
          .attr(""cy"", d => yScale(d[""Cost""]))
          .attr(""r"", 5)
          .on(""mouseover"", (event, d) => {
            tooltip.transition()
              .duration(200)
              .style(""opacity"", 0.9);
            tooltip.html(`
              <strong>Region:</strong> ${d.Region}<br>
              <strong>Energy Sector:</strong> ${d[""Energy Sector""]}<br>
              <strong>Energy Consumed:</strong> ${d[""Energy Consumed""]}<br>
              <strong>Cost:</strong> ${d[""Cost""]}<br>
              <strong>Emissions:</strong> ${d[""Emissions""]}<br>
              <strong>Number of Plants:</strong> ${d[""Number of Plants""]}<br>
              <strong>Revenue:</strong> ${d[""Revenue""]}<br>
              <strong>Renewable:</strong> ${d[""Renewable""]}
            `)
              .style(""left"", (event.pageX) + ""px"")
              .style(""top"", (event.pageY - 28) + ""px"");
          })
          .on(""mouseout"", () => {
            tooltip.transition()
              .duration(500)
              .style(""opacity"", 0);
          })
          .on(""click"", (event, d) => {
            const query = `${d.Region} ${d[""Energy Sector""]} energy consumption`;
            const url = `https://www.google.com/search?q=${query}`;
            window.open(url, ""_blank"");
          });
      });
  </script>
</body>
</html>
```",Correct,438,439
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot with query widgets showing the Energy Consumed and Cost of the given dataset. Add a slider to represent the Month.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Energy Consumption Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .slider-container {
      margin-top: 20px;
    }
  </style>
</head>
<body>
  <div id=""scatterplot""></div>
  <div class=""slider-container"">
    <input type=""range"" id=""month-slider"" min=""1"" max=""12"" value=""1"">
    <label for=""month-slider"">Month: <span id=""month-label"">1</span></label>
  </div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 600 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const svg = d3.select(""#scatterplot"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Energy Consumed""] = +d[""Energy Consumed""];
          d[""Cost""] = +d[""Cost""];
          d[""Month""] = +d[""Month""];
        });

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Energy Consumed""])])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Cost""])])
          .range([height, 0]);

        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(xAxis);

        svg.append(""g"")
          .call(yAxis);

        const points = svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d[""Energy Consumed""]))
          .attr(""cy"", d => yScale(d[""Cost""]))
          .attr(""r"", 5);

        d3.select(""#month-slider"")
          .on(""input"", function() {
            const month = +this.value;
            d3.select(""#month-label"").text(month);

            points
              .attr(""opacity"", d => d[""Month""] === month ? 1 : 0.1);
          });
      });
  </script>
</body>
</html>
```",Unexpected Execution Result,439,440
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot showing the Energy Consumed of Industrial. Add animated transitions that connect these points using lines in order.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Energy Consumption Scatterplot</title>
  <style>
    /* Add some basic styling */
    body {
      font-family: Arial, sans-serif;
    }
    #chart {
      width: 800px;
      height: 600px;
      margin: 50px auto;
    }
  </style>
</head>
<body>
  <div id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    // Set up the chart dimensions
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    // Create the SVG element
    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    // Load the data
    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"")
      .then(data => {
        // Filter the data for the Industrial sector
        const industrialData = data.filter(d => d[""Energy Sector""] === ""Industrial"");

        // Convert the data types
        industrialData.forEach(d => {
          d[""Energy Consumed""] = +d[""Energy Consumed""];
          d[""Month""] = +d[""Month""];
        });

        // Create the scales
        const xScale = d3.scaleLinear()
          .domain([0, d3.max(industrialData, d => d[""Month""])])
          .range([0, width]);
        const yScale = d3.scaleLinear()
          .domain([0, d3.max(industrialData, d => d[""Energy Consumed""])])
          .range([height, 0]);

        // Create the scatterplot
        const points = svg.selectAll(""circle"")
          .data(industrialData)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d[""Month""]))
          .attr(""cy"", d => yScale(d[""Energy Consumed""]))
          .attr(""r"", 5)
          .attr(""fill"", ""steelblue"");

        // Create the line
        const line = d3.line()
          .x(d => xScale(d[""Month""]))
          .y(d => yScale(d[""Energy Consumed""]));

        // Animate the line
        const path = svg.append(""path"")
          .datum(industrialData)
          .attr(""fill"", ""none"")
          .attr(""stroke"", ""steelblue"")
          .attr(""stroke-width"", 2)
          .attr(""stroke-linejoin"", ""round"")
          .attr(""stroke-linecap"", ""round"")
          .attr(""d"", line);

        const totalLength = path.node().getTotalLength();
        path
          .attr(""stroke-dasharray"", totalLength + "" "" + totalLength)
          .attr(""stroke-dashoffset"", totalLength)
          .transition()
          .duration(2000)
          .attr(""stroke-dashoffset"", 0);

        // Add the axes
        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);
        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(xAxis);
        svg.append(""g"")
          .call(yAxis);
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,440,441
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Energy Consumed of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Line Chart</title>
    <style>
        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 2px;
        }

        .line:hover {
            stroke-width: 4px;
        }

        .axis text {
            font-size: 12px;
        }

        .axis path,
        .axis line {
            fill: none;
            stroke: #777;
            stroke-width: 1;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 50, right: 50, bottom: 50, left: 50 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"")
            .then(data => {
                data.forEach(d => {
                    d[""Energy Consumed""] = +d[""Energy Consumed""];
                });

                const regions = [...new Set(data.map(d => d.Region))];

                const xScale = d3.scalePoint()
                    .domain([...new Set(data.map(d => d.Month))])
                    .range([0, width])
                    .padding(0.5);

                const yScale = d3.scaleLinear()
                    .domain([0, d3.max(data, d => d[""Energy Consumed""])])
                    .range([height, 0]);

                svg.append(""g"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(d3.axisBottom(xScale));

                svg.append(""g"")
                    .call(d3.axisLeft(yScale));

                const lines = svg.selectAll(""line"")
                    .data(regions)
                    .enter()
                    .append(""path"")
                    .attr(""class"", ""line"")
                    .attr(""stroke"", (d, i) => d3.schemeCategory10[i])
                    .attr(""d"", d => {
                        const regionData = data.filter(e => e.Region === d);
                        return d3.line()
                            .x(e => xScale(e.Month))
                            .y(e => yScale(e[""Energy Consumed""]))(regionData);
                    })
                    .on(""mouseover"", function(event, d) {
                        d3.select(this)
                            .attr(""stroke-width"", 4);
                    })
                    .on(""mouseout"", function() {
                        d3.select(this)
                            .attr(""stroke-width"", 2);
                    });

                const legend = svg.selectAll(""legend"")
                    .data(regions)
                    .enter()
                    .append(""g"")
                    .attr(""transform"", (d, i) => `translate(0, ${i * 20})`);

                legend.append(""rect"")
                    .attr(""x"", width - 18)
                    .attr(""y"", 10)
                    .attr(""width"", 18)
                    .attr(""height"", 18)
                    .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

                legend.append(""text"")
                    .attr(""x"", width - 24)
                    .attr(""y"", 22)
                    .attr(""text-anchor"", ""end"")
                    .text(d => d);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,441,442
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Bar Chart that visualizes the Energy Consumed for each Energy Sector in January. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Energy Consumption Bar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Energy Consumed""] = +d[""Energy Consumed""];
        });

        const januaryData = data.filter(d => d.Month === ""January"");

        const x = d3.scaleBand()
          .domain(januaryData.map(d => d[""Energy Sector""]))
          .range([0, width])
          .padding(0.2);

        const y = d3.scaleLinear()
          .domain([0, d3.max(januaryData, d => d[""Energy Consumed""])])
          .range([height, 0]);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(x));

        svg.append(""g"")
          .call(d3.axisLeft(y));

        svg.selectAll(""bar"")
          .data(januaryData)
          .enter()
          .append(""rect"")
          .attr(""x"", d => x(d[""Energy Sector""]))
          .attr(""y"", d => y(d[""Energy Consumed""]))
          .attr(""width"", x.bandwidth())
          .attr(""height"", d => height - y(d[""Energy Consumed""]));

        const zoom = d3.zoom()
          .scaleExtent([1, 10])
          .extent([[-Infinity, -Infinity], [Infinity, Infinity]])
          .on(""zoom"", zoomed);

        svg.call(zoom);

        function zoomed({ transform }) {
          svg.selectAll(""rect"")
            .attr(""x"", d => x(d[""Energy Sector""]) * transform.k + transform.x)
            .attr(""y"", d => y(d[""Energy Consumed""]) * transform.k + transform.y)
            .attr(""width"", x.bandwidth() * transform.k)
            .attr(""height"", (d => height - y(d[""Energy Consumed""])) * transform.k);

          svg.selectAll(""g"")
            .attr(""transform"", transform);
        }
      });
  </script>
</body>
</html>
```",Execution Error,442,443
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Bar Chart that visualizes the Energy Consumed for each Energy Sector in January. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Energy Consumption Bar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 800px;
      height: 600px;
      border: 1px solid black;
    }
    .bar {
      fill: steelblue;
    }
    .bar:hover {
      fill: brown;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg class=""chart""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;
    const svg = d3.select(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Energy Consumed""] = +d[""Energy Consumed""];
          d[""Month""] = d[""Month""];
        });

        const januaryData = data.filter(d => d[""Month""] === ""January"");

        const x = d3.scaleBand()
          .domain(januaryData.map(d => d[""Energy Sector""]))
          .range([0, width])
          .padding(0.2);

        const y = d3.scaleLinear()
          .domain([0, d3.max(januaryData, d => d[""Energy Consumed""])])
          .range([height, 0]);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(x));

        svg.append(""g"")
          .call(d3.axisLeft(y));

        const bars = svg.selectAll(""rect"")
          .data(januaryData)
          .enter()
          .append(""rect"")
          .attr(""class"", ""bar"")
          .attr(""x"", d => x(d[""Energy Sector""]))
          .attr(""y"", d => y(d[""Energy Consumed""]))
          .attr(""width"", x.bandwidth())
          .attr(""height"", d => height - y(d[""Energy Consumed""]));

        let drag = d3.drag()
          .on(""start"", dragstarted)
          .on(""drag"", dragged)
          .on(""end"", dragended);

        bars.call(drag);

        function dragstarted(event, d) {
          d3.select(this).raise();
          d3.event.sourceEvent.stopPropagation();
        }

        function dragged(event, d) {
          const newX = x(d[""Energy Sector""]) + event.dx;
          d3.select(this)
            .attr(""x"", newX);
        }

        function dragended(event, d) {
          const newIndex = Math.round((d3.select(this).attr(""x"") - x(d[""Energy Sector""])) / x.bandwidth());
          const newData = januaryData.slice();
          newData.splice(newData.indexOf(d), 1);
          newData.splice(newIndex, 0, d);
          x.domain(newData.map(d => d[""Energy Sector""]));
          svg.selectAll(""rect"")
            .transition()
            .duration(500)
            .attr(""x"", d => x(d[""Energy Sector""]));
          svg.selectAll(""g"")
            .transition()
            .duration(500)
            .call(d3.axisBottom(x));
        }
      });
  </script>
</body>
</html>
```",Execution Error,443,444
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Bar Chart that visualizes the Energy Consumed for each Energy Sector in January. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Energy Consumed.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Energy Consumption Bar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 40px;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
    .sort-button {
      position: absolute;
      top: 10px;
      right: 10px;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <button class=""sort-button"" id=""sort-ascending"">Sort Ascending</button>
  <button class=""sort-button"" id=""sort-descending"">Sort Descending</button>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 300 - margin.top - margin.bottom;

    const svg = d3.select("".chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const xScale = d3.scaleBand()
      .range([0, width])
      .padding(0.2);

    const yScale = d3.scaleLinear()
      .range([height, 0]);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"")
      .then(data => {
        data = data.filter(d => d[""Month""] === ""January"");

        xScale.domain(data.map(d => d[""Energy Sector""]));
        yScale.domain([0, d3.max(data, d => +d[""Energy Consumed""])]);

        svg.selectAll(""rect"")
          .data(data)
          .enter()
          .append(""rect"")
          .attr(""x"", d => xScale(d[""Energy Sector""]))
          .attr(""y"", d => yScale(+d[""Energy Consumed""]))
          .attr(""width"", xScale.bandwidth())
          .attr(""height"", d => height - yScale(+d[""Energy Consumed""]));

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        d3.select(""#sort-ascending"")
          .on(""click"", () => {
            data.sort((a, b) => +a[""Energy Consumed""] - +b[""Energy Consumed""]);
            xScale.domain(data.map(d => d[""Energy Sector""]));
            svg.selectAll(""rect"")
              .transition()
              .duration(1000)
              .attr(""x"", d => xScale(d[""Energy Sector""]));
          });

        d3.select(""#sort-descending"")
          .on(""click"", () => {
            data.sort((a, b) => +b[""Energy Consumed""] - +a[""Energy Consumed""]);
            xScale.domain(data.map(d => d[""Energy Sector""]));
            svg.selectAll(""rect"")
              .transition()
              .duration(1000)
              .attr(""x"", d => xScale(d[""Energy Sector""]));
          });
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,444,445
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot that visualizes the relationship between Energy Consumed and Cost. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const energyConsumed = csvData.map(row => parseFloat(row[2]));
                const cost = csvData.map(row => parseFloat(row[3]));

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Energy Consumption vs Cost'
                    },
                    tooltip: {
                        trigger: 'item',
                        formatter: function(params) {
                            return `Energy Consumed: ${params.data[0]}<br>Cost: ${params.data[1]}`;
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Energy Consumed',
                        axisPointer: {
                            show: true,
                            type: 'line',
                            lineStyle: {
                                color: 'rgba(0,0,0,0.2)',
                                type: 'dashed'
                            }
                        }
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Cost',
                        axisPointer: {
                            show: true,
                            type: 'line',
                            lineStyle: {
                                color: 'rgba(0,0,0,0.2)',
                                type: 'dashed'
                            }
                        }
                    },
                    series: [{
                        type: 'scatter',
                        data: energyConsumed.map((x, i) => [x, cost[i]]),
                        symbolSize: 10
                    }]
                });
            });
    </script>
</body>
</html>
```",Execution Error,445,446
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot that visualizes the relationship between Energy Consumed and Cost. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const energyConsumed = [];
                const cost = [];
                csvData.forEach(row => {
                    const columns = row.split(',');
                    energyConsumed.push(parseFloat(columns[2]));
                    cost.push(parseFloat(columns[3]));
                });
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Energy Consumption vs Cost'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Energy Consumed'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Cost'
                    },
                    series: [{
                        type: 'scatter',
                        data: energyConsumed.map((x, i) => [x, cost[i]]),
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        },
                        brush: {
                            throttleType: 'debounce',
                            throttleDelay: 300
                        }
                    }],
                    brush: {
                        toolbox: ['rect', 'polygon', 'lineX', 'lineY', 'keep', 'clear'],
                        xAxisIndex: 0,
                        throttleType: 'debounce',
                        throttleDelay: 300
                    }
                });
                chart.on('brushSelected', params => {
                    const selectedData = params.batch[0].selected;
                    console.log(selectedData);
                });
            });
    </script>
</body>
</html>
```",Correct,446,447
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot that visualizes the relationship between Energy Consumed and Cost. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = csvData.map(row => {
                    const columns = row.split(',');
                    return [parseFloat(columns[2]), parseFloat(columns[3])];
                });
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Energy Consumed vs Cost'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Energy Consumed'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Cost'
                    },
                    series: [{
                        type: 'scatter',
                        data: chartData
                    }],
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 100
                        },
                        {
                            start: 0,
                            end: 100
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,447,448
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Energy Consumed and Cost. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = csvData.map(row => {
                    const columns = row.split(',');
                    return {
                        name: columns[0] + ' ' + columns[1],
                        value: [parseFloat(columns[2]), parseFloat(columns[3])],
                        tooltip: {
                            formatter: () => {
                                return `
                                    <div>
                                        <p>Month: ${columns[0]}</p>
                                        <p>Energy Sector: ${columns[1]}</p>
                                        <p>Energy Consumed: ${columns[2]}</p>
                                        <p>Cost: ${columns[3]}</p>
                                        <p>Emissions: ${columns[4]}</p>
                                        <p>Number of Plants: ${columns[5]}</p>
                                        <p>Revenue: ${columns[6]}</p>
                                        <p>Renewable: ${columns[7]}</p>
                                        <p>Region: ${columns[8]}</p>
                                    </div>
                                `;
                            }
                        },
                        link: `https://www.google.com/search?q=${columns[0]}+${columns[1]}+energy+consumption`
                    };
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    tooltip: {
                        trigger: 'item',
                        formatter: (params) => params.data.tooltip.formatter()
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: chartData,
                            symbolSize: 20,
                            itemStyle: {
                                color: '#666'
                            },
                            emphasis: {
                                itemStyle: {
                                    color: '#333'
                                },
                                label: {
                                    show: true,
                                    formatter: (params) => params.data.name,
                                    position: 'top'
                                }
                            }
                        }
                    ],
                    xAxis: {
                        type: 'value',
                        name: 'Energy Consumed'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Cost'
                    },
                    visualMap: {
                        type: 'piecewise',
                        pieces: [
                            {
                                min: 0,
                                max: 100,
                                color: '#93CE07'
                            },
                            {
                                min: 100,
                                max: 200,
                                color: '#FFC400'
                            },
                            {
                                min: 200,
                                color: '#FF0000'
                            }
                        ]
                    }
                });

                chart.on('click', (params) => {
                    window.open(params.data.link, '_blank');
                });
            });
    </script>
</body>
</html>
```",Correct,448,449
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot with query widgets showing the Energy Consumed and Cost of the given dataset. Add a slider to represent the Month.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-gl@2.1.0/dist/echarts-gl.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-stat@1.1.0/dist/echarts-stat.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-wordcloud@2.0.0/dist/echarts-wordcloud.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-liquidfill@2.0.5/dist/echarts-liquidfill.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-3d@1.1.0/dist/echarts-3d.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-3d-2@1.1.0/dist/echarts-3d-2.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-gl@2.1.0/dist/echarts-gl.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js""></script>
    <style>
        #chart {
            width: 800px;
            height: 600px;
            margin: 0 auto;
        }
    </style>
</head>
<body>
    <div id=""chart""></div>
    <div id=""slider""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = csvData.map(row => {
                    const columns = row.split(',');
                    return {
                        month: parseInt(columns[0]),
                        energySector: columns[1],
                        energyConsumed: parseFloat(columns[2]),
                        cost: parseFloat(columns[3]),
                        emissions: parseFloat(columns[4]),
                        numberOfPlants: parseInt(columns[5]),
                        revenue: parseFloat(columns[6]),
                        renewable: columns[7],
                        region: columns[8]
                    };
                });

                const months = [...new Set(chartData.map(data => data.month))].sort((a, b) => a - b);
                const energySectors = [...new Set(chartData.map(data => data.energySector))].sort();

                const chart = echarts.init(document.getElementById('chart'));
                const slider = echarts.init(document.getElementById('slider'));

                const option = {
                    title: {
                        text: 'Energy Consumption Scatterplot'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Energy Consumed'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Cost'
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: chartData.filter(data => data.month === months[0]),
                            symbolSize: 10
                        }
                    ]
                };

                const sliderOption = {
                    type: 'slider',
                    min: months[0],
                    max: months[months.length - 1],
                    value: months[0],
                    orient: 'horizontal',
                    height: 20,
                    bottom: 'bottom',
                    formatter: '{value} month'
                };

                chart.setOption(option);
                slider.setOption(sliderOption);

                slider.on('sliderChanged', params => {
                    const month = params.value;
                    const seriesData = chartData.filter(data => data.month === month);
                    chart.setOption({
                        series: [
                            {
                                type: 'scatter',
                                data: seriesData,
                                symbolSize: 10
                            }
                        ]
                    });
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,449,450
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot showing the Energy Consumed of Industrial. Add animated transitions that connect these points using lines in order.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const industrialData = csvData.filter(row => row.split(',')[1] === 'Industrial')
                    .map(row => row.split(','))
                    .map(row => [row[0], parseFloat(row[2])]);

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    title: {
                        text: 'Energy Consumption of Industrial Sector'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'cross'
                        }
                    },
                    xAxis: {
                        type: 'category',
                        data: industrialData.map(row => row[0])
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            name: 'Energy Consumption',
                            type: 'scatter',
                            data: industrialData.map(row => row[1]),
                            symbolSize: 10,
                            label: {
                                show: true,
                                formatter: '{c}'
                            },
                            encode: {
                                x: 0,
                                y: 1
                            }
                        },
                        {
                            name: 'Line',
                            type: 'line',
                            data: industrialData.map(row => row[1]),
                            symbolSize: 0,
                            lineStyle: {
                                color: 'rgba(128, 128, 128, 0.5)'
                            },
                            animationDuration: 2000,
                            animationEasing: 'cubicInOut'
                        }
                    ],
                    animationDuration: 2000,
                    animationEasing: 'cubicInOut'
                };
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,450,451
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Energy Consumed of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Line Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const regions = [...new Set(csvData.map(row => row.split(',')[7]))];
                const months = [...new Set(csvData.map(row => row.split(',')[0]))];
                const seriesData = regions.map(region => {
                    const regionData = csvData.filter(row => row.split(',')[7] === region);
                    return months.map(month => {
                        const monthData = regionData.find(row => row.split(',')[0] === month);
                        return monthData ? parseFloat(monthData.split(',')[2]) : null;
                    });
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'line',
                            lineStyle: {
                                color: 'rgba(0,0,0,0.2)',
                                width: 1,
                                type: 'solid'
                            }
                        }
                    },
                    legend: {
                        data: regions
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'category',
                        data: months
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: regions.map((region, index) => ({
                        name: region,
                        type: 'line',
                        data: seriesData[index],
                        emphasis: {
                            focus: 'series'
                        }
                    }))
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,451,452
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Bar Chart that visualizes the Energy Consumed for each Energy Sector in January. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const chartData = [];
                const rows = data.split('\n');
                const energySectors = new Set();
                rows.forEach((row, index) => {
                    if (index > 0) {
                        const columns = row.split(',');
                        if (columns[0] === 'January') {
                            energySectors.add(columns[1]);
                            chartData.push({
                                name: columns[1],
                                value: parseFloat(columns[2])
                            });
                        }
                    }
                });
                const energySectorArray = Array.from(energySectors);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'category',
                        data: energySectorArray
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            name: 'Energy Consumed',
                            type: 'bar',
                            data: chartData.map(item => item.value)
                        }
                    ]
                });
                chart.on('dataZoom', params => {
                    if (params.type === 'inside') {
                        chart.setOption({
                            dataZoom: [
                                {
                                    type: 'inside',
                                    start: params.start,
                                    end: params.end
                                }
                            ]
                        });
                    }
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,452,453
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Bar Chart that visualizes the Energy Consumed for each Energy Sector in January. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [month, sector, consumed] = row.split(',');
                    if (month === 'January') {
                        if (!chartData[sector]) {
                            chartData[sector] = 0;
                        }
                        chartData[sector] += parseFloat(consumed);
                    }
                });
                const sectors = Object.keys(chartData);
                const values = Object.values(chartData);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'category',
                        data: sectors,
                        axisLabel: {
                            rotate: 45
                        }
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            name: 'Energy Consumed',
                            type: 'bar',
                            data: values,
                            draggable: true,
                            dragOption: {
                                type: 'sort'
                            }
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,453,454
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Bar Chart that visualizes the Energy Consumed for each Energy Sector in January. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Energy Consumed.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <style>
        #chart {
            width: 800px;
            height: 600px;
            margin: 0 auto;
        }
    </style>
</head>
<body>
    <div id=""chart""></div>
    <select id=""sort-order"">
        <option value=""desc"">Descending</option>
        <option value=""asc"">Ascending</option>
    </select>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [month, sector, consumed] = row.split(',');
                    if (month === 'January') {
                        if (!chartData[sector]) {
                            chartData[sector] = 0;
                        }
                        chartData[sector] += parseFloat(consumed);
                    }
                });
                const seriesData = Object.keys(chartData).map(sector => ({ name: sector, value: chartData[sector] }));
                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    title: {
                        text: 'Energy Consumption in January'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    xAxis: {
                        type: 'category',
                        data: seriesData.map(item => item.name),
                        axisLabel: {
                            rotate: 45
                        }
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            name: 'Energy Consumption',
                            type: 'bar',
                            data: seriesData.map(item => item.value),
                            animationDuration: 2000,
                            animationEasing: 'cubicInOut'
                        }
                    ]
                };
                chart.setOption(option);
                document.getElementById('sort-order').addEventListener('change', () => {
                    const sortOrder = document.getElementById('sort-order').value;
                    const sortedData = seriesData.sort((a, b) => {
                        if (sortOrder === 'desc') {
                            return b.value - a.value;
                        } else {
                            return a.value - b.value;
                        }
                    });
                    chart.setOption({
                        xAxis: {
                            data: sortedData.map(item => item.name)
                        },
                        series: [
                            {
                                data: sortedData.map(item => item.value)
                            }
                        ]
                    });
                });
            });
    </script>
</body>
</html>
```",Correct,454,455
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot that visualizes the relationship between Energy Consumed and Cost. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Energy Consumption vs Cost</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to make the chart more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    // Define the Vega-Lite specification
    var spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Energy Consumed"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Cost"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Energy Consumed"", ""type"": ""quantitative""},
          {""field"": ""Cost"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""axis"": {
          ""labelFontSize"": 14,
          ""titleFontSize"": 16
        }
      }
    };

    // Embed the chart in the #vis div
    vegaEmbed(""#vis"", spec, { ""renderer"": ""canvas"" });
  </script>
</body>
</html>
```",Unexpected Execution Result,455,456
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot that visualizes the relationship between Energy Consumed and Cost. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Energy Consumption Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to make the chart more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    // Define the Vega-Lite specification
    var spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Energy Consumed"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Cost"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Energy Consumed"", ""type"": ""quantitative""},
          {""field"": ""Cost"", ""type"": ""quantitative""},
          {""field"": ""Region"", ""type"": ""nominal""}
        ]
      },
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x"", ""y""]}
      }
    };

    // Embed the Vega-Lite chart in the HTML page
    vegaEmbed(""#vis"", spec, { ""actions"": false });
  </script>
</body>
</html>
```",Correct,456,457
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot that visualizes the relationship between Energy Consumed and Cost. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Energy Consumption vs Cost Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Energy Consumed"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Cost"", ""type"": ""quantitative""}
      },
      ""config"": {
        ""view"": {""continuousWidth"": 400, ""continuousHeight"": 300},
        ""scale"": {""zoom"": ""wheel""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Execution Result,457,458
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Energy Consumed and Cost. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Energy Consumption Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to make the chart more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Energy Consumed"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Cost"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Month"", ""type"": ""nominal""},
          {""field"": ""Energy Sector"", ""type"": ""nominal""},
          {""field"": ""Energy Consumed"", ""type"": ""quantitative""},
          {""field"": ""Cost"", ""type"": ""quantitative""},
          {""field"": ""Emissions"", ""type"": ""quantitative""},
          {""field"": ""Number of Plants"", ""type"": ""quantitative""},
          {""field"": ""Revenue"", ""type"": ""quantitative""},
          {""field"": ""Renewable"", ""type"": ""nominal""},
          {""field"": ""Region"", ""type"": ""nominal""}
        ]
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""mark"": {
          ""tooltip"": {
            ""content"": ""encoding""
          }
        }
      }
    };

    const opt = {
      ""actions"": {
        ""publisher"": ""vega-lite"",
        ""view"": {
          ""click"": {
            ""url"": ""https://www.google.com/search"",
            ""params"": {
              ""q"": ""{% raw %}{{ datum['Energy Sector'] }}{% endraw %} {% raw %}{{ datum['Region'] }}{% endraw %} energy consumption""
            }
          }
        }
      }
    };

    vegaEmbed(""#vis"", spec, opt);
  </script>
</body>
</html>
```",Unexpected Execution Result,458,459
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot with query widgets showing the Energy Consumed and Cost of the given dataset. Add a slider to represent the Month.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Energy Consumption Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to make the visualization more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {
          ""field"": ""Energy Consumed"",
          ""type"": ""quantitative"",
          ""title"": ""Energy Consumed""
        },
        ""y"": {
          ""field"": ""Cost"",
          ""type"": ""quantitative"",
          ""title"": ""Cost""
        },
        ""color"": {
          ""field"": ""Region"",
          ""type"": ""nominal"",
          ""title"": ""Region""
        }
      },
      ""params"": [
        {
          ""name"": ""month"",
          ""value"": 1,
          ""bind"": {""input"": ""range"", ""min"": 1, ""max"": 12, ""step"": 1}
        }
      ],
      ""transform"": [
        {
          ""filter"": ""datum.Month == month""
        }
      ]
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,459,460
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot showing the Energy Consumed of Industrial. Add animated transitions that connect these points using lines in order.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Energy Consumption Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 800,
      ""height"": 600,
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum['Energy Sector'] == 'Industrial'""},
        {""sort"": [""Month""]},
        {""window"": [{""op"": ""row_number"", ""as"": ""order""}]}
      ],
      ""mark"": {
        ""type"": ""line"",
        ""point"": true
      },
      ""encoding"": {
        ""x"": {""field"": ""Month"", ""type"": ""nominal"", ""axis"": {""labelAngle"": 45}},
        ""y"": {""field"": ""Energy Consumed"", ""type"": ""quantitative""},
        ""order"": {""field"": ""order"", ""type"": ""ordinal""}
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""labelFontSize"": 14, ""titleFontSize"": 16}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,460,461
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Energy Consumed of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Energy Consumption Line Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to make the chart more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    // Define the Vega-Lite specification
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": {
        ""type"": ""line"",
        ""point"": true,
        ""tooltip"": true
      },
      ""encoding"": {
        ""x"": {
          ""field"": ""Month"",
          ""type"": ""nominal"",
          ""axis"": {""labelAngle"": 0}
        },
        ""y"": {
          ""field"": ""Energy Consumed"",
          ""type"": ""quantitative"",
          ""axis"": {""title"": ""Energy Consumed""}
        },
        ""color"": {
          ""field"": ""Energy Sector"",
          ""type"": ""nominal"",
          ""legend"": {""title"": ""Energy Sector""}
        }
      },
      ""selection"": {
        ""highlight"": {""type"": ""single"", ""empty"": ""none"", ""on"": ""mouseover"", ""fields"": [""Energy Sector""]}
      },
      ""transform"": [
        {""filter"": {""selection"": ""highlight""}}
      ]
    };

    // Embed the chart in the #vis div
    vegaEmbed(""#vis"", spec, {actions: false});
  </script>
</body>
</html>
```",Initialization Error,461,462
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Bar Chart that visualizes the Energy Consumed for each Energy Sector in January. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Energy Consumption Bar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Month === 'January'""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Energy Sector"", ""type"": ""nominal""},
        ""y"": {""field"": ""Energy Consumed"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Energy Sector"", ""type"": ""nominal""},
          {""field"": ""Energy Consumed"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""view"": {""continuousWidth"": 400, ""continuousHeight"": 300},
        ""axis"": {""labelFontSize"": 16, ""titleFontSize"": 16},
        ""legend"": {""labelFontSize"": 16, ""titleFontSize"": 16}
      }
    };

    vegaEmbed(""#vis"", spec, { ""actions"": true });
  </script>
</body>
</html>
```",Unexpected Execution Result,462,463
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Bar Chart that visualizes the Energy Consumed for each Energy Sector in January. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Energy Consumption Bar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to make the chart more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    // Load the data from the CSV file
    const data = {
      ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
      ""format"": {""type"": ""csv""}
    };

    // Create the Vega-Lite specification
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": data,
      ""transform"": [
        {""filter"": ""datum.Month === 'January'""},
        {""calculate"": ""datum.Energy Consumed"", ""as"": ""Energy_Consumed""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Energy Sector"", ""type"": ""nominal"", ""sort"": ""-y""},
        ""y"": {""field"": ""Energy_Consumed"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Energy Sector"", ""type"": ""nominal""},
          {""field"": ""Energy_Consumed"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""domainWidth"": 1}
      },
      ""usermeta"": {""embedOptions"": {""renderer"": ""svg""}}
    };

    // Embed the chart in the #vis div
    vegaEmbed(""#vis"", spec, { ""renderer"": ""svg"" });
  </script>
</body>
</html>
```

**Drag and Drop Functionality**

Unfortunately, Vega-Lite does not natively support drag-and-drop functionality for reordering bars. However, you can achieve this by using a combination of Vega-Lite and D3.js. Here's an updated code snippet that demonstrates how to add drag-and-drop functionality:

```html
<!DOCTYPE html>
<html>
<head>
  <title>Energy Consumption Bar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <style>
    /* Add some basic styling to make the chart more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    // Load the data from the CSV file
    const data = {
      ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
      ""format"": {""type"": ""csv""}
    };

    // Create the Vega-Lite specification
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": data,
      ""transform"": [
        {""filter"": ""datum.Month === 'January'""},
        {""calculate"": ""datum.Energy Consumed"", ""as"": ""Energy_Consumed""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Energy Sector"", ""type"": ""nominal"", ""sort"": ""-y""},
        ""y"": {""field"": ""Energy_Consumed"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Energy Sector"", ""type"": ""nominal""},
          {""field"": ""Energy_Consumed"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""domainWidth"": 1}
      },
      ""usermeta"": {""embedOptions"": {""renderer"": ""svg""}}
    };

    // Embed the chart in the #vis div
    vegaEmbed(""#vis"", spec, { ""renderer"": ""svg"" }).then(result => {
      const svg = result.view;
      const bars = svg.selectAll(""rect"");

      // Add drag-and-drop functionality
      bars.call(d3.drag()
        .on(""start"", dragstarted)
        .on(""drag"", dragged)
        .on(""end"", dragended)
      );

      function dragstarted(event, d) {
        d3.select(this).raise();
      }

      function dragged(event, d) {
        const x = event.x;
        const y = event.y;
        d3.select(this).attr(""x"", x);
      }

      function dragended(event, d) {
        // Update the data and re-render the chart
        const newData = svg.selectAll(""rect"").data();
        const sortedData = newData.sort((a, b) => a.x - b.x);
        spec.data.values = sortedData;
        vegaEmbed(""#vis"", spec, { ""renderer"": ""svg"" });
      }
    });
  </script>
</body>
</html>
```

This updated code snippet uses D3.js to add drag-and-drop functionality to the bars in the chart. When a bar is dragged, its x-position is updated, and when the drag is ended, the data is updated and the chart is re-rendered to reflect the new order of the bars.",Initialization Error,463,464
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Bar Chart that visualizes the Energy Consumed for each Energy Sector in January. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Energy Consumed.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Energy Consumption Bar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    #chart {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""chart""></div>
  <select id=""sort-order"">
    <option value=""descending"">Descending</option>
    <option value=""ascending"">Ascending</option>
  </select>

  <script>
    const opt = {
      ""mode"": ""vega-lite"",
      ""renderer"": ""canvas"",
      ""actions"": true
    };

    vegaEmbed('#chart', {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Month === 'January'""},
        {""sort"": [{""field"": ""Energy Consumed"", ""order"": ""descending""}]}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Energy Consumed"", ""type"": ""quantitative"", ""axis"": {""title"": ""Energy Consumed""}},
        ""y"": {""field"": ""Energy Sector"", ""type"": ""nominal"", ""axis"": {""title"": ""Energy Sector""}},
        ""color"": {""field"": ""Energy Sector"", ""type"": ""nominal""}
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""labelFontSize"": 14, ""titleFontSize"": 16}
      }
    }, opt).then(function(result) {
      const sortOrderSelect = document.getElementById('sort-order');
      sortOrderSelect.addEventListener('change', function() {
        const sortOrder = sortOrderSelect.value;
        result.view.change(
          ""sort"", 
          vega.transforms.sort({field: ""Energy Consumed"", order: sortOrder})
        ).run();
      });
    });
  </script>
</body>
</html>
```",Unexpected Initial Result,464,465
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Energy Consumed and Cost, and a Bar Chart on the right that displays Energy Sector versus Energy Consumed.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Energy Consumption Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: inline-block;
      vertical-align: top;
    }
    .scatterplot {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
    .barchart {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart scatterplot"" id=""scatterplot""></div>
  <div class=""chart barchart"" id=""barchart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svgScatterplot = d3.select(""#scatterplot"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const svgBarchart = d3.select(""#barchart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"").then(data => {
      data.forEach(d => {
        d[""Energy Consumed""] = +d[""Energy Consumed""];
        d[""Cost""] = +d[""Cost""];
      });

      const xScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Energy Consumed""])])
        .range([0, width]);

      const yScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Cost""])])
        .range([height, 0]);

      svgScatterplot.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScaleScatterplot(d[""Energy Consumed""]))
        .attr(""cy"", d => yScaleScatterplot(d[""Cost""]))
        .attr(""r"", 5);

      svgScatterplot.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleScatterplot));

      svgScatterplot.append(""g"")
        .call(d3.axisLeft(yScaleScatterplot));

      const xScaleBarchart = d3.scaleBand()
        .domain(data.map(d => d[""Energy Sector""]))
        .range([0, width])
        .padding(0.2);

      const yScaleBarchart = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Energy Consumed""])])
        .range([height, 0]);

      svgBarchart.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", d => xScaleBarchart(d[""Energy Sector""]))
        .attr(""y"", d => yScaleBarchart(d[""Energy Consumed""]))
        .attr(""width"", xScaleBarchart.bandwidth())
        .attr(""height"", d => height - yScaleBarchart(d[""Energy Consumed""]));

      svgBarchart.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleBarchart));

      svgBarchart.append(""g"")
        .call(d3.axisLeft(yScaleBarchart));
    });
  </script>
</body>
</html>
```",Correct,465,466
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Energy Consumed and Cost, and a Bar Chart on the right that displays Energy Sector versus Energy Consumed. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Energy Consumption Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: inline-block;
      vertical-align: top;
    }
    .scatterplot {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
    .barchart {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart scatterplot"" id=""scatterplot""></div>
  <div class=""chart barchart"" id=""barchart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svgScatterplot = d3.select(""#scatterplot"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const svgBarchart = d3.select(""#barchart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    let brush = null;
    let brushed = [];

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"").then(data => {
      data.forEach(d => {
        d[""Energy Consumed""] = +d[""Energy Consumed""];
        d[""Cost""] = +d[""Cost""];
      });

      const xScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Energy Consumed""])])
        .range([0, width]);

      const yScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Cost""])])
        .range([height, 0]);

      const xScaleBarchart = d3.scaleBand()
        .domain(data.map(d => d[""Energy Sector""]))
        .range([0, width])
        .padding(0.2);

      const yScaleBarchart = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Energy Consumed""])])
        .range([height, 0]);

      svgScatterplot.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScaleScatterplot(d[""Energy Consumed""]))
        .attr(""cy"", d => yScaleScatterplot(d[""Cost""]))
        .attr(""r"", 5)
        .attr(""fill"", ""steelblue"");

      svgBarchart.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", d => xScaleBarchart(d[""Energy Sector""]))
        .attr(""y"", d => yScaleBarchart(d[""Energy Consumed""]))
        .attr(""width"", xScaleBarchart.bandwidth())
        .attr(""height"", d => height - yScaleBarchart(d[""Energy Consumed""]))
        .attr(""fill"", ""steelblue"");

      brush = d3.brush()
        .extent([[0, 0], [width, height]])
        .on(""brush"", brushed);

      svgScatterplot.call(brush);

      function brushed(event) {
        const selection = event.selection;
        if (selection) {
          const [x0, y0, x1, y1] = selection;
          const brushedData = data.filter(d => {
            const x = xScaleScatterplot(d[""Energy Consumed""]);
            const y = yScaleScatterplot(d[""Cost""]);
            return x >= x0 && x <= x1 && y >= y0 && y <= y1;
          });
          svgBarchart.selectAll(""rect"")
            .attr(""fill"", d => brushedData.includes(d) ? ""red"" : ""steelblue"");
        } else {
          svgBarchart.selectAll(""rect"")
            .attr(""fill"", ""steelblue"");
        }
      }
    });
  </script>
</body>
</html>
```",Unexpected Execution Result,466,467
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Energy Consumed , while the pie chart represents the distribution of Cost.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Energy Consumption Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: block;
      margin: 20px auto;
    }
  </style>
</head>
<body>
  <div id=""line-chart"" class=""chart""></div>
  <div id=""pie-chart"" class=""chart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const lineChart = d3.select(""#line-chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const pieChart = d3.select(""#pie-chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left + width / 2}, ${margin.top + height / 2})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"").then(data => {
      data.forEach(d => {
        d[""Energy Consumed""] = +d[""Energy Consumed""];
        d[""Cost""] = +d[""Cost""];
      });

      const xScale = d3.scaleTime()
        .domain(d3.extent(data, d => new Date(d.Month)))
        .range([0, width]);

      const yScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Energy Consumed""])])
        .range([height, 0]);

      lineChart.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

      lineChart.append(""g"")
        .call(d3.axisLeft(yScale));

      lineChart.append(""path"")
        .datum(data)
        .attr(""fill"", ""none"")
        .attr(""stroke"", ""steelblue"")
        .attr(""stroke-width"", 1.5)
        .attr(""d"", d3.line()
          .x(d => xScale(new Date(d.Month)))
          .y(d => yScale(d[""Energy Consumed""])));

      const pie = d3.pie()
        .value(d => d[""Cost""]);

      const arc = d3.arc()
        .outerRadius(width / 4)
        .innerRadius(0);

      const arcs = pieChart.selectAll(""arc"")
        .data(pie(data))
        .enter()
        .append(""path"")
        .attr(""fill"", (d, i) => d3.schemeCategory10[i])
        .attr(""d"", arc);

      const labels = pieChart.selectAll(""text"")
        .data(pie(data))
        .enter()
        .append(""text"")
        .attr(""transform"", d => `translate(${arc.centroid(d)})`)
        .attr(""text-anchor"", ""middle"")
        .text(d => `${d.data.Region}: ${d.value.toFixed(2)}`);
    });
  </script>
</body>
</html>
```",Initialization Error,467,468
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Energy Consumed , while the pie chart represents the distribution of Cost. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Cost for the selected group.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Energy Consumption Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: block;
    }
    .line-chart {
      width: 800px;
      height: 400px;
      margin: 50px auto;
    }
    .pie-chart {
      width: 800px;
      height: 400px;
      margin: 50px auto;
    }
  </style>
</head>
<body>
  <div class=""chart line-chart""></div>
  <div class=""chart pie-chart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const lineChart = d3.select('.line-chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    const pieChart = d3.select('.pie-chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left + width / 2}, ${margin.top + height / 2})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
      .then(data => {
        data.forEach(d => {
          d['Energy Consumed'] = +d['Energy Consumed'];
          d['Cost'] = +d['Cost'];
        });

        const xScale = d3.scaleTime()
          .domain(d3.extent(data, d => new Date(d.Month)))
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Energy Consumed'])])
          .range([height, 0]);

        const line = d3.line()
          .x(d => xScale(new Date(d.Month)))
          .y(d => yScale(d['Energy Consumed']));

        lineChart.append('path')
          .datum(data)
          .attr('fill', 'none')
          .attr('stroke', 'steelblue')
          .attr('stroke-width', 1.5)
          .attr('d', line);

        lineChart.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        lineChart.append('g')
          .call(d3.axisLeft(yScale));

        const brush = d3.brushX()
          .extent([[0, 0], [width, height]])
          .on('brush end', brushed);

        lineChart.append('g')
          .attr('class', 'brush')
          .call(brush);

        function brushed() {
          const selection = d3.event.selection;
          const filteredData = data.filter(d => {
            const x = xScale(new Date(d.Month));
            return x >= selection[0] && x <= selection[1];
          });

          const pieData = d3.rollup(filteredData, v => d3.sum(v, d => d['Cost']), d => d.Region);

          const pie = d3.pie()
            .value(d => d[1]);

          const arc = d3.arc()
            .outerRadius(height / 2 - 20)
            .innerRadius(0);

          pieChart.selectAll('path')
            .remove();

          pieChart.selectAll('path')
            .data(pie(pieData))
            .enter()
            .append('path')
            .attr('d', arc)
            .attr('fill', (d, i) => d3.schemeCategory10[i]);
        }
      });
  </script>
</body>
</html>
```",Initialization Error,468,469
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Energy Consumed, Revenue, Cost, Emissions, and Renewable. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot Matrix</title>
  <style>
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
    .brush .extent {
      stroke: #fff;
      fill-opacity: .125;
      shape-rendering: crispEdges;
    }
  </style>
</head>
<body>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 100, right: 100, bottom: 100, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 800 - margin.top - margin.bottom;
    const size = 200;

    const dimensions = [""Energy Consumed"", ""Revenue"", ""Cost"", ""Emissions"", ""Renewable""];
    const n = dimensions.length;

    const x = [];
    const y = [];
    for (let i = 0; i < n; ++i) {
      x.push(d3.scaleLinear()
        .domain([0, 100])
        .range([0, size]));
      y.push(d3.scaleLinear()
        .domain([0, 100])
        .range([size, 0]));
    }

    const svg = d3.select(""body"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"").then(data => {
      data.forEach(d => {
        dimensions.forEach(p => {
          d[p] = +d[p];
        });
      });

      const brush = d3.brush()
        .extent([[0, 0], [size, size]])
        .on(""start"", brushstart)
        .on(""brush"", brushmove)
        .on(""end"", brushend);

      const cell = svg.selectAll("".cell"")
        .data(cross(dimensions, dimensions))
        .enter().append(""g"")
        .attr(""class"", ""cell"")
        .attr(""transform"", d => `translate(${d.i * size}, ${d.j * size})`);

      cell.append(""rect"")
        .attr(""class"", ""frame"")
        .attr(""x"", 0)
        .attr(""y"", 0)
        .attr(""width"", size)
        .attr(""height"", size);

      cell.filter(d => d.i === d.j).append(""text"")
        .attr(""x"", size / 2)
        .attr(""y"", size / 2)
        .attr(""dy"", "".5em"")
        .attr(""text-anchor"", ""middle"")
        .text(d => d.x);

      cell.append(""g"")
        .attr(""class"", ""x axis"")
        .attr(""transform"", d => `translate(0, ${size})`)
        .call(d3.axisBottom(x[d.j]).ticks(5));

      cell.append(""g"")
        .attr(""class"", ""y axis"")
        .call(d3.axisLeft(y[d.i]).ticks(5));

      cell.append(""g"")
        .attr(""class"", ""brush"")
        .call(brush);

      cell.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => x[d.j](d[dimensions[d.j]]))
        .attr(""cy"", d => y[d.i](d[dimensions[d.i]]))
        .attr(""r"", 3);

      function brushstart() {
        cell.selectAll(""circle"").classed(""hidden"", true);
      }

      function brushmove() {
        const e = d3.event.selection;
        cell.selectAll(""circle"")
          .classed(""hidden"", d => {
            const x = x[d.j](d[dimensions[d.j]]);
            const y = y[d.i](d[dimensions[d.i]]);
            return !e || e[0][0] > x || x > e[1][0] || e[0][1] > y || y > e[1][1];
          });
      }

      function brushend() {
        const e = d3.event.selection;
        if (!e) {
          cell.selectAll(""circle"").classed(""hidden"", false);
        }
      }
    });

    function cross(a, b) {
      const c = [];
      for (let i = 0; i < a.length; i++) {
        for (let j = 0; j < b.length; j++) {
          c.push({ x: a[i], i: i, y: b[j], j: j });
        }
      }
      return c;
    }
  </script>
</body>
</html>
```",Unexpected Initial Result,469,470
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a brushable Scatterplot that visualizes the relationship between Energy Consumed and Cost. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Energy Consumption Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .brush {
      fill: #ccc;
    }
    .brush .extent {
      fill-opacity: .3;
      stroke: #fff;
      shape-rendering: crispEdges;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <div id=""table""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 200, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Energy Consumed""] = +d[""Energy Consumed""];
          d[""Cost""] = +d[""Cost""];
        });

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Energy Consumed""])])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Cost""])])
          .range([height, 0]);

        svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d[""Energy Consumed""]))
          .attr(""cy"", d => yScale(d[""Cost""]))
          .attr(""r"", 5);

        const brush = d3.brush()
          .extent([[0, 0], [width, height]])
          .on(""brush"", brushed);

        svg.append(""g"")
          .attr(""class"", ""brush"")
          .call(brush);

        function brushed({ selection }) {
          const selectedData = data.filter(d => {
            const x = xScale(d[""Energy Consumed""]);
            const y = yScale(d[""Cost""]);
            return selection[0][0] <= x && x <= selection[1][0] && selection[0][1] <= y && y <= selection[1][1];
          });

          const table = d3.select(""#table"");
          table.selectAll(""*"").remove();

          const tableHtml = selectedData.slice(0, 20).map(d => {
            return `
              <tr>
                <td>${d[""Month""]}</td>
                <td>${d[""Energy Sector""]}</td>
                <td>${d[""Energy Consumed""]}</td>
                <td>${d[""Cost""]}</td>
                <td>${d[""Emissions""]}</td>
                <td>${d[""Number of Plants""]}</td>
                <td>${d[""Revenue""]}</td>
                <td>${d[""Renewable""]}</td>
                <td>${d[""Region""]}</td>
              </tr>
            `;
          }).join("""");

          table.append(""table"")
            .html(`
              <table>
                <tr>
                  <th>Month</th>
                  <th>Energy Sector</th>
                  <th>Energy Consumed</th>
                  <th>Cost</th>
                  <th>Emissions</th>
                  <th>Number of Plants</th>
                  <th>Revenue</th>
                  <th>Renewable</th>
                  <th>Region</th>
                </tr>
                ${tableHtml}
              </table>
            `);
        }
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,470,471
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a horizontal Bar Chart that shows all the data concerning Energy Consumed, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Energy Consumption Bar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      position: relative;
      display: inline-block;
    }
    .minimap {
      position: absolute;
      top: 0;
      right: 0;
      width: 100px;
      height: 400px;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 120, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;
    const minimapWidth = 100;
    const minimapHeight = height;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right + minimapWidth)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Energy Consumed""] = +d[""Energy Consumed""];
        });

        const x = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Energy Consumed""])])
          .range([0, width]);

        const y = d3.scaleBand()
          .domain(data.map(d => d.Month))
          .range([0, height])
          .padding(0.2);

        svg.selectAll(""rect"")
          .data(data)
          .enter()
          .append(""rect"")
          .attr(""x"", 0)
          .attr(""y"", d => y(d.Month))
          .attr(""width"", d => x(d[""Energy Consumed""]))
          .attr(""height"", y.bandwidth());

        const minimapX = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Energy Consumed""])])
          .range([0, minimapWidth]);

        const minimapY = d3.scaleBand()
          .domain(data.map(d => d.Month))
          .range([0, minimapHeight])
          .padding(0.2);

        const minimap = svg.append(""g"")
          .attr(""class"", ""minimap"")
          .attr(""transform"", `translate(${width + margin.right}, 0)`);

        minimap.selectAll(""rect"")
          .data(data)
          .enter()
          .append(""rect"")
          .attr(""x"", 0)
          .attr(""y"", d => minimapY(d.Month))
          .attr(""width"", d => minimapX(d[""Energy Consumed""]))
          .attr(""height"", minimapY.bandwidth());

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(x));

        svg.append(""g"")
          .call(d3.axisLeft(y));
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,471,472
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Energy Consumed and Cost, and a Bar Chart on the right that displays Energy Sector versus Energy Consumed.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px; display: flex; justify-content: space-between;"">
        <div id=""scatterplot"" style=""width: 50%; height: 100%;""></div>
        <div id=""barchart"" style=""width: 50%; height: 100%;""></div>
    </div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const scatterplotData = csvData.map(row => [+row[2], +row[3]]);
                const barchartData = {};
                csvData.forEach(row => {
                    if (!barchartData[row[1]]) {
                        barchartData[row[1]] = 0;
                    }
                    barchartData[row[1]] += +row[2];
                });
                const barchartXAxis = Object.keys(barchartData);
                const barchartSeries = Object.values(barchartData);

                const scatterplotChart = echarts.init(document.getElementById('scatterplot'));
                scatterplotChart.setOption({
                    title: {
                        text: 'Energy Consumed vs Cost'
                    },
                    xAxis: {
                        type: 'value'
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        type: 'scatter',
                        data: scatterplotData
                    }]
                });

                const barchartChart = echarts.init(document.getElementById('barchart'));
                barchartChart.setOption({
                    title: {
                        text: 'Energy Sector vs Energy Consumed'
                    },
                    xAxis: {
                        type: 'category',
                        data: barchartXAxis
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        type: 'bar',
                        data: barchartSeries
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,472,473
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Energy Consumed and Cost, and a Bar Chart on the right that displays Energy Sector versus Energy Consumed. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <style>
        #chart-container {
            display: flex;
            width: 100%;
            height: 600px;
        }
        #scatterplot {
            width: 50%;
            height: 100%;
        }
        #barchart {
            width: 50%;
            height: 100%;
        }
    </style>
</head>
<body>
    <div id=""chart-container"">
        <div id=""scatterplot""></div>
        <div id=""barchart""></div>
    </div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const energySectors = [...new Set(csvData.map(row => row[1]))];
                const scatterplotData = csvData.map(row => [+row[2], +row[3]]);
                const barchartData = energySectors.map(sector => {
                    const sectorData = csvData.filter(row => row[1] === sector);
                    return [sector, sectorData.reduce((sum, row) => sum + +row[2], 0)];
                });

                const scatterplotChart = echarts.init(document.getElementById('scatterplot'));
                const barchartChart = echarts.init(document.getElementById('barchart'));

                const option = {
                    scatterplot: {
                        title: {
                            text: 'Energy Consumed vs Cost'
                        },
                        xAxis: {
                            type: 'value',
                            name: 'Energy Consumed'
                        },
                        yAxis: {
                            type: 'value',
                            name: 'Cost'
                        },
                        series: [
                            {
                                type: 'scatter',
                                data: scatterplotData,
                                emphasis: {
                                    focus: 'series'
                                }
                            }
                        ],
                        brush: {
                            toolbox: ['rect', 'polygon', 'clear'],
                            xAxisIndex: 0,
                            throttleType: 'debounce',
                            throttleDelay: 100
                        }
                    },
                    barchart: {
                        title: {
                            text: 'Energy Sector vs Energy Consumed'
                        },
                        xAxis: {
                            type: 'category',
                            data: energySectors
                        },
                        yAxis: {
                            type: 'value',
                            name: 'Energy Consumed'
                        },
                        series: [
                            {
                                type: 'bar',
                                data: barchartData.map(row => row[1]),
                                emphasis: {
                                    focus: 'series'
                                }
                            }
                        ]
                    }
                };

                scatterplotChart.setOption(option.scatterplot);
                barchartChart.setOption(option.barchart);

                scatterplotChart.on('brushSelected', params => {
                    const selectedData = params.batch[0].areas[0].range;
                    const startIndex = Math.floor(selectedData[0][0] / (option.scatterplot.xAxis.max - option.scatterplot.xAxis.min) * scatterplotData.length);
                    const endIndex = Math.floor(selectedData[0][1] / (option.scatterplot.xAxis.max - option.scatterplot.xAxis.min) * scatterplotData.length);
                    const selectedPoints = scatterplotData.slice(startIndex, endIndex).map(point => point[0]);
                    const selectedSectors = [...new Set(csvData.filter(row => selectedPoints.includes(+row[2])).map(row => row[1]))];
                    const selectedBarchartData = barchartData.filter(row => selectedSectors.includes(row[0]));

                    barchartChart.dispatchAction({
                        type: 'highlight',
                        seriesIndex: 0,
                        dataIndex: barchartData.findIndex(row => row[0] === selectedBarchartData[0][0])
                    });
                });
            });
    </script>
</body>
</html>
```",Execution Error,473,474
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Energy Consumed , while the pie chart represents the distribution of Cost.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const energyConsumedData = csvData.map(row => row.split(',')[2]);
                const costData = csvData.map(row => row.split(',')[3]);
                const monthData = csvData.map(row => row.split(',')[0]);

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    grid: [
                        {
                            top: '10%',
                            left: '10%',
                            right: '10%',
                            height: '40%'
                        },
                        {
                            top: '60%',
                            left: '10%',
                            right: '10%',
                            height: '30%'
                        }
                    ],
                    yAxis: [
                        {
                            gridIndex: 0,
                            type: 'value'
                        },
                        {
                            gridIndex: 1,
                            type: 'value'
                        }
                    ],
                    xAxis: [
                        {
                            gridIndex: 0,
                            type: 'category',
                            data: monthData
                        },
                        {
                            gridIndex: 1,
                            type: 'category',
                            data: [...new Set(csvData.map(row => row.split(',')[1]))]
                        }
                    ],
                    series: [
                        {
                            name: 'Energy Consumed',
                            type: 'line',
                            xAxisIndex: 0,
                            yAxisIndex: 0,
                            data: energyConsumedData
                        },
                        {
                            name: 'Cost Distribution',
                            type: 'pie',
                            xAxisIndex: 1,
                            yAxisIndex: 1,
                            radius: '60%',
                            center: ['50%', '40%'],
                            data: [...new Set(csvData.map(row => row.split(',')[1]))].map(energySector => {
                                const sectorData = csvData.filter(row => row.split(',')[1] === energySector);
                                return {
                                    name: energySector,
                                    value: sectorData.reduce((acc, row) => acc + parseFloat(row.split(',')[3]), 0)
                                };
                            })
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,474,475
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Energy Consumed , while the pie chart represents the distribution of Cost. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Cost for the selected group.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <style>
        #chart {
            width: 800px;
            height: 600px;
            border: 1px solid #ccc;
            padding: 20px;
        }
    </style>
</head>
<body>
    <div id=""chart""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const months = csvData.map(row => row[0]);
                const energyConsumed = csvData.map(row => parseFloat(row[2]));
                const cost = csvData.map(row => parseFloat(row[3]));

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'cross',
                            crossStyle: {
                                color: '#999'
                            }
                        }
                    },
                    toolbox: {
                        feature: {
                            dataView: { show: true, readOnly: false },
                            magicType: { show: true, type: ['line', 'bar'] },
                            restore: { show: true },
                            saveAsImage: { show: true }
                        }
                    },
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 100
                        },
                        {
                            start: 0,
                            end: 100
                        }
                    ],
                    grid: [
                        {
                            top: '10%',
                            left: '10%',
                            right: '10%',
                            height: '40%'
                        },
                        {
                            top: '60%',
                            left: '10%',
                            right: '10%',
                            height: '30%'
                        }
                    ],
                    xAxis: [
                        {
                            type: 'category',
                            data: months,
                            gridIndex: 0
                        },
                        {
                            type: 'category',
                            data: months,
                            gridIndex: 1
                        }
                    ],
                    yAxis: [
                        {
                            type: 'value',
                            gridIndex: 0
                        },
                        {
                            type: 'value',
                            gridIndex: 1
                        }
                    ],
                    series: [
                        {
                            name: 'Energy Consumed',
                            type: 'line',
                            data: energyConsumed,
                            xAxisIndex: 0,
                            yAxisIndex: 0,
                            markLine: {
                                data: [{ type: 'max', name: 'Max' }, { type: 'min', name: 'Min' }]
                            }
                        },
                        {
                            name: 'Cost',
                            type: 'pie',
                            data: cost.map((value, index) => ({ value, name: months[index] })),
                            radius: '60%',
                            center: ['50%', '50%'],
                            gridIndex: 1
                        }
                    ]
                };

                chart.setOption(option);

                chart.on('brushSelected', params => {
                    const selectedData = params.batch[0].selected[0].data;
                    const startIndex = selectedData[0].dataIndex[0];
                    const endIndex = selectedData[selectedData.length - 1].dataIndex[0];
                    const selectedCost = cost.slice(startIndex, endIndex + 1);
                    const selectedMonths = months.slice(startIndex, endIndex + 1);

                    chart.setOption({
                        series: [
                            {
                                name: 'Cost',
                                type: 'pie',
                                data: selectedCost.map((value, index) => ({ value, name: selectedMonths[index] })),
                                radius: '60%',
                                center: ['50%', '50%'],
                                gridIndex: 1
                            }
                        ]
                    });
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,475,476
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Energy Consumed, Revenue, Cost, Emissions, and Renewable. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/d3@7.4.4/dist/d3.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 1000px; height: 800px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = d3.csvParse(data);
                const dimensions = ['Energy Consumed', 'Revenue', 'Cost', 'Emissions', 'Renewable'];
                const matrixData = [];
                dimensions.forEach((dimension1, index1) => {
                    dimensions.forEach((dimension2, index2) => {
                        const seriesData = [];
                        csvData.forEach(row => {
                            seriesData.push([parseFloat(row[dimension1]), parseFloat(row[dimension2])]);
                        });
                        matrixData.push({
                            name: `${dimension1} vs ${dimension2}`,
                            type: 'scatter',
                            data: seriesData,
                            xAxisIndex: index2,
                            yAxisIndex: index1,
                            tooltip: {
                                trigger: 'item'
                            }
                        });
                    });
                });
                const option = {
                    tooltip: {
                        trigger: 'item'
                    },
                    grid: dimensions.map((_, index) => ({
                        left: index * 200,
                        top: 0,
                        width: 200,
                        height: 200
                    })),
                    xAxis: dimensions.map((dimension, index) => ({
                        gridIndex: index,
                        type: 'value',
                        name: dimension,
                        nameLocation: 'middle',
                        nameGap: 30,
                        nameTextStyle: {
                            fontSize: 16
                        }
                    })),
                    yAxis: dimensions.map((dimension, index) => ({
                        gridIndex: index,
                        type: 'value',
                        name: dimension,
                        nameLocation: 'middle',
                        nameGap: 30,
                        nameTextStyle: {
                            fontSize: 16
                        }
                    })),
                    series: matrixData,
                    brush: {
                        xAxisIndex: 'all',
                        yAxisIndex: 'all',
                        brushLink: 'all',
                        brushType: 'rect',
                        toolbox: ['rect', 'keep', 'clear'],
                        throttleType: 'debounce',
                        throttleDelay: 300
                    }
                };
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,476,477
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a brushable Scatterplot that visualizes the relationship between Energy Consumed and Cost. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <style>
        #chart {
            width: 800px;
            height: 600px;
            border: 1px solid #ccc;
            margin: 20px auto;
        }
        #table {
            width: 300px;
            height: 600px;
            border: 1px solid #ccc;
            margin: 20px auto;
            float: right;
        }
    </style>
</head>
<body>
    <div id=""chart""></div>
    <div id=""table""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = csvData.map(row => {
                    const columns = row.split(',');
                    return {
                        EnergyConsumed: parseFloat(columns[2]),
                        Cost: parseFloat(columns[3]),
                        Month: columns[0],
                        'Energy Sector': columns[1],
                        Emissions: columns[4],
                        'Number of Plants': columns[5],
                        Revenue: columns[6],
                        Renewable: columns[7],
                        Region: columns[8]
                    };
                });

                const chart = echarts.init(document.getElementById('chart'));
                const table = document.getElementById('table');

                chart.setOption({
                    title: {
                        text: 'Energy Consumption Scatterplot'
                    },
                    tooltip: {
                        formatter: params => {
                            const data = params.data;
                            return `
                                Month: ${data.Month}<br>
                                Energy Sector: ${data['Energy Sector']}<br>
                                Energy Consumed: ${data.EnergyConsumed}<br>
                                Cost: ${data.Cost}<br>
                                Emissions: ${data.Emissions}<br>
                                Number of Plants: ${data['Number of Plants']}<br>
                                Revenue: ${data.Revenue}<br>
                                Renewable: ${data.Renewable}<br>
                                Region: ${data.Region}
                            `;
                        }
                    },
                    brush: {
                        id: 'brush',
                        brushLink: 'all',
                        xAxisIndex: 'all',
                        yAxisIndex: 'all',
                        brushType: 'rect',
                        transformable: false,
                        throttleType: 'debounce',
                        throttleDelay: 100,
                        brushStyle: {
                            borderWidth: 2,
                            color: 'rgba(120,140,180,0.3)',
                            borderColor: 'rgba(120,140,180,0.8)'
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Energy Consumed'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Cost'
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: chartData,
                            symbolSize: 10,
                            itemStyle: {
                                color: '#4f81bd'
                            }
                        }
                    ]
                });

                chart.on('brushSelected', params => {
                    const selectedData = params.batch[0].selected[0].data;
                    const tableHtml = `
                        <table border=""1"">
                            <tr>
                                <th>Month</th>
                                <th>Energy Sector</th>
                                <th>Energy Consumed</th>
                                <th>Cost</th>
                                <th>Emissions</th>
                                <th>Number of Plants</th>
                                <th>Revenue</th>
                                <th>Renewable</th>
                                <th>Region</th>
                            </tr>
                            ${selectedData.slice(0, 20).map(data => `
                                <tr>
                                    <td>${data.Month}</td>
                                    <td>${data['Energy Sector']}</td>
                                    <td>${data.EnergyConsumed}</td>
                                    <td>${data.Cost}</td>
                                    <td>${data.Emissions}</td>
                                    <td>${data['Number of Plants']}</td>
                                    <td>${data.Revenue}</td>
                                    <td>${data.Renewable}</td>
                                    <td>${data.Region}</td>
                                </tr>
                            `).join('')}
                        </table>
                    `;
                    table.innerHTML = tableHtml;
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,477,478
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a horizontal Bar Chart that shows all the data concerning Energy Consumed, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 1000px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const energyConsumedData = csvData.map(item => item.split(',')).map(item => [item[0], parseFloat(item[2])]);

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '20%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'value',
                        position: 'top'
                    },
                    yAxis: {
                        type: 'category',
                        data: energyConsumedData.map(item => item[0]),
                        axisLabel: {
                            interval: 0,
                            rotate: 30
                        }
                    },
                    series: [
                        {
                            name: 'Energy Consumed',
                            type: 'bar',
                            data: energyConsumedData.map(item => item[1])
                        }
                    ],
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 10
                        },
                        {
                            show: true,
                            type: 'slider',
                            start: 0,
                            end: 10,
                            handleSize: 8,
                            height: 8,
                            bottom: 0,
                            left: 0,
                            right: 0,
                            borderColor: '#ccc',
                            backgroundColor: '#ccc',
                            fillerColor: '#ccc',
                            handleStyle: {
                                color: '#fff'
                            },
                            textStyle: {
                                color: '#333'
                            },
                            borderColor: '#ccc',
                            backgroundColor: '#ccc',
                            fillerColor: '#ccc',
                            handleStyle: {
                                color: '#fff'
                            },
                            textStyle: {
                                color: '#333'
                            }
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,478,479
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Energy Consumed and Cost, and a Bar Chart on the right that displays Energy Sector versus Energy Consumed.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Energy Consumption Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: row;
    }
  </style>
</head>
<body>
  <div id=""vis"">
    <div id=""scatterplot""></div>
    <div id=""barchart""></div>
  </div>

  <script>
    const scatterplotSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Energy Consumed"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Cost"", ""type"": ""quantitative""}
      }
    };

    const barchartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"" },
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Energy Sector"", ""type"": ""nominal"", ""sort"": ""-y""},
        ""y"": {""field"": ""Energy Consumed"", ""type"": ""quantitative"", ""aggregate"": ""sum""}
      }
    };

    vegaEmbed(""#scatterplot"", scatterplotSpec);
    vegaEmbed(""#barchart"", barchartSpec);
  </script>
</body>
</html>
```",Correct,479,480
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Energy Consumed and Cost, and a Bar Chart on the right that displays Energy Sector versus Energy Consumed. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Energy Consumption Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: row;
    }
    #scatterplot {
      width: 50%;
    }
    #barchart {
      width: 50%;
    }
  </style>
</head>
<body>
  <div id=""vis"">
    <div id=""scatterplot""></div>
    <div id=""barchart""></div>
  </div>

  <script>
    const scatterplotSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Energy Consumed"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Cost"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Energy Sector"", ""type"": ""nominal""}
      },
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x"", ""y""]}
      }
    };

    const barchartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"" },
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Energy Sector"", ""type"": ""nominal"", ""axis"": {""labelAngle"": 0}},
        ""y"": {""field"": ""Energy Consumed"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Energy Sector"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#scatterplot"", scatterplotSpec, { ""actions"": false })
      .then(result => {
        const scatterplotView = result.view;
        vegaEmbed(""#barchart"", barchartSpec, { ""actions"": false })
          .then(result => {
            const barchartView = result.view;
            scatterplotView.addSignalListener(""brush"", (name, value) => {
              if (value) {
                const filter = `datum[""Energy Consumed""] >= ${value[0][0]} && datum[""Energy Consumed""] <= ${value[1][0]} && datum[""Cost""] >= ${value[0][1]} && datum[""Cost""] <= ${value[1][1]}`;
                barchartView.signal(""brush"", filter);
              } else {
                barchartView.signal(""brush"", null);
              }
              barchartView.run();
            });
          });
      });
  </script>
</body>
</html>
```",Unexpected Execution Result,480,481
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Energy Consumed , while the pie chart represents the distribution of Cost.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Energy Consumption Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const lineChartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"" },
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {""field"": ""Month"", ""type"": ""nominal""},
        ""y"": {""field"": ""Energy Consumed"", ""type"": ""quantitative""}
      }
    };

    const pieChartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"" },
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Cost"", ""type"": ""quantitative"", ""stack"": true},
        ""color"": {""field"": ""Region"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", lineChartSpec, { mode: ""vega-lite"" });
    vegaEmbed(""#vis"", pieChartSpec, { mode: ""vega-lite"" });
  </script>
</body>
</html>
```",Unexpected Initial Result,481,482
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Energy Consumed , while the pie chart represents the distribution of Cost. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Cost for the selected group.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Energy Consumption Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 800,
      ""height"": 600,
      ""padding"": 5,
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv""
      },
      ""vconcat"": [
        {
          ""mark"": ""line"",
          ""encoding"": {
            ""x"": {
              ""field"": ""Month"",
              ""type"": ""nominal""
            },
            ""y"": {
              ""field"": ""Energy Consumed"",
              ""type"": ""quantitative""
            },
            ""tooltip"": [
              {""field"": ""Month"", ""type"": ""nominal""},
              {""field"": ""Energy Consumed"", ""type"": ""quantitative""}
            ]
          },
          ""selection"": {
            ""brush"": {
              ""type"": ""interval"",
              ""encodings"": [""x""]
            }
          }
        },
        {
          ""mark"": ""arc"",
          ""encoding"": {
            ""theta"": {
              ""field"": ""Cost"",
              ""type"": ""quantitative"",
              ""aggregate"": ""sum""
            },
            ""color"": {
              ""field"": ""Region"",
              ""type"": ""nominal""
            }
          },
          ""transform"": [
            {
              ""filter"": {
                ""selection"": ""brush""
              }
            }
          ]
        }
      ]
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Execution Result,482,483
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Energy Consumed, Revenue, Cost, Emissions, and Renewable. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Scatterplot Matrix</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to make the chart more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    // Define the data and the chart specification
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""isValid(datum['Energy Consumed']) && isValid(datum['Revenue']) && isValid(datum['Cost']) && isValid(datum['Emissions']) && isValid(datum['Renewable'])""}
      ],
      ""spacing"": 50,
      ""vconcat"": [
        {
          ""mark"": ""point"",
          ""selection"": {
            ""brush"": {""type"": ""interval"", ""encodings"": [""x"", ""y""]}
          },
          ""encoding"": {
            ""x"": {""field"": ""Energy Consumed"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
            ""color"": {""condition"": {""test"": ""length(datum.brush) > 0"", ""value"": ""red""}, ""value"": ""steelblue""}
          }
        },
        {
          ""mark"": ""point"",
          ""encoding"": {
            ""x"": {""field"": ""Energy Consumed"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Cost"", ""type"": ""quantitative""},
            ""color"": {""condition"": {""test"": ""length(datum.brush) > 0"", ""value"": ""red""}, ""value"": ""steelblue""}
          }
        },
        {
          ""mark"": ""point"",
          ""encoding"": {
            ""x"": {""field"": ""Energy Consumed"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Emissions"", ""type"": ""quantitative""},
            ""color"": {""condition"": {""test"": ""length(datum.brush) > 0"", ""value"": ""red""}, ""value"": ""steelblue""}
          }
        },
        {
          ""mark"": ""point"",
          ""encoding"": {
            ""x"": {""field"": ""Energy Consumed"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Renewable"", ""type"": ""quantitative""},
            ""color"": {""condition"": {""test"": ""length(datum.brush) > 0"", ""value"": ""red""}, ""value"": ""steelblue""}
          }
        },
        {
          ""mark"": ""point"",
          ""encoding"": {
            ""x"": {""field"": ""Revenue"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Cost"", ""type"": ""quantitative""},
            ""color"": {""condition"": {""test"": ""length(datum.brush) > 0"", ""value"": ""red""}, ""value"": ""steelblue""}
          }
        },
        {
          ""mark"": ""point"",
          ""encoding"": {
            ""x"": {""field"": ""Revenue"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Emissions"", ""type"": ""quantitative""},
            ""color"": {""condition"": {""test"": ""length(datum.brush) > 0"", ""value"": ""red""}, ""value"": ""steelblue""}
          }
        },
        {
          ""mark"": ""point"",
          ""encoding"": {
            ""x"": {""field"": ""Revenue"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Renewable"", ""type"": ""quantitative""},
            ""color"": {""condition"": {""test"": ""length(datum.brush) > 0"", ""value"": ""red""}, ""value"": ""steelblue""}
          }
        },
        {
          ""mark"": ""point"",
          ""encoding"": {
            ""x"": {""field"": ""Cost"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Emissions"", ""type"": ""quantitative""},
            ""color"": {""condition"": {""test"": ""length(datum.brush) > 0"", ""value"": ""red""}, ""value"": ""steelblue""}
          }
        },
        {
          ""mark"": ""point"",
          ""encoding"": {
            ""x"": {""field"": ""Cost"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Renewable"", ""type"": ""quantitative""},
            ""color"": {""condition"": {""test"": ""length(datum.brush) > 0"", ""value"": ""red""}, ""value"": ""steelblue""}
          }
        },
        {
          ""mark"": ""point"",
          ""encoding"": {
            ""x"": {""field"": ""Emissions"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Renewable"", ""type"": ""quantitative""},
            ""color"": {""condition"": {""test"": ""length(datum.brush) > 0"", ""value"": ""red""}, ""value"": ""steelblue""}
          }
        }
      ]
    };

    // Embed the chart in the DOM
    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Initialization Error,483,484
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a brushable Scatterplot that visualizes the relationship between Energy Consumed and Cost. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Brushable Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 600,
      ""height"": 400,
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Energy Consumed"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Cost"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Month"", ""type"": ""nominal""},
          {""field"": ""Energy Sector"", ""type"": ""nominal""},
          {""field"": ""Energy Consumed"", ""type"": ""quantitative""},
          {""field"": ""Cost"", ""type"": ""quantitative""},
          {""field"": ""Emissions"", ""type"": ""quantitative""},
          {""field"": ""Number of Plants"", ""type"": ""quantitative""},
          {""field"": ""Revenue"", ""type"": ""quantitative""},
          {""field"": ""Renewable"", ""type"": ""nominal""},
          {""field"": ""Region"", ""type"": ""nominal""}
        ]
      },
      ""selection"": {
        ""brush"": {
          ""type"": ""interval"",
          ""encodings"": [""x"", ""y""]
        }
      }
    };

    const opts = {
      ""actions"": false
    };

    vegaEmbed(""#vis"", spec, opts).then(result => {
      const view = result.view;
      const brush = view.signal(""brush"");

      view.addEventListener(""mouseover"", () => {
        const table = document.createElement(""table"");
        table.style.position = ""absolute"";
        table.style.top = ""0px"";
        table.style.right = ""0px"";
        table.style.border = ""1px solid black"";
        document.body.appendChild(table);

        view.addEventListener(""brush"", () => {
          const brushData = view.data(""source_0"")[0].source;
          const filteredData = brushData.filter(d => {
            return (d.Energy_Consumed >= brush[0][0] && d.Energy_Consumed <= brush[1][0]) &&
                   (d.Cost >= brush[0][1] && d.Cost <= brush[1][1]);
          });

          table.innerHTML = """";
          const thead = document.createElement(""thead"");
          const tr = document.createElement(""tr"");
          [""Month"", ""Energy Sector"", ""Energy Consumed"", ""Cost"", ""Emissions"", ""Number of Plants"", ""Revenue"", ""Renewable"", ""Region""].forEach(field => {
            const th = document.createElement(""th"");
            th.textContent = field;
            tr.appendChild(th);
          });
          thead.appendChild(tr);
          table.appendChild(thead);

          const tbody = document.createElement(""tbody"");
          filteredData.slice(0, 20).forEach(d => {
            const tr = document.createElement(""tr"");
            [""Month"", ""Energy Sector"", ""Energy Consumed"", ""Cost"", ""Emissions"", ""Number of Plants"", ""Revenue"", ""Renewable"", ""Region""].forEach(field => {
              const td = document.createElement(""td"");
              td.textContent = d[field];
              tr.appendChild(td);
            });
            tbody.appendChild(tr);
          });
          table.appendChild(tbody);
        });
      });
    });
  </script>
</body>
</html>
```",Execution Error,484,485
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a horizontal Bar Chart that shows all the data concerning Energy Consumed, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Energy Consumption Bar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 700,
      ""height"": 500,
      ""layer"": [
        {
          ""mark"": ""bar"",
          ""encoding"": {
            ""x"": {""field"": ""Energy Consumed"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Month"", ""type"": ""nominal"", ""sort"": ""-x""},
            ""color"": {""field"": ""Energy Sector"", ""type"": ""nominal""}
          }
        },
        {
          ""mark"": ""bar"",
          ""width"": 30,
          ""x"": {""field"": ""Energy Consumed"", ""type"": ""quantitative""},
          ""y"": {""field"": ""Month"", ""type"": ""nominal"", ""sort"": ""-x""},
          ""color"": {""field"": ""Energy Sector"", ""type"": ""nominal""},
          ""transform"": [{""filter"": ""datum.Energy Consumed > 100""}]
        }
      ],
      ""data"": {""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv""}
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Initialization Error,485,486
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot that visualizes the relationship between Energy Consumed and Cost.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption vs Cost</title>
    <style>
        /* Add some basic styling to make the chart look better */
        body {
            font-family: Arial, sans-serif;
        }
        
        /* Style the SVG */
        svg {
            border: 1px solid lightgray;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        // Set up the SVG and margins
        const margin = { top: 50, right: 50, bottom: 50, left: 50 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;
        
        // Select the SVG and add a group to it
        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);
        
        // Load the data
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"")
            .then(data => {
                // Convert data types
                data.forEach(d => {
                    d[""Energy Consumed""] = +d[""Energy Consumed""];
                    d[""Cost""] = +d[""Cost""];
                });
                
                // Set up the scales
                const xScale = d3.scaleLinear()
                    .domain([0, d3.max(data, d => d[""Energy Consumed""])])
                    .range([0, width]);
                
                const yScale = d3.scaleLinear()
                    .domain([0, d3.max(data, d => d[""Cost""])])
                    .range([height, 0]);
                
                // Add the x-axis
                svg.append(""g"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(d3.axisBottom(xScale))
                    .append(""text"")
                    .attr(""x"", width / 2)
                    .attr(""y"", 30)
                    .attr(""text-anchor"", ""middle"")
                    .text(""Energy Consumed"");
                
                // Add the y-axis
                svg.append(""g"")
                    .call(d3.axisLeft(yScale))
                    .append(""text"")
                    .attr(""x"", -30)
                    .attr(""y"", height / 2)
                    .attr(""text-anchor"", ""middle"")
                    .attr(""transform"", ""rotate(-90)"")
                    .text(""Cost"");
                
                // Add the points
                svg.selectAll(""circle"")
                    .data(data)
                    .enter()
                    .append(""circle"")
                    .attr(""cx"", d => xScale(d[""Energy Consumed""]))
                    .attr(""cy"", d => yScale(d[""Cost""]))
                    .attr(""r"", 5)
                    .attr(""fill"", ""blue"");
            });
    </script>
</body>
</html>
```",Correct,486,487
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Line Chart that visualizes the trend of Energy Consumed over the Month for each Energy Sector.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Energy Consumption Trend</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 800px;
      height: 600px;
      margin: 50px auto;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 700;
    const height = 500;
    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Energy Consumed""] = +d[""Energy Consumed""];
          d.Month = d.Month;
        });

        const energySectors = [...new Set(data.map(d => d[""Energy Sector""]))];

        const xScale = d3.scalePoint()
          .domain(data.map(d => d.Month))
          .range([0, width])
          .padding(0.5);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Energy Consumed""])])
          .range([height, 0]);

        const line = d3.line()
          .x(d => xScale(d.Month))
          .y(d => yScale(d[""Energy Consumed""]));

        const groups = svg.selectAll(""g"")
          .data(energySectors)
          .enter()
          .append(""g"");

        groups.append(""path"")
          .datum(d => data.filter(f => f[""Energy Sector""] === d))
          .attr(""d"", line)
          .attr(""stroke"", (d, i) => d3.schemeCategory10[i])
          .attr(""stroke-width"", 2)
          .attr(""fill"", ""none"");

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        svg.append(""text"")
          .attr(""x"", width / 2)
          .attr(""y"", -20)
          .attr(""text-anchor"", ""middle"")
          .text(""Energy Consumption Trend"");

        svg.append(""text"")
          .attr(""x"", -20)
          .attr(""y"", height / 2)
          .attr(""text-anchor"", ""middle"")
          .attr(""transform"", ""rotate(-90)"")
          .text(""Energy Consumed"");

        svg.append(""text"")
          .attr(""x"", width / 2)
          .attr(""y"", height + 20)
          .attr(""text-anchor"", ""middle"")
          .text(""Month"");
      });
  </script>
</body>
</html>
```",Correct,487,488
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Bar Chart that visualizes the Energy Consumed for each Energy Sector in January.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Energy Consumption by Sector in January</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 800px;
      height: 600px;
      margin: 50px auto;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 100, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Energy Consumed""] = +d[""Energy Consumed""];
        });

        const januaryData = data.filter(d => d.Month === ""January"");

        const energySectors = [...new Set(januaryData.map(d => d[""Energy Sector""]))];

        const xScale = d3.scaleBand()
          .domain(energySectors)
          .range([0, width])
          .padding(0.2);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(januaryData, d => d[""Energy Consumed""])])
          .range([height, 0]);

        svg.selectAll(""rect"")
          .data(januaryData)
          .enter()
          .append(""rect"")
          .attr(""x"", d => xScale(d[""Energy Sector""]))
          .attr(""y"", d => yScale(d[""Energy Consumed""]))
          .attr(""width"", xScale.bandwidth())
          .attr(""height"", d => height - yScale(d[""Energy Consumed""]));

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        svg.append(""text"")
          .attr(""x"", width / 2)
          .attr(""y"", -30)
          .attr(""text-anchor"", ""middle"")
          .text(""Energy Consumption by Sector in January"");

        svg.append(""text"")
          .attr(""x"", -30)
          .attr(""y"", height / 2)
          .attr(""text-anchor"", ""middle"")
          .attr(""transform"", ""rotate(-90)"")
          .text(""Energy Consumed"");

        svg.append(""text"")
          .attr(""x"", width / 2)
          .attr(""y"", height + 30)
          .attr(""text-anchor"", ""middle"")
          .text(""Energy Sector"");
      });
  </script>
</body>
</html>
```",Correct,488,489
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Pie Chart that visualizes the proportion of Energy Consumed contributed by each Energy Sector in January.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Energy Consumption by Sector in January</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 500px;
      height: 500px;
      margin: 50px auto;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;
    const radius = Math.min(width, height) / 2;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${width / 2 + margin.left}, ${height / 2 + margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Energy Consumed""] = +d[""Energy Consumed""];
        });

        const januaryData = data.filter(d => d.Month === ""January"");

        const pie = d3.pie()
          .value(d => d[""Energy Consumed""]);

        const path = svg.selectAll(""path"")
          .data(pie(januaryData))
          .enter()
          .append(""path"")
          .attr(""d"", d3.arc()
            .outerRadius(radius)
            .innerRadius(0)
          )
          .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

        const legend = svg.selectAll("".legend"")
          .data(pie(januaryData))
          .enter()
          .append(""g"")
          .attr(""transform"", (d, i) => `translate(0, ${i * 20})`)
          .attr(""class"", ""legend"");

        legend.append(""rect"")
          .attr(""x"", width / 2 + 20)
          .attr(""y"", 10)
          .attr(""width"", 10)
          .attr(""height"", 10)
          .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

        legend.append(""text"")
          .attr(""x"", width / 2 + 35)
          .attr(""y"", 15)
          .text(d => d.data[""Energy Sector""]);
      });
  </script>
</body>
</html>
```",Correct,489,490
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Donut Chart that visualizes the distribution of Energy Consumed among Energy Sector in January.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Energy Consumption Distribution</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 500px;
      height: 500px;
      margin: 50px auto;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;
    const radius = Math.min(width, height) / 2;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${width / 2 + margin.left}, ${height / 2 + margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"")
      .then(data => {
        data = data.filter(d => d[""Month""] === ""January"");

        const energySectors = Array.from(new Set(data.map(d => d[""Energy Sector""])));

        const energyConsumed = {};
        energySectors.forEach(sector => {
          energyConsumed[sector] = d3.sum(data.filter(d => d[""Energy Sector""] === sector), d => +d[""Energy Consumed""]);
        });

        const pie = d3.pie()
          .value(d => d.value);

        const arc = d3.arc()
          .outerRadius(radius - 10)
          .innerRadius(radius - 100);

        const arcs = svg.selectAll(""arc"")
          .data(pie(Object.entries(energyConsumed)))
          .enter()
          .append(""path"")
          .attr(""d"", arc)
          .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

        const text = svg.selectAll(""text"")
          .data(pie(Object.entries(energyConsumed)))
          .enter()
          .append(""text"")
          .attr(""transform"", d => `translate(${arc.centroid(d)})`)
          .attr(""dy"", ""0.35em"")
          .text(d => d.data[0]);

        const legend = svg.selectAll(""legend"")
          .data(pie(Object.entries(energyConsumed)))
          .enter()
          .append(""g"")
          .attr(""transform"", (d, i) => `translate(0, ${i * 20})`);

        legend.append(""rect"")
          .attr(""x"", width / 2 + 100)
          .attr(""y"", 10)
          .attr(""width"", 10)
          .attr(""height"", 10)
          .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

        legend.append(""text"")
          .attr(""x"", width / 2 + 120)
          .attr(""y"", 15)
          .text(d => d.data[0]);
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,490,491
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Coxcomb Chart(polar area chart) to compare the Energy Consumed of different Energy Sector in January.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coxcomb Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 600px;
      height: 600px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 20, left: 20 };
    const width = 600 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Energy Consumed""] = +d[""Energy Consumed""];
        });

        const januaryData = data.filter(d => d.Month === ""January"");

        const energySectors = Array.from(new Set(januaryData.map(d => d[""Energy Sector""])));

        const angleScale = d3.scalePoint()
          .domain(energySectors)
          .range([0, 2 * Math.PI]);

        const radiusScale = d3.scaleLinear()
          .domain([0, d3.max(januaryData, d => d[""Energy Consumed""])])
          .range([0, Math.min(width, height) / 2]);

        svg.selectAll(""path"")
          .data(januaryData)
          .enter()
          .append(""path"")
          .attr(""d"", d => {
            const startAngle = angleScale(d[""Energy Sector""]);
            const endAngle = startAngle + (2 * Math.PI / energySectors.length);
            const radius = radiusScale(d[""Energy Consumed""]);
            return `M ${width / 2} ${height / 2} L ${width / 2 + radius * Math.cos(startAngle)} ${height / 2 + radius * Math.sin(startAngle)} A ${radius} ${radius} 0 ${endAngle - startAngle > Math.PI ? 1 : 0} 1 ${width / 2 + radius * Math.cos(endAngle)} ${height / 2 + radius * Math.sin(endAngle)} Z`;
          })
          .attr(""fill"", ""steelblue"")
          .attr(""stroke"", ""white"")
          .attr(""stroke-width"", 2);

        svg.selectAll(""text"")
          .data(energySectors)
          .enter()
          .append(""text"")
          .attr(""x"", (d, i) => width / 2 + (Math.min(width, height) / 2 + 20) * Math.cos(angleScale(d) + Math.PI / energySectors.length))
          .attr(""y"", (d, i) => height / 2 + (Math.min(width, height) / 2 + 20) * Math.sin(angleScale(d) + Math.PI / energySectors.length))
          .text(d => d);
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,491,492
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Radar Chart to compare the Energy Consumed of different Energy Sector in January.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Energy Consumption Radar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg width=""600"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 600 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;
    const svg = d3.select(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Energy Consumed""] = +d[""Energy Consumed""];
        });

        const januaryData = data.filter(d => d.Month === ""January"");

        const energySectors = [...new Set(januaryData.map(d => d[""Energy Sector""]))];

        const angles = energySectors.map((sector, i) => i * (2 * Math.PI / energySectors.length));

        const energyConsumed = januaryData.map(d => d[""Energy Consumed""]);

        const maxEnergyConsumed = Math.max(...energyConsumed);

        const radius = Math.min(width, height) / 2 - 50;

        const radarLine = d3.lineRadial()
          .angle((d, i) => angles[i])
          .radius(d => d * radius / maxEnergyConsumed);

        const g = svg.selectAll("".energy-sector"")
          .data(januaryData)
          .enter()
          .append(""g"")
          .attr(""class"", ""energy-sector"")
          .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        g.append(""path"")
          .datum([januaryData.find(d => d[""Energy Sector""] === ""Coal""), januaryData.find(d => d[""Energy Sector""] === ""Gas""), januaryData.find(d => d[""Energy Sector""] === ""Nuclear""), januaryData.find(d => d[""Energy Sector""] === ""Other""), januaryData.find(d => d[""Energy Sector""] === ""Renewable"")])
          .attr(""d"", radarLine)
          .attr(""stroke"", ""steelblue"")
          .attr(""stroke-width"", 2)
          .attr(""fill"", ""none"");

        g.append(""path"")
          .datum([januaryData.find(d => d[""Energy Sector""] === ""Coal""), januaryData.find(d => d[""Energy Sector""] === ""Gas""), januaryData.find(d => d[""Energy Sector""] === ""Nuclear""), januaryData.find(d => d[""Energy Sector""] === ""Other""), januaryData.find(d => d[""Energy Sector""] === ""Renewable"")])
          .attr(""d"", radarLine)
          .attr(""stroke"", ""none"")
          .attr(""fill"", ""steelblue"")
          .attr(""fill-opacity"", 0.2);

        const axis = svg.selectAll("".axis"")
          .data(angles)
          .enter()
          .append(""g"")
          .attr(""class"", ""axis"")
          .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        axis.append(""line"")
          .attr(""x1"", 0)
          .attr(""y1"", 0)
          .attr(""x2"", (d, i) => radius * Math.cos(d))
          .attr(""y2"", (d, i) => radius * Math.sin(d))
          .attr(""stroke"", ""#777"");

        axis.append(""text"")
          .attr(""x"", (d, i) => (radius + 10) * Math.cos(d))
          .attr(""y"", (d, i) => (radius + 10) * Math.sin(d))
          .attr(""text-anchor"", (d, i) => Math.sin(d) < 0 ? ""end"" : ""start"")
          .text((d, i) => energySectors[i]);

        const ticks = [0.2, 0.4, 0.6, 0.8, 1];

        const tickAxis = svg.selectAll("".tick-axis"")
          .data(ticks)
          .enter()
          .append(""g"")
          .attr(""class"", ""tick-axis"")
          .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        tickAxis.append(""circle"")
          .attr(""cx"", 0)
          .attr(""cy"", 0)
          .attr(""r"", d => d * radius)
          .attr(""stroke"", ""#777"")
          .attr(""fill"", ""none"");

        tickAxis.append(""text"")
          .attr(""x"", 0)
          .attr(""y"", d => -d * radius - 5)
          .text(d => (d * maxEnergyConsumed).toFixed(2));
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,492,493
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Streamgraph that visualizes the changes of Energy Consumed over the Month for each Energy Sector.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Energy Consumption Streamgraph</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"").then(data => {
      data.forEach(d => {
        d[""Energy Consumed""] = +d[""Energy Consumed""];
        d[""Month""] = d[""Month""];
      });

      const energySectors = [...new Set(data.map(d => d[""Energy Sector""]))];

      const x = d3.scalePoint()
        .domain(data.map(d => d[""Month""]))
        .range([0, width])
        .padding(0.5);

      const y = d3.scaleLinear()
        .range([height, 0]);

      const z = d3.scaleOrdinal(d3.schemeCategory10)
        .domain(energySectors);

      const stack = d3.stack()
        .keys(energySectors)
        .value((d, key) => {
          const sectorData = data.find(sector => sector[""Month""] === d[""Month""] && sector[""Energy Sector""] === key);
          return sectorData ? sectorData[""Energy Consumed""] : 0;
        })
        .order(d3.stackOrderNone)
        .offset(d3.stackOffsetExpand);

      const layers = stack(data);

      y.domain([0, d3.max(layers, layer => d3.max(layer, d => d[1]))]).nice();

      svg.selectAll(""layer"")
        .data(layers)
        .enter()
        .append(""path"")
        .attr(""class"", ""layer"")
        .attr(""d"", d3.line()
          .x(d => x(d.data[""Month""]))
          .y(d => y(d[1]))
        )
        .attr(""fill"", (d, i) => z(energySectors[i]));

      svg.append(""g"")
        .attr(""class"", ""axis"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(x));

      svg.append(""g"")
        .attr(""class"", ""axis"")
        .call(d3.axisLeft(y));
    });
  </script>
</body>
</html>
```",Unexpected Initial Result,493,494
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Slopegraph to compare the Energy Consumed between November and December for each Energy Sector.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Slopegraph</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .slopegraph {
      width: 800px;
      height: 600px;
      margin: 50px auto;
    }
    .slopegraph .line {
      stroke: #ccc;
      stroke-width: 1.5px;
    }
    .slopegraph .circle {
      fill: #fff;
      stroke: #ccc;
      stroke-width: 1.5px;
    }
    .slopegraph .label {
      font-size: 12px;
      text-anchor: middle;
    }
  </style>
</head>
<body>
  <svg class=""slopegraph""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Energy Consumed""] = +d[""Energy Consumed""];
        });

        const novemberData = data.filter(d => d.Month === ""November"");
        const decemberData = data.filter(d => d.Month === ""December"");

        const energySectors = [...new Set(data.map(d => d[""Energy Sector""]))];

        const xScale = d3.scalePoint()
          .domain([""November"", ""December""])
          .range([0, width])
          .padding(0.5);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Energy Consumed""])])
          .range([height, 0]);

        svg.selectAll(""line"")
          .data(energySectors)
          .enter()
          .append(""line"")
          .attr(""class"", ""line"")
          .attr(""x1"", d => xScale(""November""))
          .attr(""y1"", d => yScale(novemberData.find(n => n[""Energy Sector""] === d)[""Energy Consumed""]))
          .attr(""x2"", d => xScale(""December""))
          .attr(""y2"", d => yScale(decemberData.find(n => n[""Energy Sector""] === d)[""Energy Consumed""]));

        svg.selectAll(""circle"")
          .data(energySectors)
          .enter()
          .append(""circle"")
          .attr(""class"", ""circle"")
          .attr(""cx"", d => xScale(""November""))
          .attr(""cy"", d => yScale(novemberData.find(n => n[""Energy Sector""] === d)[""Energy Consumed""]))
          .attr(""r"", 5);

        svg.selectAll(""circle2"")
          .data(energySectors)
          .enter()
          .append(""circle"")
          .attr(""class"", ""circle"")
          .attr(""cx"", d => xScale(""December""))
          .attr(""cy"", d => yScale(decemberData.find(n => n[""Energy Sector""] === d)[""Energy Consumed""]))
          .attr(""r"", 5);

        svg.selectAll(""text"")
          .data(energySectors)
          .enter()
          .append(""text"")
          .attr(""class"", ""label"")
          .attr(""x"", d => xScale(""November""))
          .attr(""y"", d => yScale(novemberData.find(n => n[""Energy Sector""] === d)[""Energy Consumed""]) + 10)
          .text(d => d);

        svg.selectAll(""text2"")
          .data(energySectors)
          .enter()
          .append(""text"")
          .attr(""class"", ""label"")
          .attr(""x"", d => xScale(""December""))
          .attr(""y"", d => yScale(decemberData.find(n => n[""Energy Sector""] === d)[""Energy Consumed""]) + 10)
          .text(d => d);

        svg.append(""text"")
          .attr(""x"", xScale(""November""))
          .attr(""y"", -20)
          .text(""November"");

        svg.append(""text"")
          .attr(""x"", xScale(""December""))
          .attr(""y"", -20)
          .text(""December"");
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,494,495
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Heatmap that visualizes the Energy Consumed across Energy Sector and Months.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Energy Consumption Heatmap</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .tooltip {
      position: absolute;
      background-color: #fff;
      border: 1px solid #ddd;
      padding: 5px;
      visibility: hidden;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 100, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('svg')
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
      .then(data => {
        data.forEach(d => {
          d['Energy Consumed'] = +d['Energy Consumed'];
        });

        const months = [...new Set(data.map(d => d.Month))];
        const sectors = [...new Set(data.map(d => d['Energy Sector']))];

        const xScale = d3.scaleBand()
          .domain(months)
          .range([0, width])
          .padding(0.2);

        const yScale = d3.scaleBand()
          .domain(sectors)
          .range([0, height])
          .padding(0.2);

        const colorScale = d3.scaleSequential()
          .domain([0, d3.max(data, d => d['Energy Consumed'])])
          .interpolator(d3.interpolateBlues);

        svg.selectAll('rect')
          .data(data)
          .enter()
          .append('rect')
          .attr('x', d => xScale(d.Month))
          .attr('y', d => yScale(d['Energy Sector']))
          .attr('width', xScale.bandwidth())
          .attr('height', yScale.bandwidth())
          .attr('fill', d => colorScale(d['Energy Consumed']));

        svg.selectAll('text')
          .data(months)
          .enter()
          .append('text')
          .attr('x', d => xScale(d) + xScale.bandwidth() / 2)
          .attr('y', height + 20)
          .attr('text-anchor', 'middle')
          .text(d => d);

        svg.selectAll('text')
          .data(sectors)
          .enter()
          .append('text')
          .attr('x', -20)
          .attr('y', d => yScale(d) + yScale.bandwidth() / 2)
          .attr('text-anchor', 'end')
          .attr('transform', 'rotate(-90)')
          .text(d => d);

        const tooltip = d3.select('body')
          .append('div')
          .attr('class', 'tooltip')
          .style('opacity', 0);

        svg.selectAll('rect')
          .on('mouseover', (event, d) => {
            tooltip.transition()
              .duration(200)
              .style('opacity', 0.9);
            tooltip.html(`Energy Consumed: ${d['Energy Consumed']}`)
              .style('left', (event.pageX) + 'px')
              .style('top', (event.pageY - 28) + 'px');
          })
          .on('mouseout', () => {
            tooltip.transition()
              .duration(500)
              .style('opacity', 0);
          });
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,495,496
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Stacked Bar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 800px;
      height: 600px;
      margin: 50px auto;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg class=""chart""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 100, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('.chart')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
      .then(data => {
        data.forEach(d => {
          d['Energy Consumed'] = +d['Energy Consumed'];
          d['Cost'] = +d['Cost'];
          d['Emissions'] = +d['Emissions'];
          d['Number of Plants'] = +d['Number of Plants'];
          d['Revenue'] = +d['Revenue'];
          d['Renewable'] = +d['Renewable'];
        });

        const x = d3.scaleBand()
          .domain(data.map(d => d.Region))
          .range([0, width])
          .padding(0.2);

        const y = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Energy Consumed'] + d['Cost'] + d['Emissions'] + d['Number of Plants'] + d['Revenue'] + d['Renewable'])])
          .range([height, 0]);

        const z = d3.scaleOrdinal(d3.schemeCategory10);

        const keys = ['Energy Consumed', 'Cost', 'Emissions', 'Number of Plants', 'Revenue', 'Renewable'];

        svg.append('g')
          .selectAll('g')
          .data(data)
          .enter()
          .append('g')
          .attr('transform', d => `translate(${x(d.Region)}, 0)`)
          .selectAll('rect')
          .data(d => keys.map(key => ({ key, value: d[key] })))
          .enter()
          .append('rect')
          .attr('x', 0)
          .attr('y', d => y(d3.sum(keys.map(key => data.find(e => e.Region === d.data.Region)[key])) - d.value))
          .attr('width', x.bandwidth())
          .attr('height', d => y(d.value) - y(d3.sum(keys.map(key => data.find(e => e.Region === d.data.Region)[key])) - d.value))
          .attr('fill', d => z(d.key));

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(x));

        svg.append('g')
          .call(d3.axisLeft(y));

        svg.append('g')
          .selectAll('g')
          .data(keys)
          .enter()
          .append('g')
          .attr('transform', (d, i) => `translate(0, ${i * 20})`)
          .append('rect')
          .attr('x', width - 20)
          .attr('y', 0)
          .attr('width', 20)
          .attr('height', 20)
          .attr('fill', d => z(d));

        svg.append('g')
          .selectAll('g')
          .data(keys)
          .enter()
          .append('g')
          .attr('transform', (d, i) => `translate(0, ${i * 20})`)
          .append('text')
          .attr('x', width - 25)
          .attr('y', 15)
          .attr('text-anchor', 'end')
          .text(d => d);
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,496,497
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Horizontal Bar Chart that visualizes the Energy Consumed for each Energy Sector in January.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Energy Consumption by Sector in January</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 40px auto;
    }
    .chart rect {
      fill: steelblue;
    }
    .chart text {
      fill: #fff;
      font-size: 14px;
    }
  </style>
</head>
<body>
  <svg class=""chart"" width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;
    const svg = d3.select("".chart"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Energy Consumed""] = +d[""Energy Consumed""];
        });
        const januaryData = data.filter(d => d.Month === ""January"");
        const energySectors = [...new Set(januaryData.map(d => d[""Energy Sector""]))];
        const xScale = d3.scaleLinear()
          .domain([0, d3.max(januaryData, d => d[""Energy Consumed""])])
          .range([0, width]);
        const yScale = d3.scaleBand()
          .domain(energySectors)
          .range([height, 0])
          .padding(0.2);
        svg.selectAll(""rect"")
          .data(januaryData)
          .enter()
          .append(""rect"")
          .attr(""x"", 0)
          .attr(""y"", d => yScale(d[""Energy Sector""]))
          .attr(""width"", d => xScale(d[""Energy Consumed""]))
          .attr(""height"", yScale.bandwidth());
        svg.selectAll(""text"")
          .data(januaryData)
          .enter()
          .append(""text"")
          .attr(""x"", d => xScale(d[""Energy Consumed""]) + 10)
          .attr(""y"", d => yScale(d[""Energy Sector""]) + yScale.bandwidth() / 2)
          .attr(""dy"", ""0.35em"")
          .text(d => d[""Energy Consumed""]);
        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));
        svg.append(""g"")
          .call(d3.axisLeft(yScale));
      });
  </script>
</body>
</html>
```",Correct,497,498
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot that visualizes the relationship between Energy Consumed and Cost.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption vs Cost Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const energyConsumed = [];
                const cost = [];

                csvData.forEach(row => {
                    const columns = row.split(',');
                    energyConsumed.push(parseFloat(columns[2]));
                    cost.push(parseFloat(columns[3]));
                });

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    title: {
                        text: 'Energy Consumption vs Cost Scatterplot'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'cross'
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Energy Consumed (MWh)',
                        nameLocation: 'middle',
                        nameGap: 30
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Cost ($)',
                        nameLocation: 'middle',
                        nameGap: 40
                    },
                    series: [
                        {
                            name: 'Energy Consumption vs Cost',
                            type: 'scatter',
                            data: energyConsumed.map((x, i) => [x, cost[i]])
                        }
                    ]
                };

                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,498,499
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Line Chart that visualizes the trend of Energy Consumed over the Month for each Energy Sector.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Trend</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [Month, EnergySector, EnergyConsumed] = row.split(',');
                    if (!chartData[EnergySector]) {
                        chartData[EnergySector] = {};
                    }
                    chartData[EnergySector][Month] = parseFloat(EnergyConsumed);
                });

                const series = Object.keys(chartData).map(sector => ({
                    name: sector,
                    type: 'line',
                    data: Object.keys(chartData[sector]).map(month => chartData[sector][month])
                }));

                const months = Object.keys(chartData[Object.keys(chartData)[0]]);

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Energy Consumption Trend'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    legend: {
                        data: Object.keys(chartData)
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    toolbox: {
                        feature: {
                            saveAsImage: {}
                        }
                    },
                    xAxis: {
                        type: 'category',
                        boundaryGap: false,
                        data: months
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: series
                });
            });
    </script>
</body>
</html>
```",Correct,499,500
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Bar Chart that visualizes the Energy Consumed for each Energy Sector in January.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [Month, EnergySector, EnergyConsumed] = row.split(',');
                    if (Month === 'January') {
                        if (!chartData[EnergySector]) {
                            chartData[EnergySector] = 0;
                        }
                        chartData[EnergySector] += parseFloat(EnergyConsumed);
                    }
                });
                const seriesData = Object.keys(chartData).map(key => ({ name: key, value: chartData[key] }));
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Energy Consumed for each Energy Sector in January'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    xAxis: {
                        type: 'category',
                        data: seriesData.map(item => item.name)
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            name: 'Energy Consumed',
                            type: 'bar',
                            data: seriesData.map(item => item.value)
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,500,501
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Pie Chart that visualizes the proportion of Energy Consumed contributed by each Energy Sector in January.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption by Sector in January</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const januaryData = rows.filter(row => row.split(',')[0] === 'January');
                const energySectors = [...new Set(januaryData.map(row => row.split(',')[1]))];
                const energyConsumed = energySectors.map(sector => {
                    const sectorData = januaryData.filter(row => row.split(',')[1] === sector);
                    return sectorData.reduce((sum, row) => sum + parseFloat(row.split(',')[2]), 0);
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Energy Consumption by Sector in January'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    series: [
                        {
                            type: 'pie',
                            data: energySectors.map((sector, index) => ({ name: sector, value: energyConsumed[index] })),
                            emphasis: {
                                itemStyle: {
                                    shadowBlur: 10,
                                    shadowOffsetX: 0,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            }
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,501,502
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Donut Chart that visualizes the distribution of Energy Consumed among Energy Sector in January.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Distribution</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const januaryData = csvData.filter(row => row.split(',')[0] === 'January');
                const energySectors = [...new Set(januaryData.map(row => row.split(',')[1]))];
                const energyConsumed = energySectors.map(sector => {
                    const sectorData = januaryData.filter(row => row.split(',')[1] === sector);
                    return sectorData.reduce((sum, row) => sum + parseFloat(row.split(',')[2]), 0);
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Energy Consumption Distribution in January',
                        subtext: 'By Energy Sector',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    legend: {
                        orient: 'vertical',
                        left: 'left'
                    },
                    series: [
                        {
                            type: 'pie',
                            radius: ['40%', '70%'],
                            avoidLabelOverlap: false,
                            itemStyle: {
                                borderRadius: 10,
                                borderColor: '#fff',
                                borderWidth: 2
                            },
                            label: {
                                show: false,
                                position: 'center'
                            },
                            emphasis: {
                                label: {
                                    show: true,
                                    fontSize: '40',
                                    fontWeight: 'bold'
                                }
                            },
                            labelLine: {
                                show: false
                            },
                            data: energySectors.map((sector, index) => ({
                                value: energyConsumed[index],
                                name: sector
                            }))
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,502,503
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Coxcomb Chart(polar area chart) to compare the Energy Consumed of different Energy Sector in January.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coxcomb Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [Month, EnergySector, EnergyConsumed] = row.split(',');
                    if (Month === 'January') {
                        if (!chartData[EnergySector]) {
                            chartData[EnergySector] = 0;
                        }
                        chartData[EnergySector] += parseFloat(EnergyConsumed);
                    }
                });
                const seriesData = Object.keys(chartData).map(key => ({ name: key, value: chartData[key] }));
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Energy Consumed of Different Energy Sectors in January',
                        left: 'center'
                    },
                    angleAxis: {
                        type: 'category',
                        data: seriesData.map(item => item.name),
                        z: 10
                    },
                    radiusAxis: {
                        type: 'value',
                        axisLabel: {
                            formatter: '{value} GWh'
                        },
                        axisLine: {
                            lineStyle: {
                                color: '#ddd'
                            }
                        }
                    },
                    polar: {
                        center: ['50%', '50%'],
                        radius: '70%'
                    },
                    series: [
                        {
                            type: 'bar',
                            data: seriesData.map(item => item.value),
                            coordinateSystem: 'polar',
                            name: 'Energy Consumed',
                            stack: 'a',
                            itemStyle: {
                                color: '#69b3fa'
                            }
                        }
                    ],
                    legend: {
                        show: true,
                        data: ['Energy Consumed']
                    }
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,503,504
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Radar Chart to compare the Energy Consumed of different Energy Sector in January.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Radar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const januaryData = csvData.filter(row => row.split(',')[0] === 'January');
                const energySectors = [...new Set(januaryData.map(row => row.split(',')[1]))];
                const energyConsumed = energySectors.map(sector => {
                    const sectorData = januaryData.filter(row => row.split(',')[1] === sector);
                    return sectorData.reduce((sum, row) => sum + parseFloat(row.split(',')[2]), 0);
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Energy Consumed of Different Energy Sectors in January'
                    },
                    radar: {
                        indicator: energySectors.map(sector => ({ name: sector, max: Math.max(...energyConsumed) })),
                        radius: '60%'
                    },
                    series: [{
                        type: 'radar',
                        data: [energyConsumed],
                        areaStyle: {}
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,504,505
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Streamgraph that visualizes the changes of Energy Consumed over the Month for each Energy Sector.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Streamgraph</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const energySectors = [...new Set(csvData.map(row => row.split(',')[1]))];
                const months = [...new Set(csvData.map(row => row.split(',')[0]))];
                const seriesData = energySectors.map(sector => {
                    const sectorData = csvData.filter(row => row.split(',')[1] === sector);
                    return months.map(month => {
                        const monthData = sectorData.find(row => row.split(',')[0] === month);
                        return monthData ? parseFloat(monthData.split(',')[2]) : 0;
                    });
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'line',
                            lineStyle: {
                                color: 'rgba(0,0,0,0.2)',
                                width: 1,
                                type: 'solid'
                            }
                        }
                    },
                    legend: {
                        data: energySectors
                    },
                    singleAxis: {
                        top: 50,
                        bottom: 50,
                        axisLine: {
                            lineStyle: {
                                color: '#ddd'
                            }
                        },
                        axisTick: {
                            lineStyle: {
                                color: '#ddd'
                            }
                        },
                        axisLabel: {
                            color: '#666',
                            fontSize: 12
                        },
                        type: 'category',
                        axisPointer: {
                            animation: true,
                            lineStyle: {
                                color: '#ddd',
                                type: 'dashed'
                            }
                        },
                        splitLine: {
                            lineStyle: {
                                color: '#ddd',
                                type: 'dashed'
                            }
                        },
                        data: months
                    },
                    series: energySectors.map((sector, index) => ({
                        type: 'themeRiver',
                        name: sector,
                        data: seriesData[index],
                        itemStyle: {
                            emphasis: {
                                opacity: 0.5
                            }
                        },
                        label: {
                            show: true,
                            fontSize: 12
                        }
                    }))
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,505,506
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Slopegraph to compare the Energy Consumed between November and December for each Energy Sector.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Slopegraph</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const novemberData = {};
                const decemberData = {};
                csvData.forEach(row => {
                    const [month, sector, energyConsumed] = row.split(',');
                    if (month === 'November') {
                        novemberData[sector] = parseFloat(energyConsumed);
                    } else if (month === 'December') {
                        decemberData[sector] = parseFloat(energyConsumed);
                    }
                });
                const sectors = Object.keys(novemberData);
                const novemberValues = sectors.map(sector => novemberData[sector]);
                const decemberValues = sectors.map(sector => decemberData[sector]);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Energy Consumed Slopegraph'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: [
                        {
                            type: 'category',
                            data: ['November', 'December'],
                            axisTick: {
                                alignWithLabel: true
                            }
                        }
                    ],
                    yAxis: [
                        {
                            type: 'value'
                        }
                    ],
                    series: [
                        {
                            name: 'Energy Consumed',
                            type: 'line',
                            data: novemberValues.concat(decemberValues),
                            symbolSize: 10,
                            lineStyle: {
                                width: 2
                            }
                        }
                    ],
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 10
                        },
                        {
                            start: 0,
                            end: 10
                        }
                    ]
                });
                chart.dispatchAction({
                    type: 'showTip',
                    seriesIndex: 0,
                    dataIndex: 0
                });
                sectors.forEach((sector, index) => {
                    chart.dispatchAction({
                        type: 'addMarkPoint',
                        seriesIndex: 0,
                        data: {
                            coord: [index % 2 === 0 ? 'November' : 'December', index % 2 === 0 ? novemberValues[index / 2] : decemberValues[index / 2]],
                            symbol: 'circle',
                            symbolSize: 10,
                            label: {
                                formatter: sector
                            }
                        }
                    });
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,506,507
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Heatmap that visualizes the Energy Consumed across Energy Sector and Months.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Heatmap</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const energySectors = [...new Set(csvData.map(row => row.split(',')[1]))];
                const months = [...new Set(csvData.map(row => row.split(',')[0]))];
                const energyConsumedData = [];

                months.forEach(month => {
                    const monthData = [];
                    energySectors.forEach(sector => {
                        const row = csvData.find(row => row.split(',')[0] === month && row.split(',')[1] === sector);
                        monthData.push(row ? parseFloat(row.split(',')[2]) : 0);
                    });
                    energyConsumedData.push(monthData);
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Energy Consumption Heatmap'
                    },
                    tooltip: {
                        position: 'top'
                    },
                    grid: {
                        height: '50%',
                        top: '10%'
                    },
                    xAxis: {
                        type: 'category',
                        data: energySectors,
                        splitArea: {
                            show: true
                        }
                    },
                    yAxis: {
                        type: 'category',
                        data: months,
                        splitArea: {
                            show: true
                        }
                    },
                    visualMap: {
                        min: 0,
                        max: Math.max(...energyConsumedData.flat()),
                        calculable: true,
                        orient: 'horizontal',
                        left: 'center',
                        bottom: '15%'
                    },
                    series: [{
                        name: 'Energy Consumption',
                        type: 'heatmap',
                        data: energyConsumedData.map((row, index) => row.map((value, columnIndex) => [columnIndex, index, value])),
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,507,508
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Stacked Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [month, sector, consumed, cost, emissions, plants, revenue, renewable, region] = row.split(',');
                    if (!chartData[region]) {
                        chartData[region] = {};
                    }
                    if (!chartData[region][sector]) {
                        chartData[region][sector] = 0;
                    }
                    chartData[region][sector] += parseFloat(consumed);
                });
                const regions = Object.keys(chartData);
                const sectors = Array.from(new Set(regions.flatMap(region => Object.keys(chartData[region]))));
                const seriesData = sectors.map(sector => {
                    return regions.map(region => chartData[region][sector] || 0);
                });
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Energy Consumption Stacked Bar Chart'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    legend: {
                        data: sectors
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'category',
                        data: regions
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: sectors.map((sector, index) => {
                        return {
                            name: sector,
                            type: 'bar',
                            stack: 'total',
                            data: seriesData[index]
                        };
                    })
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,508,509
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Horizontal Bar Chart that visualizes the Energy Consumed for each Energy Sector in January.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Energy Consumption Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 1000px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e87f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [month, sector, energyConsumed] = row.split(',');
                    if (month === 'January') {
                        if (!chartData[sector]) {
                            chartData[sector] = 0;
                        }
                        chartData[sector] += parseFloat(energyConsumed);
                    }
                });
                const sectors = Object.keys(chartData);
                const energyConsumedValues = Object.values(chartData);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Energy Consumed for each Energy Sector in January'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'value'
                    },
                    yAxis: {
                        type: 'category',
                        data: sectors
                    },
                    series: [
                        {
                            name: 'Energy Consumed',
                            type: 'bar',
                            data: energyConsumedValues
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Initialization Error,509,510
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot that visualizes the relationship between Energy Consumed and Cost.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Energy Consumption vs Cost Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""description"": ""A scatterplot showing the relationship between Energy Consumed and Cost."",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": { ""field"": ""Energy Consumed"", ""type"": ""quantitative"" },
        ""y"": { ""field"": ""Cost"", ""type"": ""quantitative"" },
        ""color"": { ""field"": ""Region"", ""type"": ""nominal"" }
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,510,511
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Line Chart that visualizes the trend of Energy Consumed over the Month for each Energy Sector.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Energy Consumption Trend</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"" },
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {""field"": ""Month"", ""type"": ""nominal"", ""title"": ""Month""},
        ""y"": {""field"": ""Energy Consumed"", ""type"": ""quantitative"", ""title"": ""Energy Consumed""},
        ""color"": {""field"": ""Energy Sector"", ""type"": ""nominal"", ""title"": ""Energy Sector""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,511,512
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Bar Chart that visualizes the Energy Consumed for each Energy Sector in January.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Energy Consumption by Sector in January</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Month === 'January'""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Energy Sector"", ""type"": ""nominal""},
        ""y"": {""field"": ""Energy Consumed"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Energy Sector"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,512,513
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Pie Chart that visualizes the proportion of Energy Consumed contributed by each Energy Sector in January.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Energy Consumption by Sector in January</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Month === 'January'""},
        {""aggregate"": [{""op"": ""sum"", ""field"": ""Energy Consumed"", ""as"": ""Total Energy Consumed""}], ""groupby"": [""Energy Sector""]}
      ],
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Total Energy Consumed"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Energy Sector"", ""type"": ""nominal""}
      },
      ""view"": {""stroke"": null}
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,513,514
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Donut Chart that visualizes the distribution of Energy Consumed among Energy Sector in January.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Energy Consumption Donut Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 500px;
      height: 500px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Month === 'January'""},
        {""calculate"": ""datum['Energy Consumed'] * 1"", ""as"": ""Energy Consumed""}
      ],
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Energy Consumed"", ""type"": ""quantitative"", ""stack"": true},
        ""color"": {""field"": ""Energy Sector"", ""type"": ""nominal""}
      },
      ""view"": {""stroke"": null}
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,514,515
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Coxcomb Chart(polar area chart) to compare the Energy Consumed of different Energy Sector in January.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coxcomb Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Month === 'January'""},
        {""calculate"": ""datum.Energy Consumed"", ""as"": ""value""}
      ],
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""value"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Energy Sector"", ""type"": ""nominal""}
      },
      ""view"": {""stroke"": null}
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,515,516
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Radar Chart to compare the Energy Consumed of different Energy Sector in January.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Energy Consumption Radar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Month === 'January'""},
        {""calculate"": ""datum.Energy Consumed"", ""as"": ""value""}
      ],
      ""mark"": ""line"",
      ""encoding"": {
        ""theta"": {""field"": ""Energy Sector"", ""type"": ""nominal"", ""scale"": {""range"": [0, 360]}},
        ""radius"": {""field"": ""value"", ""type"": ""quantitative""}
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""grid"": false}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Initialization Error,516,517
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Streamgraph that visualizes the changes of Energy Consumed over the Month for each Energy Sector.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Streamgraph of Energy Consumption</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""area"",
      ""encoding"": {
        ""x"": {""field"": ""Month"", ""type"": ""nominal"", ""axis"": {""labelAngle"": 45}},
        ""y"": {""field"": ""Energy Consumed"", ""type"": ""quantitative"", ""stack"": true},
        ""color"": {""field"": ""Energy Sector"", ""type"": ""nominal""}
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""labelFontSize"": 14, ""titleFontSize"": 16}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,517,518
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Slopegraph to compare the Energy Consumed between November and December for each Energy Sector.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Slopegraph for Energy Consumption</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {
          ""filter"": ""datum.Month === 'November' || datum.Month === 'December'""
        },
        {
          ""pivot"": ""Month"",
          ""value"": ""Energy Consumed"",
          ""groupby"": [""Energy Sector""]
        }
      ],
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {
          ""field"": ""Month"",
          ""type"": ""nominal"",
          ""axis"": {""title"": null}
        },
        ""y"": {
          ""field"": ""value"",
          ""type"": ""quantitative"",
          ""axis"": {""title"": ""Energy Consumed""}
        },
        ""color"": {
          ""field"": ""Energy Sector"",
          ""type"": ""nominal""
        },
        ""detail"": {
          ""field"": ""Energy Sector"",
          ""type"": ""nominal""
        }
      },
      ""config"": {
        ""axis"": {""labelFontSize"": 14, ""titleFontSize"": 16},
        ""legend"": {""labelFontSize"": 14, ""titleFontSize"": 16}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,518,519
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Heatmap that visualizes the Energy Consumed across Energy Sector and Months.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Energy Consumption Heatmap</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"" },
      ""mark"": ""rect"",
      ""encoding"": {
        ""x"": {""field"": ""Month"", ""type"": ""nominal""},
        ""y"": {""field"": ""Energy Sector"", ""type"": ""nominal""},
        ""color"": {""field"": ""Energy Consumed"", ""type"": ""quantitative""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,519,520
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Stacked Bar Chart with Vega-Lite</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>

  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"" },
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Month"", ""type"": ""nominal""},
        ""y"": {""field"": ""Energy Consumed"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Energy Sector"", ""type"": ""nominal""},
        ""tooltip"": [
          {""field"": ""Energy Sector"", ""type"": ""nominal""},
          {""field"": ""Energy Consumed"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""grid"": false}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,520,521
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Horizontal Bar Chart that visualizes the Energy Consumed for each Energy Sector in January.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Energy Consumption by Sector in January</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Month === 'January'""},
        {""aggregate"": [{""op"": ""sum"", ""field"": ""Energy Consumed"", ""as"": ""Total Energy Consumed""}], ""groupby"": [""Energy Sector""]}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Total Energy Consumed"", ""type"": ""quantitative"", ""axis"": {""title"": ""Total Energy Consumed""}},
        ""y"": {""field"": ""Energy Sector"", ""type"": ""nominal"", ""axis"": {""title"": ""Energy Sector""}},
        ""color"": {""field"": ""Energy Sector"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,521,522
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Financial Data Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .tooltip {
      position: absolute;
      padding: 10px;
      font-size: 14px;
      background-color: #fff;
      border: 1px solid #ddd;
      border-radius: 5px;
      pointer-events: none;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('svg')
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
      .then(data => {
        data.forEach(d => {
          d['Net Income'] = +d['Net Income'];
          d.Revenue = +d.Revenue;
        });

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Revenue)])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Net Income'])])
          .range([height, 0]);

        const xAxis = d3.axisBottom(xScale)
          .ticks(10);

        const yAxis = d3.axisLeft(yScale)
          .ticks(10);

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(xAxis);

        svg.append('g')
          .call(yAxis);

        svg.append('text')
          .attr('transform', `translate(${width / 2}, ${height + 30})`)
          .style('text-anchor', 'middle')
          .text('Revenue');

        svg.append('text')
          .attr('transform', `rotate(-90) translate(${-height / 2}, ${-30})`)
          .style('text-anchor', 'middle')
          .text('Net Income');

        const tooltip = d3.select('body')
          .append('div')
          .attr('class', 'tooltip')
          .style('opacity', 0);

        svg.selectAll('circle')
          .data(data)
          .enter()
          .append('circle')
          .attr('cx', d => xScale(d.Revenue))
          .attr('cy', d => yScale(d['Net Income']))
          .attr('r', 5)
          .on('mouseover', (event, d) => {
            tooltip.transition()
              .duration(200)
              .style('opacity', 1);

            tooltip.html(`Revenue: ${d.Revenue}<br>Net Income: ${d['Net Income']}`)
              .style('left', (event.pageX + 10) + 'px')
              .style('top', (event.pageY - 10) + 'px');
          })
          .on('mouseout', () => {
            tooltip.transition()
              .duration(200)
              .style('opacity', 0);
          });
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,522,523
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Financial Data Scatterplot</title>
  <style>
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
    .brush .extent {
      fill-opacity: .3;
      stroke: #fff;
      shape-rendering: crispEdges;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Net Income""] = +d[""Net Income""];
          d.Revenue = +d.Revenue;
        });

        const x = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Revenue)])
          .range([0, width]);

        const y = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Net Income""])])
          .range([height, 0]);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(x));

        svg.append(""g"")
          .call(d3.axisLeft(y));

        const brush = d3.brush()
          .extent([[0, 0], [width, height]])
          .on(""brush end"", brushed);

        svg.append(""g"")
          .attr(""class"", ""brush"")
          .call(brush);

        svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => x(d.Revenue))
          .attr(""cy"", d => y(d[""Net Income""]))
          .attr(""r"", 5);

        function brushed(event) {
          const selection = event.selection;
          svg.selectAll(""circle"")
            .classed(""selected"", d => {
              const xValue = x(d.Revenue);
              const yValue = y(d[""Net Income""]);
              return selection[0][0] <= xValue && xValue <= selection[1][0]
                && selection[0][1] <= yValue && yValue <= selection[1][1];
            });
        }
      });
  </script>
</body>
</html>
```",Correct,523,524
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot of Net Income vs Revenue</title>
  <style>
    /* set the dimensions and margins of the graph */
    #chart {
      width: 800px;
      height: 600px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    // set the dimensions and margins of the graph
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    // append the svg object to the body of the page
    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    // read the data
    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
      // convert data types
      data.forEach(d => {
        d[""Net Income""] = +d[""Net Income""];
        d.Revenue = +d.Revenue;
      });

      // create scales
      const xScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.Revenue)])
        .range([0, width]);

      const yScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Net Income""])])
        .range([height, 0]);

      // create axis
      const xAxis = d3.axisBottom(xScale);
      const yAxis = d3.axisLeft(yScale);

      svg.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(xAxis);

      svg.append(""g"")
        .call(yAxis);

      // create scatterplot
      svg.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScale(d.Revenue))
        .attr(""cy"", d => yScale(d[""Net Income""]))
        .attr(""r"", 5);

      // add zoom functionality
      const zoom = d3.zoom()
        .scaleExtent([1, 10])
        .extent([[-Infinity, -Infinity], [Infinity, Infinity]])
        .on(""zoom"", zoomed);

      svg.call(zoom);

      function zoomed({ transform }) {
        svg.selectAll(""circle"")
          .attr(""cx"", d => transform.applyX(xScale(d.Revenue)))
          .attr(""cy"", d => transform.applyY(yScale(d[""Net Income""])));

        svg.selectAll("".x-axis"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(xAxis.scale(transform.rescaleX(xScale)));

        svg.selectAll("".y-axis"")
          .call(yAxis.scale(transform.rescaleY(yScale)));
      }
    });
  </script>
</body>
</html>
```",Unexpected Execution Result,524,525
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Net Income and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Financial Data Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .tooltip {
      position: absolute;
      background-color: #f9f9f9;
      border: 1px solid #ccc;
      padding: 5px;
      visibility: hidden;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Net Income""] = +d[""Net Income""];
          d.Revenue = +d.Revenue;
        });

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Revenue)])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Net Income""])])
          .range([height, 0]);

        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(xAxis);

        svg.append(""g"")
          .call(yAxis);

        svg.append(""text"")
          .attr(""transform"", `translate(${width / 2}, ${height + 30})`)
          .style(""text-anchor"", ""middle"")
          .text(""Revenue"");

        svg.append(""text"")
          .attr(""transform"", `rotate(-90) translate(${-height / 2}, ${-30})`)
          .style(""text-anchor"", ""middle"")
          .text(""Net Income"");

        const tooltip = d3.select(""body"")
          .append(""div"")
          .attr(""class"", ""tooltip"")
          .style(""opacity"", 0);

        svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d.Revenue))
          .attr(""cy"", d => yScale(d[""Net Income""]))
          .attr(""r"", 5)
          .on(""mouseover"", (event, d) => {
            tooltip.transition()
              .duration(200)
              .style(""opacity"", 0.9);
            tooltip.html(`
              <strong>Company:</strong> ${d.Company}<br>
              <strong>Net Income:</strong> ${d[""Net Income""]}<br>
              <strong>Revenue:</strong> ${d.Revenue}<br>
              <a href=""https://www.google.com/search?q=${d.Company}"" target=""_blank"">Search on Google</a>
            `)
              .style(""left"", (event.pageX) + ""px"")
              .style(""top"", (event.pageY - 28) + ""px"");
          })
          .on(""mouseout"", () => {
            tooltip.transition()
              .duration(500)
              .style(""opacity"", 0);
          });
      });
  </script>
</body>
</html>
```",Unexpected Execution Result,525,526
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot with query widgets showing the Net Income and Revenue of the given dataset. Add a slider to represent the Quarter.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Financial Data Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .slider {
      width: 300px;
    }
  </style>
</head>
<body>
  <div id=""chart""></div>
  <div id=""slider""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const slider = d3.select(""#slider"")
      .append(""input"")
      .attr(""type"", ""range"")
      .attr(""min"", 1)
      .attr(""max"", 4)
      .attr(""value"", 1)
      .attr(""class"", ""slider"");

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
      data.forEach(d => {
        d[""Net Income""] = +d[""Net Income""];
        d.Revenue = +d.Revenue;
        d.Quarter = +d.Quarter;
      });

      const xScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.Revenue)])
        .range([0, width]);

      const yScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Net Income""])])
        .range([height, 0]);

      const xAxis = d3.axisBottom(xScale);
      const yAxis = d3.axisLeft(yScale);

      svg.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(xAxis);

      svg.append(""g"")
        .call(yAxis);

      svg.append(""text"")
        .attr(""transform"", ""rotate(-90)"")
        .attr(""y"", 6)
        .attr(""dy"", "".71em"")
        .style(""text-anchor"", ""end"")
        .text(""Net Income"");

      svg.append(""text"")
        .attr(""y"", height + margin.bottom - 10)
        .attr(""x"", width / 2)
        .attr(""text-anchor"", ""middle"")
        .text(""Revenue"");

      const update = quarter => {
        const filteredData = data.filter(d => d.Quarter === quarter);

        svg.selectAll(""circle"")
          .data(filteredData, d => d.Company)
          .join(
            enter => enter.append(""circle"")
              .attr(""cx"", d => xScale(d.Revenue))
              .attr(""cy"", d => yScale(d[""Net Income""]))
              .attr(""r"", 5),
            update => update
              .attr(""cx"", d => xScale(d.Revenue))
              .attr(""cy"", d => yScale(d[""Net Income""])),
            exit => exit.remove()
          );
      };

      update(1);

      slider.on(""input"", () => {
        update(+slider.property(""value""));
      });
    });
  </script>
</body>
</html>
```",Unexpected Execution Result,526,527
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot showing the Net Income of Alpha Inc. Add animated transitions that connect these points using lines in order.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Net Income of Alpha Inc.</title>
  <style>
    /* set the dimensions and margins of the graph */
    .graph {
      width: 600px;
      height: 400px;
      margin: 20px auto;
    }
  </style>
</head>
<body>
  <div class=""graph"" id=""graph""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    // set the dimensions and margins of the graph
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 600 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    // append the svg object to the body of the page
    const svg = d3.select(""#graph"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    // read the data
    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
      // filter the data for Alpha Inc.
      const alphaData = data.filter(d => d.Company === ""Alpha Inc."");

      // convert the data to numbers
      alphaData.forEach(d => {
        d[""Net Income""] = +d[""Net Income""];
        d[""Quarter""] = +d[""Quarter""];
      });

      // sort the data by quarter
      alphaData.sort((a, b) => a[""Quarter""] - b[""Quarter""]);

      // set the x and y scales
      const xScale = d3.scaleLinear()
        .domain([0, d3.max(alphaData, d => d[""Quarter""])])
        .range([0, width]);

      const yScale = d3.scaleLinear()
        .domain([0, d3.max(alphaData, d => d[""Net Income""])])
        .range([height, 0]);

      // add the x and y axes
      svg.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

      svg.append(""g"")
        .call(d3.axisLeft(yScale));

      // add the points
      const points = svg.selectAll(""circle"")
        .data(alphaData)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScale(d[""Quarter""]))
        .attr(""cy"", d => yScale(d[""Net Income""]))
        .attr(""r"", 5);

      // add the lines
      const line = d3.line()
        .x(d => xScale(d[""Quarter""]))
        .y(d => yScale(d[""Net Income""]));

      const path = svg.append(""path"")
        .datum(alphaData)
        .attr(""fill"", ""none"")
        .attr(""stroke"", ""steelblue"")
        .attr(""stroke-width"", 1.5)
        .attr(""stroke-linejoin"", ""round"")
        .attr(""stroke-linecap"", ""round"")
        .attr(""d"", line);

      // animate the path
      const totalLength = path.node().getTotalLength();
      path.attr(""stroke-dasharray"", totalLength + "" "" + totalLength)
        .attr(""stroke-dashoffset"", totalLength)
        .transition()
        .duration(2000)
        .attr(""stroke-dashoffset"", 0);
    });
  </script>
</body>
</html>
```",Unexpected Initial Result,527,528
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Net Income of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Multi-Series Line Chart</title>
  <style>
    .line {
      fill: none;
      stroke: steelblue;
      stroke-width: 1.5px;
    }

    .line:hover {
      stroke-width: 3px;
    }

    .axis path,
    .axis line {
      fill: none;
      stroke: grey;
      stroke-width: 1;
      shape-rendering: crispEdges;
    }

    .tick text {
      font-size: 12px;
    }

    .tick line {
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Net Income""] = +d[""Net Income""];
          d[""Quarter""] = d[""Quarter""];
        });

        const companies = [...new Set(data.map(d => d.Company))];

        const xScale = d3.scaleBand()
          .domain(data.map(d => d[""Quarter""]))
          .range([0, width])
          .padding(0.2);

        const yScale = d3.scaleLinear()
          .domain([d3.min(data, d => d[""Net Income""]), d3.max(data, d => d[""Net Income""])])
          .range([height, 0]);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        const lines = svg.selectAll(""line"")
          .data(companies)
          .enter()
          .append(""g"")
          .attr(""class"", ""line-group"");

        lines.selectAll(""line"")
          .data(d => data.filter(f => f.Company === d))
          .enter()
          .append(""line"")
          .attr(""class"", ""line"")
          .attr(""stroke"", (d, i) => d3.schemeCategory10[i % 10])
          .attr(""x1"", (d, i) => xScale(d[""Quarter""]))
          .attr(""y1"", (d, i) => yScale(d[""Net Income""]))
          .attr(""x2"", (d, i) => xScale(d[""Quarter""]))
          .attr(""y2"", (d, i) => yScale(d[""Net Income""]));

        lines.selectAll(""path"")
          .data(d => data.filter(f => f.Company === d))
          .enter()
          .append(""path"")
          .datum(d => data.filter(f => f.Company === d))
          .attr(""class"", ""line"")
          .attr(""fill"", ""none"")
          .attr(""stroke"", (d, i) => d3.schemeCategory10[i % 10])
          .attr(""stroke-width"", 1.5)
          .attr(""d"", d3.line()
            .x(d => xScale(d[""Quarter""]))
            .y(d => yScale(d[""Net Income""])));

        lines.selectAll(""circle"")
          .data(d => data.filter(f => f.Company === d))
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d[""Quarter""]))
          .attr(""cy"", d => yScale(d[""Net Income""]))
          .attr(""r"", 3)
          .attr(""fill"", (d, i) => d3.schemeCategory10[i % 10]);

        lines.selectAll(""circle"")
          .on(""mouseover"", function(event, d) {
            d3.select(this)
              .attr(""r"", 6);
          })
          .on(""mouseout"", function(event, d) {
            d3.select(this)
              .attr(""r"", 3);
          });

        lines.selectAll(""path"")
          .on(""mouseover"", function(event, d) {
            d3.select(this)
              .attr(""stroke-width"", 3);
          })
          .on(""mouseout"", function(event, d) {
            d3.select(this)
              .attr(""stroke-width"", 1.5);
          });
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,528,529
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Visualization</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .chart {
            margin: 50px auto;
            width: 800px;
            height: 600px;
            border: 1px solid #ddd;
        }
    </style>
</head>
<body>
    <div class=""chart"" id=""chart""></div>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 50, right: 50, bottom: 100, left: 100 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""#chart"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"")
            .then(data => {
                data.forEach(d => {
                    d[""Net Income""] = +d[""Net Income""];
                    d.Quarter = d.Quarter;
                    d.Company = d.Company;
                });

                const q1Data = data.filter(d => d.Quarter === ""Q1-2021"");

                const xScale = d3.scaleBand()
                    .domain(q1Data.map(d => d.Company))
                    .range([0, width])
                    .padding(0.2);

                const yScale = d3.scaleLinear()
                    .domain([0, d3.max(q1Data, d => d[""Net Income""])])
                    .range([height, 0]);

                svg.selectAll(""rect"")
                    .data(q1Data)
                    .enter()
                    .append(""rect"")
                    .attr(""x"", d => xScale(d.Company))
                    .attr(""y"", d => yScale(d[""Net Income""]))
                    .attr(""width"", xScale.bandwidth())
                    .attr(""height"", d => height - yScale(d[""Net Income""]));

                svg.append(""g"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(d3.axisBottom(xScale));

                svg.append(""g"")
                    .call(d3.axisLeft(yScale));

                svg.append(""text"")
                    .attr(""transform"", `translate(${width / 2}, ${height + margin.bottom / 2})`)
                    .attr(""text-anchor"", ""middle"")
                    .text(""Company"");

                svg.append(""text"")
                    .attr(""transform"", `translate(${margin.left / 2}, ${height / 2}) rotate(-90)`)
                    .attr(""text-anchor"", ""middle"")
                    .text(""Net Income"");

                const zoom = d3.zoom()
                    .scaleExtent([1, 10])
                    .extent([[-Infinity, -Infinity], [width + Infinity, height + Infinity]])
                    .on(""zoom"", zoomed);

                svg.call(zoom);

                function zoomed() {
                    svg.selectAll(""rect"")
                        .attr(""transform"", d3.event.transform);

                    svg.select("".x-axis"")
                        .attr(""transform"", d3.event.transform);

                    svg.select("".y-axis"")
                        .attr(""transform"", d3.event.transform);
                }
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,529,530
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Net Income Bar Chart</title>
  <style>
    .bar {
      fill: steelblue;
    }
    .bar:hover {
      fill: brown;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Net Income""] = +d[""Net Income""];
          d.Quarter = d.Quarter;
          d.Company = d.Company;
        });

        const q1Data = data.filter(d => d.Quarter === ""Q1-2021"");

        const x = d3.scaleBand()
          .domain(q1Data.map(d => d.Company))
          .range([0, width])
          .padding(0.2);

        const y = d3.scaleLinear()
          .domain([0, d3.max(q1Data, d => d[""Net Income""])])
          .range([height, 0]);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(x));

        svg.append(""g"")
          .call(d3.axisLeft(y));

        const bars = svg.selectAll(""rect"")
          .data(q1Data)
          .enter()
          .append(""rect"")
          .attr(""x"", d => x(d.Company))
          .attr(""y"", d => y(d[""Net Income""]))
          .attr(""width"", x.bandwidth())
          .attr(""height"", d => height - y(d[""Net Income""]))
          .attr(""class"", ""bar"");

        let drag = d3.drag()
          .on(""start"", dragstarted)
          .on(""drag"", dragged)
          .on(""end"", dragended);

        bars.call(drag);

        function dragstarted(event, d) {
          d3.select(this).raise();
          d3.select(this).attr(""stroke"", ""black"");
        }

        function dragged(event, d) {
          const newX = event.x - x.bandwidth() / 2;
          const newY = event.y;
          d3.select(this)
            .attr(""x"", newX)
            .attr(""y"", newY);
        }

        function dragended(event, d) {
          const newX = Math.round((event.x - x.bandwidth() / 2) / x.bandwidth()) * x.bandwidth();
          const newY = event.y;
          d3.select(this)
            .attr(""x"", newX)
            .attr(""y"", newY);
          d3.select(this).attr(""stroke"", ""none"");
        }
      });
  </script>
</body>
</html>
```",Unexpected Execution Result,530,531
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Net Income.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Net Income Bar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 40px;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
    .bar {
      fill: steelblue;
    }
    .bar:hover {
      fill: brown;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <select id=""sort-order"">
    <option value=""desc"">Descending</option>
    <option value=""asc"">Ascending</option>
  </select>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 300 - margin.top - margin.bottom;

    const svg = d3.select("".chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const xScale = d3.scaleBand()
      .range([0, width])
      .padding(0.2);

    const yScale = d3.scaleLinear()
      .range([height, 0]);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"")
      .then(data => {
        data = data.filter(d => d.Quarter === ""Q1-2021"");
        data.forEach(d => {
          d[""Net Income""] = +d[""Net Income""];
        });

        xScale.domain(data.map(d => d.Company));
        yScale.domain([0, d3.max(data, d => d[""Net Income""])]);

        svg.selectAll(""bar"")
          .data(data)
          .enter()
          .append(""rect"")
          .attr(""class"", ""bar"")
          .attr(""x"", d => xScale(d.Company))
          .attr(""y"", d => yScale(d[""Net Income""]))
          .attr(""width"", xScale.bandwidth())
          .attr(""height"", d => height - yScale(d[""Net Income""]));

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        d3.select(""#sort-order"")
          .on(""change"", function() {
            const sortOrder = d3.select(this).property(""value"");
            data.sort((a, b) => {
              if (sortOrder === ""desc"") {
                return b[""Net Income""] - a[""Net Income""];
              } else {
                return a[""Net Income""] - b[""Net Income""];
              }
            });
            xScale.domain(data.map(d => d.Company));
            svg.selectAll(""rect"")
              .transition()
              .duration(1000)
              .attr(""x"", d => xScale(d.Company));
          });
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,531,532
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Financial Data Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const seriesData = csvData.map(row => {
                    const columns = row.split(',');
                    return [parseFloat(columns[2]), parseFloat(columns[3])];
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Net Income vs Revenue'
                    },
                    tooltip: {
                        trigger: 'item',
                        formatter: function(params) {
                            return `Net Income: ${params.data[0]}<br>Revenue: ${params.data[1]}`;
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Net Income',
                        axisPointer: {
                            show: true,
                            type: 'line',
                            lineStyle: {
                                color: 'rgba(0,0,0,0.2)',
                                width: 2,
                                type: 'dashed'
                            }
                        }
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Revenue',
                        axisPointer: {
                            show: true,
                            type: 'line',
                            lineStyle: {
                                color: 'rgba(0,0,0,0.2)',
                                width: 2,
                                type: 'dashed'
                            }
                        }
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: seriesData,
                            symbolSize: 10,
                            itemStyle: {
                                opacity: 0.8
                            }
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Execution Error,532,533
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Financial Data Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const netIncome = csvData.map(row => parseFloat(row[2]));
                const revenue = csvData.map(row => parseFloat(row[3]));
                const company = csvData.map(row => row[1]);

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Net Income vs Revenue'
                    },
                    tooltip: {
                        formatter: function (params) {
                            return `Company: ${company[params.dataIndex]}<br>Net Income: ${params.value[1]}<br>Revenue: ${params.value[0]}`;
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Revenue'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Net Income'
                    },
                    series: [{
                        type: 'scatter',
                        data: revenue.map((value, index) => [value, netIncome[index]]),
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        },
                        brush: {
                            type: 'rect'
                        }
                    }]
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,533,534
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Financial Data Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const netIncome = [];
                const revenue = [];
                csvData.forEach(row => {
                    const columns = row.split(',');
                    netIncome.push(parseFloat(columns[2]));
                    revenue.push(parseFloat(columns[3]));
                });
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Net Income vs Revenue'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Revenue'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Net Income'
                    },
                    series: [{
                        type: 'scatter',
                        data: revenue.map((x, i) => [x, netIncome[i]])
                    }],
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 100
                        },
                        {
                            start: 0,
                            end: 100,
                            handleIcon: 'M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.9c0,5.5,4-8.6,9.7-8.6c3.9,0,7,1.8,8.7,4.7v-7.3h-2v6.8h2V11.9z M13.3,24.4H6.7V23h6.6v1.4z M10.9,19.1c-3.7-3.7-9.6-2.3-12.1,2.7c-2.4,5-2.4,11.4,0,16.4c2.4,5,6.1,8.2,11.2,8.2s8.8-3.2,11.2-8.2c2.4-5,2.4-11.4,0-16.4C20.5,16.5,14.6,15.4,10.9,19.1z',
                            handleSize: '80%',
                            dataBackground: {
                                areaStyle: {
                                    color: '#fff'
                                },
                                lineStyle: {
                                    opacity: 0.8,
                                    color: '#2262B9'
                                }
                            },
                            brushSelect: true,
                            xAxisIndex: 0,
                            yAxisIndex: 0,
                            filterMode: 'filter'
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,534,535
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Net Income and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Financial Data Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const seriesData = csvData.map(row => {
                    const columns = row.split(',');
                    return {
                        name: columns[1],
                        value: [parseFloat(columns[3]), parseFloat(columns[2])],
                        symbolSize: 10,
                        itemStyle: {
                            color: '#2f7ed8'
                        }
                    };
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Net Income vs Revenue'
                    },
                    tooltip: {
                        trigger: 'item',
                        formatter: params => {
                            return `${params.data.name}<br/>Net Income: ${params.data.value[1].toFixed(2)}<br/>Revenue: ${params.data.value[0].toFixed(2)}`;
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Revenue'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Net Income'
                    },
                    series: [{
                        type: 'scatter',
                        data: seriesData,
                        markLine: {
                            data: []
                        }
                    }]
                });

                chart.on('click', params => {
                    const companyName = params.data.name;
                    const url = `https://www.google.com/search?q=${companyName}`;
                    window.open(url, '_blank');
                });
            });
    </script>
</body>
</html>
```",Correct,535,536
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot with query widgets showing the Net Income and Revenue of the given dataset. Add a slider to represent the Quarter.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Financial Data Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-gl@2/dist/echarts-gl.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-stat@1/dist/echarts-stat.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-wordcloud@2/dist/echarts-wordcloud.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-liquidfill@2/dist/echarts-liquidfill.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-3d@1/dist/echarts-3d.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-3d-2@1/dist/echarts-3d-2.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-gl@2/dist/echarts-gl.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <div id=""slider"" style=""width: 800px; height: 50px;""></div>
    <script>
        var chart = echarts.init(document.getElementById('chart'));
        var slider = echarts.init(document.getElementById('slider'));

        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                var csvData = data.split('\n').map(function (row) {
                    return row.split(',');
                });

                var quarters = [...new Set(csvData.slice(1).map(function (row) {
                    return row[0];
                }))];

                var seriesData = csvData.slice(1).map(function (row) {
                    return [parseFloat(row[2]), parseFloat(row[3])];
                });

                var option = {
                    title: {
                        text: 'Net Income vs Revenue'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'cross'
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Net Income',
                        axisLabel: {
                            formatter: '{value} $'
                        }
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Revenue',
                        axisLabel: {
                            formatter: '{value} $'
                        }
                    },
                    series: [{
                        type: 'scatter',
                        data: seriesData,
                        symbolSize: 10
                    }]
                };

                var sliderOption = {
                    type: 'slider',
                    min: 0,
                    max: quarters.length - 1,
                    value: 0,
                    orient: 'horizontal',
                    tooltip: {
                        formatter: function (value) {
                            return quarters[value];
                        }
                    },
                    data: quarters.map(function (quarter, index) {
                        return {
                            value: index,
                            label: quarter
                        };
                    })
                };

                chart.setOption(option);
                slider.setOption(sliderOption);

                slider.on('dataZoom', function (params) {
                    var quarterIndex = params.startValue;
                    var quarter = quarters[quarterIndex];
                    var seriesData = csvData.slice(1).filter(function (row) {
                        return row[0] === quarter;
                    }).map(function (row) {
                        return [parseFloat(row[2]), parseFloat(row[3])];
                    });
                    chart.setOption({
                        series: [{
                            type: 'scatter',
                            data: seriesData,
                            symbolSize: 10
                        }]
                    });
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,536,537
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot showing the Net Income of Alpha Inc. Add animated transitions that connect these points using lines in order.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Financial Data Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const alphaData = csvData.filter(row => row.split(',')[1] === 'Alpha Inc.');
                const quarters = alphaData.map(row => row.split(',')[0]);
                const netIncomes = alphaData.map(row => parseFloat(row.split(',')[2]));

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Alpha Inc. Net Income Scatterplot'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    xAxis: {
                        type: 'category',
                        data: quarters
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            type: 'line',
                            data: netIncomes,
                            symbol: 'circle',
                            symbolSize: 10,
                            animationDuration: 2000,
                            animationEasing: 'cubicInOut',
                            animationDurationUpdate: 2000,
                            animationEasingUpdate: 'cubicInOut'
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,537,538
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Net Income of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Financial Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const companies = [...new Set(csvData.map(row => row.split(',')[1]))];
                const quarters = [...new Set(csvData.map(row => row.split(',')[0]))];
                const seriesData = companies.map(company => {
                    const companyData = csvData.filter(row => row.split(',')[1] === company);
                    return companyData.map(row => parseFloat(row.split(',')[2]));
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'line',
                            lineStyle: {
                                color: 'rgba(0,0,0,0.5)',
                                width: 2,
                                type: 'solid'
                            }
                        }
                    },
                    legend: {
                        data: companies
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'category',
                        data: quarters
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: companies.map((company, index) => ({
                        name: company,
                        type: 'line',
                        data: seriesData[index],
                        emphasis: {
                            focus: 'series'
                        }
                    }))
                });
            });
    </script>
</body>
</html>
```",Correct,538,539
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Financial Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [quarter, company, netIncome] = row.split(',');
                    if (quarter === 'Q1-2021') {
                        chartData[company] = parseFloat(netIncome);
                    }
                });
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Net Income for each Company in Q1-2021'
                    },
                    tooltip: {},
                    xAxis: {
                        data: Object.keys(chartData)
                    },
                    yAxis: {},
                    series: [{
                        name: 'Net Income',
                        type: 'bar',
                        data: Object.values(chartData)
                    }]
                });
                chart.on('dataZoom', params => {
                    chart.setOption({
                        dataZoom: [
                            {
                                type: 'inside',
                                start: params.start,
                                end: params.end
                            }
                        ]
                    });
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,539,540
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Net Income for each Company in Q1-2021</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [quarter, company, netIncome] = row.split(',');
                    if (quarter === 'Q1-2021') {
                        chartData[company] = parseFloat(netIncome.replace(/""/g, ''));
                    }
                });
                const seriesData = Object.keys(chartData).map(company => ({ name: company, value: chartData[company] }));
                seriesData.sort((a, b) => b.value - a.value);

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    tooltip: {
                        trigger: 'item',
                        formatter: '{a} <br/>{b} : {c}'
                    },
                    xAxis: {
                        type: 'category',
                        data: seriesData.map(item => item.name),
                        axisLabel: {
                            rotate: 45
                        }
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            name: 'Net Income',
                            type: 'bar',
                            data: seriesData.map(item => item.value),
                            itemStyle: {
                                opacity: 0.8
                            },
                            emphasis: {
                                itemStyle: {
                                    opacity: 1
                                }
                            }
                        }
                    ],
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 10
                        },
                        {
                            start: 0,
                            end: 10
                        }
                    ],
                    animation: false
                });

                chart.on('click', params => {
                    const seriesIndex = params.seriesIndex;
                    const dataIndex = params.dataIndex;
                    const seriesData = chart.getOption().series[seriesIndex].data;
                    const data = seriesData[dataIndex];
                    const name = chart.getOption().xAxis[0].data[dataIndex];
                    seriesData.splice(dataIndex, 1);
                    seriesData.push(data);
                    chart.setOption({
                        series: [
                            {
                                data: seriesData
                            }
                        ],
                        xAxis: {
                            data: chart.getOption().xAxis[0].data.filter(item => item !== name).concat(name)
                        }
                    });
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,540,541
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Net Income.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Financial Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <select id=""sort-order"">
        <option value=""desc"">Descending</option>
        <option value=""asc"">Ascending</option>
    </select>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [quarter, company, netIncome, revenue, expenses, employeeCount, industry, stockPrice] = row.split(',');
                    if (quarter === 'Q1-2021') {
                        chartData[company] = parseFloat(netIncome);
                    }
                });
                const seriesData = Object.entries(chartData).sort((a, b) => b[1] - a[1]);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Net Income for each Company in Q1-2021'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    xAxis: {
                        type: 'category',
                        data: seriesData.map(item => item[0])
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            name: 'Net Income',
                            type: 'bar',
                            data: seriesData.map(item => item[1])
                        }
                    ],
                    animationDuration: 2000,
                    animationEasing: 'cubicInOut'
                });
                document.getElementById('sort-order').addEventListener('change', () => {
                    const sortOrder = document.getElementById('sort-order').value;
                    const sortedData = Object.entries(chartData).sort((a, b) => sortOrder === 'asc' ? a[1] - b[1] : b[1] - a[1]);
                    chart.setOption({
                        xAxis: {
                            data: sortedData.map(item => item[0])
                        },
                        series: [
                            {
                                data: sortedData.map(item => item[1])
                            }
                        ]
                    });
                });
            });
    </script>
</body>
</html>
```",Correct,541,542
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Financial Data Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to our embed */
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Net Income"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Company"", ""type"": ""nominal""},
          {""field"": ""Revenue"", ""type"": ""quantitative""},
          {""field"": ""Net Income"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""axis"": {
          ""labelFontSize"": 14,
          ""titleFontSize"": 16
        }
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Execution Result,542,543
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Net Income vs Revenue Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Net Income"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Company"", ""type"": ""nominal""},
          {""field"": ""Quarter"", ""type"": ""nominal""},
          {""field"": ""Industry"", ""type"": ""nominal""},
          {""field"": ""Employee Count"", ""type"": ""quantitative""},
          {""field"": ""Stock Price"", ""type"": ""quantitative""}
        ]
      },
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x"", ""y""]}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,543,544
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Net Income vs Revenue Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Net Income"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Company"", ""type"": ""nominal""},
          {""field"": ""Revenue"", ""type"": ""quantitative""},
          {""field"": ""Net Income"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""view"": {""continuousWidth"": 400, ""continuousHeight"": 300},
        ""axis"": {""labelFontSize"": 16, ""titleFontSize"": 16},
        ""legend"": {""labelFontSize"": 16, ""titleFontSize"": 16}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Execution Result,544,545
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Net Income and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Financial Data Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to our embed */
    #vis {
      width: 800px;
      height: 600px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Net Income"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Company"", ""type"": ""nominal""},
          {""field"": ""Revenue"", ""type"": ""quantitative""},
          {""field"": ""Net Income"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""view"": {""width"": 800, ""height"": 600}
      }
    };

    const runtime = vega.parse(spec);
    const view = new vega.View(runtime)
      .initialize(""#vis"")
      .hover()
      .run();

    document.addEventListener(""click"", function(event) {
      if (event.target.classList.contains(""mark"")) {
        const company = event.target.__datum__.Company;
        const url = `https://www.google.com/search?q=${company}`;
        window.open(url, ""_blank"");
      }
    });
  </script>
</body>
</html>
```",Unexpected Initial Result,545,546
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot with query widgets showing the Net Income and Revenue of the given dataset. Add a slider to represent the Quarter.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Scatterplot with Query Widgets</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {
          ""field"": ""Revenue"",
          ""type"": ""quantitative"",
          ""scale"": {""domain"": [0, 1000000]}
        },
        ""y"": {
          ""field"": ""Net Income"",
          ""type"": ""quantitative"",
          ""scale"": {""domain"": [-100000, 500000]}
        },
        ""color"": {
          ""field"": ""Industry"",
          ""type"": ""nominal""
        },
        ""tooltip"": [
          {""field"": ""Company"", ""type"": ""nominal""},
          {""field"": ""Quarter"", ""type"": ""nominal""},
          {""field"": ""Employee Count"", ""type"": ""quantitative""},
          {""field"": ""Stock Price"", ""type"": ""quantitative""}
        ]
      },
      ""params"": [
        {
          ""name"": ""quarter"",
          ""value"": 1,
          ""bind"": {""input"": ""range"", ""min"": 1, ""max"": 4, ""step"": 1}
        }
      ],
      ""transform"": [
        {""filter"": ""datum.Quarter == quarter""}
      ]
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Execution Result,546,547
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot showing the Net Income of Alpha Inc. Add animated transitions that connect these points using lines in order.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Alpha Inc. Net Income Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Company === 'Alpha Inc.'""}
      ],
      ""mark"": {
        ""type"": ""line"",
        ""point"": true,
        ""tooltip"": true
      },
      ""encoding"": {
        ""x"": {""field"": ""Quarter"", ""type"": ""nominal"", ""sort"": null},
        ""y"": {""field"": ""Net Income"", ""type"": ""quantitative""},
        ""order"": {""field"": ""Quarter"", ""type"": ""nominal""}
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""range"": {""category"": {""scheme"": ""category20""}}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Execution Result,547,548
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Net Income of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Multi-Series Line Chart with Interactive Line Highlight</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to our chart */
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": {
        ""type"": ""line"",
        ""tooltip"": true
      },
      ""encoding"": {
        ""x"": {""field"": ""Quarter"", ""type"": ""nominal""},
        ""y"": {""field"": ""Net Income"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Company"", ""type"": ""nominal""},
        ""detail"": {""field"": ""Company"", ""type"": ""nominal""}
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""range"": {""category"": {""scheme"": ""category20""}}
      },
      ""selection"": {
        ""highlight"": {""type"": ""single"", ""on"": ""mouseover"", ""fields"": [""Company""], ""nearest"": true}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Execution Result,548,549
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Net Income for each Company in Q1-2021</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Quarter === 'Q1-2021'""},
        {""calculate"": ""datum.Net Income"", ""as"": ""Net Income""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Company"", ""type"": ""nominal""},
        ""y"": {""field"": ""Net Income"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Company"", ""type"": ""nominal""},
          {""field"": ""Net Income"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""view"": {""continuousWidth"": 400, ""continuousHeight"": 300},
        ""axis"": {""labelFontSize"": 16, ""titleFontSize"": 16},
        ""legend"": {""labelFontSize"": 16, ""titleFontSize"": 16}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Initialization Error,549,550
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Net Income Bar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Quarter === 'Q1-2021'""},
        {""sort"": [{""field"": ""Net Income"", ""order"": ""descending""}]}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Company"", ""type"": ""nominal"", ""sort"": null},
        ""y"": {""field"": ""Net Income"", ""type"": ""quantitative""},
        ""tooltip"": [{""field"": ""Company""}, {""field"": ""Net Income"", ""type"": ""quantitative""}]
      },
      ""config"": {
        ""view"": {""width"": 800, ""height"": 600},
        ""mark"": {""tooltip"": {""content"": ""encoding""}}
      }
    };

    vegaEmbed(""#vis"", spec, { ""actions"": false });
  </script>
</body>
</html>
```

**Note:** The above code does not support drag and drop functionality directly as Vega-Lite does not support this feature natively. However, you can achieve this by using Vega-Lite with Vega and Vega-Embed libraries along with some custom JavaScript code to handle the drag and drop functionality.

Here's an updated version of the code that includes a basic drag and drop functionality:

```html
<!DOCTYPE html>
<html>
<head>
  <title>Net Income Bar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
    .bar {
      cursor: move;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Quarter === 'Q1-2021'""},
        {""sort"": [{""field"": ""Net Income"", ""order"": ""descending""}]}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Company"", ""type"": ""nominal"", ""sort"": null},
        ""y"": {""field"": ""Net Income"", ""type"": ""quantitative""},
        ""tooltip"": [{""field"": ""Company""}, {""field"": ""Net Income"", ""type"": ""quantitative""}]
      },
      ""config"": {
        ""view"": {""width"": 800, ""height"": 600},
        ""mark"": {""tooltip"": {""content"": ""encoding""}}
      }
    };

    vegaEmbed(""#vis"", spec, { ""actions"": false }).then(function(result) {
      const view = result.view;
      const bars = document.querySelectorAll('.bar');

      let dragIndex = null;
      let dragRect = null;

      view.addEventListener('mousedown', function(event) {
        if (event.target.classList.contains('bar')) {
          dragIndex = Array.prototype.indexOf.call(bars, event.target);
          dragRect = event.target.getBoundingClientRect();
        }
      });

      document.addEventListener('mousemove', function(event) {
        if (dragIndex !== null) {
          const rect = event.target.getBoundingClientRect();
          const x = event.clientX - rect.left;
          const y = event.clientY - rect.top;
          const index = Math.floor(y / dragRect.height);

          if (index >= 0 && index < bars.length) {
            const temp = bars[dragIndex].style.transform;
            bars[dragIndex].style.transform = `translateY(${(index - dragIndex) * dragRect.height}px)`;
            bars[index].style.transform = temp;
            dragIndex = index;
          }
        }
      });

      document.addEventListener('mouseup', function() {
        dragIndex = null;
        dragRect = null;
      });
    });
  </script>
</body>
</html>
```

This updated code adds a basic drag and drop functionality to the bars in the chart. However, this is a simplified example and does not handle all edge cases. You may need to modify and extend this code to fit your specific requirements.",Execution Error,550,551
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Net Income.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Net Income Bar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to our chart */
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <select id=""sort-order"">
    <option value=""descending"">Descending</option>
    <option value=""ascending"">Ascending</option>
  </select>

  <script>
    const opts = {
      mode: ""vega-lite"",
      renderer: ""canvas"",
    };

    vegaEmbed(""#vis"", {
      $schema: ""https://vega.github.io/schema/vega-lite/v5.json"",
      data: {
        url: ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
        format: { type: ""csv"" },
      },
      transform: [
        {
          filter: ""datum.Quarter === 'Q1-2021'"",
        },
      ],
      mark: ""bar"",
      encoding: {
        x: {
          field: ""Company"",
          type: ""nominal"",
          sort: { field: ""Net Income"", order: ""descending"" },
        },
        y: {
          field: ""Net Income"",
          type: ""quantitative"",
        },
        tooltip: [
          { field: ""Company"", type: ""nominal"" },
          { field: ""Net Income"", type: ""quantitative"" },
        ],
      },
      config: {
        view: { stroke: null },
        axis: { domainWidth: 1 },
      },
      width: 800,
      height: 600,
    }, opts);

    document.getElementById(""sort-order"").addEventListener(""change"", (e) => {
      const sortOrder = e.target.value;
      const view = document.querySelector(""#vis"").querySelector("".vega-embed"");
      const vlSpec = view.querySelector("".vega-embed"").querySelector(""script"").innerHTML;
      const vlJson = JSON.parse(vlSpec);
      vlJson.encoding.x.sort.order = sortOrder;
      vegaEmbed(""#vis"", vlJson, opts);
    });
  </script>
</body>
</html>
```",Unexpected Initial Result,551,552
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Net Income and Revenue, and a Bar Chart on the right that displays Company versus Net Income.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Financial Data Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: inline-block;
      vertical-align: top;
    }
    .scatterplot {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
    .barchart {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart scatterplot"" id=""scatterplot""></div>
  <div class=""chart barchart"" id=""barchart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svgScatterplot = d3.select(""#scatterplot"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const svgBarchart = d3.select(""#barchart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
      data.forEach(d => {
        d[""Net Income""] = +d[""Net Income""];
        d.Revenue = +d.Revenue;
      });

      // Scatterplot
      const xScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.Revenue)])
        .range([0, width]);

      const yScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Net Income""])])
        .range([height, 0]);

      svgScatterplot.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleScatterplot));

      svgScatterplot.append(""g"")
        .call(d3.axisLeft(yScaleScatterplot));

      svgScatterplot.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScaleScatterplot(d.Revenue))
        .attr(""cy"", d => yScaleScatterplot(d[""Net Income""]))
        .attr(""r"", 5);

      // Barchart
      const xScaleBarchart = d3.scaleBand()
        .domain(data.map(d => d.Company))
        .range([0, width])
        .padding(0.2);

      const yScaleBarchart = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Net Income""])])
        .range([height, 0]);

      svgBarchart.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleBarchart));

      svgBarchart.append(""g"")
        .call(d3.axisLeft(yScaleBarchart));

      svgBarchart.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", d => xScaleBarchart(d.Company))
        .attr(""y"", d => yScaleBarchart(d[""Net Income""]))
        .attr(""width"", xScaleBarchart.bandwidth())
        .attr(""height"", d => height - yScaleBarchart(d[""Net Income""]));
    });
  </script>
</body>
</html>
```",Correct,552,553
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Net Income and Revenue, and a Bar Chart on the right that displays Company versus Net Income. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Financial Data Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: inline-block;
      vertical-align: top;
    }
    .scatterplot {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
    .barchart {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart scatterplot"" id=""scatterplot""></div>
  <div class=""chart barchart"" id=""barchart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const xScaleScatter = d3.scaleLinear().range([0, width]);
    const yScaleScatter = d3.scaleLinear().range([height, 0]);
    const xScaleBar = d3.scaleBand().range([0, width]).padding(0.2);
    const yScaleBar = d3.scaleLinear().range([height, 0]);

    const svgScatter = d3.select(""#scatterplot"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const svgBar = d3.select(""#barchart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
      data.forEach(d => {
        d[""Net Income""] = +d[""Net Income""];
        d.Revenue = +d.Revenue;
      });

      xScaleScatter.domain(d3.extent(data, d => d.Revenue));
      yScaleScatter.domain(d3.extent(data, d => d[""Net Income""]));
      xScaleBar.domain(data.map(d => d.Company));
      yScaleBar.domain([0, d3.max(data, d => d[""Net Income""])]);

      svgScatter.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleScatter));

      svgScatter.append(""g"")
        .call(d3.axisLeft(yScaleScatter));

      svgScatter.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScaleScatter(d.Revenue))
        .attr(""cy"", d => yScaleScatter(d[""Net Income""]))
        .attr(""r"", 5)
        .attr(""fill"", ""steelblue"");

      svgBar.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleBar));

      svgBar.append(""g"")
        .call(d3.axisLeft(yScaleBar));

      svgBar.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", d => xScaleBar(d.Company))
        .attr(""y"", d => yScaleBar(d[""Net Income""]))
        .attr(""width"", xScaleBar.bandwidth())
        .attr(""height"", d => height - yScaleBar(d[""Net Income""]))
        .attr(""fill"", ""steelblue"");

      const brush = d3.brush()
        .extent([[0, 0], [width, height]])
        .on(""brush"", brushed);

      svgScatter.append(""g"")
        .attr(""class"", ""brush"")
        .call(brush);

      function brushed(event) {
        const selection = event.selection;
        if (selection) {
          const minX = xScaleScatter.invert(selection[0][0]);
          const maxX = xScaleScatter.invert(selection[1][0]);
          const minY = yScaleScatter.invert(selection[1][1]);
          const maxY = yScaleScatter.invert(selection[0][1]);

          const filteredData = data.filter(d => d.Revenue >= minX && d.Revenue <= maxX && d[""Net Income""] >= minY && d[""Net Income""] <= maxY);

          svgBar.selectAll(""rect"")
            .data(data)
            .transition()
            .duration(500)
            .attr(""fill"", d => filteredData.includes(d) ? ""red"" : ""steelblue"");
        } else {
          svgBar.selectAll(""rect"")
            .data(data)
            .transition()
            .duration(500)
            .attr(""fill"", ""steelblue"");
        }
      }
    });
  </script>
</body>
</html>
```",Correct,553,554
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Net Income , while the pie chart represents the distribution of Revenue.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Financial Data Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: block;
      margin: 20px auto;
    }
    .line-chart {
      width: 800px;
      height: 400px;
    }
    .pie-chart {
      width: 800px;
      height: 400px;
    }
  </style>
</head>
<body>
  <div class=""chart line-chart"" id=""line-chart""></div>
  <div class=""chart pie-chart"" id=""pie-chart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const lineChart = d3.select(""#line-chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const pieChart = d3.select(""#pie-chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${width / 2 + margin.left}, ${height / 2 + margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
      data.forEach(d => {
        d[""Net Income""] = +d[""Net Income""];
        d.Revenue = +d.Revenue;
      });

      const xScale = d3.scaleBand()
        .domain(data.map(d => d.Company))
        .range([0, width])
        .padding(0.2);

      const yScale = d3.scaleLinear()
        .domain([d3.min(data, d => d[""Net Income""]), d3.max(data, d => d[""Net Income""])])
        .range([height, 0]);

      lineChart.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

      lineChart.append(""g"")
        .call(d3.axisLeft(yScale));

      lineChart.selectAll(""bar"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", d => xScale(d.Company))
        .attr(""y"", d => yScale(d[""Net Income""]))
        .attr(""width"", xScale.bandwidth())
        .attr(""height"", d => height - yScale(d[""Net Income""]));

      const pie = d3.pie()
        .value(d => d.Revenue);

      const arc = d3.arc()
        .outerRadius(Math.min(width, height) / 2 - 10)
        .innerRadius(0);

      pieChart.selectAll(""arc"")
        .data(pie(data))
        .enter()
        .append(""path"")
        .attr(""d"", arc)
        .attr(""fill"", (d, i) => d3.schemeCategory10[i]);
    });
  </script>
</body>
</html>
```",Correct,554,555
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Net Income , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Financial Data Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    .line-chart {
      width: 800px;
      height: 400px;
      margin-bottom: 20px;
    }
    .pie-chart {
      width: 800px;
      height: 400px;
    }
  </style>
</head>
<body>
  <div class=""chart"">
    <svg class=""line-chart""></svg>
    <svg class=""pie-chart""></svg>
  </div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const lineChart = d3.select('.line-chart')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    const pieChart = d3.select('.pie-chart')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left + width / 2}, ${margin.top + height / 2})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv').then(data => {
      data.forEach(d => {
        d['Net Income'] = +d['Net Income'];
        d.Revenue = +d.Revenue;
      });

      const xScale = d3.scaleTime()
        .domain(d3.extent(data, (d, i) => i))
        .range([0, width]);

      const yScale = d3.scaleLinear()
        .domain([d3.min(data, d => d['Net Income']), d3.max(data, d => d['Net Income'])])
        .range([height, 0]);

      lineChart.append('g')
        .attr('transform', `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

      lineChart.append('g')
        .call(d3.axisLeft(yScale));

      const line = d3.line()
        .x((d, i) => xScale(i))
        .y(d => yScale(d['Net Income']));

      lineChart.append('path')
        .datum(data)
        .attr('fill', 'none')
        .attr('stroke', 'steelblue')
        .attr('stroke-width', 1.5)
        .attr('d', line);

      const brush = d3.brushX()
        .extent([[0, 0], [width, height]])
        .on('brush end', brushed);

      lineChart.append('g')
        .attr('class', 'brush')
        .call(brush);

      function brushed(event) {
        const selection = event.selection;
        if (selection) {
          const startIndex = Math.round(xScale.invert(selection[0]));
          const endIndex = Math.round(xScale.invert(selection[1]));
          const selectedData = data.slice(startIndex, endIndex + 1);

          const pieData = d3.rollup(selectedData, v => d3.sum(v, d => d.Revenue), d => d.Company);

          const pie = d3.pie()
            .value(d => d[1]);

          const arc = d3.arc()
            .outerRadius(Math.min(width, height) / 2 - 10)
            .innerRadius(0);

          pieChart.selectAll('path')
            .remove();

          pieChart.selectAll('path')
            .data(pie(pieData))
            .enter()
            .append('path')
            .attr('d', arc)
            .attr('fill', (d, i) => d3.schemeCategory10[i]);
        }
      }
    });
  </script>
</body>
</html>
```",Correct,555,556
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Revenue, Expenses, Employee Count, and Stock Price. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot Matrix</title>
  <style>
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
    .brush .extent {
      stroke: #fff;
      fill-opacity: .125;
      shape-rendering: crispEdges;
    }
  </style>
</head>
<body>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 100, right: 100, bottom: 100, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 800 - margin.top - margin.bottom;
    const dimensions = [""Revenue"", ""Expenses"", ""Employee Count"", ""Stock Price""];
    const size = 200;

    const svg = d3.select(""body"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
      data.forEach(d => {
        dimensions.forEach(dim => {
          d[dim] = +d[dim];
        });
      });

      const x = dimensions.map(dim => {
        return d3.scaleLinear()
          .domain(d3.extent(data, d => d[dim]))
          .range([0, size]);
      });

      const y = dimensions.map(dim => {
        return d3.scaleLinear()
          .domain(d3.extent(data, d => d[dim]))
          .range([size, 0]);
      });

      const brush = d3.brush()
        .extent([[0, 0], [size, size]])
        .on(""brush"", brushed)
        .on(""end"", brushended);

      const cell = svg.selectAll("".cell"")
        .data(cross(dimensions, dimensions))
        .enter().append(""g"")
        .attr(""class"", ""cell"")
        .attr(""transform"", d => `translate(${d.i * size}, ${d.j * size})`);

      cell.append(""rect"")
        .attr(""class"", ""frame"")
        .attr(""x"", 0)
        .attr(""y"", 0)
        .attr(""width"", size)
        .attr(""height"", size);

      cell.append(""g"")
        .attr(""class"", ""x axis"")
        .attr(""transform"", `translate(0, ${size})`)
        .call(d3.axisBottom(x[d.dimensions[0]]));

      cell.append(""g"")
        .attr(""class"", ""y axis"")
        .call(d3.axisLeft(y[d.dimensions[1]]));

      cell.append(""g"")
        .attr(""class"", ""brush"")
        .call(brush);

      cell.selectAll(""circle"")
        .data(data)
        .enter().append(""circle"")
        .attr(""cx"", d => x[d.dimensions[0]](d[d.dimensions[0]]))
        .attr(""cy"", d => y[d.dimensions[1]](d[d.dimensions[1]]))
        .attr(""r"", 3);

      function brushed() {
        const s = d3.event.selection;
        cell.selectAll(""circle"")
          .classed(""hidden"", d => {
            return s && (
              s[0][0] > x[d.dimensions[0]](d[d.dimensions[0]]) ||
              s[1][0] < x[d.dimensions[0]](d[d.dimensions[0]]) ||
              s[0][1] > y[d.dimensions[1]](d[d.dimensions[1]]) ||
              s[1][1] < y[d.dimensions[1]](d[d.dimensions[1]])
            );
          });
      }

      function brushended() {
        if (!d3.event.selection) {
          cell.selectAll(""circle"")
            .classed(""hidden"", false);
        }
      }

      function cross(a, b) {
        const c = [];
        for (let i = 0; i < a.length; i++) {
          for (let j = 0; j < b.length; j++) {
            c.push({ i, j, dimensions: [a[i], b[j]] });
          }
        }
        return c;
      }
    });
  </script>
</body>
</html>
```",Initialization Error,556,557
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a brushable Scatterplot that visualizes the relationship between Net Income and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot with Brush</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      position: relative;
      display: inline-block;
    }
    .chart .brush {
      fill: #ccc;
      fill-opacity: .3;
      stroke: #fff;
    }
    .chart .brush .extent {
      fill-opacity: .3;
      stroke: #fff;
    }
    .chart .axis path,
    .chart .axis line {
      fill: none;
      stroke: #000;
      shape-rendering: crispEdges;
    }
    .chart .axis text {
      font-size: 12px;
    }
    .table {
      position: absolute;
      top: 0;
      right: 0;
      background-color: #fff;
      border: 1px solid #ddd;
      padding: 10px;
    }
    .table th,
    .table td {
      padding: 5px;
      border-bottom: 1px solid #ddd;
    }
    .table th {
      font-weight: bold;
    }
  </style>
</head>
<body>
  <div class=""chart"" style=""width: 800px; height: 600px;""></div>
  <div class=""table""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 200, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select("".chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const table = d3.select("".table"");

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
      data.forEach(d => {
        d[""Net Income""] = +d[""Net Income""];
        d.Revenue = +d.Revenue;
      });

      const x = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.Revenue)])
        .range([0, width]);

      const y = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Net Income""])])
        .range([height, 0]);

      const xAxis = d3.axisBottom(x)
        .ticks(10)
        .tickSize(-height);

      const yAxis = d3.axisLeft(y)
        .ticks(10)
        .tickSize(-width);

      svg.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(xAxis);

      svg.append(""g"")
        .call(yAxis);

      const brush = d3.brush()
        .extent([[0, 0], [width, height]])
        .on(""brush"", brushed)
        .on(""end"", brushended);

      svg.append(""g"")
        .call(brush);

      svg.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => x(d.Revenue))
        .attr(""cy"", d => y(d[""Net Income""]))
        .attr(""r"", 5);

      function brushed() {
        const selection = d3.event.selection;
        const selectedData = data.filter(d => {
          return selection[0][0] <= x(d.Revenue) && x(d.Revenue) <= selection[1][0]
            && selection[0][1] <= y(d[""Net Income""]) && y(d[""Net Income""]) <= selection[1][1];
        });

        table.selectAll(""tr"").remove();

        const tableRows = table.selectAll(""tr"")
          .data(selectedData.slice(0, 20))
          .enter()
          .append(""tr"");

        tableRows.selectAll(""td"")
          .data(d => Object.values(d))
          .enter()
          .append(""td"")
          .text(d => d);
      }

      function brushended() {
        if (!d3.event.selection) {
          table.selectAll(""tr"").remove();
        }
      }
    });
  </script>
</body>
</html>
```",Unexpected Initial Result,557,558
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a horizontal Bar Chart that shows all the data concerning Net Income, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Net Income Bar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      position: relative;
      display: inline-block;
    }
    .minimap {
      position: absolute;
      top: 0;
      right: 0;
      width: 100px;
      height: 400px;
      background-color: #f0f0f0;
      border: 1px solid #ccc;
    }
    .minimap rect {
      fill: #ccc;
    }
  </style>
</head>
<body>
  <div class=""chart"" style=""width:800px;height:400px;""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 120, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const svg = d3.select("".chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Net Income""] = +d[""Net Income""];
        });

        const x = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Net Income""])])
          .range([0, width]);

        const y = d3.scaleBand()
          .domain(data.map(d => d.Company))
          .range([0, height])
          .padding(0.2);

        svg.selectAll(""rect"")
          .data(data)
          .enter()
          .append(""rect"")
          .attr(""x"", 0)
          .attr(""y"", d => y(d.Company))
          .attr(""width"", d => x(d[""Net Income""]))
          .attr(""height"", y.bandwidth());

        svg.selectAll(""text"")
          .data(data)
          .enter()
          .append(""text"")
          .attr(""x"", d => x(d[""Net Income""]) + 5)
          .attr(""y"", d => y(d.Company) + y.bandwidth() / 2 + 5)
          .text(d => d[""Net Income""]);

        const minimap = d3.select("".chart"")
          .append(""div"")
          .attr(""class"", ""minimap"");

        const minimapSvg = minimap.append(""svg"")
          .attr(""width"", 100)
          .attr(""height"", height);

        minimapSvg.selectAll(""rect"")
          .data(data)
          .enter()
          .append(""rect"")
          .attr(""x"", 0)
          .attr(""y"", d => y(d.Company))
          .attr(""width"", 100)
          .attr(""height"", y.bandwidth());

        minimapSvg.selectAll(""rect"")
          .data(data)
          .enter()
          .append(""rect"")
          .attr(""x"", 0)
          .attr(""y"", d => y(d.Company))
          .attr(""width"", d => 100 * (d[""Net Income""] / d3.max(data, d => d[""Net Income""])))
          .attr(""height"", y.bandwidth())
          .attr(""fill"", ""steelblue"");
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,558,559
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Net Income and Revenue, and a Bar Chart on the right that displays Company versus Net Income.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Financial Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
    <style>
        #chart-container {
            display: flex;
            width: 100%;
            height: 600px;
        }
        #scatterplot {
            width: 50%;
            height: 100%;
        }
        #barchart {
            width: 50%;
            height: 100%;
        }
    </style>
</head>
<body>
    <div id=""chart-container"">
        <div id=""scatterplot""></div>
        <div id=""barchart""></div>
    </div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const scatterplotData = [];
                const barchartData = {};
                csvData.forEach(row => {
                    const [quarter, company, netIncome, revenue, expenses, employeeCount, industry, stockPrice] = row.split(',');
                    scatterplotData.push([parseFloat(revenue), parseFloat(netIncome)]);
                    if (!barchartData[company]) {
                        barchartData[company] = parseFloat(netIncome);
                    } else {
                        barchartData[company] += parseFloat(netIncome);
                    }
                });
                const scatterplotChart = echarts.init(document.getElementById('scatterplot'));
                scatterplotChart.setOption({
                    title: {
                        text: 'Net Income vs Revenue'
                    },
                    xAxis: {
                        name: 'Revenue'
                    },
                    yAxis: {
                        name: 'Net Income'
                    },
                    series: [{
                        type: 'scatter',
                        data: scatterplotData
                    }]
                });
                const barchartChart = echarts.init(document.getElementById('barchart'));
                barchartChart.setOption({
                    title: {
                        text: 'Company vs Net Income'
                    },
                    xAxis: {
                        type: 'category',
                        data: Object.keys(barchartData)
                    },
                    yAxis: {
                        name: 'Net Income'
                    },
                    series: [{
                        type: 'bar',
                        data: Object.values(barchartData)
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,559,560
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Net Income and Revenue, and a Bar Chart on the right that displays Company versus Net Income. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Financial Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <style>
        #chart-container {
            display: flex;
            width: 100%;
            height: 600px;
        }
        #scatterplot {
            width: 50%;
            height: 100%;
        }
        #barchart {
            width: 50%;
            height: 100%;
        }
    </style>
</head>
<body>
    <div id=""chart-container"">
        <div id=""scatterplot""></div>
        <div id=""barchart""></div>
    </div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const scatterplotData = csvData.map(row => [+row[2], +row[3]]);
                const barchartData = csvData.map(row => [row[1], +row[2]]);

                const scatterplotChart = echarts.init(document.getElementById('scatterplot'));
                const barchartChart = echarts.init(document.getElementById('barchart'));

                const optionScatterplot = {
                    title: {
                        text: 'Net Income vs Revenue'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Revenue'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Net Income'
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: scatterplotData,
                            emphasis: {
                                itemStyle: {
                                    opacity: 1
                                }
                            }
                        }
                    ],
                    brush: {
                        xAxisIndex: 'all',
                        brushLink: 'all',
                        outOfBrush: {
                            colorAlpha: 0.1
                        }
                    }
                };

                const optionBarchart = {
                    title: {
                        text: 'Company vs Net Income'
                    },
                    xAxis: {
                        type: 'category',
                        data: barchartData.map(row => row[0])
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Net Income'
                    },
                    series: [
                        {
                            type: 'bar',
                            data: barchartData.map(row => row[1])
                        }
                    ]
                };

                scatterplotChart.setOption(optionScatterplot);
                barchartChart.setOption(optionBarchart);

                scatterplotChart.on('brushSelected', params => {
                    const selectedData = params.batch[0].areas[0].dataIndex;
                    const selectedCompany = barchartData[selectedData][0];
                    const series = barchartChart.getOption().series[0];
                    series.data.forEach((value, index) => {
                        if (barchartData[index][0] === selectedCompany) {
                            series.data[index] = {
                                value: value,
                                itemStyle: {
                                    opacity: 1
                                }
                            };
                        } else {
                            series.data[index] = {
                                value: value,
                                itemStyle: {
                                    opacity: 0.1
                                }
                            };
                        }
                    });
                    barchartChart.setOption({
                        series: [series]
                    });
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,560,561
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Net Income , while the pie chart represents the distribution of Revenue.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Financial Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px; display: flex; flex-direction: column;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const quarters = csvData.map(row => row[0]);
                const netIncomes = csvData.map(row => parseFloat(row[2]));
                const revenues = csvData.map(row => parseFloat(row[3]));

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    grid: [
                        { top: '10%', left: '10%', width: '80%', height: '40%' },
                        { top: '60%', left: '10%', width: '80%', height: '30%' }
                    ],
                    series: [
                        {
                            type: 'line',
                            gridIndex: 0,
                            data: netIncomes,
                            xAxis: {
                                type: 'category',
                                data: quarters
                            },
                            yAxis: {}
                        },
                        {
                            type: 'pie',
                            gridIndex: 1,
                            data: revenues.map((revenue, index) => ({ value: revenue, name: quarters[index] })),
                            radius: '60%'
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Initialization Error,561,562
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Net Income , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Financial Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <style>
        #chart {
            width: 800px;
            height: 600px;
            border: 1px solid #ccc;
            padding: 20px;
        }
    </style>
</head>
<body>
    <div id=""chart""></div>
    <script>
        // Load data from CSV file
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                // Parse CSV data
                const rows = data.split('\n').slice(1);
                const financialData = rows.map(row => {
                    const columns = row.split(',');
                    return {
                        Quarter: columns[0],
                        Company: columns[1],
                        NetIncome: parseFloat(columns[2]),
                        Revenue: parseFloat(columns[3]),
                        Expenses: parseFloat(columns[4]),
                        EmployeeCount: parseInt(columns[5]),
                        Industry: columns[6],
                        StockPrice: parseFloat(columns[7])
                    };
                });

                // Create line chart for Net Income trend
                const lineChartOption = {
                    title: {
                        text: 'Net Income Trend'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    xAxis: {
                        type: 'category',
                        data: financialData.map(data => data.Quarter)
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            name: 'Net Income',
                            type: 'line',
                            data: financialData.map(data => data.NetIncome),
                            markLine: {
                                data: [{ type: 'max' }, { type: 'min' }]
                            }
                        }
                    ],
                    brush: {
                        id: 'brush',
                        xAxisIndex: 'all',
                        brushLink: 'all',
                        throttleType: 'debounce',
                        throttleDelay: 300
                    }
                };

                // Create pie chart for Revenue distribution
                const pieChartOption = {
                    title: {
                        text: 'Revenue Distribution'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    series: [
                        {
                            name: 'Revenue',
                            type: 'pie',
                            data: financialData.map(data => ({ name: data.Company, value: data.Revenue })),
                            emphasis: {
                                itemStyle: {
                                    shadowBlur: 10,
                                    shadowOffsetX: 0,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            }
                        }
                    ]
                };

                // Initialize charts
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    grid: [
                        {
                            top: '10%',
                            left: '10%',
                            width: '80%',
                            height: '40%'
                        },
                        {
                            top: '60%',
                            left: '10%',
                            width: '80%',
                            height: '30%'
                        }
                    ],
                    graphic: [
                        {
                            type: 'text',
                            left: 'center',
                            top: '55%',
                            style: {
                                text: 'Drag the brush to select data points',
                                fontSize: 14
                            }
                        }
                    ]
                });

                // Set chart options
                chart.setOption([lineChartOption, pieChartOption], {
                    replaceMerge: ['brush']
                });

                // Update pie chart on brush change
                chart.on('brushSelected', params => {
                    if (params.batch[0].areas[0]) {
                        const startIndex = params.batch[0].areas[0].start;
                        const endIndex = params.batch[0].areas[0].end;
                        const selectedData = financialData.slice(startIndex, endIndex + 1);
                        const pieChartData = selectedData.map(data => ({ name: data.Company, value: data.Revenue }));
                        chart.setOption({
                            series: [
                                {
                                    id: 'pie',
                                    data: pieChartData
                                }
                            ]
                        });
                    }
                });
            });
    </script>
</body>
</html>
```",Initialization Error,562,563
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Revenue, Expenses, Employee Count, and Stock Price. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/d3@7.4.4/dist/d3.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = d3.csvParse(data);
                const dimensions = ['Revenue', 'Expenses', 'Employee Count', 'Stock Price'];
                const series = [];
                const links = [];

                dimensions.forEach((dimension, i) => {
                    dimensions.forEach((otherDimension, j) => {
                        if (i < j) {
                            const serie = {
                                type: 'scatter',
                                name: `${dimension} vs ${otherDimension}`,
                                data: csvData.map(row => [+row[dimension], +row[otherDimension]]),
                                dimensions: [dimension, otherDimension],
                                encode: {
                                    x: dimension,
                                    y: otherDimension
                                }
                            };
                            series.push(serie);

                            links.push({
                                source: `${dimension} vs ${otherDimension}`,
                                target: `${otherDimension} vs ${dimension}`
                            });
                        }
                    });
                });

                const option = {
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'cross'
                        }
                    },
                    brush: {
                        brushLink: series.map(serie => serie.name),
                        xAxisIndex: 'all',
                        yAxisIndex: 'all',
                        brushType: 'rect',
                        transformable: false,
                        brushMode: 'multiple',
                        throttleType: 'debounce',
                        throttleDelay: 300
                    },
                    series: series,
                    dataset: {
                        source: csvData,
                        dimensions: dimensions
                    },
                    xAxis: dimensions.map(dimension => ({ name: dimension })),
                    yAxis: dimensions.map(dimension => ({ name: dimension })),
                    grid: {
                        left: '10%',
                        right: '10%',
                        top: '10%',
                        bottom: '10%'
                    }
                };

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,563,564
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a brushable Scatterplot that visualizes the relationship between Net Income and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Financial Data Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <div id=""table"" style=""width: 200px; height: 600px; overflow-y: auto; border: 1px solid black; position: absolute; left: 820px; top: 0;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const chartData = csvData.map(row => [+row[2], +row[3]]);

                const chart = echarts.init(document.getElementById('chart'));
                const table = document.getElementById('table');

                chart.setOption({
                    tooltip: {},
                    xAxis: {
                        type: 'value',
                        name: 'Net Income'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Revenue'
                    },
                    series: [{
                        type: 'scatter',
                        data: chartData,
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        },
                        brush: {
                            type: 'rect',
                            throttleType: 'fixRate',
                            throttleDelay: 100
                        }
                    }],
                    dataZoom: [
                        {
                            type: 'inside',
                            throttle: 50
                        }
                    ]
                });

                chart.on('brushSelected', params => {
                    const selectedData = params.batch[0].areas[0].data;
                    const tableHtml = selectedData.slice(0, 20).map((row, index) => {
                        const rowData = csvData.find(data => data[2] === row[0].toString() && data[3] === row[1].toString());
                        return `
                            <tr>
                                <td>${index + 1}</td>
                                <td>${rowData[1]}</td>
                                <td>${rowData[2]}</td>
                                <td>${rowData[3]}</td>
                                <td>${rowData[4]}</td>
                                <td>${rowData[5]}</td>
                                <td>${rowData[6]}</td>
                                <td>${rowData[7]}</td>
                            </tr>
                        `;
                    }).join('');
                    table.innerHTML = `
                        <table>
                            <tr>
                                <th>No.</th>
                                <th>Company</th>
                                <th>Net Income</th>
                                <th>Revenue</th>
                                <th>Expenses</th>
                                <th>Employee Count</th>
                                <th>Industry</th>
                                <th>Stock Price</th>
                            </tr>
                            ${tableHtml}
                        </table>
                    `;
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,564,565
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a horizontal Bar Chart that shows all the data concerning Net Income, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Financial Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const netIncomeData = csvData.map(row => [row[1], parseFloat(row[2])]);
                const sortedData = netIncomeData.sort((a, b) => b[1] - a[1]);

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '20%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'value',
                        position: 'top'
                    },
                    yAxis: {
                        type: 'category',
                        data: sortedData.map(item => item[0]),
                        axisLine: {
                            show: false
                        },
                        axisTick: {
                            show: false
                        }
                    },
                    series: [
                        {
                            name: 'Net Income',
                            type: 'bar',
                            data: sortedData.map(item => item[1]),
                            label: {
                                show: true,
                                position: 'right',
                                formatter: '{c}'
                            }
                        }
                    ],
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 100
                        },
                        {
                            show: true,
                            type: 'slider',
                            start: 0,
                            end: 100,
                            filterMode: 'filter'
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,565,566
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Net Income and Revenue, and a Bar Chart on the right that displays Company versus Net Income.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Financial Data Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: row;
    }
  </style>
</head>
<body>
  <div id=""vis"">
    <div id=""scatterplot""></div>
    <div id=""barchart""></div>
  </div>

  <script>
    const scatterplotSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Net Income"", ""type"": ""quantitative""}
      }
    };

    const barchartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"" },
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Company"", ""type"": ""nominal"", ""sort"": ""-y""},
        ""y"": {""field"": ""Net Income"", ""type"": ""quantitative""}
      }
    };

    vegaEmbed(""#scatterplot"", scatterplotSpec);
    vegaEmbed(""#barchart"", barchartSpec);
  </script>
</body>
</html>
```",Correct,566,567
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Net Income and Revenue, and a Bar Chart on the right that displays Company versus Net Income. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Financial Data Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: row;
    }
    #scatterplot {
      width: 50%;
    }
    #barchart {
      width: 50%;
    }
  </style>
</head>
<body>
  <div id=""vis"">
    <div id=""scatterplot""></div>
    <div id=""barchart""></div>
  </div>

  <script>
    const scatterplotSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Net Income"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Company"", ""type"": ""nominal""}
      },
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x"", ""y""]}
      }
    };

    const barchartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"" },
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Company"", ""type"": ""nominal"", ""sort"": ""-y""},
        ""y"": {""field"": ""Net Income"", ""type"": ""quantitative""},
        ""color"": {""condition"": {""test"": ""datum.Company === parent.parent.selection.brush[0].Company"", ""value"": ""steelblue""}, ""value"": ""gray""}
      }
    };

    vegaEmbed(""#scatterplot"", scatterplotSpec);
    vegaEmbed(""#barchart"", barchartSpec);
  </script>
</body>
</html>
```",Unexpected Initial Result,567,568
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Net Income , while the pie chart represents the distribution of Revenue.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Financial Data Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const lineChartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"" },
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {""field"": ""Quarter"", ""type"": ""nominal""},
        ""y"": {""field"": ""Net Income"", ""type"": ""quantitative""}
      }
    };

    const pieChartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"" },
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Revenue"", ""type"": ""quantitative"", ""stack"": true},
        ""color"": {""field"": ""Company"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", lineChartSpec, { mode: ""vega-lite"" });
    vegaEmbed(""#vis"", pieChartSpec, { mode: ""vega-lite"" });
  </script>
</body>
</html>
```",Unexpected Initial Result,568,569
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Net Income , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Financial Data Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const lineChartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 500,
      ""height"": 300,
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"" },
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {""field"": ""Quarter"", ""type"": ""nominal""},
        ""y"": {""field"": ""Net Income"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Company"", ""type"": ""nominal""}
      },
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x""]}
      }
    };

    const pieChartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 500,
      ""height"": 300,
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"" },
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Revenue"", ""type"": ""quantitative"", ""aggregate"": ""sum""},
        ""color"": {""field"": ""Company"", ""type"": ""nominal""}
      },
      ""transform"": [
        {""filter"": {""selection"": ""brush""}}
      ]
    };

    vegaEmbed(""#vis"", lineChartSpec).then(function(result) {
      const lineView = result.view;
      vegaEmbed(""#vis"", pieChartSpec).then(function(result) {
        const pieView = result.view;
        lineView.addSignalListener(""brush"", function(name, value) {
          pieView.signal(""brush"", value).run();
        });
      });
    });
  </script>
</body>
</html>
```",Initialization Error,569,570
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Revenue, Expenses, Employee Count, and Stock Price. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Scatterplot Matrix</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to make the chart more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    // Define the data URL
    const dataUrl = ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"";

    // Define the Vega-Lite specification
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": dataUrl },
      ""mark"": ""point"",
      ""selection"": {
        ""brush"": {
          ""type"": ""interval"",
          ""encodings"": [""x"", ""y""],
          ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
          ""translate"": ""[mousedown[!event.shiftKey], mouseup] > mousemove!"",
          ""zoom"": ""wheel![event.shiftKey]"",
          ""resolve"": ""global""
        }
      },
      ""encoding"": {
        ""x"": {""field"": {""repeat"": ""column""}},
        ""y"": {""field"": {""repeat"": ""row""}},
        ""tooltip"": [
          {""field"": ""Company""},
          {""field"": ""Quarter""},
          {""field"": ""Net Income""},
          {""field"": ""Revenue""},
          {""field"": ""Expenses""},
          {""field"": ""Employee Count""},
          {""field"": ""Industry""},
          {""field"": ""Stock Price""}
        ]
      },
      ""repeat"": {
        ""row"": [""Revenue"", ""Expenses"", ""Employee Count"", ""Stock Price""],
        ""column"": [""Revenue"", ""Expenses"", ""Employee Count"", ""Stock Price""]
      },
      ""config"": {
        ""axis"": {
          ""labelFontSize"": 12,
          ""titleFontSize"": 14
        }
      }
    };

    // Embed the chart
    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Initialization Error,570,571
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a brushable Scatterplot that visualizes the relationship between Net Income and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Brushable Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 600,
      ""height"": 400,
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Net Income"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Company"", ""type"": ""nominal""},
          {""field"": ""Quarter"", ""type"": ""nominal""},
          {""field"": ""Industry"", ""type"": ""nominal""},
          {""field"": ""Employee Count"", ""type"": ""quantitative""},
          {""field"": ""Stock Price"", ""type"": ""quantitative""}
        ]
      },
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x"", ""y""]}
      }
    };

    const spec2 = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 200,
      ""height"": 400,
      ""data"": {
        ""name"": ""brushed_data""
      },
      ""mark"": ""table"",
      ""encoding"": {
        ""row"": {""field"": ""Company"", ""type"": ""nominal""},
        ""column"": {""field"": ""Quarter"", ""type"": ""nominal""},
        ""color"": {""field"": ""Industry"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", {
      ""mode"": ""vega-lite"",
      ""spec"": spec,
      ""actions"": false
    }).then(function(result) {
      const view = result.view;
      const runtime = view.runtime;
      const brush = runtime.getMark(""brush"");
      const table = vegaEmbed(""#vis"", {
        ""mode"": ""vega-lite"",
        ""spec"": spec2,
        ""actions"": false
      }).then(function(result) {
        const tableView = result.view;
        const tableRuntime = tableView.runtime;
        const tableData = tableRuntime.data(""brushed_data"");
        brush.on(""interrupt"", function() {
          const brushedData = view.data(""source_0"").items();
          const filteredData = brushedData.filter(function(d) {
            return d.brushed;
          });
          tableData.clear();
          tableData.insert(filteredData.slice(0, 20));
          tableView.run();
        });
      });
    });
  </script>
</body>
</html>
```",Initialization Error,571,572
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a horizontal Bar Chart that shows all the data concerning Net Income, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Net Income Bar Chart with Minimap</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 700,
      ""height"": 500,
      ""padding"": 5,
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""vconcat"": [
        {
          ""mark"": ""bar"",
          ""encoding"": {
            ""x"": {""field"": ""Net Income"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Company"", ""type"": ""nominal"", ""sort"": ""-x""},
            ""tooltip"": [{""field"": ""Net Income"", ""type"": ""quantitative""}]
          }
        },
        {
          ""mark"": ""bar"",
          ""encoding"": {
            ""x"": {""field"": ""Net Income"", ""type"": ""quantitative"", ""aggregate"": ""sum""},
            ""y"": {""field"": ""Company"", ""type"": ""nominal"", ""sort"": ""-x""},
            ""color"": {""value"": ""lightgray""},
            ""opacity"": {""value"": 0.3},
            ""width"": 700,
            ""height"": 30
          }
        }
      ]
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Initialization Error,572,573
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot of Net Income vs Revenue</title>
  <style>
    /* Add some basic styling to make the chart look better */
    body {
      font-family: Arial, sans-serif;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    // Set up the SVG and margins
    const margin = { top: 50, right: 50, bottom: 100, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;
    const svg = d3.select('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    // Load the data
    d3.csv('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
      .then(data => {
        // Convert data types
        data.forEach(d => {
          d['Net Income'] = +d['Net Income'];
          d.Revenue = +d.Revenue;
        });

        // Set up the scales
        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Revenue)])
          .range([0, width]);
        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Net Income'])])
          .range([height, 0]);

        // Add the axes
        const xAxis = d3.axisBottom(xScale)
          .ticks(10)
          .tickFormat(d3.format('.0s'));
        const yAxis = d3.axisLeft(yScale)
          .ticks(10)
          .tickFormat(d3.format('.0s'));
        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(xAxis)
          .append('text')
          .attr('x', width / 2)
          .attr('y', 40)
          .attr('text-anchor', 'middle')
          .text('Revenue');
        svg.append('g')
          .call(yAxis)
          .append('text')
          .attr('transform', 'rotate(-90)')
          .attr('x', -height / 2)
          .attr('y', -60)
          .attr('text-anchor', 'middle')
          .text('Net Income');

        // Add the scatterplot points
        svg.selectAll('circle')
          .data(data)
          .enter()
          .append('circle')
          .attr('cx', d => xScale(d.Revenue))
          .attr('cy', d => yScale(d['Net Income']))
          .attr('r', 5)
          .attr('fill', 'steelblue');
      });
  </script>
</body>
</html>
```",Correct,573,574
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Line Chart that visualizes the trend of Net Income over the Quarter for each Company.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Net Income Trend</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 800px;
      height: 600px;
      margin: 50px auto;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 700;
    const height = 500;
    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
      data.forEach(d => {
        d[""Net Income""] = +d[""Net Income""];
        d.Quarter = +d.Quarter;
      });

      const companies = [...new Set(data.map(d => d.Company))];

      const xScale = d3.scaleLinear()
        .domain(d3.extent(data, d => d.Quarter))
        .range([0, width]);

      const yScale = d3.scaleLinear()
        .domain([d3.min(data, d => d[""Net Income""]), d3.max(data, d => d[""Net Income""])])
        .range([height, 0]);

      svg.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

      svg.append(""g"")
        .call(d3.axisLeft(yScale));

      companies.forEach(company => {
        const companyData = data.filter(d => d.Company === company);

        const line = d3.line()
          .x(d => xScale(d.Quarter))
          .y(d => yScale(d[""Net Income""]));

        svg.append(""path"")
          .datum(companyData)
          .attr(""fill"", ""none"")
          .attr(""stroke"", ""steelblue"")
          .attr(""stroke-width"", 1.5)
          .attr(""d"", line);
      });
    });
  </script>
</body>
</html>
```",Initialization Error,574,575
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Net Income for each Company in Q1-2021</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .bar {
      fill: steelblue;
    }
    .bar:hover {
      fill: brown;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Net Income""] = +d[""Net Income""];
          d.Quarter = d.Quarter;
          d.Company = d.Company;
        });

        const q1Data = data.filter(d => d.Quarter === ""Q1-2021"");

        const x = d3.scaleBand()
          .domain(q1Data.map(d => d.Company))
          .range([0, width])
          .padding(0.2);

        const y = d3.scaleLinear()
          .domain([0, d3.max(q1Data, d => d[""Net Income""])])
          .range([height, 0]);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(x));

        svg.append(""g"")
          .call(d3.axisLeft(y));

        svg.selectAll(""bar"")
          .data(q1Data)
          .enter()
          .append(""rect"")
          .attr(""class"", ""bar"")
          .attr(""x"", d => x(d.Company))
          .attr(""y"", d => y(d[""Net Income""]))
          .attr(""width"", x.bandwidth())
          .attr(""height"", d => height - y(d[""Net Income""]));
      });
  </script>
</body>
</html>
```",Correct,575,576
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Pie Chart that visualizes the proportion of Net Income contributed by each Company in Q1-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Net Income Proportion by Company in Q1-2021</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 600px;
      height: 400px;
      margin: 40px auto;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 600 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;
    const radius = Math.min(width, height) / 2;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${width / 2 + margin.left}, ${height / 2 + margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Net Income""] = +d[""Net Income""];
          d.Quarter = d.Quarter;
          d.Company = d.Company;
        });

        const q1Data = data.filter(d => d.Quarter === ""Q1-2021"");

        const pie = d3.pie()
          .value(d => d[""Net Income""]);

        const arc = d3.arc()
          .outerRadius(radius)
          .innerRadius(0);

        const arcs = svg.selectAll(""arc"")
          .data(pie(q1Data))
          .enter()
          .append(""g"")
          .attr(""class"", ""arc"");

        arcs.append(""path"")
          .attr(""d"", arc)
          .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

        arcs.append(""text"")
          .attr(""transform"", d => `translate(${arc.centroid(d)})`)
          .attr(""dy"", ""0.35em"")
          .text(d => `${d.data.Company}: ${d3.format("".2f"")(d.value / d3.sum(q1Data, d => d[""Net Income""]) * 100)}%`);
      });
  </script>
</body>
</html>
```",Correct,576,577
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Donut Chart that visualizes the distribution of Net Income among Company in Q1-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Donut Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 500px;
      height: 500px;
      margin: 50px auto;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;
    const radius = Math.min(width, height) / 2;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${width / 2 + margin.left}, ${height / 2 + margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Net Income""] = +d[""Net Income""];
          d.Quarter = d.Quarter;
        });

        const q1Data = data.filter(d => d.Quarter === ""Q1-2021"");

        const pie = d3.pie()
          .value(d => d[""Net Income""]);

        const arc = d3.arc()
          .outerRadius(radius - 10)
          .innerRadius(radius - 100);

        const arcs = svg.selectAll(""arc"")
          .data(pie(q1Data))
          .enter()
          .append(""g"")
          .attr(""class"", ""arc"");

        arcs.append(""path"")
          .attr(""d"", arc)
          .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

        arcs.append(""text"")
          .attr(""transform"", d => `translate(${arc.centroid(d)})`)
          .attr(""dy"", ""0.35em"")
          .text(d => `${d.data.Company}: ${d.value.toLocaleString()}`);

        svg.append(""text"")
          .attr(""x"", 0)
          .attr(""y"", -200)
          .attr(""text-anchor"", ""middle"")
          .style(""font-size"", ""24px"")
          .text(""Distribution of Net Income among Companies in Q1-2021"");
      });
  </script>
</body>
</html>
```",Correct,577,578
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Coxcomb Chart(polar area chart) to compare the Net Income of different Company in Q1-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coxcomb Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 600px;
      height: 600px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 20, left: 20 };
    const width = 600 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Net Income""] = +d[""Net Income""];
          d.Quarter = d.Quarter;
          d.Company = d.Company;
        });

        const q1Data = data.filter(d => d.Quarter === ""Q1-2021"");

        const companies = Array.from(new Set(q1Data.map(d => d.Company)));

        const angleScale = d3.scalePoint()
          .domain(companies)
          .range([0, 2 * Math.PI]);

        const radiusScale = d3.scaleLinear()
          .domain([0, d3.max(q1Data, d => d[""Net Income""])])
          .range([0, Math.min(width, height) / 2]);

        svg.selectAll(""path"")
          .data(q1Data)
          .enter()
          .append(""path"")
          .attr(""d"", d => {
            const startAngle = angleScale(d.Company);
            const endAngle = startAngle + (2 * Math.PI / companies.length);
            const radius = radiusScale(d[""Net Income""]);
            return `M ${width / 2} ${height / 2} L ${width / 2 + radius * Math.cos(startAngle)} ${height / 2 + radius * Math.sin(startAngle)} A ${radius} ${radius} 0 ${endAngle - startAngle > Math.PI ? 1 : 0} 1 ${width / 2 + radius * Math.cos(endAngle)} ${height / 2 + radius * Math.sin(endAngle)} Z`;
          })
          .attr(""fill"", (d, i) => d3.schemeCategory10[i % 10])
          .attr(""stroke"", ""black"")
          .attr(""stroke-width"", 1);

        svg.selectAll(""text"")
          .data(companies)
          .enter()
          .append(""text"")
          .attr(""x"", d => width / 2 + (radiusScale(d3.max(q1Data, d => d[""Net Income""])) + 10) * Math.cos(angleScale(d)))
          .attr(""y"", d => height / 2 + (radiusScale(d3.max(q1Data, d => d[""Net Income""])) + 10) * Math.sin(angleScale(d)))
          .text(d => d);
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,578,579
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Radar Chart to compare the Net Income of different Company in Q1-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Radar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path, .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg width=""600"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 600 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;
    const svg = d3.select('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
      .then(data => {
        data.forEach(d => {
          d['Net Income'] = +d['Net Income'];
          d['Quarter'] = d['Quarter'];
          d['Company'] = d['Company'];
        });

        const q1Data = data.filter(d => d['Quarter'] === 'Q1-2021');

        const companies = [...new Set(q1Data.map(d => d['Company']))];
        const angles = companies.map((_, i) => i * (360 / companies.length));

        const maxNetIncome = Math.max(...q1Data.map(d => d['Net Income']));
        const radius = Math.min(width, height) / 2 - 50;

        const radarLine = d3.lineRadial()
          .angle((d, i) => angles[i])
          .radius(d => d.value / maxNetIncome * radius);

        const g = svg.selectAll('g')
          .data(q1Data.filter(d => companies.includes(d['Company'])))
          .enter()
          .append('g')
          .attr('transform', `translate(${width / 2}, ${height / 2})`);

        g.append('path')
          .datum(d => companies.map(company => ({ value: q1Data.find(c => c['Company'] === company)['Net Income'] })))
          .attr('d', radarLine)
          .attr('stroke', 'black')
          .attr('stroke-width', 2)
          .attr('fill', 'none');

        const axis = svg.selectAll('axis')
          .data(angles)
          .enter()
          .append('line')
          .attr('x1', width / 2)
          .attr('y1', height / 2)
          .attr('x2', (d, i) => width / 2 + radius * Math.cos(d * Math.PI / 180))
          .attr('y2', (d, i) => height / 2 + radius * Math.sin(d * Math.PI / 180))
          .attr('stroke', 'black')
          .attr('stroke-width', 1);

        const labels = svg.selectAll('labels')
          .data(companies)
          .enter()
          .append('text')
          .attr('x', (d, i) => width / 2 + (radius + 20) * Math.cos(angles[i] * Math.PI / 180))
          .attr('y', (d, i) => height / 2 + (radius + 20) * Math.sin(angles[i] * Math.PI / 180))
          .text(d => d);
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,579,580
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Streamgraph that visualizes the changes of Net Income over the Quarter for each Company.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Streamgraph of Net Income over Quarter for each Company</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
      data.forEach(d => {
        d[""Net Income""] = +d[""Net Income""];
        d.Quarter = d.Quarter;
        d.Company = d.Company;
      });

      const companies = Array.from(new Set(data.map(d => d.Company)));
      const quarters = Array.from(new Set(data.map(d => d.Quarter)));

      const xScale = d3.scalePoint()
        .domain(quarters)
        .range([0, width])
        .padding(0.5);

      const yScale = d3.scaleLinear()
        .range([height, 0]);

      const zScale = d3.scaleOrdinal(d3.schemeCategory10)
        .domain(companies);

      const stack = d3.stack()
        .keys(companies)
        .offset(d3.stackOffsetWiggle)
        .order(d3.stackOrderNone);

      const stackedData = stack(data);

      yScale.domain([d3.min(stackedData, d => d3.min(d, d => d[0])), d3.max(stackedData, d => d3.max(d, d => d[1]))]);

      svg.selectAll(""layer"")
        .data(stackedData)
        .enter()
        .append(""path"")
        .attr(""class"", ""layer"")
        .attr(""d"", d3.line()
          .x((d, i) => xScale(quarters[i]))
          .y0(d => yScale(d[0]))
          .y1(d => yScale(d[1]))
        )
        .style(""fill"", (d, i) => zScale(companies[i]));

      svg.append(""g"")
        .attr(""class"", ""axis"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

      svg.append(""g"")
        .attr(""class"", ""axis"")
        .call(d3.axisLeft(yScale));
    });
  </script>
</body>
</html>
```",Initialization Error,580,581
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Slopegraph to compare the Net Income between Q1-2021 and Q2-2021 for each Company.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Slopegraph</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .slopegraph {
      width: 800px;
      height: 600px;
      margin: 50px auto;
    }
    .slopegraph .line {
      stroke: #ccc;
      stroke-width: 1.5px;
    }
    .slopegraph .circle {
      fill: #fff;
      stroke: #ccc;
      stroke-width: 1.5px;
    }
    .slopegraph .label {
      font-size: 12px;
      text-anchor: middle;
    }
  </style>
</head>
<body>
  <svg class=""slopegraph""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('.slopegraph')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
      .then(data => {
        data.forEach(d => {
          d['Net Income'] = +d['Net Income'];
          d['Quarter'] = d['Quarter'].replace('Q', '').split('-');
          d['Quarter'] = `${d['Quarter'][0]}-${d['Quarter'][1]}`;
        });

        const q1Data = data.filter(d => d['Quarter'] === '1-2021');
        const q2Data = data.filter(d => d['Quarter'] === '2-2021');

        const companies = [...new Set(data.map(d => d['Company']))];
        const netIncomeExtent = d3.extent(data, d => d['Net Income']);

        const xScale = d3.scalePoint()
          .domain(['Q1-2021', 'Q2-2021'])
          .range([0, width])
          .padding(0.5);

        const yScale = d3.scaleLinear()
          .domain(netIncomeExtent)
          .range([height, 0]);

        svg.selectAll('.line')
          .data(companies)
          .enter()
          .append('line')
          .attr('class', 'line')
          .attr('x1', d => xScale('Q1-2021'))
          .attr('y1', d => yScale(q1Data.find(q => q['Company'] === d)['Net Income']))
          .attr('x2', d => xScale('Q2-2021'))
          .attr('y2', d => yScale(q2Data.find(q => q['Company'] === d)['Net Income']));

        svg.selectAll('.circle')
          .data(companies)
          .enter()
          .append('circle')
          .attr('class', 'circle')
          .attr('cx', d => xScale('Q1-2021'))
          .attr('cy', d => yScale(q1Data.find(q => q['Company'] === d)['Net Income']))
          .attr('r', 5);

        svg.selectAll('.circle2')
          .data(companies)
          .enter()
          .append('circle')
          .attr('class', 'circle')
          .attr('cx', d => xScale('Q2-2021'))
          .attr('cy', d => yScale(q2Data.find(q => q['Company'] === d)['Net Income']))
          .attr('r', 5);

        svg.selectAll('.label')
          .data(companies)
          .enter()
          .append('text')
          .attr('class', 'label')
          .attr('x', d => xScale('Q1-2021'))
          .attr('y', d => yScale(q1Data.find(q => q['Company'] === d)['Net Income']) - 10)
          .text(d => d);

        svg.selectAll('.label2')
          .data(companies)
          .enter()
          .append('text')
          .attr('class', 'label')
          .attr('x', d => xScale('Q2-2021'))
          .attr('y', d => yScale(q2Data.find(q => q['Company'] === d)['Net Income']) - 10)
          .text(d => d);

        svg.append('text')
          .attr('x', xScale('Q1-2021'))
          .attr('y', height + 20)
          .text('Q1-2021');

        svg.append('text')
          .attr('x', xScale('Q2-2021'))
          .attr('y', height + 20)
          .text('Q2-2021');
      });
  </script>
</body>
</html>
```",Correct,581,582
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Heatmap that visualizes the Net Income across Company and Quarters.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Heatmap of Net Income across Company and Quarters</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path, .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 80, right: 100, bottom: 100, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Net Income""] = +d[""Net Income""];
          d.Quarter = d.Quarter;
          d.Company = d.Company;
        });

        const companies = [...new Set(data.map(d => d.Company))].sort();
        const quarters = [...new Set(data.map(d => d.Quarter))].sort();

        const xScale = d3.scaleBand()
          .domain(companies)
          .range([0, width])
          .padding(0.1);

        const yScale = d3.scaleBand()
          .domain(quarters)
          .range([height, 0])
          .padding(0.1);

        const colorScale = d3.scaleSequential()
          .domain([d3.min(data, d => d[""Net Income""]), d3.max(data, d => d[""Net Income""])])
          .interpolator(d3.interpolateBlues);

        svg.selectAll(""rect"")
          .data(data)
          .enter()
          .append(""rect"")
          .attr(""x"", d => xScale(d.Company))
          .attr(""y"", d => yScale(d.Quarter))
          .attr(""width"", xScale.bandwidth())
          .attr(""height"", yScale.bandwidth())
          .attr(""fill"", d => colorScale(d[""Net Income""]));

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale))
          .selectAll(""text"")
          .attr(""transform"", ""rotate(-45)"")
          .attr(""text-anchor"", ""end"");

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        svg.append(""text"")
          .attr(""x"", width / 2)
          .attr(""y"", -40)
          .attr(""text-anchor"", ""middle"")
          .text(""Heatmap of Net Income across Company and Quarters"");

        svg.append(""text"")
          .attr(""x"", -height / 2)
          .attr(""y"", -60)
          .attr(""text-anchor"", ""middle"")
          .attr(""transform"", ""rotate(-90)"")
          .text(""Quarter"");

        svg.append(""text"")
          .attr(""x"", width / 2)
          .attr(""y"", height + 20)
          .attr(""text-anchor"", ""middle"")
          .text(""Company"");

        svg.append(""g"")
          .attr(""transform"", `translate(${width + 20}, 0)`)
          .call(d3.legendColor()
            .scale(colorScale)
            .title(""Net Income"")
            .cells(10));
      });
  </script>
</body>
</html>
```",Correct,582,583
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Stacked Bar Chart</title>
  <style>
    .chart {
      width: 800px;
      height: 600px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('.chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
      .then(data => {
        data.forEach(d => {
          d['Net Income'] = +d['Net Income'];
          d['Revenue'] = +d['Revenue'];
          d['Expenses'] = +d['Expenses'];
        });

        const subgroups = ['Net Income', 'Revenue', 'Expenses'];
        const groups = Array.from(new Set(data.map(d => d.Company)));

        const x = d3.scaleBand()
          .domain(groups)
          .range([0, width])
          .padding(0.2);

        const y = d3.scaleLinear()
          .domain([0, d3.max(data, d => d3.max(subgroups, key => d[key]))])
          .range([height, 0]);

        const xSubgroup = d3.scaleBand()
          .domain(subgroups)
          .range([0, x.bandwidth()])
          .padding(0.05);

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(x));

        svg.append('g')
          .call(d3.axisLeft(y));

        const group = svg.selectAll('groups')
          .data(groups)
          .enter()
          .append('g')
          .attr('transform', d => `translate(${x(d)}, 0)`);

        const bars = group.selectAll('rect')
          .data(d => subgroups.map(key => ({ key, value: data.find(item => item.Company === d)[key] })))
          .enter()
          .append('rect')
          .attr('x', d => xSubgroup(d.key))
          .attr('y', d => y(d.value))
          .attr('width', xSubgroup.bandwidth())
          .attr('height', d => height - y(d.value));
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,583,584
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Horizontal Bar Chart that visualizes the Net Income for each Company in Q1-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Net Income for each Company in Q1-2021</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 40px;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 300 - margin.top - margin.bottom;

    const svg = d3.select("".chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Net Income""] = +d[""Net Income""];
          d.Quarter = d.Quarter;
        });

        const q1Data = data.filter(d => d.Quarter === ""Q1-2021"");

        const x = d3.scaleLinear()
          .domain([0, d3.max(q1Data, d => d[""Net Income""])])
          .range([0, width]);

        const y = d3.scaleBand()
          .domain(q1Data.map(d => d.Company))
          .range([height, 0])
          .padding(0.2);

        svg.selectAll(""rect"")
          .data(q1Data)
          .enter()
          .append(""rect"")
          .attr(""x"", 0)
          .attr(""y"", d => y(d.Company))
          .attr(""width"", d => x(d[""Net Income""]))
          .attr(""height"", y.bandwidth());

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(x));

        svg.append(""g"")
          .call(d3.axisLeft(y));
      });
  </script>
</body>
</html>
```",Correct,584,585
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Financial Data Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = csvData.map(row => {
                    const [quarter, company, netIncome, revenue, expenses, employeeCount, industry, stockPrice] = row.split(',');
                    return [parseFloat(revenue), parseFloat(netIncome)];
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Relationship between Net Income and Revenue'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Revenue'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Net Income'
                    },
                    series: [{
                        type: 'scatter',
                        data: chartData
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,585,586
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Line Chart that visualizes the trend of Net Income over the Quarter for each Company.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Financial Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const companies = [...new Set(csvData.map(row => row.split(',')[1]))];
                const quarters = [...new Set(csvData.map(row => row.split(',')[0]))];
                const seriesData = companies.map(company => {
                    const companyData = csvData.filter(row => row.split(',')[1] === company);
                    return companyData.map(row => parseFloat(row.split(',')[2]));
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Net Income Trend Over Quarters'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    legend: {
                        data: companies
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    toolbox: {
                        feature: {
                            saveAsImage: {}
                        }
                    },
                    xAxis: {
                        type: 'category',
                        boundaryGap: false,
                        data: quarters
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: companies.map((company, index) => ({
                        name: company,
                        type: 'line',
                        data: seriesData[index]
                    }))
                });
            });
    </script>
</body>
</html>
```",Correct,586,587
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Net Income for each Company in Q1-2021</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [quarter, company, netIncome] = row.split(',');
                    if (quarter === 'Q1-2021') {
                        chartData[company] = parseFloat(netIncome.replace('$', '').replace(',', ''));
                    }
                });
                const companies = Object.keys(chartData);
                const netIncomes = Object.values(chartData);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Net Income for each Company in Q1-2021'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    xAxis: {
                        type: 'category',
                        data: companies
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            name: 'Net Income',
                            type: 'bar',
                            data: netIncomes
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,587,588
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Pie Chart that visualizes the proportion of Net Income contributed by each Company in Q1-2021.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Net Income Proportion by Company in Q1-2021</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const q1Data = csvData.filter(row => row.split(',')[0] === 'Q1-2021');
                const companyData = {};
                q1Data.forEach(row => {
                    const company = row.split(',')[1];
                    const netIncome = parseFloat(row.split(',')[2]);
                    if (company in companyData) {
                        companyData[company] += netIncome;
                    } else {
                        companyData[company] = netIncome;
                    }
                });
                const seriesData = Object.keys(companyData).map(company => ({ name: company, value: companyData[company] }));
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Net Income Proportion by Company in Q1-2021'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    series: [
                        {
                            type: 'pie',
                            data: seriesData,
                            emphasis: {
                                itemStyle: {
                                    shadowBlur: 10,
                                    shadowOffsetX: 0,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            }
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,588,589
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Donut Chart that visualizes the distribution of Net Income among Company in Q1-2021.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Donut Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [quarter, company, netIncome] = row.split(',');
                    if (quarter === 'Q1-2021') {
                        if (chartData[company]) {
                            chartData[company] += parseFloat(netIncome);
                        } else {
                            chartData[company] = parseFloat(netIncome);
                        }
                    }
                });
                const seriesData = Object.keys(chartData).map(company => ({ name: company, value: chartData[company] }));
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Distribution of Net Income among Companies in Q1-2021',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    legend: {
                        orient: 'vertical',
                        left: 'left'
                    },
                    series: [
                        {
                            type: 'pie',
                            radius: ['40%', '70%'],
                            avoidLabelOverlap: false,
                            label: {
                                show: false,
                                position: 'center'
                            },
                            emphasis: {
                                label: {
                                    show: true,
                                    fontSize: '40',
                                    fontWeight: 'bold'
                                }
                            },
                            labelLine: {
                                show: false
                            },
                            data: seriesData
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,589,590
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Coxcomb Chart(polar area chart) to compare the Net Income of different Company in Q1-2021.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coxcomb Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [quarter, company, netIncome] = row.split(',');
                    if (quarter === 'Q1-2021') {
                        chartData[company] = parseFloat(netIncome.replace(/""/g, ''));
                    }
                });
                const seriesData = Object.keys(chartData).map(company => ({ value: chartData[company], name: company }));
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Net Income of Companies in Q1-2021',
                        left: 'center'
                    },
                    angleAxis: {
                        type: 'category',
                        data: seriesData.map(item => item.name),
                        z: 10
                    },
                    radiusAxis: {
                        type: 'value',
                        axisLabel: {
                            formatter: '{value}'
                        },
                        axisLine: {
                            lineStyle: {
                                color: '#ddd'
                            }
                        }
                    },
                    polar: {
                        center: ['50%', '50%'],
                        radius: '70%'
                    },
                    series: [
                        {
                            type: 'bar',
                            data: seriesData,
                            coordinateSystem: 'polar',
                            name: 'Net Income',
                            stack: 'a',
                            emphasis: {
                                focus: 'series'
                            }
                        }
                    ],
                    legend: {
                        show: true,
                        data: ['Net Income']
                    }
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,590,591
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Radar Chart to compare the Net Income of different Company in Q1-2021.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Radar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 1000px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const q1Data = csvData.filter(row => row.split(',')[0] === 'Q1-2021');
                const companies = [...new Set(q1Data.map(row => row.split(',')[1]))];
                const netIncomes = companies.map(company => {
                    const companyData = q1Data.find(row => row.split(',')[1] === company);
                    return parseFloat(companyData.split(',')[2].replace(/,/g, ''));
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Net Income of Companies in Q1-2021'
                    },
                    radar: {
                        indicator: companies.map(company => ({ name: company, max: Math.max(...netIncomes) })),
                        radius: 80,
                        center: ['50%', '50%']
                    },
                    series: [{
                        type: 'radar',
                        data: [{ value: netIncomes }]
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,591,592
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Streamgraph that visualizes the changes of Net Income over the Quarter for each Company.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Streamgraph of Net Income over Quarter for each Company</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const companies = [...new Set(csvData.map(row => row.split(',')[1]))];
                const quarters = [...new Set(csvData.map(row => row.split(',')[0]))];
                const seriesData = companies.map(company => {
                    const companyData = csvData.filter(row => row.split(',')[1] === company);
                    return quarters.map(quarter => {
                        const quarterData = companyData.find(row => row.split(',')[0] === quarter);
                        return quarterData ? parseFloat(quarterData.split(',')[2]) : 0;
                    });
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Streamgraph of Net Income over Quarter for each Company'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'line',
                            lineStyle: {
                                color: 'rgba(0,0,0,0.2)',
                                width: 1,
                                type: 'solid'
                            }
                        }
                    },
                    legend: {
                        data: companies
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'category',
                        data: quarters
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: companies.map((company, index) => ({
                        name: company,
                        type: 'streamgraph',
                        stack: '总量',
                        data: seriesData[index]
                    }))
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,592,593
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Slopegraph to compare the Net Income between Q1-2021 and Q2-2021 for each Company.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Slopegraph</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 1000px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const q1Data = {};
                const q2Data = {};
                csvData.forEach(row => {
                    const [quarter, company, netIncome] = row.split(',');
                    if (quarter === 'Q1-2021') {
                        q1Data[company] = parseFloat(netIncome);
                    } else if (quarter === 'Q2-2021') {
                        q2Data[company] = parseFloat(netIncome);
                    }
                });
                const companies = Object.keys(q1Data);
                const seriesData = companies.map(company => [q1Data[company], q2Data[company]]);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Net Income Slopegraph'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    grid: {
                        left: '10%',
                        right: '10%',
                        bottom: '10%',
                        top: '10%'
                    },
                    xAxis: [
                        {
                            type: 'value',
                            position: 'bottom',
                            name: 'Q1-2021',
                            nameLocation: 'middle',
                            nameGap: 30,
                            axisLine: {
                                lineStyle: {
                                    color: '#999'
                                }
                            },
                            axisLabel: {
                                formatter: '{value}M'
                            }
                        },
                        {
                            type: 'value',
                            position: 'top',
                            name: 'Q2-2021',
                            nameLocation: 'middle',
                            nameGap: 30,
                            axisLine: {
                                lineStyle: {
                                    color: '#999'
                                }
                            },
                            axisLabel: {
                                formatter: '{value}M'
                            }
                        }
                    ],
                    yAxis: [
                        {
                            type: 'category',
                            data: companies,
                            axisLine: {
                                lineStyle: {
                                    color: '#999'
                                }
                            },
                            axisTick: {
                                alignWithLabel: true
                            }
                        }
                    ],
                    series: [
                        {
                            name: 'Net Income',
                            type: 'line',
                            symbolSize: 10,
                            symbol: 'circle',
                            lineStyle: {
                                color: '#666'
                            },
                            data: seriesData
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,593,594
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Heatmap that visualizes the Net Income across Company and Quarters.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Heatmap of Net Income across Company and Quarters</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const companies = [...new Set(csvData.map(row => row.split(',')[1]))];
                const quarters = [...new Set(csvData.map(row => row.split(',')[0]))];
                const heatmapData = csvData.map(row => {
                    const [quarter, company, netIncome] = row.split(',');
                    return [quarters.indexOf(quarter), companies.indexOf(company), parseFloat(netIncome)];
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Heatmap of Net Income across Company and Quarters'
                    },
                    tooltip: {
                        position: 'top'
                    },
                    grid: {
                        height: '50%',
                        top: '10%'
                    },
                    xAxis: {
                        type: 'category',
                        data: quarters,
                        splitArea: {
                            show: true
                        }
                    },
                    yAxis: {
                        type: 'category',
                        data: companies,
                        splitArea: {
                            show: true
                        }
                    },
                    visualMap: {
                        min: -100000000,
                        max: 100000000,
                        calculable: true,
                        orient: 'horizontal',
                        left: 'center',
                        bottom: '15%'
                    },
                    series: [{
                        name: 'Net Income',
                        type: 'heatmap',
                        data: heatmapData,
                        label: {
                            show: true
                        },
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,594,595
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Financial Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const companies = [...new Set(csvData.map(row => row.split(',')[1]))];
                const quarters = [...new Set(csvData.map(row => row.split(',')[0]))];
                const netIncomeData = quarters.map(quarter => {
                    return companies.map(company => {
                        const row = csvData.find(row => row.split(',')[0] === quarter && row.split(',')[1] === company);
                        return row ? parseFloat(row.split(',')[2]) : 0;
                    });
                });
                const revenueData = quarters.map(quarter => {
                    return companies.map(company => {
                        const row = csvData.find(row => row.split(',')[0] === quarter && row.split(',')[1] === company);
                        return row ? parseFloat(row.split(',')[3]) : 0;
                    });
                });
                const expensesData = quarters.map(quarter => {
                    return companies.map(company => {
                        const row = csvData.find(row => row.split(',')[0] === quarter && row.split(',')[1] === company);
                        return row ? parseFloat(row.split(',')[4]) : 0;
                    });
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Financial Data'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    legend: {
                        data: ['Net Income', 'Revenue', 'Expenses']
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'category',
                        data: quarters
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            name: 'Net Income',
                            type: 'bar',
                            stack: 'total',
                            data: netIncomeData[0]
                        },
                        {
                            name: 'Revenue',
                            type: 'bar',
                            stack: 'total',
                            data: revenueData[0]
                        },
                        {
                            name: 'Expenses',
                            type: 'bar',
                            stack: 'total',
                            data: expensesData[0]
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,595,596
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Horizontal Bar Chart that visualizes the Net Income for each Company in Q1-2021.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Net Income for each Company in Q1-2021</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [quarter, company, netIncome] = row.split(',');
                    if (quarter === 'Q1-2021') {
                        chartData[company] = parseFloat(netIncome.replace('$', '').replace(',', ''));
                    }
                });
                const seriesData = Object.keys(chartData).map(company => ({ value: chartData[company], name: company }));
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Net Income for each Company in Q1-2021'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'value',
                        boundaryGap: [0, 0.01]
                    },
                    yAxis: {
                        type: 'category',
                        data: seriesData.map(item => item.name)
                    },
                    series: [
                        {
                            name: 'Net Income',
                            type: 'bar',
                            data: seriesData.map(item => item.value)
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,596,597
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Scatterplot of Net Income vs Revenue</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Net Income"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Company"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,597,598
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Line Chart that visualizes the trend of Net Income over the Quarter for each Company.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Net Income Trend Over Quarters</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"" },
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {""field"": ""Quarter"", ""type"": ""nominal""},
        ""y"": {""field"": ""Net Income"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Company"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,598,599
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Net Income for each Company in Q1-2021</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Quarter === 'Q1-2021'""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Company"", ""type"": ""nominal""},
        ""y"": {""field"": ""Net Income"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Company"", ""type"": ""nominal""},
          {""field"": ""Net Income"", ""type"": ""quantitative""}
        ]
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,599,600
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Pie Chart that visualizes the proportion of Net Income contributed by each Company in Q1-2021.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Net Income Proportion by Company in Q1-2021</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Quarter === 'Q1-2021'""},
        {""aggregate"": [{""op"": ""sum"", ""field"": ""Net Income"", ""as"": ""Total Net Income""}], ""groupby"": [""Company""]},
        {""sort"": [{""field"": ""Total Net Income"", ""order"": ""descending""}]}
      ],
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Total Net Income"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Company"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,600,601
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Donut Chart that visualizes the distribution of Net Income among Company in Q1-2021.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Donut Chart with Vega-Lite</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>

  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Quarter === 'Q1-2021'""},
        {""calculate"": ""datum.Net Income"", ""as"": ""NetIncome""}
      ],
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""NetIncome"", ""type"": ""quantitative"", ""stack"": true},
        ""color"": {""field"": ""Company"", ""type"": ""nominal""}
      },
      ""view"": {""stroke"": null}
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Initialization Error,601,602
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Coxcomb Chart(polar area chart) to compare the Net Income of different Company in Q1-2021.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coxcomb Chart with Vega-Lite</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Quarter === 'Q1-2021'""},
        {""calculate"": ""datum.Net Income"", ""as"": ""NetIncome""}
      ],
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""NetIncome"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Company"", ""type"": ""nominal""}
      },
      ""view"": {""stroke"": null},
      ""config"": {""arc"": {""padAngle"": 0.01}}
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Initialization Error,602,603
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Radar Chart to compare the Net Income of different Company in Q1-2021.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Radar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>

  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Quarter === 'Q1-2021'""},
        {""calculate"": ""datum.Net Income"", ""as"": ""NetIncome""}
      ],
      ""mark"": ""line"",
      ""encoding"": {
        ""theta"": {""field"": ""Company"", ""type"": ""nominal"", ""scale"": {""range"": [0, 360]}},
        ""radius"": {""field"": ""NetIncome"", ""type"": ""quantitative""}
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""grid"": false}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Initialization Error,603,604
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Streamgraph that visualizes the changes of Net Income over the Quarter for each Company.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Streamgraph of Net Income over Quarter for each Company</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""area"",
      ""encoding"": {
        ""x"": {""field"": ""Quarter"", ""type"": ""nominal""},
        ""y"": {""field"": ""Net Income"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Company"", ""type"": ""nominal""}
      },
      ""config"": {
        ""view"": {""stroke"": null},
        ""axis"": {""labelFontSize"": 14, ""titleFontSize"": 14}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,604,605
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Slopegraph to compare the Net Income between Q1-2021 and Q2-2021 for each Company.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Slopegraph of Net Income between Q1-2021 and Q2-2021</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Quarter === 'Q1-2021' || datum.Quarter === 'Q2-2021'""},
        {""calculate"": ""datum.Quarter === 'Q1-2021' ? 'Q1-2021' : 'Q2-2021'"", ""as"": ""Quarter2""},
        {""pivot"": ""Net Income"", ""groupby"": [""Company"", ""Quarter2""]}
      ],
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {""field"": ""Quarter2"", ""type"": ""nominal"", ""axis"": {""labelAngle"": 0}},
        ""y"": {""field"": ""value"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Company"", ""type"": ""nominal""},
        ""detail"": {""field"": ""Company"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Initialization Error,605,606
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Heatmap that visualizes the Net Income across Company and Quarters.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Heatmap of Net Income across Company and Quarters</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"" },
      ""mark"": ""rect"",
      ""encoding"": {
        ""x"": {""field"": ""Quarter"", ""type"": ""nominal""},
        ""y"": {""field"": ""Company"", ""type"": ""nominal""},
        ""color"": {""field"": ""Net Income"", ""type"": ""quantitative""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,606,607
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Stacked Bar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Company"", ""type"": ""nominal""},
        ""y"": {""field"": ""Net Income"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Industry"", ""type"": ""nominal""},
        ""tooltip"": [
          {""field"": ""Company"", ""type"": ""nominal""},
          {""field"": ""Net Income"", ""type"": ""quantitative""},
          {""field"": ""Industry"", ""type"": ""nominal""}
        ]
      },
      ""config"": {
        ""view"": {""stroke"": null},
        ""axis"": {""grid"": false}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,607,608
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Horizontal Bar Chart that visualizes the Net Income for each Company in Q1-2021.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Net Income for each Company in Q1-2021</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Quarter === 'Q1-2021'""},
        {""sort"": [{""field"": ""Net Income"", ""order"": ""descending""}]}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Net Income"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Company"", ""type"": ""nominal"", ""sort"": ""-x""},
        ""tooltip"": [{""field"": ""Net Income"", ""type"": ""quantitative""}]
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,608,609
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .tooltip {
      position: absolute;
      padding: 10px;
      font-size: 12px;
      border-radius: 5px;
      background-color: #f0f0f0;
      border: 1px solid #ccc;
      pointer-events: none;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 100, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('svg')
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
      .then(data => {
        data.forEach(d => {
          d['Units Sold'] = +d['Units Sold'];
          d.Revenue = +d.Revenue;
        });

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Units Sold'])])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Revenue)])
          .range([height, 0]);

        const xAxis = d3.axisBottom(xScale)
          .ticks(10);

        const yAxis = d3.axisLeft(yScale)
          .ticks(10);

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(xAxis)
          .append('text')
          .attr('x', width / 2)
          .attr('y', 30)
          .attr('text-anchor', 'middle')
          .text('Units Sold');

        svg.append('g')
          .call(yAxis)
          .append('text')
          .attr('x', -30)
          .attr('y', -20)
          .attr('text-anchor', 'middle')
          .text('Revenue');

        const tooltip = d3.select('body')
          .append('div')
          .attr('class', 'tooltip')
          .style('opacity', 0);

        svg.selectAll('circle')
          .data(data)
          .enter()
          .append('circle')
          .attr('cx', d => xScale(d['Units Sold']))
          .attr('cy', d => yScale(d.Revenue))
          .attr('r', 5)
          .on('mouseover', (event, d) => {
            tooltip.transition()
              .duration(200)
              .style('opacity', 1);
            tooltip.html(`Units Sold: ${d['Units Sold']}<br>Revenue: ${d.Revenue}`)
              .style('left', (event.pageX + 10) + 'px')
              .style('top', (event.pageY - 10) + 'px');
          })
          .on('mouseout', () => {
            tooltip.transition()
              .duration(200)
              .style('opacity', 0);
          });
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,609,610
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .brush .extent {
      fill-opacity: .3;
      stroke: #fff;
      shape-rendering: crispEdges;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Units Sold""] = +d[""Units Sold""];
          d.Revenue = +d.Revenue;
        });

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Units Sold""])])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Revenue)])
          .range([height, 0]);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        const brush = d3.brush()
          .extent([[0, 0], [width, height]])
          .on(""brush"", brushed);

        svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d[""Units Sold""]))
          .attr(""cy"", d => yScale(d.Revenue))
          .attr(""r"", 5);

        svg.append(""g"")
          .attr(""class"", ""brush"")
          .call(brush);

        function brushed(event) {
          const selection = event.selection;
          if (selection) {
            svg.selectAll(""circle"")
              .classed(""selected"", d => {
                const x = xScale(d[""Units Sold""]);
                const y = yScale(d.Revenue);
                return x >= selection[0][0] && x <= selection[1][0] && y <= selection[0][1] && y >= selection[1][1];
              });
          } else {
            svg.selectAll(""circle"")
              .classed(""selected"", false);
          }
        }

        svg.selectAll(""circle"")
          .on(""mouseover"", function(event, d) {
            d3.select(this)
              .attr(""r"", 7);
          })
          .on(""mouseout"", function(event, d) {
            d3.select(this)
              .attr(""r"", 5);
          });
      });
  </script>
</body>
</html>
```",Correct,610,611
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Retail Sales Scatterplot</title>
    <style>
        /* set the CSS */
        body { 
            font: 12px Arial;
        }
        
        .axis path,
        .axis line {
            fill: none;
            stroke: grey;
            stroke-width: 1;
            shape-rendering: crispEdges;
        }
        
        .axis text {
            font-size: 12px;
        }
        
        .zoom {
            cursor: move;
            cursor: grab;
            cursor: -moz-grab;
            cursor: -webkit-grab;
        }
        
        .zoom:active {
            cursor: grabbing;
            cursor: -moz-grabbing;
            cursor: -webkit-grabbing;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        // set the dimensions and margins of the graph
        var margin = {top: 20, right: 20, bottom: 30, left: 40},
            width = 800 - margin.left - margin.right,
            height = 600 - margin.top - margin.bottom;
        
        // append the svg object to the body of the page
        var svg = d3.select(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .call(d3.zoom().scaleExtent([1, 10]).on(""zoom"", zoomed))
            .append(""g"")
            .attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");
        
        // get the data
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(function(data) {
            // format the data
            data.forEach(function(d) {
                d[""Units Sold""] = +d[""Units Sold""];
                d.Revenue = +d.Revenue;
            });
            
            // add the x Axis
            var x = d3.scaleLinear()
                .domain([0, d3.max(data, function(d) { return d[""Units Sold""]; })])
                .range([0, width]);
            svg.append(""g"")
                .attr(""transform"", ""translate(0,"" + height + "")"")
                .call(d3.axisBottom(x));
            
            // add the y Axis
            var y = d3.scaleLinear()
                .domain([0, d3.max(data, function(d) { return d.Revenue; })])
                .range([height, 0]);
            svg.append(""g"")
                .call(d3.axisLeft(y));
            
            // add the points
            svg.selectAll(""circle"")
                .data(data)
                .enter()
                .append(""circle"")
                .attr(""cx"", function(d) { return x(d[""Units Sold""]); })
                .attr(""cy"", function(d) { return y(d.Revenue); })
                .attr(""r"", 5);
        });
        
        // zoom function
        function zoomed() {
            svg.selectAll(""circle"")
                .attr(""cx"", function(d) { return x(d[""Units Sold""]) * d3.event.transform.k + d3.event.transform.x; })
                .attr(""cy"", function(d) { return y(d.Revenue) * d3.event.transform.k + d3.event.transform.y; });
            svg.selectAll(""g"")
                .attr(""transform"", d3.event.transform);
        }
    </script>
</body>
</html>
```",Execution Error,611,612
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .tooltip {
      position: absolute;
      background-color: #f9f9f9;
      border: 1px solid #ccc;
      padding: 5px;
      visibility: hidden;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Units Sold""] = +d[""Units Sold""];
          d.Revenue = +d.Revenue;
        });

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Units Sold""])])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Revenue)])
          .range([height, 0]);

        svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d[""Units Sold""]))
          .attr(""cy"", d => yScale(d.Revenue))
          .attr(""r"", 5)
          .on(""click"", (event, d) => {
            const url = `https://www.google.com/search?q=${d.Product}`;
            window.open(url, ""_blank"");
          })
          .on(""mouseover"", (event, d) => {
            const tooltip = d3.select(""body"")
              .append(""div"")
              .attr(""class"", ""tooltip"")
              .style(""left"", (event.pageX + 10) + ""px"")
              .style(""top"", (event.pageY - 10) + ""px"")
              .style(""visibility"", ""visible"")
              .html(`Product: ${d.Product}<br>Units Sold: ${d[""Units Sold""]}<br>Revenue: ${d.Revenue}`);
          })
          .on(""mouseout"", () => {
            d3.select("".tooltip"").remove();
          });

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        svg.append(""text"")
          .attr(""x"", width / 2)
          .attr(""y"", height + 30)
          .attr(""text-anchor"", ""middle"")
          .text(""Units Sold"");

        svg.append(""text"")
          .attr(""x"", -height / 2)
          .attr(""y"", -30)
          .attr(""text-anchor"", ""middle"")
          .attr(""transform"", ""rotate(-90)"")
          .text(""Revenue"");
      });
  </script>
</body>
</html>
```",Correct,612,613
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot with query widgets showing the Units Sold and Revenue of the given dataset. Add a slider to represent the Year.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <div id=""chart""></div>
  <div id=""slider""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const xScale = d3.scaleLinear().range([0, width]);
    const yScale = d3.scaleLinear().range([height, 0]);

    const xAxis = d3.axisBottom(xScale);
    const yAxis = d3.axisLeft(yScale);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Units Sold""] = +d[""Units Sold""];
          d.Revenue = +d.Revenue;
          d.Year = +d.Year;
        });

        const minYear = d3.min(data, d => d.Year);
        const maxYear = d3.max(data, d => d.Year);

        const slider = d3.select(""#slider"")
          .append(""input"")
          .attr(""type"", ""range"")
          .attr(""min"", minYear)
          .attr(""max"", maxYear)
          .attr(""value"", minYear)
          .on(""input"", update);

        function update() {
          const year = +slider.property(""value"");
          const filteredData = data.filter(d => d.Year === year);

          xScale.domain([0, d3.max(filteredData, d => d[""Units Sold""])]);
          yScale.domain([0, d3.max(filteredData, d => d.Revenue)]);

          svg.selectAll(""circle"")
            .data(filteredData)
            .join(""circle"")
            .attr(""cx"", d => xScale(d[""Units Sold""]))
            .attr(""cy"", d => yScale(d.Revenue))
            .attr(""r"", 5);

          svg.select("".x-axis"")
            .call(xAxis.scale(xScale));

          svg.select("".y-axis"")
            .call(yAxis.scale(yScale));
        }

        update();

        svg.append(""g"")
          .attr(""class"", ""x-axis"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(xAxis.scale(xScale));

        svg.append(""g"")
          .attr(""class"", ""y-axis"")
          .call(yAxis.scale(yScale));

        svg.append(""text"")
          .attr(""x"", width / 2)
          .attr(""y"", height + margin.bottom - 5)
          .attr(""text-anchor"", ""middle"")
          .text(""Units Sold"");

        svg.append(""text"")
          .attr(""x"", -height / 2)
          .attr(""y"", -margin.left + 15)
          .attr(""text-anchor"", ""middle"")
          .attr(""transform"", ""rotate(-90)"")
          .text(""Revenue"");
      });
  </script>
</body>
</html>
```",Correct,613,614
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot showing the Units Sold of Clothing. Add animated transitions that connect these points using lines in order.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Scatterplot</title>
  <style>
    /* Add some basic styling */
    body {
      font-family: Arial, sans-serif;
    }
    #chart {
      width: 800px;
      height: 600px;
      border: 1px solid black;
    }
  </style>
</head>
<body>
  <svg id=""chart""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    // Set up the SVG dimensions
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    // Create the SVG
    const svg = d3.select(""#chart"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    // Load the data
    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
      .then(data => {
        // Filter the data for Clothing
        const clothingData = data.filter(d => d[""Product""] === ""Clothing"");

        // Convert the data types
        clothingData.forEach(d => {
          d[""Year""] = +d[""Year""];
          d[""Units Sold""] = +d[""Units Sold""];
        });

        // Create the scales
        const xScale = d3.scaleLinear()
          .domain(d3.extent(clothingData, d => d[""Year""]))
          .range([0, width]);
        const yScale = d3.scaleLinear()
          .domain(d3.extent(clothingData, d => d[""Units Sold""]))
          .range([height, 0]);

        // Create the axes
        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);
        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(xAxis);
        svg.append(""g"")
          .call(yAxis);

        // Create the line
        const line = d3.line()
          .x(d => xScale(d[""Year""]))
          .y(d => yScale(d[""Units Sold""]));

        // Create the scatterplot
        const points = svg.selectAll(""circle"")
          .data(clothingData)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d[""Year""]))
          .attr(""cy"", d => yScale(d[""Units Sold""]))
          .attr(""r"", 5);

        // Animate the line
        const path = svg.append(""path"")
          .datum(clothingData)
          .attr(""fill"", ""none"")
          .attr(""stroke"", ""black"")
          .attr(""stroke-width"", 2)
          .attr(""d"", line);
        const totalLength = path.node().getTotalLength();
        path.attr(""stroke-dasharray"", totalLength + "" "" + totalLength)
          .attr(""stroke-dashoffset"", totalLength)
          .transition()
          .duration(2000)
          .attr(""stroke-dashoffset"", 0);
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,614,615
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Units Sold of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Line Chart</title>
  <style>
    .line {
      fill: none;
      stroke: steelblue;
      stroke-width: 1.5px;
    }

    .line:hover {
      stroke-width: 3px;
    }

    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }

    .axis text {
      font-size: 12px;
    }

    .legend {
      font-size: 12px;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('svg')
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
      .then(data => {
        data.forEach(d => {
          d['Year'] = +d['Year'];
          d['Units Sold'] = +d['Units Sold'];
        });

        const products = [...new Set(data.map(d => d['Product']))];

        const xScale = d3.scaleLinear()
          .domain(d3.extent(data, d => d['Year']))
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Units Sold'])])
          .range([height, 0]);

        const line = d3.line()
          .x(d => xScale(d['Year']))
          .y(d => yScale(d['Units Sold']));

        const lines = svg.selectAll('.line')
          .data(products.map(product => data.filter(d => d['Product'] === product)))
          .enter()
          .append('path')
          .attr('class', 'line')
          .attr('d', d => line(d))
          .attr('stroke', (d, i) => d3.schemeCategory10[i]);

        const xAxis = d3.axisBottom(xScale)
          .ticks(10)
          .tickSize(-height);

        const yAxis = d3.axisLeft(yScale)
          .ticks(10)
          .tickSize(-width);

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(xAxis);

        svg.append('g')
          .call(yAxis);

        const legend = svg.selectAll('.legend')
          .data(products)
          .enter()
          .append('g')
          .attr('class', 'legend')
          .attr('transform', (d, i) => `translate(0, ${i * 20})`);

        legend.append('rect')
          .attr('x', width - 18)
          .attr('y', 0)
          .attr('width', 18)
          .attr('height', 18)
          .attr('fill', (d, i) => d3.schemeCategory10[i]);

        legend.append('text')
          .attr('x', width - 24)
          .attr('y', 9)
          .attr('dy', '.35em')
          .style('text-anchor', 'end')
          .text(d => d);

        lines.on('mouseover', (event, d) => {
          d3.selectAll('.line')
            .transition()
            .duration(100)
            .attr('stroke-width', 1.5)
            .attr('opacity', 0.5);

          d3.select(event.target)
            .transition()
            .duration(100)
            .attr('stroke-width', 3)
            .attr('opacity', 1);
        });

        lines.on('mouseout', () => {
          d3.selectAll('.line')
            .transition()
            .duration(100)
            .attr('stroke-width', 1.5)
            .attr('opacity', 1);
        });
      });
  </script>
</body>
</html>
```",Correct,615,616
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Units Sold for each Product in 2020. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Retail Sales Bar Chart</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .chart {
            margin: 50px auto;
        }
        
        .axis text {
            font-size: 12px;
        }
        
        .axis path,
        .axis line {
            fill: none;
            stroke: #777;
            stroke-width: 1;
        }
    </style>
</head>
<body>
    <svg class=""chart"" width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 50, right: 50, bottom: 100, left: 100 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;
        
        const svg = d3.select('.chart')
            .append('g')
            .attr('transform', `translate(${margin.left}, ${margin.top})`);
        
        d3.csv('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(data => {
                data.forEach(d => {
                    d['Year'] = +d['Year'];
                    d['Units Sold'] = +d['Units Sold'];
                });
                
                const products2020 = data.filter(d => d['Year'] === 2020);
                
                const x = d3.scaleBand()
                    .domain(products2020.map(d => d['Product']))
                    .range([0, width])
                    .padding(0.2);
                
                const y = d3.scaleLinear()
                    .domain([0, d3.max(products2020, d => d['Units Sold'])])
                    .range([height, 0]);
                
                svg.append('g')
                    .attr('transform', `translate(0, ${height})`)
                    .call(d3.axisBottom(x))
                    .selectAll('text')
                    .attr('transform', 'rotate(-45)')
                    .attr('text-anchor', 'end');
                
                svg.append('g')
                    .call(d3.axisLeft(y));
                
                svg.selectAll('bar')
                    .data(products2020)
                    .enter()
                    .append('rect')
                    .attr('x', d => x(d['Product']))
                    .attr('y', d => y(d['Units Sold']))
                    .attr('width', x.bandwidth())
                    .attr('height', d => height - y(d['Units Sold']));
                
                const zoom = d3.zoom()
                    .scaleExtent([1, 10])
                    .extent([[-Infinity, -Infinity], [Infinity, Infinity]])
                    .on('zoom', () => {
                        svg.selectAll('rect')
                            .attr('transform', d3.event.transform);
                        svg.select('.x-axis')
                            .attr('transform', d3.event.transform);
                        svg.select('.y-axis')
                            .attr('transform', d3.event.transform);
                    });
                
                svg.call(zoom);
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,616,617
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Units Sold for each Product in 2020. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Bar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 800px;
      height: 600px;
      border: 1px solid black;
    }
    .bar {
      fill: steelblue;
    }
    .bar:hover {
      fill: brown;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg class=""chart""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;
    const svg = d3.select(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
      data.forEach(d => {
        d.Year = +d.Year;
        d[""Units Sold""] = +d[""Units Sold""];
      });

      const filteredData = data.filter(d => d.Year === 2020);

      const x = d3.scaleBand()
        .domain(filteredData.map(d => d.Product))
        .range([0, width])
        .padding(0.2);

      const y = d3.scaleLinear()
        .domain([0, d3.max(filteredData, d => d[""Units Sold""])])
        .range([height, 0]);

      svg.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(x));

      svg.append(""g"")
        .call(d3.axisLeft(y));

      const bars = svg.selectAll(""rect"")
        .data(filteredData)
        .enter()
        .append(""rect"")
        .attr(""class"", ""bar"")
        .attr(""x"", d => x(d.Product))
        .attr(""y"", d => y(d[""Units Sold""]))
        .attr(""width"", x.bandwidth())
        .attr(""height"", d => height - y(d[""Units Sold""]));

      let drag = d3.drag()
        .on(""start"", dragstarted)
        .on(""drag"", dragged)
        .on(""end"", dragended);

      bars.call(drag);

      function dragstarted(event, d) {
        d3.select(this).raise();
      }

      function dragged(event, d) {
        const newX = x(d.Product) + event.dx;
        d3.select(this)
          .attr(""x"", newX);
      }

      function dragended(event, d) {
        const newIndex = filteredData.findIndex(item => item.Product === d.Product);
        const oldIndex = filteredData.indexOf(d);
        filteredData.splice(oldIndex, 1);
        filteredData.splice(newIndex, 0, d);
        x.domain(filteredData.map(d => d.Product));
        svg.selectAll(""rect"")
          .transition()
          .duration(500)
          .attr(""x"", d => x(d.Product));
        svg.selectAll(""g"")
          .transition()
          .duration(500)
          .call(d3.axisBottom(x));
      }
    });
  </script>
</body>
</html>
```",Execution Error,617,618
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Units Sold for each Product in 2020. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Units Sold.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Retail Sales Bar Chart</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .chart {
            margin: 40px auto;
        }
        .axis text {
            font-size: 12px;
        }
        .axis path,
        .axis line {
            fill: none;
            stroke: #777;
            stroke-width: 1;
        }
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: brown;
        }
        .sort-button {
            position: absolute;
            top: 10px;
            right: 10px;
        }
    </style>
</head>
<body>
    <div class=""chart""></div>
    <button class=""sort-button"">Sort: Descending</button>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 40 };
        const width = 500 - margin.left - margin.right;
        const height = 300 - margin.top - margin.bottom;
        const svg = d3.select("".chart"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);
        const xScale = d3.scaleBand().padding(0.2);
        const yScale = d3.scaleLinear();
        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
            .then(data => {
                data.forEach(d => {
                    d[""Year""] = +d[""Year""];
                    d[""Units Sold""] = +d[""Units Sold""];
                });
                const filteredData = data.filter(d => d[""Year""] === 2020);
                const sortedData = filteredData.sort((a, b) => b[""Units Sold""] - a[""Units Sold""]);
                xScale.domain(sortedData.map(d => d[""Product""]));
                yScale.domain([0, d3.max(sortedData, d => d[""Units Sold""])]);
                svg.append(""g"")
                    .attr(""class"", ""x axis"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(xAxis);
                svg.append(""g"")
                    .attr(""class"", ""y axis"")
                    .call(yAxis);
                svg.selectAll(""bar"")
                    .data(sortedData)
                    .enter()
                    .append(""rect"")
                    .attr(""class"", ""bar"")
                    .attr(""x"", d => xScale(d[""Product""]))
                    .attr(""y"", d => height - yScale(d[""Units Sold""]))
                    .attr(""width"", xScale.bandwidth())
                    .attr(""height"", d => yScale(d[""Units Sold""]));
                d3.select("".sort-button"")
                    .on(""click"", () => {
                        const sortType = d3.select("".sort-button"").text();
                        if (sortType === ""Sort: Descending"") {
                            sortedData.sort((a, b) => a[""Units Sold""] - b[""Units Sold""]);
                            d3.select("".sort-button"").text(""Sort: Ascending"");
                        } else {
                            sortedData.sort((a, b) => b[""Units Sold""] - a[""Units Sold""]);
                            d3.select("".sort-button"").text(""Sort: Descending"");
                        }
                        xScale.domain(sortedData.map(d => d[""Product""]));
                        svg.selectAll(""bar"")
                            .data(sortedData)
                            .transition()
                            .duration(1000)
                            .attr(""x"", d => xScale(d[""Product""]))
                            .attr(""y"", d => height - yScale(d[""Units Sold""]))
                            .attr(""height"", d => yScale(d[""Units Sold""]));
                        svg.select("".x.axis"")
                            .transition()
                            .duration(1000)
                            .call(xAxis);
                    });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,618,619
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Retail Sales Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const unitsSold = [];
                const revenue = [];
                csvData.forEach(row => {
                    const [year, product, units, revenueValue, profit, stores, satisfaction] = row.split(',');
                    unitsSold.push(parseFloat(units));
                    revenue.push(parseFloat(revenueValue));
                });
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Units Sold vs Revenue'
                    },
                    tooltip: {
                        trigger: 'item',
                        formatter: function (params) {
                            return `Units Sold: ${params.data[0]}<br>Revenue: ${params.data[1]}`;
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Units Sold'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Revenue'
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: unitsSold.map((unit, index) => [unit, revenue[index]]),
                            emphasis: {
                                itemStyle: {
                                    shadowBlur: 10,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            }
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,619,620
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Retail Sales Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = csvData.map(row => {
                    const columns = row.split(',');
                    return [parseFloat(columns[2]), parseFloat(columns[3])];
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Units Sold vs Revenue'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Units Sold'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Revenue'
                    },
                    series: [{
                        type: 'scatter',
                        data: chartData,
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        },
                        selectData: true,
                        selectMode: 'multiple',
                        selectItemStyle: {
                            opacity: 0.5
                        },
                        unSelectItemStyle: {
                            opacity: 1
                        }
                    }]
                });

                chart.on('brushSelected', params => {
                    const selectedData = params.selected[0].data;
                    console.log(selectedData);
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,620,621
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Retail Sales Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = csvData.map(row => {
                    const columns = row.split(',');
                    return [parseFloat(columns[2]), parseFloat(columns[3])];
                });
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Units Sold vs Revenue'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'cross'
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Units Sold'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Revenue'
                    },
                    series: [{
                        type: 'scatter',
                        data: chartData
                    }]
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,621,622
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Retail Sales Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const chartData = csvData.map(row => [+row[2], +row[3]]);
                const chartCategories = csvData.map(row => row[1]);

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    tooltip: {
                        trigger: 'item',
                        formatter: params => {
                            const index = params.dataIndex;
                            return `Product: ${chartCategories[index]}<br/>Units Sold: ${params.value[0]}<br/>Revenue: ${params.value[1]}`;
                        }
                    },
                    series: [{
                        type: 'scatter',
                        data: chartData,
                        symbolSize: 10,
                        itemStyle: {
                            opacity: 0.8
                        },
                        emphasis: {
                            itemStyle: {
                                opacity: 1
                            }
                        }
                    }],
                    xAxis: {
                        type: 'value',
                        name: 'Units Sold'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Revenue'
                    }
                });

                chart.on('click', params => {
                    const index = params.dataIndex;
                    const product = chartCategories[index];
                    window.open(`https://www.google.com/search?q=${product}`, '_blank');
                });
            });
    </script>
</body>
</html>
```",Correct,622,623
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot with query widgets showing the Units Sold and Revenue of the given dataset. Add a slider to represent the Year.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Retail Sales Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-gl@2.0.8/dist/echarts-gl.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-stat@1.1.1/dist/ecStat.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/extension/bmap.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-gl@2.0.8/dist/echarts-gl.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-stat@1.1.1/dist/ecStat.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/extension/dataTool.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <div>
        <label for=""year"">Year:</label>
        <input type=""range"" id=""year"" min=""2015"" max=""2019"" value=""2015"">
        <label id=""yearValue"">2015</label>
    </div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = [];
                csvData.forEach(row => {
                    const [Year, Product, UnitsSold, Revenue, Profit, NumberOfStores, CustomerSatisfactionScore] = row.split(',');
                    chartData.push([parseFloat(UnitsSold), parseFloat(Revenue)]);
                });
                const yearData = [...new Set(csvData.map(row => row.split(',')[0]))].sort((a, b) => a - b);
                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    xAxis: {
                        type: 'value'
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        type: 'scatter',
                        data: chartData.filter(([, , year]) => year === '2015')
                    }]
                };
                chart.setOption(option);
                $('#year').on('input', function() {
                    const year = $(this).val();
                    $('#yearValue').text(year);
                    const filteredData = chartData.filter(([ , , yearValue]) => yearValue === year);
                    chart.setOption({
                        series: [{
                            type: 'scatter',
                            data: filteredData
                        }]
                    });
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,623,624
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot showing the Units Sold of Clothing. Add animated transitions that connect these points using lines in order.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Retail Sales Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const clothingData = csvData.filter(row => row.split(',')[1] === 'Clothing');
                const years = clothingData.map(row => parseInt(row.split(',')[0]));
                const unitsSold = clothingData.map(row => parseInt(row.split(',')[2]));

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Units Sold of Clothing'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    xAxis: {
                        type: 'category',
                        data: years
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: unitsSold.map((value, index) => [years[index], value]),
                            symbolSize: 10,
                            label: {
                                show: true,
                                formatter: '{b}: {c}'
                            },
                            encode: {
                                x: 0,
                                y: 1
                            }
                        },
                        {
                            type: 'line',
                            data: unitsSold.map((value, index) => [years[index], value]),
                            symbolSize: 10,
                            label: {
                                show: true,
                                formatter: '{b}: {c}'
                            },
                            encode: {
                                x: 0,
                                y: 1
                            },
                            animationDuration: 2000,
                            animationEasing: 'cubicInOut'
                        }
                    ],
                    animationDuration: 2000,
                    animationEasing: 'cubicInOut'
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,624,625
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Units Sold of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Retail Sales Line Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const years = [...new Set(csvData.map(row => row.split(',')[0]))];
                const products = [...new Set(csvData.map(row => row.split(',')[1]))];
                const seriesData = products.map(product => {
                    const productData = csvData.filter(row => row.split(',')[1] === product);
                    return productData.map(row => parseInt(row.split(',')[2]));
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    tooltip: {
                        trigger: 'axis'
                    },
                    legend: {
                        data: products
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'category',
                        data: years
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: seriesData.map((data, index) => ({
                        name: products[index],
                        type: 'line',
                        data: data,
                        emphasis: {
                            focus: 'series'
                        }
                    }))
                });
            });
    </script>
</body>
</html>
```",Correct,625,626
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Units Sold for each Product in 2020. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Retail Sales</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [year, product, unitsSold] = row.split(',');
                    if (year === '2020') {
                        if (!chartData[product]) {
                            chartData[product] = 0;
                        }
                        chartData[product] += parseInt(unitsSold);
                    }
                });
                const products = Object.keys(chartData);
                const unitsSold = Object.values(chartData);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    xAxis: {
                        type: 'category',
                        data: products
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            data: unitsSold,
                            type: 'bar'
                        }
                    ],
                    dataZoom: [
                        {
                            type: 'inside'
                        },
                        {
                            type: 'slider'
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,626,627
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Units Sold for each Product in 2020. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Units Sold for each Product in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [Year, Product, UnitsSold] = row.split(',');
                    if (Year === '2020') {
                        if (!chartData[Product]) {
                            chartData[Product] = 0;
                        }
                        chartData[Product] += parseInt(UnitsSold);
                    }
                });
                const products = Object.keys(chartData);
                const unitsSold = Object.values(chartData);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'value',
                        position: 'top'
                    },
                    yAxis: {
                        type: 'category',
                        data: products,
                        axisLabel: {
                            interval: 0,
                            rotate: 30
                        }
                    },
                    series: [
                        {
                            name: 'Units Sold',
                            type: 'bar',
                            data: unitsSold
                        }
                    ],
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 100
                        },
                        {
                            start: 0,
                            end: 100
                        }
                    ]
                });
                chart.on('click', params => {
                    const productIndex = products.indexOf(params.name);
                    const unitsSoldValue = unitsSold[productIndex];
                    const newUnitsSold = unitsSold.slice();
                    newUnitsSold.splice(productIndex, 1);
                    newUnitsSold.unshift(unitsSoldValue);
                    const newProducts = products.slice();
                    newProducts.splice(productIndex, 1);
                    newProducts.unshift(params.name);
                    chart.setOption({
                        yAxis: {
                            data: newProducts
                        },
                        series: [
                            {
                                name: 'Units Sold',
                                type: 'bar',
                                data: newUnitsSold
                            }
                        ]
                    });
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,627,628
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Units Sold for each Product in 2020. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Units Sold.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Retail Sales Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <select id=""sort-order"">
        <option value=""desc"">Descending</option>
        <option value=""asc"">Ascending</option>
    </select>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const chartData = [];
                const rows = data.split('\n').slice(1);
                rows.forEach(row => {
                    const columns = row.split(',');
                    if (columns[0] === '2020') {
                        chartData.push({
                            product: columns[1],
                            unitsSold: parseFloat(columns[2])
                        });
                    }
                });
                chartData.sort((a, b) => b.unitsSold - a.unitsSold);
                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    xAxis: {
                        type: 'category',
                        data: chartData.map(item => item.product)
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            data: chartData.map(item => item.unitsSold),
                            type: 'bar',
                            animationDuration: 2000,
                            animationEasing: 'cubicInOut'
                        }
                    ]
                };
                chart.setOption(option);
                document.getElementById('sort-order').addEventListener('change', () => {
                    const sortOrder = document.getElementById('sort-order').value;
                    chartData.sort((a, b) => sortOrder === 'desc' ? b.unitsSold - a.unitsSold : a.unitsSold - b.unitsSold);
                    chart.setOption({
                        xAxis: {
                            data: chartData.map(item => item.product)
                        },
                        series: [
                            {
                                data: chartData.map(item => item.unitsSold)
                            }
                        ]
                    });
                });
            });
    </script>
</body>
</html>
```",Correct,628,629
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Retail Sales Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to make the chart more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    // Define the Vega-Lite specification
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Units Sold"", ""type"": ""quantitative""},
          {""field"": ""Revenue"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""axis"": {
          ""labelFontSize"": 14,
          ""titleFontSize"": 16
        },
        ""legend"": {
          ""labelFontSize"": 14,
          ""titleFontSize"": 16
        }
      }
    };

    // Embed the Vega-Lite chart in the #vis div
    vegaEmbed(""#vis"", spec, { actions: false });
  </script>
</body>
</html>
```",Unexpected Execution Result,629,630
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Units Sold vs Revenue Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to our embed */
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Year"", ""type"": ""nominal""},
          {""field"": ""Product"", ""type"": ""nominal""},
          {""field"": ""Units Sold"", ""type"": ""quantitative""},
          {""field"": ""Revenue"", ""type"": ""quantitative""},
          {""field"": ""Profit"", ""type"": ""quantitative""},
          {""field"": ""Number of Stores"", ""type"": ""quantitative""},
          {""field"": ""Customer Satisfaction Score"", ""type"": ""quantitative""}
        ]
      },
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x"", ""y""]}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,630,631
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Scatterplot of Units Sold vs Revenue</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""}
      },
      ""config"": {
        ""view"": {""continuousWidth"": 400, ""continuousHeight"": 300},
        ""scale"": {""zoom"": ""wheel""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Execution Result,631,632
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Units Sold vs Revenue Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to our embed */
    #vis {
      width: 800px;
      height: 600px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Year"", ""type"": ""nominal""},
          {""field"": ""Product"", ""type"": ""nominal""},
          {""field"": ""Units Sold"", ""type"": ""quantitative""},
          {""field"": ""Revenue"", ""type"": ""quantitative""},
          {""field"": ""Profit"", ""type"": ""quantitative""},
          {""field"": ""Number of Stores"", ""type"": ""quantitative""},
          {""field"": ""Customer Satisfaction Score"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""view"": {""width"": 800, ""height"": 600},
        ""mark"": {""tooltip"": {""content"": ""encoding""}}
      }
    };

    vegaEmbed(""#vis"", spec, { ""actions"": false })
      .then(result => result.view.addEventListener('click', (event, item) => {
        if (item && item.datum) {
          const product = item.datum.Product;
          const year = item.datum.Year;
          const url = `https://www.google.com/search?q=${product}+${year}`;
          window.open(url, '_blank');
        }
      }));
  </script>
</body>
</html>
```",Correct,632,633
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot with query widgets showing the Units Sold and Revenue of the given dataset. Add a slider to represent the Year.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Retail Sales Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to our embed */
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Product"", ""type"": ""nominal""},
        ""tooltip"": [
          {""field"": ""Year"", ""type"": ""temporal""},
          {""field"": ""Units Sold"", ""type"": ""quantitative""},
          {""field"": ""Revenue"", ""type"": ""quantitative""},
          {""field"": ""Product"", ""type"": ""nominal""}
        ]
      },
      ""params"": [
        {
          ""name"": ""year"",
          ""value"": 2010,
          ""bind"": {""input"": ""range"", ""min"": 2010, ""max"": 2014, ""step"": 1}
        }
      ],
      ""transform"": [
        {""filter"": ""datum.Year == year""}
      ]
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Execution Result,633,634
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot showing the Units Sold of Clothing. Add animated transitions that connect these points using lines in order.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Retail Sales Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Product === 'Clothing'""},
        {""sort"": [""Year""]}
      ],
      ""mark"": {
        ""type"": ""line"",
        ""point"": true,
        ""tooltip"": true
      },
      ""encoding"": {
        ""x"": {""field"": ""Year"", ""type"": ""temporal""},
        ""y"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Year"", ""type"": ""nominal""}
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""labelFontSize"": 14, ""titleFontSize"": 14},
        ""legend"": {""labelFontSize"": 14, ""titleFontSize"": 14}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,634,635
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Units Sold of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Multi-Series Line Chart with Interactive Line Highlight</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to make the chart more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": {
        ""type"": ""line"",
        ""tooltip"": true
      },
      ""encoding"": {
        ""x"": {""field"": ""Year"", ""type"": ""temporal""},
        ""y"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Product"", ""type"": ""nominal""},
        ""detail"": {""field"": ""Product"", ""type"": ""nominal""}
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""range"": {""category"": {""scheme"": ""category20""}}
      },
      ""selection"": {
        ""highlight"": {""type"": ""single"", ""on"": ""mouseover"", ""fields"": [""Product""], ""nearest"": true}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Execution Result,635,636
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Units Sold for each Product in 2020. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Units Sold for each Product in 2020</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2020""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Product"", ""type"": ""nominal"", ""axis"": {""title"": ""Product""}},
        ""y"": {""field"": ""Units Sold"", ""type"": ""quantitative"", ""axis"": {""title"": ""Units Sold""}},
        ""tooltip"": [
          {""field"": ""Product"", ""type"": ""nominal""},
          {""field"": ""Units Sold"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""view"": {""continuousWidth"": 400, ""continuousHeight"": 300},
        ""axis"": {""labelFontSize"": 16, ""titleFontSize"": 16},
        ""legend"": {""labelFontSize"": 16, ""titleFontSize"": 16}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Execution Result,636,637
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Units Sold for each Product in 2020. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Units Sold by Product in 2020</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2020""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Product"", ""type"": ""nominal"", ""sort"": ""-y""},
        ""y"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Product"", ""type"": ""nominal""},
          {""field"": ""Units Sold"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""domainWidth"": 1}
      },
      ""selection"": {
        ""sort"": {""type"": ""single"", ""fields"": [""Units Sold""], ""init"": {""Product"": ""Product""}, ""bind"": ""scales""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Execution Result,637,638
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Units Sold for each Product in 2020. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Units Sold.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Units Sold by Product in 2020</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to our embed */
    #vis {
      width: 800px;
      height: 600px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2020""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Product"", ""type"": ""nominal"", ""sort"": {""field"": ""Units Sold"", ""order"": ""descending""}},
        ""y"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Product"", ""type"": ""nominal""},
          {""field"": ""Units Sold"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""view"": {""step"": 100},
        ""animation"": {""duration"": 500}
      }
    };

    const opts = {
      ""actions"": false
    };

    vegaEmbed(""#vis"", spec, opts).then(function(result) {
      // Access the Vega view instance (view) and its container (element)
      const view = result.view;
      const element = result.element;

      // Create a dropdown menu to change the sorting order
      const dropdown = document.createElement(""select"");
      dropdown.innerHTML = `
        <option value=""descending"">Descending</option>
        <option value=""ascending"">Ascending</option>
      `;
      element.appendChild(dropdown);

      // Update the sorting order based on the dropdown selection
      dropdown.addEventListener(""change"", function() {
        const sortOrder = dropdown.value;
        view.signal(""sort"", sortOrder).run();
      });

      // Update the Vega-Lite spec to include the signal for sorting
      spec.encoding.x.sort.signal = ""sort"";
    });
  </script>
</body>
</html>
```",Unexpected Initial Result,638,639
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: inline-block;
      vertical-align: top;
    }
    .scatterplot {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
    .barchart {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart scatterplot"" id=""scatterplot""></div>
  <div class=""chart barchart"" id=""barchart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svgScatterplot = d3.select(""#scatterplot"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const svgBarchart = d3.select(""#barchart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
      data.forEach(d => {
        d[""Units Sold""] = +d[""Units Sold""];
        d.Revenue = +d.Revenue;
        d.Profit = +d.Profit;
      });

      const xScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Units Sold""])])
        .range([0, width]);

      const yScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.Revenue)])
        .range([height, 0]);

      svgScatterplot.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScaleScatterplot(d[""Units Sold""]))
        .attr(""cy"", d => yScaleScatterplot(d.Revenue))
        .attr(""r"", 5);

      svgScatterplot.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleScatterplot));

      svgScatterplot.append(""g"")
        .call(d3.axisLeft(yScaleScatterplot));

      const xScaleBarchart = d3.scaleBand()
        .domain(data.map(d => d.Product))
        .range([0, width])
        .padding(0.2);

      const yScaleBarchart = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.Profit)])
        .range([height, 0]);

      svgBarchart.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", d => xScaleBarchart(d.Product))
        .attr(""y"", d => yScaleBarchart(d.Profit))
        .attr(""width"", xScaleBarchart.bandwidth())
        .attr(""height"", d => height - yScaleBarchart(d.Profit));

      svgBarchart.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleBarchart));

      svgBarchart.append(""g"")
        .call(d3.axisLeft(yScaleBarchart));
    });
  </script>
</body>
</html>
```",Correct,639,640
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: inline-block;
      vertical-align: top;
    }
    .scatterplot {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
    .barchart {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
    .brush rect {
      fill: steelblue;
      fill-opacity: .3;
    }
    .brush .extent {
      fill-opacity: .3;
      stroke: #fff;
      shape-rendering: crispEdges;
    }
  </style>
</head>
<body>
  <div class=""chart scatterplot"" id=""scatterplot""></div>
  <div class=""chart barchart"" id=""barchart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svgScatterplot = d3.select(""#scatterplot"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const svgBarchart = d3.select(""#barchart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
      data.forEach(d => {
        d[""Units Sold""] = +d[""Units Sold""];
        d[""Revenue""] = +d[""Revenue""];
        d[""Profit""] = +d[""Profit""];
        d[""Number of Stores""] = +d[""Number of Stores""];
        d[""Customer Satisfaction Score""] = +d[""Customer Satisfaction Score""];
      });

      const xScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Units Sold""])])
        .range([0, width]);

      const yScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Revenue""])])
        .range([height, 0]);

      const xScaleBarchart = d3.scaleBand()
        .domain(data.map(d => d[""Product""]))
        .range([0, width])
        .padding(0.2);

      const yScaleBarchart = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Profit""])])
        .range([height, 0]);

      svgScatterplot.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScaleScatterplot(d[""Units Sold""]))
        .attr(""cy"", d => yScaleScatterplot(d[""Revenue""]))
        .attr(""r"", 5)
        .attr(""fill"", ""steelblue"");

      svgBarchart.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", d => xScaleBarchart(d[""Product""]))
        .attr(""y"", d => yScaleBarchart(d[""Profit""]))
        .attr(""width"", xScaleBarchart.bandwidth())
        .attr(""height"", d => height - yScaleBarchart(d[""Profit""]))
        .attr(""fill"", ""steelblue"");

      const brush = d3.brush()
        .extent([[0, 0], [width, height]])
        .on(""brush"", brushed);

      svgScatterplot.call(brush);

      function brushed(event) {
        const selection = event.selection;
        if (selection) {
          const minX = xScaleScatterplot.invert(selection[0][0]);
          const maxX = xScaleScatterplot.invert(selection[1][0]);
          const minY = yScaleScatterplot.invert(selection[1][1]);
          const maxY = yScaleScatterplot.invert(selection[0][1]);

          svgBarchart.selectAll(""rect"")
            .attr(""fill"", d => {
              if (d[""Units Sold""] >= minX && d[""Units Sold""] <= maxX && d[""Revenue""] >= minY && d[""Revenue""] <= maxY) {
                return ""red"";
              } else {
                return ""steelblue"";
              }
            });
        } else {
          svgBarchart.selectAll(""rect"")
            .attr(""fill"", ""steelblue"");
        }
      }
    });
  </script>
</body>
</html>
```",Unexpected Execution Result,640,641
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Sold , while the pie chart represents the distribution of Revenue.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: block;
    }
  </style>
</head>
<body>
  <div id=""line-chart""></div>
  <div id=""pie-chart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 300 - margin.top - margin.bottom;

    const lineChart = d3.select(""#line-chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const pieChart = d3.select(""#pie-chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
      data.forEach(d => {
        d[""Year""] = +d[""Year""];
        d[""Units Sold""] = +d[""Units Sold""];
        d[""Revenue""] = +d[""Revenue""];
      });

      const lineXScale = d3.scaleLinear()
        .domain(d3.extent(data, d => d[""Year""]))
        .range([0, width]);

      const lineYScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Units Sold""])])
        .range([height, 0]);

      lineChart.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(lineXScale));

      lineChart.append(""g"")
        .call(d3.axisLeft(lineYScale));

      lineChart.append(""path"")
        .datum(data)
        .attr(""fill"", ""none"")
        .attr(""stroke"", ""steelblue"")
        .attr(""stroke-width"", 1.5)
        .attr(""d"", d3.line()
          .x(d => lineXScale(d[""Year""]))
          .y(d => lineYScale(d[""Units Sold""])));

      const pieData = d3.rollup(data, v => d3.sum(v, d => d[""Revenue""]), d => d[""Product""]);

      const pieScale = d3.scaleOrdinal()
        .domain(pieData.keys())
        .range(d3.schemeCategory10);

      const pieArc = d3.arc()
        .outerRadius(height / 2)
        .innerRadius(0);

      pieChart.selectAll(""slice"")
        .data(pieData)
        .enter()
        .append(""path"")
        .attr(""d"", pieArc)
        .attr(""fill"", d => pieScale(d[0]))
        .attr(""transform"", `translate(${width / 2}, ${height / 2})`);
    });
  </script>
</body>
</html>
```",Initialization Error,641,642
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Sold , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: block;
    }
    .line-chart {
      width: 800px;
      height: 400px;
      margin: 20px auto;
    }
    .pie-chart {
      width: 800px;
      height: 400px;
      margin: 20px auto;
    }
  </style>
</head>
<body>
  <div class=""chart line-chart""></div>
  <div class=""chart pie-chart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const lineChart = d3.select('.line-chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    const pieChart = d3.select('.pie-chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left + width / 2}, ${margin.top + height / 2})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
      .then(data => {
        data.forEach(d => {
          d['Year'] = +d['Year'];
          d['Units Sold'] = +d['Units Sold'];
          d['Revenue'] = +d['Revenue'];
        });

        const xScale = d3.scaleLinear()
          .domain(d3.extent(data, d => d['Year']))
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Units Sold'])])
          .range([height, 0]);

        const line = d3.line()
          .x(d => xScale(d['Year']))
          .y(d => yScale(d['Units Sold']));

        lineChart.append('path')
          .datum(data)
          .attr('fill', 'none')
          .attr('stroke', 'steelblue')
          .attr('stroke-width', 1.5)
          .attr('d', line);

        lineChart.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        lineChart.append('g')
          .call(d3.axisLeft(yScale));

        const brush = d3.brushX()
          .extent([[0, 0], [width, height]])
          .on('brush', brushed);

        lineChart.append('g')
          .attr('class', 'brush')
          .call(brush);

        function brushed({ selection }) {
          if (selection) {
            const [x0, x1] = selection;
            const filteredData = data.filter(d => xScale(d['Year']) >= x0 && xScale(d['Year']) <= x1);
            updatePieChart(filteredData);
          } else {
            updatePieChart(data);
          }
        }

        function updatePieChart(data) {
          const pie = d3.pie()
            .value(d => d['Revenue']);

          const arc = d3.arc()
            .outerRadius(width / 2 - 20)
            .innerRadius(0);

          pieChart.selectAll('path')
            .remove();

          pieChart.selectAll('path')
            .data(pie(data))
            .enter()
            .append('path')
            .attr('fill', (d, i) => d3.schemeCategory10[i])
            .attr('d', arc);
        }

        updatePieChart(data);
      });
  </script>
</body>
</html>
```",Correct,642,643
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Units Sold, Revenue, Profit, and Customer Satisfaction. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Scatterplot Matrix</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
    .brush .extent {
      fill-opacity: .3;
      stroke: #fff;
      shape-rendering: crispEdges;
    }
  </style>
</head>
<body>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 100, right: 100, bottom: 100, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 800 - margin.top - margin.bottom;
    const size = Math.min(width, height) / 3;

    const svg = d3.select(""body"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Units Sold""] = +d[""Units Sold""];
          d.Revenue = +d.Revenue;
          d.Profit = +d.Profit;
          d[""Customer Satisfaction Score""] = +d[""Customer Satisfaction Score""];
        });

        const dimensions = [""Units Sold"", ""Revenue"", ""Profit"", ""Customer Satisfaction Score""];
        const x = {};
        const y = {};
        const scales = {};

        dimensions.forEach(d => {
          x[d] = d3.scaleLinear()
            .domain(d3.extent(data, p => p[d]))
            .range([0, size]);
          y[d] = d3.scaleLinear()
            .domain(d3.extent(data, p => p[d]))
            .range([size, 0]);
          scales[d] = [x[d], y[d]];
        });

        const brush = d3.brush()
          .extent([[0, 0], [size, size]])
          .on(""brush"", brushed)
          .on(""end"", brushended);

        const cells = svg.selectAll("".cell"")
          .data(cross(dimensions, dimensions))
          .enter()
          .append(""g"")
          .attr(""class"", ""cell"")
          .attr(""transform"", d => `translate(${d.i * size}, ${d.j * size})`);

        cells.append(""rect"")
          .attr(""class"", ""frame"")
          .attr(""x"", 0)
          .attr(""y"", 0)
          .attr(""width"", size)
          .attr(""height"", size);

        cells.append(""g"")
          .attr(""class"", ""x axis"")
          .attr(""transform"", d => `translate(0, ${size})`)
          .call(d3.axisBottom(x[d.dimensions[0]]));

        cells.append(""g"")
          .attr(""class"", ""y axis"")
          .call(d3.axisLeft(y[d.dimensions[1]]));

        cells.append(""g"")
          .attr(""class"", ""brush"")
          .call(brush);

        cells.append(""g"")
          .attr(""class"", ""points"")
          .selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => x[d.dimensions[0]](d[d.dimensions[0]]))
          .attr(""cy"", d => y[d.dimensions[1]](d[d.dimensions[1]]))
          .attr(""r"", 3);

        function brushed() {
          const selection = d3.event.selection;
          cells.selectAll("".points"")
            .selectAll(""circle"")
            .classed(""selected"", d => {
              const x = d3.select(this.parentNode.parentNode).datum().dimensions[0];
              const y = d3.select(this.parentNode.parentNode).datum().dimensions[1];
              return selection && selection[0][0] <= x[d] && x[d] <= selection[1][0] && selection[0][1] <= y[d] && y[d] <= selection[1][1];
            });
        }

        function brushended() {
          if (!d3.event.selection) {
            cells.selectAll("".points"")
              .selectAll(""circle"")
              .classed(""selected"", false);
          }
        }

        function cross(a, b) {
          const c = [];
          for (let i = 0; i < a.length; i++) {
            for (let j = 0; j < b.length; j++) {
              c.push({ i, j, dimensions: [a[i], b[j]] });
            }
          }
          return c;
        }
      });
  </script>
</body>
</html>
```",Initialization Error,643,644
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a brushable Scatterplot that visualizes the relationship between Units Sold and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .brush {
      fill: #ccc;
    }
    .brush .extent {
      fill-opacity: .3;
      stroke: #fff;
      shape-rendering: crispEdges;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <table id=""selected-data""></table>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 200, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Units Sold""] = +d[""Units Sold""];
          d.Revenue = +d.Revenue;
        });

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Units Sold""])])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Revenue)])
          .range([height, 0]);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        const brush = d3.brush()
          .extent([[0, 0], [width, height]])
          .on(""brush"", brushed);

        svg.append(""g"")
          .attr(""class"", ""brush"")
          .call(brush);

        svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d[""Units Sold""]))
          .attr(""cy"", d => yScale(d.Revenue))
          .attr(""r"", 3);

        function brushed({ selection }) {
          const selectedData = data.filter(d => {
            const x = xScale(d[""Units Sold""]);
            const y = yScale(d.Revenue);
            return x >= selection[0][0] && x <= selection[1][0] && y <= selection[0][1] && y >= selection[1][1];
          }).slice(0, 20);

          d3.select(""#selected-data"")
            .selectAll(""tr"")
            .remove();

          d3.select(""#selected-data"")
            .selectAll(""tr"")
            .data(selectedData)
            .enter()
            .append(""tr"")
            .selectAll(""td"")
            .data(d => Object.values(d))
            .enter()
            .append(""td"")
            .text(d => d);
        }
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,644,645
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a horizontal Bar Chart that shows Product and Units Sold, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      position: relative;
      display: inline-block;
    }
    .minimap {
      position: absolute;
      top: 0;
      right: 0;
      width: 100px;
      height: 300px;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 120, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 300 - margin.top - margin.bottom;
    const minimapWidth = 100;
    const minimapHeight = height;

    const svg = d3.select("".chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right + minimapWidth)
      .attr(""height"", height + margin.top + margin.bottom);

    const g = svg.append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const minimapG = svg.append(""g"")
      .attr(""transform"", `translate(${width + margin.right}, ${margin.top})`)
      .attr(""class"", ""minimap"");

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Units Sold""] = +d[""Units Sold""];
        });

        const products = [...new Set(data.map(d => d.Product))];

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Units Sold""])])
          .range([0, width]);

        const yScale = d3.scaleBand()
          .domain(products)
          .range([0, height])
          .padding(0.2);

        const bars = g.selectAll(""rect"")
          .data(data)
          .enter()
          .append(""rect"")
          .attr(""x"", 0)
          .attr(""y"", d => yScale(d.Product))
          .attr(""width"", d => xScale(d[""Units Sold""]))
          .attr(""height"", yScale.bandwidth());

        const minimapBars = minimapG.selectAll(""rect"")
          .data(data)
          .enter()
          .append(""rect"")
          .attr(""x"", 0)
          .attr(""y"", d => yScale(d.Product))
          .attr(""width"", d => xScale(d[""Units Sold""]) / 8)
          .attr(""height"", yScale.bandwidth());

        const xAxis = d3.axisBottom(xScale)
          .ticks(5)
          .tickSize(-height);

        g.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(xAxis);

        const yAxis = d3.axisLeft(yScale)
          .tickSize(-width);

        g.append(""g"")
          .call(yAxis);
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,645,646
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Retail Sales Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px; display: flex; justify-content: space-between;"">
        <div id=""scatterplot"" style=""width: 50%; height: 600px;""></div>
        <div id=""barchart"" style=""width: 50%; height: 600px;""></div>
    </div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const scatterplotData = csvData.map(row => [+row[2], +row[4]]);
                const barchartData = csvData.reduce((acc, row) => {
                    if (!acc[row[1]]) {
                        acc[row[1]] = 0;
                    }
                    acc[row[1]] += +row[2];
                    return acc;
                }, {});

                const scatterplotChart = echarts.init(document.getElementById('scatterplot'));
                scatterplotChart.setOption({
                    title: {
                        text: 'Units Sold vs Profit'
                    },
                    xAxis: {
                        type: 'value'
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        type: 'scatter',
                        data: scatterplotData
                    }]
                });

                const barchartChart = echarts.init(document.getElementById('barchart'));
                barchartChart.setOption({
                    title: {
                        text: 'Units Sold by Product'
                    },
                    xAxis: {
                        type: 'category',
                        data: Object.keys(barchartData)
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        type: 'bar',
                        data: Object.values(barchartData)
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,646,647
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Retail Sales Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <style>
        #chart {
            display: flex;
            width: 100%;
            height: 600px;
        }
        #scatterplot {
            width: 50%;
            height: 100%;
        }
        #barchart {
            width: 50%;
            height: 100%;
        }
    </style>
</head>
<body>
    <div id=""chart"">
        <div id=""scatterplot""></div>
        <div id=""barchart""></div>
    </div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const years = [...new Set(csvData.map(row => row[0]))];
                const products = [...new Set(csvData.map(row => row[1]))];
                const scatterplotData = csvData.map(row => [+row[2], +row[3]]);
                const barchartData = csvData.map(row => +row[3]);

                const scatterplotChart = echarts.init(document.getElementById('scatterplot'));
                const barchartChart = echarts.init(document.getElementById('barchart'));

                const option = {
                    scatterplot: {
                        title: {
                            text: 'Scatterplot of Units Sold vs Revenue'
                        },
                        xAxis: {
                            type: 'value',
                            name: 'Units Sold'
                        },
                        yAxis: {
                            type: 'value',
                            name: 'Revenue'
                        },
                        series: [{
                            type: 'scatter',
                            data: scatterplotData,
                            emphasis: {
                                itemStyle: {
                                    shadowBlur: 10,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            }
                        }]
                    },
                    barchart: {
                        title: {
                            text: 'Bar Chart of Revenue'
                        },
                        xAxis: {
                            type: 'category',
                            data: products
                        },
                        yAxis: {
                            type: 'value',
                            name: 'Revenue'
                        },
                        series: [{
                            type: 'bar',
                            data: barchartData
                        }]
                    }
                };

                scatterplotChart.setOption(option.scatterplot);
                barchartChart.setOption(option.barchart);

                scatterplotChart.on('brushSelected', params => {
                    const selectedData = params.selectedData[0].data;
                    const startIndex = scatterplotData.findIndex(data => data[0] === selectedData[0] && data[1] === selectedData[1]);
                    const endIndex = scatterplotData.findIndex(data => data[0] === selectedData[selectedData.length - 1][0] && data[1] === selectedData[selectedData.length - 1][1]);
                    const selectedIndices = Array.from({ length: endIndex - startIndex + 1 }, (_, i) => startIndex + i);
                    barchartChart.dispatchAction({
                        type: 'highlight',
                        seriesIndex: 0,
                        dataIndex: selectedIndices
                    });
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,647,648
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Sold , while the pie chart represents the distribution of Revenue.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Retail Sales Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const years = [];
                const unitsSold = [];
                const revenue = {};
                csvData.forEach(row => {
                    const columns = row.split(',');
                    years.push(columns[0]);
                    unitsSold.push(parseFloat(columns[2]));
                    if (!revenue[columns[1]]) {
                        revenue[columns[1]] = 0;
                    }
                    revenue[columns[1]] += parseFloat(columns[3]);
                });
                const revenueData = Object.keys(revenue).map(key => ({ name: key, value: revenue[key] }));

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    grid: {
                        top: '10%',
                        bottom: '50%'
                    },
                    xAxis: {
                        type: 'category',
                        data: years
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            type: 'line',
                            data: unitsSold
                        }
                    ],
                    tooltip: {
                        trigger: 'axis'
                    }
                });

                const pieChart = echarts.init(document.getElementById('chart'));
                pieChart.setOption({
                    grid: {
                        top: '60%',
                        bottom: '10%'
                    },
                    series: [
                        {
                            type: 'pie',
                            data: revenueData,
                            radius: '50%'
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,648,649
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Sold , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Retail Sales Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const years = csvData.map(row => row[0]);
                const unitsSold = csvData.map(row => parseFloat(row[2]));
                const revenue = csvData.map(row => parseFloat(row[3]));
                const products = [...new Set(csvData.map(row => row[1]))];

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    grid: [
                        { top: '10%', left: '10%', width: '80%', height: '40%' },
                        { top: '60%', left: '10%', width: '80%', height: '30%' }
                    ],
                    dataZoom: [
                        {
                            type: 'inside',
                            xAxisIndex: [0],
                            start: 0,
                            end: 100
                        }
                    ],
                    xAxis: [
                        {
                            type: 'category',
                            data: years,
                            gridIndex: 0
                        },
                        {
                            type: 'category',
                            data: products,
                            gridIndex: 1
                        }
                    ],
                    yAxis: [
                        {
                            type: 'value',
                            gridIndex: 0
                        },
                        {
                            type: 'value',
                            gridIndex: 1
                        }
                    ],
                    series: [
                        {
                            name: 'Units Sold',
                            type: 'line',
                            xAxisIndex: 0,
                            yAxisIndex: 0,
                            data: unitsSold,
                            brush: {
                                type: 'lineX'
                            }
                        },
                        {
                            name: 'Revenue',
                            type: 'pie',
                            xAxisIndex: 1,
                            yAxisIndex: 1,
                            data: products.map(product => ({
                                name: product,
                                value: csvData.filter(row => row[1] === product).reduce((sum, row) => sum + parseFloat(row[3]), 0)
                            })),
                            encode: {
                                itemName: 'name',
                                value: 'value'
                            }
                        }
                    ]
                };

                chart.setOption(option);

                chart.on('brushSelected', params => {
                    const selectedData = params.batch[0].areas[0].dataIndex;
                    const startIndex = selectedData.start;
                    const endIndex = selectedData.end;
                    const selectedYears = years.slice(startIndex, endIndex + 1);
                    const selectedRevenue = csvData.filter((row, index) => selectedYears.includes(row[0])).reduce((sum, row) => sum + parseFloat(row[3]), 0);
                    const selectedProducts = [...new Set(csvData.filter((row, index) => selectedYears.includes(row[0])).map(row => row[1]))];

                    const pieSeries = option.series[1];
                    pieSeries.data = selectedProducts.map(product => ({
                        name: product,
                        value: csvData.filter(row => row[1] === product && selectedYears.includes(row[0])).reduce((sum, row) => sum + parseFloat(row[3]), 0)
                    }));
                    pieSeries.encode = {
                        itemName: 'name',
                        value: 'value'
                    };

                    chart.setOption(option);
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,649,650
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Units Sold, Revenue, Profit, and Customer Satisfaction. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Retail Sales Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/d3@7.4.4/dist/d3.min.js""></script>
    <style>
        #chart {
            width: 800px;
            height: 600px;
            margin: 0 auto;
        }
    </style>
</head>
<body>
    <div id=""chart""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = d3.csvParse(data);
                const dimensions = ['Units Sold', 'Revenue', 'Profit', 'Customer Satisfaction Score'];
                const series = [];
                dimensions.forEach((dimension, index) => {
                    series.push({
                        type: 'scatter',
                        name: dimension,
                        data: csvData.map(row => [+row['Units Sold'], +row['Revenue'], +row['Profit'], +row['Customer Satisfaction Score']][index]),
                        dimensions: dimensions,
                        encode: {
                            x: dimensions[index],
                            y: dimensions[(index + 1) % dimensions.length],
                            tooltip: dimensions
                        }
                    });
                });
                const option = {
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'cross'
                        }
                    },
                    brush: {
                        toolbox: ['rect', 'polygon', 'lineX', 'lineY', 'keep', 'clear'],
                        xAxisIndex: 'all',
                        yAxisIndex: 'all',
                        brushLink: 'all',
                        outOfBrush: {
                            colorAlpha: 0.1
                        }
                    },
                    xAxis: dimensions.map((dimension, index) => ({
                        type: 'value',
                        name: dimension,
                        nameLocation: 'middle',
                        nameGap: 30,
                        nameRotate: 90,
                        axisLine: {
                            onZero: true
                        },
                        splitLine: {
                            show: false
                        },
                        axisTick: {
                            alignWithLabel: true
                        },
                        axisPointer: {
                            show: true
                        }
                    })),
                    yAxis: dimensions.map((dimension, index) => ({
                        type: 'value',
                        name: dimension,
                        nameLocation: 'middle',
                        nameGap: 30,
                        axisLine: {
                            onZero: true
                        },
                        splitLine: {
                            show: false
                        },
                        axisTick: {
                            alignWithLabel: true
                        },
                        axisPointer: {
                            show: true
                        }
                    })),
                    series: series
                };
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,650,651
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a brushable Scatterplot that visualizes the relationship between Units Sold and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Retail Sales Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
    <style>
        #chart {
            width: 800px;
            height: 600px;
            border: 1px solid #ccc;
            margin: 20px auto;
        }
        #table {
            width: 300px;
            height: 600px;
            border: 1px solid #ccc;
            margin: 20px auto;
            float: right;
        }
    </style>
</head>
<body>
    <div id=""chart""></div>
    <div id=""table""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = csvData.map(row => {
                    const columns = row.split(',');
                    return [parseFloat(columns[2]), parseFloat(columns[3])];
                });
                const option = {
                    xAxis: {},
                    yAxis: {},
                    series: [{
                        symbolSize: 10,
                        data: chartData,
                        type: 'scatter',
                        brush: {
                            throttleType: 'debounce',
                            throttleDelay: 300,
                            brushStyle: {
                                borderWidth: 2,
                                color: 'rgba(120,140,180,0.6)',
                                borderColor: 'rgba(120,140,180,0.8)',
                            },
                            brushMode: 'single',
                            transformable: false,
                            brushSelect: false,
                        },
                    }],
                };
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption(option);
                chart.on('brushSelected', params => {
                    const selectedData = params.batch[0].areas[0].data;
                    const tableHtml = '<table border=""1""><tr><th>Units Sold</th><th>Revenue</th></tr>';
                    selectedData.slice(0, 20).forEach(data => {
                        const row = csvData.find(row => {
                            const columns = row.split(',');
                            return parseFloat(columns[2]) === data[0] && parseFloat(columns[3]) === data[1];
                        });
                        const columns = row.split(',');
                        tableHtml += `<tr><td>${columns[2]}</td><td>${columns[3]}</td></tr>`;
                    });
                    tableHtml += '</table>';
                    document.getElementById('table').innerHTML = tableHtml;
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,651,652
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a horizontal Bar Chart that shows Product and Units Sold, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Retail Sales Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = csvData.map(row => {
                    const columns = row.split(',');
                    return [columns[1], parseInt(columns[2])];
                });

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '20%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'value',
                        position: 'top'
                    },
                    yAxis: {
                        type: 'category',
                        data: chartData.map(item => item[0]),
                        axisLabel: {
                            interval: 0,
                            rotate: 30
                        }
                    },
                    series: [
                        {
                            name: 'Units Sold',
                            type: 'bar',
                            data: chartData.map(item => item[1])
                        }
                    ],
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 10
                        },
                        {
                            show: true,
                            type: 'slider',
                            start: 0,
                            end: 10,
                            right: 0,
                            bottom: 0,
                            width: 100
                        }
                    ]
                };
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,652,653
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Retail Sales Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: row;
    }
  </style>
</head>
<body>
  <div id=""vis"">
    <div id=""scatterplot""></div>
    <div id=""barchart""></div>
  </div>

  <script>
    const scatterplotSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Product"", ""type"": ""nominal""}
      }
    };

    const barchartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"" },
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Product"", ""type"": ""nominal"", ""sort"": ""-y""},
        ""y"": {""field"": ""Profit"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Product"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#scatterplot"", scatterplotSpec);
    vegaEmbed(""#barchart"", barchartSpec);
  </script>
</body>
</html>
```",Correct,653,654
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Retail Sales Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: row;
    }
    #scatterplot {
      width: 50%;
    }
    #barchart {
      width: 50%;
    }
  </style>
</head>
<body>
  <div id=""vis"">
    <div id=""scatterplot""></div>
    <div id=""barchart""></div>
  </div>

  <script>
    const scatterplotSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Product"", ""type"": ""nominal""}
      },
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x"", ""y""]}
      }
    };

    const barchartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"" },
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Product"", ""type"": ""nominal""},
        ""y"": {""field"": ""Profit"", ""type"": ""quantitative""},
        ""color"": {""condition"": {""test"": ""datum.brush"", ""value"": ""steelblue""}, ""value"": ""grey""}
      }
    };

    vegaEmbed(""#scatterplot"", scatterplotSpec);
    vegaEmbed(""#barchart"", barchartSpec);
  </script>
</body>
</html>
```",Unexpected Execution Result,654,655
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Sold , while the pie chart represents the distribution of Revenue.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Retail Sales Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const lineChartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"" },
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {""field"": ""Year"", ""type"": ""temporal""},
        ""y"": {""field"": ""Units Sold"", ""type"": ""quantitative""}
      }
    };

    const pieChartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"" },
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Revenue"", ""type"": ""quantitative"", ""stack"": true},
        ""color"": {""field"": ""Product"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", lineChartSpec, { mode: ""vega-lite"" });
    vegaEmbed(""#vis"", pieChartSpec, { mode: ""vega-lite"" });
  </script>
</body>
</html>
```",Unexpected Initial Result,655,656
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Sold , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Retail Sales Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: column;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const vlSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv""
      },
      ""vconcat"": [
        {
          ""mark"": ""line"",
          ""encoding"": {
            ""x"": {""field"": ""Year"", ""type"": ""temporal""},
            ""y"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
            ""tooltip"": [
              {""field"": ""Year"", ""type"": ""temporal""},
              {""field"": ""Units Sold"", ""type"": ""quantitative""}
            ]
          },
          ""selection"": {
            ""brush"": {""type"": ""interval"", ""encodings"": [""x""]}
          }
        },
        {
          ""mark"": ""arc"",
          ""encoding"": {
            ""theta"": {""field"": ""Revenue"", ""type"": ""quantitative"", ""stack"": true},
            ""color"": {""field"": ""Product"", ""type"": ""nominal""}
          },
          ""transform"": [
            {""filter"": {""selection"": ""brush""}}
          ]
        }
      ]
    };

    vegaEmbed(""#vis"", vlSpec);
  </script>
</body>
</html>
```",Correct,656,657
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Units Sold, Revenue, Profit, and Customer Satisfaction. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Scatterplot Matrix</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to our embed */
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {
          ""filter"": ""datum['Units Sold'] !== null && datum['Revenue'] !== null && datum['Profit'] !== null && datum['Customer Satisfaction Score'] !== null""
        }
      ],
      ""spacing"": 50,
      ""vconcat"": [
        {
          ""mark"": ""point"",
          ""selection"": {
            ""brush"": {
              ""type"": ""interval"",
              ""encodings"": [""x"", ""y""],
              ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
              ""translate"": ""[mousedown[!event.shiftKey], mouseup] > mousemove!"",
              ""zoom"": ""![event.shiftKey]""
            }
          },
          ""encoding"": {
            ""x"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
            ""color"": {
              ""condition"": {
                ""test"": ""brush"",
                ""field"": ""Customer Satisfaction Score"",
                ""type"": ""quantitative""
              },
              ""value"": ""grey""
            }
          }
        },
        {
          ""mark"": ""point"",
          ""selection"": {
            ""brush"": {
              ""type"": ""interval"",
              ""encodings"": [""x"", ""y""],
              ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
              ""translate"": ""[mousedown[!event.shiftKey], mouseup] > mousemove!"",
              ""zoom"": ""![event.shiftKey]""
            }
          },
          ""encoding"": {
            ""x"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Profit"", ""type"": ""quantitative""},
            ""color"": {
              ""condition"": {
                ""test"": ""brush"",
                ""field"": ""Customer Satisfaction Score"",
                ""type"": ""quantitative""
              },
              ""value"": ""grey""
            }
          }
        },
        {
          ""mark"": ""point"",
          ""selection"": {
            ""brush"": {
              ""type"": ""interval"",
              ""encodings"": [""x"", ""y""],
              ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
              ""translate"": ""[mousedown[!event.shiftKey], mouseup] > mousemove!"",
              ""zoom"": ""![event.shiftKey]""
            }
          },
          ""encoding"": {
            ""x"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Customer Satisfaction Score"", ""type"": ""quantitative""},
            ""color"": {
              ""condition"": {
                ""test"": ""brush"",
                ""field"": ""Customer Satisfaction Score"",
                ""type"": ""quantitative""
              },
              ""value"": ""grey""
            }
          }
        },
        {
          ""mark"": ""point"",
          ""selection"": {
            ""brush"": {
              ""type"": ""interval"",
              ""encodings"": [""x"", ""y""],
              ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
              ""translate"": ""[mousedown[!event.shiftKey], mouseup] > mousemove!"",
              ""zoom"": ""![event.shiftKey]""
            }
          },
          ""encoding"": {
            ""x"": {""field"": ""Revenue"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Profit"", ""type"": ""quantitative""},
            ""color"": {
              ""condition"": {
                ""test"": ""brush"",
                ""field"": ""Customer Satisfaction Score"",
                ""type"": ""quantitative""
              },
              ""value"": ""grey""
            }
          }
        },
        {
          ""mark"": ""point"",
          ""selection"": {
            ""brush"": {
              ""type"": ""interval"",
              ""encodings"": [""x"", ""y""],
              ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
              ""translate"": ""[mousedown[!event.shiftKey], mouseup] > mousemove!"",
              ""zoom"": ""![event.shiftKey]""
            }
          },
          ""encoding"": {
            ""x"": {""field"": ""Revenue"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Customer Satisfaction Score"", ""type"": ""quantitative""},
            ""color"": {
              ""condition"": {
                ""test"": ""brush"",
                ""field"": ""Customer Satisfaction Score"",
                ""type"": ""quantitative""
              },
              ""value"": ""grey""
            }
          }
        },
        {
          ""mark"": ""point"",
          ""selection"": {
            ""brush"": {
              ""type"": ""interval"",
              ""encodings"": [""x"", ""y""],
              ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
              ""translate"": ""[mousedown[!event.shiftKey], mouseup] > mousemove!"",
              ""zoom"": ""![event.shiftKey]""
            }
          },
          ""encoding"": {
            ""x"": {""field"": ""Profit"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Customer Satisfaction Score"", ""type"": ""quantitative""},
            ""color"": {
              ""condition"": {
                ""test"": ""brush"",
                ""field"": ""Customer Satisfaction Score"",
                ""type"": ""quantitative""
              },
              ""value"": ""grey""
            }
          }
        }
      ]
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Initialization Error,657,658
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a brushable Scatterplot that visualizes the relationship between Units Sold and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Brushable Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 600,
      ""height"": 400,
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Year"", ""type"": ""nominal""},
          {""field"": ""Product"", ""type"": ""nominal""},
          {""field"": ""Units Sold"", ""type"": ""quantitative""},
          {""field"": ""Revenue"", ""type"": ""quantitative""},
          {""field"": ""Profit"", ""type"": ""quantitative""},
          {""field"": ""Number of Stores"", ""type"": ""quantitative""},
          {""field"": ""Customer Satisfaction Score"", ""type"": ""quantitative""}
        ]
      },
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x"", ""y""]}
      }
    };

    const spec2 = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 200,
      ""height"": 400,
      ""data"": {
        ""name"": ""source""
      },
      ""mark"": ""table"",
      ""encoding"": {
        ""row"": {""field"": ""Year"", ""type"": ""nominal""},
        ""column"": {""field"": ""Product"", ""type"": ""nominal""},
        ""color"": {""field"": ""Units Sold"", ""type"": ""quantitative""}
      }
    };

    const combinedSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""hconcat"": [
        spec,
        {
          ""transform"": [
            {""filter"": ""brush""},
            {""limit"": 20}
          ],
          ""mark"": ""table"",
          ""encoding"": {
            ""row"": {""field"": ""Year"", ""type"": ""nominal""},
            ""column"": {""field"": ""Product"", ""type"": ""nominal""},
            ""color"": {""field"": ""Units Sold"", ""type"": ""quantitative""}
          }
        }
      ]
    };

    vegaEmbed(""#vis"", combinedSpec);
  </script>
</body>
</html>
```",Initialization Error,658,659
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a horizontal Bar Chart that shows Product and Units Sold, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Retail Sales Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""hconcat"": [
        {
          ""mark"": ""bar"",
          ""encoding"": {
            ""x"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Product"", ""type"": ""nominal"", ""sort"": ""-x""},
            ""tooltip"": [
              {""field"": ""Product"", ""type"": ""nominal""},
              {""field"": ""Units Sold"", ""type"": ""quantitative""}
            ]
          },
          ""width"": 600,
          ""height"": 600
        },
        {
          ""mark"": ""bar"",
          ""encoding"": {
            ""x"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Product"", ""type"": ""nominal"", ""sort"": ""-x""},
            ""tooltip"": [
              {""field"": ""Product"", ""type"": ""nominal""},
              {""field"": ""Units Sold"", ""type"": ""quantitative""}
            ]
          },
          ""width"": 200,
          ""height"": 600
        }
      ]
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,659,660
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Scatterplot</title>
  <style>
    /* Add some basic styling to make the chart look decent */
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 800px;
      height: 600px;
      border: 1px solid black;
    }
  </style>
</head>
<body>
  <svg class=""chart""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    // Set up the chart dimensions
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    // Create the SVG element
    const svg = d3.select(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    // Load the data
    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
      .then(data => {
        // Convert data types
        data.forEach(d => {
          d[""Units Sold""] = +d[""Units Sold""];
          d.Revenue = +d.Revenue;
        });

        // Create scales
        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Units Sold""])])
          .range([0, width]);
        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Revenue)])
          .range([height, 0]);

        // Create axes
        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);
        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(xAxis);
        svg.append(""g"")
          .call(yAxis);

        // Add axis labels
        svg.append(""text"")
          .attr(""x"", width / 2)
          .attr(""y"", height + 30)
          .attr(""text-anchor"", ""middle"")
          .text(""Units Sold"");
        svg.append(""text"")
          .attr(""x"", -30)
          .attr(""y"", height / 2)
          .attr(""text-anchor"", ""middle"")
          .attr(""transform"", ""rotate(-90)"")
          .text(""Revenue"");

        // Create scatterplot
        svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d[""Units Sold""]))
          .attr(""cy"", d => yScale(d.Revenue))
          .attr(""r"", 5);
      });
  </script>
</body>
</html>
```",Correct,660,661
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Line Chart that visualizes the trend of Units Sold over the Year for each Product.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Units Sold Trend</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 40px;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select("".chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Year""] = +d[""Year""];
          d[""Units Sold""] = +d[""Units Sold""];
        });

        const products = [...new Set(data.map(d => d.Product))];

        const xScale = d3.scaleLinear()
          .domain(d3.extent(data, d => d[""Year""]))
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Units Sold""])])
          .range([height, 0]);

        const line = d3.line()
          .x(d => xScale(d[""Year""]))
          .y(d => yScale(d[""Units Sold""]));

        svg.selectAll(""path"")
          .data(products)
          .enter()
          .append(""path"")
          .datum(d => data.filter(f => f.Product === d))
          .attr(""d"", line)
          .attr(""stroke"", (d, i) => d3.schemeCategory10[i])
          .attr(""stroke-width"", 2)
          .attr(""fill"", ""none"");

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        svg.append(""text"")
          .attr(""transform"", `translate(${width / 2}, ${height + margin.bottom - 5})`)
          .attr(""text-anchor"", ""middle"")
          .text(""Year"");

        svg.append(""text"")
          .attr(""transform"", `rotate(-90) translate(${-height / 2}, ${-margin.left + 15})`)
          .attr(""text-anchor"", ""middle"")
          .text(""Units Sold"");

        svg.selectAll(""legend"")
          .data(products)
          .enter()
          .append(""rect"")
          .attr(""x"", width + 10)
          .attr(""y"", (d, i) => i * 20)
          .attr(""width"", 10)
          .attr(""height"", 10)
          .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

        svg.selectAll(""legend-text"")
          .data(products)
          .enter()
          .append(""text"")
          .attr(""x"", width + 25)
          .attr(""y"", (d, i) => i * 20 + 10)
          .attr(""text-anchor"", ""start"")
          .text(d => d);
      });
  </script>
</body>
</html>
```",Correct,661,662
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Units Sold for each Product in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Units Sold by Product in 2020</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .bar {
      fill: steelblue;
    }
    .bar:hover {
      fill: brown;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
      .then(data => {
        data.forEach(d => {
          d.Year = +d.Year;
          d[""Units Sold""] = +d[""Units Sold""];
        });

        const filteredData = data.filter(d => d.Year === 2020);

        const x = d3.scaleBand()
          .domain(filteredData.map(d => d.Product))
          .range([0, width])
          .padding(0.2);

        const y = d3.scaleLinear()
          .domain([0, d3.max(filteredData, d => d[""Units Sold""])])
          .range([height, 0]);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(x));

        svg.append(""g"")
          .call(d3.axisLeft(y));

        svg.selectAll(""bar"")
          .data(filteredData)
          .enter()
          .append(""rect"")
          .attr(""class"", ""bar"")
          .attr(""x"", d => x(d.Product))
          .attr(""y"", d => y(d[""Units Sold""]))
          .attr(""width"", x.bandwidth())
          .attr(""height"", d => height - y(d[""Units Sold""]));
      });
  </script>
</body>
</html>
```",Correct,662,663
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Pie Chart that visualizes the proportion of Units Sold contributed by each Product in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Pie Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    #chart {
      width: 500px;
      height: 500px;
      margin: 50px auto;
    }
  </style>
</head>
<body>
  <div id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;
    const radius = Math.min(width, height) / 2;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${width / 2 + margin.left}, ${height / 2 + margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Year""] = +d[""Year""];
          d[""Units Sold""] = +d[""Units Sold""];
        });

        const filteredData = data.filter(d => d[""Year""] === 2020);

        const pie = d3.pie()
          .value(d => d[""Units Sold""]);

        const path = svg.selectAll(""path"")
          .data(pie(filteredData))
          .enter()
          .append(""path"")
          .attr(""d"", d3.arc()
            .outerRadius(radius)
            .innerRadius(0)
          )
          .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

        const legend = svg.selectAll("".legend"")
          .data(filteredData)
          .enter()
          .append(""g"")
          .attr(""transform"", (d, i) => `translate(0, ${i * 20})`)
          .attr(""class"", ""legend"");

        legend.append(""rect"")
          .attr(""x"", width / 2 + 20)
          .attr(""y"", 10)
          .attr(""width"", 10)
          .attr(""height"", 10)
          .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

        legend.append(""text"")
          .attr(""x"", width / 2 + 40)
          .attr(""y"", 20)
          .text(d => d[""Product""]);
      });
  </script>
</body>
</html>
```",Correct,663,664
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Donut Chart that visualizes the distribution of Units Sold among Product in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Donut Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 500px;
      height: 500px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 20, left: 20 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Year""] = +d[""Year""];
          d[""Units Sold""] = +d[""Units Sold""];
        });

        const filteredData = data.filter(d => d[""Year""] === 2020);

        const pie = d3.pie()
          .value(d => d[""Units Sold""]);

        const arc = d3.arc()
          .outerRadius(width / 2 - 50)
          .innerRadius(width / 2 - 150);

        const arcs = svg.selectAll(""arc"")
          .data(pie(filteredData))
          .enter()
          .append(""path"")
          .attr(""d"", arc)
          .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

        const text = svg.selectAll(""text"")
          .data(pie(filteredData))
          .enter()
          .append(""text"")
          .attr(""transform"", d => `translate(${arc.centroid(d)})`)
          .attr(""dy"", ""0.35em"")
          .text(d => `${d.data[""Product""]}: ${d.value.toLocaleString()}`);
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,664,665
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Coxcomb Chart(polar area chart) to compare the Units Sold of different Product in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Coxcomb Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 600px;
      height: 600px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 20, left: 20 };
    const width = 600 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('.chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
      .then(data => {
        data.forEach(d => {
          d['Year'] = +d['Year'];
          d['Units Sold'] = +d['Units Sold'];
        });

        const filteredData = data.filter(d => d['Year'] === 2020);

        const products = Array.from(new Set(filteredData.map(d => d['Product'])));

        const angles = products.map((_, i) => i * (2 * Math.PI / products.length));

        const radiusScale = d3.scaleLinear()
          .domain([0, d3.max(filteredData, d => d['Units Sold'])])
          .range([0, Math.min(width, height) / 2]);

        svg.selectAll('path')
          .data(filteredData)
          .enter()
          .append('path')
          .attr('d', d => {
            const startAngle = angles[products.indexOf(d['Product'])];
            const endAngle = startAngle + (2 * Math.PI / products.length);
            const radius = radiusScale(d['Units Sold']);
            return `M ${width / 2} ${height / 2} L ${width / 2 + radius * Math.cos(startAngle)} ${height / 2 + radius * Math.sin(startAngle)} A ${radius} ${radius} 0 ${endAngle - startAngle > Math.PI ? 1 : 0} 1 ${width / 2 + radius * Math.cos(endAngle)} ${height / 2 + radius * Math.sin(endAngle)} Z`;
          })
          .attr('fill', (d, i) => d3.schemeCategory10[i % 10])
          .attr('stroke', 'black')
          .attr('stroke-width', 1);

        svg.selectAll('text')
          .data(products)
          .enter()
          .append('text')
          .attr('x', (d, i) => width / 2 + (Math.min(width, height) / 2 + 20) * Math.cos(angles[i]))
          .attr('y', (d, i) => height / 2 + (Math.min(width, height) / 2 + 20) * Math.sin(angles[i]))
          .text(d => d);
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,665,666
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Radar Chart to compare the Units Sold of different Product in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Radar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg width=""600"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 600 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;
    const svg = d3.select(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
      .then(data => {
        data.forEach(d => {
          d.Year = +d.Year;
          d[""Units Sold""] = +d[""Units Sold""];
        });

        const products = Array.from(new Set(data.filter(d => d.Year === 2020).map(d => d.Product)));

        const angles = products.map((_, i) => i * (2 * Math.PI / products.length));

        const maxUnitsSold = d3.max(data.filter(d => d.Year === 2020), d => d[""Units Sold""]);

        const radiusScale = d3.scaleLinear()
          .domain([0, maxUnitsSold])
          .range([0, Math.min(width, height) / 2 - 50]);

        const radarLines = svg.selectAll("".radar-line"")
          .data(data.filter(d => d.Year === 2020))
          .enter()
          .append(""g"")
          .attr(""class"", ""radar-line"");

        radarLines.selectAll(""path"")
          .data(d => products.map(product => ({ product, unitsSold: data.find(p => p.Product === product && p.Year === d.Year)[""Units Sold""] })))
          .enter()
          .append(""path"")
          .attr(""d"", (d, i) => {
            const x = width / 2 + radiusScale(d.unitsSold) * Math.cos(angles[i]);
            const y = height / 2 + radiusScale(d.unitsSold) * Math.sin(angles[i]);
            return `M ${width / 2} ${height / 2} L ${x} ${y}`;
          })
          .attr(""stroke"", ""black"")
          .attr(""stroke-width"", 1)
          .attr(""fill"", ""none"");

        const radarPoints = svg.selectAll("".radar-point"")
          .data(data.filter(d => d.Year === 2020))
          .enter()
          .append(""g"")
          .attr(""class"", ""radar-point"");

        radarPoints.selectAll(""circle"")
          .data(d => products.map(product => ({ product, unitsSold: data.find(p => p.Product === product && p.Year === d.Year)[""Units Sold""] })))
          .enter()
          .append(""circle"")
          .attr(""cx"", (d, i) => width / 2 + radiusScale(d.unitsSold) * Math.cos(angles[i]))
          .attr(""cy"", (d, i) => height / 2 + radiusScale(d.unitsSold) * Math.sin(angles[i]))
          .attr(""r"", 5)
          .attr(""fill"", ""black"");

        const axis = svg.selectAll("".axis"")
          .data(angles)
          .enter()
          .append(""g"")
          .attr(""class"", ""axis"")
          .attr(""transform"", (d, i) => `rotate(${d * 180 / Math.PI}) translate(0, ${-Math.min(width, height) / 2})`);

        axis.append(""line"")
          .attr(""x1"", 0)
          .attr(""y1"", 0)
          .attr(""x2"", 0)
          .attr(""y2"", Math.min(width, height) / 2)
          .attr(""stroke"", ""black"")
          .attr(""stroke-width"", 1);

        axis.append(""text"")
          .attr(""x"", 0)
          .attr(""y"", -10)
          .attr(""text-anchor"", ""middle"")
          .text((d, i) => products[i]);

        const legend = svg.selectAll("".legend"")
          .data(products)
          .enter()
          .append(""g"")
          .attr(""class"", ""legend"")
          .attr(""transform"", (d, i) => `translate(${10}, ${10 + i * 20})`);

        legend.append(""rect"")
          .attr(""x"", 0)
          .attr(""y"", 0)
          .attr(""width"", 10)
          .attr(""height"", 10)
          .attr(""fill"", ""black"");

        legend.append(""text"")
          .attr(""x"", 20)
          .attr(""y"", 10)
          .attr(""text-anchor"", ""start"")
          .text(d => d);
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,666,667
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Streamgraph that visualizes the changes of Units Sold over the Year for each Product.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Streamgraph</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
      data.forEach(d => {
        d.Year = +d.Year;
        d[""Units Sold""] = +d[""Units Sold""];
      });

      const products = Array.from(new Set(data.map(d => d.Product)));
      const years = Array.from(new Set(data.map(d => d.Year)));

      const xScale = d3.scalePoint()
        .domain(years)
        .range([0, width])
        .padding(0.5);

      const yScale = d3.scaleLinear()
        .range([height, 0]);

      const zScale = d3.scaleOrdinal(d3.schemeCategory10)
        .domain(products);

      const stack = d3.stack()
        .keys(products)
        .value((d, key) => {
          const productData = data.find(p => p.Product === key && p.Year === d.data);
          return productData ? productData[""Units Sold""] : 0;
        })
        .order(d3.stackOrderNone)
        .offset(d3.stackOffsetExpand);

      const series = stack(years.map(year => ({ data: year })));

      yScale.domain([0, d3.max(series, d => d3.max(d, d => d[1]))]).nice();

      svg.selectAll(""path"")
        .data(series)
        .enter()
        .append(""path"")
        .attr(""d"", d3.line()
          .x((d, i) => xScale(years[i]))
          .y(d => yScale(d[1]))
        )
        .attr(""fill"", (d, i) => zScale(products[i]))
        .attr(""stroke"", ""none"");

      svg.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

      svg.append(""g"")
        .call(d3.axisLeft(yScale));

      svg.append(""g"")
        .selectAll(""text"")
        .data(products)
        .enter()
        .append(""text"")
        .attr(""x"", width + 10)
        .attr(""y"", (d, i) => height - i * 20)
        .attr(""fill"", d => zScale(d))
        .text(d => d);
    });
  </script>
</body>
</html>
```",Unexpected Initial Result,667,668
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Slopegraph to compare the Units Sold between 2019 and 2020 for each Product Category.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Slopegraph</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .slopegraph {
      width: 800px;
      height: 600px;
      margin: 50px auto;
    }
    .slopegraph .axis {
      font-size: 14px;
    }
    .slopegraph .axis path,
    .slopegraph .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
    .slopegraph .line {
      stroke-width: 2;
      fill: none;
    }
    .slopegraph .circle {
      fill: steelblue;
      stroke: #fff;
      stroke-width: 1.5;
    }
  </style>
</head>
<body>
  <svg class=""slopegraph""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select("".slopegraph"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
      data.forEach(d => {
        d[""Year""] = +d[""Year""];
        d[""Units Sold""] = +d[""Units Sold""];
      });

      const products = Array.from(new Set(data.map(d => d.Product)));

      const xScale = d3.scalePoint()
        .domain([2019, 2020])
        .range([0, width])
        .padding(0.5);

      const yScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Units Sold""])])
        .range([height, 0]);

      svg.selectAll("".line"")
        .data(products)
        .enter()
        .append(""line"")
        .attr(""class"", ""line"")
        .attr(""x1"", d => xScale(2019))
        .attr(""y1"", d => yScale(d3.max(data.filter(e => e.Product === d && e[""Year""] === 2019), e => e[""Units Sold""])))
        .attr(""x2"", d => xScale(2020))
        .attr(""y2"", d => yScale(d3.max(data.filter(e => e.Product === d && e[""Year""] === 2020), e => e[""Units Sold""])));

      svg.selectAll("".circle"")
        .data(data.filter(d => d[""Year""] === 2019))
        .enter()
        .append(""circle"")
        .attr(""class"", ""circle"")
        .attr(""cx"", xScale(2019))
        .attr(""cy"", d => yScale(d[""Units Sold""]))
        .attr(""r"", 5);

      svg.selectAll("".circle"")
        .data(data.filter(d => d[""Year""] === 2020))
        .enter()
        .append(""circle"")
        .attr(""class"", ""circle"")
        .attr(""cx"", xScale(2020))
        .attr(""cy"", d => yScale(d[""Units Sold""]))
        .attr(""r"", 5);

      svg.append(""g"")
        .attr(""class"", ""axis"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

      svg.append(""g"")
        .attr(""class"", ""axis"")
        .call(d3.axisLeft(yScale));

      svg.selectAll("".label"")
        .data(products)
        .enter()
        .append(""text"")
        .attr(""class"", ""label"")
        .attr(""x"", d => xScale(2019))
        .attr(""y"", d => yScale(d3.max(data.filter(e => e.Product === d && e[""Year""] === 2019), e => e[""Units Sold""])) - 10)
        .text(d => d);
    });
  </script>
</body>
</html>
```",Unexpected Initial Result,668,669
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Heatmap that visualizes the Units Sold across Product and Years.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Heatmap of Units Sold</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .tooltip {
      position: absolute;
      background-color: #f9f9f9;
      border: 1px solid #ccc;
      padding: 2px;
      font-size: 12px;
      visibility: hidden;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 80, right: 100, bottom: 30, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
      .then(data => {
        data.forEach(d => {
          d.Year = +d.Year;
          d[""Units Sold""] = +d[""Units Sold""];
        });

        const products = [...new Set(data.map(d => d.Product))];
        const years = [...new Set(data.map(d => d.Year))];

        const xScale = d3.scaleBand()
          .domain(years)
          .range([0, width])
          .padding(0.2);

        const yScale = d3.scaleBand()
          .domain(products)
          .range([height, 0])
          .padding(0.2);

        const colorScale = d3.scaleSequential()
          .domain([0, d3.max(data, d => d[""Units Sold""])])
          .interpolator(d3.interpolateBlues);

        svg.selectAll(""rect"")
          .data(data)
          .enter()
          .append(""rect"")
          .attr(""x"", d => xScale(d.Year))
          .attr(""y"", d => yScale(d.Product))
          .attr(""width"", xScale.bandwidth())
          .attr(""height"", yScale.bandwidth())
          .attr(""fill"", d => colorScale(d[""Units Sold""]));

        svg.selectAll(""text"")
          .data(data)
          .enter()
          .append(""text"")
          .attr(""x"", d => xScale(d.Year) + xScale.bandwidth() / 2)
          .attr(""y"", d => yScale(d.Product) + yScale.bandwidth() / 2)
          .attr(""text-anchor"", ""middle"")
          .attr(""dominant-baseline"", ""middle"")
          .text(d => d[""Units Sold""]);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        svg.append(""text"")
          .attr(""x"", width / 2)
          .attr(""y"", -50)
          .attr(""text-anchor"", ""middle"")
          .text(""Heatmap of Units Sold"");

        svg.append(""text"")
          .attr(""x"", -height / 2)
          .attr(""y"", -60)
          .attr(""text-anchor"", ""middle"")
          .attr(""transform"", ""rotate(-90)"")
          .text(""Product"");

        svg.append(""text"")
          .attr(""x"", width / 2)
          .attr(""y"", height + 20)
          .attr(""text-anchor"", ""middle"")
          .text(""Year"");
      });
  </script>
</body>
</html>
```",Correct,669,670
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales Stacked Bar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 40px auto;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg class=""chart"" width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 40, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('.chart')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
      .then(data => {
        data.forEach(d => {
          d['Units Sold'] = +d['Units Sold'];
          d.Revenue = +d.Revenue;
          d.Profit = +d.Profit;
        });

        const products = [...new Set(data.map(d => d.Product))];

        const xScale = d3.scaleBand()
          .domain(data.map(d => d.Year))
          .range([0, width])
          .padding(0.2);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Units Sold'] + d.Revenue + d.Profit)]).nice()
          .range([height, 0]);

        const zScale = d3.scaleOrdinal(d3.schemeCategory10)
          .domain(products);

        const stack = d3.stack()
          .keys(products)
          .value((d, key) => {
            const productData = data.find(p => p.Product === key && p.Year === d.Year);
            if (productData) {
              return productData['Units Sold'] + productData.Revenue + productData.Profit;
            } else {
              return 0;
            }
          });

        const stackedData = stack(data);

        svg.selectAll('g.layer')
          .data(stackedData)
          .enter()
          .append('g')
          .attr('class', 'layer')
          .attr('fill', d => zScale(d.key))
          .selectAll('rect')
          .data(d => d)
          .enter()
          .append('rect')
          .attr('x', d => xScale(d.data.Year))
          .attr('y', d => yScale(d[1]))
          .attr('width', xScale.bandwidth())
          .attr('height', d => yScale(d[0]) - yScale(d[1]));

        svg.append('g')
          .attr('class', 'axis x-axis')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append('g')
          .attr('class', 'axis y-axis')
          .call(d3.axisLeft(yScale));

        svg.append('text')
          .attr('x', width / 2)
          .attr('y', -20)
          .attr('text-anchor', 'middle')
          .text('Retail Sales Stacked Bar Chart');

        svg.append('text')
          .attr('x', -height / 2)
          .attr('y', -30)
          .attr('text-anchor', 'middle')
          .attr('transform', 'rotate(-90)')
          .text('Units Sold + Revenue + Profit');

        svg.append('text')
          .attr('x', width / 2)
          .attr('y', height + 20)
          .attr('text-anchor', 'middle')
          .text('Year');
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,670,671
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Horizontal Bar Chart that visualizes the Units Sold for each Product in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Retail Sales</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 40px;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 300 - margin.top - margin.bottom;

    const svg = d3.select("".chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Year""] = +d[""Year""];
          d[""Units Sold""] = +d[""Units Sold""];
        });

        const filteredData = data.filter(d => d[""Year""] === 2020);

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(filteredData, d => d[""Units Sold""])])
          .range([0, width]);

        const yScale = d3.scaleBand()
          .domain(filteredData.map(d => d.Product))
          .range([height, 0])
          .padding(0.2);

        svg.selectAll(""rect"")
          .data(filteredData)
          .enter()
          .append(""rect"")
          .attr(""x"", 0)
          .attr(""y"", d => yScale(d.Product))
          .attr(""width"", d => xScale(d[""Units Sold""]))
          .attr(""height"", yScale.bandwidth());

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));
      });
  </script>
</body>
</html>
```",Correct,671,672
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Retail Sales Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const unitsSold = [];
                const revenue = [];
                csvData.forEach(row => {
                    const columns = row.split(',');
                    unitsSold.push(parseFloat(columns[2]));
                    revenue.push(parseFloat(columns[3]));
                });
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Relationship between Units Sold and Revenue'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'cross'
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Units Sold'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Revenue'
                    },
                    series: [{
                        symbolSize: 10,
                        data: unitsSold.map((x, i) => [x, revenue[i]]),
                        type: 'scatter'
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,672,673
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Line Chart that visualizes the trend of Units Sold over the Year for each Product.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Units Sold Trend</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const products = [...new Set(csvData.map(row => row.split(',')[1]))];
                const series = products.map(product => {
                    const productData = csvData.filter(row => row.split(',')[1] === product);
                    return {
                        name: product,
                        type: 'line',
                        data: productData.map(row => [parseInt(row.split(',')[0]), parseInt(row.split(',')[2])])
                    };
                });
                const option = {
                    title: {
                        text: 'Units Sold Trend'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    legend: {
                        data: products
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    toolbox: {
                        feature: {
                            saveAsImage: {}
                        }
                    },
                    xAxis: {
                        type: 'category',
                        boundaryGap: false,
                        data: [...new Set(csvData.map(row => parseInt(row.split(',')[0])))]
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: series
                };
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,673,674
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Units Sold for each Product in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Units Sold by Product in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [year, product, unitsSold] = row.split(',');
                    if (year === '2020') {
                        if (!chartData[product]) {
                            chartData[product] = 0;
                        }
                        chartData[product] += parseInt(unitsSold);
                    }
                });
                const products = Object.keys(chartData);
                const unitsSold = Object.values(chartData);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Units Sold by Product in 2020'
                    },
                    tooltip: {},
                    xAxis: {
                        data: products
                    },
                    yAxis: {},
                    series: [{
                        name: 'Units Sold',
                        type: 'bar',
                        data: unitsSold
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,674,675
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Pie Chart that visualizes the proportion of Units Sold contributed by each Product in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Retail Sales Pie Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [year, product, unitsSold] = row.split(',');
                    if (year === '2020') {
                        if (chartData[product]) {
                            chartData[product] += parseInt(unitsSold);
                        } else {
                            chartData[product] = parseInt(unitsSold);
                        }
                    }
                });
                const seriesData = Object.keys(chartData).map(product => ({ name: product, value: chartData[product] }));
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Proportion of Units Sold by Product in 2020'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    series: [
                        {
                            type: 'pie',
                            data: seriesData,
                            emphasis: {
                                itemStyle: {
                                    shadowBlur: 10,
                                    shadowOffsetX: 0,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            }
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,675,676
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Donut Chart that visualizes the distribution of Units Sold among Product in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Units Sold Distribution in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [year, product, unitsSold] = row.split(',');
                    if (year === '2020') {
                        if (chartData[product]) {
                            chartData[product] += parseInt(unitsSold);
                        } else {
                            chartData[product] = parseInt(unitsSold);
                        }
                    }
                });
                const seriesData = Object.keys(chartData).map(product => ({ value: chartData[product], name: product }));
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Units Sold Distribution in 2020',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    series: [
                        {
                            type: 'pie',
                            radius: ['40%', '70%'],
                            avoidLabelOverlap: false,
                            itemStyle: {
                                borderRadius: 10,
                                borderColor: '#fff',
                                borderWidth: 2
                            },
                            label: {
                                show: false,
                                position: 'center'
                            },
                            emphasis: {
                                label: {
                                    show: true,
                                    fontSize: '40',
                                    fontWeight: 'bold'
                                }
                            },
                            labelLine: {
                                show: false
                            },
                            data: seriesData
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,676,677
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Coxcomb Chart(polar area chart) to compare the Units Sold of different Product in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Retail Sales Coxcomb Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [Year, Product, UnitsSold] = row.split(',');
                    if (Year === '2020') {
                        if (!chartData[Product]) {
                            chartData[Product] = 0;
                        }
                        chartData[Product] += parseInt(UnitsSold);
                    }
                });
                const products = Object.keys(chartData);
                const unitsSold = Object.values(chartData);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    angleAxis: {
                        type: 'category',
                        data: products,
                        z: 10,
                    },
                    radiusAxis: {
                        max: Math.max(...unitsSold),
                    },
                    polar: {},
                    series: [
                        {
                            type: 'bar',
                            data: unitsSold,
                            coordinateSystem: 'polar',
                            name: 'Units Sold',
                            stack: 'a',
                        },
                    ],
                    legend: {
                        show: true,
                        data: ['Units Sold'],
                    },
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,677,678
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Radar Chart to compare the Units Sold of different Product in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Radar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const products = [...new Set(csvData.map(row => row.split(',')[1]))];
                const unitsSold = products.map(product => {
                    const productData = csvData.filter(row => row.split(',')[1] === product && row.split(',')[0] === '2020');
                    return productData.reduce((acc, row) => acc + parseInt(row.split(',')[2]), 0);
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Units Sold of Different Products in 2020'
                    },
                    radar: {
                        indicator: products.map(product => ({ name: product, max: Math.max(...unitsSold) })),
                        radius: 80,
                        center: ['50%', '50%']
                    },
                    series: [{
                        type: 'radar',
                        data: [{
                            value: unitsSold,
                            name: 'Units Sold'
                        }]
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,678,679
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Streamgraph that visualizes the changes of Units Sold over the Year for each Product.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Retail Sales Streamgraph</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [year, product, unitsSold] = row.split(',');
                    if (!chartData[product]) {
                        chartData[product] = [];
                    }
                    chartData[product].push([parseInt(year), parseInt(unitsSold)]);
                });
                const series = Object.keys(chartData).map(product => ({
                    name: product,
                    type: 'stream',
                    data: chartData[product],
                    stack: 'unitsSold',
                }));
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Units Sold Streamgraph',
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'line',
                            lineStyle: {
                                color: 'rgba(0,0,0,0.2)',
                                width: 2,
                                type: 'solid',
                            },
                        },
                    },
                    legend: {
                        data: Object.keys(chartData),
                    },
                    xAxis: {
                        type: 'category',
                        data: Array.from({ length: 5 }, (_, i) => 2016 + i),
                    },
                    yAxis: {
                        type: 'value',
                    },
                    series,
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,679,680
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Slopegraph to compare the Units Sold between 2019 and 2020 for each Product Category.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Retail Sales Slopegraph</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [year, product, unitsSold] = row.split(',');
                    if (!chartData[product]) {
                        chartData[product] = {};
                    }
                    chartData[product][year] = parseInt(unitsSold);
                });
                const seriesData = [];
                Object.keys(chartData).forEach(product => {
                    seriesData.push([chartData[product]['2019'], chartData[product]['2020']]);
                });
                const products = Object.keys(chartData);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Units Sold Slopegraph'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    xAxis: [
                        {
                            type: 'category',
                            data: ['2019', '2020'],
                            axisTick: {
                                alignWithLabel: true
                            }
                        }
                    ],
                    yAxis: [
                        {
                            type: 'value',
                            name: 'Units Sold'
                        }
                    ],
                    series: [
                        {
                            name: 'Units Sold',
                            type: 'scatter',
                            symbolSize: 10,
                            data: seriesData,
                            label: {
                                show: true,
                                formatter: (params) => {
                                    return products[params.dataIndex];
                                }
                            },
                            lineStyle: {
                                color: 'rgba(128, 128, 128, 0.5)',
                                width: 1,
                                type: 'solid'
                            }
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,680,681
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Heatmap that visualizes the Units Sold across Product and Years.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Heatmap</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 1000px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const years = [...new Set(csvData.map(row => row.split(',')[0]))];
                const products = [...new Set(csvData.map(row => row.split(',')[1]))];
                const heatmapData = csvData.map(row => {
                    const [year, product, unitsSold] = row.split(',');
                    return [years.indexOf(year), products.indexOf(product), parseInt(unitsSold)];
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Units Sold Heatmap'
                    },
                    tooltip: {
                        position: 'top'
                    },
                    grid: {
                        height: '50%',
                        top: '10%'
                    },
                    xAxis: {
                        type: 'category',
                        data: years,
                        splitArea: {
                            show: true
                        }
                    },
                    yAxis: {
                        type: 'category',
                        data: products,
                        splitArea: {
                            show: true
                        }
                    },
                    visualMap: {
                        min: 0,
                        max: Math.max(...heatmapData.map(item => item[2])),
                        calculable: true,
                        orient: 'horizontal',
                        left: 'center',
                        bottom: '15%'
                    },
                    series: [{
                        name: 'Units Sold',
                        type: 'heatmap',
                        data: heatmapData,
                        label: {
                            show: true
                        },
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,681,682
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Retail Sales Stacked Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const years = [...new Set(csvData.map(row => row.split(',')[0]))];
                const products = [...new Set(csvData.map(row => row.split(',')[1]))];
                const seriesData = products.map(product => {
                    return years.map(year => {
                        const row = csvData.find(row => row.split(',')[0] === year && row.split(',')[1] === product);
                        return row ? parseFloat(row.split(',')[4]) : 0;
                    });
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Retail Sales Stacked Bar Chart'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    legend: {
                        data: products
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'category',
                        data: years
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: seriesData.map((data, index) => {
                        return {
                            name: products[index],
                            type: 'bar',
                            stack: 'total',
                            data: data
                        };
                    })
                });
            });
    </script>
</body>
</html>
```",Correct,682,683
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Horizontal Bar Chart that visualizes the Units Sold for each Product in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Retail Sales Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 1000px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [year, product, unitsSold] = row.split(',');
                    if (year === '2020') {
                        if (!chartData[product]) {
                            chartData[product] = 0;
                        }
                        chartData[product] += parseInt(unitsSold);
                    }
                });
                const products = Object.keys(chartData);
                const unitsSold = Object.values(chartData);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Units Sold for each Product in 2020'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'value'
                    },
                    yAxis: {
                        type: 'category',
                        data: products
                    },
                    series: [
                        {
                            name: 'Units Sold',
                            type: 'bar',
                            data: unitsSold
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,683,684
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Scatterplot of Units Sold vs Revenue</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Units Sold"", ""type"": ""quantitative""},
          {""field"": ""Revenue"", ""type"": ""quantitative""}
        ]
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,684,685
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Line Chart that visualizes the trend of Units Sold over the Year for each Product.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Units Sold Trend Over Years for Each Product</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {""field"": ""Year"", ""type"": ""temporal""},
        ""y"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Product"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,685,686
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Units Sold for each Product in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Units Sold by Product in 2020</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2020""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Product"", ""type"": ""nominal""},
        ""y"": {""field"": ""Units Sold"", ""type"": ""quantitative""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,686,687
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Pie Chart that visualizes the proportion of Units Sold contributed by each Product in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Retail Sales Pie Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2020""}
      ],
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Product"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,687,688
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Donut Chart that visualizes the distribution of Units Sold among Product in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Donut Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>

<body>
  <div id=""vis""></div>

  <script type=""text/javascript"">
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { 
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": {""field"": ""Year"", ""equal"": { ""%Y""}}},
        {""calculate"": ""(datum.Units Sold / sum(datum.Units Sold)) *100"", 
         ""as"" : ""% of Total Units Sold""},
        {""sort"" : [{""field"" : ""% of Total Units Sold"", 
                    ""order"" : [""descending""]}]},
        {""calculate"" : ""(sum(datum.Units Sold) - datum.Units Sold)"", 
         'as' :'Other'}
      ],
      'encoding': {
          'theta': {'field': '% of Total Units Sold', 'type': 'quantitative',
                    'stack': true,  
                    },
          'color' :'Product:N'
       },
       layer: [
           {'mark' :'arc'},
           {'mark':{'type':'text','dy':'-3'},'encoding':{'text':{'field':'Product:N'}}}
       ]
    };

    vegaEmbed(""#vis"", spec);
  </script>

</body>

</html>  
```",Initialization Error,688,689
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Coxcomb Chart(polar area chart) to compare the Units Sold of different Product in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coxcomb Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 500px;
      height: 500px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2020""}
      ],
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Product"", ""type"": ""nominal""}
      },
      ""view"": {""stroke"": null}
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,689,690
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Radar Chart to compare the Units Sold of different Product in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Radar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>

<body>
  <div id=""vis""></div>

  <script type=""text/javascript"">
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { 
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": {""field"": ""Year"", ""equal"": { ""%Y""}}},
        {""calculate"": ""(Units Sold / max(Units Sold)) * (pi() / (length(datum.Product)))"", 
         ""as"" : ""_angle""},
        {""calculate"" : ""(Units Sold / max(Units Sold)) * (max(Number of Stores) / pi())"", 
         ""_r""},
        {""calculate"" : ""_r * cos(_angle)"", 
         ""_x""},
        {""calculate"" : ""_r * sin(_angle)"", 
         ""_y""}
      ],
      'mark': {'type': 'line', 'point': true},
      'encoding': {
          'x': {'field' : '_x', 'scale' : {'domain' : [-100,100]}},
          'y': {'field' : '_y', 'scale' : {'domain' : [-100,100]}},
          'color':{'field':'Product'}
       }
    };

    vegaEmbed(""#vis"", spec);
  </script>

</body>

</html>
```",Initialization Error,690,691
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Streamgraph that visualizes the changes of Units Sold over the Year for each Product.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Retail Sales Streamgraph</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""area"",
      ""encoding"": {
        ""x"": {""field"": ""Year"", ""type"": ""temporal""},
        ""y"": {""field"": ""Units Sold"", ""type"": ""quantitative"", ""stack"": true},
        ""color"": {""field"": ""Product"", ""type"": ""nominal""}
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""grid"": false}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,691,692
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Slopegraph to compare the Units Sold between 2019 and 2020 for each Product Category.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Slopegraph for Units Sold</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2019 || datum.Year == 2020""},
        {""calculate"": ""datum.Year == 2019 ? '2019' : '2020'"", ""as"": ""YearStr""}
      ],
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {""field"": ""YearStr"", ""type"": ""nominal"", ""axis"": {""labelAngle"": 0}},
        ""y"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Product"", ""type"": ""nominal""},
        ""detail"": {""field"": ""Product"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,692,693
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Heatmap that visualizes the Units Sold across Product and Years.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Heatmap of Units Sold across Product and Years</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""rect"",
      ""encoding"": {
        ""x"": {""field"": ""Product"", ""type"": ""nominal""},
        ""y"": {""field"": ""Year"", ""type"": ""nominal""},
        ""color"": {""field"": ""Units Sold"", ""type"": ""quantitative""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,693,694
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Retail Sales Stacked Bar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>

<body>
  <div id=""vis""></div>

  <script type=""text/javascript"">
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"" },
      ""mark"": {""type"": ""bar"", ""tooltip"": true},
      ""encoding"": {
        ""x"": {""field"": ""Product"", ""type"": ""nominal""},
        ""y"": {""field"": null, 
              'aggregate': 'sum', 
              'type': 'quantitative'},
        'color': {'field': null, 
                  'legend': null},
        'detail': {'field': null}
      },
      'transform':[{'pivot':'Revenue'}],
       layer: [
          {
            encoding: {
              y: { field: ['Profit'], aggregate:'sum', type:'quantitative' },
              color:{ field:'key', legend:null }
            }
          },  
          {
            encoding: {
              y:{ field:['Units Sold'], aggregate:'sum', type:'quantitative' },
               color:{ field:'key', legend:null }
            }
          }  
       ]
    };

    vegaEmbed(""#vis"", spec);
  </script>

</body>

</html> 
```",Initialization Error,694,695
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Horizontal Bar Chart that visualizes the Units Sold for each Product in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Units Sold by Product in 2020</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2020""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Product"", ""type"": ""nominal"", ""sort"": ""-x""},
        ""tooltip"": [
          {""field"": ""Product"", ""type"": ""nominal""},
          {""field"": ""Units Sold"", ""type"": ""quantitative""}
        ]
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,695,696
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Adoption Rate and Investment. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Technology Adoption Scatterplot</title>
    <style>
        /* set the CSS */
        body { font: 12px Arial;}

        /* style the lines */
        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 1.5px;
        }

        /* style the circles */
        .dot {
            fill: steelblue;
            stroke: #fff;
        }

        /* style the text */
        .text {
            font-size: 12px;
        }

        /* style the tooltip */
        .tooltip {
            position: absolute;
            pointer-events: none;
            font-size: 12px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        // set the dimensions and margins of the graph
        var margin = {top: 20, right: 20, bottom: 30, left: 40},
            width = 800 - margin.left - margin.right,
            height = 600 - margin.top - margin.bottom;

        // append the svg object to the body of the page
        var svg = d3.select(""body"")
            .select(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");

        // read the data
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(function(data) {
            // convert data types
            data.forEach(function(d) {
                d[""Adoption Rate""] = +d[""Adoption Rate""];
                d.Investment = +d.Investment;
            });

            // create scales
            var xScale = d3.scaleLinear()
                .domain([0, d3.max(data, function(d) { return d[""Adoption Rate""]; })])
                .range([0, width]);

            var yScale = d3.scaleLinear()
                .domain([0, d3.max(data, function(d) { return d.Investment; })])
                .range([height, 0]);

            // create axes
            var xAxis = d3.axisBottom(xScale);
            var yAxis = d3.axisLeft(yScale);

            // add axes to the graph
            svg.append(""g"")
                .attr(""transform"", ""translate(0,"" + height + "")"")
                .call(xAxis);

            svg.append(""g"")
                .call(yAxis);

            // add title and labels
            svg.append(""text"")
                .attr(""x"", width / 2)
                .attr(""y"", -20)
                .attr(""text-anchor"", ""middle"")
                .style(""font-size"", ""16px"")
                .text(""Adoption Rate vs Investment"");

            svg.append(""text"")
                .attr(""x"", -30)
                .attr(""y"", height / 2)
                .attr(""text-anchor"", ""middle"")
                .attr(""transform"", ""rotate(-90)"")
                .text(""Investment"");

            svg.append(""text"")
                .attr(""x"", width / 2)
                .attr(""y"", height + 30)
                .attr(""text-anchor"", ""middle"")
                .text(""Adoption Rate"");

            // create dots
            var dots = svg.selectAll(""dot"")
                .data(data)
                .enter()
                .append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", function(d) { return xScale(d[""Adoption Rate""]); })
                .attr(""cy"", function(d) { return yScale(d.Investment); })
                .attr(""r"", 5);

            // create tooltip
            var tooltip = d3.select(""body"")
                .append(""div"")
                .attr(""class"", ""tooltip"")
                .style(""opacity"", 0);

            // add mouseover and mouseout events
            dots.on(""mouseover"", function(event, d) {
                tooltip.transition()
                    .duration(200)
                    .style(""opacity"", .9);
                tooltip.html(""Adoption Rate: "" + d[""Adoption Rate""] + ""<br>Investment: "" + d.Investment)
                    .style(""left"", (event.pageX) + ""px"")
                    .style(""top"", (event.pageY - 28) + ""px"");
            })
            .on(""mouseout"", function(d) {
                tooltip.transition()
                    .duration(500)
                    .style(""opacity"", 0);
            });

            // add mousemove event
            dots.on(""mousemove"", function(event, d) {
                tooltip.style(""left"", (event.pageX) + ""px"")
                    .style(""top"", (event.pageY - 28) + ""px"");
            });
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,696,697
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Adoption Rate and Investment. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot with Brushing</title>
  <style>
    .chart {
      position: relative;
      display: block;
      width: 800px;
      height: 600px;
      margin: 20px auto;
    }
    .chart .brush {
      fill: none;
      stroke: steelblue;
      stroke-width: 1.5px;
      stroke-linecap: round;
    }
    .chart .brush .handle {
      fill: #fff;
      stroke: #000;
      stroke-width: 1.5px;
      stroke-linecap: round;
      stroke-linejoin: round;
      cursor: ew-resize;
    }
  </style>
</head>
<body>
  <svg class=""chart""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;
    const svg = d3.select('.chart')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);
    d3.csv('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
      .then(data => {
        data.forEach(d => {
          d['Adoption Rate'] = +d['Adoption Rate'];
          d.Investment = +d.Investment;
        });
        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Adoption Rate'])])
          .range([0, width]);
        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Investment)])
          .range([height, 0]);
        const xAxis = d3.axisBottom(xScale)
          .ticks(10);
        const yAxis = d3.axisLeft(yScale)
          .ticks(10);
        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(xAxis);
        svg.append('g')
          .call(yAxis);
        const brush = d3.brush()
          .extent([[0, 0], [width, height]])
          .on('brush', brushed);
        svg.append('g')
          .call(brush);
        svg.selectAll('circle')
          .data(data)
          .enter()
          .append('circle')
          .attr('cx', d => xScale(d['Adoption Rate']))
          .attr('cy', d => yScale(d.Investment))
          .attr('r', 5);
        function brushed(event) {
          const selection = event.selection;
          if (selection) {
            svg.selectAll('circle')
              .classed('selected', d => {
                const x = xScale(d['Adoption Rate']);
                const y = yScale(d.Investment);
                return x >= selection[0][0] && x <= selection[1][0] && y <= selection[0][1] && y >= selection[1][1];
              });
          } else {
            svg.selectAll('circle')
              .classed('selected', false);
          }
        }
      });
  </script>
</body>
</html>
```",Correct,697,698
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Adoption Rate and Investment. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot of Adoption Rate vs Investment</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Adoption Rate""] = +d[""Adoption Rate""];
          d.Investment = +d.Investment;
        });

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Adoption Rate""])])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Investment)])
          .range([height, 0]);

        const xAxis = d3.axisBottom(xScale)
          .ticks(10)
          .tickSize(-height);

        const yAxis = d3.axisLeft(yScale)
          .ticks(10)
          .tickSize(-width);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(xAxis);

        svg.append(""g"")
          .call(yAxis);

        svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d[""Adoption Rate""]))
          .attr(""cy"", d => yScale(d.Investment))
          .attr(""r"", 5);

        svg.append(""text"")
          .attr(""transform"", `translate(${width / 2}, ${height + margin.bottom - 5})`)
          .style(""text-anchor"", ""middle"")
          .text(""Adoption Rate"");

        svg.append(""text"")
          .attr(""transform"", `translate(-25, ${height / 2}) rotate(-90)`)
          .style(""text-anchor"", ""middle"")
          .text(""Investment"");

        const zoom = d3.zoom()
          .scaleExtent([1, 10])
          .extent([[-Infinity, -Infinity], [Infinity, Infinity]])
          .on(""zoom"", zoomed);

        svg.call(zoom);

        function zoomed({ transform }) {
          svg.selectAll(""circle"")
            .attr(""cx"", d => transform.applyX(xScale(d[""Adoption Rate""])))
            .attr(""cy"", d => transform.applyY(yScale(d.Investment)));

          svg.selectAll("".axis"")
            .remove();

          const newXAxis = d3.axisBottom(xScale)
            .ticks(10)
            .tickSize(-height / transform.k)
            .scale(transform.rescaleX(xScale));

          const newYAxis = d3.axisLeft(yScale)
            .ticks(10)
            .tickSize(-width / transform.k)
            .scale(transform.rescaleY(yScale));

          svg.append(""g"")
            .attr(""transform"", `translate(0, ${height / transform.k})`)
            .call(newXAxis);

          svg.append(""g"")
            .call(newYAxis);
        }
      });
  </script>
</body>
</html>
```",Initialization Error,698,699
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Adoption Rate and Investment. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Technology Adoption Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .tooltip {
      position: absolute;
      background-color: #f9f9f9;
      border: 1px solid #ccc;
      padding: 5px;
      visibility: hidden;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Adoption Rate""] = +d[""Adoption Rate""];
          d.Investment = +d.Investment;
        });

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Adoption Rate""])])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Investment)])
          .range([height, 0]);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d[""Adoption Rate""]))
          .attr(""cy"", d => yScale(d.Investment))
          .attr(""r"", 5)
          .on(""click"", (event, d) => {
            const url = `https://www.google.com/search?q=${d[""Technology Type""]}`;
            window.open(url, ""_blank"");
          })
          .on(""mouseover"", (event, d) => {
            const tooltip = d3.select(""body"")
              .append(""div"")
              .attr(""class"", ""tooltip"")
              .style(""left"", (event.pageX + 10) + ""px"")
              .style(""top"", (event.pageY - 10) + ""px"")
              .style(""visibility"", ""visible"")
              .html(`Technology Type: ${d[""Technology Type""]}<br>Adoption Rate: ${d[""Adoption Rate""]}<br>Investment: ${d.Investment}`);
          })
          .on(""mouseout"", () => {
            d3.select("".tooltip"").remove();
          });

        svg.append(""text"")
          .attr(""x"", width / 2)
          .attr(""y"", -20)
          .attr(""text-anchor"", ""middle"")
          .text(""Technology Adoption Scatterplot"");

        svg.append(""text"")
          .attr(""x"", -30)
          .attr(""y"", height / 2)
          .attr(""text-anchor"", ""middle"")
          .attr(""transform"", ""rotate(-90)"")
          .text(""Investment"");

        svg.append(""text"")
          .attr(""x"", width / 2)
          .attr(""y"", height + 30)
          .attr(""text-anchor"", ""middle"")
          .text(""Adoption Rate"");
      });
  </script>
</body>
</html>
```",Correct,699,700
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot with query widgets showing the Adoption Rate and Investment of the given dataset. Add a slider to represent the Year.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Technology Adoption Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .slider {
      margin-top: 20px;
    }
  </style>
</head>
<body>
  <div id=""chart""></div>
  <div class=""slider"">
    <input type=""range"" id=""year-slider"" min=""2000"" max=""2010"" value=""2000"">
    <label for=""year-slider"">Year: <span id=""year-label"">2000</span></label>
  </div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Year""] = +d[""Year""];
          d[""Adoption Rate""] = +d[""Adoption Rate""];
          d[""Investment""] = +d[""Investment""];
        });

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Adoption Rate""])])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Investment""])])
          .range([height, 0]);

        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(xAxis);

        svg.append(""g"")
          .call(yAxis);

        svg.append(""text"")
          .attr(""transform"", ""rotate(-90)"")
          .attr(""y"", 6)
          .attr(""dy"", "".71em"")
          .style(""text-anchor"", ""end"")
          .text(""Investment"");

        svg.append(""text"")
          .attr(""y"", height + margin.bottom - 10)
          .attr(""x"", width / 2)
          .attr(""text-anchor"", ""middle"")
          .text(""Adoption Rate"");

        const points = svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d[""Adoption Rate""]))
          .attr(""cy"", d => yScale(d[""Investment""]))
          .attr(""r"", 5);

        d3.select(""#year-slider"")
          .on(""input"", function() {
            const year = +this.value;
            d3.select(""#year-label"").text(year);
            points
              .attr(""opacity"", d => d[""Year""] === year ? 1 : 0.1);
          });
      });
  </script>
</body>
</html>
```",Unexpected Execution Result,700,701
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot showing the Adoption Rate of Cloud Computing. Add animated transitions that connect these points using lines in order.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Adoption Rate of Cloud Computing</title>
  <style>
    /* set the CSS */
    body { 
      font: 12px Arial;
    }
    path { 
      stroke: steelblue;
      stroke-width: 2;
      fill: none;
    }
    .dot {
      fill: steelblue;
      stroke: #fff;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    // set the dimensions and margins of the graph
    var margin = {top: 20, right: 20, bottom: 30, left: 40},
        width = 800 - margin.left - margin.right,
        height = 600 - margin.top - margin.bottom;

    // append the svg object to the body of the page
    var svg = d3.select(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");

    // get the data
    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(function(data) {
      // filter the data for Cloud Computing
      data = data.filter(function(d) {
        return d[""Technology Type""] === ""Cloud Computing"";
      });

      // convert data types
      data.forEach(function(d) {
        d.Year = +d.Year;
        d[""Adoption Rate""] = +d[""Adoption Rate""];
      });

      // sort the data by year
      data.sort(function(a, b) {
        return a.Year - b.Year;
      });

      // set the ranges
      var x = d3.scaleLinear()
        .domain([d3.min(data, function(d) { return d.Year; }), d3.max(data, function(d) { return d.Year; })])
        .range([0, width]);

      var y = d3.scaleLinear()
        .domain([0, d3.max(data, function(d) { return d[""Adoption Rate""]; })])
        .range([height, 0]);

      // add the x Axis
      svg.append(""g"")
        .attr(""transform"", ""translate(0,"" + height + "")"")
        .call(d3.axisBottom(x));

      // add the y Axis
      svg.append(""g"")
        .call(d3.axisLeft(y));

      // add the line
      var line = d3.line()
        .x(function(d) { return x(d.Year); })
        .y(function(d) { return y(d[""Adoption Rate""]); });

      svg.append(""path"")
        .datum(data)
        .attr(""d"", line)
        .attr(""stroke"", ""steelblue"")
        .attr(""stroke-width"", 2)
        .attr(""fill"", ""none"");

      // add the dots
      svg.selectAll(""dot"")
        .data(data)
        .enter().append(""circle"")
        .attr(""class"", ""dot"")
        .attr(""cx"", function(d) { return x(d.Year); })
        .attr(""cy"", function(d) { return y(d[""Adoption Rate""]); })
        .attr(""r"", 5);

      // animation
      var totalLength = svg.select(""path"").node().getTotalLength();
      svg.select(""path"")
        .attr(""stroke-dasharray"", totalLength + "" "" + totalLength)
        .attr(""stroke-dashoffset"", totalLength)
        .transition()
        .duration(4000)
        .attr(""stroke-dashoffset"", 0);
    });
  </script>
</body>
</html>
```",Unexpected Initial Result,701,702
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Adoption Rate of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Technology Adoption Rate</title>
    <style>
        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 1.5px;
        }

        .line:hover {
            stroke-width: 3px;
        }

        .axis path,
        .axis line {
            fill: none;
            stroke: #777;
            stroke-width: 1;
        }

        .axis text {
            font-size: 14px;
        }

        .legend {
            font-size: 14px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 50, right: 50, bottom: 50, left: 50 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"")
            .then(data => {
                data.forEach(d => {
                    d[""Year""] = +d[""Year""];
                    d[""Adoption Rate""] = +d[""Adoption Rate""];
                });

                const years = Array.from(new Set(data.map(d => d[""Year""])));
                const technologyTypes = Array.from(new Set(data.map(d => d[""Technology Type""])));

                const xScale = d3.scalePoint()
                    .domain(years)
                    .range([0, width])
                    .padding(0.5);

                const yScale = d3.scaleLinear()
                    .domain([0, d3.max(data, d => d[""Adoption Rate""])])
                    .range([height, 0]);

                svg.append(""g"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(d3.axisBottom(xScale));

                svg.append(""g"")
                    .call(d3.axisLeft(yScale));

                const lines = svg.selectAll(""line"")
                    .data(technologyTypes)
                    .enter()
                    .append(""g"")
                    .attr(""class"", ""line-group"");

                lines.append(""path"")
                    .datum(d => data.filter(f => f[""Technology Type""] === d))
                    .attr(""class"", ""line"")
                    .attr(""stroke"", (d, i) => d3.schemeCategory10[i])
                    .attr(""d"", d => {
                        return d3.line()
                            .x(e => xScale(e[""Year""]))
                            .y(e => yScale(e[""Adoption Rate""]))(d);
                    })
                    .on(""mouseover"", function() {
                        d3.select(this)
                            .attr(""stroke-width"", 3);
                    })
                    .on(""mouseout"", function() {
                        d3.select(this)
                            .attr(""stroke-width"", 1.5);
                    });

                const legend = svg.selectAll(""legend"")
                    .data(technologyTypes)
                    .enter()
                    .append(""g"")
                    .attr(""class"", ""legend"")
                    .attr(""transform"", (d, i) => `translate(0, ${i * 20})`);

                legend.append(""rect"")
                    .attr(""x"", width - 18)
                    .attr(""y"", 10)
                    .attr(""width"", 18)
                    .attr(""height"", 18)
                    .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

                legend.append(""text"")
                    .attr(""x"", width - 24)
                    .attr(""y"", 22)
                    .attr(""dy"", "".35em"")
                    .style(""text-anchor"", ""end"")
                    .text(d => d);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,702,703
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Adoption Rate for each Technology Type in 2020. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Technology Adoption Rate in 2020</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        
        .chart {
            margin: 20px;
        }
    </style>
</head>
<body>
    <div class=""chart"" id=""chart""></div>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        // Set the dimensions and margins of the graph
        const margin = { top: 20, right: 20, bottom: 30, left: 40 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;

        // Append the svg object to the body of the page
        const svg = d3.select(""#chart"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

        // Load the data
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
            // Filter the data for 2020
            const data2020 = data.filter(d => d[""Year""] == ""2020"");

            // Group the data by Technology Type
            const technologyTypes = Array.from(new Set(data2020.map(d => d[""Technology Type""])));

            // Create a scale for the x-axis
            const xScale = d3.scaleBand()
                .domain(technologyTypes)
                .range([0, width])
                .padding(0.2);

            // Create a scale for the y-axis
            const yScale = d3.scaleLinear()
                .domain([0, d3.max(data2020, d => +d[""Adoption Rate""])])
                .range([height, 0]);

            // Create the x-axis
            const xAxis = d3.axisBottom(xScale);
            svg.append(""g"")
                .attr(""transform"", `translate(0, ${height})`)
                .call(xAxis);

            // Create the y-axis
            const yAxis = d3.axisLeft(yScale);
            svg.append(""g"")
                .call(yAxis);

            // Create the bars
            svg.selectAll(""rect"")
                .data(data2020)
                .enter()
                .append(""rect"")
                .attr(""x"", d => xScale(d[""Technology Type""]))
                .attr(""y"", d => yScale(+d[""Adoption Rate""]))
                .attr(""width"", xScale.bandwidth())
                .attr(""height"", d => height - yScale(+d[""Adoption Rate""]));

            // Add zoom functionality
            const zoom = d3.zoom()
                .scaleExtent([1, 10])
                .extent([[-Infinity, -Infinity], [Infinity, Infinity]])
                .on(""zoom"", zoomed);

            svg.call(zoom);

            function zoomed() {
                svg.selectAll(""rect"")
                    .attr(""transform"", d3.event.transform);
                svg.select("".x-axis"")
                    .attr(""transform"", d3.event.transform);
                svg.select("".y-axis"")
                    .attr(""transform"", d3.event.transform);
            }
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,703,704
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Adoption Rate for each Technology Type in 2020. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Technology Adoption Rate Bar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 800px;
      height: 600px;
      border: 1px solid black;
    }
    .bar {
      fill: steelblue;
    }
    .bar:hover {
      fill: brown;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg class=""chart""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;
    const svg = d3.select(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Year""] = +d[""Year""];
          d[""Adoption Rate""] = +d[""Adoption Rate""];
        });

        const filteredData = data.filter(d => d[""Year""] === 2020);

        const x = d3.scaleBand()
          .domain(filteredData.map(d => d[""Technology Type""]))
          .range([0, width])
          .padding(0.2);

        const y = d3.scaleLinear()
          .domain([0, d3.max(filteredData, d => d[""Adoption Rate""])])
          .range([height, 0]);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(x));

        svg.append(""g"")
          .call(d3.axisLeft(y));

        const bars = svg.selectAll(""rect"")
          .data(filteredData)
          .enter()
          .append(""rect"")
          .attr(""class"", ""bar"")
          .attr(""x"", d => x(d[""Technology Type""]))
          .attr(""y"", d => y(d[""Adoption Rate""]))
          .attr(""width"", x.bandwidth())
          .attr(""height"", d => height - y(d[""Adoption Rate""]));

        let drag = d3.drag()
          .on(""start"", dragstarted)
          .on(""drag"", dragged)
          .on(""end"", dragended);

        bars.call(drag);

        function dragstarted(event, d) {
          d3.select(this).raise();
        }

        function dragged(event, d) {
          const newX = x(d[""Technology Type""]) + event.dx;
          d3.select(this)
            .attr(""x"", newX);
        }

        function dragended(event, d) {
          const newIndex = filteredData.findIndex(item => item[""Technology Type""] === d[""Technology Type""]);
          const oldIndex = filteredData.indexOf(d);
          if (newIndex !== oldIndex) {
            filteredData.splice(newIndex, 0, filteredData.splice(oldIndex, 1)[0]);
            x.domain(filteredData.map(d => d[""Technology Type""]));
            svg.selectAll(""rect"")
              .transition()
              .duration(500)
              .attr(""x"", d => x(d[""Technology Type""]));
            svg.selectAll(""g"")
              .transition()
              .duration(500)
              .call(d3.axisBottom(x));
          }
        }
      });
  </script>
</body>
</html>
```",Unexpected Execution Result,704,705
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Adoption Rate for each Technology Type in 2020. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Adoption Rate.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Technology Adoption Rate Bar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 40px auto;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
    .bar {
      fill: steelblue;
    }
    .bar:hover {
      fill: brown;
    }
    .sort-button {
      position: absolute;
      top: 10px;
      right: 10px;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <button class=""sort-button"" id=""sort-ascending"">Sort Ascending</button>
  <button class=""sort-button"" id=""sort-descending"">Sort Descending</button>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 300 - margin.top - margin.bottom;
    const svg = d3.select("".chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);
    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70e9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
      data.forEach(d => {
        d[""Year""] = +d[""Year""];
        d[""Adoption Rate""] = +d[""Adoption Rate""];
      });
      const filteredData = data.filter(d => d[""Year""] === 2020);
      const x = d3.scaleBand()
        .domain(filteredData.map(d => d[""Technology Type""]))
        .range([0, width])
        .padding(0.2);
      const y = d3.scaleLinear()
        .domain([0, d3.max(filteredData, d => d[""Adoption Rate""])])
        .range([height, 0]);
      svg.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(x));
      svg.append(""g"")
        .call(d3.axisLeft(y));
      const bars = svg.selectAll(""rect"")
        .data(filteredData)
        .enter()
        .append(""rect"")
        .attr(""x"", d => x(d[""Technology Type""]))
        .attr(""y"", d => y(d[""Adoption Rate""]))
        .attr(""width"", x.bandwidth())
        .attr(""height"", d => height - y(d[""Adoption Rate""]));
      d3.select(""#sort-ascending"").on(""click"", () => {
        filteredData.sort((a, b) => a[""Adoption Rate""] - b[""Adoption Rate""]);
        x.domain(filteredData.map(d => d[""Technology Type""]));
        svg.selectAll(""rect"")
          .transition()
          .duration(1000)
          .attr(""x"", d => x(d[""Technology Type""]))
          .attr(""y"", d => y(d[""Adoption Rate""]))
          .attr(""height"", d => height - y(d[""Adoption Rate""]));
        svg.select("".x-axis"")
          .transition()
          .duration(1000)
          .call(d3.axisBottom(x));
      });
      d3.select(""#sort-descending"").on(""click"", () => {
        filteredData.sort((a, b) => b[""Adoption Rate""] - a[""Adoption Rate""]);
        x.domain(filteredData.map(d => d[""Technology Type""]));
        svg.selectAll(""rect"")
          .transition()
          .duration(1000)
          .attr(""x"", d => x(d[""Technology Type""]))
          .attr(""y"", d => y(d[""Adoption Rate""]))
          .attr(""height"", d => height - y(d[""Adoption Rate""]));
        svg.select("".x-axis"")
          .transition()
          .duration(1000)
          .call(d3.axisBottom(x));
      });
    });
  </script>
</body>
</html>
```",Unexpected Initial Result,705,706
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Adoption Rate and Investment. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Adoption Rate vs Investment</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const adoptionRates = csvData.map(row => parseFloat(row[2]));
                const investments = csvData.map(row => parseFloat(row[3]));

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Adoption Rate vs Investment'
                    },
                    tooltip: {
                        trigger: 'item',
                        formatter: function(params) {
                            return `Adoption Rate: ${params.data[0]}%, Investment: ${params.data[1]}`;
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Adoption Rate (%)',
                        axisPointer: {
                            show: true,
                            type: 'line',
                            status: 'hover',
                            lineStyle: {
                                color: 'rgba(0, 0, 0, 0.5)',
                                width: 2,
                                type: 'dashed'
                            },
                            label: {
                                show: true,
                                formatter: function(params) {
                                    return params.value + '%';
                                }
                            }
                        }
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Investment',
                        axisPointer: {
                            show: true,
                            type: 'line',
                            status: 'hover',
                            lineStyle: {
                                color: 'rgba(0, 0, 0, 0.5)',
                                width: 2,
                                type: 'dashed'
                            },
                            label: {
                                show: true,
                                formatter: function(params) {
                                    return params.value;
                                }
                            }
                        }
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: adoptionRates.map((rate, index) => [rate, investments[index]]),
                            symbolSize: 10
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,706,707
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Adoption Rate and Investment. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Adoption Rate vs Investment Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = csvData.map(row => {
                    const columns = row.split(',');
                    return [parseFloat(columns[2]), parseFloat(columns[3])];
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Adoption Rate vs Investment Scatterplot'
                    },
                    tooltip: {
                        trigger: 'item',
                        formatter: function (params) {
                            return `Adoption Rate: ${params.data[0]}<br>Investment: ${params.data[1]}`;
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Adoption Rate'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Investment'
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: chartData,
                            emphasis: {
                                itemStyle: {
                                    shadowBlur: 10,
                                    shadowOffsetX: 0,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            },
                            selectData: true,
                            selectMode: 'multiple',
                            selectItemStyle: {
                                opacity: 0.5
                            },
                            unSelectItemStyle: {
                                opacity: 1
                            }
                        }
                    ],
                    brush: {
                        toolbox: ['rect', 'polygon', 'lineX', 'lineY', 'keep', 'clear'],
                        xAxisIndex: 0,
                        yAxisIndex: 0,
                        brushStyle: {
                            borderWidth: 2,
                            color: 'rgba(120,140,180,0.3)',
                            borderColor: 'rgba(120,140,180,0.8)',
                        },
                        throttleType: 'debounce',
                        throttleDelay: 300,
                        inBrush: {
                            opacity: 1
                        },
                        outOfBrush: {
                            opacity: 0.5
                        }
                    }
                });
            });
    </script>
</body>
</html>
```",Correct,707,708
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Adoption Rate and Investment. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Adoption Rate vs Investment Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const adoptionRates = csvData.map(row => parseFloat(row.split(',')[2]));
                const investments = csvData.map(row => parseFloat(row.split(',')[3]));

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Adoption Rate vs Investment Scatterplot'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'cross'
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Adoption Rate',
                        min: Math.min(...adoptionRates),
                        max: Math.max(...adoptionRates)
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Investment',
                        min: Math.min(...investments),
                        max: Math.max(...investments)
                    },
                    series: [{
                        type: 'scatter',
                        data: adoptionRates.map((rate, index) => [rate, investments[index]])
                    }],
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 100
                        },
                        {
                            start: 0,
                            end: 100
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,708,709
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Adoption Rate and Investment. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Technology Adoption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const chartData = csvData.map(row => ({
                    name: row[1],
                    value: [parseFloat(row[2]), parseFloat(row[3])],
                    tooltip: {
                        formatter: () => `Technology Type: ${row[1]}<br/>Adoption Rate: ${row[2]}<br/>Investment: ${row[3]}`
                    },
                    label: {
                        formatter: row[1]
                    }
                }));

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    tooltip: {
                        trigger: 'item',
                        formatter: (params) => params.data.tooltip.formatter()
                    },
                    series: [{
                        type: 'scatter',
                        data: chartData,
                        symbolSize: 20,
                        itemStyle: {
                            color: '#666'
                        },
                        label: {
                            show: true,
                            formatter: (params) => params.data.label.formatter
                        }
                    }],
                    xAxis: {
                        type: 'value',
                        name: 'Adoption Rate'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Investment'
                    }
                });

                chart.on('click', (params) => {
                    const url = `https://www.google.com/search?q=${params.data.name}`;
                    window.open(url, '_blank');
                });
            });
    </script>
</body>
</html>
```",Correct,709,710
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot with query widgets showing the Adoption Rate and Investment of the given dataset. Add a slider to represent the Year.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Technology Adoption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-gl@2.1.0/dist/echarts-gl.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-stat@1.1.0/dist/echarts-stat.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-wordcloud@2.0.0/dist/echarts-wordcloud.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-liquidfill@2.0.5/dist/echarts-liquidfill.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-3d@1.1.0/dist/echarts-3d.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-3d-2@1.1.0/dist/echarts-3d-2.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-gl@2.1.0/dist/echarts-gl.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js""></script>
    <style>
        #chart {
            width: 800px;
            height: 600px;
            margin: 0 auto;
        }
    </style>
</head>
<body>
    <div id=""chart""></div>
    <div id=""slider""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const years = [...new Set(csvData.map(row => row[0]))];
                const chartData = csvData.map(row => ({ year: row[0], adoptionRate: parseFloat(row[2]), investment: parseFloat(row[3]) }));

                const chart = echarts.init(document.getElementById('chart'));
                const slider = echarts.init(document.getElementById('slider'));

                const option = {
                    xAxis: {
                        type: 'value',
                        name: 'Adoption Rate'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Investment'
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: chartData.filter(row => row.year === years[0]),
                            symbolSize: 10
                        }
                    ],
                    tooltip: {
                        trigger: 'item',
                        formatter: '{b}: {c}'
                    }
                };

                const sliderOption = {
                    type: 'slider',
                    min: Math.min(...years),
                    max: Math.max(...years),
                    value: years[0],
                    orient: 'horizontal',
                    height: 20,
                    bottom: 'bottom',
                    formatter: '{value}',
                    handleSize: '20%',
                    handleStyle: {
                        borderColor: '#5B5B5B',
                        borderWidth: '1',
                        shadowBlur: 2,
                        shadowColor: 'rgba(0, 0, 0, 0.6)',
                        shadowOffsetX: 2,
                        shadowOffsetY: 2
                    },
                    handleIcon: 'path://M306.1,413c0,2.2-1.8,4-4,4H4c-2.2,0-4-1.8-4-4V200h306.1z',
                    handleSize: 20,
                    handleStyle: {
                        borderColor: '#5B5B5B',
                        borderWidth: '1',
                        shadowBlur: 2,
                        shadowColor: 'rgba(0, 0, 0, 0.6)',
                        shadowOffsetX: 2,
                        shadowOffsetY: 2
                    },
                    handleIcon: 'path://M306.1,413c0,2.2-1.8,4-4,4H4c-2.2,0-4-1.8-4-4V200h306.1z',
                    handleSize: 20,
                    data: years.map(year => ({ value: year, label: year }))
                };

                chart.setOption(option);
                slider.setOption(sliderOption);

                slider.on('sliderChanged', params => {
                    chart.setOption({
                        series: [
                            {
                                type: 'scatter',
                                data: chartData.filter(row => row.year === params.value),
                                symbolSize: 10
                            }
                        ]
                    });
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,710,711
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot showing the Adoption Rate of Cloud Computing. Add animated transitions that connect these points using lines in order.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Adoption Rate of Cloud Computing</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = csvData.filter(row => row.split(',')[1] === 'Cloud Computing')
                    .map(row => row.split(','))
                    .map(row => [parseInt(row[0]), parseFloat(row[2])]);

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Adoption Rate of Cloud Computing'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Year'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Adoption Rate'
                    },
                    series: [
                        {
                            type: 'line',
                            data: chartData,
                            animationDuration: 3000,
                            animationDurationUpdate: 3000,
                            animationEasing: 'cubicInOut',
                            animationEasingUpdate: 'cubicInOut'
                        },
                        {
                            type: 'scatter',
                            data: chartData,
                            symbolSize: 10
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,711,712
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Adoption Rate of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Technology Adoption Rate</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const chartData = [];
                const years = [];
                const technologyTypes = [];
                const adoptionRates = {};

                data.split('\n').forEach((row, index) => {
                    if (index === 0) return;
                    const columns = row.split(',');
                    if (!years.includes(columns[0])) years.push(columns[0]);
                    if (!technologyTypes.includes(columns[1])) technologyTypes.push(columns[1]);
                    if (!adoptionRates[columns[1]]) adoptionRates[columns[1]] = [];
                    adoptionRates[columns[1]].push(parseFloat(columns[2]));
                });

                technologyTypes.forEach(type => {
                    chartData.push({
                        name: type,
                        type: 'line',
                        data: adoptionRates[type],
                        emphasis: {
                            focus: 'series'
                        }
                    });
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Technology Adoption Rate'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    legend: {
                        data: technologyTypes
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    toolbox: {
                        feature: {
                            saveAsImage: {}
                        }
                    },
                    xAxis: {
                        type: 'category',
                        boundaryGap: false,
                        data: years
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: chartData
                });
            });
    </script>
</body>
</html>
```",Correct,712,713
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Adoption Rate for each Technology Type in 2020. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Technology Adoption Rate in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [year, technologyType, adoptionRate] = row.split(',');
                    if (year === '2020') {
                        if (!chartData[technologyType]) {
                            chartData[technologyType] = parseFloat(adoptionRate);
                        }
                    }
                });
                const technologyTypes = Object.keys(chartData);
                const adoptionRates = Object.values(chartData);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Technology Adoption Rate in 2020'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    toolbox: {
                        feature: {
                            dataZoom: {
                                yAxisIndex: 'none'
                            },
                            restore: {},
                            saveAsImage: {}
                        }
                    },
                    xAxis: {
                        type: 'category',
                        data: technologyTypes
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            name: 'Adoption Rate',
                            type: 'bar',
                            data: adoptionRates
                        }
                    ]
                });
                chart.on('dataZoom', params => {
                    if (params.batch[0].start !== undefined) {
                        const start = params.batch[0].start;
                        const end = params.batch[0].end;
                        chart.setOption({
                            xAxis: {
                                data: technologyTypes.slice(start, end)
                            },
                            series: [
                                {
                                    data: adoptionRates.slice(start, end)
                                }
                            ]
                        });
                    }
                });
            });
    </script>
</body>
</html>
```",Correct,713,714
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Adoption Rate for each Technology Type in 2020. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Technology Adoption Rate Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [year, techType, adoptionRate] = row.split(',');
                    if (year === '2020') {
                        if (!chartData[techType]) {
                            chartData[techType] = parseFloat(adoptionRate);
                        }
                    }
                });
                const techTypes = Object.keys(chartData);
                const adoptionRates = Object.values(chartData);

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Technology Adoption Rate in 2020'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    xAxis: {
                        type: 'category',
                        data: techTypes,
                        axisLabel: {
                            rotate: 45
                        }
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            data: adoptionRates,
                            type: 'bar',
                            itemStyle: {
                                opacity: 0.8
                            },
                            emphasis: {
                                itemStyle: {
                                    opacity: 1
                                }
                            }
                        }
                    ],
                    dataZoom: [
                        {
                            type: 'inside'
                        },
                        {
                            type: 'slider'
                        }
                    ],
                    graphic: echarts.util.map(techTypes, (techType, index) => ({
                        type: 'text',
                        position: [index * 100, 20],
                        style: {
                            text: techType,
                            fontSize: 14,
                            fill: 'rgba(0, 0, 0, 0.8)'
                        },
                        draggable: true,
                        ondrag: (dx, dy) => {
                            const newX = index * 100 + dx;
                            const newIndex = Math.round(newX / 100);
                            if (newIndex >= 0 && newIndex < techTypes.length) {
                                [techTypes[index], techTypes[newIndex]] = [techTypes[newIndex], techTypes[index]];
                                [adoptionRates[index], adoptionRates[newIndex]] = [adoptionRates[newIndex], adoptionRates[index]];
                                chart.setOption({
                                    xAxis: {
                                        data: techTypes
                                    },
                                    series: [
                                        {
                                            data: adoptionRates
                                        }
                                    ]
                                });
                            }
                        }
                    }))
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,714,715
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Adoption Rate for each Technology Type in 2020. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Adoption Rate.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Technology Adoption Rate</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <select id=""sort-order"">
        <option value=""desc"">Descending</option>
        <option value=""asc"">Ascending</option>
    </select>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const chartData = [];
                const rows = data.split('\n');
                rows.forEach((row, index) => {
                    if (index > 0) {
                        const columns = row.split(',');
                        if (columns[0] === '2020') {
                            chartData.push({
                                technologyType: columns[1],
                                adoptionRate: parseFloat(columns[2])
                            });
                        }
                    }
                });
                chartData.sort((a, b) => b.adoptionRate - a.adoptionRate);
                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    animation: true,
                    xAxis: {
                        type: 'category',
                        data: chartData.map(item => item.technologyType)
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        data: chartData.map(item => item.adoptionRate),
                        type: 'bar'
                    }]
                };
                chart.setOption(option);
                document.getElementById('sort-order').addEventListener('change', () => {
                    const sortOrder = document.getElementById('sort-order').value;
                    if (sortOrder === 'asc') {
                        chartData.sort((a, b) => a.adoptionRate - b.adoptionRate);
                    } else {
                        chartData.sort((a, b) => b.adoptionRate - a.adoptionRate);
                    }
                    chart.setOption({
                        xAxis: {
                            data: chartData.map(item => item.technologyType)
                        },
                        series: [{
                            data: chartData.map(item => item.adoptionRate)
                        }]
                    });
                });
            });
    </script>
</body>
</html>
```",Correct,715,716
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Adoption Rate and Investment. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Adoption Rate vs Investment</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to make the chart more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Adoption Rate"", ""type"": ""quantitative"", ""scale"": {""zero"": false}},
        ""y"": {""field"": ""Investment"", ""type"": ""quantitative"", ""scale"": {""zero"": false}},
        ""tooltip"": [
          {""field"": ""Year"", ""type"": ""nominal""},
          {""field"": ""Technology Type"", ""type"": ""nominal""},
          {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
          {""field"": ""Investment"", ""type"": ""quantitative""},
          {""field"": ""Return on Investment"", ""type"": ""quantitative""},
          {""field"": ""Number of Users"", ""type"": ""quantitative""},
          {""field"": ""Market Share"", ""type"": ""quantitative""},
          {""field"": ""Customer Satisfaction Score"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""axis"": {
          ""labelFontSize"": 16,
          ""titleFontSize"": 16
        },
        ""legend"": {
          ""labelFontSize"": 16,
          ""titleFontSize"": 16
        }
      }
    };

    vegaEmbed(""#vis"", spec, { mode: ""vega-lite"" });
  </script>
</body>
</html>
```",Unexpected Execution Result,716,717
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Adoption Rate and Investment. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Adoption Rate vs Investment Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>

  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Investment"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Year"", ""type"": ""nominal""},
          {""field"": ""Technology Type"", ""type"": ""nominal""},
          {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
          {""field"": ""Investment"", ""type"": ""quantitative""},
          {""field"": ""Return on Investment"", ""type"": ""quantitative""},
          {""field"": ""Number of Users"", ""type"": ""quantitative""},
          {""field"": ""Market Share"", ""type"": ""quantitative""},
          {""field"": ""Customer Satisfaction Score"", ""type"": ""quantitative""}
        ]
      },
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x"", ""y""]}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,717,718
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Adoption Rate and Investment. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Adoption Rate vs Investment Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Investment"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
          {""field"": ""Investment"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""view"": {""continuousWidth"": 400, ""continuousHeight"": 300},
        ""axis"": {""labelFontSize"": 16, ""titleFontSize"": 16},
        ""legend"": {""labelFontSize"": 16, ""titleFontSize"": 16}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Execution Result,718,719
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Adoption Rate and Investment. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Adoption Rate vs Investment</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to our embed */
    #vis {
      width: 800px;
      height: 600px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Investment"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Year"", ""type"": ""nominal""},
          {""field"": ""Technology Type"", ""type"": ""nominal""},
          {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
          {""field"": ""Investment"", ""type"": ""quantitative""},
          {""field"": ""Return on Investment"", ""type"": ""quantitative""},
          {""field"": ""Number of Users"", ""type"": ""quantitative""},
          {""field"": ""Market Share"", ""type"": ""quantitative""},
          {""field"": ""Customer Satisfaction Score"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""view"": {""width"": 800, ""height"": 600}
      }
    };

    const runtime = vega.parse(spec);
    const view = new vega.View(runtime)
      .initialize(""#vis"")
      .hover()
      .run();

    document.addEventListener(""click"", function(event) {
      if (event.target.classList.contains(""mark"")) {
        const year = event.target.__datum__.Year;
        const techType = event.target.__datum__[""Technology Type""];
        const url = `https://www.google.com/search?q=${year}+${techType}`;
        window.open(url, ""_blank"");
      }
    });
  </script>
</body>
</html>
```",Unexpected Initial Result,719,720
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot with query widgets showing the Adoption Rate and Investment of the given dataset. Add a slider to represent the Year.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Adoption Rate vs Investment</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to our embed */
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Investment"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Technology Type"", ""type"": ""nominal""},
        ""tooltip"": [
          {""field"": ""Year"", ""type"": ""nominal""},
          {""field"": ""Technology Type"", ""type"": ""nominal""},
          {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
          {""field"": ""Investment"", ""type"": ""quantitative""}
        ]
      },
      ""transform"": [
        {
          ""filter"": {
            ""selection"": ""brush"",
            ""test"": ""datum.Year >= brush[0][0] && datum.Year <= brush[0][1]""
          }
        }
      ]
    };

    const brushSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Year"", ""type"": ""nominal"", ""axis"": {""title"": ""Year""}},
        ""y"": {""aggregate"": ""count"", ""type"": ""quantitative""},
        ""color"": {""value"": ""#cccccc""}
      },
      ""selection"": {
        ""brush"": {
          ""type"": ""interval"",
          ""encodings"": [""x""],
          ""on"": ""mouseover"",
          ""resolve"": ""global""
        }
      }
    };

    const combinedSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""hconcat"": [
        spec,
        {
          ""width"": 100,
          ""height"": 600,
          ""layer"": [
            brushSpec,
            {
              ""mark"": ""rule"",
              ""encoding"": {
                ""x"": {""field"": ""Year"", ""type"": ""nominal""},
                ""color"": {""value"": ""#666666""}
              }
            }
          ]
        }
      ]
    };

    vegaEmbed(""#vis"", combinedSpec);
  </script>
</body>
</html>
```",Initialization Error,720,721
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot showing the Adoption Rate of Cloud Computing. Add animated transitions that connect these points using lines in order.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Adoption Rate of Cloud Computing</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 800,
      ""height"": 600,
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum['Technology Type'] == 'Cloud Computing'""},
        {""sort"": [""Year""]},
        {""calculate"": ""index"", ""as"": ""id""}
      ],
      ""mark"": {
        ""type"": ""line"",
        ""point"": true,
        ""tooltip"": true
      },
      ""encoding"": {
        ""x"": {""field"": ""Year"", ""type"": ""temporal""},
        ""y"": {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
        ""detail"": {""field"": ""id"", ""type"": ""nominal""},
        ""order"": {""field"": ""id"", ""type"": ""nominal""}
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""labelFontSize"": 14, ""titleFontSize"": 14},
        ""legend"": {""labelFontSize"": 14, ""titleFontSize"": 14}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Initialization Error,721,722
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Adoption Rate of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Adoption Rate Line Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to make the chart more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    // Define the Vega-Lite specification
    var spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": {
        ""type"": ""line"",
        ""point"": true,
        ""tooltip"": true
      },
      ""encoding"": {
        ""x"": {
          ""field"": ""Year"",
          ""type"": ""temporal""
        },
        ""y"": {
          ""field"": ""Adoption Rate"",
          ""type"": ""quantitative""
        },
        ""color"": {
          ""field"": ""Technology Type"",
          ""type"": ""nominal""
        }
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""scale"": {
          ""range"": [""#4f81bd"", ""#c0504e"", ""#9bbb59"", ""#ffcc00"", ""#8064a2"", ""#4bacc6"", ""#f79646"", ""#8b9467"", ""#6a3d9a"", ""#e4d6f5""]
        }
      },
      ""selection"": {
        ""highlight"": {""type"": ""single"", ""empty"": ""none"", ""on"": ""mouseover"", ""fields"": [""Technology Type""], ""nearest"": true}
      },
      ""transform"": [
        { ""filter"": ""datum['Technology Type'] !== null"" }
      ]
    };

    // Embed the chart in the #vis div
    vegaEmbed(""#vis"", spec, { ""actions"": false });
  </script>
</body>
</html>
```",Unexpected Execution Result,722,723
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Adoption Rate for each Technology Type in 2020. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Adoption Rate Bar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2020""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Technology Type"", ""type"": ""nominal""},
        ""y"": {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Technology Type"", ""type"": ""nominal""},
          {""field"": ""Adoption Rate"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""view"": {""continuousWidth"": 400, ""continuousHeight"": 300},
        ""axis"": {""labelFontSize"": 14, ""titleFontSize"": 14},
        ""legend"": {""labelFontSize"": 14, ""titleFontSize"": 14}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Execution Result,723,724
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Adoption Rate for each Technology Type in 2020. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Adoption Rate Bar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to our chart */
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2020""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Technology Type"", ""type"": ""nominal"", ""sort"": ""-y""},
        ""y"": {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Technology Type"", ""type"": ""nominal""},
          {""field"": ""Adoption Rate"", ""type"": ""quantitative"", ""format"": "".2f""}
        ]
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""domainWidth"": 1}
      },
      ""interaction"": {
        ""drag"": {""type"": ""rect"", ""fields"": [""Technology Type""]},
        ""sort"": {""type"": ""single"", ""fields"": [""Adoption Rate""]}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Execution Result,724,725
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Adoption Rate for each Technology Type in 2020. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Adoption Rate.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Adoption Rate Bar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to our chart */
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <select id=""sort-order"">
    <option value=""descending"">Descending</option>
    <option value=""ascending"">Ascending</option>
  </select>

  <script>
    const opts = {
      ""mode"": ""vega-lite"",
      ""renderer"": ""canvas"",
    };

    vegaEmbed('#vis', {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2020""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Technology Type"", ""type"": ""nominal"", ""axis"": {""title"": ""Technology Type""}},
        ""y"": {""field"": ""Adoption Rate"", ""type"": ""quantitative"", ""axis"": {""title"": ""Adoption Rate""}},
        ""color"": {""field"": ""Technology Type"", ""type"": ""nominal""}
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""labelFontSize"": 14, ""titleFontSize"": 16}
      }
    }, opts).then(function(result) {
      // Initialize the sort order
      let sortOrder = 'descending';

      // Add event listener to the select element
      document.getElementById('sort-order').addEventListener('change', function() {
        sortOrder = this.value;
        updateSortOrder();
      });

      // Update the sort order
      function updateSortOrder() {
        result.view.signal('sortOrder', sortOrder).run();
      }

      // Add a signal for the sort order
      result.view.addSignalListener('sortOrder', function(name, value) {
        result.view.signal('sort', value === 'descending' ? 'Adoption Rate' : '-Adoption Rate').run();
      });
    });
  </script>
</body>
</html>
```",Initialization Error,725,726
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Adoption Rate and Investment, and a Bar Chart on the right that displays Technology Type versus Adoption Rate.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Technology Adoption Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: inline-block;
      vertical-align: top;
    }
    .scatterplot {
      width: 400px;
      height: 400px;
      margin: 20px;
    }
    .barchart {
      width: 400px;
      height: 400px;
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart scatterplot"" id=""scatterplot""></div>
  <div class=""chart barchart"" id=""barchart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 400 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const svgScatterplot = d3.select(""#scatterplot"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const svgBarchart = d3.select(""#barchart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70e9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
      data.forEach(d => {
        d[""Adoption Rate""] = +d[""Adoption Rate""];
        d.Investment = +d.Investment;
      });

      const xScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Adoption Rate""])])
        .range([0, width]);

      const yScaleScatterplot = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.Investment)])
        .range([height, 0]);

      svgScatterplot.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScaleScatterplot(d[""Adoption Rate""]))
        .attr(""cy"", d => yScaleScatterplot(d.Investment))
        .attr(""r"", 5);

      svgScatterplot.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleScatterplot));

      svgScatterplot.append(""g"")
        .call(d3.axisLeft(yScaleScatterplot));

      const technologyTypes = [...new Set(data.map(d => d[""Technology Type""]))];

      const xScaleBarchart = d3.scaleBand()
        .domain(technologyTypes)
        .range([0, width])
        .padding(0.2);

      const yScaleBarchart = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Adoption Rate""])])
        .range([height, 0]);

      svgBarchart.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", d => xScaleBarchart(d[""Technology Type""]))
        .attr(""y"", d => yScaleBarchart(d[""Adoption Rate""]))
        .attr(""width"", xScaleBarchart.bandwidth())
        .attr(""height"", d => height - yScaleBarchart(d[""Adoption Rate""]));

      svgBarchart.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleBarchart));

      svgBarchart.append(""g"")
        .call(d3.axisLeft(yScaleBarchart));
    });
  </script>
</body>
</html>
```",Initialization Error,726,727
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Adoption Rate and Investment, and a Bar Chart on the right that displays Technology Type versus Adoption Rate. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Technology Adoption Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: inline-block;
      vertical-align: top;
    }
    .scatterplot {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
    .barchart {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart scatterplot"" id=""scatterplot""></div>
  <div class=""chart barchart"" id=""barchart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const xScaleScatter = d3.scaleLinear().range([0, width]);
    const yScaleScatter = d3.scaleLinear().range([height, 0]);
    const xScaleBar = d3.scaleBand().range([0, width]).padding(0.2);
    const yScaleBar = d3.scaleLinear().range([height, 0]);

    const svgScatter = d3.select(""#scatterplot"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const svgBar = d3.select(""#barchart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
      data.forEach(d => {
        d[""Adoption Rate""] = +d[""Adoption Rate""];
        d.Investment = +d.Investment;
      });

      const adoptionRateDomain = d3.extent(data, d => d[""Adoption Rate""]);
      const investmentDomain = d3.extent(data, d => d.Investment);
      const technologyTypes = Array.from(new Set(data.map(d => d[""Technology Type""])));

      xScaleScatter.domain(adoptionRateDomain);
      yScaleScatter.domain(investmentDomain);
      xScaleBar.domain(technologyTypes);
      yScaleBar.domain([0, d3.max(data, d => d[""Adoption Rate""])]);

      svgScatter.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleScatter));

      svgScatter.append(""g"")
        .call(d3.axisLeft(yScaleScatter));

      svgBar.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleBar));

      svgBar.append(""g"")
        .call(d3.axisLeft(yScaleBar));

      const brush = d3.brush()
        .extent([[0, 0], [width, height]])
        .on(""brush"", brushed);

      svgScatter.append(""g"")
        .attr(""class"", ""brush"")
        .call(brush);

      const scatterplotCircles = svgScatter.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScaleScatter(d[""Adoption Rate""]))
        .attr(""cy"", d => yScaleScatter(d.Investment))
        .attr(""r"", 5);

      const barRects = svgBar.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", d => xScaleBar(d[""Technology Type""]))
        .attr(""y"", d => yScaleBar(d[""Adoption Rate""]))
        .attr(""width"", xScaleBar.bandwidth())
        .attr(""height"", d => height - yScaleBar(d[""Adoption Rate""]));

      function brushed(event) {
        const selection = event.selection;
        if (selection) {
          const [x0, y0, x1, y1] = selection;
          scatterplotCircles.classed(""selected"", d => {
            const x = xScaleScatter(d[""Adoption Rate""]);
            const y = yScaleScatter(d.Investment);
            return x >= x0 && x <= x1 && y >= y0 && y <= y1;
          });
          barRects.classed(""selected"", d => {
            const x = xScaleScatter(d[""Adoption Rate""]);
            const y = yScaleScatter(d.Investment);
            return x >= x0 && x <= x1 && y >= y0 && y <= y1;
          });
        } else {
          scatterplotCircles.classed(""selected"", false);
          barRects.classed(""selected"", false);
        }
      }
    });
  </script>
</body>
</html>
```",Unexpected Execution Result,727,728
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Adoption Rate , while the pie chart represents the distribution of Investment.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Technology Adoption Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: block;
    }
    .line-chart {
      width: 800px;
      height: 400px;
      margin: 20px auto;
    }
    .pie-chart {
      width: 800px;
      height: 400px;
      margin: 20px auto;
    }
  </style>
</head>
<body>
  <div class=""chart line-chart""></div>
  <div class=""chart pie-chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const lineChart = d3.select('.line-chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    const pieChart = d3.select('.pie-chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${width / 2 + margin.left}, ${height / 2 + margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/8729038f70e9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
      .then(data => {
        data.forEach(d => {
          d['Year'] = +d['Year'];
          d['Adoption Rate'] = +d['Adoption Rate'];
          d['Investment'] = +d['Investment'];
        });

        const xScale = d3.scaleLinear()
          .domain(d3.extent(data, d => d['Year']))
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Adoption Rate'])])
          .range([height, 0]);

        lineChart.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        lineChart.append('g')
          .call(d3.axisLeft(yScale));

        lineChart.append('path')
          .datum(data)
          .attr('fill', 'none')
          .attr('stroke', 'steelblue')
          .attr('stroke-width', 1.5)
          .attr('d', d3.line()
            .x(d => xScale(d['Year']))
            .y(d => yScale(d['Adoption Rate'])));

        const pie = d3.pie()
          .value(d => d['Investment']);

        const arc = d3.arc()
          .outerRadius(width / 2 - 20)
          .innerRadius(0);

        const arcs = pieChart.selectAll('arc')
          .data(pie(data))
          .enter()
          .append('path')
          .attr('d', arc)
          .attr('fill', (d, i) => d3.schemeCategory10[i]);
      });
  </script>
</body>
</html>
```",Initialization Error,728,729
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Adoption Rate , while the pie chart represents the distribution of Investment. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Investment for the selected group.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Technology Adoption Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: block;
    }
    .line-chart {
      width: 800px;
      height: 400px;
      margin: 20px auto;
    }
    .pie-chart {
      width: 800px;
      height: 400px;
      margin: 20px auto;
    }
  </style>
</head>
<body>
  <div class=""chart line-chart""></div>
  <div class=""chart pie-chart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const lineChart = d3.select('.line-chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    const pieChart = d3.select('.pie-chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left + width / 2}, ${margin.top + height / 2})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
      .then(data => {
        data.forEach(d => {
          d['Year'] = +d['Year'];
          d['Adoption Rate'] = +d['Adoption Rate'];
          d['Investment'] = +d['Investment'];
        });

        const xScale = d3.scaleLinear()
          .domain(d3.extent(data, d => d['Year']))
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Adoption Rate'])])
          .range([height, 0]);

        const line = d3.line()
          .x(d => xScale(d['Year']))
          .y(d => yScale(d['Adoption Rate']));

        lineChart.append('path')
          .datum(data)
          .attr('fill', 'none')
          .attr('stroke', 'steelblue')
          .attr('stroke-width', 1.5)
          .attr('d', line);

        lineChart.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        lineChart.append('g')
          .call(d3.axisLeft(yScale));

        const brush = d3.brushX()
          .extent([[0, 0], [width, height]])
          .on('brush', brushed);

        lineChart.append('g')
          .attr('class', 'brush')
          .call(brush);

        function brushed({ selection }) {
          if (selection) {
            const [x0, x1] = selection;
            const filteredData = data.filter(d => xScale(d['Year']) >= x0 && xScale(d['Year']) <= x1);
            updatePieChart(filteredData);
          } else {
            updatePieChart(data);
          }
        }

        function updatePieChart(data) {
          const investmentData = d3.rollup(data, v => d3.sum(v, d => d['Investment']), d => d['Technology Type']);

          const pie = d3.pie()
            .value(d => d[1]);

          const arc = d3.arc()
            .outerRadius(width / 2 - 20)
            .innerRadius(0);

          pieChart.selectAll('path')
            .remove();

          pieChart.selectAll('path')
            .data(pie(investmentData))
            .enter()
            .append('path')
            .attr('d', arc)
            .attr('fill', (d, i) => d3.schemeCategory10[i]);
        }

        updatePieChart(data);
      });
  </script>
</body>
</html>
```",Correct,729,730
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Adoption Rate, Investment, Number of Users, and Market Share. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot Matrix</title>
  <style>
    .brush {
      fill: steelblue;
      fill-opacity: .3;
    }
    .brush .extent {
      fill-opacity: .3;
    }
    .axis {
      font-size: 12px;
    }
    .axis path, .axis line {
      fill: none;
      stroke: #000;
      shape-rendering: crispEdges;
    }
  </style>
</head>
<body>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 100, right: 100, bottom: 100, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 800 - margin.top - margin.bottom;
    const dimensions = [""Adoption Rate"", ""Investment"", ""Number of Users"", ""Market Share""];
    const size = 200;

    const svg = d3.select(""body"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"")
      .then(data => {
        data.forEach(d => {
          dimensions.forEach(dim => {
            d[dim] = +d[dim];
          });
        });

        const x = dimensions.map(d => d3.scaleLinear()
          .domain(d3.extent(data, p => p[d]))
          .range([0, size]));

        const y = dimensions.map(d => d3.scaleLinear()
          .domain(d3.extent(data, p => p[d]))
          .range([size, 0]));

        const brush = d3.brush()
          .extent([[0, 0], [size, size]])
          .on(""start"", brushstart)
          .on(""brush"", brushmove)
          .on(""end"", brushend);

        const g = svg.selectAll("".g"")
          .data(cross(dimensions, dimensions))
          .enter()
          .append(""g"")
          .attr(""transform"", (d, i) => `translate(${(i % 4) * (size + 20)}, ${(Math.floor(i / 4)) * (size + 20)})`);

        g.append(""rect"")
          .attr(""class"", ""brush"")
          .attr(""x"", 0)
          .attr(""y"", 0)
          .attr(""width"", size)
          .attr(""height"", size);

        g.append(""g"")
          .attr(""class"", ""x axis"")
          .attr(""transform"", `translate(0, ${size})`)
          .call(d3.axisBottom(x[dimensions.indexOf(d.x)]));

        g.append(""g"")
          .attr(""class"", ""y axis"")
          .call(d3.axisLeft(y[dimensions.indexOf(d.y)]));

        g.append(""g"")
          .attr(""class"", ""points"")
          .selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => x[dimensions.indexOf(d.x)](d[d.x]))
          .attr(""cy"", d => y[dimensions.indexOf(d.y)](d[d.y]))
          .attr(""r"", 3);

        g.append(""g"")
          .attr(""class"", ""brush"")
          .call(brush);

        function brushstart() {
          svg.selectAll(""circle"").classed(""hidden"", true);
        }

        function brushmove() {
          const s = d3.event.selection;
          svg.selectAll(""circle"")
            .classed(""hidden"", d => {
              const xIndex = dimensions.indexOf(d.x);
              const yIndex = dimensions.indexOf(d.y);
              return s === null || !s[0] || !s[1] || x[xIndex](d[d.x]) < s[0][0] || x[xIndex](d[d.x]) > s[1][0] || y[yIndex](d[d.y]) < s[0][1] || y[yIndex](d[d.y]) > s[1][1];
            });
        }

        function brushend() {
          if (!d3.event.selection) {
            svg.selectAll(""circle"").classed(""hidden"", false);
          }
        }

        function cross(a, b) {
          const c = [];
          for (let i = 0; i < a.length; i++) {
            for (let j = 0; j < b.length; j++) {
              c.push({ x: a[i], y: b[j] });
            }
          }
          return c;
        }
      });
  </script>
</body>
</html>
```",Initialization Error,730,731
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a brushable Scatterplot that visualizes the relationship between Adoption Rate and Investment. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Brushable Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
    .brush .extent {
      stroke: #fff;
      fill-opacity: .125;
      shape-rendering: crispEdges;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <table id=""table""></table>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 200, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const table = d3.select(""#table"");

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
      data.forEach(d => {
        d[""Adoption Rate""] = +d[""Adoption Rate""];
        d.Investment = +d.Investment;
      });

      const x = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Adoption Rate""])])
        .range([0, width]);

      const y = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.Investment)])
        .range([height, 0]);

      const xAxis = d3.axisBottom(x)
        .ticks(10)
        .tickSize(-height)
        .tickFormat(d3.format("".0f""));

      const yAxis = d3.axisLeft(y)
        .ticks(10)
        .tickSize(-width)
        .tickFormat(d3.format("".0f""));

      svg.append(""g"")
        .attr(""class"", ""x axis"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(xAxis)
        .append(""text"")
        .attr(""x"", width / 2)
        .attr(""y"", 30)
        .style(""text-anchor"", ""middle"")
        .text(""Adoption Rate"");

      svg.append(""g"")
        .attr(""class"", ""y axis"")
        .call(yAxis)
        .append(""text"")
        .attr(""transform"", ""rotate(-90)"")
        .attr(""x"", -height / 2)
        .attr(""y"", -30)
        .style(""text-anchor"", ""middle"")
        .text(""Investment"");

      const brush = d3.brush()
        .extent([[0, 0], [width, height]])
        .on(""brush end"", brushed);

      svg.append(""g"")
        .attr(""class"", ""brush"")
        .call(brush);

      svg.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => x(d[""Adoption Rate""]))
        .attr(""cy"", d => y(d.Investment))
        .attr(""r"", 5)
        .attr(""fill"", ""steelblue"");

      function brushed() {
        const selection = d3.event.selection;
        const selectedData = data.filter(d => {
          const xValue = x(d[""Adoption Rate""]);
          const yValue = y(d.Investment);
          return selection[0][0] <= xValue && xValue <= selection[1][0]
            && selection[0][1] <= yValue && yValue <= selection[1][1];
        });

        table.selectAll(""tr"").remove();

        const rows = table.selectAll(""tr"")
          .data(selectedData.slice(0, 20))
          .enter()
          .append(""tr"");

        const columns = [""Year"", ""Technology Type"", ""Adoption Rate"", ""Investment"", ""Return on Investment"", ""Number of Users"", ""Market Share"", ""Customer Satisfaction Score""];

        rows.selectAll(""td"")
          .data(d => columns.map(key => d[key]))
          .enter()
          .append(""td"")
          .text(d => d);
      }
    });
  </script>
</body>
</html>
```",Unexpected Initial Result,731,732
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a horizontal Bar Chart that shows Technology Type and Adoption Rate, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Technology Adoption Rate</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      position: relative;
      display: inline-block;
    }
    .minimap {
      position: absolute;
      top: 0;
      right: 0;
      width: 100px;
      height: 400px;
      background-color: #f0f0f0;
      border: 1px solid #ccc;
    }
    .minimap rect {
      fill: #ccc;
    }
  </style>
</head>
<body>
  <div class=""chart"" style=""width: 800px; height: 400px;""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 120, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const svg = d3.select("".chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const minimap = d3.select("".chart"")
      .append(""div"")
      .attr(""class"", ""minimap"")
      .append(""svg"")
      .attr(""width"", 100)
      .attr(""height"", height)
      .append(""g"")
      .attr(""transform"", `translate(10, 0)`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
      data.forEach(d => {
        d[""Adoption Rate""] = +d[""Adoption Rate""];
      });

      const x = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Adoption Rate""])])
        .range([0, width]);

      const y = d3.scaleBand()
        .domain(data.map(d => d[""Technology Type""]))
        .range([0, height])
        .padding(0.2);

      svg.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", 0)
        .attr(""y"", d => y(d[""Technology Type""]))
        .attr(""width"", d => x(d[""Adoption Rate""]))
        .attr(""height"", y.bandwidth());

      minimap.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", 0)
        .attr(""y"", d => y(d[""Technology Type""]))
        .attr(""width"", d => x(d[""Adoption Rate""]) / 8)
        .attr(""height"", y.bandwidth());

      svg.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(x));

      svg.append(""g"")
        .call(d3.axisLeft(y));
    });
  </script>
</body>
</html>
```",Unexpected Initial Result,732,733
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Adoption Rate and Investment, and a Bar Chart on the right that displays Technology Type versus Adoption Rate.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Technology Adoption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px; display: flex; justify-content: space-around;"">
        <div id=""scatterplot"" style=""width: 45%; height: 100%;""></div>
        <div id=""barchart"" style=""width: 45%; height: 100%;""></div>
    </div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const scatterplotData = csvData.map(row => [parseFloat(row[2]), parseFloat(row[3])]);
                const barchartData = {};
                csvData.forEach(row => {
                    if (!barchartData[row[1]]) {
                        barchartData[row[1]] = [];
                    }
                    barchartData[row[1]].push(parseFloat(row[2]));
                });
                Object.keys(barchartData).forEach(key => {
                    barchartData[key] = barchartData[key].reduce((a, b) => a + b, 0) / barchartData[key].length;
                });

                const scatterplotChart = echarts.init(document.getElementById('scatterplot'));
                scatterplotChart.setOption({
                    title: {
                        text: 'Adoption Rate vs Investment'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Adoption Rate'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Investment'
                    },
                    series: [{
                        type: 'scatter',
                        data: scatterplotData
                    }]
                });

                const barchartChart = echarts.init(document.getElementById('barchart'));
                barchartChart.setOption({
                    title: {
                        text: 'Technology Type vs Adoption Rate'
                    },
                    xAxis: {
                        type: 'category',
                        data: Object.keys(barchartData)
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Adoption Rate'
                    },
                    series: [{
                        type: 'bar',
                        data: Object.values(barchartData)
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,733,734
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Adoption Rate and Investment, and a Bar Chart on the right that displays Technology Type versus Adoption Rate. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Technology Adoption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <style>
        #chart1, #chart2 {
            width: 45%;
            height: 600px;
            display: inline-block;
        }
    </style>
</head>
<body>
    <div id=""chart1""></div>
    <div id=""chart2""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const chart1Data = [];
                const chart2Data = {};
                csvData.forEach(row => {
                    const [year, techType, adoptionRate, investment] = row;
                    chart1Data.push([parseFloat(adoptionRate), parseFloat(investment)]);
                    if (!chart2Data[techType]) {
                        chart2Data[techType] = [];
                    }
                    chart2Data[techType].push(parseFloat(adoptionRate));
                });
                const chart1 = echarts.init(document.getElementById('chart1'));
                const chart2 = echarts.init(document.getElementById('chart2'));
                const option1 = {
                    title: {
                        text: 'Adoption Rate vs Investment'
                    },
                    xAxis: {
                        name: 'Adoption Rate'
                    },
                    yAxis: {
                        name: 'Investment'
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: chart1Data,
                            emphasis: {
                                itemStyle: {
                                    shadowBlur: 10,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            }
                        }
                    ],
                    brush: {
                        toolbox: ['rect', 'polygon', 'clear'],
                        xAxisIndex: 0
                    }
                };
                const option2 = {
                    title: {
                        text: 'Technology Type vs Adoption Rate'
                    },
                    xAxis: {
                        type: 'category',
                        data: Object.keys(chart2Data)
                    },
                    yAxis: {
                        name: 'Adoption Rate'
                    },
                    series: [
                        {
                            type: 'bar',
                            data: Object.values(chart2Data).map(arr => arr.reduce((a, b) => a + b, 0) / arr.length)
                        }
                    ]
                };
                chart1.setOption(option1);
                chart2.setOption(option2);
                chart1.on('brushSelected', params => {
                    const selectedData = params.batch[0].areas[0].data;
                    const selectedTechTypes = selectedData.map(point => {
                        const adoptionRate = point[0];
                        const investment = point[1];
                        const techType = Object.keys(chart2Data).find(key => {
                            const rates = chart2Data[key];
                            return rates.some(rate => rate >= adoptionRate - 0.1 && rate <= adoptionRate + 0.1);
                        });
                        return techType;
                    });
                    const option2Update = {
                        series: [
                            {
                                type: 'bar',
                                data: Object.keys(chart2Data).map(key => {
                                    if (selectedTechTypes.includes(key)) {
                                        return {
                                            value: Object.values(chart2Data).find(val => val[0] === chart2Data[key][0])[0],
                                            itemStyle: {
                                                color: 'red'
                                            }
                                        };
                                    } else {
                                        return Object.values(chart2Data).find(val => val[0] === chart2Data[key][0])[0];
                                    }
                                })
                            }
                        ]
                    };
                    chart2.setOption(option2Update);
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,734,735
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Adoption Rate , while the pie chart represents the distribution of Investment.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Technology Adoption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const adoptionRateData = [];
                const investmentData = [];
                const technologyTypeData = [];

                csvData.forEach(row => {
                    const columns = row.split(',');
                    adoptionRateData.push(parseFloat(columns[2]));
                    investmentData.push(parseFloat(columns[3]));
                    technologyTypeData.push(columns[1]);
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    grid: {
                        top: '10%',
                        bottom: '50%'
                    },
                    xAxis: {
                        type: 'category',
                        data: technologyTypeData
                    },
                    yAxis: [
                        {
                            type: 'value',
                            name: 'Adoption Rate',
                            min: 0,
                            max: 100,
                            position: 'left',
                            axisLine: {
                                lineStyle: {
                                    color: '#999'
                                }
                            },
                            axisLabel: {
                                formatter: '{value} %'
                            }
                        }
                    ],
                    series: [
                        {
                            name: 'Adoption Rate',
                            type: 'line',
                            data: adoptionRateData,
                            yAxisIndex: 0
                        }
                    ]
                });

                const pieChart = echarts.init(document.getElementById('chart'));
                pieChart.setOption({
                    grid: {
                        top: '60%',
                        bottom: '10%'
                    },
                    series: [
                        {
                            name: 'Investment',
                            type: 'pie',
                            radius: '60%',
                            center: ['50%', '75%'],
                            data: technologyTypeData.map((type, index) => ({
                                value: investmentData[index],
                                name: type
                            })),
                            label: {
                                formatter: '{b}: {c} ({d}%)'
                            }
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,735,736
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Adoption Rate , while the pie chart represents the distribution of Investment. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Investment for the selected group.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Technology Adoption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <style>
        #chart {
            width: 800px;
            height: 600px;
            border: 1px solid #ccc;
            padding: 10px;
        }
    </style>
</head>
<body>
    <div id=""chart""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const years = csvData.map(row => row[0]);
                const adoptionRates = csvData.map(row => parseFloat(row[2]));
                const investments = csvData.map(row => parseFloat(row[3]));

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    grid: [
                        {
                            top: '10%',
                            left: '10%',
                            right: '10%',
                            height: '40%'
                        },
                        {
                            top: '60%',
                            left: '10%',
                            right: '10%',
                            height: '30%'
                        }
                    ],
                    dataZoom: [
                        {
                            type: 'inside',
                            xAxisIndex: 0,
                            start: 0,
                            end: 100
                        }
                    ],
                    xAxis: [
                        {
                            gridIndex: 0,
                            type: 'category',
                            data: years
                        },
                        {
                            gridIndex: 1,
                            type: 'category',
                            data: years
                        }
                    ],
                    yAxis: [
                        {
                            gridIndex: 0,
                            type: 'value'
                        },
                        {
                            gridIndex: 1,
                            type: 'value'
                        }
                    ],
                    series: [
                        {
                            name: 'Adoption Rate',
                            type: 'line',
                            xAxisIndex: 0,
                            yAxisIndex: 0,
                            data: adoptionRates,
                            sampling: 'lttb',
                            itemStyle: {
                                color: '#007bff'
                            }
                        },
                        {
                            name: 'Investment',
                            type: 'pie',
                            xAxisIndex: 1,
                            yAxisIndex: 1,
                            radius: ['40%', '60%'],
                            center: ['50%', '50%'],
                            data: investments.map((value, index) => ({ value, name: years[index] })),
                            itemStyle: {
                                borderColor: '#fff',
                                borderWidth: 1
                            }
                        }
                    ]
                };

                chart.setOption(option);

                chart.on('brushSelected', params => {
                    const selectedData = params.batch[0].selected[0].data;
                    const startIndex = selectedData[0].dataIndex[0];
                    const endIndex = selectedData[selectedData.length - 1].dataIndex[0];
                    const selectedInvestments = investments.slice(startIndex, endIndex + 1);
                    const selectedYears = years.slice(startIndex, endIndex + 1);

                    chart.setOption({
                        series: [
                            {
                                name: 'Investment',
                                type: 'pie',
                                data: selectedInvestments.map((value, index) => ({ value, name: selectedYears[index] }))
                            }
                        ]
                    });
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,736,737
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Adoption Rate, Investment, Number of Users, and Market Share. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/papaparse@5.3.0/dist/papaparse.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => Papa.parse(data, { header: true }))
            .then(result => {
                const adoptionRate = result.data.map(item => item['Adoption Rate']);
                const investment = result.data.map(item => item['Investment']);
                const numberOfUsers = result.data.map(item => item['Number of Users']);
                const marketShare = result.data.map(item => item['Market Share']);

                const series = [
                    {
                        type: 'scatter',
                        name: 'Adoption Rate vs Investment',
                        data: adoptionRate.map((item, index) => [item, investment[index]]),
                        x: 'Adoption Rate',
                        y: 'Investment',
                        id: 'adoptionRateVsInvestment'
                    },
                    {
                        type: 'scatter',
                        name: 'Adoption Rate vs Number of Users',
                        data: adoptionRate.map((item, index) => [item, numberOfUsers[index]]),
                        x: 'Adoption Rate',
                        y: 'Number of Users',
                        id: 'adoptionRateVsNumberOfUsers'
                    },
                    {
                        type: 'scatter',
                        name: 'Adoption Rate vs Market Share',
                        data: adoptionRate.map((item, index) => [item, marketShare[index]]),
                        x: 'Adoption Rate',
                        y: 'Market Share',
                        id: 'adoptionRateVsMarketShare'
                    },
                    {
                        type: 'scatter',
                        name: 'Investment vs Number of Users',
                        data: investment.map((item, index) => [item, numberOfUsers[index]]),
                        x: 'Investment',
                        y: 'Number of Users',
                        id: 'investmentVsNumberOfUsers'
                    },
                    {
                        type: 'scatter',
                        name: 'Investment vs Market Share',
                        data: investment.map((item, index) => [item, marketShare[index]]),
                        x: 'Investment',
                        y: 'Market Share',
                        id: 'investmentVsMarketShare'
                    },
                    {
                        type: 'scatter',
                        name: 'Number of Users vs Market Share',
                        data: numberOfUsers.map((item, index) => [item, marketShare[index]]),
                        x: 'Number of Users',
                        y: 'Market Share',
                        id: 'numberOfUsersVsMarketShare'
                    }
                ];

                const option = {
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'cross'
                        }
                    },
                    xAxis: [
                        { type: 'value', name: 'Adoption Rate', id: 'adoptionRate' },
                        { type: 'value', name: 'Investment', id: 'investment' },
                        { type: 'value', name: 'Number of Users', id: 'numberOfUsers' },
                        { type: 'value', name: 'Market Share', id: 'marketShare' }
                    ],
                    yAxis: [
                        { type: 'value', name: 'Investment', id: 'investment' },
                        { type: 'value', name: 'Number of Users', id: 'numberOfUsers' },
                        { type: 'value', name: 'Market Share', id: 'marketShare' },
                        { type: 'value', name: 'Adoption Rate', id: 'adoptionRate' }
                    ],
                    series: series,
                    brush: {
                        toolbox: ['rect', 'polygon', 'clear'],
                        xAxisIndex: [0, 2],
                        yAxisIndex: [0, 2],
                        brushLink: series.map(item => item.id),
                        outOfBrush: {
                            colorAlpha: 0.1
                        },
                        throttleType: 'debounce',
                        throttleDelay: 300
                    }
                };

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Initialization Error,737,738
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a brushable Scatterplot that visualizes the relationship between Adoption Rate and Investment. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Adoption Rate vs Investment</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <div id=""table"" style=""width: 200px; height: 600px; overflow-y: auto; border: 1px solid #ccc; padding: 10px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const chartData = csvData.map(row => [parseFloat(row[2]), parseFloat(row[3])]);

                const chart = echarts.init(document.getElementById('chart'));
                const table = document.getElementById('table');

                chart.setOption({
                    tooltip: {},
                    xAxis: {
                        type: 'value',
                        name: 'Adoption Rate'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Investment'
                    },
                    series: [{
                        type: 'scatter',
                        data: chartData,
                        symbolSize: 10,
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        },
                        brush: {
                            type: 'rect',
                            xAxisIndex: 0,
                            yAxisIndex: 0,
                            brushStyle: {
                                borderWidth: 1,
                                color: 'rgba(0,0,0,0.2)'
                            },
                            throttleType: 'fixRate',
                            throttleDelay: 100
                        }
                    }]
                });

                chart.on('brushSelected', params => {
                    const selectedData = params.batch[0].areas[0].data;
                    const tableData = selectedData.slice(0, 20).map(index => csvData[index]);

                    const tableHtml = tableData.reduce((html, row) => {
                        return html + `
                            <tr>
                                <td>${row[0]}</td>
                                <td>${row[1]}</td>
                                <td>${row[2]}</td>
                                <td>${row[3]}</td>
                                <td>${row[4]}</td>
                                <td>${row[5]}</td>
                                <td>${row[6]}</td>
                                <td>${row[7]}</td>
                            </tr>
                        `;
                    }, '<table border=""1""><tr><th>Year</th><th>Technology Type</th><th>Adoption Rate</th><th>Investment</th><th>Return on Investment</th><th>Number of Users</th><th>Market Share</th><th>Customer Satisfaction Score</th></tr>');

                    table.innerHTML = tableHtml + '</table>';
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,738,739
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a horizontal Bar Chart that shows Technology Type and Adoption Rate, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Technology Adoption Rate Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const technologyTypes = [];
                const adoptionRates = [];
                csvData.forEach(row => {
                    const columns = row.split(',');
                    technologyTypes.push(columns[1]);
                    adoptionRates.push(parseFloat(columns[2]));
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '20%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'value',
                        position: 'top',
                        splitLine: {
                            lineStyle: {
                                type: 'dashed'
                            }
                        }
                    },
                    yAxis: {
                        type: 'category',
                        data: technologyTypes,
                        splitLine: {
                            lineStyle: {
                                type: 'dashed'
                            }
                        }
                    },
                    series: [
                        {
                            name: 'Adoption Rate',
                            type: 'bar',
                            data: adoptionRates,
                            label: {
                                show: true,
                                position: 'right',
                                valueAnimation: true
                            }
                        }
                    ],
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 100
                        },
                        {
                            show: true,
                            type: 'slider',
                            start: 0,
                            end: 100,
                            left: '93%',
                            height: '90%',
                            borderColor: 'rgba(73, 140, 207, 0.5)',
                            fillerColor: 'rgba(114, 229, 216, 0.2)',
                            handleStyle: {
                                color: '#ddd',
                                borderColor: '#ddd',
                                shadowBlur: 3,
                                shadowColor: 'rgba(0, 0, 0, 0.3)',
                                shadowOffsetX: 2,
                                shadowOffsetY: 2
                            },
                            textStyle: {
                                color: '#333'
                            },
                            dataBackground: {
                                lineStyle: {
                                    color: '#ddd'
                                },
                                areaStyle: {
                                    color: 'rgba(114, 229, 216, 0.2)'
                                }
                            },
                            fillerColor: 'rgba(114, 229, 216, 0.2)',
                            borderColor: '#ddd'
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,739,740
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Adoption Rate and Investment, and a Bar Chart on the right that displays Technology Type versus Adoption Rate.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Technology Adoption Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: row;
    }
  </style>
</head>
<body>
  <div id=""vis"">
    <div id=""scatterplot""></div>
    <div id=""barchart""></div>
  </div>

  <script>
    const scatterplotSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Investment"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Adoption Rate"", ""type"": ""quantitative""}
      }
    };

    const barchartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"" },
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Technology Type"", ""type"": ""nominal""},
        ""y"": {""field"": ""Adoption Rate"", ""type"": ""quantitative""}
      }
    };

    vegaEmbed(""#scatterplot"", scatterplotSpec);
    vegaEmbed(""#barchart"", barchartSpec);
  </script>
</body>
</html>
```",Correct,740,741
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Adoption Rate and Investment, and a Bar Chart on the right that displays Technology Type versus Adoption Rate. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Technology Adoption Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: row;
    }
    #scatterplot {
      width: 50%;
    }
    #barchart {
      width: 50%;
    }
  </style>
</head>
<body>
  <div id=""vis"">
    <div id=""scatterplot""></div>
    <div id=""barchart""></div>
  </div>

  <script>
    const scatterplotSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Investment"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Technology Type"", ""type"": ""nominal""}
      },
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x"", ""y""]}
      }
    };

    const barchartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"" },
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Technology Type"", ""type"": ""nominal""},
        ""y"": {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Technology Type"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#scatterplot"", scatterplotSpec, { ""actions"": false })
      .then(function(result) {
        const scatterplotView = result.view;

        vegaEmbed(""#barchart"", barchartSpec, { ""actions"": false })
          .then(function(result) {
            const barchartView = result.view;

            scatterplotView.addSignalListener(""brush"", function(name, value) {
              barchartView.signal(""brush"", value);
              barchartView.run();
            });
          });
      });
  </script>
</body>
</html>
```",Unexpected Execution Result,741,742
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Adoption Rate , while the pie chart represents the distribution of Investment.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Technology Adoption Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const lineChartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"" },
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {""field"": ""Year"", ""type"": ""temporal""},
        ""y"": {""field"": ""Adoption Rate"", ""type"": ""quantitative""}
      }
    };

    const pieChartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"" },
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Investment"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Technology Type"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", lineChartSpec, { mode: ""vega-lite"" });
    vegaEmbed(""#vis"", pieChartSpec, { mode: ""vega-lite"" });
  </script>
</body>
</html>
```",Unexpected Initial Result,742,743
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Adoption Rate , while the pie chart represents the distribution of Investment. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Investment for the selected group.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Technology Adoption Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 800,
      ""height"": 600,
      ""padding"": 5,
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""vconcat"": [
        {
          ""mark"": ""line"",
          ""encoding"": {
            ""x"": {""field"": ""Year"", ""type"": ""temporal""},
            ""y"": {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
            ""tooltip"": [
              {""field"": ""Year"", ""type"": ""temporal""},
              {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
              {""field"": ""Investment"", ""type"": ""quantitative""}
            ]
          },
          ""selection"": {
            ""brush"": {
              ""type"": ""interval"",
              ""encodings"": [""x""],
              ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
              ""translate"": ""[mousedown[!event.shiftKey], mouseup] > mousemove!"",
              ""zoom"": ""wheel![event.shiftKey]""
            }
          }
        },
        {
          ""mark"": ""arc"",
          ""encoding"": {
            ""theta"": {""field"": ""Investment"", ""type"": ""quantitative"", ""stack"": true},
            ""color"": {""field"": ""Technology Type"", ""type"": ""nominal""}
          },
          ""transform"": [
            {
              ""filter"": ""brush""
            }
          ]
        }
      ]
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Execution Result,743,744
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Adoption Rate, Investment, Number of Users, and Market Share. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Scatterplot Matrix</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to our embed */
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {
          ""filter"": ""datum['Adoption Rate'] !== null && datum['Investment'] !== null && datum['Number of Users'] !== null && datum['Market Share'] !== null""
        }
      ],
      ""spacing"": 50,
      ""vconcat"": [
        {
          ""mark"": ""point"",
          ""selection"": {
            ""brush"": {
              ""type"": ""interval"",
              ""encodings"": [""x"", ""y""],
              ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
              ""translate"": ""[mousedown[!event.shiftKey], mouseup] > mousemove!"",
              ""zoom"": ""![event.shiftKey]""
            }
          },
          ""encoding"": {
            ""x"": {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Investment"", ""type"": ""quantitative""},
            ""color"": {
              ""condition"": {
                ""test"": ""brush"",
                ""field"": ""Investment"",
                ""type"": ""quantitative""
              },
              ""value"": ""grey""
            }
          }
        },
        {
          ""mark"": ""point"",
          ""selection"": {
            ""brush"": {
              ""type"": ""interval"",
              ""encodings"": [""x"", ""y""],
              ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
              ""translate"": ""[mousedown[!event.shiftKey], mouseup] > mousemove!"",
              ""zoom"": ""![event.shiftKey]""
            }
          },
          ""encoding"": {
            ""x"": {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Number of Users"", ""type"": ""quantitative""},
            ""color"": {
              ""condition"": {
                ""test"": ""brush"",
                ""field"": ""Number of Users"",
                ""type"": ""quantitative""
              },
              ""value"": ""grey""
            }
          }
        },
        {
          ""mark"": ""point"",
          ""selection"": {
            ""brush"": {
              ""type"": ""interval"",
              ""encodings"": [""x"", ""y""],
              ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
              ""translate"": ""[mousedown[!event.shiftKey], mouseup] > mousemove!"",
              ""zoom"": ""![event.shiftKey]""
            }
          },
          ""encoding"": {
            ""x"": {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Market Share"", ""type"": ""quantitative""},
            ""color"": {
              ""condition"": {
                ""test"": ""brush"",
                ""field"": ""Market Share"",
                ""type"": ""quantitative""
              },
              ""value"": ""grey""
            }
          }
        },
        {
          ""mark"": ""point"",
          ""selection"": {
            ""brush"": {
              ""type"": ""interval"",
              ""encodings"": [""x"", ""y""],
              ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
              ""translate"": ""[mousedown[!event.shiftKey], mouseup] > mousemove!"",
              ""zoom"": ""![event.shiftKey]""
            }
          },
          ""encoding"": {
            ""x"": {""field"": ""Investment"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Number of Users"", ""type"": ""quantitative""},
            ""color"": {
              ""condition"": {
                ""test"": ""brush"",
                ""field"": ""Number of Users"",
                ""type"": ""quantitative""
              },
              ""value"": ""grey""
            }
          }
        },
        {
          ""mark"": ""point"",
          ""selection"": {
            ""brush"": {
              ""type"": ""interval"",
              ""encodings"": [""x"", ""y""],
              ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
              ""translate"": ""[mousedown[!event.shiftKey], mouseup] > mousemove!"",
              ""zoom"": ""![event.shiftKey]""
            }
          },
          ""encoding"": {
            ""x"": {""field"": ""Investment"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Market Share"", ""type"": ""quantitative""},
            ""color"": {
              ""condition"": {
                ""test"": ""brush"",
                ""field"": ""Market Share"",
                ""type"": ""quantitative""
              },
              ""value"": ""grey""
            }
          }
        },
        {
          ""mark"": ""point"",
          ""selection"": {
            ""brush"": {
              ""type"": ""interval"",
              ""encodings"": [""x"", ""y""],
              ""on"": ""[mousedown[!event.shiftKey], mouseup] > mousemove"",
              ""translate"": ""[mousedown[!event.shiftKey], mouseup] > mousemove!"",
              ""zoom"": ""![event.shiftKey]""
            }
          },
          ""encoding"": {
            ""x"": {""field"": ""Number of Users"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Market Share"", ""type"": ""quantitative""},
            ""color"": {
              ""condition"": {
                ""test"": ""brush"",
                ""field"": ""Market Share"",
                ""type"": ""quantitative""
              },
              ""value"": ""grey""
            }
          }
        }
      ]
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Initialization Error,744,745
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a brushable Scatterplot that visualizes the relationship between Adoption Rate and Investment. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Brushable Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 600,
      ""height"": 400,
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Investment"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Year"", ""type"": ""nominal""},
          {""field"": ""Technology Type"", ""type"": ""nominal""},
          {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
          {""field"": ""Investment"", ""type"": ""quantitative""},
          {""field"": ""Return on Investment"", ""type"": ""quantitative""},
          {""field"": ""Number of Users"", ""type"": ""quantitative""},
          {""field"": ""Market Share"", ""type"": ""quantitative""},
          {""field"": ""Customer Satisfaction Score"", ""type"": ""quantitative""}
        ]
      },
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x"", ""y""]}
      }
    };

    const opts = {
      ""actions"": false
    };

    vegaEmbed(""#vis"", spec, opts).then(function(result) {
      const view = result.view;
      const brush = view.signal(""brush"");

      view.addEventListener(""mouseover"", function(event, item) {
        if (item && item.datum) {
          const tableData = [];
          const brushData = view.data(""brush_store_"")[0];
          if (brushData) {
            for (let i = 0; i < Math.min(20, brushData.length); i++) {
              const row = brushData[i];
              tableData.push({
                ""Year"": row.Year,
                ""Technology Type"": row[""Technology Type""],
                ""Adoption Rate"": row[""Adoption Rate""],
                ""Investment"": row.Investment,
                ""Return on Investment"": row[""Return on Investment""],
                ""Number of Users"": row[""Number of Users""],
                ""Market Share"": row[""Market Share""],
                ""Customer Satisfaction Score"": row[""Customer Satisfaction Score""]
              });
            }
          }
          const tableHtml = tableData.map(function(row, index) {
            return `<tr><td>${row.Year}</td><td>${row[""Technology Type""]}</td><td>${row[""Adoption Rate""]}</td><td>${row.Investment}</td><td>${row[""Return on Investment""]}</td><td>${row[""Number of Users""]}</td><td>${row[""Market Share""]}</td><td>${row[""Customer Satisfaction Score""]}</td></tr>`;
          }).join("""");
          document.getElementById(""vis"").innerHTML = `
            <svg width=""600"" height=""400""></svg>
            <table>
              <tr><th>Year</th><th>Technology Type</th><th>Adoption Rate</th><th>Investment</th><th>Return on Investment</th><th>Number of Users</th><th>Market Share</th><th>Customer Satisfaction Score</th></tr>
              ${tableHtml}
            </table>
          `;
        }
      });
    });
  </script>
</body>
</html>
```",Unexpected Initial Result,745,746
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a horizontal Bar Chart that shows Technology Type and Adoption Rate, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Technology Adoption Rate</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0/build/vega.min.js""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0/build/vega-lite.min.js""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0/build/vega-embed.min.js""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 700,
      ""height"": 500,
      ""layer"": [
        {
          ""mark"": ""bar"",
          ""encoding"": {
            ""x"": {
              ""field"": ""Adoption Rate"",
              ""type"": ""quantitative"",
              ""axis"": {
                ""title"": ""Adoption Rate""
              }
            },
            ""y"": {
              ""field"": ""Technology Type"",
              ""type"": ""nominal"",
              ""axis"": {
                ""title"": ""Technology Type""
              }
            },
            ""color"": {
              ""field"": ""Technology Type"",
              ""type"": ""nominal""
            }
          }
        },
        {
          ""mark"": ""bar"",
          ""width"": 30,
          ""x"": {""field"": ""Adoption Rate""},
          ""y"": {""field"": ""Technology Type""},
          ""color"": {""field"": ""Technology Type""},
          ""transform"": [
            {
              ""filter"": ""datum.Adoption Rate > 0.5""
            }
          ]
        }
      ],
      ""resolve"": {
        ""scale"": {
          ""color"": ""independent""
        }
      },
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
        ""format"": {
          ""type"": ""csv""
        }
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Initialization Error,746,747
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Adoption Rate and Investment.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Adoption Rate vs Investment Scatterplot</title>
  <style>
    /* Add some basic styling */
    body {
      font-family: Arial, sans-serif;
    }
    #chart {
      width: 800px;
      height: 600px;
      border: 1px solid black;
    }
  </style>
</head>
<body>
  <svg id=""chart""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    // Set up the chart dimensions
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    // Create the SVG element
    const svg = d3.select(""#chart"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    // Load the data
    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"")
      .then(data => {
        // Convert data types
        data.forEach(d => {
          d[""Adoption Rate""] = +d[""Adoption Rate""];
          d.Investment = +d.Investment;
        });

        // Set up the scales
        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Adoption Rate""])])
          .range([0, width]);
        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Investment)])
          .range([height, 0]);

        // Add the x-axis
        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale))
          .append(""text"")
          .attr(""x"", width / 2)
          .attr(""y"", 20)
          .attr(""text-anchor"", ""middle"")
          .text(""Adoption Rate"");

        // Add the y-axis
        svg.append(""g"")
          .call(d3.axisLeft(yScale))
          .append(""text"")
          .attr(""transform"", ""rotate(-90)"")
          .attr(""x"", -height / 2)
          .attr(""y"", -20)
          .attr(""text-anchor"", ""middle"")
          .text(""Investment"");

        // Add the points
        svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d[""Adoption Rate""]))
          .attr(""cy"", d => yScale(d.Investment))
          .attr(""r"", 5);
      });
  </script>
</body>
</html>
```",Correct,747,748
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Line Chart that visualizes the trend of Adoption Rate over the Year for each Technology Type.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Technology Adoption Rate Trend</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 40px;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Year""] = +d[""Year""];
          d[""Adoption Rate""] = +d[""Adoption Rate""];
        });

        const technologyTypes = [...new Set(data.map(d => d[""Technology Type""]))];

        const xScale = d3.scaleLinear()
          .domain(d3.extent(data, d => d[""Year""]))
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Adoption Rate""])])
          .range([height, 0]);

        const line = d3.line()
          .x(d => xScale(d[""Year""]))
          .y(d => yScale(d[""Adoption Rate""]));

        technologyTypes.forEach(technologyType => {
          const technologyData = data.filter(d => d[""Technology Type""] === technologyType);

          svg.append(""path"")
            .datum(technologyData)
            .attr(""fill"", ""none"")
            .attr(""stroke"", ""steelblue"")
            .attr(""stroke-width"", 1.5)
            .attr(""d"", line);
        });

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        svg.append(""text"")
          .attr(""transform"", `translate(${width / 2}, ${height + margin.bottom - 5})`)
          .attr(""text-anchor"", ""middle"")
          .text(""Year"");

        svg.append(""text"")
          .attr(""transform"", `rotate(-90) translate(${-height / 2}, ${-margin.left + 15})`)
          .attr(""text-anchor"", ""middle"")
          .text(""Adoption Rate"");
      });
  </script>
</body>
</html>
```",Correct,748,749
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Adoption Rate for each Technology Type in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Adoption Rate by Technology Type in 2020</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 40px;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 300 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Year""] = +d[""Year""];
          d[""Adoption Rate""] = +d[""Adoption Rate""];
        });

        const filteredData = data.filter(d => d[""Year""] === 2020);

        const x = d3.scaleBand()
          .domain(filteredData.map(d => d[""Technology Type""]))
          .range([0, width])
          .padding(0.2);

        const y = d3.scaleLinear()
          .domain([0, d3.max(filteredData, d => d[""Adoption Rate""])])
          .range([height, 0]);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(x));

        svg.append(""g"")
          .call(d3.axisLeft(y));

        svg.selectAll(""bar"")
          .data(filteredData)
          .enter()
          .append(""rect"")
          .attr(""x"", d => x(d[""Technology Type""]))
          .attr(""y"", d => y(d[""Adoption Rate""]))
          .attr(""width"", x.bandwidth())
          .attr(""height"", d => height - y(d[""Adoption Rate""]));
      });
  </script>
</body>
</html>
```",Correct,749,750
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Pie Chart that visualizes the proportion of Adoption Rate contributed by each Technology Type in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Technology Adoption Rate Pie Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    #chart {
      width: 500px;
      height: 500px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"")
      .then(data => {
        data.forEach(d => {
          d.Year = +d.Year;
          d['Adoption Rate'] = +d['Adoption Rate'];
        });

        const filteredData = data.filter(d => d.Year === 2020);

        const technologyTypes = [...new Set(filteredData.map(d => d['Technology Type']))];

        const pie = d3.pie()
          .value(d => d['Adoption Rate']);

        const arcs = svg.selectAll(""arc"")
          .data(pie(filteredData))
          .enter()
          .append(""path"")
          .attr(""d"", d3.arc()
            .innerRadius(0)
            .outerRadius(Math.min(width, height) / 2)
          )
          .attr(""fill"", (d, i) => d3.schemeCategory10[i % 10])
          .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        const legend = svg.selectAll(""legend"")
          .data(technologyTypes)
          .enter()
          .append(""g"")
          .attr(""transform"", (d, i) => `translate(0, ${i * 20})`);

        legend.append(""rect"")
          .attr(""x"", width / 2 + 10)
          .attr(""y"", 10)
          .attr(""width"", 10)
          .attr(""height"", 10)
          .attr(""fill"", (d, i) => d3.schemeCategory10[i % 10]);

        legend.append(""text"")
          .attr(""x"", width / 2 + 25)
          .attr(""y"", 20)
          .text(d => d);
      });
  </script>
</body>
</html>
```",Correct,750,751
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Donut Chart that visualizes the distribution of Adoption Rate among Technology Type in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Donut Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 500px;
      height: 500px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 20, left: 20 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"")
      .then(data => {
        data.forEach(d => {
          d.Year = +d.Year;
          d[""Adoption Rate""] = +d[""Adoption Rate""];
        });

        const filteredData = data.filter(d => d.Year === 2020);

        const technologyTypes = [...new Set(filteredData.map(d => d[""Technology Type""]))];

        const adoptionRates = technologyTypes.map(type => {
          const typeData = filteredData.filter(d => d[""Technology Type""] === type);
          return {
            type,
            rate: typeData.reduce((acc, d) => acc + d[""Adoption Rate""], 0) / typeData.length
          };
        });

        const pie = d3.pie()
          .value(d => d.rate);

        const arc = d3.arc()
          .outerRadius(width / 2 - 50)
          .innerRadius(width / 2 - 150);

        const arcs = svg.selectAll(""arc"")
          .data(pie(adoptionRates))
          .enter()
          .append(""path"")
          .attr(""d"", arc)
          .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

        const text = svg.selectAll(""text"")
          .data(pie(adoptionRates))
          .enter()
          .append(""text"")
          .attr(""transform"", d => `translate(${arc.centroid(d)})`)
          .attr(""dy"", ""0.35em"")
          .text(d => `${d.data.type}: ${d.data.rate.toFixed(2)}%`);
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,751,752
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Coxcomb Chart(polar area chart) to compare the Adoption Rate of different Technology Type in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coxcomb Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 600px;
      height: 600px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 20, left: 20 };
    const width = 600 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('.chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/8729038f70e9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
      .then(data => {
        data.forEach(d => {
          d['Year'] = +d['Year'];
          d['Adoption Rate'] = +d['Adoption Rate'];
        });

        const filteredData = data.filter(d => d['Year'] === 2020);

        const technologyTypes = [...new Set(filteredData.map(d => d['Technology Type']))];

        const angles = technologyTypes.map((_, i) => i * (360 / technologyTypes.length));

        const radiusScale = d3.scaleLinear()
          .domain([0, d3.max(filteredData, d => d['Adoption Rate'])])
          .range([0, width / 2]);

        svg.selectAll('path')
          .data(filteredData)
          .enter()
          .append('path')
          .attr('d', d => {
            const angle = angles[technologyTypes.indexOf(d['Technology Type'])];
            const radius = radiusScale(d['Adoption Rate']);
            return `M ${width / 2} ${height / 2} L ${width / 2 + radius * Math.cos(angle * Math.PI / 180)} ${height / 2 + radius * Math.sin(angle * Math.PI / 180)}`;
          })
          .attr('stroke', 'black')
          .attr('stroke-width', 1)
          .attr('fill', 'none');

        svg.selectAll('text')
          .data(technologyTypes)
          .enter()
          .append('text')
          .attr('x', (d, i) => width / 2 + (width / 2 + 10) * Math.cos(angles[i] * Math.PI / 180))
          .attr('y', (d, i) => height / 2 + (width / 2 + 10) * Math.sin(angles[i] * Math.PI / 180))
          .text(d => d);
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,752,753
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Radar Chart to compare the Adoption Rate of different Technology Type in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Technology Adoption Rate Radar Chart</title>
  <style>
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg width=""600"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 100, right: 100, bottom: 100, left: 100 };
    const width = 600 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Year""] = +d[""Year""];
          d[""Adoption Rate""] = +d[""Adoption Rate""];
        });

        const technologyTypes = [...new Set(data.map(d => d[""Technology Type""]))];

        const adoptionRates = technologyTypes.map(type => {
          const rate = data.find(d => d[""Technology Type""] === type && d[""Year""] === 2020)[""Adoption Rate""];
          return { type, rate };
        });

        const angles = technologyTypes.map((_, i) => (i / technologyTypes.length) * 2 * Math.PI);

        const radius = Math.min(width, height) / 2 - 50;

        const radarLine = d3.lineRadial()
          .radius(d => d.rate * radius / 100)
          .angle((_, i) => angles[i]);

        const axis = svg.selectAll("".axis"")
          .data(angles)
          .enter()
          .append(""g"")
          .attr(""class"", ""axis"")
          .attr(""transform"", (_, i) => `rotate(${angles[i] * 180 / Math.PI}) translate(0, ${-radius})`);

        axis.append(""line"")
          .attr(""x2"", radius);

        axis.append(""text"")
          .attr(""y"", -10)
          .attr(""transform"", ""rotate(90)"")
          .text((_, i) => technologyTypes[i]);

        svg.append(""path"")
          .datum(adoptionRates)
          .attr(""class"", ""radar"")
          .attr(""d"", radarLine)
          .style(""fill"", ""none"")
          .style(""stroke"", ""steelblue"")
          .style(""stroke-width"", 2);

        svg.append(""text"")
          .attr(""x"", width / 2)
          .attr(""y"", -50)
          .attr(""text-anchor"", ""middle"")
          .text(""Technology Adoption Rate in 2020"");
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,753,754
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Streamgraph that visualizes the changes of Adoption Rate over the Year for each Technology Type.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Streamgraph</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"")
      .then(data => {
        data.forEach(d => {
          d.Year = +d.Year;
          d[""Adoption Rate""] = +d[""Adoption Rate""];
        });

        const technologyTypes = [...new Set(data.map(d => d[""Technology Type""]))];

        const xScale = d3.scaleLinear()
          .domain(d3.extent(data, d => d.Year))
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Adoption Rate""])])
          .range([height, 0]);

        const zScale = d3.scaleOrdinal(d3.schemeCategory10)
          .domain(technologyTypes);

        const stack = d3.stack()
          .keys(technologyTypes)
          .value((d, key) => d[""Adoption Rate""]);

        const stackedData = stack(data);

        const area = d3.area()
          .x(d => xScale(d.data.Year))
          .y0(d => yScale(d[0]))
          .y1(d => yScale(d[1]));

        svg.selectAll(""path"")
          .data(stackedData)
          .enter()
          .append(""path"")
          .attr(""d"", area)
          .attr(""fill"", d => zScale(d.key));

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        svg.selectAll(""text"")
          .data(technologyTypes)
          .enter()
          .append(""text"")
          .attr(""x"", width + 10)
          .attr(""y"", (d, i) => 10 + i * 20)
          .attr(""fill"", d => zScale(d))
          .text(d => d);
      });
  </script>
</body>
</html>
```",Correct,754,755
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Slopegraph to compare the Adoption Rate between 2019 and 2020 for each Technology Type.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Slopegraph</title>
  <style>
    .line {
      stroke: #666;
      stroke-width: 1.5px;
    }
    .circle {
      fill: #666;
      stroke: #fff;
      stroke-width: 1.5px;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Adoption Rate""] = +d[""Adoption Rate""];
          d[""Year""] = +d[""Year""];
        });

        const technologyTypes = [...new Set(data.map(d => d[""Technology Type""]))];

        const xScale = d3.scalePoint()
          .domain([2019, 2020])
          .range([0, width])
          .padding(0.5);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Adoption Rate""])])
          .range([height, 0]);

        svg.selectAll(""line"")
          .data(technologyTypes)
          .enter()
          .append(""line"")
          .attr(""class"", ""line"")
          .attr(""x1"", d => xScale(2019))
          .attr(""y1"", d => yScale(d3.max(data.filter(f => f[""Technology Type""] === d && f[""Year""] === 2019), f => f[""Adoption Rate""])))
          .attr(""x2"", d => xScale(2020))
          .attr(""y2"", d => yScale(d3.max(data.filter(f => f[""Technology Type""] === d && f[""Year""] === 2020), f => f[""Adoption Rate""])));

        svg.selectAll(""circle"")
          .data(data.filter(d => d[""Year""] === 2019 || d[""Year""] === 2020))
          .enter()
          .append(""circle"")
          .attr(""class"", ""circle"")
          .attr(""cx"", d => xScale(d[""Year""]))
          .attr(""cy"", d => yScale(d[""Adoption Rate""]))
          .attr(""r"", 5);

        svg.selectAll(""text"")
          .data(technologyTypes)
          .enter()
          .append(""text"")
          .attr(""x"", d => xScale(2019))
          .attr(""y"", d => yScale(d3.max(data.filter(f => f[""Technology Type""] === d && f[""Year""] === 2019), f => f[""Adoption Rate""])) - 10)
          .attr(""text-anchor"", ""start"")
          .text(d => d);

        svg.selectAll(""text2"")
          .data(technologyTypes)
          .enter()
          .append(""text"")
          .attr(""x"", d => xScale(2020))
          .attr(""y"", d => yScale(d3.max(data.filter(f => f[""Technology Type""] === d && f[""Year""] === 2020), f => f[""Adoption Rate""])) - 10)
          .attr(""text-anchor"", ""start"")
          .text(d => d);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,755,756
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Heatmap that visualizes the Adoption Rate across Technology Type and Years.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Heatmap of Adoption Rate</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .tooltip {
      position: absolute;
      padding: 10px;
      background-color: #fff;
      border: 1px solid #ddd;
      border-radius: 5px;
      pointer-events: none;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 100, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('svg')
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
      .then(data => {
        data.forEach(d => {
          d['Year'] = +d['Year'];
          d['Adoption Rate'] = +d['Adoption Rate'];
        });

        const years = Array.from(new Set(data.map(d => d['Year'])));
        const technologyTypes = Array.from(new Set(data.map(d => d['Technology Type'])));

        const xScale = d3.scaleBand()
          .domain(years)
          .range([0, width])
          .padding(0.1);

        const yScale = d3.scaleBand()
          .domain(technologyTypes)
          .range([0, height])
          .padding(0.1);

        const colorScale = d3.scaleSequential()
          .domain([0, d3.max(data, d => d['Adoption Rate'])])
          .interpolator(d3.interpolateBlues);

        const heatmap = svg.selectAll('rect')
          .data(data)
          .enter()
          .append('rect')
          .attr('x', d => xScale(d['Year']))
          .attr('y', d => yScale(d['Technology Type']))
          .attr('width', xScale.bandwidth())
          .attr('height', yScale.bandwidth())
          .attr('fill', d => colorScale(d['Adoption Rate']));

        const tooltip = d3.select('body')
          .append('div')
          .attr('class', 'tooltip')
          .style('opacity', 0);

        heatmap.on('mouseover', (event, d) => {
          tooltip.transition()
            .duration(200)
            .style('opacity', 0.9);
          tooltip.html(`Year: ${d['Year']}<br>Technology Type: ${d['Technology Type']}<br>Adoption Rate: ${d['Adoption Rate']}`)
            .style('left', (event.pageX) + 'px')
            .style('top', (event.pageY - 28) + 'px');
        })
          .on('mouseout', () => {
            tooltip.transition()
              .duration(500)
              .style('opacity', 0);
          });

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append('g')
          .call(d3.axisLeft(yScale));

        svg.append('text')
          .attr('transform', 'rotate(-90)')
          .attr('y', 6)
          .attr('dy', '.71em')
          .style('text-anchor', 'end')
          .text('Technology Type');

        svg.append('text')
          .attr('y', height + margin.bottom - 10)
          .attr('x', width / 2)
          .style('text-anchor', 'middle')
          .text('Year');
      });
  </script>
</body>
</html>
```",Correct,756,757
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Stacked Bar Chart</title>
  <style>
    .chart {
      width: 800px;
      height: 600px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('.chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
      .then(data => {
        data.forEach(d => {
          d['Adoption Rate'] = +d['Adoption Rate'];
          d.Investment = +d.Investment;
          d['Return on Investment'] = +d['Return on Investment'];
          d['Number of Users'] = +d['Number of Users'];
          d['Market Share'] = +d['Market Share'];
          d['Customer Satisfaction Score'] = +d['Customer Satisfaction Score'];
        });

        const keys = ['Adoption Rate', 'Investment', 'Return on Investment', 'Number of Users', 'Market Share', 'Customer Satisfaction Score'];

        const x = d3.scaleBand()
          .domain(data.map(d => d['Technology Type']))
          .range([0, width])
          .padding(0.2);

        const y = d3.scaleLinear()
          .domain([0, d3.max(data, d => d3.max(keys, k => d[k]))])
          .range([height, 0]);

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(x));

        svg.append('g')
          .call(d3.axisLeft(y));

        const stackedData = d3.stack()
          .keys(keys)
          .value((d, key) => d[key])(data);

        svg.selectAll('groups')
          .data(stackedData)
          .enter()
          .append('g')
          .attr('fill', (d, i) => d3.schemeCategory10[i])
          .selectAll('rect')
          .data(d => d)
          .enter()
          .append('rect')
          .attr('x', d => x(d.data['Technology Type']))
          .attr('y', d => y(d[1]))
          .attr('height', d => y(d[0]) - y(d[1]))
          .attr('width', x.bandwidth());
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,757,758
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Horizontal Bar Chart that visualizes the Adoption Rate for each Technology Type in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Technology Adoption Rate in 2020</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 40px;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 300 - margin.top - margin.bottom;

    const svg = d3.select("".chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Year""] = +d[""Year""];
          d[""Adoption Rate""] = +d[""Adoption Rate""];
        });

        const filteredData = data.filter(d => d[""Year""] === 2020);

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(filteredData, d => d[""Adoption Rate""])])
          .range([0, width]);

        const yScale = d3.scaleBand()
          .domain(filteredData.map(d => d[""Technology Type""]))
          .range([height, 0])
          .padding(0.2);

        svg.selectAll(""rect"")
          .data(filteredData)
          .enter()
          .append(""rect"")
          .attr(""x"", 0)
          .attr(""y"", d => yScale(d[""Technology Type""]))
          .attr(""width"", d => xScale(d[""Adoption Rate""]))
          .attr(""height"", yScale.bandwidth());

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));
      });
  </script>
</body>
</html>
```",Correct,758,759
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Adoption Rate and Investment.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Adoption Rate vs Investment Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const adoptionRates = csvData.map(row => parseFloat(row.split(',')[2]));
                const investments = csvData.map(row => parseFloat(row.split(',')[3]));

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Adoption Rate vs Investment Scatterplot'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Adoption Rate'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Investment'
                    },
                    series: [{
                        type: 'scatter',
                        data: adoptionRates.map((rate, index) => [rate, investments[index]]),
                        symbolSize: 10
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,759,760
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Line Chart that visualizes the trend of Adoption Rate over the Year for each Technology Type.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Technology Adoption Rate Trend</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const technologyTypes = [...new Set(csvData.map(row => row.split(',')[1]))];
                const seriesData = technologyTypes.map(type => {
                    const typeData = csvData.filter(row => row.split(',')[1] === type);
                    return {
                        name: type,
                        type: 'line',
                        data: typeData.map(row => [+row.split(',')[0], +row.split(',')[2]])
                    };
                });
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Technology Adoption Rate Trend'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    legend: {
                        data: technologyTypes
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    toolbox: {
                        feature: {
                            saveAsImage: {}
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Year'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Adoption Rate'
                    },
                    series: seriesData
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,760,761
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Adoption Rate for each Technology Type in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Adoption Rate Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const chartData = [];
                const rows = data.split('\n');
                rows.forEach((row, index) => {
                    if (index > 0) {
                        const columns = row.split(',');
                        if (columns[0] === '2020') {
                            chartData.push({
                                technology: columns[1],
                                adoptionRate: parseFloat(columns[2])
                            });
                        }
                    }
                });
                const technologyTypes = chartData.map(item => item.technology);
                const adoptionRates = chartData.map(item => item.adoptionRate);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Adoption Rate for each Technology Type in 2020'
                    },
                    tooltip: {},
                    xAxis: {
                        data: technologyTypes
                    },
                    yAxis: {},
                    series: [{
                        name: 'Adoption Rate',
                        type: 'bar',
                        data: adoptionRates
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,761,762
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Pie Chart that visualizes the proportion of Adoption Rate contributed by each Technology Type in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Technology Adoption Rate Pie Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const chartData = {};
                rows.forEach(row => {
                    const columns = row.split(',');
                    if (columns[0] === '2020') {
                        const technologyType = columns[1];
                        const adoptionRate = parseFloat(columns[2]);
                        if (chartData[technologyType]) {
                            chartData[technologyType] += adoptionRate;
                        } else {
                            chartData[technologyType] = adoptionRate;
                        }
                    }
                });
                const seriesData = Object.keys(chartData).map(key => ({ name: key, value: chartData[key] }));
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Technology Adoption Rate in 2020'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    series: [
                        {
                            type: 'pie',
                            data: seriesData,
                            emphasis: {
                                itemStyle: {
                                    shadowBlur: 10,
                                    shadowOffsetX: 0,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            }
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,762,763
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Donut Chart that visualizes the distribution of Adoption Rate among Technology Type in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Donut Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [Year, TechnologyType, AdoptionRate] = row.split(',');
                    if (Year === '2020') {
                        if (!chartData[TechnologyType]) {
                            chartData[TechnologyType] = 0;
                        }
                        chartData[TechnologyType] += parseFloat(AdoptionRate);
                    }
                });
                const seriesData = Object.keys(chartData).map(key => ({ name: key, value: chartData[key] }));
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    series: [
                        {
                            type: 'pie',
                            radius: ['40%', '60%'],
                            avoidLabelOverlap: false,
                            label: {
                                show: false,
                                position: 'center'
                            },
                            labelLine: {
                                show: false
                            },
                            data: seriesData
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,763,764
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Coxcomb Chart(polar area chart) to compare the Adoption Rate of different Technology Type in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coxcomb Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const chartData = {};
                rows.forEach(row => {
                    const columns = row.split(',');
                    if (columns[0] === '2020') {
                        if (!chartData[columns[1]]) {
                            chartData[columns[1]] = [];
                        }
                        chartData[columns[1]].push(parseFloat(columns[2]));
                    }
                });
                const seriesData = Object.keys(chartData).map(key => ({
                    name: key,
                    value: Math.max(...chartData[key])
                }));
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    polar: {},
                    angleAxis: {
                        type: 'category',
                        data: seriesData.map(item => item.name),
                        boundaryGap: false,
                    },
                    radiusAxis: {
                        type: 'value',
                        min: 0,
                        max: 100,
                    },
                    series: [{
                        type: 'bar',
                        data: seriesData.map(item => item.value),
                        coordinateSystem: 'polar',
                        name: 'Adoption Rate',
                        stack: 'a',
                    }],
                    legend: {
                        show: true,
                        data: ['Adoption Rate']
                    }
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,764,765
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Radar Chart to compare the Adoption Rate of different Technology Type in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Radar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const technologyTypes = [...new Set(csvData.map(row => row.split(',')[1]))];
                const adoptionRates = technologyTypes.map(type => {
                    const rows = csvData.filter(row => row.split(',')[1] === type && row.split(',')[0] === '2020');
                    return rows.map(row => parseFloat(row.split(',')[2]))[0];
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Adoption Rate of Different Technology Types in 2020'
                    },
                    radar: {
                        indicator: technologyTypes.map(type => ({ name: type, max: 100 })),
                        radius: 80,
                        center: ['50%', '50%']
                    },
                    series: [{
                        name: 'Adoption Rate',
                        type: 'radar',
                        data: [adoptionRates],
                        symbol: 'circle',
                        symbolSize: 10,
                        lineStyle: {
                            color: '#666',
                            width: 2
                        },
                        areaStyle: {
                            color: 'rgba(0, 0, 0, 0.2)'
                        }
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,765,766
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Streamgraph that visualizes the changes of Adoption Rate over the Year for each Technology Type.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Streamgraph</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const technologyTypes = [...new Set(csvData.map(row => row.split(',')[1]))];
                const years = [...new Set(csvData.map(row => row.split(',')[0]))].sort((a, b) => a - b);
                const seriesData = technologyTypes.map(type => {
                    const typeData = csvData.filter(row => row.split(',')[1] === type);
                    return years.map(year => {
                        const yearData = typeData.find(row => row.split(',')[0] === year);
                        return yearData ? parseFloat(yearData.split(',')[2]) : 0;
                    });
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'line',
                            lineStyle: {
                                color: 'rgba(0,0,0,0.2)',
                                width: 1,
                                type: 'solid'
                            }
                        }
                    },
                    legend: {
                        data: technologyTypes
                    },
                    singleAxis: {
                        top: 50,
                        bottom: 50,
                        axisLine: {
                            lineStyle: {
                                color: '#ddd'
                            }
                        },
                        axisTick: {
                            lineStyle: {
                                color: '#ddd'
                            }
                        },
                        axisLabel: {
                            formatter: '{value}%'
                        },
                        splitLine: {
                            lineStyle: {
                                color: '#ddd'
                            }
                        },
                        data: years
                    },
                    series: technologyTypes.map((type, index) => ({
                        type: 'themeRiver',
                        name: type,
                        data: seriesData[index].map((value, i) => [i, value]),
                        areaStyle: {
                            origin: 'start'
                        }
                    }))
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,766,767
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Slopegraph to compare the Adoption Rate between 2019 and 2020 for each Technology Type.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Slopegraph</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [Year, TechnologyType, AdoptionRate] = row.split(',');
                    if (!chartData[TechnologyType]) {
                        chartData[TechnologyType] = {};
                    }
                    chartData[TechnologyType][Year] = parseFloat(AdoptionRate);
                });
                const seriesData = [];
                Object.keys(chartData).forEach(technology => {
                    const data = [];
                    data.push([chartData[technology]['2019']]);
                    data.push([chartData[technology]['2020']]);
                    seriesData.push({
                        name: technology,
                        type: 'line',
                        symbol: 'circle',
                        symbolSize: 10,
                        data: data,
                        lineStyle: {
                            width: 2
                        }
                    });
                });
                const option = {
                    tooltip: {
                        trigger: 'item'
                    },
                    grid: {
                        top: '10%',
                        left: '10%',
                        right: '10%',
                        bottom: '10%'
                    },
                    xAxis: [
                        {
                            type: 'value',
                            position: 'bottom',
                            name: 'Adoption Rate',
                            nameLocation: 'middle',
                            nameGap: 30,
                            axisLine: {
                                show: true
                            },
                            axisTick: {
                                show: true
                            },
                            axisLabel: {
                                show: true
                            }
                        }
                    ],
                    yAxis: [
                        {
                            type: 'category',
                            position: 'left',
                            data: ['2019', '2020'],
                            axisLine: {
                                show: false
                            },
                            axisTick: {
                                show: false
                            },
                            axisLabel: {
                                show: false
                            }
                        }
                    ],
                    series: seriesData
                };
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,767,768
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Heatmap that visualizes the Adoption Rate across Technology Type and Years.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Heatmap</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const years = Array.from(new Set(data.split('\n').slice(1).map(line => line.split(',')[0])));
                const techTypes = Array.from(new Set(data.split('\n').slice(1).map(line => line.split(',')[1])));
                const adoptionRates = data.split('\n').slice(1).map(line => line.split(',')[2]);

                const seriesData = [];
                for (let i = 0; i < years.length; i++) {
                    const yearData = [];
                    for (let j = 0; j < techTypes.length; j++) {
                        const index = years.indexOf(years[i]) * techTypes.length + techTypes.indexOf(techTypes[j]);
                        yearData.push([techTypes[j], years[i], adoptionRates[index]]);
                    }
                    seriesData.push(yearData);
                }

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    tooltip: {
                        position: 'top'
                    },
                    grid: {
                        height: '50%',
                        top: '10%'
                    },
                    xAxis: {
                        type: 'category',
                        data: techTypes,
                        splitArea: {
                            show: true
                        }
                    },
                    yAxis: {
                        type: 'category',
                        data: years,
                        splitArea: {
                            show: true
                        }
                    },
                    visualMap: {
                        min: 0,
                        max: 100,
                        calculable: true,
                        orient: 'horizontal',
                        left: 'center',
                        bottom: '15%'
                    },
                    series: [{
                        name: 'Adoption Rate',
                        type: 'heatmap',
                        data: seriesData.flat(),
                        label: {
                            show: true
                        },
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,768,769
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Technology Adoption Stacked Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const years = [...new Set(csvData.map(row => row.split(',')[0]))];
                const technologyTypes = [...new Set(csvData.map(row => row.split(',')[1]))];
                const adoptionRates = technologyTypes.map(type => {
                    return years.map(year => {
                        const row = csvData.find(row => row.split(',')[0] === year && row.split(',')[1] === type);
                        return row ? parseFloat(row.split(',')[2]) : 0;
                    });
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Technology Adoption Stacked Bar Chart'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    legend: {
                        data: technologyTypes
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'category',
                        data: years
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: technologyTypes.map((type, index) => {
                        return {
                            name: type,
                            type: 'bar',
                            stack: 'total',
                            data: adoptionRates[index]
                        };
                    })
                });
            });
    </script>
</body>
</html>
```",Correct,769,770
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Horizontal Bar Chart that visualizes the Adoption Rate for each Technology Type in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Adoption Rate Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 1000px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const chartData = {};
                rows.forEach(row => {
                    const columns = row.split(',');
                    if (columns[0] === '2020') {
                        if (!chartData[columns[1]]) {
                            chartData[columns[1]] = [];
                        }
                        chartData[columns[1]].push(parseFloat(columns[2]));
                    }
                });
                const technologyTypes = Object.keys(chartData);
                const adoptionRates = technologyTypes.map(type => Math.max(...chartData[type]));
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Adoption Rate for each Technology Type in 2020'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'value',
                        position: 'top'
                    },
                    yAxis: {
                        type: 'category',
                        data: technologyTypes
                    },
                    series: [
                        {
                            name: 'Adoption Rate',
                            type: 'bar',
                            data: adoptionRates
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,770,771
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Adoption Rate and Investment.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Adoption Rate vs Investment Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Investment"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Year"", ""type"": ""nominal""},
          {""field"": ""Technology Type"", ""type"": ""nominal""},
          {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
          {""field"": ""Investment"", ""type"": ""quantitative""}
        ]
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,771,772
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Line Chart that visualizes the trend of Adoption Rate over the Year for each Technology Type.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Adoption Rate Trend</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {""field"": ""Year"", ""type"": ""temporal""},
        ""y"": {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Technology Type"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,772,773
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Adoption Rate for each Technology Type in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Adoption Rate by Technology Type in 2020</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2020""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Technology Type"", ""type"": ""nominal""},
        ""y"": {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Technology Type"", ""type"": ""nominal""},
          {""field"": ""Adoption Rate"", ""type"": ""quantitative"", ""format"": "".2f""}
        ]
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,773,774
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Pie Chart that visualizes the proportion of Adoption Rate contributed by each Technology Type in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Technology Adoption Rate Pie Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2020""},
        {""aggregate"": [{""op"": ""sum"", ""field"": ""Adoption Rate"", ""as"": ""Total Adoption Rate""}], ""groupby"": [""Technology Type""]}
      ],
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Total Adoption Rate"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Technology Type"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,774,775
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Donut Chart that visualizes the distribution of Adoption Rate among Technology Type in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Donut Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2020""}
      ],
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Technology Type"", ""type"": ""nominal""}
      },
      ""view"": {""stroke"": null},
      ""width"": 400,
      ""height"": 400
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,775,776
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Coxcomb Chart(polar area chart) to compare the Adoption Rate of different Technology Type in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coxcomb Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 500px;
      height: 500px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2020""}
      ],
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Technology Type"", ""type"": ""nominal""}
      },
      ""view"": {""stroke"": null},
      ""config"": {
        ""arc"": {""padAngle"": 0.01}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,776,777
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Radar Chart to compare the Adoption Rate of different Technology Type in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Radar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>

  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2020""}
      ],
      ""mark"": ""line"",
      ""encoding"": {
        ""theta"": {""field"": ""Technology Type"", ""type"": ""nominal"", ""scale"": {""range"": [0, 360]}},
        ""radius"": {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Technology Type"", ""type"": ""nominal""}
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""grid"": false}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,777,778
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Streamgraph that visualizes the changes of Adoption Rate over the Year for each Technology Type.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Streamgraph of Adoption Rate over Year for each Technology Type</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to make the visualization more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""area"",
      ""encoding"": {
        ""x"": {""field"": ""Year"", ""type"": ""temporal""},
        ""y"": {""field"": ""Adoption Rate"", ""type"": ""quantitative"", ""stack"": true},
        ""color"": {""field"": ""Technology Type"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,778,779
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Slopegraph to compare the Adoption Rate between 2019 and 2020 for each Technology Type.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Slopegraph</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 500,
      ""height"": 300,
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2019 || datum.Year == 2020""}
      ],
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {""field"": ""Year"", ""type"": ""nominal"", ""axis"": {""labelAngle"": 0}},
        ""y"": {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Technology Type"", ""type"": ""nominal""},
        ""detail"": {""field"": ""Technology Type"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,779,780
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Heatmap that visualizes the Adoption Rate across Technology Type and Years.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Adoption Rate Heatmap</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""rect"",
      ""encoding"": {
        ""x"": {""field"": ""Year"", ""type"": ""ordinal""},
        ""y"": {""field"": ""Technology Type"", ""type"": ""ordinal""},
        ""color"": {""field"": ""Adoption Rate"", ""type"": ""quantitative""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,780,781
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Stacked Bar Chart with Vega-Lite</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>

  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"" },
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Year"", ""type"": ""nominal""},
        ""y"": {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Technology Type"", ""type"": ""nominal""},
        ""tooltip"": [
          {""field"": ""Year"", ""type"": ""nominal""},
          {""field"": ""Technology Type"", ""type"": ""nominal""},
          {""field"": ""Adoption Rate"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""grid"": false}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,781,782
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Horizontal Bar Chart that visualizes the Adoption Rate for each Technology Type in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Adoption Rate by Technology Type in 2020</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Year == 2020""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Technology Type"", ""type"": ""nominal""},
        ""color"": {""field"": ""Technology Type"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,782,783
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot that visualizes the relationship between Visitors and Page Views. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
    .tooltip {
      position: absolute;
      background-color: #fff;
      border: 1px solid #ddd;
      padding: 5px;
      font-size: 12px;
      visibility: hidden;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('svg')
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
      .then(data => {
        data.forEach(d => {
          d['Visitors'] = +d['Visitors'];
          d['Page Views'] = +d['Page Views'];
        });

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Visitors'])])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d['Page Views'])])
          .range([height, 0]);

        const xAxis = d3.axisBottom(xScale)
          .ticks(10)
          .tickSize(-height);

        const yAxis = d3.axisLeft(yScale)
          .ticks(10)
          .tickSize(-width);

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(xAxis);

        svg.append('g')
          .call(yAxis);

        svg.append('text')
          .attr('transform', `translate(${width / 2}, ${height + margin.bottom - 5})`)
          .style('text-anchor', 'middle')
          .text('Visitors');

        svg.append('text')
          .attr('transform', `translate(-35, ${height / 2}) rotate(-90)`)
          .style('text-anchor', 'middle')
          .text('Page Views');

        const tooltip = d3.select('body')
          .append('div')
          .attr('class', 'tooltip')
          .style('opacity', 0);

        svg.selectAll('circle')
          .data(data)
          .enter()
          .append('circle')
          .attr('cx', d => xScale(d['Visitors']))
          .attr('cy', d => yScale(d['Page Views']))
          .attr('r', 5)
          .on('mouseover', (event, d) => {
            tooltip.transition()
              .duration(200)
              .style('opacity', 1);

            tooltip.html(`Visitors: ${d['Visitors']}<br>Page Views: ${d['Page Views']}`)
              .style('left', (event.pageX + 10) + 'px')
              .style('top', (event.pageY - 10) + 'px');

            svg.selectAll('circle')
              .style('opacity', 0.5);

            d3.select(event.target)
              .style('opacity', 1);
          })
          .on('mouseout', () => {
            tooltip.transition()
              .duration(200)
              .style('opacity', 0);

            svg.selectAll('circle')
              .style('opacity', 1);
          });
      });
  </script>
</body>
</html>
```",Unexpected Execution Result,783,784
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot that visualizes the relationship between Visitors and Page Views. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot with Brushing</title>
  <style>
    .chart {
      position: relative;
      display: block;
      width: 800px;
      height: 600px;
      margin: 20px auto;
    }
    .chart .brush {
      fill: none;
      stroke: steelblue;
      stroke-width: 1.5px;
      stroke-linecap: round;
    }
    .chart .brush .handle {
      fill: #666;
      +fill-opacity: .8;
      stroke: #000;
      stroke-width: 1.5px;
      stroke-linecap: round;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select("".chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
      data.forEach(d => {
        d[""Visitors""] = +d[""Visitors""];
        d[""Page Views""] = +d[""Page Views""];
      });

      const xScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Visitors""])])
        .range([0, width]);

      const yScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Page Views""])])
        .range([height, 0]);

      const brush = d3.brush()
        .extent([[0, 0], [width, height]])
        .on(""brush"", brushed)
        .on(""end"", brushended);

      svg.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScale(d[""Visitors""]))
        .attr(""cy"", d => yScale(d[""Page Views""]))
        .attr(""r"", 5)
        .attr(""fill"", ""steelblue"");

      svg.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

      svg.append(""g"")
        .call(d3.axisLeft(yScale));

      svg.append(""g"")
        .call(brush);

      function brushed(event) {
        const selection = event.selection;
        if (selection) {
          svg.selectAll(""circle"")
            .attr(""fill"", d => {
              const x = xScale(d[""Visitors""]);
              const y = yScale(d[""Page Views""]);
              return (x >= selection[0][0] && x <= selection[1][0] && y <= selection[0][1] && y >= selection[1][1]) ? ""red"" : ""steelblue"";
            });
        } else {
          svg.selectAll(""circle"")
            .attr(""fill"", ""steelblue"");
        }
      }

      function brushended(event) {
        if (!event.selection) {
          svg.selectAll(""circle"")
            .attr(""fill"", ""steelblue"");
        }
      }
    });
  </script>
</body>
</html>
```",Correct,784,785
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot that visualizes the relationship between Visitors and Page Views. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot of Visitors and Page Views</title>
    <style>
        /* set the CSS */
        body { 
            font: 12px Arial;
        }
        path { 
            stroke: steelblue; 
            stroke-opacity: .6; 
            stroke-width: 1.5px; 
        }
        .brush .extent {
            fill-opacity: .3;
            stroke: #fff;
            shape-rendering: crispEdges;
        }
        circle {
            fill: steelblue;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        // set the dimensions and margins of the graph
        var margin = {top: 20, right: 20, bottom: 30, left: 40},
            width = 800 - margin.left - margin.right,
            height = 600 - margin.top - margin.bottom;

        // append the svg object to the body of the page
        var svg = d3.select(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");

        // Read the data
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(function(data) {

            // Convert data types
            data.forEach(function(d) {
                d['Visitors'] = +d['Visitors'];
                d['Page Views'] = +d['Page Views'];
            });

            // Add zooming
            var zoom = d3.zoom()
                .scaleExtent([1, 10])
                .extent([[-Infinity, -Infinity], [Infinity, Infinity]])
                .on(""zoom"", zoomed);

            svg.call(zoom);

            // Add X axis
            var x = d3.scaleLinear()
                .domain([0, d3.max(data, function(d) { return d['Visitors']; })])
                .range([ 0, width ]);

            svg.append(""g"")
                .attr(""transform"", ""translate(0,"" + height + "")"")
                .call(d3.axisBottom(x));

            // Add Y axis
            var y = d3.scaleLinear()
                .domain([0, d3.max(data, function(d) { return d['Page Views']; })])
                .range([ height, 0]);

            svg.append(""g"")
                .call(d3.axisLeft(y));

            // Add dots
            svg.append('g')
                .selectAll(""dot"")
                .data(data)
                .enter()
                .append(""circle"")
                .attr(""cx"", function (d) { return x(d['Visitors']); } )
                .attr(""cy"", function (d) { return y(d['Page Views']); } )
                .attr(""r"", 5);

            // zoom function
            function zoomed() {
                svg.selectAll(""circle"")
                    .attr(""cx"", function (d) { return x(d['Visitors']) * d3.event.transform.k + d3.event.transform.x; } )
                    .attr(""cy"", function (d) { return y(d['Page Views']) * d3.event.transform.k + d3.event.transform.y; } );
                svg.selectAll(""g"")
                    .attr(""transform"", d3.event.transform);
            }
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,785,786
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Visitors and Page Views. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot with External Links and Tooltips</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .tooltip {
      position: absolute;
      background-color: #f9f9f9;
      border: 1px solid #ccc;
      padding: 5px;
      visibility: hidden;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"")
      .then(data => {
        data.forEach(d => {
          d.Visitors = +d[""Visitors""];
          d[""Page Views""] = +d[""Page Views""];
        });

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Visitors)])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Page Views""])])
          .range([height, 0]);

        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(xAxis);

        svg.append(""g"")
          .call(yAxis);

        svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d.Visitors))
          .attr(""cy"", d => yScale(d[""Page Views""]))
          .attr(""r"", 5)
          .on(""click"", (event, d) => {
            const url = `https://www.google.com/search?q=${d[""Traffic Source""]}`;
            window.open(url, ""_blank"");
          })
          .on(""mouseover"", (event, d) => {
            const tooltip = d3.select(""body"")
              .append(""div"")
              .attr(""class"", ""tooltip"")
              .style(""left"", (event.pageX + 10) + ""px"")
              .style(""top"", (event.pageY - 10) + ""px"")
              .style(""visibility"", ""visible"")
              .html(`Traffic Source: ${d[""Traffic Source""]}<br>Visitors: ${d.Visitors}<br>Page Views: ${d[""Page Views""]}`);
          })
          .on(""mouseout"", () => {
            d3.select("".tooltip"")
              .style(""visibility"", ""hidden"")
              .remove();
          });
      });
  </script>
</body>
</html>
```",Correct,786,787
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot with query widgets showing the Visitors and Page Views of the given dataset. Add a slider to represent the Week.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot with Query Widgets</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .slider-container {
      margin-top: 20px;
    }
  </style>
</head>
<body>
  <div id=""scatterplot""></div>
  <div class=""slider-container"">
    <input type=""range"" id=""week-slider"" min=""1"" max=""52"" value=""1"">
    <label for=""week-slider"">Week: <span id=""week-value"">1</span></label>
  </div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const svg = d3.select(""#scatterplot"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"")
      .then(data => {
        data.forEach(d => {
          d.Week = +d.Week;
          d.Visitors = +d.Visitors;
          d[""Page Views""] = +d[""Page Views""];
        });

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Visitors)])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Page Views""])])
          .range([height, 0]);

        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(xAxis);

        svg.append(""g"")
          .call(yAxis);

        const points = svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d.Visitors))
          .attr(""cy"", d => yScale(d[""Page Views""]))
          .attr(""r"", 5);

        d3.select(""#week-slider"")
          .on(""input"", function() {
            const week = +this.value;
            d3.select(""#week-value"").text(week);

            points
              .filter(d => d.Week === week)
              .attr(""opacity"", 1)
              .attr(""r"", 5);

            points
              .filter(d => d.Week !== week)
              .attr(""opacity"", 0.1)
              .attr(""r"", 2);
          });
      });
  </script>
</body>
</html>
```",Unexpected Execution Result,787,788
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot showing the Visitors of Social Media. Add animated transitions that connect these points using lines in order.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot with Animated Transitions</title>
  <style>
    /* Add some basic styling to our chart */
    .chart {
      width: 800px;
      height: 600px;
      margin: 50px auto;
    }
  </style>
</head>
<body>
  <svg class=""chart""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    // Set up the dimensions of our chart
    const margin = { top: 50, right: 50, bottom: 50, left: 50 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    // Create the SVG element
    const svg = d3.select('.chart')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    // Load the data
    d3.csv('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
      .then(data => {
        // Filter the data to only include social media traffic
        const socialMediaData = data.filter(d => d['Traffic Source'] === 'Social Media');

        // Convert the data types
        socialMediaData.forEach(d => {
          d.Week = +d.Week;
          d.Visitors = +d.Visitors;
        });

        // Create the scales
        const xScale = d3.scaleLinear()
          .domain([0, d3.max(socialMediaData, d => d.Week)])
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(socialMediaData, d => d.Visitors)])
          .range([height, 0]);

        // Create the line generator
        const line = d3.line()
          .x(d => xScale(d.Week))
          .y(d => yScale(d.Visitors));

        // Create the path element
        const path = svg.append('path')
          .datum(socialMediaData)
          .attr('fill', 'none')
          .attr('stroke', 'steelblue')
          .attr('stroke-width', 1.5)
          .attr('d', line);

        // Animate the path
        const totalLength = path.node().getTotalLength();
        path.attr('stroke-dasharray', `${totalLength} ${totalLength}`)
          .attr('stroke-dashoffset', totalLength)
          .transition()
          .duration(2000)
          .attr('stroke-dashoffset', 0);

        // Create the scatterplot
        svg.selectAll('circle')
          .data(socialMediaData)
          .enter()
          .append('circle')
          .attr('cx', d => xScale(d.Week))
          .attr('cy', d => yScale(d.Visitors))
          .attr('r', 5)
          .attr('fill', 'steelblue');

        // Add the axes
        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(xAxis);

        svg.append('g')
          .call(yAxis);
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,788,789
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Visitors of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Multi-series Line Chart</title>
    <style>
        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 2;
        }

        .line:hover {
            stroke-width: 4;
        }

        .axis text {
            font-size: 12px;
        }

        .axis path,
        .axis line {
            fill: none;
            stroke: #777;
            stroke-width: 1;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 50, right: 50, bottom: 50, left: 50 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"")
            .then(data => {
                data.forEach(d => {
                    d.Week = +d.Week;
                    d[""Visitors""] = +d[""Visitors""];
                });

                const xScale = d3.scaleLinear()
                    .domain(d3.extent(data, d => d.Week))
                    .range([0, width]);

                const yScale = d3.scaleLinear()
                    .domain([0, d3.max(data, d => d[""Visitors""])])
                    .range([height, 0]);

                const line = d3.line()
                    .x(d => xScale(d.Week))
                    .y(d => yScale(d[""Visitors""]));

                svg.append(""g"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(d3.axisBottom(xScale));

                svg.append(""g"")
                    .call(d3.axisLeft(yScale));

                svg.append(""path"")
                    .datum(data)
                    .attr(""class"", ""line"")
                    .attr(""d"", line)
                    .on(""mouseover"", () => {
                        d3.select(this)
                            .transition()
                            .duration(100)
                            .attr(""stroke-width"", 4);
                    })
                    .on(""mouseout"", () => {
                        d3.select(this)
                            .transition()
                            .duration(100)
                            .attr(""stroke-width"", 2);
                    });
            });
    </script>
</body>
</html>
```",Initialization Error,789,790
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Bar Chart that visualizes the Visitors for each Traffic Source in 2021-W01. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Visitors by Traffic Source</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .chart {
            margin: 20px;
        }
    </style>
</head>
<body>
    <div class=""chart"" id=""chart""></div>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 40 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""#chart"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"")
            .then(data => {
                data.forEach(d => {
                    d[""Week""] = d[""Week""];
                    d[""Visitors""] = +d[""Visitors""];
                });

                const week2021W01 = data.filter(d => d[""Week""] === ""2021-W01"");

                const x = d3.scaleBand()
                    .domain(week2021W01.map(d => d[""Traffic Source""]))
                    .range([0, width])
                    .padding(0.2);

                const y = d3.scaleLinear()
                    .domain([0, d3.max(week2021W01, d => d[""Visitors""])])
                    .range([height, 0]);

                svg.append(""g"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(d3.axisBottom(x));

                svg.append(""g"")
                    .call(d3.axisLeft(y));

                svg.selectAll(""bar"")
                    .data(week2021W01)
                    .enter()
                    .append(""rect"")
                    .attr(""x"", d => x(d[""Traffic Source""]))
                    .attr(""y"", d => y(d[""Visitors""]))
                    .attr(""width"", x.bandwidth())
                    .attr(""height"", d => height - y(d[""Visitors""]));

                const zoom = d3.zoom()
                    .scaleExtent([1, 10])
                    .extent([[-Infinity, -Infinity], [Infinity, Infinity]])
                    .on(""zoom"", zoomed);

                svg.call(zoom);

                function zoomed() {
                    svg.selectAll(""rect"")
                        .attr(""transform"", d3.event.transform);
                    svg.select("".x-axis"")
                        .attr(""transform"", d3.event.transform);
                    svg.select("".y-axis"")
                        .attr(""transform"", d3.event.transform);
                }
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,790,791
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Bar Chart that visualizes the Visitors for each Traffic Source in 2021-W01. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Visitors by Traffic Source</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 800px;
      height: 600px;
      border: 1px solid black;
    }
    .bar {
      fill: steelblue;
    }
    .bar:hover {
      fill: brown;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg class=""chart""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;
    const svg = d3.select(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Week""] = d[""Week""];
          d[""Visitors""] = +d[""Visitors""];
        });

        const week2021W01 = data.filter(d => d[""Week""] === ""2021-W01"");

        const x = d3.scaleBand()
          .domain(week2021W01.map(d => d[""Traffic Source""]))
          .range([0, width])
          .padding(0.2);

        const y = d3.scaleLinear()
          .domain([0, d3.max(week2021W01, d => d[""Visitors""])])
          .range([height, 0]);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(x));

        svg.append(""g"")
          .call(d3.axisLeft(y));

        const bars = svg.selectAll(""rect"")
          .data(week2021W01)
          .enter()
          .append(""rect"")
          .attr(""class"", ""bar"")
          .attr(""x"", d => x(d[""Traffic Source""]))
          .attr(""y"", d => y(d[""Visitors""]))
          .attr(""width"", x.bandwidth())
          .attr(""height"", d => height - y(d[""Visitors""]));

        let drag = d3.drag()
          .on(""start"", dragstarted)
          .on(""drag"", dragged)
          .on(""end"", dragended);

        bars.call(drag);

        function dragstarted(event, d) {
          d3.select(this).raise();
          d3.event.sourceEvent.stopPropagation();
        }

        function dragged(event, d) {
          const newX = x(d[""Traffic Source""]) + event.dx;
          d3.select(this)
            .attr(""x"", newX);
        }

        function dragended(event, d) {
          const newIndex = Math.round((d3.select(this).attr(""x"") - x(d[""Traffic Source""])) / x.bandwidth());
          const newData = week2021W01.slice();
          const removed = newData.splice(newData.indexOf(d), 1)[0];
          newData.splice(newIndex, 0, removed);
          x.domain(newData.map(d => d[""Traffic Source""]));
          svg.selectAll(""rect"")
            .transition()
            .duration(500)
            .attr(""x"", d => x(d[""Traffic Source""]));
          svg.selectAll(""g"")
            .transition()
            .duration(500)
            .call(d3.axisBottom(x));
        }
      });
  </script>
</body>
</html>
```",Execution Error,791,792
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Bar Chart that visualizes the Visitors for each Traffic Source in 2021-W01. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Visitors.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Visitors by Traffic Source</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .chart {
            margin: 40px auto;
        }
        .axis text {
            font-size: 12px;
        }
        .axis path,
        .axis line {
            fill: none;
            stroke: #777;
            stroke-width: 1;
        }
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: brown;
        }
        .sort-button {
            position: absolute;
            top: 10px;
            right: 10px;
        }
    </style>
</head>
<body>
    <svg class=""chart"" width=""800"" height=""600""></svg>
    <button class=""sort-button"" id=""sort-asc"">Sort Ascending</button>
    <button class=""sort-button"" id=""sort-desc"">Sort Descending</button>

    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 40 };
        const width = 800 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;

        const svg = d3.select("".chart"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

        const xScale = d3.scaleBand()
            .padding(0.2);

        const yScale = d3.scaleLinear()
            .range([height, 0]);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"")
            .then(data => {
                data.forEach(d => {
                    d[""Week""] = d[""Week""];
                    d[""Traffic Source""] = d[""Traffic Source""];
                    d[""Visitors""] = +d[""Visitors""];
                });

                const filteredData = data.filter(d => d[""Week""] === ""2021-W01"");

                xScale.domain(filteredData.map(d => d[""Traffic Source""]));
                yScale.domain([0, d3.max(filteredData, d => d[""Visitors""])]);

                svg.selectAll(""bar"")
                    .data(filteredData)
                    .enter()
                    .append(""rect"")
                    .attr(""class"", ""bar"")
                    .attr(""x"", d => xScale(d[""Traffic Source""]))
                    .attr(""y"", d => yScale(d[""Visitors""]))
                    .attr(""width"", xScale.bandwidth())
                    .attr(""height"", d => height - yScale(d[""Visitors""]));

                svg.append(""g"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(d3.axisBottom(xScale));

                svg.append(""g"")
                    .call(d3.axisLeft(yScale));

                d3.select(""#sort-asc"")
                    .on(""click"", () => {
                        filteredData.sort((a, b) => a[""Visitors""] - b[""Visitors""]);

                        xScale.domain(filteredData.map(d => d[""Traffic Source""]));

                        svg.selectAll(""bar"")
                            .data(filteredData)
                            .transition()
                            .duration(1000)
                            .attr(""x"", d => xScale(d[""Traffic Source""]));
                    });

                d3.select(""#sort-desc"")
                    .on(""click"", () => {
                        filteredData.sort((a, b) => b[""Visitors""] - a[""Visitors""]);

                        xScale.domain(filteredData.map(d => d[""Traffic Source""]));

                        svg.selectAll(""bar"")
                            .data(filteredData)
                            .transition()
                            .duration(1000)
                            .attr(""x"", d => xScale(d[""Traffic Source""]));
                    });
            });
    </script>
</body>
</html>
```",Initialization Error,792,793
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot that visualizes the relationship between Visitors and Page Views. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Visitors vs Page Views Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const visitors = [];
                const pageViews = [];
                csvData.forEach(row => {
                    const columns = row.split(',');
                    visitors.push(parseInt(columns[2]));
                    pageViews.push(parseInt(columns[3]));
                });
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Visitors vs Page Views Scatterplot'
                    },
                    tooltip: {
                        trigger: 'item',
                        formatter: function(params) {
                            return `Visitors: ${params.data[0]}<br>Page Views: ${params.data[1]}`;
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Visitors',
                        axisPointer: {
                            show: true,
                            type: 'line',
                            lineStyle: {
                                color: 'rgba(0,0,0,0.2)',
                                width: 2,
                                type: 'dashed'
                            }
                        }
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Page Views',
                        axisPointer: {
                            show: true,
                            type: 'line',
                            lineStyle: {
                                color: 'rgba(0,0,0,0.2)',
                                width: 2,
                                type: 'dashed'
                            }
                        }
                    },
                    series: [{
                        type: 'scatter',
                        data: visitors.map((visitor, index) => [visitor, pageViews[index]]),
                        symbolSize: 10,
                        itemStyle: {
                            opacity: 0.8
                        }
                    }]
                });
            });
    </script>
</body>
</html>
```",Execution Error,793,794
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot that visualizes the relationship between Visitors and Page Views. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const visitors = csvData.map(row => +row[2]);
                const pageViews = csvData.map(row => +row[3]);

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Visitors vs Page Views'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Visitors'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Page Views'
                    },
                    series: [{
                        type: 'scatter',
                        data: visitors.map((visitor, index) => [visitor, pageViews[index]]),
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        },
                        brush: {
                            type: 'rect'
                        }
                    }]
                });

                chart.on('brushSelected', params => {
                    const selectedData = params.batch[0].data;
                    console.log(selectedData);
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,794,795
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot that visualizes the relationship between Visitors and Page Views. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const visitors = [];
                const pageViews = [];
                csvData.forEach(row => {
                    const columns = row.split(',');
                    visitors.push(parseInt(columns[2]));
                    pageViews.push(parseInt(columns[3]));
                });
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Relationship between Visitors and Page Views'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Visitors'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Page Views'
                    },
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 100
                        },
                        {
                            start: 0,
                            end: 100
                        }
                    ],
                    series: [
                        {
                            type: 'scatter',
                            data: visitors.map((value, index) => [value, pageViews[index]])
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,795,796
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Visitors and Page Views. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Website Traffic Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const visitors = csvData.map(row => +row[2]);
                const pageViews = csvData.map(row => +row[3]);
                const regions = csvData.map(row => row[7]);
                const deviceTypes = csvData.map(row => row[8]);

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Relationship between Visitors and Page Views'
                    },
                    tooltip: {
                        trigger: 'item',
                        formatter: (params) => {
                            return `Visitors: ${params.data[0]}<br/>Page Views: ${params.data[1]}<br/>Region: ${regions[params.dataIndex]}<br/>Device Type: ${deviceTypes[params.dataIndex]}`;
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Visitors'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Page Views'
                    },
                    series: [{
                        type: 'scatter',
                        data: visitors.map((visitor, index) => [visitor, pageViews[index]]),
                        markLine: {
                            data: [
                                { type: 'max', name: 'Max' },
                                { type: 'min', name: 'Min' }
                            ]
                        },
                        markPoint: {
                            data: [
                                { type: 'max', name: 'Max' },
                                { type: 'min', name: 'Min' }
                            ]
                        }
                    }],
                    visualMap: {
                        type: 'piecewise',
                        pieces: [
                            { min: 0, max: 1000, label: 'Low' },
                            { min: 1001, max: 5000, label: 'Medium' },
                            { min: 5001, label: 'High' }
                        ]
                    }
                });

                chart.on('click', (params) => {
                    const url = `https://www.google.com/search?q=${regions[params.dataIndex]}+${deviceTypes[params.dataIndex]}`;
                    window.open(url, '_blank');
                });
            });
    </script>
</body>
</html>
```",Correct,796,797
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot with query widgets showing the Visitors and Page Views of the given dataset. Add a slider to represent the Week.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Website Traffic Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-gl@2.0.8/dist/echarts-gl.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-stat@1.1.1/dist/ecStat.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/extension/bmap.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-gl@2.0.8/dist/echarts-gl.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-stat@1.1.1/dist/ecStat.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/extension/dataTool.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js""></script>
    <style>
        #chart {
            width: 800px;
            height: 600px;
            border: 1px solid #ccc;
            padding: 10px;
        }
    </style>
</head>
<body>
    <div id=""chart""></div>
    <div id=""slider""></div>
    <script>
        $.ajax({
            type: 'GET',
            url: 'https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv',
            success: function(data) {
                var csv = $.csv.toArrays(data);
                var chartData = [];
                var weeks = [];
                for (var i = 1; i < csv.length; i++) {
                    chartData.push([parseFloat(csv[i][2]), parseFloat(csv[i][3])]);
                    weeks.push(parseInt(csv[i][0]));
                }
                var maxWeek = Math.max(...weeks);
                var minWeek = Math.min(...weeks);
                var option = {
                    xAxis: {
                        type: 'value'
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        type: 'scatter',
                        data: chartData,
                        symbolSize: 10
                    }],
                    dataZoom: [{
                        type: 'slider',
                        show: true,
                        xAxisIndex: 0,
                        filterMode: 'empty',
                        start: (minWeek / (maxWeek - minWeek)) * 100,
                        end: ((maxWeek - 1) / (maxWeek - minWeek)) * 100
                    }]
                };
                var chart = echarts.init(document.getElementById('chart'));
                chart.setOption(option);
                var slider = echarts.init(document.getElementById('slider'));
                var sliderOption = {
                    type: 'slider',
                    show: true,
                    xAxisIndex: 0,
                    filterMode: 'empty',
                    start: (minWeek / (maxWeek - minWeek)) * 100,
                    end: ((maxWeek - 1) / (maxWeek - minWeek)) * 100,
                    data: weeks,
                    labelFormatter: function(value) {
                        return 'Week ' + value;
                    }
                };
                slider.setOption(sliderOption);
                chart.on('dataZoom', function(params) {
                    var start = Math.round(params.startValue);
                    var end = Math.round(params.endValue);
                    var filteredData = [];
                    for (var i = 0; i < chartData.length; i++) {
                        if (weeks[i] >= start && weeks[i] <= end) {
                            filteredData.push(chartData[i]);
                        }
                    }
                    chart.setOption({
                        series: [{
                            data: filteredData
                        }]
                    });
                });
            }
        });
    </script>
    <script src=""https://cdn.jsdelivr.net/npm/jquery.csv@1.0.11/dist/jquery.csv.min.js""></script>
</body>
</html>
```",Initialization Error,797,798
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot showing the Visitors of Social Media. Add animated transitions that connect these points using lines in order.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Visitors of Social Media</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const socialMediaData = csvData.filter(row => row.split(',')[1] === 'Social Media');
                const weeks = socialMediaData.map(row => row.split(',')[0]);
                const visitors = socialMediaData.map(row => parseInt(row.split(',')[2]));

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    title: {
                        text: 'Visitors of Social Media'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    xAxis: {
                        type: 'category',
                        data: weeks
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            type: 'scatter',
                            data: visitors.map((value, index) => [weeks[index], value]),
                            label: {
                                show: true,
                                position: 'top'
                            },
                            encode: {
                                x: 0,
                                y: 1
                            }
                        },
                        {
                            type: 'line',
                            data: visitors.map((value, index) => [weeks[index], value]),
                            animationDuration: 3000,
                            animationDurationUpdate: 3000,
                            animationEasing: 'cubicInOut',
                            animationEasingUpdate: 'cubicInOut'
                        }
                    ],
                    animationDuration: 3000,
                    animationDurationUpdate: 3000,
                    animationEasing: 'cubicInOut',
                    animationEasingUpdate: 'cubicInOut'
                };
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,798,799
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Visitors of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Multi-Series Line Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const weeks = [];
                const trafficSources = {};
                csvData.forEach(row => {
                    const columns = row.split(',');
                    weeks.push(columns[0]);
                    const trafficSource = columns[1];
                    if (!trafficSources[trafficSource]) {
                        trafficSources[trafficSource] = [];
                    }
                    trafficSources[trafficSource].push(parseInt(columns[2]));
                });

                const series = Object.keys(trafficSources).map(trafficSource => ({
                    name: trafficSource,
                    type: 'line',
                    data: trafficSources[trafficSource],
                    emphasis: {
                        focus: 'series'
                    }
                }));

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Visitors by Traffic Source'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    legend: {
                        data: Object.keys(trafficSources)
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    toolbox: {
                        feature: {
                            saveAsImage: {}
                        }
                    },
                    xAxis: {
                        type: 'category',
                        boundaryGap: false,
                        data: weeks
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: series
                });
            });
    </script>
</body>
</html>
```",Correct,799,800
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Bar Chart that visualizes the Visitors for each Traffic Source in 2021-W01. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Visitors for each Traffic Source in 2021-W01</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [week, trafficSource, visitors] = row.split(',');
                    if (week === '2021-W01') {
                        if (!chartData[trafficSource]) {
                            chartData[trafficSource] = 0;
                        }
                        chartData[trafficSource] += parseInt(visitors);
                    }
                });
                const trafficSources = Object.keys(chartData);
                const visitorsData = Object.values(chartData);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Visitors for each Traffic Source in 2021-W01'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'category',
                        data: trafficSources
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            name: 'Visitors',
                            type: 'bar',
                            data: visitorsData
                        }
                    ],
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 100
                        },
                        {
                            start: 0,
                            end: 100
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,800,801
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Bar Chart that visualizes the Visitors for each Traffic Source in 2021-W01. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Visitors for each Traffic Source in 2021-W01</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const chartData = {};
                csvData.forEach(row => {
                    if (row[0] === '2021-W01') {
                        if (!chartData[row[1]]) {
                            chartData[row[1]] = 0;
                        }
                        chartData[row[1]] += parseInt(row[2]);
                    }
                });
                const seriesData = Object.keys(chartData).map(key => ({ name: key, value: chartData[key] }));
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    tooltip: {
                        trigger: 'item'
                    },
                    xAxis: {
                        type: 'category',
                        data: seriesData.map(item => item.name)
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        type: 'bar',
                        data: seriesData.map(item => item.value),
                        itemStyle: {
                            opacity: 0.8
                        },
                        emphasis: {
                            itemStyle: {
                                opacity: 1
                            }
                        }
                    }],
                    dataZoom: [
                        {
                            type: 'inside'
                        },
                        {
                            type: 'slider'
                        }
                    ],
                    graphic: seriesData.map((item, index) => ({
                        type: 'text',
                        position: [index, 0],
                        style: {
                            text: item.name,
                            fill: 'rgba(0, 0, 0, 0.8)',
                            fontSize: 12
                        },
                        draggable: true,
                        ondrag: (dx, dy) => {
                            const newIndex = index + Math.round(dx / 50);
                            if (newIndex >= 0 && newIndex < seriesData.length) {
                                [seriesData[index], seriesData[newIndex]] = [seriesData[newIndex], seriesData[index]];
                                chart.setOption({
                                    xAxis: {
                                        data: seriesData.map(item => item.name)
                                    },
                                    series: [{
                                        data: seriesData.map(item => item.value)
                                    }]
                                });
                            }
                        }
                    }))
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,801,802
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Bar Chart that visualizes the Visitors for each Traffic Source in 2021-W01. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Visitors.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Visitors by Traffic Source</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <select id=""sort-order"">
        <option value=""desc"">Descending</option>
        <option value=""asc"">Ascending</option>
    </select>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [week, trafficSource, visitors] = row.split(',');
                    if (week === '2021-W01') {
                        if (!chartData[trafficSource]) {
                            chartData[trafficSource] = 0;
                        }
                        chartData[trafficSource] += parseInt(visitors);
                    }
                });
                const trafficSources = Object.keys(chartData);
                const visitorsData = Object.values(chartData);
                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    xAxis: {
                        type: 'category',
                        data: trafficSources
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        data: visitorsData,
                        type: 'bar',
                        animationDuration: 2000,
                        animationEasing: 'cubicInOut'
                    }]
                };
                chart.setOption(option);
                document.getElementById('sort-order').addEventListener('change', () => {
                    const sortOrder = document.getElementById('sort-order').value;
                    if (sortOrder === 'desc') {
                        trafficSources.sort((a, b) => chartData[b] - chartData[a]);
                        visitorsData.sort((a, b) => b - a);
                    } else {
                        trafficSources.sort((a, b) => chartData[a] - chartData[b]);
                        visitorsData.sort((a, b) => a - b);
                    }
                    chart.setOption({
                        xAxis: {
                            data: trafficSources
                        },
                        series: [{
                            data: visitorsData
                        }]
                    });
                });
            });
    </script>
</body>
</html>
```",Correct,802,803
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot that visualizes the relationship between Visitors and Page Views. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Visitors vs Page Views Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to make the chart more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    // Define the Vega-Lite specification
    var spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Visitors"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Page Views"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Visitors"", ""type"": ""quantitative""},
          {""field"": ""Page Views"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""axis"": {
          ""labelFontSize"": 14,
          ""titleFontSize"": 16
        }
      }
    };

    // Embed the chart in the #vis div
    vegaEmbed(""#vis"", spec, { ""renderer"": ""canvas"" });
  </script>
</body>
</html>
```",Unexpected Execution Result,803,804
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot that visualizes the relationship between Visitors and Page Views. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Visitors vs Page Views Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Visitors"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Page Views"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Visitors"", ""type"": ""quantitative""},
          {""field"": ""Page Views"", ""type"": ""quantitative""}
        ]
      },
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x"", ""y""]}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,804,805
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot that visualizes the relationship between Visitors and Page Views. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Visitors vs Page Views Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Visitors"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Page Views"", ""type"": ""quantitative""}
      },
      ""config"": {
        ""view"": {""continuousWidth"": 400, ""continuousHeight"": 300},
        ""scale"": {""zoom"": ""wheel""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Execution Result,805,806
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Visitors and Page Views. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Scatterplot with External Links and Tooltips</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to make the chart more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    // Define the Vega-Lite specification
    var spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv""
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Visitors"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Page Views"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Visitors"", ""type"": ""quantitative""},
          {""field"": ""Page Views"", ""type"": ""quantitative""},
          {""field"": ""Traffic Source"", ""type"": ""nominal""}
        ]
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""mark"": {""tooltip"": {""content"": ""encoding""}}
      }
    };

    // Embed the Vega-Lite chart in the HTML page
    vegaEmbed(""#vis"", spec, { ""actions"": false })
      .then(function(result) {
        // Add an event listener to the chart to open a Google search for the point that you click on
        result.view.addEventListener(""click"", function(event, item) {
          if (item && item.datum) {
            var trafficSource = item.datum[""Traffic Source""];
            var url = ""https://www.google.com/search?q="" + encodeURIComponent(trafficSource);
            window.open(url, ""_blank"");
          }
        });
      })
      .catch(function(error) {
        console.error(error);
      });
  </script>
</body>
</html>
```",Correct,806,807
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot with query widgets showing the Visitors and Page Views of the given dataset. Add a slider to represent the Week.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Scatterplot with Query Widgets</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to our embed */
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Visitors"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Page Views"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Traffic Source"", ""type"": ""nominal""},
        ""tooltip"": [
          {""field"": ""Visitors"", ""type"": ""quantitative""},
          {""field"": ""Page Views"", ""type"": ""quantitative""},
          {""field"": ""Traffic Source"", ""type"": ""nominal""},
          {""field"": ""Week"", ""type"": ""quantitative""}
        ]
      },
      ""params"": [
        {
          ""name"": ""week"",
          ""value"": 1,
          ""bind"": {""input"": ""range"", ""min"": 1, ""max"": 52, ""step"": 1}
        }
      ],
      ""transform"": [
        {""filter"": ""datum.Week == week""}
      ]
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Execution Result,807,808
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot showing the Visitors of Social Media. Add animated transitions that connect these points using lines in order.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Visitors of Social Media</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum['Traffic Source'] == 'Social Media'""},
        {""sort"": [""Week""]},
        {""window"": [{""op"": ""row_number"", ""as"": ""order""}]}
      ],
      ""mark"": {
        ""type"": ""line"",
        ""point"": true
      },
      ""encoding"": {
        ""x"": {""field"": ""Week"", ""type"": ""ordinal""},
        ""y"": {""field"": ""Visitors"", ""type"": ""quantitative""},
        ""order"": {""field"": ""order"", ""type"": ""ordinal""}
      },
      ""config"": {
        ""view"": {""step"": 100}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,808,809
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Visitors of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Multi-Series Line Chart with Interactive Line Highlight</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to make the chart more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    // Define the Vega-Lite specification
    var spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {""field"": ""Week"", ""type"": ""nominal""},
        ""y"": {""field"": ""Visitors"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Traffic Source"", ""type"": ""nominal""},
        ""tooltip"": [
          {""field"": ""Week"", ""type"": ""nominal""},
          {""field"": ""Traffic Source"", ""type"": ""nominal""},
          {""field"": ""Visitors"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""labelColor"": ""#666"", ""titleColor"": ""#666""}
      }
    };

    // Embed the Vega-Lite chart in the HTML page
    vegaEmbed(""#vis"", spec, {actions: false});
  </script>
</body>
</html>
```",Unexpected Execution Result,809,810
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Bar Chart that visualizes the Visitors for each Traffic Source in 2021-W01. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Visitors by Traffic Source in 2021-W01</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0/build/vega.min.js""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0/build/vega-lite.min.js""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0/build/vega-embed.min.js""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Week === '2021-W01'""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Traffic Source"", ""type"": ""nominal""},
        ""y"": {""field"": ""Visitors"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Traffic Source"", ""type"": ""nominal""},
          {""field"": ""Visitors"", ""type"": ""quantitative""}
        ]
      },
      ""config"": {
        ""view"": {""continuousWidth"": 400, ""continuousHeight"": 300},
        ""axis"": {""labelFontSize"": 16, ""titleFontSize"": 16},
        ""legend"": {""labelFontSize"": 16, ""titleFontSize"": 16}
      }
    };

    vegaEmbed(""#vis"", spec, { ""actions"": true });
  </script>
</body>
</html>
```",Unexpected Execution Result,810,811
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Bar Chart that visualizes the Visitors for each Traffic Source in 2021-W01. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Visitors by Traffic Source in 2021-W01</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Week === '2021-W01'""},
        {""calculate"": ""datum['Traffic Source']"", ""as"": ""Traffic Source""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Traffic Source"", ""type"": ""nominal"", ""sort"": ""-y""},
        ""y"": {""field"": ""Visitors"", ""type"": ""quantitative""},
        ""tooltip"": [{""field"": ""Traffic Source""}, {""field"": ""Visitors""}]
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""domainWidth"": 1}
      },
      ""usermeta"": {""embedOptions"": {""renderer"": ""svg""}}
    };

    vegaEmbed(""#vis"", spec, {actions: false});
  </script>
</body>
</html>
```",Unexpected Execution Result,811,812
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Bar Chart that visualizes the Visitors for each Traffic Source in 2021-W01. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Visitors.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Visitors by Traffic Source</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to make the chart more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <select id=""sort-order"">
    <option value=""descending"">Descending</option>
    <option value=""ascending"">Ascending</option>
  </select>

  <script>
    // Load the data
    const dataUrl = ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"";

    // Create the visualization
    vegaEmbed(""#vis"", {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": dataUrl },
      ""transform"": [
        { ""filter"": ""datum.Week === '2021-W01'"" }
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {
          ""field"": ""Traffic Source"",
          ""type"": ""nominal"",
          ""axis"": { ""title"": ""Traffic Source"" }
        },
        ""y"": {
          ""field"": ""Visitors"",
          ""type"": ""quantitative"",
          ""axis"": { ""title"": ""Visitors"" }
        },
        ""color"": {
          ""field"": ""Traffic Source"",
          ""type"": ""nominal""
        }
      },
      ""config"": {
        ""view"": { ""stroke"": ""transparent"" },
        ""axis"": { ""labelFontSize"": 14, ""titleFontSize"": 16 }
      }
    })
    .then(function(result) {
      // Add event listener to the dropdown menu
      document.getElementById(""sort-order"").addEventListener(""change"", function() {
        const sortOrder = this.value;
        const sort = sortOrder === ""descending"" ? ""descending"" : ""ascending"";
        result.view.change(""sort"", { ""field"": ""Visitors"", ""order"": sort });
        result.view.run();
      });
    })
    .catch(console.error);
  </script>
</body>
</html>
```",Unexpected Initial Result,812,813
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Visitors and Page Views, and a Bar Chart on the right that displays Traffic Source versus Visitors.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Website Traffic Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: inline-block;
      vertical-align: top;
    }
    .scatterplot {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
    .barchart {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart scatterplot"" id=""scatterplot""></div>
  <div class=""chart barchart"" id=""barchart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const scatterplot = d3.select(""#scatterplot"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const barchart = d3.select(""#barchart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
      data.forEach(d => {
        d.Visitors = +d[""Visitors""];
        d[""Page Views""] = +d[""Page Views""];
      });

      const xScaleScatter = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.Visitors)])
        .range([0, width]);

      const yScaleScatter = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Page Views""])])
        .range([height, 0]);

      scatterplot.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScaleScatter(d.Visitors))
        .attr(""cy"", d => yScaleScatter(d[""Page Views""]))
        .attr(""r"", 5);

      scatterplot.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleScatter));

      scatterplot.append(""g"")
        .call(d3.axisLeft(yScaleScatter));

      const trafficSources = Array.from(new Set(data.map(d => d[""Traffic Source""])));

      const xScaleBar = d3.scaleBand()
        .domain(trafficSources)
        .range([0, width])
        .padding(0.2);

      const yScaleBar = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.Visitors)])
        .range([height, 0]);

      const barData = trafficSources.map(source => {
        const sourceData = data.filter(d => d[""Traffic Source""] === source);
        return {
          source,
          visitors: d3.sum(sourceData, d => d.Visitors)
        };
      });

      barchart.selectAll(""rect"")
        .data(barData)
        .enter()
        .append(""rect"")
        .attr(""x"", d => xScaleBar(d.source))
        .attr(""y"", d => yScaleBar(d.visitors))
        .attr(""width"", xScaleBar.bandwidth())
        .attr(""height"", d => height - yScaleBar(d.visitors));

      barchart.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleBar));

      barchart.append(""g"")
        .call(d3.axisLeft(yScaleBar));
    });
  </script>
</body>
</html>
```",Correct,813,814
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Visitors and Page Views, and a Bar Chart on the right that displays Traffic Source versus Visitors. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Website Traffic Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: inline-block;
      vertical-align: top;
    }
    .scatterplot {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
    .barchart {
      width: 500px;
      height: 500px;
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart scatterplot"" id=""scatterplot""></div>
  <div class=""chart barchart"" id=""barchart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const xScaleScatter = d3.scaleLinear().range([0, width]);
    const yScaleScatter = d3.scaleLinear().range([height, 0]);
    const xScaleBar = d3.scaleBand().range([0, width]).padding(0.2);
    const yScaleBar = d3.scaleLinear().range([height, 0]);

    const svgScatter = d3.select(""#scatterplot"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const svgBar = d3.select(""#barchart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
      data.forEach(d => {
        d.Visitors = +d.Visitors;
        d[""Page Views""] = +d[""Page Views""];
      });

      xScaleScatter.domain([0, d3.max(data, d => d.Visitors)]);
      yScaleScatter.domain([0, d3.max(data, d => d[""Page Views""])]);

      xScaleBar.domain(data.map(d => d[""Traffic Source""]));
      yScaleBar.domain([0, d3.max(data, d => d.Visitors)]);

      svgScatter.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleScatter));

      svgScatter.append(""g"")
        .call(d3.axisLeft(yScaleScatter));

      svgBar.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScaleBar));

      svgBar.append(""g"")
        .call(d3.axisLeft(yScaleBar));

      const brush = d3.brushX()
        .extent([[0, 0], [width, height]])
        .on(""brush"", brushed);

      svgScatter.append(""g"")
        .attr(""class"", ""brush"")
        .call(brush);

      function brushed({ selection }) {
        if (selection) {
          const [x0, x1] = selection;
          const visitorsRange = [xScaleScatter.invert(x0), xScaleScatter.invert(x1)];

          svgScatter.selectAll(""circle"")
            .classed(""highlight"", d => visitorsRange[0] <= d.Visitors && d.Visitors <= visitorsRange[1]);

          svgBar.selectAll(""rect"")
            .classed(""highlight"", d => visitorsRange[0] <= d.Visitors && d.Visitors <= visitorsRange[1]);
        } else {
          svgScatter.selectAll(""circle"")
            .classed(""highlight"", false);

          svgBar.selectAll(""rect"")
            .classed(""highlight"", false);
        }
      }

      svgScatter.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScaleScatter(d.Visitors))
        .attr(""cy"", d => yScaleScatter(d[""Page Views""]))
        .attr(""r"", 5);

      svgBar.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", d => xScaleBar(d[""Traffic Source""]))
        .attr(""y"", d => yScaleBar(d.Visitors))
        .attr(""width"", xScaleBar.bandwidth())
        .attr(""height"", d => height - yScaleBar(d.Visitors));
    });
  </script>
</body>
</html>
```",Unexpected Execution Result,814,815
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Visitors , while the pie chart represents the distribution of Page Views.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Website Traffic Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: block;
      margin: 20px auto;
    }
  </style>
</head>
<body>
  <div id=""line-chart"" class=""chart""></div>
  <div id=""pie-chart"" class=""chart""></div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 500 - margin.left - margin.right;
    const height = 300 - margin.top - margin.bottom;

    const lineChart = d3.select(""#line-chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const pieChart = d3.select(""#pie-chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left + width / 2}, ${margin.top + height / 2})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
      data.forEach(d => {
        d.Visitors = +d[""Visitors""];
        d[""Page Views""] = +d[""Page Views""];
      });

      const xScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.Week)])
        .range([0, width]);

      const yScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.Visitors)])
        .range([height, 0]);

      lineChart.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

      lineChart.append(""g"")
        .call(d3.axisLeft(yScale));

      lineChart.append(""path"")
        .datum(data)
        .attr(""fill"", ""none"")
        .attr(""stroke"", ""steelblue"")
        .attr(""stroke-width"", 1.5)
        .attr(""d"", d3.line()
          .x(d => xScale(d.Week))
          .y(d => yScale(d.Visitors)));

      const pie = d3.pie()
        .value(d => d[""Page Views""]);

      const arc = d3.arc()
        .outerRadius(width / 2 - 20)
        .innerRadius(0);

      const arcs = pieChart.selectAll(""arc"")
        .data(pie(data))
        .enter()
        .append(""path"")
        .attr(""fill"", (d, i) => d3.schemeCategory10[i])
        .attr(""d"", arc);

      const legend = pieChart.selectAll(""legend"")
        .data(pie(data))
        .enter()
        .append(""text"")
        .attr(""x"", width / 2 + 20)
        .attr(""y"", (d, i) => i * 20)
        .text(d => `Region ${d.data.Region}: ${d.value} Page Views`);
    });
  </script>
</body>
</html>
```",Initialization Error,815,816
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Visitors , while the pie chart represents the distribution of Page Views. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Page Views for the selected group.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Website Traffic Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    .line-chart {
      width: 800px;
      height: 400px;
      margin-bottom: 20px;
    }
    .pie-chart {
      width: 800px;
      height: 400px;
    }
  </style>
</head>
<body>
  <div class=""chart"">
    <svg class=""line-chart""></svg>
    <svg class=""pie-chart""></svg>
  </div>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const lineChart = d3.select('.line-chart')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    const pieChart = d3.select('.pie-chart')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left + width / 2}, ${margin.top + height / 2})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv').then(data => {
      data.forEach(d => {
        d.Week = +d.Week;
        d['Visitors'] = +d['Visitors'];
        d['Page Views'] = +d['Page Views'];
      });

      const xScale = d3.scaleLinear()
        .domain(d3.extent(data, d => d.Week))
        .range([0, width]);

      const yScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d['Visitors'])])
        .range([height, 0]);

      lineChart.append('g')
        .attr('transform', `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

      lineChart.append('g')
        .call(d3.axisLeft(yScale));

      const line = d3.line()
        .x(d => xScale(d.Week))
        .y(d => yScale(d['Visitors']));

      lineChart.append('path')
        .datum(data)
        .attr('fill', 'none')
        .attr('stroke', 'steelblue')
        .attr('stroke-width', 1.5)
        .attr('d', line);

      const brush = d3.brushX()
        .extent([[0, 0], [width, height]])
        .on('brush end', brushed);

      lineChart.append('g')
        .attr('class', 'brush')
        .call(brush);

      function brushed() {
        const selection = d3.event.selection;
        if (selection) {
          const minX = xScale.invert(selection[0]);
          const maxX = xScale.invert(selection[1]);
          const filteredData = data.filter(d => d.Week >= minX && d.Week <= maxX);

          const pieData = d3.rollup(filteredData, v => d3.sum(v, d => d['Page Views']), d => d['Traffic Source']);

          const pie = d3.pie()
            .value(d => d[1]);

          const arc = d3.arc()
            .outerRadius(Math.min(width, height) / 2 - 10)
            .innerRadius(0);

          pieChart.selectAll('path')
            .remove();

          pieChart.selectAll('path')
            .data(pie(pieData))
            .enter()
            .append('path')
            .attr('d', arc)
            .attr('fill', (d, i) => d3.schemeCategory10[i]);
        }
      }
    });
  </script>
</body>
</html>
```",Initialization Error,816,817
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Visitors, Page Views, and Bounce Rate. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot Matrix</title>
  <style>
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
    .brush .extent {
      stroke: #fff;
      fill-opacity: .125;
      shape-rendering: crispEdges;
    }
  </style>
</head>
<body>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 100, right: 100, bottom: 100, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;
    const dimensions = [""Visitors"", ""Page Views"", ""Bounce Rate""];
    const size = 200;

    const svg = d3.select(""body"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
      data.forEach(d => {
        dimensions.forEach(dim => {
          d[dim] = +d[dim];
        });
      });

      const x = dimensions.map(dim => {
        return d3.scaleLinear()
          .domain(d3.extent(data, d => d[dim]))
          .range([0, size]);
      });

      const y = dimensions.map(dim => {
        return d3.scaleLinear()
          .domain(d3.extent(data, d => d[dim]))
          .range([size, 0]);
      });

      const brush = d3.brush()
        .extent([[0, 0], [size, size]])
        .on(""brush"", brushed)
        .on(""end"", brushended);

      const cell = svg.selectAll("".cell"")
        .data(cross(dimensions, dimensions))
        .enter().append(""g"")
        .attr(""class"", ""cell"")
        .attr(""transform"", d => `translate(${d.i * size}, ${d.j * size})`);

      cell.append(""rect"")
        .attr(""class"", ""frame"")
        .attr(""x"", 0)
        .attr(""y"", 0)
        .attr(""width"", size)
        .attr(""height"", size);

      cell.append(""g"")
        .attr(""class"", ""x axis"")
        .attr(""transform"", `translate(0, ${size})`)
        .call(d3.axisBottom(x[d.i]));

      cell.append(""g"")
        .attr(""class"", ""y axis"")
        .call(d3.axisLeft(y[d.j]));

      cell.append(""g"")
        .attr(""class"", ""brush"")
        .call(brush);

      cell.selectAll(""circle"")
        .data(data)
        .enter().append(""circle"")
        .attr(""cx"", d => x[d.i](d[dimensions[d.i]]))
        .attr(""cy"", d => y[d.j](d[dimensions[d.j]]))
        .attr(""r"", 3);

      function brushed() {
        const s = d3.event.selection;
        cell.selectAll(""circle"")
          .classed(""hidden"", d => {
            return s && (
              s[0][0] > x[d.i](d[dimensions[d.i]]) ||
              s[1][0] < x[d.i](d[dimensions[d.i]]) ||
              s[0][1] > y[d.j](d[dimensions[d.j]]) ||
              s[1][1] < y[d.j](d[dimensions[d.j]])
            );
          });
      }

      function brushended() {
        cell.selectAll(""circle"")
          .classed(""hidden"", false);
      }
    });

    function cross(a, b) {
      const c = [];
      for (let i = 0; i < a.length; i++) {
        for (let j = 0; j < b.length; j++) {
          c.push({ i, j });
        }
      }
      return c;
    }
  </script>
</body>
</html>
```",Initialization Error,817,818
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a brushable Scatterplot that visualizes the relationship between Visitors and Page Views. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot with Brush</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .brush {
      fill: #ccc;
    }
    .brush .extent {
      fill-opacity: .3;
      stroke: #fff;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <table id=""table""></table>

  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 200, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const table = d3.select(""#table"");

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
      data.forEach(d => {
        d.Visitors = +d[""Visitors""];
        d[""Page Views""] = +d[""Page Views""];
      });

      const xScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.Visitors)])
        .range([0, width]);

      const yScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Page Views""])])
        .range([height, 0]);

      svg.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

      svg.append(""g"")
        .call(d3.axisLeft(yScale));

      const brush = d3.brush()
        .extent([[0, 0], [width, height]])
        .on(""brush"", brushed);

      svg.append(""g"")
        .call(brush);

      svg.selectAll(""circle"")
        .data(data)
        .enter()
        .append(""circle"")
        .attr(""cx"", d => xScale(d.Visitors))
        .attr(""cy"", d => yScale(d[""Page Views""]))
        .attr(""r"", 3);

      function brushed(event) {
        const selection = event.selection;
        const selectedData = data.filter(d => {
          return selection[0][0] <= xScale(d.Visitors) &&
            xScale(d.Visitors) <= selection[1][0] &&
            selection[0][1] <= yScale(d[""Page Views""]) &&
            yScale(d[""Page Views""]) <= selection[1][1];
        });

        table.selectAll(""tr"").remove();

        selectedData.slice(0, 20).forEach(d => {
          const row = table.append(""tr"");
          row.append(""td"").text(d.Week);
          row.append(""td"").text(d[""Traffic Source""]);
          row.append(""td"").text(d.Visitors);
          row.append(""td"").text(d[""Page Views""]);
          row.append(""td"").text(d[""Bounce Rate""]);
          row.append(""td"").text(d[""Average Session Duration""]);
          row.append(""td"").text(d[""Conversion Rate""]);
          row.append(""td"").text(d.Region);
          row.append(""td"").text(d[""Device Type""]);
        });
      }
    });
  </script>
</body>
</html>
```",Initialization Error,818,819
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a horizontal Bar Chart that shows all the data concerning Visitors, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Visitors Bar Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      position: relative;
      display: inline-block;
    }
    .minimap {
      position: absolute;
      top: 0;
      right: 0;
      width: 100px;
      height: 300px;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 120, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 300 - margin.top - margin.bottom;
    const minimapWidth = 100;
    const minimapHeight = height;

    const svg = d3.select("".chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right + minimapWidth)
      .attr(""height"", height + margin.top + margin.bottom);

    const g = svg.append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const minimapG = svg.append(""g"")
      .attr(""transform"", `translate(${width + margin.left + 20}, ${margin.top})`)
      .attr(""class"", ""minimap"");

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
      data.forEach(d => {
        d[""Visitors""] = +d[""Visitors""];
      });

      const x = d3.scaleLinear()
        .domain([0, d3.max(data, d => d[""Visitors""])])
        .range([0, width]);

      const y = d3.scaleBand()
        .domain(data.map(d => d[""Week""]))
        .range([0, height])
        .padding(0.2);

      g.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", 0)
        .attr(""y"", d => y(d[""Week""]))
        .attr(""width"", d => x(d[""Visitors""]))
        .attr(""height"", y.bandwidth());

      minimapG.selectAll(""rect"")
        .data(data)
        .enter()
        .append(""rect"")
        .attr(""x"", 0)
        .attr(""y"", d => y(d[""Week""]))
        .attr(""width"", d => x(d[""Visitors""]) / 8)
        .attr(""height"", y.bandwidth());

      g.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(x));

      g.append(""g"")
        .call(d3.axisLeft(y));

      minimapG.append(""g"")
        .attr(""transform"", `translate(0, ${minimapHeight})`)
        .call(d3.axisBottom(x.tickFormat(d3.format("".0s""))));

      minimapG.append(""g"")
        .call(d3.axisLeft(y));
    });
  </script>
</body>
</html>
```",Initialization Error,819,820
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Visitors and Page Views, and a Bar Chart on the right that displays Traffic Source versus Visitors.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Website Traffic Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
    <style>
        #chart-container {
            display: flex;
            width: 100%;
            height: 600px;
        }
        #scatterplot {
            width: 50%;
            height: 100%;
        }
        #barchart {
            width: 50%;
            height: 100%;
        }
    </style>
</head>
<body>
    <div id=""chart-container"">
        <div id=""scatterplot""></div>
        <div id=""barchart""></div>
    </div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const visitors = [];
                const pageViews = [];
                const trafficSources = {};
                csvData.forEach(row => {
                    const columns = row.split(',');
                    visitors.push(parseInt(columns[2]));
                    pageViews.push(parseInt(columns[3]));
                    const trafficSource = columns[1];
                    if (!trafficSources[trafficSource]) {
                        trafficSources[trafficSource] = 0;
                    }
                    trafficSources[trafficSource] += parseInt(columns[2]);
                });
                const trafficSourceNames = Object.keys(trafficSources);
                const trafficSourceValues = Object.values(trafficSources);

                const scatterplotChart = echarts.init(document.getElementById('scatterplot'));
                scatterplotChart.setOption({
                    title: {
                        text: 'Visitors vs Page Views'
                    },
                    xAxis: {
                        type: 'value'
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        type: 'scatter',
                        data: visitors.map((value, index) => [value, pageViews[index]])
                    }]
                });

                const barchart = echarts.init(document.getElementById('barchart'));
                barchart.setOption({
                    title: {
                        text: 'Traffic Source vs Visitors'
                    },
                    xAxis: {
                        type: 'category',
                        data: trafficSourceNames
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        type: 'bar',
                        data: trafficSourceValues
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,820,821
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Visitors and Page Views, and a Bar Chart on the right that displays Traffic Source versus Visitors. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Website Traffic Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <style>
        #chart-container {
            display: flex;
            width: 100%;
            height: 600px;
        }
        #scatterplot {
            width: 50%;
            height: 100%;
        }
        #barchart {
            width: 50%;
            height: 100%;
        }
    </style>
</head>
<body>
    <div id=""chart-container"">
        <div id=""scatterplot""></div>
        <div id=""barchart""></div>
    </div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const visitors = csvData.map(row => +row[2]);
                const pageViews = csvData.map(row => +row[3]);
                const trafficSources = [...new Set(csvData.map(row => row[1]))];
                const trafficSourceVisitors = trafficSources.map(source => {
                    const sourceData = csvData.filter(row => row[1] === source);
                    return sourceData.reduce((sum, row) => sum + +row[2], 0);
                });

                const scatterplotChart = echarts.init(document.getElementById('scatterplot'));
                const barchartChart = echarts.init(document.getElementById('barchart'));

                const option = {
                    scatterplot: {
                        title: {
                            text: 'Visitors vs Page Views'
                        },
                        xAxis: {
                            type: 'value',
                            name: 'Visitors'
                        },
                        yAxis: {
                            type: 'value',
                            name: 'Page Views'
                        },
                        series: [{
                            type: 'scatter',
                            data: visitors.map((visitor, index) => [visitor, pageViews[index]]),
                            markLine: {
                                data: [
                                    { type: 'max', name: 'Max' },
                                    { type: 'min', name: 'Min' }
                                ]
                            },
                            emphasis: {
                                focus: 'series'
                            }
                        }]
                    },
                    barchart: {
                        title: {
                            text: 'Traffic Source vs Visitors'
                        },
                        angleAxis: {
                            type: 'category',
                            data: trafficSources,
                            z: 10
                        },
                        radiusAxis: {
                            max: Math.max(...trafficSourceVisitors)
                        },
                        series: [{
                            type: 'bar',
                            data: trafficSourceVisitors,
                            coordinateSystem: 'polar',
                            emphasis: {
                                focus: 'series'
                            }
                        }]
                    }
                };

                scatterplotChart.setOption(option.scatterplot);
                barchartChart.setOption(option.barchart);

                scatterplotChart.on('brushSelected', params => {
                    const selectedData = params.selectedData;
                    const selectedVisitors = selectedData.map(data => data[0]);
                    const selectedTrafficSources = csvData.filter(row => selectedVisitors.includes(+row[2])).map(row => row[1]);
                    const selectedTrafficSourceVisitors = selectedTrafficSources.map(source => {
                        const sourceData = csvData.filter(row => row[1] === source);
                        return sourceData.reduce((sum, row) => sum + +row[2], 0);
                    });

                    const selectedSeriesData = trafficSources.map((source, index) => {
                        if (selectedTrafficSources.includes(source)) {
                            return selectedTrafficSourceVisitors[selectedTrafficSources.indexOf(source)];
                        } else {
                            return NaN;
                        }
                    });

                    barchartChart.setOption({
                        series: [{
                            data: selectedSeriesData
                        }]
                    });
                });
            });
    </script>
</body>
</html>
```",Initialization Error,821,822
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Visitors , while the pie chart represents the distribution of Page Views.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Website Traffic Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const weeks = [];
                const visitors = [];
                const pageViews = {};
                csvData.forEach(row => {
                    const columns = row.split(',');
                    weeks.push(columns[0]);
                    visitors.push(parseInt(columns[2]));
                    if (!pageViews[columns[7]]) {
                        pageViews[columns[7]] = 0;
                    }
                    pageViews[columns[7]] += parseInt(columns[3]);
                });
                const pageViewsData = Object.keys(pageViews).map(key => ({ name: key, value: pageViews[key] }));

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    grid: {
                        top: '10%',
                        bottom: '50%'
                    },
                    xAxis: {
                        type: 'category',
                        data: weeks
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            type: 'line',
                            data: visitors
                        }
                    ]
                });

                const pieChart = echarts.init(document.getElementById('chart'));
                pieChart.setOption({
                    grid: {
                        top: '60%',
                        bottom: '10%'
                    },
                    series: [
                        {
                            type: 'pie',
                            data: pageViewsData
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,822,823
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Visitors , while the pie chart represents the distribution of Page Views. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Page Views for the selected group.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Website Traffic Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <style>
        #chart {
            width: 800px;
            height: 600px;
            border: 1px solid #ccc;
            padding: 20px;
        }
    </style>
</head>
<body>
    <div id=""chart""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const weeks = csvData.map(row => row[0]);
                const visitors = csvData.map(row => parseInt(row[2]));
                const pageViews = csvData.map(row => parseInt(row[3]));

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'cross',
                            label: {
                                backgroundColor: '#6a7985'
                            }
                        }
                    },
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 100
                        },
                        {
                            start: 0,
                            end: 100
                        }
                    ],
                    grid: [
                        {
                            top: '10%',
                            left: '10%',
                            right: '10%',
                            height: '40%'
                        },
                        {
                            top: '60%',
                            left: '10%',
                            right: '10%',
                            height: '30%'
                        }
                    ],
                    xAxis: [
                        {
                            type: 'category',
                            data: weeks,
                            gridIndex: 0
                        },
                        {
                            type: 'category',
                            data: weeks,
                            gridIndex: 1
                        }
                    ],
                    yAxis: [
                        {
                            type: 'value',
                            gridIndex: 0
                        },
                        {
                            type: 'value',
                            gridIndex: 1
                        }
                    ],
                    series: [
                        {
                            name: 'Visitors',
                            type: 'line',
                            data: visitors,
                            xAxisIndex: 0,
                            yAxisIndex: 0,
                            encode: {
                                x: 0,
                                y: 1
                            }
                        },
                        {
                            name: 'Page Views',
                            type: 'pie',
                            data: pageViews.map((value, index) => ({ value, name: weeks[index] })),
                            radius: '60%',
                            center: ['50%', '50%'],
                            gridIndex: 1
                        }
                    ]
                };

                chart.setOption(option);

                chart.on('brushSelected', params => {
                    const selectedData = params.batch[0].selected[0].data;
                    const startIndex = selectedData[0].dataIndex[0];
                    const endIndex = selectedData[selectedData.length - 1].dataIndex[0];
                    const selectedPageViews = pageViews.slice(startIndex, endIndex + 1);
                    const selectedWeeks = weeks.slice(startIndex, endIndex + 1);

                    chart.setOption({
                        series: [
                            {
                                name: 'Page Views',
                                type: 'pie',
                                data: selectedPageViews.map((value, index) => ({ value, name: selectedWeeks[index] })),
                                radius: '60%',
                                center: ['50%', '50%'],
                                gridIndex: 1
                            }
                        ]
                    });
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,823,824
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Visitors, Page Views, and Bounce Rate. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/echarts-stat@1.2.0/dist/ecStat.min.js""></script>
    <style>
        #chart {
            width: 800px;
            height: 600px;
            margin: 0 auto;
        }
    </style>
</head>
<body>
    <div id=""chart""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').map(row => row.split(','));
                const headers = csvData.shift();
                const visitors = [];
                const pageViews = [];
                const bounceRate = [];
                csvData.forEach(row => {
                    visitors.push(parseFloat(row[2]));
                    pageViews.push(parseFloat(row[3]));
                    bounceRate.push(parseFloat(row[4]));
                });

                const dimensions = ['Visitors', 'Page Views', 'Bounce Rate'];
                const data = [];
                for (let i = 0; i < visitors.length; i++) {
                    data.push([visitors[i], pageViews[i], bounceRate[i]]);
                }

                const option = {
                    tooltip: {
                        position: 'top'
                    },
                    grid: {
                        top: 50
                    },
                    xAxis: {
                        type: 'value',
                        scale: true
                    },
                    yAxis: {
                        type: 'value',
                        scale: true
                    },
                    dataZoom: [
                        {
                            type: 'inside',
                            xAxisIndex: [0],
                            start: 0,
                            end: 100
                        },
                        {
                            type: 'slider',
                            xAxisIndex: [0],
                            start: 0,
                            end: 100
                        }
                    ],
                    series: [
                        {
                            name: 'Scatterplot Matrix',
                            type: 'scatterMatrix',
                            dimensions: dimensions,
                            data: data,
                            symbolSize: 10,
                            itemStyle: {
                                opacity: 0.8
                            },
                            emphasis: {
                                itemStyle: {
                                    opacity: 1
                                }
                            }
                        }
                    ]
                };

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Initialization Error,824,825
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a brushable Scatterplot that visualizes the relationship between Visitors and Page Views. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Brushable Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <div id=""table"" style=""width: 200px; height: 600px; overflow-y: auto; border: 1px solid #ccc; padding: 10px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').map(row => row.split(','));
                const headers = csvData.shift();
                const chartData = csvData.map(row => {
                    return row.reduce((obj, value, index) => {
                        obj[headers[index]] = value;
                        return obj;
                    }, {});
                });

                const chart = echarts.init(document.getElementById('chart'));
                const table = document.getElementById('table');

                chart.setOption({
                    tooltip: {
                        trigger: 'item'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Visitors'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Page Views'
                    },
                    brush: {
                        toolbox: ['rect', 'clear'],
                        xAxisIndex: 0,
                        throttleType: 'debounce',
                        throttleDelay: 300
                    },
                    series: [{
                        type: 'scatter',
                        data: chartData.map(row => [+row['Visitors'], +row['Page Views']]),
                        markLine: {
                            data: [{ type: 'max', name: 'Max' }, { type: 'min', name: 'Min' }]
                        }
                    }]
                });

                chart.on('brushSelected', params => {
                    const selectedData = params.batch[0].selected[0].data;
                    const tableHtml = selectedData.slice(0, 20).map((row, index) => {
                        return `
                            <tr>
                                <td>${index + 1}</td>
                                <td>${chartData[row.dataIndex]['Week']}</td>
                                <td>${chartData[row.dataIndex]['Traffic Source']}</td>
                                <td>${chartData[row.dataIndex]['Visitors']}</td>
                                <td>${chartData[row.dataIndex]['Page Views']}</td>
                                <td>${chartData[row.dataIndex]['Bounce Rate']}</td>
                                <td>${chartData[row.dataIndex]['Average Session Duration']}</td>
                                <td>${chartData[row.dataIndex]['Conversion Rate']}</td>
                                <td>${chartData[row.dataIndex]['Region']}</td>
                                <td>${chartData[row.dataIndex]['Device Type']}</td>
                            </tr>
                        `;
                    }).join('');
                    table.innerHTML = `
                        <table>
                            <tr>
                                <th>No.</th>
                                <th>Week</th>
                                <th>Traffic Source</th>
                                <th>Visitors</th>
                                <th>Page Views</th>
                                <th>Bounce Rate</th>
                                <th>Average Session Duration</th>
                                <th>Conversion Rate</th>
                                <th>Region</th>
                                <th>Device Type</th>
                            </tr>
                            ${tableHtml}
                        </table>
                    `;
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,825,826
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a horizontal Bar Chart that shows all the data concerning Visitors, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Visitors Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 1000px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const visitorsData = csvData.map(row => row.split(',')).map(row => [row[0], parseInt(row[2])]);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '20%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'value',
                        position: 'top'
                    },
                    yAxis: {
                        type: 'category',
                        data: visitorsData.map(row => row[0]),
                        axisLine: {
                            show: false
                        },
                        axisTick: {
                            show: false
                        }
                    },
                    series: [
                        {
                            name: 'Visitors',
                            type: 'bar',
                            data: visitorsData.map(row => row[1]),
                            label: {
                                show: true,
                                position: 'right'
                            }
                        }
                    ],
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 10
                        },
                        {
                            show: true,
                            type: 'slider',
                            start: 0,
                            end: 10,
                            xAxisIndex: [0],
                            height: 20,
                            bottom: 0,
                            borderColor: 'transparent',
                            backgroundColor: '#ccc',
                            fillerColor: '#aaa',
                            handleIcon: 'M8.2,13.8H7.8V16.2H6.2V13.8H5.8V10.2H6.2V7.8H7.8V10.2H8.2V13.8Z',
                            handleSize: '120%',
                            handleStyle: {
                                color: '#fff'
                            },
                            textStyle: {
                                color: '#333'
                            },
                            borderColor: '#ccc',
                            borderRadius: 0,
                            borderWidth: 0,
                            buttonStyle: {
                                borderColor: '#ccc',
                                borderWidth: 0,
                                borderRadius: 0,
                                backgroundColor: '#ddd'
                            }
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,826,827
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Visitors and Page Views, and a Bar Chart on the right that displays Traffic Source versus Visitors.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Website Traffic Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: row;
    }
  </style>
</head>
<body>
  <div id=""vis"">
    <div id=""scatterplot""></div>
    <div id=""barchart""></div>
  </div>

  <script>
    const scatterplotSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Visitors"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Page Views"", ""type"": ""quantitative""}
      }
    };

    const barchartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"" },
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Traffic Source"", ""type"": ""nominal"", ""sort"": ""-y""},
        ""y"": {""field"": ""Visitors"", ""type"": ""quantitative"", ""aggregate"": ""sum""}
      }
    };

    vegaEmbed(""#scatterplot"", scatterplotSpec);
    vegaEmbed(""#barchart"", barchartSpec);
  </script>
</body>
</html>
```",Correct,827,828
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Visitors and Page Views, and a Bar Chart on the right that displays Traffic Source versus Visitors. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Website Traffic Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: row;
    }
    #scatterplot {
      width: 50%;
    }
    #barchart {
      width: 50%;
    }
  </style>
</head>
<body>
  <div id=""vis"">
    <div id=""scatterplot""></div>
    <div id=""barchart""></div>
  </div>

  <script>
    const scatterplotSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"" },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Visitors"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Page Views"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Traffic Source"", ""type"": ""nominal""}
      },
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x"", ""y""]}
      }
    };

    const barchartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"" },
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Traffic Source"", ""type"": ""nominal"", ""axis"": {""labelAngle"": 0}},
        ""y"": {""field"": ""Visitors"", ""type"": ""quantitative""},
        ""color"": {""condition"": {""test"": ""datum.Traffic Source === 'Organic'"", ""value"": ""steelblue""}, ""value"": ""gray""}
      }
    };

    vegaEmbed(""#scatterplot"", scatterplotSpec).then(function(result) {
      const scatterplotView = result.view;
      vegaEmbed(""#barchart"", barchartSpec).then(function(result) {
        const barchartView = result.view;
        scatterplotView.addSignalListener(""brush"", function(name, value) {
          barchartView.signal(""brush"", value);
          barchartView.run();
        });
      });
    });
  </script>
</body>
</html>
```",Unexpected Execution Result,828,829
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Visitors , while the pie chart represents the distribution of Page Views.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Website Traffic Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
  </style>
</head>
<body>
  <div id=""vis"">
    <div id=""line-chart""></div>
    <div id=""pie-chart""></div>
  </div>

  <script>
    const lineChartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"" },
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {""field"": ""Week"", ""type"": ""nominal""},
        ""y"": {""field"": ""Visitors"", ""type"": ""quantitative""}
      }
    };

    const pieChartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"" },
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Page Views"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Region"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#line-chart"", lineChartSpec);
    vegaEmbed(""#pie-chart"", pieChartSpec);
  </script>
</body>
</html>
```",Correct,829,830
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Visitors , while the pie chart represents the distribution of Page Views. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Page Views for the selected group.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Website Traffic Visualization</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
  </style>
</head>
<body>
  <div id=""vis"">
    <div id=""line-chart""></div>
    <div id=""pie-chart""></div>
  </div>

  <script>
    const lineChartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"" },
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {""field"": ""Week"", ""type"": ""nominal""},
        ""y"": {""field"": ""Visitors"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Week"", ""type"": ""nominal""},
          {""field"": ""Visitors"", ""type"": ""quantitative""}
        ]
      },
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x""]}
      }
    };

    const pieChartSpec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"" },
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Page Views"", ""type"": ""quantitative"", ""aggregate"": ""sum""},
        ""color"": {""field"": ""Region"", ""type"": ""nominal""}
      },
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x""], ""on"": ""mouseover"", ""empty"": ""none""}
      }
    };

    vegaEmbed(""#line-chart"", lineChartSpec, { ""actions"": false });
    vegaEmbed(""#pie-chart"", pieChartSpec, { ""actions"": false });

    const lineChartView = vega.View.fromElement(""#line-chart svg"");
    const pieChartView = vega.View.fromElement(""#pie-chart svg"");

    lineChartView.addEventListener(""mousedown"", function(event, item) {
      const brush = lineChartView.getState().get(""brush"");
      if (brush) {
        const start = brush[0];
        const end = brush[1];
        const filteredData = lineChartView.data().filter(function(d) {
          return d.Week >= start && d.Week <= end;
        });
        pieChartView.change(""source_0"", vega.changeset().remove(vega.truthy).insert(filteredData));
        pieChartView.run();
      }
    });
  </script>
</body>
</html>
```",Unexpected Execution Result,830,831
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Visitors, Page Views, and Bounce Rate. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Scatterplot Matrix</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    /* Add some basic styling to make the chart more presentable */
    body {
      font-family: Arial, sans-serif;
    }
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    // Define the data and the chart specification
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""isValid(datum.Visitors) && isValid(datum['Page Views']) && isValid(datum['Bounce Rate'])""}
      ],
      ""mark"": ""point"",
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x"", ""y""]}
      },
      ""encoding"": {
        ""x"": {""field"": ""Visitors"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Page Views"", ""type"": ""quantitative""},
        ""color"": {""condition"": {""selection"": ""brush"", ""value"": ""steelblue""}, ""value"": ""grey""}
      },
      ""facet"": {
        ""row"": {""field"": ""Bounce Rate"", ""type"": ""quantitative"", ""header"": {""title"": null}},
        ""column"": {""field"": ""Visitors"", ""type"": ""quantitative"", ""header"": {""title"": null}}
      },
      ""spec"": {
        ""mark"": ""point"",
        ""encoding"": {
          ""x"": {""field"": ""Page Views"", ""type"": ""quantitative""},
          ""y"": {""field"": ""Bounce Rate"", ""type"": ""quantitative""},
          ""color"": {""condition"": {""selection"": ""brush"", ""value"": ""steelblue""}, ""value"": ""grey""}
        }
      }
    };

    // Create the chart
    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Initialization Error,831,832
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a brushable Scatterplot that visualizes the relationship between Visitors and Page Views. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Brushable Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 600,
      ""height"": 400,
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Visitors"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Page Views"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Week"", ""type"": ""nominal""},
          {""field"": ""Traffic Source"", ""type"": ""nominal""},
          {""field"": ""Bounce Rate"", ""type"": ""quantitative""},
          {""field"": ""Average Session Duration"", ""type"": ""quantitative""},
          {""field"": ""Conversion Rate"", ""type"": ""quantitative""},
          {""field"": ""Region"", ""type"": ""nominal""},
          {""field"": ""Device Type"", ""type"": ""nominal""}
        ]
      },
      ""selection"": {
        ""brush"": {""type"": ""interval"", ""encodings"": [""x"", ""y""]}
      }
    };

    const spec2 = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""width"": 200,
      ""height"": 400,
      ""data"": {
        ""name"": ""brush""
      },
      ""mark"": ""table"",
      ""encoding"": {
        ""x"": {""field"": ""Week"", ""type"": ""nominal""},
        ""y"": {""field"": ""Traffic Source"", ""type"": ""nominal""},
        ""detail"": [
          {""field"": ""Visitors"", ""type"": ""quantitative""},
          {""field"": ""Page Views"", ""type"": ""quantitative""},
          {""field"": ""Bounce Rate"", ""type"": ""quantitative""},
          {""field"": ""Average Session Duration"", ""type"": ""quantitative""},
          {""field"": ""Conversion Rate"", ""type"": ""quantitative""},
          {""field"": ""Region"", ""type"": ""nominal""},
          {""field"": ""Device Type"", ""type"": ""nominal""}
        ]
      },
      ""transform"": [
        {""limit"": 20}
      ]
    };

    vegaEmbed(""#vis"", spec, {actions: false});
    vegaEmbed(""#vis"", spec2, {actions: false});
  </script>
</body>
</html>
```",Unexpected Initial Result,832,833
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a horizontal Bar Chart that shows all the data concerning Visitors, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Visitors Bar Chart with Minimap</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
  <style>
    #vis {
      width: 800px;
      height: 600px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""hconcat"": [
        {
          ""mark"": ""bar"",
          ""encoding"": {
            ""x"": {""field"": ""Visitors"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Week"", ""type"": ""nominal"", ""sort"": ""-x""},
            ""tooltip"": [{""field"": ""Visitors"", ""type"": ""quantitative""}]
          },
          ""width"": 600,
          ""height"": 600
        },
        {
          ""mark"": ""bar"",
          ""encoding"": {
            ""x"": {""field"": ""Visitors"", ""type"": ""quantitative"", ""aggregate"": ""sum""},
            ""y"": {""field"": ""Week"", ""type"": ""nominal"", ""sort"": ""-x""},
            ""tooltip"": [{""field"": ""Visitors"", ""type"": ""quantitative""}]
          },
          ""width"": 200,
          ""height"": 600,
          ""transform"": [{""filter"": ""datum.Visitors > 0""}]
        }
      ]
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,833,834
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot that visualizes the relationship between Visitors and Page Views.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Scatterplot: Visitors vs Page Views</title>
  <style>
    /* Add some basic styling */
    body {
      font-family: Arial, sans-serif;
    }
    #chart {
      width: 800px;
      height: 600px;
      border: 1px solid black;
    }
  </style>
</head>
<body>
  <svg id=""chart""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    // Set up the dimensions and margins
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    // Create the SVG
    const svg = d3.select(""#chart"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    // Load the data
    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"")
      .then(data => {
        // Convert data types
        data.forEach(d => {
          d[""Visitors""] = +d[""Visitors""];
          d[""Page Views""] = +d[""Page Views""];
        });

        // Create scales
        const xScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Visitors""])])
          .range([0, width]);
        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Page Views""])])
          .range([height, 0]);

        // Create axes
        const xAxis = d3.axisBottom(xScale);
        const yAxis = d3.axisLeft(yScale);
        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(xAxis);
        svg.append(""g"")
          .call(yAxis);

        // Add axis labels
        svg.append(""text"")
          .attr(""transform"", `translate(${width / 2}, ${height + margin.bottom - 5})`)
          .style(""text-anchor"", ""middle"")
          .text(""Visitors"");
        svg.append(""text"")
          .attr(""transform"", `rotate(-90) translate(${-height / 2}, ${-margin.left + 15})`)
          .style(""text-anchor"", ""middle"")
          .text(""Page Views"");

        // Create scatterplot
        svg.selectAll(""circle"")
          .data(data)
          .enter()
          .append(""circle"")
          .attr(""cx"", d => xScale(d[""Visitors""]))
          .attr(""cy"", d => yScale(d[""Page Views""]))
          .attr(""r"", 5);
      });
  </script>
</body>
</html>
```",Correct,834,835
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Line Chart that visualizes the trend of Visitors over the Week for each Traffic Source.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Visitors Trend Over Week for Each Traffic Source</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 40px auto;
    }
  </style>
</head>
<body>
  <svg class=""chart"" width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select("".chart"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"")
      .then(data => {
        data.forEach(d => {
          d.Week = +d.Week;
          d.Visitors = +d.Visitors;
        });

        const trafficSources = [...new Set(data.map(d => d[""Traffic Source""]))];

        const xScale = d3.scaleLinear()
          .domain(d3.extent(data, d => d.Week))
          .range([0, width]);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d.Visitors)])
          .range([height, 0]);

        const line = d3.line()
          .x(d => xScale(d.Week))
          .y(d => yScale(d.Visitors));

        const groups = svg.selectAll(""g"")
          .data(trafficSources)
          .enter()
          .append(""g"");

        groups.append(""path"")
          .datum(d => data.filter(f => f[""Traffic Source""] === d))
          .attr(""d"", line)
          .attr(""stroke"", (d, i) => d3.schemeCategory10[i])
          .attr(""stroke-width"", 2)
          .attr(""fill"", ""none"");

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));

        svg.append(""text"")
          .attr(""x"", width / 2)
          .attr(""y"", height + margin.bottom - 5)
          .attr(""text-anchor"", ""middle"")
          .text(""Week"");

        svg.append(""text"")
          .attr(""x"", -height / 2)
          .attr(""y"", -margin.top + 15)
          .attr(""text-anchor"", ""middle"")
          .attr(""transform"", ""rotate(-90)"")
          .text(""Visitors"");

        groups.append(""text"")
          .datum(d => d)
          .attr(""x"", width + 10)
          .attr(""y"", (d, i) => height - i * 20)
          .text(d => d);
      });
  </script>
</body>
</html>
```",Initialization Error,835,836
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Bar Chart that visualizes the Visitors for each Traffic Source in 2021-W01.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Visitors by Traffic Source in 2021-W01</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .bar {
      fill: steelblue;
    }
    .bar:hover {
      fill: brown;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Week""] = d[""Week""];
          d[""Visitors""] = +d[""Visitors""];
        });

        const week2021W01 = data.filter(d => d[""Week""] === ""2021-W01"");

        const trafficSources = [...new Set(week2021W01.map(d => d[""Traffic Source""]))];

        const xScale = d3.scaleBand()
          .domain(trafficSources)
          .range([0, width])
          .padding(0.2);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(week2021W01, d => d[""Visitors""])])
          .range([height, 0]);

        svg.selectAll(""rect"")
          .data(week2021W01)
          .enter()
          .append(""rect"")
          .attr(""class"", ""bar"")
          .attr(""x"", d => xScale(d[""Traffic Source""]))
          .attr(""y"", d => yScale(d[""Visitors""]))
          .attr(""width"", xScale.bandwidth())
          .attr(""height"", d => height - yScale(d[""Visitors""]));

        const xAxis = d3.axisBottom(xScale);
        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(xAxis);

        const yAxis = d3.axisLeft(yScale);
        svg.append(""g"")
          .call(yAxis);
      });
  </script>
</body>
</html>
```",Correct,836,837
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Pie Chart that visualizes the proportion of Visitors contributed by each Traffic Source in 2021-W01.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Traffic Source Pie Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    #chart {
      width: 500px;
      height: 500px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 20, left: 20 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Week""] = d[""Week""];
          d[""Visitors""] = +d[""Visitors""];
        });

        const filteredData = data.filter(d => d[""Week""] === ""2021-W01"");

        const trafficSources = Array.from(new Set(filteredData.map(d => d[""Traffic Source""])));

        const pie = d3.pie()
          .value(d => d[""Visitors""]);

        const arcs = svg.selectAll(""arc"")
          .data(pie(filteredData))
          .enter()
          .append(""g"")
          .attr(""class"", ""arc"");

        arcs.append(""path"")
          .attr(""d"", d3.arc()
            .innerRadius(0)
            .outerRadius(Math.min(width, height) / 2)
          )
          .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

        arcs.append(""text"")
          .attr(""transform"", d => `translate(${d3.arc().innerRadius(0).outerRadius(Math.min(width, height) / 2).centroid(d)})`)
          .attr(""text-anchor"", ""middle"")
          .text(d => {
            const trafficSource = filteredData.find(f => f[""Visitors""] === d.value);
            return trafficSource[""Traffic Source""];
          });

        const legend = svg.selectAll(""legend"")
          .data(trafficSources)
          .enter()
          .append(""g"")
          .attr(""class"", ""legend"")
          .attr(""transform"", (d, i) => `translate(0, ${i * 20})`);

        legend.append(""rect"")
          .attr(""x"", width / 2 + 10)
          .attr(""y"", 10)
          .attr(""width"", 10)
          .attr(""height"", 10)
          .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

        legend.append(""text"")
          .attr(""x"", width / 2 + 25)
          .attr(""y"", 20)
          .text(d => d);
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,837,838
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Donut Chart that visualizes the distribution of Visitors among Traffic Source in 2021-W01.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Donut Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 500px;
      height: 500px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 20, left: 20 };
    const width = 500 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Week""] = d[""Week""];
          d[""Visitors""] = +d[""Visitors""];
        });

        const filteredData = data.filter(d => d[""Week""] === ""2021-W01"");

        const trafficSources = Array.from(new Set(filteredData.map(d => d[""Traffic Source""])));

        const visitorsByTrafficSource = trafficSources.map(source => {
          const visitors = filteredData.filter(d => d[""Traffic Source""] === source).reduce((acc, d) => acc + d[""Visitors""], 0);
          return { source, visitors };
        });

        const pie = d3.pie()
          .value(d => d.visitors);

        const arc = d3.arc()
          .outerRadius(width / 2 - 50)
          .innerRadius(width / 2 - 150);

        const arcs = svg.selectAll(""arc"")
          .data(pie(visitorsByTrafficSource))
          .enter()
          .append(""path"")
          .attr(""d"", arc)
          .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

        const text = svg.selectAll(""text"")
          .data(pie(visitorsByTrafficSource))
          .enter()
          .append(""text"")
          .attr(""transform"", d => `translate(${arc.centroid(d)})`)
          .attr(""dy"", ""0.35em"")
          .text(d => `${d.data.source}: ${d.data.visitors}`);
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,838,839
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Coxcomb Chart(polar area chart) to compare the Visitors of different Traffic Source in 2021-W01.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Coxcomb Chart</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      width: 600px;
      height: 600px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 20, left: 20 };
    const width = 600 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('.chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
      .then(data => {
        data.forEach(d => {
          d['Week'] = d['Week'].split('-');
          d['Year'] = parseInt(d['Week'][0]);
          d['Week'] = parseInt(d['Week'][1]);
          d['Visitors'] = parseInt(d['Visitors']);
        });

        const filteredData = data.filter(d => d['Year'] === 2021 && d['Week'] === 1);

        const trafficSources = [...new Set(filteredData.map(d => d['Traffic Source']))];
        const visitors = filteredData.map(d => d['Visitors']);

        const maxVisitors = Math.max(...visitors);
        const scale = d3.scaleLinear()
          .domain([0, maxVisitors])
          .range([0, Math.PI * 2]);

        const arcs = svg.selectAll('arc')
          .data(filteredData)
          .enter()
          .append('path')
          .attr('d', d => {
            const startAngle = scale(0);
            const endAngle = scale(d['Visitors']);
            return d3.arc()
              .innerRadius(0)
              .outerRadius(Math.sqrt(d['Visitors']))
              .startAngle(startAngle)
              .endAngle(endAngle)();
          })
          .attr('fill', (d, i) => d3.schemeCategory10[i % 10])
          .attr('transform', `translate(${width / 2}, ${height / 2})`);

        const labels = svg.selectAll('text')
          .data(filteredData)
          .enter()
          .append('text')
          .text(d => d['Traffic Source'])
          .attr('x', (d, i) => Math.cos(scale(d['Visitors']) / 2) * (Math.sqrt(d['Visitors']) + 10))
          .attr('y', (d, i) => Math.sin(scale(d['Visitors']) / 2) * (Math.sqrt(d['Visitors']) + 10))
          .attr('text-anchor', 'middle')
          .attr('transform', `translate(${width / 2}, ${height / 2})`);
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,839,840
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Radar Chart to compare the Visitors of different Traffic Source in 2021-W01.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Radar Chart</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .radar-chart {
            position: relative;
        }
        .radar-chart .axis text {
            font-size: 12px;
        }
        .radar-chart .axis line, .radar-chart .axis path {
            stroke: #ddd;
        }
        .radar-chart .area {
            fill-opacity: 0.5;
        }
    </style>
</head>
<body>
    <svg width=""600"" height=""600"" class=""radar-chart""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = { top: 50, right: 50, bottom: 50, left: 50 };
        const width = 600 - margin.left - margin.right;
        const height = 600 - margin.top - margin.bottom;
        const svg = d3.select('.radar-chart')
            .append('g')
            .attr('transform', `translate(${margin.left}, ${margin.top})`);
        d3.csv('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(data => {
                data.forEach(d => {
                    d['Week'] = d['Week'];
                    d['Visitors'] = +d['Visitors'];
                });
                const week2021W01 = data.filter(d => d['Week'] === '2021-W01');
                const trafficSources = [...new Set(week2021W01.map(d => d['Traffic Source']))];
                const maxVisitors = Math.max(...week2021W01.map(d => d['Visitors']));
                const angleScale = d3.scalePoint()
                    .domain(trafficSources)
                    .range([0, 2 * Math.PI]);
                const radiusScale = d3.scaleLinear()
                    .domain([0, maxVisitors])
                    .range([0, Math.min(width, height) / 2]);
                const line = d3.lineRadial()
                    .angle(d => angleScale(d['Traffic Source']))
                    .radius(d => radiusScale(d['Visitors']))
                    .curve(d3.curveCardinal);
                const areas = svg.selectAll('.area')
                    .data([week2021W01])
                    .enter()
                    .append('path')
                    .attr('class', 'area')
                    .attr('d', line)
                    .attr('stroke', 'black')
                    .attr('fill', 'blue');
                const axis = svg.selectAll('.axis')
                    .data([0, 1, 2, 3, 4, 5])
                    .enter()
                    .append('g')
                    .attr('class', 'axis')
                    .attr('transform', d => `rotate(${d * 60})`);
                axis.append('line')
                    .attr('x1', 0)
                    .attr('y1', 0)
                    .attr('x2', 0)
                    .attr('y2', -Math.min(width, height) / 2);
                axis.append('text')
                    .attr('x', 0)
                    .attr('y', -Math.min(width, height) / 2 - 10)
                    .text(d => trafficSources[d]);
                const ticks = svg.selectAll('.ticks')
                    .data([0, 1, 2, 3, 4, 5])
                    .enter()
                    .append('g')
                    .attr('class', 'ticks')
                    .attr('transform', d => `rotate(${d * 60})`);
                ticks.selectAll('.tick')
                    .data([0.2, 0.4, 0.6, 0.8])
                    .enter()
                    .append('line')
                    .attr('x1', 0)
                    .attr('y1', d => -radiusScale(maxVisitors * d))
                    .attr('x2', 0)
                    .attr('y2', -radiusScale(maxVisitors * d) - 5);
                ticks.selectAll('.tick-text')
                    .data([0.2, 0.4, 0.6, 0.8])
                    .enter()
                    .append('text')
                    .attr('x', 0)
                    .attr('y', d => -radiusScale(maxVisitors * d) - 10)
                    .text(d => Math.round(maxVisitors * d));
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,840,841
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Streamgraph that visualizes the changes of Visitors over the Week for each Traffic Source.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Streamgraph</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 20px;
    }
  </style>
</head>
<body>
  <div class=""chart"" id=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 500 - margin.top - margin.bottom;

    const svg = d3.select(""#chart"")
      .append(""svg"")
      .attr(""width"", width + margin.left + margin.right)
      .attr(""height"", height + margin.top + margin.bottom)
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
      data.forEach(d => {
        d.Week = +d.Week;
        d.Visitors = +d.Visitors;
      });

      const trafficSources = Array.from(new Set(data.map(d => d[""Traffic Source""])));

      const xScale = d3.scaleLinear()
        .domain(d3.extent(data, d => d.Week))
        .range([0, width]);

      const yScale = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.Visitors)])
        .range([height, 0]);

      const zScale = d3.scaleOrdinal(d3.schemeCategory10)
        .domain(trafficSources);

      const stack = d3.stack()
        .keys(trafficSources)
        .value((d, key) => d[key] ? d[key].Visitors : 0)
        .order(d3.stackOrderNone)
        .offset(d3.stackOffsetWiggle);

      const stackedData = stack(data);

      const area = d3.area()
        .x(d => xScale(d.data.Week))
        .y0(d => yScale(d[0]))
        .y1(d => yScale(d[1]))
        .curve(d3.curveBasis);

      svg.selectAll(""path"")
        .data(stackedData)
        .enter()
        .append(""path"")
        .attr(""d"", area)
        .attr(""fill"", d => zScale(d.key));

      svg.append(""g"")
        .attr(""transform"", `translate(0, ${height})`)
        .call(d3.axisBottom(xScale));

      svg.append(""g"")
        .call(d3.axisLeft(yScale));

      svg.append(""g"")
        .selectAll(""text"")
        .data(trafficSources)
        .enter()
        .append(""text"")
        .attr(""x"", width + 10)
        .attr(""y"", (d, i) => i * 20 + 10)
        .attr(""fill"", d => zScale(d))
        .text(d => d);
    });
  </script>
</body>
</html>
```",Unexpected Initial Result,841,842
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Slopegraph to compare the Visitors between 2021-W04 and 2021-W05 for each Traffic Source.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Slopegraph</title>
  <style>
    .line {
      stroke: #666;
      stroke-width: 1.5px;
    }
    .circle {
      fill: #666;
      stroke: #fff;
      stroke-width: 1.5px;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
      .append(""g"")
      .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"")
      .then(data => {
        data.forEach(d => {
          d[""Visitors""] = +d[""Visitors""];
        });

        const weeks = [""2021-W04"", ""2021-W05""];
        const trafficSources = [...new Set(data.map(d => d[""Traffic Source""]))];

        const xScale = d3.scalePoint()
          .domain(weeks)
          .range([0, width])
          .padding(1);

        const yScale = d3.scaleLinear()
          .domain([0, d3.max(data, d => d[""Visitors""])])
          .range([height, 0]);

        svg.selectAll(""line"")
          .data(trafficSources)
          .enter()
          .append(""line"")
          .attr(""class"", ""line"")
          .attr(""x1"", d => xScale(weeks[0]))
          .attr(""y1"", d => yScale(data.find(e => e[""Traffic Source""] === d && e[""Week""] === weeks[0])[""Visitors""]))
          .attr(""x2"", d => xScale(weeks[1]))
          .attr(""y2"", d => yScale(data.find(e => e[""Traffic Source""] === d && e[""Week""] === weeks[1])[""Visitors""]));

        svg.selectAll(""circle"")
          .data(trafficSources)
          .enter()
          .append(""circle"")
          .attr(""class"", ""circle"")
          .attr(""cx"", d => xScale(weeks[0]))
          .attr(""cy"", d => yScale(data.find(e => e[""Traffic Source""] === d && e[""Week""] === weeks[0])[""Visitors""]))
          .attr(""r"", 5);

        svg.selectAll(""circle2"")
          .data(trafficSources)
          .enter()
          .append(""circle"")
          .attr(""class"", ""circle"")
          .attr(""cx"", d => xScale(weeks[1]))
          .attr(""cy"", d => yScale(data.find(e => e[""Traffic Source""] === d && e[""Week""] === weeks[1])[""Visitors""]))
          .attr(""r"", 5);

        svg.selectAll(""text"")
          .data(trafficSources)
          .enter()
          .append(""text"")
          .attr(""x"", d => xScale(weeks[0]) - 10)
          .attr(""y"", d => yScale(data.find(e => e[""Traffic Source""] === d && e[""Week""] === weeks[0])[""Visitors""]) + 5)
          .text(d => d);

        svg.selectAll(""text2"")
          .data(trafficSources)
          .enter()
          .append(""text"")
          .attr(""x"", d => xScale(weeks[1]) + 10)
          .attr(""y"", d => yScale(data.find(e => e[""Traffic Source""] === d && e[""Week""] === weeks[1])[""Visitors""]) + 5)
          .text(d => d);

        svg.append(""g"")
          .attr(""transform"", `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append(""g"")
          .call(d3.axisLeft(yScale));
      });
  </script>
</body>
</html>
```",Correct,842,843
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Heatmap that visualizes the Visitors across Traffic Source and Weeks.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Heatmap</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .tooltip {
      position: absolute;
      padding: 10px;
      font-size: 12px;
      background-color: #fff;
      border: 1px solid #ddd;
      border-radius: 5px;
      pointer-events: none;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 50, right: 50, bottom: 100, left: 100 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('svg')
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
      .then(data => {
        data.forEach(d => {
          d.Week = +d.Week;
          d['Visitors'] = +d['Visitors'];
        });

        const weeks = Array.from(new Set(data.map(d => d.Week)));
        const trafficSources = Array.from(new Set(data.map(d => d['Traffic Source'])));

        const xScale = d3.scaleBand()
          .domain(weeks)
          .range([0, width])
          .padding(0.2);

        const yScale = d3.scaleBand()
          .domain(trafficSources)
          .range([height, 0])
          .padding(0.2);

        const colorScale = d3.scaleSequential()
          .domain([0, d3.max(data, d => d['Visitors'])])
          .interpolator(d3.interpolateBlues);

        const heatmap = svg.selectAll('rect')
          .data(data)
          .enter()
          .append('rect')
          .attr('x', d => xScale(d.Week))
          .attr('y', d => yScale(d['Traffic Source']))
          .attr('width', xScale.bandwidth())
          .attr('height', yScale.bandwidth())
          .attr('fill', d => colorScale(d['Visitors']));

        const tooltip = d3.select('body')
          .append('div')
          .attr('class', 'tooltip')
          .style('opacity', 0);

        heatmap.on('mouseover', (event, d) => {
          tooltip.transition()
            .duration(200)
            .style('opacity', 1);
          tooltip.html(`Week: ${d.Week}<br>Traffic Source: ${d['Traffic Source']}<br>Visitors: ${d['Visitors']}`)
            .style('left', (event.pageX) + 'px')
            .style('top', (event.pageY - 28) + 'px');
        })
          .on('mouseout', () => {
            tooltip.transition()
              .duration(500)
              .style('opacity', 0);
          });

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append('g')
          .call(d3.axisLeft(yScale));

        svg.append('text')
          .attr('transform', 'rotate(-90)')
          .attr('y', 6)
          .attr('dy', '.71em')
          .style('text-anchor', 'end')
          .text('Traffic Source');

        svg.append('text')
          .attr('y', height + margin.bottom - 10)
          .attr('x', width / 2)
          .style('text-anchor', 'middle')
          .text('Week');
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,843,844
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Stacked Bar Chart</title>
  <style>
    .chart {
      width: 800px;
      height: 600px;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <div class=""chart""></div>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('.chart')
      .append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
      .then(data => {
        data.forEach(d => {
          d['Visitors'] = +d['Visitors'];
          d['Page Views'] = +d['Page Views'];
        });

        const keys = ['Visitors', 'Page Views'];

        const x = d3.scaleBand()
          .domain(data.map(d => d['Week']))
          .range([0, width])
          .padding(0.2);

        const y = d3.scaleLinear()
          .domain([0, d3.max(data, d => d3.max(keys, key => d[key]))])
          .range([height, 0]);

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(x));

        svg.append('g')
          .call(d3.axisLeft(y));

        const stackedData = d3.stack()
          .keys(keys)
          (data);

        svg.selectAll('layers')
          .data(stackedData)
          .enter()
          .append('g')
          .attr('class', 'layer')
          .attr('fill', (d, i) => i === 0 ? 'blue' : 'red')
          .selectAll('rect')
          .data(d => d)
          .enter()
          .append('rect')
          .attr('x', d => x(d.data['Week']))
          .attr('y', d => y(d[1]))
          .attr('height', d => y(d[0]) - y(d[1]))
          .attr('width', x.bandwidth());
      });
  </script>
</body>
</html>
```",Unexpected Initial Result,844,845
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Horizontal Bar Chart that visualizes the Visitors for each Traffic Source in 2021-W01.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>Visitors by Traffic Source in 2021-W01</title>
  <style>
    body {
      font-family: Arial, sans-serif;
    }
    .chart {
      margin: 40px;
    }
    .bar {
      fill: steelblue;
    }
    .bar:hover {
      fill: brown;
    }
    .axis text {
      font-size: 12px;
    }
    .axis path,
    .axis line {
      fill: none;
      stroke: #777;
      stroke-width: 1;
    }
  </style>
</head>
<body>
  <svg width=""800"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v7.min.js""></script>
  <script>
    const margin = { top: 40, right: 20, bottom: 30, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 600 - margin.top - margin.bottom;

    const svg = d3.select('svg')
      .append('g')
      .attr('transform', `translate(${margin.left}, ${margin.top})`);

    d3.csv('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
      .then(data => {
        data.forEach(d => {
          d['Visitors'] = +d['Visitors'];
        });

        const filteredData = data.filter(d => d['Week'] === '2021-W01');

        const xScale = d3.scaleLinear()
          .domain([0, d3.max(filteredData, d => d['Visitors'])])
          .range([0, width]);

        const yScale = d3.scaleBand()
          .domain(filteredData.map(d => d['Traffic Source']))
          .range([height, 0])
          .padding(0.2);

        svg.selectAll('rect')
          .data(filteredData)
          .enter()
          .append('rect')
          .attr('class', 'bar')
          .attr('x', 0)
          .attr('y', d => yScale(d['Traffic Source']))
          .attr('width', d => xScale(d['Visitors']))
          .attr('height', yScale.bandwidth());

        svg.append('g')
          .attr('transform', `translate(0, ${height})`)
          .call(d3.axisBottom(xScale));

        svg.append('g')
          .call(d3.axisLeft(yScale));
      });
  </script>
</body>
</html>
```",Correct,845,846
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot that visualizes the relationship between Visitors and Page Views.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Visitors vs Page Views Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const visitors = [];
                const pageViews = [];
                csvData.forEach(row => {
                    const columns = row.split(',');
                    visitors.push(parseInt(columns[2]));
                    pageViews.push(parseInt(columns[3]));
                });
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Visitors vs Page Views Scatterplot'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'cross'
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Visitors'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Page Views'
                    },
                    series: [{
                        type: 'scatter',
                        data: visitors.map((visitor, index) => [visitor, pageViews[index]])
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,846,847
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Line Chart that visualizes the trend of Visitors over the Week for each Traffic Source.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Visitors Trend Over Week for Each Traffic Source</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const trafficSources = [...new Set(csvData.map(row => row.split(',')[1]))];
                const weeks = [...new Set(csvData.map(row => row.split(',')[0]))].sort((a, b) => a - b);
                const seriesData = trafficSources.map(source => {
                    const sourceData = csvData.filter(row => row.split(',')[1] === source);
                    return weeks.map(week => {
                        const weekData = sourceData.find(row => row.split(',')[0] === week);
                        return weekData ? weekData.split(',')[2] : 0;
                    });
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Visitors Trend Over Week for Each Traffic Source'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    legend: {
                        data: trafficSources
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    toolbox: {
                        feature: {
                            saveAsImage: {}
                        }
                    },
                    xAxis: {
                        type: 'category',
                        boundaryGap: false,
                        data: weeks
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: trafficSources.map((source, index) => ({
                        name: source,
                        type: 'line',
                        data: seriesData[index]
                    }))
                });
            });
    </script>
</body>
</html>
```",Correct,847,848
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Bar Chart that visualizes the Visitors for each Traffic Source in 2021-W01.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Visitors by Traffic Source in 2021-W01</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const columns = row.split(',');
                    if (columns[0] === '2021-W01') {
                        const trafficSource = columns[1];
                        const visitors = parseInt(columns[2]);
                        if (chartData[trafficSource]) {
                            chartData[trafficSource] += visitors;
                        } else {
                            chartData[trafficSource] = visitors;
                        }
                    }
                });
                const trafficSources = Object.keys(chartData);
                const visitorsData = Object.values(chartData);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Visitors by Traffic Source in 2021-W01'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'category',
                        data: trafficSources
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            name: 'Visitors',
                            type: 'bar',
                            data: visitorsData
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,848,849
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Pie Chart that visualizes the proportion of Visitors contributed by each Traffic Source in 2021-W01.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Traffic Source Pie Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const chartData = {};
                rows.forEach(row => {
                    const columns = row.split(',');
                    if (columns[0] === '2021-W01') {
                        const trafficSource = columns[1];
                        const visitors = parseInt(columns[2]);
                        if (chartData[trafficSource]) {
                            chartData[trafficSource] += visitors;
                        } else {
                            chartData[trafficSource] = visitors;
                        }
                    }
                });
                const seriesData = Object.keys(chartData).map(key => ({ name: key, value: chartData[key] }));
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Traffic Source Pie Chart in 2021-W01'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    series: [
                        {
                            type: 'pie',
                            data: seriesData,
                            emphasis: {
                                itemStyle: {
                                    shadowBlur: 10,
                                    shadowOffsetX: 0,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            }
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,849,850
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Donut Chart that visualizes the distribution of Visitors among Traffic Source in 2021-W01.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Visitors Distribution by Traffic Source</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const columns = row.split(',');
                    if (columns[0] === '2021-W01') {
                        const trafficSource = columns[1];
                        const visitors = parseInt(columns[2]);
                        if (chartData[trafficSource]) {
                            chartData[trafficSource] += visitors;
                        } else {
                            chartData[trafficSource] = visitors;
                        }
                    }
                });
                const seriesData = Object.keys(chartData).map(key => ({ name: key, value: chartData[key] }));
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Visitors Distribution by Traffic Source in 2021-W01',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    legend: {
                        orient: 'vertical',
                        left: 'left'
                    },
                    series: [
                        {
                            type: 'pie',
                            radius: ['40%', '70%'],
                            avoidLabelOverlap: false,
                            label: {
                                show: false,
                                position: 'center'
                            },
                            emphasis: {
                                label: {
                                    show: true,
                                    fontSize: '40',
                                    fontWeight: 'bold'
                                }
                            },
                            labelLine: {
                                show: false
                            },
                            data: seriesData
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,850,851
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Coxcomb Chart(polar area chart) to compare the Visitors of different Traffic Source in 2021-W01.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Coxcomb Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const [Week, TrafficSource, Visitors] = row.split(',');
                    if (Week === '2021-W01') {
                        if (!chartData[TrafficSource]) {
                            chartData[TrafficSource] = 0;
                        }
                        chartData[TrafficSource] += parseInt(Visitors);
                    }
                });
                const seriesData = Object.keys(chartData).map(key => ({ name: key, value: chartData[key] }));
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    series: [
                        {
                            type: 'pie',
                            radius: ['50%', '70%'],
                            avoidLabelOverlap: false,
                            label: {
                                show: false,
                                position: 'center'
                            },
                            labelLine: {
                                show: false
                            },
                            data: seriesData
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,851,852
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Radar Chart to compare the Visitors of different Traffic Source in 2021-W01.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Radar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const columns = row.split(',');
                    if (columns[0] === '2021-W01') {
                        if (!chartData[columns[1]]) {
                            chartData[columns[1]] = parseInt(columns[2]);
                        } else {
                            chartData[columns[1]] += parseInt(columns[2]);
                        }
                    }
                });
                const trafficSources = Object.keys(chartData);
                const visitors = Object.values(chartData);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    radar: {
                        indicator: trafficSources.map(source => ({ name: source, max: Math.max(...visitors) })),
                        radius: 80,
                        center: ['50%', '50%'],
                    },
                    series: [{
                        type: 'radar',
                        data: [{ value: visitors }],
                        symbol: 'none',
                        lineStyle: {
                            color: 'rgba(255, 255, 255, 0.5)',
                        },
                        areaStyle: {
                            color: 'rgba(255, 255, 255, 0.2)',
                        },
                    }],
                    angleAxis: {
                        type: 'category',
                        data: trafficSources,
                        z: 10,
                    },
                    axisLine: {
                        lineStyle: {
                            color: 'rgba(255, 255, 255, 0.5)',
                        },
                    },
                    splitLine: {
                        lineStyle: {
                            color: 'rgba(255, 255, 255, 0.5)',
                        },
                    },
                });
            });
    </script>
</body>
</html>
```",Initialization Error,852,853
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Streamgraph that visualizes the changes of Visitors over the Week for each Traffic Source.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Streamgraph</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const trafficSources = [...new Set(csvData.map(row => row.split(',')[1]))];
                const weeks = [...new Set(csvData.map(row => row.split(',')[0]))].sort();
                const seriesData = trafficSources.map(source => {
                    const sourceData = csvData.filter(row => row.split(',')[1] === source).map(row => row.split(',')[2]);
                    return {
                        name: source,
                        type: 'streamgraph',
                        stack: '总量',
                        emphasis: {
                            focus: 'series'
                        },
                        data: sourceData
                    };
                });
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'line',
                            lineStyle: {
                                color: 'rgba(0,0,0,0.2)',
                                width: 1,
                                type: 'solid'
                            }
                        }
                    },
                    legend: {
                        data: trafficSources
                    },
                    singleAxis: {
                        top: 50,
                        bottom: 50,
                        axisTick: {},
                        axisLabel: {},
                        type: 'category',
                        axisLine: {
                            lineStyle: {
                                color: '#ddd'
                            }
                        },
                        data: weeks
                    },
                    series: seriesData
                });
            });
    </script>
</body>
</html>
```",Initialization Error,853,854
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Slopegraph to compare the Visitors between 2021-W04 and 2021-W05 for each Traffic Source.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Slopegraph</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const weeks = ['2021-W04', '2021-W05'];
                const trafficSources = [...new Set(csvData.map(row => row[1]))];
                const visitorsData = weeks.map(week => trafficSources.map(source => {
                    const row = csvData.find(row => row[0] === week && row[1] === source);
                    return row ? parseInt(row[2]) : 0;
                }));

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Visitors Slopegraph'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: [
                        {
                            type: 'category',
                            data: trafficSources,
                            axisTick: {
                                alignWithLabel: true
                            }
                        }
                    ],
                    yAxis: [
                        {
                            type: 'value'
                        }
                    ],
                    series: weeks.map((week, index) => ({
                        name: week,
                        type: 'line',
                        data: visitorsData[index],
                        lineStyle: {
                            opacity: 0.4
                        },
                        symbol: 'circle',
                        symbolSize: 10,
                        label: {
                            show: true,
                            position: 'top'
                        }
                    }))
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,854,855
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Heatmap that visualizes the Visitors across Traffic Source and Weeks.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Heatmap</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const weeks = [...new Set(csvData.map(row => row.split(',')[0]))];
                const trafficSources = [...new Set(csvData.map(row => row.split(',')[1]))];
                const heatmapData = weeks.map(week => trafficSources.map(trafficSource => {
                    const row = csvData.find(row => row.split(',')[0] === week && row.split(',')[1] === trafficSource);
                    return row ? parseInt(row.split(',')[2]) : 0;
                }));

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Visitors across Traffic Source and Weeks'
                    },
                    tooltip: {
                        position: 'top'
                    },
                    grid: {
                        height: '50%',
                        top: '10%'
                    },
                    xAxis: {
                        type: 'category',
                        data: trafficSources,
                        splitArea: {
                            show: true
                        }
                    },
                    yAxis: {
                        type: 'category',
                        data: weeks,
                        splitArea: {
                            show: true
                        }
                    },
                    visualMap: {
                        min: 0,
                        max: Math.max(...heatmapData.flat()),
                        calculable: true,
                        orient: 'horizontal',
                        left: 'center',
                        bottom: '15%'
                    },
                    series: [{
                        name: 'Visitors',
                        type: 'heatmap',
                        data: heatmapData.map((row, index) => row.map((value, colIndex) => [colIndex, index, value])),
                        label: {
                            show: true
                        },
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,855,856
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Website Traffic Stacked Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const weeks = [];
                const trafficSources = [];
                const visitors = [];
                const pageViews = [];
                const bounceRates = [];
                const averageSessionDurations = [];
                const conversionRates = [];

                csvData.forEach(row => {
                    const columns = row.split(',');
                    weeks.push(columns[0]);
                    trafficSources.push(columns[1]);
                    visitors.push(parseInt(columns[2]));
                    pageViews.push(parseInt(columns[3]));
                    bounceRates.push(parseFloat(columns[4]));
                    averageSessionDurations.push(parseFloat(columns[5]));
                    conversionRates.push(parseFloat(columns[6]));
                });

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Website Traffic Stacked Bar Chart'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    legend: {
                        data: ['Visitors', 'Page Views', 'Bounce Rate', 'Average Session Duration', 'Conversion Rate']
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'category',
                        data: weeks
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            name: 'Visitors',
                            type: 'bar',
                            stack: 'total',
                            data: visitors
                        },
                        {
                            name: 'Page Views',
                            type: 'bar',
                            stack: 'total',
                            data: pageViews
                        },
                        {
                            name: 'Bounce Rate',
                            type: 'bar',
                            stack: 'total',
                            data: bounceRates
                        },
                        {
                            name: 'Average Session Duration',
                            type: 'bar',
                            stack: 'total',
                            data: averageSessionDurations
                        },
                        {
                            name: 'Conversion Rate',
                            type: 'bar',
                            stack: 'total',
                            data: conversionRates
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,856,857
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Horizontal Bar Chart that visualizes the Visitors for each Traffic Source in 2021-W01.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Visitors by Traffic Source in 2021-W01</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts@5.4.0/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1);
                const chartData = {};
                csvData.forEach(row => {
                    const columns = row.split(',');
                    if (columns[0] === '2021-W01') {
                        const trafficSource = columns[1];
                        const visitors = parseInt(columns[2]);
                        if (chartData[trafficSource]) {
                            chartData[trafficSource] += visitors;
                        } else {
                            chartData[trafficSource] = visitors;
                        }
                    }
                });
                const trafficSources = Object.keys(chartData);
                const visitorsData = Object.values(chartData);
                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Visitors by Traffic Source in 2021-W01'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'value',
                        position: 'top'
                    },
                    yAxis: {
                        type: 'category',
                        data: trafficSources
                    },
                    series: [
                        {
                            name: 'Visitors',
                            type: 'bar',
                            data: visitorsData
                        }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,857,858
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot that visualizes the relationship between Visitors and Page Views.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Visitors vs Page Views Scatterplot</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {""field"": ""Visitors"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Page Views"", ""type"": ""quantitative""},
        ""tooltip"": [
          {""field"": ""Visitors"", ""type"": ""quantitative""},
          {""field"": ""Page Views"", ""type"": ""quantitative""}
        ]
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,858,859
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Line Chart that visualizes the trend of Visitors over the Week for each Traffic Source.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Visitors Trend Over Week for Each Traffic Source</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {""field"": ""Week"", ""type"": ""nominal""},
        ""y"": {""field"": ""Visitors"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Traffic Source"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,859,860
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Bar Chart that visualizes the Visitors for each Traffic Source in 2021-W01.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Visitors by Traffic Source in 2021-W01</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Week === '2021-W01'""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Traffic Source"", ""type"": ""nominal""},
        ""y"": {""field"": ""Visitors"", ""type"": ""quantitative""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,860,861
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Pie Chart that visualizes the proportion of Visitors contributed by each Traffic Source in 2021-W01.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Visitors by Traffic Source in 2021-W01</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Week === '2021-W01'""},
        {""aggregate"": [{""op"": ""sum"", ""field"": ""Visitors"", ""as"": ""Total Visitors""}], ""groupby"": [""Traffic Source""]}
      ],
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Total Visitors"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Traffic Source"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,861,862
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Donut Chart that visualizes the distribution of Visitors among Traffic Source in 2021-W01.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Donut Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2""></script>
  <style>
    #vis {
      width: 500px;
      height: 500px;
    }
  </style>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Week === '2021-W01'""},
        {""calculate"": ""datum.Visitors"", ""as"": ""value""}
      ],
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""value"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Traffic Source"", ""type"": ""nominal""}
      },
      ""view"": {""stroke"": null},
      ""width"": 500,
      ""height"": 500
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,862,863
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Coxcomb Chart(polar area chart) to compare the Visitors of different Traffic Source in 2021-W01.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Coxcomb Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Week === '2021-W01'""},
        {""calculate"": ""datum.Visitors / 1000"", ""as"": ""Visitors (thousands)""}
      ],
      ""mark"": ""arc"",
      ""encoding"": {
        ""theta"": {""field"": ""Visitors (thousands)"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Traffic Source"", ""type"": ""nominal""}
      },
      ""view"": {""stroke"": null},
      ""config"": {
        ""arc"": {""padAngle"": 0.01},
        ""view"": {""strokeWidth"": 0}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,863,864
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Radar Chart to compare the Visitors of different Traffic Source in 2021-W01.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Radar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Week === '2021-W01'""},
        {""calculate"": ""datum.Visitors"", ""as"": ""value""}
      ],
      ""mark"": ""line"",
      ""encoding"": {
        ""theta"": {""field"": ""Traffic Source"", ""type"": ""nominal""},
        ""radius"": {""field"": ""value"", ""type"": ""quantitative""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Unexpected Initial Result,864,865
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Streamgraph that visualizes the changes of Visitors over the Week for each Traffic Source.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Streamgraph of Visitors over Week for each Traffic Source</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""area"",
      ""encoding"": {
        ""x"": {""field"": ""Week"", ""type"": ""ordinal""},
        ""y"": {""field"": ""Visitors"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Traffic Source"", ""type"": ""nominal""}
      },
      ""transform"": [
        {""stack"": ""Visitors"", ""groupby"": [""Week""], ""as"": [""Visitors""]}
      ]
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,865,866
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Slopegraph to compare the Visitors between 2021-W04 and 2021-W05 for each Traffic Source.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Slopegraph</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Week === '2021-W04' || datum.Week === '2021-W05'""},
        {""calculate"": ""datum.Week === '2021-W04' ? '2021-W04' : '2021-W05'"", ""as"": ""WeekNew""}
      ],
      ""mark"": ""line"",
      ""encoding"": {
        ""x"": {""field"": ""WeekNew"", ""type"": ""nominal"", ""axis"": {""labelAngle"": 0}},
        ""y"": {""field"": ""Visitors"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Traffic Source"", ""type"": ""nominal""},
        ""detail"": {""field"": ""Traffic Source"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,866,867
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Heatmap that visualizes the Visitors across Traffic Source and Weeks.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Visitors Heatmap</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""rect"",
      ""encoding"": {
        ""x"": {""field"": ""Week"", ""type"": ""nominal""},
        ""y"": {""field"": ""Traffic Source"", ""type"": ""nominal""},
        ""color"": {""field"": ""Visitors"", ""type"": ""quantitative""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,867,868
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Stacked Bar Chart</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Traffic Source"", ""type"": ""nominal""},
        ""y"": {""field"": ""Visitors"", ""type"": ""quantitative""},
        ""color"": {""field"": ""Region"", ""type"": ""nominal""},
        ""tooltip"": [
          {""field"": ""Traffic Source"", ""type"": ""nominal""},
          {""field"": ""Visitors"", ""type"": ""quantitative""},
          {""field"": ""Region"", ""type"": ""nominal""}
        ]
      },
      ""config"": {
        ""view"": {""stroke"": ""transparent""},
        ""axis"": {""domainWidth"": 1}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,868,869
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Horizontal Bar Chart that visualizes the Visitors for each Traffic Source in 2021-W01.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <title>Visitors by Traffic Source in 2021-W01</title>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {""filter"": ""datum.Week === '2021-W01'""}
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""x"": {""field"": ""Visitors"", ""type"": ""quantitative""},
        ""y"": {""field"": ""Traffic Source"", ""type"": ""nominal""},
        ""color"": {""field"": ""Traffic Source"", ""type"": ""nominal""}
      }
    };

    vegaEmbed(""#vis"", spec);
  </script>
</body>
</html>
```",Correct,869,870
