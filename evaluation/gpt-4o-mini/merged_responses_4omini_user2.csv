title,Prompt,dataset,library,view_type,response,evaluation,originalIndex,Prompt Number
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot that visualizes the relationship between Units Produced and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatterplot {
            display: block;
            margin: auto;
        }
        .tooltip {
            position: absolute;
            text-align: center;
            width: 60px;
            height: 28px;
            padding: 2px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <svg class=""scatterplot"" width=""800"" height=""500""></svg>
    <script>
        const svg = d3.select("".scatterplot""),
              width = +svg.attr(""width""),
              height = +svg.attr(""height"");

        const x = d3.scaleLinear().range([40, width - 40]);
        const y = d3.scaleLinear().range([height - 40, 20]);

        const xAxis = d3.axisBottom(x);
        const yAxis = d3.axisLeft(y);

        const tooltip = d3.select(""body"").append(""div"")
                          .attr(""class"", ""tooltip"")
                          .style(""opacity"", 0);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
            data.forEach(d => {
                d[""Units Produced""] = +d[""Units Produced""];
                d[""Revenue""] = +d[""Revenue""];
            });

            x.domain(d3.extent(data, d => d[""Units Produced""])).nice();
            y.domain(d3.extent(data, d => d[""Revenue""])).nice();

            svg.append(""g"")
               .attr(""class"", ""x axis"")
               .attr(""transform"", `translate(0,${height - 40})`)
               .call(xAxis);

            svg.append(""g"")
               .attr(""class"", ""y axis"")
               .attr(""transform"", ""translate(40,0)"")
               .call(yAxis);

            svg.selectAll("".dot"")
               .data(data)
               .enter().append(""circle"")
               .attr(""class"", ""dot"")
               .attr(""cx"", d => x(d[""Units Produced""]))
               .attr(""cy"", d => y(d[""Revenue""]))
               .attr(""r"", 5)
               .attr(""transform"", ""translate(0,0)"")
               .on(""mouseover"", function(event, d) {
                   tooltip.transition()
                          .duration(200)
                          .style(""opacity"", .9);
                   tooltip.html(`Units: ${d[""Units Produced""]}<br/>Revenue: $${d[""Revenue""]}`)
                          .style(""left"", (event.pageX + 5) + ""px"")
                          .style(""top"", (event.pageY - 28) + ""px"");
                   d3.select(this).attr(""r"", 7);
               })
               .on(""mouseout"", function(d) {
                   tooltip.transition()
                          .duration(500)
                          .style(""opacity"", 0);
                   d3.select(this).attr(""r"", 5);
               });
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,0,1
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot that visualizes the relationship between Units Produced and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .dot {
            stroke: #000;
            stroke-width: 1.5px;
        }
        .highlight {
            stroke: orange;
            stroke-width: 3px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>

    <script>
        const margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = 800 - margin.left - margin.right,
              height = 500 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
            data.forEach(d => {
                d['Units Produced'] = +d['Units Produced'];
                d['Revenue'] = +d['Revenue'];
            });

            x.domain(d3.extent(data, d => d['Units Produced'])).nice();
            y.domain(d3.extent(data, d => d['Revenue'])).nice();

            svg.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .call(d3.axisLeft(y));

            const dots = svg.selectAll("".dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => x(d['Units Produced']))
                .attr(""cy"", d => y(d['Revenue']))
                .attr(""r"", 5)
                .on(""mouseover"", function(event, d) {
                    d3.select(this).attr(""class"", ""highlight"");
                })
                .on(""mouseout"", function(event, d) {
                    d3.select(this).attr(""class"", ""dot"");
                })
                .on(""click"", brush);

            const brush = d3.brush()
                .extent([[0, 0], [width, height]])
                .on(""brush end"", brushed);

            svg.append(""g"")
                .attr(""class"", ""brush"")
                .call(brush);

            function brushed(event) {
                const selection = d3.event.selection;
                if (selection) {
                    const [[x0, y0], [x1, y1]] = selection;
                    dots.classed(""selected"", d => {
                        const cx = x(d['Units Produced']),
                              cy = y(d['Revenue']);
                        return x0 <= cx && cx <= x1 && y0 <= cy && cy <= y1;
                    });
                }
            }
        });
    </script>
</body>
</html>
```",Initialization Error,1,2
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot that visualizes the relationship between Units Produced and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Scatterplot</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .scatterplot {
            font-family: Arial, sans-serif;
        }
        .point {
            fill: steelblue;
            stroke: white;
            stroke-width: 1.5px;
        }
    </style>
</head>
<body>
    <svg class=""scatterplot"" width=""800"" height=""600""></svg>
    <script>
        const width = 800;
        const height = 600;

        const svg = d3.select("".scatterplot"")
            .attr(""width"", width)
            .attr(""height"", height);

        const margin = {top: 20, right: 30, bottom: 30, left: 40};
        const x = d3.scaleLinear().range([margin.left, width - margin.right]);
        const y = d3.scaleLinear().range([height - margin.bottom, margin.top]);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
            data.forEach(d => {
                d['Units Produced'] = +d['Units Produced'];
                d['Revenue'] = +d['Revenue'];
            });

            x.domain(d3.extent(data, d => d['Units Produced'])).nice();
            y.domain(d3.extent(data, d => d['Revenue'])).nice();

            svg.append(""g"")
                .attr(""transform"", `translate(0,${height - margin.bottom})`)
                .call(d3.axisBottom(x));
            svg.append(""g"")
                .attr(""transform"", `translate(${margin.left},0)`)
                .call(d3.axisLeft(y));

            svg.append(""g"")
                .selectAll(""circle"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""point"")
                .attr(""cx"", d => x(d['Units Produced']))
                .attr(""cy"", d => y(d['Revenue']))
                .attr(""r"", 3);

            svg.call(d3.zoom()
                .scaleExtent([1, 10])
                .on(""zoom"", (event) => {
                    svg.attr(""transform"", event.transform);
                    svg.selectAll(""circle"")
                        .attr(""transform"", event.transform);
                    svg.select(""g.x-axis"").call(d3.axisBottom(x).scale(event.transform.rescaleX(x)));
                    svg.select(""g.y-axis"").call(d3.axisLeft(y).scale(event.transform.rescaleY(y)));
                }));
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,2,3
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Units Produced and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Units Produced vs Revenue</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .scatter {
            fill-opacity: .7;
        }
        .tooltip {
            position: absolute;
            text-align: center;
            width: auto;
            padding: 5px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
    </style>
</head>
<body>

<svg width=""800"" height=""600""></svg>
<div class=""tooltip"" style=""display: none;""></div>

<script>
    const margin = { top: 20, right: 20, bottom: 30, left: 40 },
          width = 800 - margin.left - margin.right,
          height = 600 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
        .append(""g"")
        .attr(""transform"", `translate(${margin.left},${margin.top})`);

    const x = d3.scaleLinear().range([0, width]);
    const y = d3.scaleLinear().range([height, 0]);

    const xAxis = d3.axisBottom(x);
    const yAxis = d3.axisLeft(y);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
        data.forEach(d => {
            d['Units Produced'] = +d['Units Produced'];
            d['Revenue'] = +d['Revenue'];
        });

        x.domain(d3.extent(data, d => d['Units Produced'])).nice();
        y.domain(d3.extent(data, d => d['Revenue'])).nice();

        svg.append(""g"")
            .attr(""class"", ""x axis"")
            .attr(""transform"", `translate(0,${height})`)
            .call(xAxis);

        svg.append(""g"")
            .attr(""class"", ""y axis"")
            .call(yAxis);

        const tooltip = d3.select("".tooltip"");

        svg.selectAll("".dot"")
            .data(data)
            .enter().append(""circle"")
            .attr(""class"", ""scatter"")
            .attr(""r"", 5)
            .attr(""cx"", d => x(d['Units Produced']))
            .attr(""cy"", d => y(d['Revenue']))
            .on(""mouseover"", (event, d) => {
                tooltip.transition()
                       .duration(200)
                       .style(""display"", ""block"");
                tooltip.html(`Year: ${d.Year}<br>Crop: ${d['Crop Type']}<br>Units Produced: ${d['Units Produced']}<br>Revenue: $${d['Revenue']}`)
                       .style(""left"", (event.pageX + 5) + ""px"")
                       .style(""top"", (event.pageY - 28) + ""px"");
            })
            .on(""mouseout"", () => {
                tooltip.transition()
                       .duration(500)
                       .style(""display"", ""none"");
            })
            .on(""click"", d => {
                window.open(`https://www.google.com/search?q=${d['Crop Type']}+${d.Year}`, '_blank');
            });
    });
</script>

</body>
</html>
```",Correct,3,4
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot with query widgets showing the Units Produced and Revenue of the given dataset. Add a slider to represent the Year.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter circle {
            fill: steelblue;
            stroke: white;
            stroke-width: 1.5px;
        }
    </style>
</head>
<body>
    <h2>Units Produced vs Revenue</h2>
    <div>
        <label for=""yearSlider"">Year:</label>
        <input type=""range"" id=""yearSlider"" min=""2000"" max=""2020"" value=""2000"" step=""1""/>
        <span id=""yearValue"">2000</span>
    </div>
    <svg id=""scatterplot"" width=""800"" height=""600""></svg>

    <script>
        const margin = {top: 20, right: 20, bottom: 30, left: 40},
              width = 800 - margin.left - margin.right,
              height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""#scatterplot"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        const xAxis = d3.axisBottom(x);
        const yAxis = d3.axisLeft(y);

        svg.append(""g"")
            .attr(""class"", ""x axis"")
            .attr(""transform"", `translate(0,${height})`);

        svg.append(""g"")
            .attr(""class"", ""y axis"");

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
            data.forEach(d => {
                d.Year = +d.Year;
                d['Units Produced'] = +d['Units Produced'];
                d.Revenue = +d.Revenue;
            });

            const years = [...new Set(data.map(d => d.Year))];
            const yearSlider = d3.select(""#yearSlider"").on(""input"", updatePlot);

            function updatePlot() {
                const selectedYear = +yearSlider.property(""value"");
                d3.select(""#yearValue"").text(selectedYear);

                const filteredData = data.filter(d => d.Year === selectedYear);

                x.domain([0, d3.max(filteredData, d => d['Units Produced'])]);
                y.domain([0, d3.max(filteredData, d => d.Revenue)]);

                svg.select("".x.axis"").call(xAxis);
                svg.select("".y.axis"").call(yAxis);

                const circles = svg.selectAll(""circle"").data(filteredData);

                circles.enter().append(""circle"")
                    .attr(""r"", 5)
                    .merge(circles)
                    .attr(""cx"", d => x(d['Units Produced']))
                    .attr(""cy"", d => y(d.Revenue));

                circles.exit().remove();
            }

            updatePlot(); // Initial Render
        });
    </script>
</body>
</html>
```",Correct,4,5
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot showing the Units Produced of Wheat. Add animated transitions that connect these points using lines in order.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Wheat Units Produced Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .dot {
            fill: steelblue;
        }
        .line {
            fill: none;
            stroke: lightgray;
            stroke-width: 2;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = { top: 20, right: 30, bottom: 30, left: 40 };
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;
        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"")
            .then(data => {
                data.forEach(d => {
                    if (d[""Crop Type""] === ""Wheat"") {
                        d[""Year""] = +d[""Year""];
                        d[""Units Produced""] = +d[""Units Produced""];
                    }
                });

                const wheatData = data.filter(d => d[""Crop Type""] === ""Wheat"");
                wheatData.sort((a, b) => a[""Year""] - b[""Year""]);

                const x = d3.scaleLinear()
                    .domain(d3.extent(wheatData, d => d[""Year""]))
                    .range([0, width]);

                const y = d3.scaleLinear()
                    .domain([0, d3.max(wheatData, d => d[""Units Produced""])])
                    .range([height, 0]);

                g.append(""g"")
                    .attr(""transform"", `translate(0,${height})`)
                    .call(d3.axisBottom(x));

                g.append(""g"")
                    .call(d3.axisLeft(y));

                const line = d3.line()
                    .x(d => x(d[""Year""]))
                    .y(d => y(d[""Units Produced""]));

                g.append(""path"")
                    .datum(wheatData)
                    .attr(""class"", ""line"")
                    .attr(""d"", line)
                    .attr(""stroke-dasharray"", ""5, 5"")
                    .transition()
                    .duration(2000)
                    .attr(""stroke-dasharray"", null);

                const dots = g.selectAll("".dot"")
                    .data(wheatData)
                    .enter().append(""circle"")
                    .attr(""class"", ""dot"")
                    .attr(""cx"", d => x(d[""Year""]))
                    .attr(""cy"", height)
                    .attr(""r"", 5)
                    .transition()
                    .duration(2000)
                    .attr(""cy"", d => y(d[""Units Produced""]));
            });
    </script>
</body>
</html>
```",Correct,5,6
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Units Produced of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Line Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke-width: 2;
        }
        .line:hover {
            stroke-width: 4;
        }
        .tooltip {
            position: absolute;
            text-align: center;
            padding: 5px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
            margin = {top: 20, right: 30, bottom: 30, left: 40},
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        const line = d3.line()
            .x(d => x(d.Year))
            .y(d => y(d['Units Produced']));

        const color = d3.scaleOrdinal(d3.schemeCategory10);
        const tooltip = d3.select(""body"").append(""div"").attr(""class"", ""tooltip"").style(""opacity"", 0);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
            const nestedData = d3.group(data, d => d['Crop Type']);
            const crops = Array.from(nestedData.keys());

            data.forEach(d => {
                d.Year = +d.Year;
                d['Units Produced'] = +d['Units Produced'];
            });

            x.domain(d3.extent(data, d => d.Year));
            y.domain([0, d3.max(data, d => d['Units Produced'])]);

            crops.forEach((crop, i) => {
                g.append(""path"")
                    .datum(nestedData.get(crop))
                    .attr(""class"", ""line"")
                    .attr(""d"", line)
                    .style(""stroke"", color(crop))
                    .on(""mouseover"", function() {
                        d3.select(this).style(""stroke-width"", ""4"");
                        tooltip.transition().duration(200).style(""opacity"", .9);
                        tooltip.html(crop)
                            .style(""left"", (d3.event.pageX + 5) + ""px"")
                            .style(""top"", (d3.event.pageY - 28) + ""px"");
                    })
                    .on(""mouseout"", function() {
                        d3.select(this).style(""stroke-width"", ""2"");
                        tooltip.transition().duration(500).style(""opacity"", 0);
                    });
            });

            g.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));
            g.append(""g"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Correct,6,7
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Bar Chart that visualizes the Units Produced for each Crop Type in 2020. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Bar Chart of Units Produced by Crop Type in 2020</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar { fill: steelblue; }
        .bar:hover { fill: orange; }
        .axis--x path, .axis--x line, .axis--y path, .axis--y line { fill: none; shape-rendering: crispEdges; }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>

    <script>
        const width = 800;
        const height = 400;
        const margin = {top: 20, right: 30, bottom: 40, left: 40};

        const svg = d3.select(""svg"")
            .attr(""viewBox"", [0, 0, width, height])
            .call(d3.zoom().on(""zoom"", (event) => {
                svg.attr(""transform"", event.transform);
            }));

        const x = d3.scaleBand().padding(0.1);
        const y = d3.scaleLinear();

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
            data.forEach(d => {
                if (d.Year === ""2020"") {
                    d[""Units Produced""] = +d[""Units Produced""];
                }
            });

            const filteredData = data.filter(d => d.Year === ""2020"");
            const cropTypes = filteredData.map(d => d[""Crop Type""]);
            const unitsProduced = filteredData.map(d => d[""Units Produced""]);

            x.domain(cropTypes);
            y.domain([0, d3.max(unitsProduced)]);

            svg.append(""g"")
                .selectAll("".bar"")
                .data(filteredData)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => x(d[""Crop Type""]))
                .attr(""y"", d => y(d[""Units Produced""]))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - margin.top - margin.bottom - y(d[""Units Produced""]))
                .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

            svg.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height - margin.bottom})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .attr(""transform"", `translate(${margin.left}, 0)`)
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,7,8
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Bar Chart that visualizes the Units Produced for each Crop Type in 2020. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
            cursor: pointer;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--y .domain {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;
        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
            const filteredData = data.filter(d => d.Year == ""2020"");
            filteredData.forEach(d => {
                d[""Units Produced""] = +d[""Units Produced""];
            });

            const x = d3.scaleBand()
                .domain(filteredData.map(d => d[""Crop Type""]))
                .range([0, width])
                .padding(0.1);
            const y = d3.scaleLinear()
                .domain([0, d3.max(filteredData, d => d[""Units Produced""])])
                .nice()
                .range([height, 0]);

            g.append(""g"")
                .selectAll("".bar"")
                .data(filteredData)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => x(d[""Crop Type""]))
                .attr(""y"", d => y(d[""Units Produced""]))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d[""Units Produced""]))
                .call(d3.drag()
                    .on(""start"", dragstarted)
                    .on(""drag"", dragged)
                    .on(""end"", dragended)
                );

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            function dragstarted(event) {
                d3.select(this).raise().classed(""active"", true);
            }

            function dragged(event) {
                const yPosition = d3.pointer(event, this)[1];
                const newIndex = Math.max(0, Math.min(filteredData.length - 1, Math.floor((height - yPosition) / (height / filteredData.length))));
                
                const currentIndex = d3.select(this).datum().index;
                if (newIndex != currentIndex) {
                    const movedData = filteredData.splice(currentIndex, 1)[0];
                    filteredData.splice(newIndex, 0, movedData);
                    
                    // Re-render bars in new order
                    g.selectAll("".bar"")
                        .data(filteredData)
                        .attr(""y"", d => y(d[""Units Produced""]))
                        .attr(""x"", (d, i) => x(d[""Crop Type""]))
                        .attr(""height"", d => height - y(d[""Units Produced""]));
                }
            }

            function dragended(event) {
                d3.select(this).classed(""active"", false);
            }
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,8,9
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Bar Chart that visualizes the Units Produced for each Crop Type in 2020. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Units Produced.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
            transition: height 0.3s ease-in-out, y 0.3s ease-in-out;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path,
        .axis--x line {
            display: none;
        }
        .axis--y line {
            stroke: lightgray;
        }
        .dropdown {
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <select class=""dropdown"" id=""sortOrder"">
        <option value=""ascending"">Ascending</option>
        <option value=""descending"">Descending</option>
    </select>
    <svg width=""800"" height=""400""></svg>

    <script>
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
            data = data.filter(d => d.Year == 2020);
            data.forEach(d => {
                d[""Units Produced""] = +d[""Units Produced""];
            });

            const svg = d3.select(""svg""),
                margin = {top: 20, right: 30, bottom: 40, left: 40},
                width = +svg.attr(""width"") - margin.left - margin.right,
                height = +svg.attr(""height"") - margin.top - margin.bottom,
                g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

            const x = d3.scaleBand().rangeRound([0, width]).padding(0.1);
            const y = d3.scaleLinear().rangeRound([height, 0]);

            x.domain(data.map(d => d[""Crop Type""]));
            y.domain([0, d3.max(data, d => d[""Units Produced""])]);

            g.append(""g"")
                .selectAll("".bar"")
                .data(data)
                .enter().append(""rect"")
                  .attr(""class"", ""bar"")
                  .attr(""x"", d => x(d[""Crop Type""]))
                  .attr(""y"", d => y(d[""Units Produced""]))
                  .attr(""width"", x.bandwidth())
                  .attr(""height"", d => height - y(d[""Units Produced""]));

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x).tickFormat(d => d).tickSize(0));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            d3.select(""#sortOrder"").on(""change"", function() {
                const selected = this.value;
                const sortedData = data.sort((a, b) => selected === ""ascending"" ? a[""Units Produced""] - b[""Units Produced""] : b[""Units Produced""] - a[""Units Produced""]);

                x.domain(sortedData.map(d => d[""Crop Type""]));
                const bars = g.selectAll("".bar"").data(sortedData, d => d[""Crop Type""]);

                bars.enter().append(""rect"")
                    .attr(""class"", ""bar"")
                    .attr(""x"", d => x(d[""Crop Type""]))
                    .attr(""y"", height)
                    .attr(""width"", x.bandwidth())
                    .attr(""height"", 0)
                    .merge(bars)
                    .transition()
                    .duration(300)
                    .attr(""y"", d => y(d[""Units Produced""]))
                    .attr(""height"", d => height - y(d[""Units Produced""]));

                bars.exit()
                    .transition()
                    .duration(300)
                    .attr(""y"", height)
                    .attr(""height"", 0)
                    .remove();

                g.select("".axis--x"").call(d3.axisBottom(x).tickFormat(d => d).tickSize(0));
                g.select("".axis--y"").call(d3.axisLeft(y));
            });
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,9,10
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot that visualizes the relationship between Units Produced and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""scatterplot"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1);
            const unitsProduced = [];
            const revenue = [];
            rows.forEach(row => {
                const cols = row.split(',');
                if (cols.length > 1) {
                    unitsProduced.push(parseFloat(cols[2]));
                    revenue.push(parseFloat(cols[3]));
                }
            });

            const chartDom = document.getElementById('scatterplot');
            const myChart = echarts.init(chartDom);
            const option = {
                tooltip: {
                    trigger: 'item',
                    formatter: function (params) {
                        return `Units Produced: ${params.data[0]}<br/>Revenue: ${params.data[1]}`;
                    }
                },
                xAxis: {
                    type: 'value',
                    name: 'Units Produced'
                },
                yAxis: {
                    type: 'value',
                    name: 'Revenue'
                },
                series: [{
                    symbolSize: 10,
                    data: unitsProduced.map((up, index) => [up, revenue[index]]),
                    type: 'scatter'
                }]
            };
            myChart.setOption(option);
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,10,11
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot that visualizes the relationship between Units Produced and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 600px;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <script>
        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv');
            const data = await response.text();
            return data.split('\n').slice(1).map(row => {
                const cols = row.split(',');
                return {
                    year: cols[0],
                    cropType: cols[1],
                    unitsProduced: Number(cols[2]),
                    revenue: Number(cols[3]),
                    productionCost: Number(cols[4]),
                    profit: Number(cols[5]),
                    yield: Number(cols[6]),
                    numberOfFarms: Number(cols[7]),
                    exportVolume: Number(cols[8])
                };
            }).filter(row => !isNaN(row.unitsProduced) && !isNaN(row.revenue));
        }

        async function renderChart() {
            const data = await fetchData();
            const chartData = data.map(item => [item.unitsProduced, item.revenue]);

            const chartDom = document.getElementById('main');
            const myChart = echarts.init(chartDom);

            const option = {
                tooltip: {
                    trigger: 'item',
                    formatter: function (params) {
                        return `Units Produced: ${params.data[0]}<br>Revenue: ${params.data[1]}`;
                    }
                },
                xAxis: {
                    type: 'value',
                    name: 'Units Produced'
                },
                yAxis: {
                    type: 'value',
                    name: 'Revenue'
                },
                series: [{
                    type: 'scatter',
                    data: chartData,
                    symbolSize: 10,
                    itemStyle: {
                        color: '#5470C6'
                    }
                }]
            };

            myChart.setOption(option);

            let brushOption = {
                brush: {
                    type: ['scatter'],
                    icon: {
                        rect: { width: 10, height: 10 }
                    }
                },
                toolbox: {
                    feature: {
                        myBrush: {
                            show: true,
                            title: { 
                                myBrush: 'Brushing' 
                            },
                            onclick: function () {
                                myChart.dispatchAction({
                                    type: 'brush',
                                    areas: [{
                                        brushType: 'scatter',
                                        range: [0, 1]
                                    }]
                                });
                            }
                        }
                    }
                }
            };

            myChart.on('brushSelected', function (params) {
                const selected = params.batch[0].areas[0].selected;
                const filteredData = chartData.filter((_, index) => selected[index]);
                console.log('Selected data points:', filteredData);
            });

            myChart.setOption(brushOption);
        }

        renderChart();
    </script>
</body>
</html>
```",Unexpected Execution Result,11,12
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot that visualizes the relationship between Units Produced and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const unitsProduced = [];
                const revenue = [];

                lines.forEach(line => {
                    const columns = line.split(',');
                    if (columns.length > 1) {
                        unitsProduced.push(parseFloat(columns[2]));
                        revenue.push(parseFloat(columns[3]));
                    }
                });

                var myChart = echarts.init(document.getElementById('main'));
                var option = {
                    title: {
                        text: 'Units Produced vs Revenue'
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'value',
                        name: 'Units Produced'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Revenue'
                    },
                    series: [{
                        type: 'scatter',
                        data: unitsProduced.map((up, index) => [up, revenue[index]]),
                        symbolSize: 10
                    }]
                };

                myChart.setOption(option);

                window.addEventListener('resize', myChart.resize);
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,12,13
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Units Produced and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Scatterplot</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.2.2/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const points = rows.map(row => {
                    const cols = row.split(',');
                    return {
                        year: cols[0],
                        cropType: cols[1],
                        unitsProduced: +cols[2],
                        revenue: +cols[3],
                        productionCost: +cols[4],
                        profit: +cols[5],
                        yield: +cols[6],
                        numberOfFarms: +cols[7],
                        exportVolume: +cols[8]
                    };
                }).filter(point => point.unitsProduced && point.revenue);

                const myChart = echarts.init(document.getElementById('main'));

                const option = {
                    tooltip: {
                        trigger: 'item',
                        formatter: function (params) {
                            return `Year: ${params.data.year}<br/>Crop Type: ${params.data.cropType}<br/>Units Produced: ${params.data.unitsProduced}<br/>Revenue: $${params.data.revenue.toLocaleString()}`;
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Units Produced'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Revenue'
                    },
                    series: [{
                        symbolSize: 10,
                        data: points,
                        type: 'scatter',
                        itemStyle: {
                            color: '#5470C6'
                        }
                    }]
                };

                myChart.setOption(option);

                myChart.on('click', function (params) {
                    const searchQuery = `${params.data.cropType} ${params.data.year}`;
                    window.open(`https://www.google.com/search?q=${encodeURIComponent(searchQuery)}`, '_blank');
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,13,14
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot with query widgets showing the Units Produced and Revenue of the given dataset. Add a slider to represent the Year.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div style=""width: 100%; height: 500px;"" id=""main""></div>
    <input type=""range"" id=""yearSlider"" min=""2000"" max=""2020"" value=""2000"" step=""1"">
    <label for=""yearSlider"" id=""yearLabel"">Year: 2000</label>

    <script>
        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv');
            const data = await response.text();
            return data.split('\n').slice(1).map(row => {
                const cols = row.split(',');
                return {
                    Year: +cols[0],
                    CropType: cols[1],
                    UnitsProduced: +cols[2],
                    Revenue: +cols[3],
                };
            }).filter(d => !isNaN(d.UnitsProduced) && !isNaN(d.Revenue));
        }

        async function initChart() {
            const rawData = await fetchData();
            const chartDom = document.getElementById('main');
            const myChart = echarts.init(chartDom);

            function updateChart(year) {
                const filteredData = rawData.filter(d => d.Year === year);
                const unitsProduced = filteredData.map(d => d.UnitsProduced);
                const revenue = filteredData.map(d => d.Revenue);

                const option = {
                    xAxis: {
                        name: 'Units Produced',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Revenue',
                        type: 'value'
                    },
                    series: [{
                        symbolSize: 10,
                        data: filteredData.map((d) => [d.UnitsProduced, d.Revenue]),
                        type: 'scatter'
                    }]
                };

                myChart.setOption(option);
            }

            document.getElementById('yearSlider').addEventListener('input', (event) => {
                const year = +event.target.value;
                document.getElementById('yearLabel').innerText = `Year: ${year}`;
                updateChart(year);
            });

            updateChart(2000); // Initialize with default year
        }

        initChart();
    </script>
</body>
</html>
```",Unexpected Initial Result,14,15
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot showing the Units Produced of Wheat. Add animated transitions that connect these points using lines in order.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Wheat Production Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 800px;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const wheatData = lines
                    .map(line => line.split(','))
                    .filter(columns => columns[1] === 'Wheat')
                    .map(columns => ({
                        year: columns[0],
                        unitsProduced: Number(columns[2])
                    }));

                const years = wheatData.map(item => item.year);
                const unitsProduced = wheatData.map(item => item.unitsProduced);

                const myChart = echarts.init(document.getElementById('main'));
                const option = {
                    title: { text: 'Wheat Production Over Years' },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: years,
                        name: 'Year'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Units Produced'
                    },
                    series: [{
                        name: 'Units Produced',
                        type: 'scatter',
                        data: unitsProduced,
                        animationDelay: (idx) => idx * 100,
                    }, {
                        name: 'Line',
                        type: 'line',
                        data: unitsProduced,
                        animationDuration: 3000,
                        animationEasing: 'linear',
                        smooth: true,
                    }]
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,15,16
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Units Produced of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Line Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const seriesData = {};
                const categories = [];

                lines.forEach(line => {
                    const [year, cropType, unitsProduced] = line.split(',');
                    if (!seriesData[cropType]) {
                        seriesData[cropType] = { name: cropType, type: 'line', data: [] };
                    }
                    if (!categories.includes(year)) {
                        categories.push(year);
                    }
                    seriesData[cropType].data.push(parseFloat(unitsProduced));
                });

                const series = Object.values(seriesData);
                
                const option = {
                    title: {
                        text: 'Units Produced by Crop Type Over Time'
                    },
                    tooltip: {
                        trigger: 'axis',
                        formatter: function(params) {
                            let result = `${params[0].name}<br>`;
                            params.forEach(item => {
                                result += `${item.seriesName}: ${item.data}<br>`;
                            });
                            return result;
                        }
                    },
                    legend: {
                        data: series.map(item => item.name)
                    },
                    xAxis: {
                        type: 'category',
                        boundaryGap: false,
                        data: categories
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: series
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);

                chart.on('mouseover', function(params) {
                    if (params.componentType === 'series') {
                        const highlightedSeries = series.map(item => {
                            return { ...item, lineStyle: { width: 3 } };
                        });
                        chart.setOption({
                            series: highlightedSeries
                        });
                    }
                });

                chart.on('mouseout', function(params) {
                    if (params.componentType === 'series') {
                        const normalSeries = series.map(item => {
                            return { ...item, lineStyle: { width: 1 } };
                        });
                        chart.setOption({
                            series: normalSeries
                        });
                    }
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,16,17
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Bar Chart that visualizes the Units Produced for each Crop Type in 2020. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const unitsProduced = {};
                
                rows.forEach(row => {
                    const columns = row.split(',');
                    const year = columns[0];
                    const cropType = columns[1];
                    const units = parseFloat(columns[2]);
                    
                    if (year === '2020') {
                        if (!unitsProduced[cropType]) {
                            unitsProduced[cropType] = 0;
                        }
                        unitsProduced[cropType] += units;
                    }
                });

                const cropTypes = Object.keys(unitsProduced);
                const units = cropTypes.map(cropType => unitsProduced[cropType]);

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);
                const option = {
                    title: {
                        text: 'Units Produced for Each Crop Type in 2020'
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: cropTypes
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        name: 'Units Produced',
                        type: 'bar',
                        data: units
                    }]
                };

                myChart.setOption(option);
                
                // Enable zoom and pan
                myChart.on('mousedown', function (params) {
                    myChart.dispatchAction({ type: 'dataZoom', start: 0, end: 100 });
                });

                window.addEventListener('mousewheel', function (event) {
                    const direction = event.deltaY > 0 ? -10 : 10;
                    myChart.dispatchAction({
                        type: 'dataZoom',
                        start: Math.max(0, myChart.getOption().dataZoom[0].start + direction),
                        end: Math.min(100, myChart.getOption().dataZoom[0].end + direction)
                    });
                });

            })
            .catch(error => console.error('Error fetching the data:', error));
    </script>
</body>
</html>
```",Unexpected Execution Result,17,18
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Bar Chart that visualizes the Units Produced for each Crop Type in 2020. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 800px;
            height: 600px;
            margin: auto;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const crops2020 = rows.filter(row => row.split(',')[0] === '2020');
                const cropData = crops2020.map(row => {
                    const cols = row.split(',');
                    return {
                        name: cols[1],
                        units: parseFloat(cols[2])
                    };
                });

                const chartData = cropData.map(crop => ({
                    name: crop.name,
                    value: crop.units
                }));

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption({
                    title: {
                        text: 'Units Produced by Crop Type in 2020',
                        left: 'center'
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: chartData.map(crop => crop.name),
                        axisLabel: {
                            interval: 0
                        }
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        name: 'Units Produced',
                        type: 'bar',
                        data: chartData.map(crop => crop.value),
                        draggable: true
                    }]
                });

                // Enable drag-and-drop reordering
                chart.on('select', function (params) {
                    const draggedData = chartData.splice(params.dataIndex, 1)[0];
                    chartData.splice(params.dataIndex, 0, draggedData);
                    chart.setOption({
                        xAxis: {
                            data: chartData.map(crop => crop.name)
                        },
                        series: [{
                            data: chartData.map(crop => crop.value)
                        }]
                    });
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,18,19
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Bar Chart that visualizes the Units Produced for each Crop Type in 2020. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Units Produced.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 800px; height: 600px;""></div>
    <select id=""sortOrder"" style=""margin: 20px;"">
        <option value=""desc"">Sort Descending</option>
        <option value=""asc"">Sort Ascending</option>
    </select>
    
    <script>
        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv');
            const text = await response.text();
            const data = text.split('\n').slice(1).map(line => {
                const cols = line.split(',');
                return {
                    Year: cols[0],
                    CropType: cols[1],
                    UnitsProduced: +cols[2],
                    Revenue: +cols[3],
                    ProductionCost: +cols[4],
                    Profit: +cols[5],
                    Yield: +cols[6],
                    NumberOfFarms: +cols[7],
                    ExportVolume: +cols[8]
                };
            }).filter(row => row.Year === ""2020"");

            return data;
        }

        function renderChart(data, sortOrder) {
            const sortedData = [...data].sort((a, b) => sortOrder === 'asc' ? a.UnitsProduced - b.UnitsProduced : b.UnitsProduced - a.UnitsProduced);
            const cropTypes = sortedData.map(row => row.CropType);
            const unitsProduced = sortedData.map(row => row.UnitsProduced);

            const option = {
                title: {
                    text: 'Units Produced for Each Crop Type in 2020'
                },
                tooltip: {},
                xAxis: {
                    type: 'category',
                    data: cropTypes
                },
                yAxis: {
                    type: 'value'
                },
                series: [{
                    name: 'Units Produced',
                    type: 'bar',
                    data: unitsProduced,
                    animationDuration: 1000,
                    itemStyle: {
                        transition: 'all 0.5s ease'
                    }
                }]
            };

            const chart = echarts.init(document.getElementById('main'));
            chart.setOption(option);
        }

        fetchData().then(data => {
            renderChart(data, 'desc');
            document.getElementById('sortOrder').addEventListener('change', (event) => {
                renderChart(data, event.target.value);
            });
        });
    </script>
</body>
</html>
```",Correct,19,20
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot that visualizes the relationship between Units Produced and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Units Produced vs Revenue</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
<div id=""vis""></div>

<script>
    const spec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""description"": ""A scatter plot of Units Produced vs Revenue."",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
            ""format"": {
                ""type"": ""csv""
            }
        },
        ""mark"": ""circle"",
        ""encoding"": {
            ""x"": {
                ""field"": ""Units Produced"",
                ""type"": ""quantitative"",
                ""title"": ""Units Produced""
            },
            ""y"": {
                ""field"": ""Revenue"",
                ""type"": ""quantitative"",
                ""title"": ""Revenue""
            },
            ""tooltip"": [
                {""field"": ""Units Produced"", ""type"": ""quantitative""},
                {""field"": ""Revenue"", ""type"": ""quantitative""},
                {""field"": ""Crop Type"", ""type"": ""nominal""}
            ]
        },
        ""config"": {
            ""mark"": {
                ""tooltip"": true
            }
        }
    };

    vegaEmbed('#vis', spec);
</script>
</body>
</html>
```",Unexpected Execution Result,20,21
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot that visualizes the relationship between Units Produced and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {""filter"": {""field"": ""Units Produced"", ""valid"": true}},
                {""filter"": {""field"": ""Revenue"", ""valid"": true}}
            ],
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Units Produced"",
                    ""type"": ""quantitative"",
                    ""title"": ""Units Produced""
                },
                ""y"": {
                    ""field"": ""Revenue"",
                    ""type"": ""quantitative"",
                    ""title"": ""Revenue""
                },
                ""tooltip"": [
                    {""field"": ""Year"", ""type"": ""ordinal""},
                    {""field"": ""Crop Type"", ""type"": ""nominal""},
                    {""field"": ""Units Produced"", ""type"": ""quantitative""},
                    {""field"": ""Revenue"", ""type"": ""quantitative""}
                ]
            },
            ""selection"": {
                ""brush"": {
                    ""type"": ""interval"", 
                    ""encodings"": [""x"", ""y""]
                }
            }
        };

        vegaEmbed('#vis', spec).then(({spec, view}) => {
            // Handle interactions and updates when brushing
            view.addSignalListener(""brush"", function(name, value) {
                // Custom handling can be added here if necessary
            });
        }).catch(console.warn);
    </script>
</body>
</html>
```",Correct,21,22
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot that visualizes the relationship between Units Produced and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npmvega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npmvega-lite@5.1.0""></script>
    <script src=""https://cdn.jsdelivr.net/npmvega-embed@6.18.0""></script>
    <style>
        #vis {
            width: 800px;
            height: 500px;
        }
    </style>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""Scatterplot showing the relationship between Units Produced and Revenue."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Units Produced"",
                    ""type"": ""quantitative"",
                    ""title"": ""Units Produced""
                },
                ""y"": {
                    ""field"": ""Revenue"",
                    ""type"": ""quantitative"",
                    ""title"": ""Revenue""
                },
                ""tooltip"": [
                    {""field"": ""Year"", ""type"": ""ordinal"", ""title"": ""Year""},
                    {""field"": ""Crop Type"", ""type"": ""nominal"", ""title"": ""Crop Type""},
                    {""field"": ""Units Produced"", ""type"": ""quantitative"", ""title"": ""Units Produced""},
                    {""field"": ""Revenue"", ""type"": ""quantitative"", ""title"": ""Revenue""}
                ]
            },
            ""config"": {
                ""view"": {
                    ""stroke"": ""transparent"",
                    ""zoom"": true
                }
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            // Visualization is rendered in the #vis element
        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Execution Result,22,23
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Units Produced and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.1.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
    <style>
        #vis {
            width: 800px;
            height: 500px;
        }
    </style>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatter plot showing the relationship between Units Produced and Revenue."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Units Produced"",
                    ""type"": ""quantitative"",
                    ""title"": ""Units Produced""
                },
                ""y"": {
                    ""field"": ""Revenue"",
                    ""type"": ""quantitative"",
                    ""title"": ""Revenue""
                },
                ""tooltip"": [
                    {""field"": ""Crop Type"", ""type"": ""nominal""},
                    {""field"": ""Year"", ""type"": ""temporal""},
                    {""field"": ""Units Produced"", ""type"": ""quantitative""},
                    {""field"": ""Revenue"", ""type"": ""quantitative""}
                ]
            },
            ""selection"": {
                ""point"": {
                    ""type"": ""single"",
                    ""on"": ""mouseover"",
                    ""encodings"": [""x"", ""y""]
                }
            },
            ""config"": {
                ""view"": {""stroke"": ""transparent""}
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            const view = result.view;

            view.addEventListener('click', (event) => {
                const entity = view.tooltip(event);
                if (entity) {
                    const cropType = entity.datum['Crop Type'];
                    const year = entity.datum['Year'];
                    window.open(`https://www.google.com/search?q=${cropType}+${year}`, '_blank');
                }
            });
        }).catch(console.error);
    </script>
</body>
</html>
```",Execution Error,23,24
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot with query widgets showing the Units Produced and Revenue of the given dataset. Add a slider to represent the Year.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatter plot showing Units Produced and Revenue with a Year slider."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""field"": ""Year"",
                        ""range"": [2000, 2023]
                    }
                }
            ],
            ""encoding"": {
                ""x"": {""field"": ""Units Produced"", ""type"": ""quantitative""},
                ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
                ""color"": {""field"": ""Crop Type"", ""type"": ""nominal""},
                ""tooltip"": [
                    {""field"": ""Year"", ""type"": ""ordinal""},
                    {""field"": ""Units Produced"", ""type"": ""quantitative""},
                    {""field"": ""Revenue"", ""type"": ""quantitative""}
                ]
            },
            ""mark"": ""point"",
            ""selection"": {
                ""year"": {
                    ""type"": ""interval"",
                    ""encodings"": [""x""],
                    ""on"": ""[event:mouseup, event:touchend] > window:mouseup""
                }
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            // Access the View and the Vega API here if needed
        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Execution Result,24,25
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot showing the Units Produced of Wheat. Add animated transitions that connect these points using lines in order.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Wheat Production Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        var spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
                ""format"": {
                    ""type"": ""csv""
                },
                ""transform"": [
                    {
                        ""filter"": {
                            ""field"": ""Crop Type"",
                            ""equal"": ""Wheat""
                        }
                    }
                ]
            },
            ""mark"": {
                ""type"": ""point"",
                ""filled"": true,
                ""stroke"": ""black"",
                ""size"": 100,
                ""tooltip"": true
            },
            ""encoding"": {
                ""x"": {
                    ""field"": ""Year"",
                    ""type"": ""quantitative"",
                    ""title"": ""Year""
                },
                ""y"": {
                    ""field"": ""Units Produced"",
                    ""type"": ""quantitative"",
                    ""title"": ""Units Produced""
                },
                ""tooltip"": [
                    {""field"": ""Year"", ""type"": ""quantitative""},
                    {""field"": ""Units Produced"", ""type"": ""quantitative""}
                ]
            },
            ""config"": {
                ""view"": {""stroke"": ""transparent""},
                ""path"": {
                    ""interpolate"": ""monotone"",
                    ""stroke"": ""gray"",
                    ""strokeWidth"": 1
                }
            },
            ""animation"": {
                ""duration"": 1000,
                ""easing"": ""linear"",
                ""update"": [
                    {
                        ""type"": ""circle"",
                        ""duration"": 500,
                        ""start"": {""opacity"": 0},
                        ""end"": {""opacity"": 1}
                    }
                ]
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Unexpected Initial Result,25,26
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Units Produced of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Units Produced</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
          ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
          ""description"": ""A multi-series line chart showing the Units Produced of various Crop Types."",
          ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
            ""format"": {
              ""type"": ""csv""
            }
          },
          ""transform"": [
            {""calculate"": ""datum['Units Produced']"", ""as"": ""Units Produced""}
          ],
          ""mark"": ""line"",
          ""encoding"": {
            ""x"": {
              ""field"": ""Year"",
              ""type"": ""temporal"",
              ""title"": ""Year""
            },
            ""y"": {
              ""field"": ""Units Produced"",
              ""type"": ""quantitative"",
              ""title"": ""Units Produced""
            },
            ""color"": {
              ""field"": ""Crop Type"",
              ""type"": ""nominal"",
              ""title"": ""Crop Type""
            },
            ""tooltip"": [
              {""field"": ""Crop Type"", ""type"": ""nominal""},
              {""field"": ""Year"", ""type"": ""temporal""},
              {""field"": ""Units Produced"", ""type"": ""quantitative""}
            ]
          },
          ""selection"": {
            ""highlight"": {
              ""type"": ""multi"",
              ""fields"": [""Crop Type""],
              ""empty"": ""none"",
              ""on"": ""mouseover""
            }
          },
          ""config"": {
            ""mark"": {
              ""strokeWidth"": 2,
              ""stroke"": ""steelblue""
            },
            ""line"": {
              ""strokeWidth"": {""selection"": ""highlight"", ""value"": 4}
            }
          }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Initialization Error,26,27
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Bar Chart that visualizes the Units Produced for each Crop Type in 2020. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.6.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
<div id=""vis""></div>
<script>
    const spec = {
        $schema: 'https://vega.github.io/schema/vega-lite/v5.json',
        description: 'Bar chart of Units Produced for each Crop Type in 2020',
        data: {
            url: 'https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv',
            format: {'type': 'csv'}
        },
        transform: [
            {
                filter: 'datum.Year === ""2020""'
            }
        ],
        mark: 'bar',
        encoding: {
            x: {
                field: 'Crop Type',
                type: 'nominal',
                axis: {labelAngle: -45}
            },
            y: {
                field: 'Units Produced',
                type: 'quantitative'
            }
        },
        config: {
            view: {
                continuousWidth: 400,
                continuousHeight: 300,
                zoom: true,
                translate: true
            }
        }
    };

    vegaEmbed('#vis', spec)
        .then(function(result) {
            // Access the underlying Vega view instance
            const view = result.view;
            view.addEventListener('wheel', function(event) {
                view.zoom(event.deltaY < 0 ? 1.1 : 0.9);
                view.run();
                event.preventDefault();
            });
            view.addEventListener('mousedown', startDragging);
        });

    function startDragging(event) {
        const view = event.target.__vega__;
        const startX = event.pageX;
        const startY = event.pageY;

        function dragMove(dragEvent) {
            const deltaX = (dragEvent.pageX - startX) * (view.width / view._svg.clientWidth);
            const deltaY = (dragEvent.pageY - startY) * (view.height / view._svg.clientHeight);
            view.set('translate', [deltaX, deltaY]);
            view.run();
        }

        function dragEnd(dragEvent) {
            document.removeEventListener('mousemove', dragMove);
            document.removeEventListener('mouseup', dragEnd);
        }

        document.addEventListener('mousemove', dragMove);
        document.addEventListener('mouseup', dragEnd);
    }
</script>
</body>
</html>
```",Unexpected Execution Result,27,28
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Bar Chart that visualizes the Units Produced for each Crop Type in 2020. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.1.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A bar chart showing Units Produced for each Crop Type in 2020."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""field"": ""Year"",
                        ""equal"": ""2020""
                    }
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Crop Type"",
                    ""type"": ""ordinal"",
                    ""sort"": null,
                    ""title"": ""Crop Type""
                },
                ""y"": {
                    ""field"": ""Units Produced"",
                    ""type"": ""quantitative"",
                    ""title"": ""Units Produced""
                },
                ""color"": {
                    ""field"": ""Crop Type"",
                    ""type"": ""nominal""
                }
            },
            ""config"": {
                ""view"": {
                    ""stroke"": ""transparent""
                },
                ""bar"": {
                    ""binSpacing"": 1
                }
            }
        };

        vegaEmbed('#vis', spec, { actions: false }).then(result => {
            const view = result.view;

            // Enable drag and drop functionality for reordering
            view.addSignalListener('dragstart', (name, value) => {
                const data = value.data;
                view.data('dragged', data);
            });

            view.addSignalListener('dragend', (name, value) => {
                if (view.data('dragged')) {
                    // Reorder the bars based on the drag position
                    const draggedData = view.data('dragged');
                    // Logic to update the ordering of data as per your requirement
                }
            });
        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Execution Result,28,29
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Bar Chart that visualizes the Units Produced for each Crop Type in 2020. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Units Produced.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
<div id=""vis""></div>

<script>
const spec = {
    ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
    ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
        ""format"": {
            ""type"": ""csv""
        }
    },
    ""transform"": [
        {
            ""filter"": ""datum.Year === '2020'""
        },
        {
            ""calculate"": ""datum.Units_Produced"",
            ""as"": ""Units Produced""
        }
    ],
    ""mark"": ""bar"",
    ""encoding"": {
        ""x"": {
            ""field"": ""Crop_Type"",
            ""type"": ""nominal"",
            ""axis"": { ""labelAngle"": 45 }
        },
        ""y"": {
            ""field"": ""Units Produced"",
            ""type"": ""quantitative""
        },
        ""color"": {
            ""field"": ""Units Produced"",
            ""type"": ""quantitative"",
            ""scale"": { ""scheme"": ""blues"" }
        }
    },
    ""selection"": {
        ""sort"": {
            ""type"": ""single"",
            ""fields"": [""Units Produced""],
            ""bind"": ""legend"",
            ""encodings"": [""y""],
            ""translate"": ""none""
        }
    },
    ""config"": {
        ""view"": { ""stroke"": ""transparent"" },
        ""mark"": { ""tooltip"": true }
    }
};

vegaEmbed('#vis', spec, { actions: false }).then(function(result) {
    // result.view is a vega.View instance
}).catch(console.error);
</script>

</body>
</html>
```",Unexpected Initial Result,29,30
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Visualization</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatterplot {
            float: left;
            width: 50%;
        }
        .barchart {
            float: right;
            width: 50%;
        }
        svg {
            font: 10px sans-serif;
        }
        .scatter circle {
            stroke: steelblue;
            fill: none;
        }
        .bars {
            fill: steelblue;
        }
    </style>
</head>
<body>
    <div class=""scatterplot"" id=""scatterplot""></div>
    <div class=""barchart"" id=""barchart""></div>
    <script>
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
            data.forEach(d => {
                d.Year = +d.Year;
                d['Units Produced'] = +d['Units Produced'];
                d.Revenue = +d.Revenue;
                d['Production Cost'] = +d['Production Cost'];
                d.Profit = +d.Profit;
                d.Yield = +d.Yield;
                d['Number of Farms'] = +d['Number of Farms'];
                d['Export Volume'] = +d['Export Volume'];
            });

            const margin = { top: 20, right: 20, bottom: 30, left: 40 },
                  width = 400 - margin.left - margin.right,
                  height = 300 - margin.top - margin.bottom;

            const xScatter = d3.scaleLinear().range([0, width]);
            const yScatter = d3.scaleLinear().range([height, 0]);

            const scatterSvg = d3.select(""#scatterplot"").append(""svg"")
                .attr(""width"", width + margin.left + margin.right)
                .attr(""height"", height + margin.top + margin.bottom)
                .append(""g"")
                .attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");
            
            xScatter.domain(d3.extent(data, d => d.Yield));
            yScatter.domain(d3.extent(data, d => d.Profit));

            scatterSvg.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", ""translate(0,"" + height + "")"")
                .call(d3.axisBottom(xScatter));

            scatterSvg.append(""g"")
                .attr(""class"", ""y axis"")
                .call(d3.axisLeft(yScatter));

            scatterSvg.selectAll("".scatter"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""scatter"")
                .attr(""cx"", d => xScatter(d.Yield))
                .attr(""cy"", d => yScatter(d.Profit))
                .attr(""r"", 3);

            const xBar = d3.scaleBand().range([0, width]).padding(0.1),
                  yBar = d3.scaleLinear().range([height, 0]);

            const barSvg = d3.select(""#barchart"").append(""svg"")
                .attr(""width"", width + margin.left + margin.right)
                .attr(""height"", height + margin.top + margin.bottom)
                .append(""g"")
                .attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");
            
            xBar.domain(data.map(d => d['Crop Type']));
            yBar.domain([0, d3.max(data, d => d['Units Produced'])]);

            barSvg.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", ""translate(0,"" + height + "")"")
                .call(d3.axisBottom(xBar).rotate(-45).tickFormat(d => d))
                .selectAll(""text"")
                .style(""text-anchor"", ""end"");

            barSvg.append(""g"")
                .attr(""class"", ""y axis"")
                .call(d3.axisLeft(yBar));

            barSvg.selectAll("".bar"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""bars"")
                .attr(""x"", d => xBar(d['Crop Type']))
                .attr(""width"", xBar.bandwidth())
                .attr(""y"", d => yBar(d['Units Produced']))
                .attr(""height"", d => height - yBar(d['Units Produced']));
        });
    </script>
</body>
</html>
```",Initialization Error,30,31
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Visualization</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .chart {
            display: inline-block;
            margin: 20px;
        }
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .scatter {
            fill: lightblue;
            opacity: 0.7;
        }
        .scatter.selected {
            fill: orange;
        }
        .axis--x path,
        .axis--x line,
        .axis--y path,
        .axis--y line {
            fill: none;
            shape-rendering: crispEdges;
        }
    </style>
</head>
<body>
    <div class=""chart"" id=""scatterplot""></div>
    <div class=""chart"" id=""barchart""></div>
    
    <script>
        const margin = {top: 20, right: 30, bottom: 30, left: 40};
        const width = 400 - margin.left - margin.right;
        const height = 400 - margin.top - margin.bottom;

        const svgScatter = d3.select(""#scatterplot"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const svgBar = d3.select(""#barchart"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
            data.forEach(d => {
                d.Year = +d.Year;
                d['Units Produced'] = +d['Units Produced'];
                d.Revenue = +d.Revenue;
                d['Production Cost'] = +d['Production Cost'];
                d.Profit = +d.Profit;
                d.Yield = +d.Yield;
                d['Number of Farms'] = +d['Number of Farms'];
                d['Export Volume'] = +d['Export Volume'];
            });

            const xScaleScatter = d3.scaleLinear()
                .domain(d3.extent(data, d => d.Yield)).nice()
                .range([0, width]);

            const yScaleScatter = d3.scaleLinear()
                .domain(d3.extent(data, d => d.Profit)).nice()
                .range([height, 0]);

            const xScaleBar = d3.scaleBand()
                .domain(data.map(d => d['Crop Type']))
                .range([0, width])
                .padding(0.1);

            const yScaleBar = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.Revenue)]).nice()
                .range([height, 0]);

            svgScatter.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(xScaleScatter));

            svgScatter.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(yScaleScatter));

            svgBar.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(xScaleBar));

            svgBar.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(yScaleBar));

            const scatterPoints = svgScatter.selectAll("".scatter"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""scatter"")
                .attr(""cx"", d => xScaleScatter(d.Yield))
                .attr(""cy"", d => yScaleScatter(d.Profit))
                .attr(""r"", 5)
                .on('mouseover', function(event, d) {
                    d3.select(this).transition().duration(100).attr(""r"", 8);
                })
                .on('mouseout', function(event, d) {
                    d3.select(this).transition().duration(100).attr(""r"", 5);
                });
                
            const bars = svgBar.selectAll("".bar"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => xScaleBar(d['Crop Type']))
                .attr(""y"", d => yScaleBar(d.Revenue))
                .attr(""width"", xScaleBar.bandwidth())
                .attr(""height"", d => height - yScaleBar(d.Revenue))
                .on('click', function(event, d) {
                    scatterPoints.classed('selected', false);
                    scatterPoints.filter(point => point['Crop Type'] === d['Crop Type']).classed('selected', true);
                });

            const brush = d3.brush()  
                .extent([[0, 0], [width, height]])
                .on(""brush end"", brushed);

            svgScatter.append(""g"")
                .attr(""class"", ""brush"")
                .call(brush);

            function brushed(event) {
                const selection = event.selection;
                if (selection === null) return;

                const [[x0, y0], [x1, y1]] = selection;

                scatterPoints.classed(""selected"", d => {
                    const xInRange = xScaleScatter(d.Yield) >= x0 && xScaleScatter(d.Yield) <= x1;
                    const yInRange = yScaleScatter(d.Profit) >= y0 && yScaleScatter(d.Profit) <= y1;
                    return xInRange && yInRange;
                });

                const selectedCropTypes = scatterPoints.filter('.selected').data().map(d => d['Crop Type']);
                
                bars.classed('selected', d => selectedCropTypes.includes(d['Crop Type']));
            }
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,31,32
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Produced , while the pie chart represents the distribution of Revenue.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Visualization</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 2px;
        }

        .arc {
            stroke: #ffffff;
        }
    </style>
</head>
<body>
    <h2>Agricultural Production Visualization</h2>
    <div id=""lineChart""></div>
    <div id=""pieChart""></div>

    <script>
        const margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = 800 - margin.left - margin.right,
              height = 400 - margin.top - margin.bottom;

        const svgLine = d3.select(""#lineChart"").append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
          .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const svgPie = d3.select(""#pieChart"").append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
          .append(""g"")
            .attr(""transform"", `translate(${width / 2 + margin.left},${height / 2 + margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
            data.forEach(d => {
                d['Units Produced'] = +d['Units Produced'];
                d['Revenue'] = +d['Revenue'];
                d['Year'] = +d['Year'];
            });

            const x = d3.scaleLinear()
                .domain(d3.extent(data, d => d['Year']))
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Units Produced'])])
                .range([height, 0]);

            const line = d3.line()
                .x(d => x(d['Year']))
                .y(d => y(d['Units Produced']));

            svgLine.append(""path"")
                .datum(data)
                .attr(""class"", ""line"")
                .attr(""d"", line);

            svgLine.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svgLine.append(""g"")
                .call(d3.axisLeft(y));

            const pieData = d3.nest()
                .key(d => d['Crop Type'])
                .rollup(v => d3.sum(v, d => d['Revenue']))
                .entries(data);

            const pie = d3.pie()
                .value(d => d.value);

            const arc = d3.arc()
                .innerRadius(0)
                .outerRadius(Math.min(width, height) / 2 - 1);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const arcs = svgPie.selectAll("".arc"")
                .data(pie(pieData))
                .enter().append(""g"")
                .attr(""class"", ""arc"");

            arcs.append(""path"")
                .attr(""class"", ""arc"")
                .attr(""d"", arc)
                .style(""fill"", d => color(d.data.key));

            const legend = svgPie.selectAll("".legend"")
                .data(pieData)
                .enter().append(""g"")
                .attr(""class"", ""legend"")
                .attr(""transform"", (d, i) => `translate(0,${i * 20})`);
            
            legend.append(""rect"")
                .attr(""x"", width / 2 + margin.left)
                .attr(""width"", 18)
                .attr(""height"", 18)
                .style(""fill"", (d, i) => color(i));

            legend.append(""text"")
                .attr(""x"", width / 2 + margin.left + 20)
                .attr(""y"", 9)
                .attr(""dy"", "".35em"")
                .style(""text-anchor"", ""start"")
                .text(d => d.key);
        });
    </script>
</body>
</html>
```",Initialization Error,32,33
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Produced , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Visualization</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line { fill: none; stroke: steelblue; stroke-width: 1.5px; }
        .pie { stroke: white; }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <svg width=""400"" height=""400""></svg>
    
    <script>
        const lineSvg = d3.select(""svg:nth-of-type(1)"");
        const pieSvg = d3.select(""svg:nth-of-type(2)"");

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
            data.forEach(d => {
                d.Year = +d.Year;
                d[""Units Produced""] = +d[""Units Produced""];
                d.Revenue = +d.Revenue;
            });

            const lineMargin = { top: 20, right: 30, bottom: 30, left: 40 };
            const pieMargin = { top: 20, right: 30, bottom: 30, left: 40 };
            const lineWidth = +lineSvg.attr(""width"") - lineMargin.left - lineMargin.right;
            const lineHeight = +lineSvg.attr(""height"") - lineMargin.top - lineMargin.bottom;
            const pieWidth = +pieSvg.attr(""width"") - pieMargin.left - pieMargin.right;
            const pieHeight = +pieSvg.attr(""height"") - pieMargin.top - pieMargin.bottom;

            const x = d3.scaleLinear()
                .domain(d3.extent(data, d => d.Year))
                .range([0, lineWidth]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Units Produced""])])
                .range([lineHeight, 0]);

            const line = d3.line()
                .x(d => x(d.Year))
                .y(d => y(d[""Units Produced""]));

            lineSvg.append(""g"")
                .attr(""transform"", `translate(${lineMargin.left},${lineMargin.top})`)
                .append(""path"")
                .datum(data)
                .attr(""class"", ""line"")
                .attr(""d"", line);

            lineSvg.append(""g"")
                .attr(""transform"", `translate(${lineMargin.left},${lineMargin.top})`)
                .call(d3.axisLeft(y));

            lineSvg.append(""g"")
                .attr(""transform"", `translate(${lineMargin.left},${lineMargin.top + lineHeight})`)
                .call(d3.axisBottom(x));

            const radius = Math.min(pieWidth, pieHeight) / 2;
            const pieGroup = pieSvg.append(""g"")
                .attr(""transform"", `translate(${pieWidth / 2},${pieHeight / 2})`);

            const pie = d3.pie()
                .value(d => d.Revenue);
            const arc = d3.arc()
                .innerRadius(0)
                .outerRadius(radius);

            const updatePieChart = (selectedData) => {
                pieGroup.selectAll(""*"").remove();

                const pieData = pie(selectedData);

                pieGroup.selectAll("".arc"")
                    .data(pieData)
                    .enter().append(""g"")
                    .attr(""class"", ""arc"")
                    .append(""path"")
                    .attr(""d"", arc)
                    .attr(""class"", ""pie"")
                    .style(""fill"", (d, i) => d3.schemeCategory10[i % 10]);

                pieGroup.selectAll("".arc"")
                    .data(pieData)
                    .enter().append(""text"")
                    .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                    .attr(""dy"", "".35em"")
                    .text(d => d.data.Revenue);
            };

            lineSvg.selectAll(""path"")
                .on(""click"", function(event) {
                    const [xPos] = d3.pointer(event);
                    const yearSelected = x.invert(xPos - lineMargin.left);
                    const filteredData = data.filter(d => d.Year >= yearSelected - 1 && d.Year <= yearSelected + 1);
                    updatePieChart(filteredData);
                });

            updatePieChart(data); // Initial pie chart
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,33,34
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Units Produced, Revenue, Profit, Production Cost, Yield, and Export Volume. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot Matrix</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter matrix { 
            display: grid; 
            grid-template-columns: repeat(6, 100px);
            grid-template-rows: repeat(6, 100px); 
            margin: 20px; 
        }
        .cell {
            border: 1px solid lightgrey;
            position: relative;
        }
        .cell:hover {
            background: rgba(200, 200, 255, 0.3);
        }
        .selected {
            background: orange;
        }
    </style>
</head>
<body>
    <div id=""scatter-matrix"" class=""scatter matrix""></div>

    <script>
        const dimensions = [""Units Produced"", ""Revenue"", ""Profit"", ""Production Cost"", ""Yield"", ""Export Volume""];
        const width = 100, height = 100;

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
            dimensions.forEach(dim => {
                data.forEach(d => {
                    d[dim] = +d[dim];
                });
            });

            const svg = d3.select(""#scatter-matrix"");

            const cell = svg.selectAll("".cell"")
                .data(d3.cross(dimensions, dimensions))
                .enter().append(""svg"")
                .attr(""class"", ""cell"")
                .attr(""width"", width)
                .attr(""height"", height)
                .on(""click"", brushCells);

            const g = cell.append(""g"");

            cell.each(function([xDim, yDim]) {
                const xScale = d3.scaleLinear()
                    .domain(d3.extent(data, d => d[xDim])).nice()
                    .range([0, width - 20]);

                const yScale = d3.scaleLinear()
                    .domain(d3.extent(data, d => d[yDim])).nice()
                    .range([height - 20, 0]);

                g.append(""g"")
                    .attr(""transform"", `translate(10, 10)`)
                    .selectAll(""circle"")
                    .data(data)
                    .enter().append(""circle"")
                    .attr(""cx"", d => xScale(d[xDim]))
                    .attr(""cy"", d => yScale(d[yDim]))
                    .attr(""r"", 3)
                    .style(""fill"", ""steelblue"")
                    .style(""opacity"", 0.7);

                g.append(""g"")
                    .attr(""transform"", `translate(10, 10)`)
                    .call(d3.axisBottom(xScale)).attr(""transform"", `translate(0, ${height - 20})`);

                g.append(""g"")
                    .attr(""transform"", `translate(10, 10)`)
                    .call(d3.axisLeft(yScale));
            });

            function brushCells(event, d) {
                const [xDim, yDim] = d;
                const xScale = d3.scaleLinear()
                    .domain(d3.extent(data, d => d[xDim])).nice()
                    .range([0, width - 20]);

                const yScale = d3.scaleLinear()
                    .domain(d3.extent(data, d => d[yDim])).nice()
                    .range([height - 20, 0]);

                const brush = d3.brush()
                    .on(""end"", brushed);

                d3.select(this).call(brush);

                function brushed(event) {
                    const selection = d3.event.selection;
                    if (selection === null) return;

                    const [[x0, y0], [x1, y1]] = selection;
                    const selected = data.filter(d => {
                        return xScale(d[xDim]) >= x0 && xScale(d[xDim]) <= x1 &&
                               yScale(d[yDim]) >= y0 && yScale(d[yDim]) <= y1;
                    });

                    svg.selectAll("".cell circle"")
                        .style(""fill"", d => selected.includes(d) ? ""orange"" : ""steelblue"")
                        .style(""opacity"", d => selected.includes(d) ? 1 : 0.7);
                }
            }
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,34,35
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a brushable Scatterplot that visualizes the relationship between Units Produced and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatterplot {
            display: flex;
        }
        svg {
            border: 1px solid black;
            margin-right: 20px;
        }
        table {
            border-collapse: collapse;
            margin-top: 20px;
        }
        th, td {
            border: 1px solid black;
            padding: 5px;
        }
    </style>
</head>
<body>
    <div class=""scatterplot"">
        <svg width=""600"" height=""400""></svg>
        <div>
            <table>
                <thead>
                    <tr>
                        <th>Year</th>
                        <th>Crop Type</th>
                        <th>Units Produced</th>
                        <th>Revenue</th>
                        <th>Production Cost</th>
                        <th>Profit</th>
                        <th>Yield</th>
                        <th>Number of Farms</th>
                        <th>Export Volume</th>
                    </tr>
                </thead>
                <tbody id=""table-body""></tbody>
            </table>
        </div>
    </div>
    <script>
        const svg = d3.select(""svg"");
        const margin = {top: 20, right: 30, bottom: 30, left: 40};
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        const brush = d3.brushX()
            .extent([[0, 0], [width, height]])
            .on(""brush end"", brushed);

        svg.append(""g"")
            .attr(""class"", ""brush"")
            .call(brush);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
            data.forEach(d => {
                d['Units Produced'] = +d['Units Produced'];
                d['Revenue'] = +d['Revenue'];
            });

            x.domain(d3.extent(data, d => d['Units Produced'])).nice();
            y.domain(d3.extent(data, d => d['Revenue'])).nice();

            g.append(""g"")
                .attr(""class"", ""x-axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""y-axis"")
                .call(d3.axisLeft(y));

            const circles = g.selectAll(""circle"")
                .data(data)
                .enter().append(""circle"")
                .attr(""cx"", d => x(d['Units Produced']))
                .attr(""cy"", d => y(d['Revenue']))
                .attr(""r"", 3)
                .attr(""fill"", ""steelblue"");

            function brushed(event) {
                const selection = d3.event.selection;
                if (selection) {
                    const [x0, x1] = selection.map(x.invert);

                    const selectedData = data.filter(d => d['Units Produced'] >= x0 && d['Units Produced'] <= x1);
                    updateTable(selectedData.slice(0, 20));

                    circles.classed(""selected"", function(d) {
                        return d['Units Produced'] >= x0 && d['Units Produced'] <= x1;
                    });
                }
            }

            function updateTable(data) {
                const tableBody = d3.select(""#table-body"");
                tableBody.selectAll(""tr"").remove();
                data.forEach(d => {
                    const row = tableBody.append(""tr"");
                    row.append(""td"").text(d['Year']);
                    row.append(""td"").text(d['Crop Type']);
                    row.append(""td"").text(d['Units Produced']);
                    row.append(""td"").text(d['Revenue']);
                    row.append(""td"").text(d['Production Cost']);
                    row.append(""td"").text(d['Profit']);
                    row.append(""td"").text(d['Yield']);
                    row.append(""td"").text(d['Number of Farms']);
                    row.append(""td"").text(d['Export Volume']);
                });
            }
        });
    </script>
</body>
</html>
```",Initialization Error,35,36
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a horizontal Bar Chart that shows Crop Type and Units Produced, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }

        .bar:hover {
            fill: orange;
        }

        .mini-bar {
            fill: lightgrey;
        }

        .axis--x path,
        .axis--x line {
            display: none;
        }

        .axis--y .tick line {
            stroke: #ddd;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const margin = {top: 20, right: 30, bottom: 40, left: 100},
              width = 800 - margin.left - margin.right,
              height = 400 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
            data.forEach(d => {
                d[""Units Produced""] = +d[""Units Produced""];
            });

            const x = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Units Produced""])])
                .range([0, width]);

            const y = d3.scaleBand()
                .domain(data.map(d => d[""Crop Type""]))
                .range([0, height])
                .padding(0.1);

            svg.append(""g"")
                .attr(""class"", ""axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""axis--y"")
                .call(d3.axisLeft(y));

            svg.selectAll("".bar"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", 0)
                .attr(""y"", d => y(d[""Crop Type""]))
                .attr(""width"", d => x(d[""Units Produced""]))
                .attr(""height"", y.bandwidth());

            const minimapWidth = 200;
            const minimapHeight = 100;

            const minimapSvg = d3.select(""body"").append(""svg"")
                .attr(""width"", minimapWidth)
                .attr(""height"", minimapHeight)
                .style(""margin-top"", ""20px"");

            const miniX = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Units Produced""])])
                .range([0, minimapWidth]);

            const miniY = d3.scaleBand()
                .domain(data.map(d => d[""Crop Type""]))
                .range([0, minimapHeight])
                .padding(0.1);

            minimapSvg.selectAll("".mini-bar"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""mini-bar"")
                .attr(""x"", 0)
                .attr(""y"", d => miniY(d[""Crop Type""]))
                .attr(""width"", d => miniX(d[""Units Produced""]))
                .attr(""height"", miniY.bandwidth());
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,36,37
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Visualization</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.2.2/echarts.min.js""></script>
</head>
<body>
    <div id=""scatterPlot"" style=""width: 50%; height: 400px; float: left;""></div>
    <div id=""barChart"" style=""width: 50%; height: 400px; float: right;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const scatterData = [];
                const barData = {};
                const cropTypes = new Set();

                rows.forEach(row => {
                    const cols = row.split(',');
                    const year = cols[0];
                    const cropType = cols[1];
                    const unitsProduced = parseFloat(cols[2]);
                    const revenue = parseFloat(cols[3]);
                    const productionCost = parseFloat(cols[4]);
                    const profit = parseFloat(cols[5]);
                    const yieldValue = parseFloat(cols[6]);
                    const numberOfFarms = parseFloat(cols[7]);
                    const exportVolume = parseFloat(cols[8]);

                    scatterData.push({
                        name: cropType,
                        value: [unitsProduced, profit]
                    });

                    if (!barData[cropType]) {
                        barData[cropType] = {
                            revenue: 0,
                            productionCost: 0,
                            profit: 0
                        };
                    }
                    barData[cropType].revenue += revenue;
                    barData[cropType].productionCost += productionCost;
                    barData[cropType].profit += profit;
                    cropTypes.add(cropType);
                });

                const barChartData = Array.from(cropTypes).map(type => ({
                    name: type,
                    value: barData[type].profit
                }));

                const scatterChart = echarts.init(document.getElementById('scatterPlot'));
                scatterChart.setOption({
                    title: {
                        text: 'Scatter Plot of Units Produced vs Profit',
                    },
                    tooltip: {},
                    xAxis: {
                        name: 'Units Produced'
                    },
                    yAxis: {
                        name: 'Profit'
                    },
                    series: [{
                        type: 'scatter',
                        data: scatterData,
                        symbolSize: 10,
                        itemStyle: {
                            emphasis: {
                                borderColor: 'black',
                                borderWidth: 1,
                                shadowBlur: 10,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }]
                });

                const barChart = echarts.init(document.getElementById('barChart'));
                barChart.setOption({
                    title: {
                        text: 'Bar Chart of Profit by Crop Type',
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: barChartData.map(item => item.name)
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        name: 'Profit',
                        type: 'bar',
                        data: barChartData.map(item => item.value),
                        itemStyle: {
                            color: '#40a9ff'
                        }
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,37,38
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Visualization</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.0.0/echarts.min.js""></script>
</head>
<body>
    <div id=""scatterChart"" style=""width: 50%; height: 400px; float: left;""></div>
    <div id=""barChart"" style=""width: 50%; height: 400px; float: right;""></div>

    <script>
        const url = 'https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv';

        fetch(url)
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const processedData = rows.map(row => {
                    const cols = row.split(',');
                    return {
                        Year: cols[0],
                        CropType: cols[1],
                        UnitsProduced: +cols[2],
                        Revenue: +cols[3],
                        ProductionCost: +cols[4],
                        Profit: +cols[5],
                        Yield: +cols[6],
                        NumberOfFarms: +cols[7],
                        ExportVolume: +cols[8]
                    };
                }).filter(item => !isNaN(item.UnitsProduced));

                const scatterData = processedData.map(item => [item.UnitsProduced, item.ProductionCost]);
                const barData = processedData.map(item => item.CropType);
                const barValues = processedData.map(item => item.Profit);
                
                // Scatterplot
                const scatterChart = echarts.init(document.getElementById('scatterChart'));
                scatterChart.setOption({
                    tooltip: {},
                    xAxis: {
                        type: 'value',
                        name: 'Units Produced'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Production Cost'
                    },
                    series: [{
                        type: 'scatter',
                        data: scatterData,
                        itemStyle: {
                            normal: {
                                opacity: 0.8
                            }
                        }
                    }]
                });

                // Bar chart
                const barChart = echarts.init(document.getElementById('barChart'));
                barChart.setOption({
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: barData,
                        axisLabel: { rotate: 45 }
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Profit'
                    },
                    series: [{
                        type: 'bar',
                        data: barValues
                    }]
                });

                // Brush and linking functionality
                scatterChart.on('select', function (params) {
                    const selectedData = params.batch[0].selected;
                    const selectedCropTypes = selectedData.map(item => barData[item.dataIndex]);
                    const highlightedValues = barValues.map((val, index) => selectedCropTypes.includes(barData[index]) ? {value: val, itemStyle: {color: 'red'}} : {value: val});
                    
                    barChart.setOption({
                        series: [{
                            type: 'bar',
                            data: highlightedValues
                        }]
                    });
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,38,39
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Produced , while the pie chart represents the distribution of Revenue.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #lineChart, #pieChart {
            width: 100%;
            height: 400px;
        }
    </style>
</head>
<body>
    <div id=""lineChart""></div>
    <div id=""pieChart""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => row.split(','));
                const years = [...new Set(csvData.map(row => row[0]))];
                const unitsProduced = years.map(year => {
                    return csvData
                        .filter(row => row[0] === year)
                        .reduce((sum, row) => sum + parseFloat(row[2]), 0);
                });

                const revenueData = {};
                csvData.forEach(row => {
                    const cropType = row[1];
                    const revenue = parseFloat(row[3]);
                    revenueData[cropType] = (revenueData[cropType] || 0) + revenue;
                });
                
                const pieData = Object.entries(revenueData).map(([key, value]) => ({ name: key, value }));

                const lineChart = echarts.init(document.getElementById('lineChart'));
                lineChart.setOption({
                    title: { text: 'Trend of Units Produced' },
                    xAxis: { type: 'category', data: years },
                    yAxis: { type: 'value' },
                    series: [{
                        data: unitsProduced,
                        type: 'line',
                        smooth: true
                    }]
                });

                const pieChart = echarts.init(document.getElementById('pieChart'));
                pieChart.setOption({
                    title: { text: 'Distribution of Revenue', left: 'center' },
                    tooltip: { trigger: 'item' },
                    series: [{
                        type: 'pie',
                        radius: '50%',
                        data: pieData,
                        emphasis: {
                            itemStyle: { 
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,39,40
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Produced , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            display: flex;
            flex-direction: column;
            height: 100vh;
        }
        #lineChart, #pieChart {
            flex: 1;
        }
    </style>
</head>
<body>
    <div id=""main"">
        <div id=""lineChart""></div>
        <div id=""pieChart""></div>
    </div>
    <script>
        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv');
            const data = await response.text();
            const rows = data.split('\n').slice(1).map(row => row.split(','));
            return rows.map(row => ({
                Year: row[0],
                CropType: row[1],
                UnitsProduced: Number(row[2]),
                Revenue: Number(row[3]),
                ProductionCost: Number(row[4]),
                Profit: Number(row[5]),
                Yield: Number(row[6]),
                NumberOfFarms: Number(row[7]),
                ExportVolume: Number(row[8])
            }));
        }

        function drawLineChart(data) {
            const chartDom = document.getElementById('lineChart');
            const myChart = echarts.init(chartDom);
            const option = {
                title: {
                    text: 'Trend of Units Produced Over Years'
                },
                xAxis: {
                    type: 'category',
                    data: [...new Set(data.map(item => item.Year))]
                },
                yAxis: {
                    type: 'value'
                },
                series: [{
                    data: data.map(item => item.UnitsProduced),
                    type: 'line',
                    smooth: true,
                    itemStyle: { color: 'blue' },
                }],
                toolbox: {
                    feature: {
                        myTool: {
                            show: true,
                            title: 'Select',
                            icon: 'path://M 10 10 L 20 20 M 20 10 L 10 20',
                            onclick: function () { myChart.dispatchAction({type: 'dataZoom', start: 0, end: 100}); }
                        }
                    }
                }
            };
            myChart.setOption(option);
            return myChart;
        }

        function drawPieChart(data) {
            const chartDom = document.getElementById('pieChart');
            const myChart = echarts.init(chartDom);
            const revenueMap = new Map();

            data.forEach(item => {
                if (revenueMap.has(item.CropType)) {
                    revenueMap.set(item.CropType, revenueMap.get(item.CropType) + item.Revenue);
                } else {
                    revenueMap.set(item.CropType, item.Revenue);
                }
            });

            const pieData = Array.from(revenueMap, ([name, value]) => ({ name, value }));

            const option = {
                title: {
                    text: 'Distribution of Revenue by Crop Type',
                    left: 'center'
                },
                series: [{
                    type: 'pie',
                    radius: '50%',
                    data: pieData,
                    emphasis: {
                        itemStyle: {
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowColor: 'rgba(0, 0, 0, 0.5)'
                        }
                    }
                }]
            };
            myChart.setOption(option);
            return myChart;
        }

        async function init() {
            const data = await fetchData();
            const lineChart = drawLineChart(data);
            const pieChart = drawPieChart(data);

            lineChart.on('click', function(params) {
                const selectedYears = params.name;
                const filteredData = data.filter(item => item.Year === selectedYears);
                drawPieChart(filteredData);
            });
        }

        init();
    </script>
</body>
</html>
```",Unexpected Execution Result,40,41
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Units Produced, Revenue, Profit, Production Cost, Yield, and Export Volume. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        .scatterplot {
            display: flex;
            flex-wrap: wrap;
            width: 800px;
            height: 800px;
        }
        .scatterplot div {
            width: 400px;
            height: 400px;
        }
    </style>
</head>
<body>
    <div id=""scatterplot"" class=""scatterplot""></div>
    <script>
        async function loadData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv');
            const dataText = await response.text();
            const rows = dataText.split('\n').slice(1).map(row => row.split(','));
            const data = rows.map(row => ({
                Year: row[0],
                CropType: row[1],
                UnitsProduced: +row[2],
                Revenue: +row[3],
                ProductionCost: +row[4],
                Profit: +row[5],
                Yield: +row[6],
                NumberOfFarms: +row[7],
                ExportVolume: +row[8]
            })).filter(d => !isNaN(d.UnitsProduced));

            return data;
        }

        function createScatterPlot(data, xField, yField, id) {
            const chartDom = document.getElementById(id);
            const myChart = echarts.init(chartDom);
            const option = {
                xAxis: { type: 'value', name: xField },
                yAxis: { type: 'value', name: yField },
                series: [{
                    type: 'scatter',
                    symbolSize: 10,
                    data: data.map(d => [d[xField], d[yField]]),
                    itemStyle: {
                        opacity: 0.5
                    }
                }],
                tooltip: {},
            };
            myChart.setOption(option);
            return myChart;
        }

        function highlightSelectedPoints(selected, charts) {
            charts.forEach(chart => {
                const option = chart.getOption();
                option.series[0].itemStyle.opacity = selected.includes(option.series[0].data.indexOf(dataPoint)) ? 1 : 0.5;
                chart.setOption(option);
            });
        }

        async function main() {
            const data = await loadData();
            const fields = ['UnitsProduced', 'Revenue', 'Profit', 'ProductionCost', 'Yield', 'ExportVolume'];
            const charts = fields.map((field, idx) => createScatterPlot(data, fields[idx], fields[(idx + 1) % fields.length], `scatter${idx}`));

            const brush = echarts.init(document.getElementById('scatterplot'));
            brush.on('brushSelected', (params) => {
                const selectedDataIndex = new Set(); 
                params.batch.forEach(batch => {
                    batch.selected.forEach(selected => {
                        selectedDataIndex.add(selected.dataIndex);
                    });
                });
                highlightSelectedPoints(Array.from(selectedDataIndex), charts);
            });
        }
        
        main();
    </script>
</body>
</html>
```",Initialization Error,41,42
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a brushable Scatterplot that visualizes the relationship between Units Produced and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 70%;
            height: 400px;
            float: left;
        }
        #table {
            width: 28%;
            height: 400px;
            float: right;
            overflow-y: scroll;
            border: 1px solid #ccc;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <div id=""table"">
        <table>
            <thead>
                <tr>
                    <th>Year</th>
                    <th>Crop Type</th>
                    <th>Units Produced</th>
                    <th>Revenue</th>
                </tr>
            </thead>
            <tbody id=""table-body""></tbody>
        </table>
    </div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(csvText => {
                const data = csvText.split('\n').slice(1).map(row => row.split(',')).map(cols => ({
                    Year: cols[0],
                    CropType: cols[1],
                    UnitsProduced: +cols[2],
                    Revenue: +cols[3],
                    ProductionCost: +cols[4],
                    Profit: +cols[5],
                    Yield: +cols[6],
                    NumberOfFarms: +cols[7],
                    ExportVolume: +cols[8],
                })).filter(item => !isNaN(item.UnitsProduced) && !isNaN(item.Revenue));

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);
                
                const option = {
                    title: {
                        text: 'Units Produced vs Revenue'
                    },
                    tooltip: {},
                    xAxis: {
                        name: 'Units Produced',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Revenue',
                        type: 'value'
                    },
                    series: [{
                        type: 'scatter',
                        data: data.map(item => [item.UnitsProduced, item.Revenue]),
                        itemStyle: {
                            color: '#7b92f6'
                        }
                    }],
                    brush: {
                        type: ['rect'],
                    }
                };

                myChart.setOption(option);

                myChart.on('brushEnd', params => {
                    const selectedPoints = params.batch[0].areas[0].brushInfo;
                    const selectedData = data.filter((item, index) => selectedPoints.some(point => {
                        const x = item.UnitsProduced;
                        const y = item.Revenue;
                        return point.range[0][0] <= x && x <= point.range[1][0] && point.range[0][1] <= y && y <= point.range[1][1];
                    }));
                    
                    const tbody = document.getElementById('table-body');
                    tbody.innerHTML = '';
                    selectedData.slice(0, 20).forEach(item => {
                        const row = `<tr>
                            <td>${item.Year}</td>
                            <td>${item.CropType}</td>
                            <td>${item.UnitsProduced}</td>
                            <td>${item.Revenue}</td>
                        </tr>`;
                        tbody.innerHTML += row;
                    });
                });
            });
    </script>
</body>
</html>
```",Correct,42,43
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a horizontal Bar Chart that shows Crop Type and Units Produced, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 70%;
            height: 400px;
            float: left;
        }
        #minimap {
            width: 28%;
            height: 100px;
            float: right;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <div id=""minimap""></div>
    
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const chartData = rows.map(row => {
                    const cols = row.split(',');
                    return {
                        cropType: cols[1],
                        unitsProduced: parseFloat(cols[2])
                    };
                }).filter(item => !isNaN(item.unitsProduced));

                const crops = chartData.map(item => item.cropType);
                const units = chartData.map(item => item.unitsProduced);

                const mainChart = echarts.init(document.getElementById('main'));
                const minimapChart = echarts.init(document.getElementById('minimap'));

                mainChart.setOption({
                    title: { text: 'Crop Type vs Units Produced' },
                    tooltip: {},
                    xAxis: {
                        type: 'value',
                        name: 'Units Produced',
                        splitLine: { show: false }
                    },
                    yAxis: {
                        type: 'category',
                        data: crops
                    },
                    series: [{
                        type: 'bar',
                        data: units
                    }]
                });

                minimapChart.setOption({
                    title: { text: 'Minimap - Units Produced Overview' },
                    tooltip: {},
                    xAxis: {
                        type: 'value',
                        name: 'Units Produced',
                        splitLine: { show: false }
                    },
                    yAxis: {
                        type: 'category',
                        data: crops
                    },
                    series: [{
                        type: 'bar',
                        data: units
                    }],
                    dataZoom: [{
                        type: 'inside'
                    }]
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,43,44
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.22.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.8.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>

<div id=""scatterplot"" style=""width: 50%; display: inline-block;""></div>
<div id=""barchart"" style=""width: 50%; display: inline-block;""></div>

<script>
    const scatterSpec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
            ""format"": {""type"": ""csv""}
        },
        ""mark"": ""point"",
        ""encoding"": {
            ""x"": {""field"": ""Yield"", ""type"": ""quantitative"", ""title"": ""Yield""},
            ""y"": {""field"": ""Profit"", ""type"": ""quantitative"", ""title"": ""Profit""},
            ""color"": {""field"": ""Crop Type"", ""type"": ""nominal""},
            ""tooltip"": [
                {""field"": ""Year"", ""type"": ""ordinal""},
                {""field"": ""Number of Farms"", ""type"": ""quantitative""},
                {""field"": ""Revenue"", ""type"": ""quantitative""}
            ]
        },
        ""title"": ""Scatterplot of Yield vs Profit by Crop Type""
    };

    const barSpec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
            ""format"": {""type"": ""csv""}
        },
        ""mark"": ""bar"",
        ""encoding"": {
            ""x"": {""field"": ""Crop Type"", ""type"": ""nominal"", ""title"": ""Crop Type""},
            ""y"": {""field"": ""Revenue"", ""type"": ""quantitative"", ""title"": ""Total Revenue""},
            ""color"": {""field"": ""Crop Type"", ""type"": ""nominal""},
        },
        ""title"": ""Bar Chart of Total Revenue by Crop Type""
    };

    vegaEmbed('#scatterplot', scatterSpec);
    vegaEmbed('#barchart', barSpec);
</script>

</body>
</html>
```",Correct,44,45
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <style>
        #vis {
            display: flex;
            justify-content: space-between;
        }
        .chart {
            width: 45%;
        }
    </style>
</head>
<body>
    <div id=""vis"">
        <div id=""scatterplot"" class=""chart""></div>
        <div id=""barchart"" class=""chart""></div>
    </div>
    <script type=""text/javascript"">
        const dataUrl = ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"";

        const scatterplotSpec = {
            description: 'Scatter plot of Agricultural Production',
            data: {url: dataUrl},
            mark: 'point',
            encoding: {
                x: {field: 'Yield', type: 'quantitative'},
                y: {field: 'Profit', type: 'quantitative'},
                color: {field: 'Crop Type', type: 'nominal'},
                tooltip: [
                    {field: 'Year', type: 'quantitative'},
                    {field: 'Crop Type', type: 'nominal'},
                    {field: 'Units Produced', type: 'quantitative'},
                    {field: 'Revenue', type: 'quantitative'},
                    {field: 'Production Cost', type: 'quantitative'},
                    {field: 'Profit', type: 'quantitative'},
                    {field: 'Yield', type: 'quantitative'},
                    {field: 'Number of Farms', type: 'quantitative'},
                    {field: 'Export Volume', type: 'quantitative'}
                ]
            },
            selection: {
                brush: {
                    type: ""interval"",
                    encodings: [""x"", ""y""]
                }
            }
        };

        const barchartSpec = {
            description: 'Bar chart of Agricultural Production',
            data: {url: dataUrl},
            mark: 'bar',
            encoding: {
                x: {field: 'Crop Type', type: 'nominal'},
                y: {aggregate: 'sum', field: 'Profit', type: 'quantitative'},
                color: {field: 'Crop Type', type: 'nominal'}
            },
            transform: [
                {
                    filter: {selection: 'brush'}
                }
            ]
        };

        vegaEmbed(""#scatterplot"", scatterplotSpec).then(function(result) {
            const view = result.view;
            view.addSignalListener('brush', function(name, value) {
                const { field } = value;
                // Update the bar chart based on the brush selection.
                vegaEmbed(""#barchart"", barchartSpec);
            });
        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Initial Result,45,46
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Produced , while the pie chart represents the distribution of Revenue.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""line-chart""></div>
    <div id=""pie-chart""></div>

    <script>
        // Line chart for Units Produced over Years
        const lineChartSpec = {
            $schema: 'https://vega.github.io/schema/vega-lite/v5.json',
            title: 'Trend of Units Produced Over Years',
            data: {
                url: 'https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv',
                format: { type: 'csv' }
            },
            mark: 'line',
            encoding: {
                x: { field: 'Year', type: 'ordinal' },
                y: { field: 'Units Produced', type: 'quantitative' }
            }
        };

        // Pie chart for Revenue distribution
        const pieChartSpec = {
            $schema: 'https://vega.github.io/schema/vega-lite/v5.json',
            title: 'Distribution of Revenue by Crop Type',
            data: {
                url: 'https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv',
                format: { type: 'csv' }
            },
            mark: 'arc',
            encoding: {
                theta: { field: 'Revenue', type: 'quantitative' },
                color: { field: 'Crop Type', type: 'nominal' }
            }
        };

        vegaEmbed('#line-chart', lineChartSpec);
        vegaEmbed('#pie-chart', pieChartSpec);
    </script>
</body>
</html>
```",Correct,46,47
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Produced , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <style>
        #vis {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        .chart {
            width: 800px;
            height: 400px;
            margin: 20px 0;
        }
    </style>
</head>
<body>
    <div id=""vis"">
        <div id=""lineChart"" class=""chart""></div>
        <div id=""pieChart"" class=""chart""></div>
    </div>

    <script>
        const dataUrl = ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"";

        const lineChartSpec = {
            ""data"": { ""url"": dataUrl },
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": { ""field"": ""Year"", ""type"": ""quantitative"", ""title"": ""Year"" },
                ""y"": { ""field"": ""Units Produced"", ""type"": ""quantitative"", ""title"": ""Units Produced"" },
                ""tooltip"": [{ ""field"": ""Crop Type"", ""type"": ""nominal"" }]
            },
            ""selection"": {
                ""brush"": {
                    ""type"": ""interval"",
                    ""encodings"": [""x""]
                }
            }
        };

        const pieChartSpec = {
            ""data"": { ""url"": dataUrl },
            ""transform"": [
                {
                    ""filter"": {""selection"": ""brush""}
                },
                {
                    ""aggregate"": [
                        { ""op"": ""sum"", ""field"": ""Revenue"", ""as"": ""Total Revenue"" }
                    ],
                    ""groupby"": [""Crop Type""]
                }
            ],
            ""mark"": ""arc"",
            ""encoding"": {
                ""theta"": { ""field"": ""Total Revenue"", ""type"": ""quantitative"" },
                ""color"": { ""field"": ""Crop Type"", ""type"": ""nominal"", ""legend"": {""orient"": ""right""} },
                ""tooltip"": [{ ""field"": ""Crop Type"", ""type"": ""nominal"" }, { ""field"": ""Total Revenue"", ""type"": ""quantitative"" }]
            }
        };

        vegaEmbed('#lineChart', lineChartSpec).then(function(result) {
            const view = result.view;
            view.addEventListener('click', function() {
                const selectedData = view.get('brush');
                if (selectedData) {
                    vegaEmbed('#pieChart', pieChartSpec).catch(console.error);
                }
            });
        }).catch(console.error);
        
        vegaEmbed('#pieChart', pieChartSpec).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,47,48
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Units Produced, Revenue, Profit, Production Cost, Yield, and Export Volume. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Brushable Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <style>
        .brush {
            fill: none;
            stroke: #000;
            stroke-opacity: 0.5;
        }
        .highlight {
            stroke: orange;
            stroke-width: 2;
        }
    </style>
</head>
<body>
    <div id=""vis""></div>
    <script type=""text/javascript"">
        const spec = {
            $schema: 'https://vega.github.io/schema/vega-lite/v5.json',
            description: 'A brushable scatter plot matrix',
            data: {
                url: 'https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv',
                format: { type: 'csv' }
            },
            selection: {
                brush: {
                    type: 'interval',
                    encodings: ['x', 'y']
                },
                highlight: {
                    type: 'point',
                    on: 'mouseover',
                    encodings: ['x', 'y'],
                    resolve: 'global'
                }
            },
            layers: [],
            width: 300,
            height: 300,
            facet: {
                columns: 2,
                row: {
                    repeat: ['Units Produced', 'Revenue', 'Profit', 'Production Cost', 'Yield', 'Export Volume']
                },
                column: {
                    repeat: ['Units Produced', 'Revenue', 'Profit', 'Production Cost', 'Yield', 'Export Volume']
                }
            },
            mark: {
                type: 'point',
                tooltip: true,
                fill: { value: 'steelblue' },
                stroke: { value: 'black' }
            },
            encoding: {
                x: {
                    field: {}, // will be filled during rendering
                    type: 'quantitative',
                    scale: { domain: { selection: 'brush' } }
                },
                y: {
                    field: {}, // will be filled during rendering
                    type: 'quantitative',
                    scale: { domain: { selection: 'brush' } }
                },
                opacity: {
                    condition: {
                        selection: 'brush',
                        value: 1
                    },
                    value: 0.3
                }
            }
        };

        vegaEmbed('#vis', spec, { renderer: 'svg' }).then(result => {
            result.view.on('brushend', handleBrush);
        });

        function handleBrush(params) {
            const { x, y } = params.data;
            const brushData = (params?.brush || {}).signal;
            const mark = (params.mark || {}).signal;

            if (brushData && mark) {
                const { x0, x1, y0, y1 } = brushData;
                const filtered = data.filter(d => d[mark] >= x0 && d[mark] <= x1 && d[mark] >= y0 && d[mark] <= y1);
                params.mark.highlight = filtered.map(d => d.name);
            }
        }
    </script>
</body>
</html>
```",Initialization Error,48,49
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a brushable Scatterplot that visualizes the relationship between Units Produced and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <style>
        #scatterplot {
            width: 70%;
            height: 400px;
            display: inline-block;
        }
        #table-container {
            width: 28%;
            display: inline-block;
            vertical-align: top;
        }
    </style>
</head>
<body>
    <div id=""scatterplot""></div>
    <div id=""table-container"">
        <table id=""data-table"" border=""1"">
            <tr>
                <th>Year</th>
                <th>Crop Type</th>
                <th>Units Produced</th>
                <th>Revenue</th>
                <th>Production Cost</th>
                <th>Profit</th>
                <th>Yield</th>
                <th>Number of Farms</th>
                <th>Export Volume</th>
            </tr>
        </table>
    </div>

    <script type=""text/javascript"">
        const scatterplotSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum['Units Produced'] != null && datum['Revenue'] != null""
                }
            ],
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Units Produced"",
                    ""type"": ""quantitative"",
                    ""title"": ""Units Produced""
                },
                ""y"": {
                    ""field"": ""Revenue"",
                    ""type"": ""quantitative"",
                    ""title"": ""Revenue""
                },
                ""tooltip"": [
                    { ""field"": ""Year"", ""type"": ""temporal"" },
                    { ""field"": ""Crop Type"", ""type"": ""nominal"" },
                    { ""field"": ""Units Produced"", ""type"": ""quantitative"" },
                    { ""field"": ""Revenue"", ""type"": ""quantitative"" },
                    { ""field"": ""Production Cost"", ""type"": ""quantitative"" },
                    { ""field"": ""Profit"", ""type"": ""quantitative"" },
                    { ""field"": ""Yield"", ""type"": ""quantitative"" },
                    { ""field"": ""Number of Farms"", ""type"": ""quantitative"" },
                    { ""field"": ""Export Volume"", ""type"": ""quantitative"" }
                ]
            },
            ""selection"": {
                ""brush"": {
                    ""type"": ""interval"",
                    ""encodings"": [""x"", ""y""]
                }
            }
        };

        vegaEmbed('#scatterplot', scatterplotSpec).then(function(result) {
            const view = result.view;

            view.addSignalListener('brush', function(name, value) {
                const brushedData = view.data('table').filter(d => (
                    value &&
                    d['Units Produced'] >= value[0][0] && d['Units Produced'] <= value[1][0] &&
                    d['Revenue'] >= value[0][1] && d['Revenue'] <= value[1][1]
                ));

                const table = document.getElementById('data-table');

                // Clear existing rows except header
                for (let i = table.rows.length - 1; i > 0; i--) {
                    table.deleteRow(i);
                }

                // Populate table with brushed data (up to 20 items)
                brushedData.slice(0, 20).forEach(d => {
                    const row = table.insertRow();
                    row.insertCell(0).innerText = d['Year'];
                    row.insertCell(1).innerText = d['Crop Type'];
                    row.insertCell(2).innerText = d['Units Produced'];
                    row.insertCell(3).innerText = d['Revenue'];
                    row.insertCell(4).innerText = d['Production Cost'];
                    row.insertCell(5).innerText = d['Profit'];
                    row.insertCell(6).innerText = d['Yield'];
                    row.insertCell(7).innerText = d['Number of Farms'];
                    row.insertCell(8).innerText = d['Export Volume'];
                });
            });
        }).catch(console.error);
    </script>
</body>
</html>
```",Correct,49,50
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a horizontal Bar Chart that shows Crop Type and Units Produced, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.6.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
    <style>
        #vis {
            display: flex;
        }
        #main-chart {
            width: 70%;
        }
        #minimap {
            width: 30%;
        }
    </style>
</head>
<body>
    <div id=""vis"">
        <div id=""main-chart""></div>
        <div id=""minimap""></div>
    </div>

    <script>
        const mainChartSpec = {
            $schema: 'https://vega.github.io/schema/vega-lite/v5.json',
            title: 'Units Produced by Crop Type',
            data: {
                url: 'https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv',
                format: { type: 'csv' }
            },
            mark: 'bar',
            encoding: {
                x: {
                    field: 'Units Produced',
                    type: 'quantitative',
                    title: 'Units Produced'
                },
                y: {
                    field: 'Crop Type',
                    type: 'nominal',
                    title: 'Crop Type',
                    sort: '-x'
                }
            }
        };

        const minimapSpec = {
            $schema: 'https://vega.github.io/schema/vega-lite/v5.json',
            title: 'Minimap',
            data: {
                url: 'https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv',
                format: { type: 'csv' }
            },
            mark: {
                type: 'bar',
                opacity: 0.5
            },
            encoding: {
                x: {
                    field: 'Units Produced',
                    type: 'quantitative'
                },
                y: {
                    aggregate: 'count',
                    type: 'quantitative',
                    axis: { title: 'Number of Crop Types' }
                }
            }
        };

        vegaEmbed('#main-chart', mainChartSpec).then(function(result) {
            return vegaEmbed('#minimap', minimapSpec);
        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Initial Result,50,51
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot that visualizes the relationship between Units Produced and Revenue.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Units Produced vs Revenue</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter {
            fill: steelblue;
            stroke: white;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script>
        const svg = d3.select(""svg""),
            margin = {top: 20, right: 30, bottom: 30, left: 40},
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
            data.forEach(d => {
                d[""Units Produced""] = +d[""Units Produced""];
                d[""Revenue""] = +d[""Revenue""];
            });

            const x = d3.scaleLinear()
                .domain(d3.extent(data, d => d[""Units Produced""])).nice()
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain(d3.extent(data, d => d[""Revenue""])).nice()
                .range([height, 0]);

            g.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .call(d3.axisLeft(y));

            g.selectAll("".scatter"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""scatter"")
                .attr(""cx"", d => x(d[""Units Produced""]))
                .attr(""cy"", d => y(d[""Revenue""]))
                .attr(""r"", 3);
        });
    </script>
</body>
</html>
```",Correct,51,52
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Line Chart that visualizes the trend of Units Produced over the Year for each Crop Type.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Trends</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        /* Basic styles for the chart */
        .line {
            fill: none;
            stroke-width: 2px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
            margin = { top: 20, right: 30, bottom: 30, left: 40 },
            width = svg.attr(""width"") - margin.left - margin.right,
            height = svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
            const cropTypes = Array.from(new Set(data.map(d => d['Crop Type'])));
            const parseYear = d3.scalePoint().domain(cropTypes).range([0, height]);

            const years = Array.from(new Set(data.map(d => d.Year))).sort();
            const x = d3.scaleBand().domain(years).range([0, width]).padding(0.1);
            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => +d['Units Produced'])])
                .nice()
                .range([height, 0]);

            const line = d3.line()
                .x(d => x(d.Year) + x.bandwidth() / 2)
                .y(d => y(d['Units Produced']));

            const groupedData = d3.group(data, d => d['Crop Type']);

            g.append(""g"")
                .attr(""fill"", ""none"")
                .attr(""stroke"", ""black"")
                .attr(""stroke-width"", 1)
                .selectAll("".line"")
                .data(cropTypes)
                .join(""path"")
                .attr(""class"", ""line"")
                .attr(""d"", d => line(groupedData.get(d).map(item => ({ Year: item['Year'], 'Units Produced': +item['Units Produced'] }))))
                .style(""stroke"", (d, i) => d3.schemeCategory10[i % 10]);

            g.append(""g"").attr(""class"", ""axis x-axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"").attr(""class"", ""axis y-axis"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Correct,52,53
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Bar Chart that visualizes the Units Produced for each Crop Type in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Crop Production Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
            margin = {top: 20, right: 30, bottom: 40, left: 40},
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom,
            g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
            data = data.filter(d => d.Year === ""2020"");

            const cropTypes = data.map(d => d['Crop Type']);
            const unitsProduced = data.map(d => +d['Units Produced']);

            const x = d3.scaleBand()
                .domain(cropTypes)
                .range([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([0, d3.max(unitsProduced)])
                .nice()
                .range([height, 0]);

            g.append(""g"")
                .selectAll("".bar"")
                .data(unitsProduced)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", (d, i) => x(cropTypes[i]))
                .attr(""y"", d => y(d))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d));

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Correct,53,54
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Pie Chart that visualizes the proportion of Units Produced contributed by each Crop Type in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Crop Production Pie Chart</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .slice {
            cursor: pointer;
        }
    </style>
</head>
<body>
    <h2>Crop Production in 2020</h2>
    <svg width=""500"" height=""500""></svg>

    <script>
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
            const filteredData = data.filter(d => d.Year == 2020);
            const cropData = d3.rollup(filteredData, v => d3.sum(v, d => +d[""Units Produced""]), d => d[""Crop Type""]);
            const cropArray = Array.from(cropData, ([key, value]) => ({ cropType: key, unitsProduced: value }));

            const width = 500, height = 500, radius = Math.min(width, height) / 2;
            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const pie = d3.pie().value(d => d.unitsProduced);
            const arc = d3.arc().innerRadius(0).outerRadius(radius);

            const svg = d3.select(""svg"")
                .append(""g"")
                .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

            const arcs = svg.selectAll("".slice"")
                .data(pie(cropArray))
                .enter().append(""g"")
                .attr(""class"", ""slice"");

            arcs.append(""path"")
                .attr(""d"", arc)
                .attr(""fill"", (d, i) => color(i));

            arcs.append(""text"")
                .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                .text(d => d.data.cropType);
        });
    </script>
</body>
</html>
```",Correct,54,55
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Donut Chart that visualizes the distribution of Units Produced among Crop Type in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Donut Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .arc {
            stroke: #fff;
        }
    </style>
</head>
<body>
    <svg width=""400"" height=""400""></svg>
    <script>
        const width = 400;
        const height = 400;
        const innerRadius = 100;
        const outerRadius = 150;

        const svg = d3.select(""svg"")
                      .append(""g"")
                      .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
            const filteredData = data.filter(d => d.Year == 2020);
            const unitsByCrop = d3.rollup(filteredData, v => d3.sum(v, d => +d[""Units Produced""]), d => d[""Crop Type""]);

            const pie = d3.pie().value(d => d[1]);
            const arcs = pie(Array.from(unitsByCrop));

            const arcGenerator = d3.arc()
                                   .innerRadius(innerRadius)
                                   .outerRadius(outerRadius);

            svg.selectAll("".arc"")
               .data(arcs)
               .enter().append(""path"")
               .attr(""class"", ""arc"")
               .attr(""d"", arcGenerator)
               .attr(""fill"", (d, i) => d3.schemeCategory10[i % 10]);
        });
    </script>
</body>
</html>
```",Correct,55,56
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Coxcomb Chart(polar area chart) to compare the Units Produced of different Crop Type in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coxcomb Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .arc {
            stroke: #fff;
        }
    </style>
</head>
<body>
    <svg width=""600"" height=""600""></svg>
    <script>
        const width = 600, height = 600, radius = Math.min(width, height) / 2;
        const color = d3.scaleOrdinal(d3.schemeCategory10);

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"")
            .then(data => {
                const filteredData = data.filter(d => d.Year == 2020);
                const cropData = filteredData.map(d => ({
                    crop: d['Crop Type'],
                    units: +d['Units Produced']
                }));

                const pie = d3.pie()
                    .value(d => d.units)
                    .sort(null);

                const arc = d3.arc()
                    .innerRadius(0)
                    .outerRadius(d => radius * (d.data.units / d3.max(cropData, d => d.units)));

                const arcs = svg.selectAll("".arc"")
                    .data(pie(cropData))
                    .enter().append(""g"")
                    .attr(""class"", ""arc"");

                arcs.append(""path"")
                    .attr(""d"", arc)
                    .attr(""fill"", (d, i) => color(i));

                arcs.append(""text"")
                    .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                    .attr(""dy"", "".35em"")
                    .text(d => d.data.crop);
            });
    </script>
</body>
</html>
```",Correct,56,57
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Radar Chart to compare the Units Produced of different Crop Type in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Radar Chart</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .radar-chart {
            position: absolute;
            width: 500px;
            height: 500px;
        }
        .axis {
            stroke: #ccc;
        }
        .area {
            fill: rgba(0, 128, 0, 0.5);
        }
        .circle {
            fill: red;
        }
    </style>
</head>
<body>
    <svg class=""radar-chart""></svg>
    <script>
        const width = 500, height = 500, margin = 50;

        const radarData = d3.scalePoint()
            .range([0, width / 2 - margin])
            .domain([""Crop A"", ""Crop B"", ""Crop C"", ""Crop D"", ""Crop E""]);
        
        const angleSlice = Math.PI * 2 / radarData.domain().length;

        const radarChartOptions = {
            w: width,
            h: height,
            margin: margin,
            maxValue: 0,
        };

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
            const filteredData = data.filter(d => d.Year === ""2020"");
            const unitsProduced = {};

            filteredData.forEach(d => {
                unitsProduced[d[""Crop Type""]] = +d[""Units Produced""];
            });

            radarChartOptions.maxValue = d3.max(Object.values(unitsProduced));

            const svg = d3.select("".radar-chart"")
                .attr(""width"", radarChartOptions.w)
                .attr(""height"", radarChartOptions.h);

            const radarLine = d3.lineRadial()
                .radius(d => radarData(d[1]))
                .angle((d, i) => i * angleSlice);

            const dataValues = Object.entries(unitsProduced).map(d => d[1]);

            const radarPath = svg.append(""path"")
                .datum(dataValues)
                .attr(""class"", ""area"")
                .attr(""d"", radarLine)
                .attr(""transform"", ""translate("" + width / 2 + "","" + height / 2 + "")"")
                .style(""fill"", ""red"")
                .style(""fill-opacity"", 0.5);

            const circles = svg.selectAll("".circle"")
                .data(dataValues)
                .enter().append(""circle"")
                .attr(""class"", ""circle"")
                .attr(""r"", 5)
                .attr(""cx"", (d, i) => (radarData(d) * Math.cos(angleSlice * i - Math.PI / 2)) + width / 2)
                .attr(""cy"", (d, i) => (radarData(d) * Math.sin(angleSlice * i - Math.PI / 2)) + height / 2)
                .style(""fill"", ""blue"");
        });
    </script>
</body>
</html>
```",Initialization Error,57,58
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Streamgraph that visualizes the changes of Units Produced over the Year for each Crop Type.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Streamgraph</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .stream {
            opacity: 0.7;
        }
    </style>
</head>
<body>
    <script>
        const margin = {top: 20, right: 20, bottom: 30, left: 40},
              width = 800 - margin.left - margin.right,
              height = 400 - margin.top - margin.bottom;

        const svg = d3.select(""body"").append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
            const nest = d3.group(data, d => d[""Crop Type""], d => d[""Year""]);
            const crops = Array.from(nest.keys());
            const years = Array.from(new Set(data.map(d => d[""Year""])));

            const unitsProducedByCrop = crops.map(crop => {
                return years.map(year => {
                    const entry = nest.get(crop).get(year);
                    return entry ? +entry[""Units Produced""] : 0; 
                });
            });

            const stackedData = d3.stack()
                .keys(crops)
                (unitsProducedByCrop.map((d, i) => {
                    const obj = { year: years[i] };
                    crops.forEach((crop, j) => {
                        obj[crop] = d[j];
                    });
                    return obj;
                }));

            const x = d3.scaleBand()
                .domain(years)
                .range([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([0, d3.max(stackedData[stackedData.length - 1], d => d[1])])
                .range([height, 0]);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            svg.append(""g"")
                .selectAll("".layer"")
                .data(stackedData)
                .enter().append(""path"")
                .attr(""class"", ""layer"")
                .attr(""fill"", (d, i) => color(i))
                .attr(""d"", d3.area()
                    .x(d => x(d.data.year) + x.bandwidth() / 2)
                    .y0(d => y(d[0]))
                    .y1(d => y(d[1]))
                );

            svg.append(""g"")
                .attr(""class"", ""axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""axis--y"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Initialization Error,58,59
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Slopegraph to compare the Units Produced between 2019 and 2020 for each Crop Type.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Slopegraph of Units Produced</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line {
            stroke: #1f77b4;
            stroke-width: 2;
        }
        .circle {
            fill: #ff7f0e;
        }
        .axis {
            font: 10px sans-serif;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script>
        const margin = {top: 20, right: 30, bottom: 30, left: 80},
              width = 800 - margin.left - margin.right,
              height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
            const filteredData = data.filter(d => d.Year === ""2019"" || d.Year === ""2020"");

            const cropTypes = Array.from(new Set(filteredData.map(d => d[""Crop Type""])));

            const unitsProduced = cropTypes.map(crop => {
                const yearData = filteredData.filter(d => d[""Crop Type""] === crop);
                return {
                    crop: crop,
                    units2019: +yearData.find(d => d.Year === ""2019"")[""Units Produced""],
                    units2020: +yearData.find(d => d.Year === ""2020"")[""Units Produced""]
                };
            });

            const x = d3.scaleLinear()
                .domain([0, d3.max(unitsProduced, d => Math.max(d.units2019, d.units2020))])
                .range([0, width]);
            
            const y = d3.scaleBand()
                .domain(unitsProduced.map(d => d.crop))
                .range([0, height])
                .padding(0.1);

            svg.append(""g"")
                .selectAll("".line"")
                .data(unitsProduced)
                .enter()
                .append(""line"")
                .attr(""class"", ""line"")
                .attr(""x1"", d => x(d.units2019))
                .attr(""x2"", d => x(d.units2020))
                .attr(""y1"", d => y(d.crop) + y.bandwidth()/2)
                .attr(""y2"", d => y(d.crop) + y.bandwidth()/2);

            svg.append(""g"")
                .selectAll("".circle"")
                .data(unitsProduced)
                .enter()
                .append(""circle"")
                .attr(""class"", ""circle"")
                .attr(""cx"", d => x(d.units2019))
                .attr(""cy"", d => y(d.crop) + y.bandwidth()/2)
                .attr(""r"", 4);

            svg.append(""g"")
                .selectAll("".circle"")
                .data(unitsProduced)
                .enter()
                .append(""circle"")
                .attr(""class"", ""circle"")
                .attr(""cx"", d => x(d.units2020))
                .attr(""cy"", d => y(d.crop) + y.bandwidth()/2)
                .attr(""r"", 4);

            svg.append(""g"")
                .attr(""class"", ""x-axis"")
                .attr(""transform"", `translate(0, ${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""y-axis"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,59,60
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Heatmap that visualizes the Units Produced across Crop Type and Years.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Heatmap</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .cell {
            stroke-width: 1;
            stroke: #ccc;
        }
        .legend rect {
            stroke: #ccc;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script>
        const margin = { top: 40, right: 20, bottom: 40, left: 80 },
              width = 800 - margin.left - margin.right,
              height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
                      .append(""g"")
                      .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
            const years = Array.from(new Set(data.map(d => d.Year)));
            const cropTypes = Array.from(new Set(data.map(d => d[""Crop Type""])));

            const unitsProducedMatrix = cropTypes.map(crop => years.map(year => {
                const row = data.find(d => d[""Crop Type""] === crop && d.Year === year);
                return row ? +row[""Units Produced""] : 0;
            }));

            const xScale = d3.scaleBand()
                             .range([0, width])
                             .domain(years)
                             .padding(0.01);
            const yScale = d3.scaleBand()
                             .range([height, 0])
                             .domain(cropTypes)
                             .padding(0.01);
            const colorScale = d3.scaleSequential(d3.interpolateYlGnBu)
                                 .domain([0, d3.max(unitsProducedMatrix.flat())]);

            svg.selectAll()
               .data(unitsProducedMatrix)
               .enter().selectAll(""rect"")
               .data(d => d)
               .enter().append(""rect"")
               .attr(""x"", (d, i) => xScale(years[i % years.length]))
               .attr(""y"", (d, i) => yScale(cropTypes[Math.floor(i / years.length)]))
               .attr(""width"", xScale.bandwidth())
               .attr(""height"", yScale.bandwidth())
               .style(""fill"", d => colorScale(d))
               .attr(""class"", ""cell"");

            svg.append(""g"")
               .attr(""class"", ""x axis"")
               .attr(""transform"", `translate(0,${height})`)
               .call(d3.axisBottom(xScale));

            svg.append(""g"")
               .attr(""class"", ""y axis"")
               .call(d3.axisLeft(yScale));
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,60,61
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Stacked Bar Chart</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .bar {
            fill-opacity: 0.8;
        }
        .axis {
            font: 10px sans-serif;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script>
        const svg = d3.select(""svg""),
            margin = {top: 20, right: 30, bottom: 40, left: 40},
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
            const keys = [""Revenue"", ""Production Cost"", ""Profit""];
            const years = Array.from(new Set(data.map(d => d.Year)));

            const stack = d3.stack()
                .keys(keys)
                .value((d, key) => +d[key]);

            const stackedData = stack(d3.groups(data, d => d.Year).map(([key, values]) => {
                return {
                    Year: key,
                    ...values.reduce((acc, curr) => {
                        keys.forEach(k => { acc[k] = (acc[k] || 0) + +curr[k] });
                        return acc;
                    }, {})
                };
            }));

            const x = d3.scaleBand()
                .domain(years)
                .range([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([0, d3.max(stackedData[stackedData.length - 1], d => d[stackedData.length - 1].data[keys[keys.length - 1]])])
                .range([height, 0]);

            g.append(""g"")
                .selectAll(""g"")
                .data(stackedData)
                .enter().append(""g"")
                .attr(""fill"", (d, i) => d3.schemeCategory10[i])
                .selectAll(""rect"")
                .data(d => d)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => x(d.data.Year))
                .attr(""y"", d => y(d[1]))
                .attr(""height"", d => y(d[0]) - y(d[1]))
                .attr(""width"", x.bandwidth());

            g.append(""g"")
                .attr(""class"", ""axis axis-x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis-y"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Initialization Error,61,62
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Horizontal Bar Chart that visualizes the Units Produced for each Crop Type in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Horizontal Bar Chart of Units Produced in 2020</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }

        .axis--x path {
            display: none;
        }

        .axis--y text {
            font-size: 12px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>
    <script>
        const svg = d3.select(""svg""),
            margin = {top: 20, right: 30, bottom: 40, left: 100},
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom,
            g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"").then(data => {
            data = data.filter(d => d.Year == 2020);
            data.forEach(d => {
                d[""Units Produced""] = +d[""Units Produced""];
            });

            const x = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Units Produced""])])
                .range([0, width]);

            const y = d3.scaleBand()
                .domain(data.map(d => d[""Crop Type""]))
                .range([0, height])
                .padding(0.1);

            g.append(""g"")
                .selectAll("".bar"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", 0)
                .attr(""y"", d => y(d[""Crop Type""]))
                .attr(""width"", d => x(d[""Units Produced""]))
                .attr(""height"", y.bandwidth());

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Correct,62,63
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot that visualizes the relationship between Units Produced and Revenue.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Units Produced vs Revenue</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""scatterplot"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const unitsProduced = [];
                const revenue = [];

                lines.forEach(line => {
                    const columns = line.split(',');
                    if (columns.length > 4) {
                        unitsProduced.push(parseFloat(columns[2]));
                        revenue.push(parseFloat(columns[3]));
                    }
                });

                const option = {
                    title: {
                        text: 'Scatterplot of Units Produced vs Revenue',
                    },
                    xAxis: {
                        name: 'Units Produced',
                    },
                    yAxis: {
                        name: 'Revenue',
                    },
                    series: [{
                        symbolSize: 10,
                        data: unitsProduced.map((up, index) => [up, revenue[index]]),
                        type: 'scatter',
                    }],
                };

                const chart = echarts.init(document.getElementById('scatterplot'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,63,64
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Line Chart that visualizes the trend of Units Produced over the Year for each Crop Type.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Units Produced Trend</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const result = {};
                const years = new Set();

                rows.forEach(row => {
                    const [year, cropType, unitsProduced] = row.split(',');
                    if (!result[cropType]) {
                        result[cropType] = [];
                    }
                    result[cropType].push({ year: year, unitsProduced: parseFloat(unitsProduced) });
                    years.add(year);
                });

                const seriesData = Object.keys(result).map(cropType => ({
                    name: cropType,
                    type: 'line',
                    data: result[cropType].sort((a, b) => a.year - b.year).map(item => item.unitsProduced)
                }));

                const option = {
                    title: {
                        text: 'Units Produced Trend Over the Years by Crop Type',
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    legend: {
                        data: Object.keys(result)
                    },
                    xAxis: {
                        type: 'category',
                        name: 'Year',
                        data: Array.from(years).sort()
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Units Produced'
                    },
                    series: seriesData
                };

                const myChart = echarts.init(document.getElementById('main'));
                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,64,65
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Bar Chart that visualizes the Units Produced for each Crop Type in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Bar Chart</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.2.2/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 600px; height: 400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const unitsProduced = {};
                
                rows.forEach(row => {
                    const columns = row.split(',');
                    const year = columns[0].trim();
                    const cropType = columns[1].trim();
                    const units = parseFloat(columns[2].trim());

                    if (year === '2020') {
                        if (!unitsProduced[cropType]) {
                            unitsProduced[cropType] = 0;
                        }
                        unitsProduced[cropType] += units;
                    }
                });

                const cropTypes = Object.keys(unitsProduced);
                const unitsValues = cropTypes.map(crop => unitsProduced[crop]);

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    title: {
                        text: 'Units Produced by Crop Type in 2020'
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: cropTypes
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        name: 'Units Produced',
                        type: 'bar',
                        data: unitsValues
                    }]
                };
                
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,65,66
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Pie Chart that visualizes the proportion of Units Produced contributed by each Crop Type in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Pie Chart of Crop Production in 2020</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.0.2/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 600px; height: 400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const unitsProduced = {};
                
                rows.forEach(row => {
                    const columns = row.split(',');
                    if (columns[0] === '2020') {
                        const cropType = columns[1];
                        const units = parseFloat(columns[2]);
                        if (unitsProduced[cropType]) {
                            unitsProduced[cropType] += units;
                        } else {
                            unitsProduced[cropType] = units;
                        }
                    }
                });

                const chartData = Object.entries(unitsProduced).map(([cropType, units]) => ({
                    name: cropType,
                    value: units
                }));

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    title: {
                        text: 'Units Produced by Crop Type in 2020',
                        subtext: 'Agricultural Production',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    series: [{
                        name: 'Crop Type',
                        type: 'pie',
                        radius: '50%',
                        data: chartData,
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }]
                };
                
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,66,67
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Donut Chart that visualizes the distribution of Units Produced among Crop Type in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Donut Chart - Units Produced by Crop Type in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 600px;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const productionData = {};
                
                rows.forEach(row => {
                    const columns = row.split(',');
                    const year = columns[0];
                    const cropType = columns[1];
                    const unitsProduced = parseFloat(columns[2]);

                    if (year === '2020') {
                        if (!productionData[cropType]) {
                            productionData[cropType] = 0;
                        }
                        productionData[cropType] += unitsProduced;
                    }
                });

                const chartData = Object.keys(productionData).map(cropType => ({
                    name: cropType,
                    value: productionData[cropType]
                }));

                const chart = echarts.init(document.getElementById('main'));
                const option = {
                    title: {
                        text: 'Units Produced by Crop Type in 2020',
                        subtext: 'Agricultural Production',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    legend: {
                        orient: 'vertical',
                        left: 'left'
                    },
                    series: [
                        {
                            name: 'Units Produced',
                            type: 'pie',
                            radius: ['50%', '70%'],
                            avoidLabelOverlap: false,
                            label: {
                                show: true,
                                position: 'outside'
                            },
                            emphasis: {
                                label: {
                                    show: true,
                                    fontSize: '20',
                                    fontWeight: 'bold'
                                }
                            },
                            labelLine: {
                                show: true
                            },
                            data: chartData,
                            itemStyle: {
                                borderColor: '#fff',
                                borderWidth: 1
                            }
                        }
                    ]
                };

                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,67,68
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Coxcomb Chart(polar area chart) to compare the Units Produced of different Crop Type in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Coxcomb Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 600px;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1);
            const cropData = {};

            rows.forEach(row => {
                const cols = row.split(',');
                const year = cols[0];
                const cropType = cols[1];
                const unitsProduced = parseFloat(cols[2]);

                if (year === '2020') {
                    if (!cropData[cropType]) {
                        cropData[cropType] = 0;
                    }
                    cropData[cropType] += unitsProduced;
                }
            });

            const categories = Object.keys(cropData);
            const values = Object.values(cropData);

            const chart = echarts.init(document.getElementById('main'));
            const option = {
                title: {
                    text: 'Units Produced of Different Crop Types in 2020',
                    left: 'center'
                },
                tooltip: {
                    trigger: 'item'
                },
                legend: {
                    orient: 'vertical',
                    right: 'right'
                },
                series: [{
                    name: 'Units Produced',
                    type: 'pie',
                    radius: ['40%', '70%'],
                    data: categories.map((item, index) => ({value: values[index], name: item})),
                    emphasis: {
                        itemStyle: {
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowColor: 'rgba(0, 0, 0, 0.5)'
                        }
                    }
                }]
            };

            chart.setOption(option);
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,68,69
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Radar Chart to compare the Units Produced of different Crop Type in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Radar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""radarChart"" style=""width: 600px; height: 400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const cropData = {};
                rows.forEach(row => {
                    const cols = row.split(',');
                    if (cols[0] === '2020') {
                        const cropType = cols[1];
                        const unitsProduced = parseFloat(cols[2]);
                        cropData[cropType] = unitsProduced;
                    }
                });

                const cropTypes = Object.keys(cropData);
                const unitsProduced = Object.values(cropData);

                const chart = echarts.init(document.getElementById('radarChart'));
                const option = {
                    title: {
                        text: 'Units Produced by Crop Type in 2020'
                    },
                    tooltip: {},
                    radar: {
                        indicator: cropTypes.map(crop => ({ name: crop, max: Math.max(...unitsProduced) })),
                    },
                    series: [{
                        type: 'radar',
                        data: [{
                            value: unitsProduced,
                            name: 'Units Produced'
                        }]
                    }]
                };

                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,69,70
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Streamgraph that visualizes the changes of Units Produced over the Year for each Crop Type.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Streamgraph with ECharts</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main { width: 100%; height: 600px; }
    </style>
</head>
<body>
    <div id=""main""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const result = {};
                
                lines.forEach(line => {
                    const [year, cropType, unitsProduced] = line.split(',');
                    if (!result[cropType]) {
                        result[cropType] = {};
                    }
                    if (!result[cropType][year]) {
                        result[cropType][year] = 0;
                    }
                    result[cropType][year] += parseFloat(unitsProduced);
                });

                const series = [];
                const years = Array.from(new Set(lines.map(line => line.split(',')[0]))).sort();
                
                for (const [cropType, production] of Object.entries(result)) {
                    series.push({
                        name: cropType,
                        type: 'line',
                        areaStyle: {},
                        data: years.map(year => production[year] || 0)
                    });
                }

                const option = {
                    title: {
                        text: 'Streamgraph of Units Produced by Crop Type',
                    },
                    tooltip: {
                        trigger: 'axis',
                    },
                    legend: {
                        data: Object.keys(result),
                    },
                    xAxis: {
                        type: 'category',
                        data: years,
                    },
                    yAxis: {
                        type: 'value',
                    },
                    series: series,
                };

                const myChart = echarts.init(document.getElementById('main'));
                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,70,71
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Slopegraph to compare the Units Produced between 2019 and 2020 for each Crop Type.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Slopegraph - Units Produced Comparison 2019 vs 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""slopegraph"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const unitsProduced2019 = {};
                const unitsProduced2020 = {};

                rows.forEach(row => {
                    const cols = row.split(',');
                    if (cols.length < 8) return;
                    const year = cols[0];
                    const cropType = cols[1];
                    const unitsProduced = Number(cols[2]);

                    if (year === '2019') {
                        unitsProduced2019[cropType] = unitsProduced;
                    } else if (year === '2020') {
                        unitsProduced2020[cropType] = unitsProduced;
                    }
                });

                const dataLines = Object.keys(unitsProduced2019).map(cropType => {
                    return {
                        name: cropType,
                        value: [unitsProduced2019[cropType], unitsProduced2020[cropType] || 0]
                    };
                });

                const chartDom = document.getElementById('slopegraph');
                const myChart = echarts.init(chartDom);
                const option = {
                    title: {
                        text: 'Units Produced Comparison: 2019 vs 2020',
                        left: 'center'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Units Produced',
                        splitLine: { show: false },
                        axisLine: { onZero: true }
                    },
                    yAxis: {
                        type: 'category',
                        data: dataLines.map(val => val.name),
                        inverse: true
                    },
                    series: [
                        {
                            name: '2019',
                            type: 'line',
                            data: dataLines.map(val => val.value[0]),
                            label: {
                                show: true,
                                position: 'right',
                                formatter: '{c}'
                            },
                            markLine: {
                                data: [
                                    { type: 'average', name: 'Average (2019)' }
                                ]
                            }
                        },
                        {
                            name: '2020',
                            type: 'line',
                            data: dataLines.map(val => val.value[1]),
                            label: {
                                show: true,
                                position: 'right',
                                formatter: '{c}'
                            },
                            markLine: {
                                data: [
                                    { type: 'average', name: 'Average (2020)' }
                                ]
                            }
                        }
                    ],
                    tooltip: {
                        trigger: 'item',
                        formatter: function (params) {
                            return `${params.name}<br>${params.seriesName}: ${params.value[params.seriesIndex]}`;
                        }
                    }
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,71,72
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Heatmap that visualizes the Units Produced across Crop Type and Years.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Heatmap of Units Produced</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""heatmap"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(csvData => {
                const rows = csvData.split('\n').slice(1).filter(row => row);
                const data = {};
                rows.forEach(row => {
                    const [year, cropType, unitsProduced] = row.split(',');
                    if (!data[cropType]) {
                        data[cropType] = {};
                    }
                    data[cropType][year] = parseFloat(unitsProduced);
                });

                const cropTypes = Object.keys(data);
                const years = Array.from(new Set(rows.map(row => row.split(',')[0])));

                const heatmapData = [];
                cropTypes.forEach((cropType, i) => {
                    years.forEach((year, j) => {
                        const value = data[cropType][year] || 0;
                        heatmapData.push([j, i, value]);
                    });
                });

                const option = {
                    tooltip: {
                        position: 'top'
                    },
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        top: '10%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'category',
                        data: years,
                        splitArea: {
                            show: true
                        }
                    },
                    yAxis: {
                        type: 'category',
                        data: cropTypes,
                        splitArea: {
                            show: true
                        }
                    },
                    visualMap: {
                        min: 0,
                        max: Math.max(...heatmapData.map(item => item[2])),
                        calculable: true,
                        orient: 'horizontal',
                        left: 'center',
                        bottom: '15%',
                        inRange: {
                            color: ['#f6e58d', '#dfe6e9', '#ff7979']
                        }
                    },
                    series: [{
                        name: 'Units Produced',
                        type: 'heatmap',
                        data: heatmapData,
                        label: {
                            show: true
                        },
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowColor: '#333'
                            }
                        }
                    }]
                };

                const chart = echarts.init(document.getElementById('heatmap'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,72,73
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Stacked Bar Chart - Agricultural Production</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 800px;height:600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));

                const years = [...new Set(rows.map(row => row[0]))];
                const crops = [...new Set(rows.map(row => row[1]))];
                
                const revenueData = years.map(year => {
                    return crops.map(crop => {
                        const cropRow = rows.find(row => row[0] === year && row[1] === crop);
                        return cropRow ? parseFloat(cropRow[3]) : 0; // Revenue
                    });
                });

                const productionCostData = years.map(year => {
                    return crops.map(crop => {
                        const cropRow = rows.find(row => row[0] === year && row[1] === crop);
                        return cropRow ? parseFloat(cropRow[4]) : 0; // Production Cost
                    });
                });

                const profitData = years.map(year => {
                    return crops.map(crop => {
                        const cropRow = rows.find(row => row[0] === year && row[1] === crop);
                        return cropRow ? parseFloat(cropRow[5]) : 0; // Profit
                    });
                });

                const option = {
                    title: {
                        text: 'Agricultural Production Stacked Bar Chart',
                        subtext: 'Revenue, Production Cost, and Profit over Years'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    legend: {
                        data: ['Revenue', 'Production Cost', 'Profit']
                    },
                    xAxis: {
                        type: 'category',
                        data: years
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [
                        {
                            name: 'Revenue',
                            type: 'bar',
                            stack: 'total',
                            data: revenueData.map(data => data.reduce((a, b) => a + b, 0)),
                            emphasis: {
                                focus: 'series'
                            }
                        },
                        {
                            name: 'Production Cost',
                            type: 'bar',
                            stack: 'total',
                            data: productionCostData.map(data => data.reduce((a, b) => a + b, 0)),
                            emphasis: {
                                focus: 'series'
                            }
                        },
                        {
                            name: 'Profit',
                            type: 'bar',
                            stack: 'total',
                            data: profitData.map(data => data.reduce((a, b) => a + b, 0)),
                            emphasis: {
                                focus: 'series'
                            }
                        }
                    ]
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,73,74
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Horizontal Bar Chart that visualizes the Units Produced for each Crop Type in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Units Produced in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const unitsProduced = {};
                
                rows.forEach(row => {
                    const [year, cropType, unitsProducedValue] = row.split(',');
                    if (year === '2020') {
                        unitsProduced[cropType] = unitsProducedValue;
                    }
                });
                
                const cropTypes = Object.keys(unitsProduced);
                const values = cropTypes.map(cropType => unitsProduced[cropType]);

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);
                const option = {
                    title: {
                        text: 'Units Produced for Each Crop Type in 2020',
                        left: 'center'
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'value',
                        name: 'Units Produced'
                    },
                    yAxis: {
                        type: 'category',
                        data: cropTypes
                    },
                    series: [{
                        name: 'Units Produced',
                        type: 'bar',
                        data: values
                    }]
                };
                
                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,74,75
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Scatterplot that visualizes the relationship between Units Produced and Revenue.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Units Produced vs Revenue</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatter plot showing the relationship between Units Produced and Revenue."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Units Produced"",
                    ""type"": ""quantitative"",
                    ""title"": ""Units Produced""
                },
                ""y"": {
                    ""field"": ""Revenue"",
                    ""type"": ""quantitative"",
                    ""title"": ""Revenue""
                },
                ""tooltip"": [
                    {""field"": ""Crop Type"", ""type"": ""nominal""},
                    {""field"": ""Year"", ""type"": ""temporal""}
                ]
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            // Access the Vega view instance using result.view
        }).catch(console.error);
    </script>
</body>
</html>
```",Correct,75,76
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Line Chart that visualizes the trend of Units Produced over the Year for each Crop Type.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Line Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Year"",
                    ""type"": ""quantitative""
                },
                ""y"": {
                    ""field"": ""Units Produced"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Crop Type"",
                    ""type"": ""nominal""
                }
            },
            ""view"": {
                ""stroke"": null
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Correct,76,77
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Bar Chart that visualizes the Units Produced for each Crop Type in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm Vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm Vega-Lite@5.1.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm Vega-Embed@6.20.1""></script>
</head>
<body>
    <div id=""vis""></div>

    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Year == 2020""
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Crop Type"",
                    ""type"": ""ordinal"",
                    ""axis"": {
                        ""title"": ""Crop Type""
                    }
                },
                ""y"": {
                    ""field"": ""Units Produced"",
                    ""type"": ""quantitative"",
                    ""axis"": {
                        ""title"": ""Units Produced""
                    }
                }
            }
        };

        vegaEmbed('#vis', spec).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Initial Result,77,78
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Pie Chart that visualizes the proportion of Units Produced contributed by each Crop Type in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <script src=""https://cdn.jsdelivr.net/npmvega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npmvega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npmvega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A pie chart displaying the proportion of Units Produced by Crop Type in 2020."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Year == 2020""
                },
                {
                    ""aggregate"": [
                        {""op"": ""sum"", ""field"": ""Units Produced"", ""as"": ""Total Units""}
                    ],
                    ""groupby"": [""Crop Type""]
                }
            ],
            ""mark"": ""arc"",
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Total Units"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Crop Type"",
                    ""type"": ""nominal""
                },
                ""tooltip"": [
                    {""field"": ""Crop Type"", ""type"": ""nominal""},
                    {""field"": ""Total Units"", ""type"": ""quantitative""}
                ]
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Unexpected Initial Result,78,79
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Donut Chart that visualizes the distribution of Units Produced among Crop Type in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Donut Chart of Units Produced by Crop Type in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.9.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script type=""text/javascript"">
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Year == 2020""
                },
                {
                    ""aggregate"": [
                        {
                            ""op"": ""sum"",
                            ""field"": ""Units Produced"",
                            ""as"": ""Total Units""
                        }
                    ],
                    ""groupby"": [""Crop Type""]
                }
            ],
            ""mark"": {
                ""type"": ""arc"",
                ""innerRadius"": 50
            },
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Total Units"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Crop Type"",
                    ""type"": ""nominal""
                },
                ""tooltip"": [
                    {""field"": ""Crop Type"", ""type"": ""nominal""},
                    {""field"": ""Total Units"", ""type"": ""quantitative""}
                ]
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Correct,79,80
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Coxcomb Chart(polar area chart) to compare the Units Produced of different Crop Type in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Coxcomb Chart of Crop Production in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.6.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.1""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Year == 2020""
                }
            ],
            ""mark"": {
                ""type"": ""arc"",
                ""innerRadius"": 50
            },
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Units Produced"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Crop Type"",
                    ""type"": ""nominal""
                }
            },
            ""view"": {
                ""stroke"": null
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Unexpected Initial Result,80,81
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Radar Chart to compare the Units Produced of different Crop Type in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Radar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Year === '2020'""
                },
                {
                    ""calculate"": ""datum.Units_Produced"",
                    ""as"": ""Units Produced""
                }
            ],
            ""mark"": ""point"",
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Crop_Type"",
                    ""type"": ""nominal""
                },
                ""radius"": {
                    ""field"": ""Units Produced"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Crop_Type"",
                    ""type"": ""nominal""
                }
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            // Access the Vega View instance as `result.view`
        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Initial Result,81,82
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Streamgraph that visualizes the changes of Units Produced over the Year for each Crop Type.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2/build/vega.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.7.0/build/vega-lite.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2/build/vega-embed.js""></script>
</head>
<body>
<div id=""vis""></div>
<script>
    const spec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
            ""format"": {
                ""type"": ""csv""
            }
        },
        ""mark"": ""area"",
        ""encoding"": {
            ""x"": {
                ""field"": ""Year"",
                ""type"": ""temporal"",
                ""axis"": { ""title"": ""Year"" }
            },
            ""y"": {
                ""field"": ""Units Produced"",
                ""type"": ""quantitative"",
                ""axis"": { ""title"": ""Units Produced"" }
            },
            ""color"": {
                ""field"": ""Crop Type"",
                ""type"": ""nominal"",
                ""legend"": { ""title"": ""Crop Type"" }
            },
            ""tooltip"": [
                { ""field"": ""Crop Type"", ""type"": ""nominal"" },
                { ""field"": ""Units Produced"", ""type"": ""quantitative"" },
                { ""field"": ""Year"", ""type"": ""temporal"" }
            ]
        },
        ""title"": {
            ""text"": ""Units Produced Over the Years by Crop Type"",
            ""fontSize"": 16
        }
    };

    vegaEmbed('#vis', spec).then(result => {
        // Access the Vega view instance
        const view = result.view;
    }).catch(console.error);
</script>
</body>
</html>
```",Correct,82,83
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Slopegraph to compare the Units Produced between 2019 and 2020 for each Crop Type.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <title>Slopegraph of Units Produced (2019 vs 2020)</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""field"": ""Year"",
                        ""oneOf"": [""2019"", ""2020""]
                    }
                },
                {
                    ""aggregate"": [{
                        ""op"": ""sum"",
                        ""field"": ""Units Produced"",
                        ""as"": ""Total Units Produced""
                    }],
                    ""groupby"": [""Crop Type"", ""Year""]
                }
            ],
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Total Units Produced"",
                    ""type"": ""quantitative""
                },
                ""y"": {
                    ""field"": ""Crop Type"",
                    ""type"": ""nominal""
                },
                ""color"": {
                    ""field"": ""Year"",
                    ""type"": ""nominal""
                },
                ""tooltip"": [
                    {""field"": ""Crop Type"", ""type"": ""nominal""},
                    {""field"": ""Year"", ""type"": ""nominal""},
                    {""field"": ""Total Units Produced"", ""type"": ""quantitative""}
                ]
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Correct,83,84
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Heatmap that visualizes the Units Produced across Crop Type and Years.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Agricultural Production Heatmap</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <style>
        #vis {
            width: 800px;
            height: 400px;
        }
    </style>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""rect"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Year"", 
                    ""type"": ""ordinal""
                },
                ""y"": {
                    ""field"": ""Crop Type"", 
                    ""type"": ""ordinal""
                },
                ""color"": {
                    ""field"": ""Units Produced"", 
                    ""type"": ""quantitative"",
                    ""scale"": {
                        ""scheme"": ""blues""
                    }
                },
                ""tooltip"": [
                    {""field"": ""Crop Type"", ""type"": ""nominal""},
                    {""field"": ""Year"", ""type"": ""ordinal""},
                    {""field"": ""Units Produced"", ""type"": ""quantitative""}
                ]
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Correct,84,85
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Stacked Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.7.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.24.1""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Year"",
                    ""type"": ""ordinal"",
                    ""title"": ""Year""
                },
                ""y"": {
                    ""aggregate"": ""sum"",
                    ""field"": ""Units Produced"",
                    ""type"": ""quantitative"",
                    ""title"": ""Units Produced""
                },
                ""color"": {
                    ""field"": ""Crop Type"",
                    ""type"": ""nominal"",
                    ""title"": ""Crop Type""
                }
            },
            ""view"": {""stroke"": null},
            ""config"": {
                ""mark"": {
                    ""tooltip"": true
                }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Initialization Error,85,86
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume
Your task is to create a Horizontal Bar Chart that visualizes the Units Produced for each Crop Type in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv

The data table contains the following columns: Year,Crop Type,Units Produced,Revenue,Production Cost,Profit,Yield,Number of Farms,Export Volume",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
  <meta charset=""UTF-8"">
  <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
  <title>Agricultural Production Visualization</title>
  <script src=""https://cdnjs.cloudflare.com/ajax/libs/vega/5.21.0/vega.min.js""></script>
  <script src=""https://cdnjs.cloudflare.com/ajax/libs/vega-lite/5.7.0/vega-lite.min.js""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0/build/vega-embed.min.js""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/a3a1fd8ee0541074f72bcc7a4a72415a/raw/9af38fbf99350c05a66c856f0818a384421d33d4/Agricultural%2520Production.csv"",
        ""format"": {
          ""type"": ""csv""
        }
      },
      ""transform"": [
        {
          ""filter"": ""datum.Year == 2020""
        }
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""y"": {
          ""field"": ""Crop Type"",
          ""type"": ""nominal"",
          ""sort"": ""-x""
        },
        ""x"": {
          ""field"": ""Units Produced"",
          ""type"": ""quantitative""
        }
      }
    };

    vegaEmbed('#vis', spec);
  </script>
</body>
</html>
```",Correct,86,87
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Scatterplot that visualizes the relationship between Domestic Consumption and Exports. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatterplot {
            margin: 20px;
        }
        .tooltip {
            position: absolute;
            text-align: center;
            padding: 5px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
            opacity: 0;
        }
    </style>
</head>
<body>
    <svg class=""scatterplot"" width=""800"" height=""400""></svg>
    <div class=""tooltip""></div>
    <script>
        const width = 800;
        const height = 400;
        const margin = { top: 20, right: 30, bottom: 30, left: 40 };
        
        const svg = d3.select("".scatterplot"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            data.forEach(d => {
                d.Domestic_Consumption = +d[""Domestic Consumption""];
                d.Exports = +d[""Exports""];
            });

            const x = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.Domestic_Consumption)]).nice()
                .range([0, width - margin.left - margin.right]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.Exports)]).nice()
                .range([height - margin.top - margin.bottom, 0]);
                
            svg.append(""g"")
                .attr(""class"", ""x-axis"")
                .attr(""transform"", `translate(0,${height - margin.top - margin.bottom})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""y-axis"")
                .call(d3.axisLeft(y));

            const tooltip = d3.select("".tooltip"");

            svg.selectAll(""circle"")
                .data(data)
                .enter()
                .append(""circle"")
                .attr(""cx"", d => x(d.Domestic_Consumption))
                .attr(""cy"", d => y(d.Exports))
                .attr(""r"", 5)
                .style(""fill"", ""steelblue"")
                .on(""mouseover"", (event, d) => {
                    tooltip.transition().duration(200).style(""opacity"", .9);
                    tooltip.html(`Domestic Consumption: ${d.Domestic_Consumption}<br>Exports: ${d.Exports}`)
                        .style(""left"", (event.pageX + 5) + ""px"")
                        .style(""top"", (event.pageY - 28) + ""px"");
                })
                .on(""mouseout"", () => {
                    tooltip.transition().duration(500).style(""opacity"", 0);
                });
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,87,88
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Scatterplot that visualizes the relationship between Domestic Consumption and Exports. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .point {
            fill: steelblue;
            stroke: white;
            stroke-width: 1.5px;
        }

        .selected {
            fill: orange;
        }

        .brush .selection {
            fill: lightsteelblue;
            fill-opacity: 0.5;
            stroke: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 20, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleLinear().rangeRound([0, width]);
        const y = d3.scaleLinear().rangeRound([height, 0]);

        const brush = d3.brush()
            .extent([[0, 0], [width, height]])
            .on(""brush end"", brushed);

        svg.append(""g"")
            .attr(""class"", ""brush"")
            .call(brush);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            data.forEach(d => {
                d['Domestic Consumption'] = +d['Domestic Consumption'];
                d['Exports'] = +d['Exports'];
            });

            x.domain(d3.extent(data, d => d['Domestic Consumption'])).nice();
            y.domain(d3.extent(data, d => d['Exports'])).nice();

            g.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""y axis"")
                .call(d3.axisLeft(y));

            const scatter = g.append(""g"")
                .attr(""class"", ""scatter"");

            scatter.selectAll(""circle"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""point"")
                .attr(""cx"", d => x(d['Domestic Consumption']))
                .attr(""cy"", d => y(d['Exports']))
                .attr(""r"", 5);

            function brushed(event) {
                if (!event.selection) {
                    scatter.selectAll("".point"").classed('selected', false);
                    return;
                }

                const s = event.selection;
                scatter.selectAll("".point"").classed('selected', d => {
                    const cx = x(d['Domestic Consumption']),
                          cy = y(d['Exports']);
                    return cx >= s[0][0] && cx <= s[1][0] && cy >= s[0][1] && cy <= s[1][1];
                });
            }
        });
    </script>
</body>
</html>
```",Initialization Error,88,89
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Scatterplot that visualizes the relationship between Domestic Consumption and Exports. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatterplot {
            margin: 20px;
        }
        .axis {
            font: 10px sans-serif;
        }
        .dot {
            fill: steelblue;
            stroke: white;
            stroke-width: 1.5px;
        }
    </style>
</head>
<body>
    <svg class=""scatterplot"" width=""800"" height=""600""></svg>
    <script>
        const svg = d3.select("".scatterplot""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleLinear().range([0, width]),
              y = d3.scaleLinear().range([height, 0]);

        const xAxis = g.append(""g"").attr(""class"", ""x-axis"").attr(""transform"", `translate(0,${height})`),
              yAxis = g.append(""g"").attr(""class"", ""y-axis"");

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            data.forEach(d => {
                d['Domestic Consumption'] = +d['Domestic Consumption'];
                d['Exports'] = +d['Exports'];
            });

            x.domain(d3.extent(data, d => d['Domestic Consumption'])).nice();
            y.domain(d3.extent(data, d => d['Exports'])).nice();

            xAxis.call(d3.axisBottom(x));
            yAxis.call(d3.axisLeft(y));

            const zoom = d3.zoom()
                .scaleExtent([0.5, 5])
                .translateExtent([[0, 0], [width, height]])
                .on(""zoom"", (event) => {
                    const new_x = event.transform.rescaleX(x);
                    const new_y = event.transform.rescaleY(y);
                    g.selectAll("".dot"").attr(""cx"", d => new_x(d['Domestic Consumption'])).attr(""cy"", d => new_y(d['Exports']));
                    g.select("".x-axis"").call(d3.axisBottom(new_x));
                    g.select("".y-axis"").call(d3.axisLeft(new_y));
                });

            svg.call(zoom);

            g.selectAll("".dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""r"", 3.5)
                .attr(""cx"", d => x(d['Domestic Consumption']))
                .attr(""cy"", d => y(d['Exports']));
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,89,90
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Domestic Consumption and Exports. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        body {
            font-family: 'Arial', sans-serif;
        }
        .scatterplot {
            margin: 20px;
        }
        .dot {
            cursor: pointer;
            stroke: #ccc;
            stroke-width: 1.5px;
        }
        .tooltip {
            position: absolute;
            text-align: center;
            width: 100px;
            padding: 5px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0;
            border-radius: 8px;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <div class=""scatterplot""></div>
    <script>
        const margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = 800 - margin.left - margin.right,
              height = 500 - margin.top - margin.bottom;

        const svg = d3.select("".scatterplot"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const tooltip = d3.select(""body"").append(""div"")
            .attr(""class"", ""tooltip"")
            .style(""opacity"", 0);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            data.forEach(d => {
                d['Domestic Consumption'] = +d['Domestic Consumption'];
                d['Exports'] = +d['Exports'];
            });

            const x = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Domestic Consumption'])])
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Exports'])])
                .range([height, 0]);

            const xAxis = d3.axisBottom(x);
            const yAxis = d3.axisLeft(y);

            svg.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(xAxis);

            svg.append(""g"")
                .call(yAxis);

            svg.selectAll("".dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => x(d['Domestic Consumption']))
                .attr(""cy"", d => y(d['Exports']))
                .attr(""r"", 5)
                .attr(""fill"", ""steelblue"")
                .on(""mouseover"", (event, d) => {
                    tooltip.transition().duration(200).style(""opacity"", .9);
                    tooltip.html(`${d.Country}<br>Domestic: ${d['Domestic Consumption']}<br>Exports: ${d['Exports']}`)
                        .style(""left"", (event.pageX + 5) + ""px"")
                        .style(""top"", (event.pageY - 28) + ""px"");
                })
                .on(""mouseout"", () => {
                    tooltip.transition().duration(500).style(""opacity"", 0);
                })
                .on(""click"", (event, d) => {
                    window.open(`https://www.google.com/search?q=${d.Country}`, '_blank');
                });
        });
    </script>
</body>
</html>
```",Correct,90,91
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Scatterplot with query widgets showing the Domestic Consumption and Exports of the given dataset. Add a slider to represent the Year, the value should be between 2015 to 2019.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Scatterplot</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .scatter {
            fill: steelblue;
        }
        .axis--x path,
        .axis--y path {
            display: none;
        }
    </style>
</head>
<body>
    <h2>Coffee Consumption Scatterplot</h2>
    <label for=""yearSlider"">Select Year:</label>
    <input type=""range"" id=""yearSlider"" min=""2015"" max=""2019"" value=""2019""/>
    <svg width=""800"" height=""400""></svg>
    
    <script>
        const svg = d3.select(""svg""),
            margin = { top: 20, right: 30, bottom: 30, left: 40 },
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        const xAxis = d3.axisBottom(x);
        const yAxis = d3.axisLeft(y);

        let data;

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(loadedData => {
            data = loadedData.map(d => ({
                Year: +d.Year,
                DomesticConsumption: +d[""Domestic Consumption""],
                Exports: +d.Exports
            }));
            update(2019);
        });

        function update(selectedYear) {
            const filteredData = data.filter(d => d.Year === selectedYear);
            x.domain([0, d3.max(filteredData, d => d.DomesticConsumption)]);
            y.domain([0, d3.max(filteredData, d => d.Exports)]);

            g.selectAll(""*"").remove();
            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(xAxis);

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(yAxis);

            g.selectAll("".dot"")
                .data(filteredData)
                .enter().append(""circle"")
                .attr(""class"", ""scatter"")
                .attr(""r"", 5)
                .attr(""cx"", d => x(d.DomesticConsumption))
                .attr(""cy"", d => y(d.Exports));
        }

        d3.select(""#yearSlider"").on(""input"", function() {
            update(+this.value);
        });
    </script>
</body>
</html>
```",Correct,91,92
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Scatterplot showing the Domestic Consumption of USA. Add animated transitions that connect these points using lines in order.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>USA Coffee Consumption Scatterplot</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .dot {
            fill: steelblue;
            stroke: white;
            stroke-width: 1.5px;
        }
        .line {
            fill: none;
            stroke: orange;
            stroke-width: 2;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const margin = {top: 20, right: 30, bottom: 30, left: 40},
            width = 800 - margin.left - margin.right,
            height = 400 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            const usaData = data.filter(d => d.Country === ""USA"").map(d => ({
                year: +d.Year,
                consumption: +d[""Domestic Consumption""]
            }));

            x.domain(d3.extent(usaData, d => d.year));
            y.domain([0, d3.max(usaData, d => d.consumption)]);

            svg.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .call(d3.axisLeft(y));

            const line = d3.line()
                .x(d => x(d.year))
                .y(d => y(d.consumption));

            svg.append(""path"")
                .datum(usaData)
                .attr(""class"", ""line"")
                .attr(""d"", line);

            const dots = svg.selectAll("".dot"")
                .data(usaData)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => x(d.year))
                .attr(""cy"", d => y(d.consumption))
                .attr(""r"", 5)
                .style(""opacity"", 0)
                .transition()
                .duration(2000)
                .style(""opacity"", 1)
                .attr(""r"", 5);
            
            let i = 0;
            function animateLine() {
                if (i < usaData.length) {
                    const segment = [usaData[i], usaData[i + 1]];
                    svg.append(""path"")
                        .datum(segment)
                        .attr(""class"", ""line"")
                        .attr(""d"", line)
                        .transition()
                        .duration(1000)
                        .style(""opacity"", 1)
                        .remove();
                    i++;
                    setTimeout(animateLine, 1000);
                }
            }
            animateLine();
        });
    </script>
</body>
</html>
```",Correct,92,93
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Domestic Consumption of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke-width: 2px;
        }
        .line:hover {
            stroke-width: 4px;
        }
        .tooltip {
            position: absolute;
            text-align: center;
            width: 60px;
            height: 28px;
            padding: 2px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <svg width=""960"" height=""500""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            const parseYear = d3.scaleLinear()
                .domain(d3.extent(data, d => d.Year))
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => +d.Domestic_Consumption)])
                .range([height, 0]);

            const line = d3.line()
                .x(d => parseYear(d.Year))
                .y(d => y(+d.Domestic_Consumption));

            const countries = Array.from(new Set(data.map(d => d.Country)));
            const color = d3.scaleOrdinal(d3.schemeCategory10).domain(countries);

            countries.forEach(country => {
                const countryData = data.filter(d => d.Country === country);
                g.append(""path"")
                    .datum(countryData)
                    .attr(""class"", ""line"")
                    .attr(""d"", line)
                    .attr(""stroke"", color(country))
                    .on(""mouseover"", function () {
                        d3.select(this).style(""opacity"", 0.7);
                    })
                    .on(""mouseout"", function () {
                        d3.select(this).style(""opacity"", 1);
                    });
            });

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(parseYear).ticks(10));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y).ticks(10));

        });
    </script>
</body>
</html>
```",Initialization Error,93,94
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Bar Chart that visualizes the Domestic Consumption for each Country in 2017. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption 2017</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path,
        .axis--x line {
            display: none;
        }
    </style>
</head>
<body>
    <svg id=""chart"" width=""960"" height=""500""></svg>
    <script>
        const svg = d3.select(""#chart""),
            margin = { top: 20, right: 30, bottom: 40, left: 40 },
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom,
            g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleBand().range([0, width]).padding(0.1);
        const y = d3.scaleLinear().range([height, 0]);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            data.forEach(d => {
                if (d.Year === ""2017"") {
                    d.Domestic_Consumption = +d.Domestic_Consumption;
                    d.Country = d.Country;
                }
            });

            const filteredData = data.filter(d => d.Domestic_Consumption);

            x.domain(filteredData.map(d => d.Country));
            y.domain([0, d3.max(filteredData, d => d.Domestic_Consumption)]);

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            g.selectAll("".bar"")
                .data(filteredData)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => x(d.Country))
                .attr(""y"", d => y(d.Domestic_Consumption))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d.Domestic_Consumption));

            let zoom = d3.zoom()
                .scaleExtent([0.5, 5])
                .translateExtent([[0, 0], [width, height]])
                .on(""zoom"", zoomed);

            svg.call(zoom);

            function zoomed(event) {
                g.attr(""transform"", event.transform);
                g.selectAll("".bar"")
                    .attr(""x"", d => x(d.Country) * event.transform.k)
                    .attr(""width"", x.bandwidth() * event.transform.k);
                g.select("".axis--x"").call(d3.axisBottom(x).scale(event.transform.rescaleX(x)));
                g.select("".axis--y"").call(d3.axisLeft(y).scale(event.transform.rescaleY(y)));
            }
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,94,95
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Bar Chart that visualizes the Domestic Consumption for each Country in 2017. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption 2017</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
            cursor: move;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--y .domain {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>

    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            data = data.filter(d => d.Year == ""2017"")
                       .map(d => ({Country: d.Country, DomesticConsumption: +d.DomesticConsumption}));

            const x = d3.scaleBand()
                .domain(data.map(d => d.Country))
                .range([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.DomesticConsumption)])
                .nice()
                .range([height, 0]);

            g.append(""g"")
                .selectAll("".bar"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => x(d.Country))
                .attr(""y"", d => y(d.DomesticConsumption))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d.DomesticConsumption))
                .call(d3.drag()
                    .on(""start"", dragstarted)
                    .on(""drag"", dragged)
                    .on(""end"", dragended));

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            function dragstarted(event, d) {
                d3.select(this).raise().classed(""active"", true);
            }

            function dragged(event, d) {
                const yPosition = Math.max(0, Math.min(height, event.y));
                const newHeight = height - yPosition;
                const newY = y(newHeight);

                d3.select(this)
                    .attr(""y"", newY)
                    .attr(""height"", newHeight);
            }

            function dragended(event, d) {
                d3.select(this).classed(""active"", false);
                d3.select(this).attr(""y"", height - d.DomesticConsumption).attr(""height"", height - y(d.DomesticConsumption));
            }

            // Sort bars after dragging, for better user experience
            svg.on(""mouseup"", () => {
                data.sort((a, b) => b.DomesticConsumption - a.DomesticConsumption);
                x.domain(data.map(d => d.Country));
                
                g.selectAll("".bar"")
                    .data(data)
                    .transition()
                    .duration(200)
                    .attr(""x"", d => x(d.Country))
                    .attr(""y"", d => y(d.DomesticConsumption))
                    .attr(""height"", d => height - y(d.DomesticConsumption));
                
                g.select("".axis--x"").call(d3.axisBottom(x));
            });
        });
    </script>
</body>
</html>
```",Initialization Error,95,96
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Bar Chart that visualizes the Domestic Consumption for each Country in 2017. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Domestic Consumption.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path,
        .axis--x line {
            display: none;
        }
        .axis--y .domain {
            display: none;
        }
        .dropdown {
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <select class=""dropdown"" id=""sortOrder"">
        <option value=""desc"">Descending</option>
        <option value=""asc"">Ascending</option>
    </select>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = {top: 20, right: 30, bottom: 40, left: 40};
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;
        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            data.forEach(d => {
                d[""Domestic Consumption""] = +d[""Domestic Consumption""];
                d.Year = +d.Year; 
            });

            const filteredData = data.filter(d => d.Year === 2017);
            update(filteredData);

            d3.select(""#sortOrder"").on(""change"", function() {
                const sortOrder = this.value;
                const sortedData = filteredData.sort((a, b) => sortOrder === ""asc"" ? a[""Domestic Consumption""] - b[""Domestic Consumption""] : b[""Domestic Consumption""] - a[""Domestic Consumption""]);
                update(sortedData);
            });

            function update(data) {
                g.selectAll(""*"").remove();

                const x = d3.scaleBand()
                    .domain(data.map(d => d.Country))
                    .range([0, width])
                    .padding(0.1);

                const y = d3.scaleLinear()
                    .domain([0, d3.max(data, d => d[""Domestic Consumption""])])
                    .nice()
                    .range([height, 0]);

                g.append(""g"")
                    .selectAll("".bar"")
                    .data(data)
                    .enter().append(""rect"")
                    .attr(""class"", ""bar"")
                    .attr(""x"", d => x(d.Country))
                    .attr(""y"", d => y(d[""Domestic Consumption""]))
                    .attr(""width"", x.bandwidth())
                    .attr(""height"", d => height - y(d[""Domestic Consumption""]))
                    .transition()
                    .duration(750)
                    .attr(""height"", d => height - y(d[""Domestic Consumption""]))
                    .attr(""y"", d => y(d[""Domestic Consumption""]));

                g.append(""g"")
                    .attr(""class"", ""axis axis--x"")
                    .attr(""transform"", `translate(0,${height})`)
                    .call(d3.axisBottom(x));

                g.append(""g"")
                    .attr(""class"", ""axis axis--y"")
                    .call(d3.axisLeft(y));
            }
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,96,97
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\n\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Scatterplot that visualizes the relationship between Domestic Consumption and Exports. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const domesticConsumption = [];
                const exports = [];
                const countries = [];

                rows.forEach(row => {
                    const cols = row.split(',');
                    if (cols.length >= 4) {
                        domesticConsumption.push(parseFloat(cols[2]));
                        exports.push(parseFloat(cols[3]));
                        countries.push(cols[1]);
                    }
                });

                const option = {
                    tooltip: {
                        trigger: 'item',
                        formatter: function (params) {
                            return `${params.name}<br/>Domestic Consumption: ${params.value[0]}<br/>Exports: ${params.value[1]}`;
                        }
                    },
                    xAxis: {
                        name: 'Domestic Consumption',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Exports',
                        type: 'value'
                    },
                    series: [{
                        type: 'scatter',
                        data: domesticConsumption.map((val, index) => [val, exports[index], countries[index]]),
                        encode: {
                            tooltip: [0, 1, 2],
                        },
                        symbolSize: 10,
                    }]
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,97,98
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\n\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Scatterplot that visualizes the relationship between Domestic Consumption and Exports. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Scatterplot</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).filter(row => row);
                const points = rows.map(row => {
                    const [year, country, domesticConsumption, exports] = row.split(',');
                    return {
                        year: parseInt(year),
                        country: country,
                        domesticConsumption: parseFloat(domesticConsumption),
                        exports: parseFloat(exports)
                    };
                });

                const scatterData = points.map(point => [point.domesticConsumption, point.exports]);

                const myChart = echarts.init(document.getElementById('main'));

                myChart.setOption({
                    title: {
                        text: 'Coffee Domestic Consumption vs Exports'
                    },
                    tooltip: {},
                    xAxis: {
                        name: 'Domestic Consumption',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Exports',
                        type: 'value'
                    },
                    series: [{
                        type: 'scatter',
                        data: scatterData,
                        markPoint: {
                            data: [{
                                type: 'max',
                                name: 'Max'
                            }, {
                                type: 'min',
                                name: 'Min'
                            }]
                        },
                        emphasis: {
                            focus: 'series'
                        }
                    }]
                });

                myChart.on('brush', function (params) {
                    const selectedPoints = params.areas[0].coordRange;
                    console.log('Selected area:', selectedPoints);
                    // You can process the selected points or display them as needed
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,98,99
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\n\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Scatterplot that visualizes the relationship between Domestic Consumption and Exports. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%;height:600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const domesticConsumption = [];
                const exports = [];
                
                lines.forEach(line => {
                    const columns = line.split(',');
                    if (columns.length > 4) {
                        domesticConsumption.push(parseFloat(columns[2]));
                        exports.push(parseFloat(columns[3]));
                    }
                });

                var myChart = echarts.init(document.getElementById('main'));
                var option = {
                    title: {
                        text: 'Domestic Consumption vs Exports'
                    },
                    tooltip: {},
                    xAxis: {
                        name: 'Domestic Consumption',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Exports',
                        type: 'value'
                    },
                    series: [{
                        symbolSize: 10,
                        data: domesticConsumption.map((dc, index) => [dc, exports[index]]),
                        type: 'scatter'
                    }]
                };
                myChart.setOption(option);

                // Enable zooming via mouse wheel
                myChart.on('dataZoom', (params) => {
                    if (params.batch) {
                        myChart.dispatchAction({
                            type: 'dataZoom',
                            batch: params.batch
                        });
                    }
                });
                myChart.on('zoom', function () {
                    myChart.dispatchAction({
                        type: 'dataZoom',
                        start: myChart.getOption().dataZoom[0].start,
                        end: myChart.getOption().dataZoom[0].end
                    });
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,99,100
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\n\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Domestic Consumption and Exports. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const chartData = rows.map(row => {
                    const cols = row.split(',');
                    return {
                        year: cols[0],
                        country: cols[1],
                        domesticConsumption: parseFloat(cols[2]),
                        exports: parseFloat(cols[3]),
                    };
                }).filter(item => !isNaN(item.domesticConsumption) && !isNaN(item.exports));

                const myChart = echarts.init(document.getElementById('main'));

                myChart.setOption({
                    tooltip: {
                        trigger: 'item',
                        formatter: function(params) {
                            return `${params.data.country}<br/>
                                    Domestic Consumption: ${params.data.domesticConsumption}<br/>
                                    Exports: ${params.data.exports}`;
                        },
                        extraCssText: 'box-shadow: 0 0 8px rgba(0, 0, 0, 0.5);'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Domestic Consumption',
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Exports',
                    },
                    series: [{
                        type: 'scatter',
                        data: chartData.map(item => [item.domesticConsumption, item.exports]),
                        symbolSize: 20,
                        itemStyle: {
                            color: 'blue',
                        },
                    }]
                });

                myChart.on('click', function (params) {
                    const country = chartData[params.dataIndex].country;
                    const searchUrl = `https://www.google.com/search?q=${country}`;
                    window.open(searchUrl, '_blank');
                });
            });
    </script>
</body>
</html>
```",Correct,100,101
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\n\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Scatterplot with query widgets showing the Domestic Consumption and Exports of the given dataset. Add a slider to represent the Year, the value should be between 2015 to 2019.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <input type=""range"" id=""yearSlider"" min=""2015"" max=""2019"" step=""1"" value=""2019"">
    <label for=""yearSlider"">Year: <span id=""yearValue"">2019</span></label>
    
    <script>
        const url = 'https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv';
        
        fetch(url)
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const chartData = rows.map(row => {
                    const cols = row.split(',');
                    return {
                        year: parseInt(cols[0]),
                        country: cols[1],
                        domesticConsumption: parseFloat(cols[2]),
                        exports: parseFloat(cols[3])
                    };
                }).filter(item => item.year && item.domesticConsumption && item.exports);

                drawChart(chartData, 2019);

                document.getElementById('yearSlider').addEventListener('input', (event) => {
                    const year = parseInt(event.target.value);
                    document.getElementById('yearValue').innerText = year;
                    drawChart(chartData, year);
                });
            });

        function drawChart(data, year) {
            const filteredData = data.filter(item => item.year === year);
            const domesticConsumption = filteredData.map(item => item.domesticConsumption);
            const exports = filteredData.map(item => item.exports);
            const countries = filteredData.map(item => item.country);

            const option = {
                title: {
                    text: 'Coffee Domestic Consumption vs Exports (' + year + ')'
                },
                xAxis: {
                    name: 'Domestic Consumption',
                },
                yAxis: {
                    name: 'Exports',
                },
                tooltip: {
                    trigger: 'item',
                    formatter: function (params) {
                        return `${params.name}<br/>Domestic Consumption: ${params.value[0]}<br/>Exports: ${params.value[1]}`;
                    }
                },
                series: [
                    {
                        type: 'scatter',
                        symbolSize: 10,
                        data: domesticConsumption.map((value, index) => [value, exports[index], countries[index]])
                    }
                ]
            };

            const chart = echarts.init(document.getElementById('main'));
            chart.setOption(option);
        }
    </script>
</body>
</html>
```",Correct,101,102
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\n\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Scatterplot showing the Domestic Consumption of USA. Add animated transitions that connect these points using lines in order.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1);
            const usaData = rows
                .filter(row => row.includes('USA'))
                .map(row => {
                    const cols = row.split(',');
                    return {
                        year: cols[0],
                        domesticConsumption: parseFloat(cols[2]) // Domestic Consumption column
                    };
                });

            const years = usaData.map(item => item.year);
            const domesticConsumption = usaData.map(item => item.domesticConsumption);

            const chartDom = document.getElementById('main');
            const myChart = echarts.init(chartDom);
            const option = {
                title: {
                    text: 'Coffee Domestic Consumption in the USA'
                },
                tooltip: {
                    trigger: 'item'
                },
                xAxis: {
                    type: 'category',
                    data: years
                },
                yAxis: {
                    type: 'value',
                    name: 'Domestic Consumption (kg per person)',
                    min: 0
                },
                series: [{
                    name: 'Domestic Consumption',
                    type: 'scatter',
                    data: domesticConsumption.map((value, index) => [years[index], value]),
                    symbolSize: 10,
                    animationDelay: (idx) => idx * 100,
                }]
            };

            myChart.setOption(option);

            // Add line connecting points
            myChart.on('finished', () => {
                myChart.setOption({
                    series: [{
                        type: 'line',
                        data: domesticConsumption.map((value, index) => [years[index], value]),
                        animationDuration: 2000,
                        animationEasing: 'cubicInOut'
                    }]
                });
            });
        });
    </script>
</body>
</html>
```",Correct,102,103
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\n\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Domestic Consumption of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Line Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(csvData => {
                const lines = csvData.split('\n').slice(1);
                const data = {};

                lines.forEach(line => {
                    const [year, country, domesticConsumption] = line.split(',');
                    if (!data[country]) {
                        data[country] = { years: [], domesticConsumption: [] };
                    }
                    data[country].years.push(year);
                    data[country].domesticConsumption.push(parseFloat(domesticConsumption));
                });

                const series = Object.keys(data).map(country => ({
                    name: country,
                    type: 'line',
                    data: data[country].domesticConsumption,
                    smooth: true,
                    emphasis: {
                        focus: 'series'
                    }
                }));

                const option = {
                    title: {
                        text: 'Coffee Domestic Consumption by Country',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    legend: {
                        data: Object.keys(data),
                        bottom: '10%'
                    },
                    xAxis: {
                        type: 'category',
                        data: data[Object.keys(data)[0]].years,
                        boundaryGap: false
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Domestic Consumption'
                    },
                    series: series
                };

                const myChart = echarts.init(document.getElementById('main'));
                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,103,104
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\n\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Bar Chart that visualizes the Domestic Consumption for each Country in 2017. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Visualization</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.2.2/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const consumptionData = lines.map(line => {
                    const [year, country, domesticConsumption] = line.split(',');
                    return { year, country, domesticConsumption: parseFloat(domesticConsumption) };
                }).filter(item => item.year === '2017' && !isNaN(item.domesticConsumption));

                const countries = consumptionData.map(item => item.country);
                const domesticConsumption = consumptionData.map(item => item.domesticConsumption);

                const myChart = echarts.init(document.getElementById('main'));
                const option = {
                    title: {
                        text: 'Coffee Domestic Consumption by Country in 2017'
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: countries,
                        axisLabel: { rotate: 45 }
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Consumption (kg per capita)'
                    },
                    series: [{
                        name: 'Domestic Consumption',
                        type: 'bar',
                        data: domesticConsumption
                    }],
                    dataZoom: [{
                        type: 'slider',
                        show: true,
                        start: 0,
                        end: 100
                    }, {
                        type: 'inside',
                        start: 0,
                        end: 100
                    }],
                    grid: {
                        left: '3%',
                        right: '4%',
                        bottom: '3%',
                        containLabel: true
                    },
                    visualMap: {
                        show: false,
                        min: Math.min(...domesticConsumption),
                        max: Math.max(...domesticConsumption)
                    }
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,104,105
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\n\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Bar Chart that visualizes the Domestic Consumption for each Country in 2017. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Visualization</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 600px;
            margin: auto;
        }
    </style>
</head>
<body>
    <div id=""main""></div>

    <script>
        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv');
            const text = await response.text();
            return parseCSV(text);
        }

        function parseCSV(text) {
            const lines = text.split('\n').slice(1);
            const data = lines.map(line => {
                const [Year, Country, DomesticConsumption, Exports, ImportPrice, ExportPrice, TotalProduction] = line.split(',');
                return { Year, Country, DomesticConsumption: parseFloat(DomesticConsumption) || 0 };
            });
            return data.filter(row => row.Year === '2017');
        }

        async function initChart() {
            const data = await fetchData();
            const countries = data.map(item => item.Country);
            const consumption = data.map(item => item.DomesticConsumption);

            const myChart = echarts.init(document.getElementById('main'));

            const option = {
                title: {
                    text: 'Coffee Domestic Consumption by Country in 2017',
                },
                tooltip: {},
                xAxis: {
                    type: 'category',
                    data: countries,
                    axisLabel: {
                        interval: 0,
                        rotate: 30,
                    }
                },
                yAxis: {
                    type: 'value'
                },
                series: [{
                    name: 'Domestic Consumption',
                    type: 'bar',
                    data: consumption,
                    draggable: true,
                }],
                animation: false,
            };

            myChart.setOption(option);

            // Enable drag-and-drop
            myChart.on('dragend', function (params) {
                const newIndex = params.dataIndex;
                const newData = data.slice();
                const movedItem = newData.splice(newIndex, 1)[0]; // Remove the dragged item
                newData.splice(params.targetIndex, 0, movedItem); // Insert it at the new position
                
                const newCountries = newData.map(item => item.Country);
                const newConsumption = newData.map(item => item.DomesticConsumption);
                
                myChart.setOption({
                    xAxis: {
                        data: newCountries,
                    },
                    series: [{
                        data: newConsumption,
                    }]
                });
            });
        }

        initChart();
    </script>
</body>
</html>
```",Unexpected Execution Result,105,106
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\n\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Bar Chart that visualizes the Domestic Consumption for each Country in 2017. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Domestic Consumption.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption 2017</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%;height:500px;""></div>
    <select id=""sort-order"" onchange=""updateSortOrder()"">
        <option value=""descending"">Descending</option>
        <option value=""ascending"">Ascending</option>
    </select>
    
    <script>
        const url = 'https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv';

        fetch(url)
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const coffeeData = rows.map(row => {
                    const cols = row.split(',');
                    return {
                        year: cols[0],
                        country: cols[1],
                        domesticConsumption: parseFloat(cols[2]) || 0
                    };
                }).filter(item => item.year === '2017');

                renderChart(coffeeData);
            });

        function renderChart(data) {
            const chartDom = document.getElementById('main');
            const myChart = echarts.init(chartDom);

            const option = {
                title: {
                    text: 'Coffee Domestic Consumption by Country in 2017',
                },
                xAxis: {
                    type: 'category',
                    data: data.map(item => item.country),
                },
                yAxis: {
                    type: 'value',
                },
                series: [{
                    data: data.map(item => item.domesticConsumption),
                    type: 'bar',
                    animationDuration: 1000,
                    itemStyle: {
                        color: '#73c0de',
                    },
                }],
                tooltip: {
                    trigger: 'item',
                    formatter: '{b}: {c}'
                }
            };

            myChart.setOption(option);

            window.updateSortOrder = function() {
                const sortOrder = document.getElementById('sort-order').value;
                const sortedData = [...data].sort((a, b) => 
                    sortOrder === 'ascending' 
                        ? a.domesticConsumption - b.domesticConsumption 
                        : b.domesticConsumption - a.domesticConsumption
                );

                option.xAxis.data = sortedData.map(item => item.country);
                option.series[0].data = sortedData.map(item => item.domesticConsumption);
                
                myChart.setOption(option, true);
            };
        }
    </script>
</body>
</html>
```",Correct,106,107
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\n\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Scatterplot that visualizes the relationship between Domestic Consumption and Exports. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""title"": ""Relationship between Domestic Consumption and Exports"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Domestic Consumption"",
                    ""type"": ""quantitative"",
                    ""axis"": {
                        ""title"": ""Domestic Consumption""
                    }
                },
                ""y"": {
                    ""field"": ""Exports"",
                    ""type"": ""quantitative"",
                    ""axis"": {
                        ""title"": ""Exports""
                    }
                },
                ""tooltip"": [
                    {""field"": ""Year"", ""type"": ""ordinal""},
                    {""field"": ""Country"", ""type"": ""nominal""},
                    {""field"": ""Domestic Consumption"", ""type"": ""quantitative""},
                    {""field"": ""Exports"", ""type"": ""quantitative""}
                ]
            },
            ""config"": {
                ""view"": {
                    ""stroke"": ""transparent""
                }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Unexpected Execution Result,107,108
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\n\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Scatterplot that visualizes the relationship between Domestic Consumption and Exports. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.7.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.19.1""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatterplot showing the relationship between Domestic Consumption and Exports."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Domestic Consumption"",
                    ""type"": ""quantitative"",
                    ""title"": ""Domestic Consumption""
                },
                ""y"": {
                    ""field"": ""Exports"",
                    ""type"": ""quantitative"",
                    ""title"": ""Exports""
                },
                ""tooltip"": [
                    {""field"": ""Country"", ""type"": ""nominal""},
                    {""field"": ""Year"", ""type"": ""temporal""},
                    {""field"": ""Domestic Consumption"", ""type"": ""quantitative""},
                    {""field"": ""Exports"", ""type"": ""quantitative""}
                ]
            },
            ""selection"": {
                ""brush"": {
                    ""type"": ""interval"",
                    ""encodings"": [""x"", ""y""]
                }
            },
            ""transform"": [
                {
                    ""filter"": {""selection"": ""brush""}
                }
            ]
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Unexpected Execution Result,108,109
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\n\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Scatterplot that visualizes the relationship between Domestic Consumption and Exports. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/@vega/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/@vega-lite/vega-lite@5.7.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const specification = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatterplot showing the relationship between Domestic Consumption and Exports."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Domestic Consumption"",
                    ""type"": ""quantitative"",
                    ""title"": ""Domestic Consumption""
                },
                ""y"": {
                    ""field"": ""Exports"",
                    ""type"": ""quantitative"",
                    ""title"": ""Exports""
                },
                ""tooltip"": [
                    {""field"": ""Country"", ""type"": ""nominal""},
                    {""field"": ""Year"", ""type"": ""temporal""},
                    {""field"": ""Domestic Consumption"", ""type"": ""quantitative""},
                    {""field"": ""Exports"", ""type"": ""quantitative""}
                ]
            },
            ""config"": {
                ""mark"": {
                    ""tooltip"": true
                }
            }
        };

        vegaEmbed('#vis', specification, {renderer: ""canvas"", actions: false}).then(function(result) {
            // Enable zooming with mouse wheel
            const view = result.view;
            view.addSignalListener('zoom', (name, value) => {
                view.scale().map('x', value[0]);
                view.scale().map('y', value[1]);
                view.run();
            });
            view.on('wheel', (event) => {
                const zoomAmount = event.deltaY < 0 ? 1.1 : 0.9;
                view.signal('zoom', [view.scale('x').range()[0] * zoomAmount, view.scale('y').range()[0] * zoomAmount]);
                event.preventDefault();
            });
        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Initial Result,109,110
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\n\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Domestic Consumption and Exports. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <style>
        .tooltip {
            position: absolute;
            background: white;
            border: 1px solid lightgray;
            padding: 5px;
            display: none;
        }
    </style>
</head>
<body>
    <div id=""vis""></div>
    <div class=""tooltip"" id=""tooltip""></div>

    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatterplot showing the relationship between Domestic Consumption and Exports."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Domestic Consumption"",
                    ""type"": ""quantitative"",
                    ""title"": ""Domestic Consumption""
                },
                ""y"": {
                    ""field"": ""Exports"",
                    ""type"": ""quantitative"",
                    ""title"": ""Exports""
                },
                ""tooltip"": [
                    {""field"": ""Country"", ""type"": ""ordinal""},
                    {""field"": ""Year"", ""type"": ""ordinal""},
                    {""field"": ""Domestic Consumption"", ""type"": ""quantitative""},
                    {""field"": ""Exports"", ""type"": ""quantitative""}
                ]
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            const view = result.view;

            // Tooltip setup
            view.tooltip().bind(""mouseover"", function(event, item) {
                const tooltip = document.getElementById('tooltip');
                tooltip.style.display = 'block';
                tooltip.innerHTML = `Country: ${item.datum.Country}<br>Year: ${item.datum.Year}<br>Domestic Consumption: ${item.datum['Domestic Consumption']}<br>Exports: ${item.datum.Exports}`;
                tooltip.style.left = `${event.clientX + 5}px`;
                tooltip.style.top = `${event.clientY + 5}px`;
            }).bind(""mouseout"", function() {
                const tooltip = document.getElementById('tooltip');
                tooltip.style.display = 'none';
            }).bind(""click"", function(event, item) {
                const country = item.datum.Country;
                const query = encodeURIComponent(country);
                window.open(`https://www.google.com/search?q=${query}`, '_blank');
            });
        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Execution Result,110,111
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\n\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Scatterplot with query widgets showing the Domestic Consumption and Exports of the given dataset. Add a slider to represent the Year, the value should be between 2015 to 2019.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.3.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.1""></script>
    <style>
        #vis {
            width: 100%;
            height: 500px;
        }
    </style>
</head>
<body>
    <div id=""vis""></div>
    <script type=""text/javascript"">
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatterplot showing Domestic Consumption vs Exports of Coffee."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""field"": ""Year"",
                        ""oneOf"": [2015, 2016, 2017, 2018, 2019]
                    }
                }
            ],
            ""parameters"": {
                ""year"": {
                    ""name"": ""Year"",
                    ""value"": 2015,
                    ""bind"": {
                        ""input"": ""range"",
                        ""min"": 2015,
                        ""max"": 2019,
                        ""step"": 1
                    }
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Domestic Consumption"",
                    ""type"": ""quantitative"",
                    ""title"": ""Domestic Consumption (kg per capita)""
                },
                ""y"": {
                    ""field"": ""Exports"",
                    ""type"": ""quantitative"",
                    ""title"": ""Exports (kg)""
                },
                ""color"": {
                    ""field"": ""Country"",
                    ""type"": ""nominal""
                }
            },
            ""selection"": {
                ""highlight"": {
                    ""type"": ""single"",
                    ""fields"": [""Country""],
                    ""empty"": ""all"",
                    ""on"": ""mouseover""
                }
            }
        };

        vegaEmbed('#vis', spec)
            .then(result => {
                // Access the view instance and attach any additional actions
                const view = result.view;
                view.addSignalListener('year', function(name, value) {
                    // Update the filter on year change
                    view.data('table').filter(d => d.Year === value);
                    view.runAsync();
                });
            })
            .catch(console.error);
    </script>
</body>
</html>
```",Unexpected Execution Result,111,112
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\n\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Scatterplot showing the Domestic Consumption of USA. Add animated transitions that connect these points using lines in order.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.8.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""title"": ""Domestic Coffee Consumption in the USA"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""field"": ""Country"",
                        ""oneOf"": [""USA""]
                    }
                },
                {
                    ""calculate"": ""datum.Year + 1"",
                    ""as"": ""nextYear""
                }
            ],
            ""mark"": {
                ""type"": ""point"",
                ""tooltip"": true
            },
            ""encoding"": {
                ""x"": {
                    ""field"": ""Year"",
                    ""type"": ""ordinal"",
                    ""title"": ""Year""
                },
                ""y"": {
                    ""field"": ""Domestic Consumption"",
                    ""type"": ""quantitative"",
                    ""title"": ""Domestic Consumption (kg per person)""
                },
                ""tooltip"": [
                    {""field"": ""Year"", ""type"": ""ordinal""},
                    {""field"": ""Domestic Consumption"", ""type"": ""quantitative""}
                ]
            }
        };

        vegaEmbed('#vis', spec)
            .then(result => {
                const { view } = result;
                view.addEventListener('click', () => {
                    view.run();
                });
            })
            .catch(console.error);
    </script>
</body>
</html>
```",Unexpected Initial Result,112,113
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\n\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Domestic Consumption of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A multi-series line chart showing Domestic Coffee Consumption."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Year"",
                    ""type"": ""ordinal""
                },
                ""y"": {
                    ""field"": ""Domestic Consumption"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Country"",
                    ""type"": ""nominal""
                },
                ""opacity"": {
                    ""condition"": {
                        ""param"": ""highlight"",
                        ""empty"": false,
                        ""value"": 1
                    },
                    ""value"": 0.2
                }
            },
            ""params"": [
                {
                    ""name"": ""highlight"",
                    ""select"": {
                        ""type"": ""point"",
                        ""on"": ""mouseover"",
                        ""fields"": [""Country""]
                    }
                }
            ],
            ""width"": 800,
            ""height"": 400
        };

        vegaEmbed('#vis', spec).then(function(result) {}).catch(console.error);
    </script>
</body>
</html>
```",Correct,113,114
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\n\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Bar Chart that visualizes the Domestic Consumption for each Country in 2017. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <title>Coffee Consumption in 2017</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.7.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2""></script>
    <style>
        .vega-embed {
            max-width: 800px;
            margin: auto;
        }
    </style>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""field"": ""Year"",
                        ""equal"": 2017
                    }
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Country"",
                    ""type"": ""ordinal"",
                    ""sort"": ""-y"",
                    ""axis"": {
                        ""labelAngle"": -45
                    }
                },
                ""y"": {
                    ""field"": ""Domestic Consumption"",
                    ""type"": ""quantitative""
                },
                ""tooltip"": [
                    {""field"": ""Country"", ""type"": ""ordinal""},
                    {""field"": ""Domestic Consumption"", ""type"": ""quantitative""}
                ]
            },
            ""config"": {
                ""background"": ""#ffffff""
            }
        };

        vegaEmbed('#vis', spec, {renderer: 'svg', actions: false}).then(function(result) {
            // Optional: additional interactivity can be defined here.
        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Execution Result,114,115
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\n\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Bar Chart that visualizes the Domestic Consumption for each Country in 2017. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption 2017</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.1""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""transform"": [
                {
                    ""filter"": {""field"": ""Year"", ""equal"": 2017}
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Country"",
                    ""type"": ""ordinal"",
                    ""title"": ""Country"",
                    ""sort"": null
                },
                ""y"": {
                    ""field"": ""Domestic Consumption"",
                    ""type"": ""quantitative"",
                    ""title"": ""Domestic Consumption""
                },
                ""color"": {
                    ""field"": ""Country"",
                    ""type"": ""nominal"",
                    ""legend"": null
                }
            },
            ""selection"": {
                ""bar"": {
                    ""type"": ""interval"",
                    ""bind"": ""scales""
                }
            }
        };

        vegaEmbed('#vis', spec).then(result => {
            const view = result.view;
            view.addEventListener('click', function() {
                view.run();
            });
        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Execution Result,115,116
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\n\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Bar Chart that visualizes the Domestic Consumption for each Country in 2017. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Domestic Consumption.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""title"": ""Coffee Domestic Consumption by Country (2017)"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Year == 2017""
                },
                {
                    ""calculate"": ""datum.Domestic_Consumption"",
                    ""as"": ""Domestic Consumption""
                },
                {
                    ""calculate"": ""datum.Country"",
                    ""as"": ""Country""
                },
                {
                    ""window"": [
                        {
                            ""op"": ""rank"",
                            ""as"": ""rank""
                        }
                    ],
                    ""groupby"": [""Country""]
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Country"",
                    ""type"": ""ordinal"",
                    ""sort"": null
                },
                ""y"": {
                    ""field"": ""Domestic Consumption"",
                    ""type"": ""quantitative""
                },
                ""tooltip"": [
                    {""field"": ""Country"", ""type"": ""ordinal""},
                    {""field"": ""Domestic Consumption"", ""type"": ""quantitative""}
                ]
            },
            ""config"": {
                ""view"": {
                    ""width"": 600,
                    ""height"": 400
                }
            }
        };

        vegaEmbed('#vis', spec, {actions: false}).then(function(result) {
            const view = result.view;

            const dropdown = d3.select(""body"").append(""select"")
                .on(""change"", function() {
                    const selected = d3.select(this).property(""value"");
                    view.data(""table"").sort(selected === ""ascending"" ? ""Domestic Consumption"" : ""-Domestic Consumption"");
                    view.runAsync();
                });

            dropdown.selectAll(""option"")
                .data([""ascending"", ""descending""])
                .enter().append(""option"")
                .text(d => d);
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,116,117
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Data Visualization</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .scatterplot {
            float: left;
            width: 50%;
        }
        .barchart {
            float: right;
            width: 50%;
        }
        svg {
            margin: 10px;
        }
    </style>
</head>
<body>
    <div class=""scatterplot"" id=""scatterplot""></div>
    <div class=""barchart"" id=""barchart""></div>

    <script>
        const width = 500;
        const height = 400;

        // Scatterplot
        const svgScatter = d3.select(""#scatterplot"").append(""svg"")
            .attr(""width"", width)
            .attr(""height"", height);

        // Bar Chart
        const svgBar = d3.select(""#barchart"").append(""svg"")
            .attr(""width"", width)
            .attr(""height"", height);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            // Preprocess data for scatterplot
            data.forEach(d => {
                d['Domestic Consumption'] = +d['Domestic Consumption'];
                d['Total Production'] = +d['Total Production'];
            });

            // Scatterplot
            const xScatter = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Domestic Consumption'])])
                .range([0, width]);

            const yScatter = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Total Production'])])
                .range([height, 0]);

            svgScatter.selectAll(""circle"")
                .data(data)
                .enter().append(""circle"")
                .attr(""cx"", d => xScatter(d['Domestic Consumption']))
                .attr(""cy"", d => yScatter(d['Total Production']))
                .attr(""r"", 5)
                .attr(""fill"", ""blue"");

            svgScatter.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(xScatter));

            svgScatter.append(""g"")
                .call(d3.axisLeft(yScatter));

            // Bar Chart
            const xBar = d3.scaleBand()
                .domain(data.map(d => d['Country']))
                .range([0, width])
                .padding(0.1);

            const yBar = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Domestic Consumption'])])
                .range([height, 0]);

            svgBar.selectAll(""rect"")
                .data(data)
                .enter().append(""rect"")
                .attr(""x"", d => xBar(d['Country']))
                .attr(""y"", d => yBar(d['Domestic Consumption']))
                .attr(""width"", xBar.bandwidth())
                .attr(""height"", d => height - yBar(d['Domestic Consumption']))
                .attr(""fill"", ""orange"");

            svgBar.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(xBar).tickFormat(d3.cut(d => d)));

            svgBar.append(""g"")
                .call(d3.axisLeft(yBar));
        });
    </script>
</body>
</html>
```",Initialization Error,117,118
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Visualization</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatterplot {
            float: left;
            width: 50%;
        }
        .bar-chart {
            float: right;
            width: 50%;
        }
        .bar {
            fill: steelblue;
        }
        .bar.hover {
            fill: orange;
        }
        .dot {
            stroke: #fff;
        }
        .dot:hover {
            fill: orange;
        }
    </style>
</head>
<body>
    <div class=""scatterplot""></div>
    <div class=""bar-chart""></div>

    <script>
        const width = 450, height = 400;

        const svgScatter = d3.select("".scatterplot"").append(""svg"")
            .attr(""width"", width)
            .attr(""height"", height);

        const svgBar = d3.select("".bar-chart"").append(""svg"")
            .attr(""width"", width)
            .attr(""height"", height);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            data.forEach(d => {
                d.Year = +d.Year;
                d['Domestic Consumption'] = +d['Domestic Consumption'];
                d['Exports'] = +d['Exports'];
                d['Import Price'] = +d['Import Price'];
                d['Export Price'] = +d['Export Price'];
                d['Total Production'] = +d['Total Production'];
            });

            const xScatter = d3.scaleLinear()
                .domain(d3.extent(data, d => d['Domestic Consumption'])).nice()
                .range([0, width]);

            const yScatter = d3.scaleLinear()
                .domain(d3.extent(data, d => d['Exports'])).nice()
                .range([height, 0]);

            svgScatter.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(xScatter));

            svgScatter.append(""g"")
                .call(d3.axisLeft(yScatter));

            const dots = svgScatter.selectAll(""dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => xScatter(d['Domestic Consumption']))
                .attr(""cy"", d => yScatter(d['Exports']))
                .attr(""r"", 5)
                .on(""mouseover"", function(event, d) {
                    d3.select(this).style(""fill"", ""orange"");
                })
                .on(""mouseout"", function(event, d) {
                    d3.select(this).style(""fill"", null);
                });

            let barsData = [...new Set(data.map(d => d.Country))].map(country => {
                return {
                    Country: country,
                    Value: data.filter(d => d.Country === country).reduce((sum, d) => sum + d['Domestic Consumption'], 0)
                };
            });

            const xBar = d3.scaleBand()
                .domain(barsData.map(d => d.Country))
                .range([0, width])
                .padding(0.1);

            const yBar = d3.scaleLinear()
                .domain([0, d3.max(barsData, d => d.Value)]).nice()
                .range([height, 0]);

            svgBar.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(xBar).tickSize(0));

            svgBar.append(""g"")
                .call(d3.axisLeft(yBar));

            const bars = svgBar.selectAll("".bar"")
                .data(barsData)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => xBar(d.Country))
                .attr(""y"", d => yBar(d.Value))
                .attr(""width"", xBar.bandwidth())
                .attr(""height"", d => height - yBar(d.Value));

            let brushing = d3.brushX()
                .extent([[0, 0], [width, height]])
                .on(""end"", brushed);

            svgScatter.append(""g"")
                .attr(""class"", ""brush"")
                .call(brushing);

            function brushed(event) {
                const selection = event.selection;
                if (selection) {
                    const [x0, x1] = selection;
                    const selectedCountries = new Set();
                    dots.classed('selected', d => {
                        const isSelected = x0 <= xScatter(d['Domestic Consumption']) && xScatter(d['Domestic Consumption']) <= x1;
                        if (isSelected) selectedCountries.add(d.Country);
                        return isSelected;
                    });
                    bars.classed('hover', d => selectedCountries.has(d.Country));
                }
            }
        });
    </script>
</body>
</html>
```",Correct,118,119
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Domestic Consumption , while the pie chart represents the distribution of Exports.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Visualization</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 2;
        }
        .arc {
            stroke: #fff;
        }
    </style>
</head>
<body>
    <svg id=""lineChart"" width=""800"" height=""400""></svg>
    <svg id=""pieChart"" width=""400"" height=""400""></svg>
    
    <script>
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            // Process Domestic Consumption for line chart
            data.forEach(d => {
                d['Domestic Consumption'] = +d['Domestic Consumption'];
                d['Year'] = +d['Year'];
            });

            const lineSVG = d3.select(""#lineChart""),
                margin = {top: 20, right: 30, bottom: 30, left: 40},
                width = +lineSVG.attr(""width"") - margin.left - margin.right,
                height = +lineSVG.attr(""height"") - margin.top - margin.bottom;

            const x = d3.scaleLinear().domain(d3.extent(data, d => d['Year'])).range([margin.left, width - margin.right]);
            const y = d3.scaleLinear().domain([0, d3.max(data, d => d['Domestic Consumption'])]).range([height - margin.bottom, margin.top]);

            const line = d3.line()
                .x(d => x(d['Year']))
                .y(d => y(d['Domestic Consumption']));

            lineSVG.append(""g"")
                .attr(""transform"", `translate(${margin.left}, ${margin.top})`)
                .append(""path"")
                .datum(data)
                .attr(""fill"", ""none"")
                .attr(""class"", ""line"")
                .attr(""d"", line);

            lineSVG.append(""g"")
                .attr(""transform"", `translate(${margin.left}, ${height - margin.bottom})`)
                .call(d3.axisBottom(x));

            lineSVG.append(""g"")
                .attr(""transform"", `translate(${margin.left}, 0)`)
                .call(d3.axisLeft(y));

            // Process Exports for pie chart
            let exportData = data.map(d => ({ country: d['Country'], exports: +d['Exports'] }));
            const pieData = d3.pie().value(d => d.exports)(exportData);
            const radius = Math.min(400, 400) / 2;

            const color = d3.scaleOrdinal(d3.schemeCategory10);
            const pieSVG = d3.select(""#pieChart"").attr(""transform"", `translate(200, 200)`);

            const arc = d3.arc()
                .innerRadius(0)
                .outerRadius(radius);

            pieSVG.selectAll("".arc"")
                .data(pieData)
                .enter().append(""g"")
                .attr(""class"", ""arc"")
                .append(""path"")
                .attr(""d"", arc)
                .attr(""fill"", (d) => color(d.data.country));
        });
    </script>
</body>
</html>
```",Correct,119,120
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Domestic Consumption , while the pie chart represents the distribution of Exports. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Exports for the selected group.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Data Visualization</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke-width: 2px;
        }
        .arc {
            stroke-width: 1px;
        }
        .tooltip {
            position: absolute;
            text-align: center;
            width: 60px;
            padding: 8px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <svg width=""400"" height=""400""></svg>
    <script>
        const margin = {top: 20, right: 30, bottom: 30, left: 40};
        const width = 800 - margin.left - margin.right;
        const height = 400 - margin.top - margin.bottom;

        const svgLine = d3.select(""svg"").append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const svgPie = d3.select(""svg:nth-of-type(2)"").append(""g"")
            .attr(""transform"", `translate(200,200)`);

        const line = d3.line()
            .x(d => x(d.Year))
            .y(d => y(d.DomesticConsumption));
        
        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);
        let color = d3.scaleOrdinal(d3.schemeCategory10);
        const pie = d3.pie().value(d => d.Exports);
        const arc = d3.arc().innerRadius(0).outerRadius(100);
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            data.forEach(d => {
                d.Year = +d.Year;
                d.DomesticConsumption = +d.DomesticConsumption;
                d.Exports = +d.Exports;
            });

            const filteredData = data.filter(d => !isNaN(d.DomesticConsumption));
            x.domain(d3.extent(filteredData, d => d.Year));
            y.domain([0, d3.max(filteredData, d => d.DomesticConsumption)]);

            svgLine.append(""g"")
                .attr(""class"", ""x-axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svgLine.append(""g"")
                .attr(""class"", ""y-axis"")
                .call(d3.axisLeft(y));

            svgLine.append(""path"")
                .datum(filteredData)
                .attr(""class"", ""line"")
                .attr(""d"", line)
                .attr(""stroke"", ""blue"");

            let tooltip = d3.select(""body"").append(""div"").attr(""class"", ""tooltip"").style(""opacity"", 0);
            
            svgLine.selectAll("".dot"")
                .data(filteredData)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => x(d.Year))
                .attr(""cy"", d => y(d.DomesticConsumption))
                .attr(""r"", 5)
                .on(""mouseover"", function(event, d) {
                    tooltip.transition().duration(200).style(""opacity"", .9);
                    tooltip.html(d.Year + ""<br/>"" + d.DomesticConsumption)
                        .style(""left"", (event.pageX + 5) + ""px"")
                        .style(""top"", (event.pageY - 28) + ""px"");
                })
                .on(""mouseout"", function() {
                    tooltip.transition().duration(500).style(""opacity"", 0);
                });

            let pieData = filteredData.map(d => ({Country: d.Country, Exports: d.Exports}));
            const updatePie = (data) => {
                svgPie.selectAll(""*"").remove();
                const arcs = pie(data);
                const g = svgPie.selectAll("".arc"")
                    .data(arcs)
                    .enter().append(""g"")
                    .attr(""class"", ""arc"");

                g.append(""path"")
                    .attr(""d"", arc)
                    .attr(""fill"", (d, i) => color(i));

                g.append(""text"")
                    .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                    .attr(""dy"", "".35em"")
                    .text(d => d.data.Country);
            };

            updatePie(pieData);

            // Brush function
            const brush = d3.brushX()
                .extent([[0, 0], [width, height]])
                .on(""end"", brushed);

            svgLine.append(""g"")
                .attr(""class"", ""brush"")
                .call(brush);

            function brushed(event) {
                if (!event.selection) return;
                const [x0, x1] = event.selection;
                const selectedData = filteredData.filter(d => x(d.Year) >= x0 && x(d.Year) <= x1);
                const pieSelection = selectedData.map(d => ({Country: d.Country, Exports: d.Exports}));
                updatePie(pieSelection.length > 0 ? pieSelection : pieData);
            }
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,120,121
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to draw a brushable Scatterplot Matrix around the four attributes of the given data. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Scatterplot Matrix</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .scatter {
            cursor: pointer;
        }
        .highlight {
            stroke: red;
            stroke-width: 2;
        }
        .cell {
            padding: 20px;
        }
    </style>
</head>
<body>
    <script>
        const margin = {top: 20, right: 20, bottom: 20, left: 20};
        const width = 300 - margin.left - margin.right;
        const height = 300 - margin.top - margin.bottom;

        const attributes = [""Domestic Consumption"", ""Exports"", ""Import Price"", ""Export Price"", ""Total Production""];

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            attributes.forEach(attr => {
                data.forEach(d => {
                    d[attr] = +d[attr];
                });
            });

            const svg = d3.select(""body"").append(""svg"")
                .attr(""width"", (width + margin.left + margin.right) * attributes.length)
                .attr(""height"", (height + margin.top + margin.bottom) * attributes.length);

            const cell = svg.selectAll("".cell"")
                .data(d3.cross(attributes, attributes))
                .enter().append(""g"")
                .attr(""class"", ""cell"")
                .attr(""transform"", (d, i) => {
                    const x = (i % attributes.length) * (width + margin.left + margin.right);
                    const y = Math.floor(i / attributes.length) * (height + margin.top + margin.bottom);
                    return `translate(${x},${y})`;
                });

            cell.append(""rect"")
                .attr(""class"", ""border"")
                .attr(""width"", width)
                .attr(""height"", height)
                .style(""fill"", ""none"")
                .style(""stroke"", ""#ccc"");

            const xScale = d3.scaleLinear().domain([0, d3.max(data, d => d[""Domestic Consumption""])]).range([0, width]);
            const yScale = d3.scaleLinear().domain([0, d3.max(data, d => d[""Exports""])]).range([height, 0]);

            cell.each(function ([xAttr, yAttr]) {
                const cell = d3.select(this);
                const x = d3.scaleLinear().domain([0, d3.max(data, d => d[xAttr])]).range([0, width]);
                const y = d3.scaleLinear().domain([0, d3.max(data, d => d[yAttr])]).range([height, 0]);

                cell.append(""g"")
                    .attr(""transform"", `translate(0,${height})`)
                    .call(d3.axisBottom(x));

                cell.append(""g"")
                    .call(d3.axisLeft(y));
                    
                cell.selectAll("".scatter"")
                    .data(data)
                    .enter().append(""circle"")
                    .attr(""class"", ""scatter"")
                    .attr(""cx"", d => x(d[xAttr]))
                    .attr(""cy"", d => y(d[yAttr]))
                    .attr(""r"", 3)
                    .on(""mouseover"", function (event, d) {
                        d3.select(this).classed(""highlight"", true);
                    })
                    .on(""mouseout"", function (d) {
                        d3.select(this).classed(""highlight"", false);
                    });
            });

            const brush = d3.brush()
                .on(""start brush end"", brushed);

            let brushSelection;

            function brushed(event) {
                const selection = event.selection;
                const sx0 = selection ? selection[0][0] : 0;
                const sy0 = selection ? selection[0][1] : 0;
                const sx1 = selection ? selection[1][0] : width;
                const sy1 = selection ? selection[1][1] : height;

                svg.selectAll("".scatter"").classed(""highlight"", function (d) {
                    const x = d3.scaleLinear().domain([0, d3.max(data, d => d[""Domestic Consumption""])]).range([0, width]);
                    const y = d3.scaleLinear().domain([0, d3.max(data, d => d[""Exports""])]).range([height, 0]);
                    return x(d[""Domestic Consumption""]) >= sx0 && x(d[""Domestic Consumption""]) <= sx1 && y(d[""Exports""]) >= sy0 && y(d[""Exports""]) <= sy1;
                });

                if (event.type === ""end"") {
                    brushSelection = selection;
                }
            }

            cell.append(""g"")
                .attr(""class"", ""brush"")
                .call(brush)
                .selectAll(""rect"")
                .attr(""fill"", ""none"")
                .attr(""pointer-events"", ""all"")
                .attr(""cursor"", ""crosshair"");
        });
    </script>
</body>
</html>
```",Correct,121,122
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a brushable Scatterplot that visualizes the relationship between Domestic Consumption and Exports. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Scatterplot</title>
    <style>
        .scatterplot {
            font: 10px sans-serif;
        }
        .axis path, .axis line {
            fill: none;
            shape-rendering: crispEdges;
        }
        .brush .selection {
            fill: lightblue;
            stroke: steelblue;
        }
        table {
            border-collapse: collapse;
            margin-top: 20px;
        }
        th, td {
            border: 1px solid black;
            padding: 5px;
        }
    </style>
</head>
<body>
    <h1>Coffee Consumption and Exports Scatterplot</h1>
    <svg class=""scatterplot"" width=""800"" height=""500""></svg>
    <table id=""table"">
        <thead>
            <tr>
                <th>Year</th>
                <th>Country</th>
                <th>Domestic Consumption</th>
                <th>Exports</th>
                <th>Import Price</th>
                <th>Export Price</th>
                <th>Total Production</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>

    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <script>
        const margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = 800 - margin.left - margin.right,
              height = 500 - margin.top - margin.bottom;

        const svg = d3.select("".scatterplot"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        const xAxis = d3.axisBottom(x);
        const yAxis = d3.axisLeft(y);

        const brush = d3.brushXY()
            .extent([[0, 0], [width, height]])
            .on(""brush end"", brushed);

        svg.append(""g"")
            .attr(""class"", ""x axis"")
            .attr(""transform"", `translate(0,${height})`);

        svg.append(""g"")
            .attr(""class"", ""y axis"");

        svg.append(""g"")
            .attr(""class"", ""brush"")
            .call(brush);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            data.forEach(d => {
                d['Domestic Consumption'] = +d['Domestic Consumption'];
                d['Exports'] = +d['Exports'];
            });

            x.domain(d3.extent(data, d => d['Domestic Consumption'])).nice();
            y.domain(d3.extent(data, d => d['Exports'])).nice();

            svg.select("".x.axis"")
                .call(xAxis);
            svg.select("".y.axis"")
                .call(yAxis);

            const points = svg.append(""g"")
                .attr(""class"", ""points"")
                .selectAll(""circle"")
                .data(data)
                .enter().append(""circle"")
                .attr(""cx"", d => x(d['Domestic Consumption']))
                .attr(""cy"", d => y(d['Exports']))
                .attr(""r"", 3.5)
                .attr(""fill"", ""steelblue"");

            function brushed(event) {
                const selection = d3.event.selection;
                if (selection === null) {
                    svg.selectAll("".points circle"").classed(""selected"", false);
                    updateTable([]);
                    return;
                }

                const [[x0, y0], [x1, y1]] = selection;
                const selectedPoints = data.filter(d => {
                    const cx = x(d['Domestic Consumption']);
                    const cy = y(d['Exports']);
                    return x0 <= cx && cx <= x1 && y0 <= cy && cy <= y1;
                });
                
                svg.selectAll("".points circle"")
                    .classed(""selected"", d => selectedPoints.includes(d));

                updateTable(selectedPoints.slice(0, 20));
            }

            function updateTable(selectedData) {
                const tbody = d3.select(""#table tbody"");
                tbody.selectAll(""tr"").remove();

                const rows = tbody.selectAll(""tr"")
                    .data(selectedData)
                    .enter().append(""tr"");

                rows.selectAll(""td"")
                    .data(d => [d['Year'], d['Country'], d['Domestic Consumption'], d['Exports'], d['Import Price'], d['Export Price'], d['Total Production']])
                    .enter().append(""td"")
                    .text(d => d);
            }
        });
    </script>
</body>
</html>
```",Initialization Error,122,123
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a horizontal Bar Chart that shows Country and Domestic Consumption, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Bar Chart</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path,
        .axis--x line {
            display: none;
        }
        .minimap {
            position: absolute;
            top: 20px;
            right: 20px;
            width: 150px;
            height: 100px;
            overflow: hidden;
            border: 1px solid black;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <div class=""minimap""></div>

    <script>
        const svg = d3.select(""svg""),
            margin = {top: 20, right: 30, bottom: 40, left: 40},
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom;

        const x = d3.scaleLinear().range([0, width]),
            y = d3.scaleBand().range([height, 0]).padding(0.1);

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            data.forEach(d => {
                d[""Domestic Consumption""] = +d[""Domestic Consumption""];
            });

            x.domain([0, d3.max(data, d => d[""Domestic Consumption""])]);
            y.domain(data.map(d => d.Country));

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            g.selectAll("".bar"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", 0)
                .attr(""y"", d => y(d.Country))
                .attr(""width"", d => x(d[""Domestic Consumption""]))
                .attr(""height"", y.bandwidth());

            // Mini Map
            const miniMap = d3.select("".minimap"").append(""svg"")
                .attr(""width"", 150)
                .attr(""height"", 100);

            const miniX = d3.scaleLinear().range([0, 150]),
                miniY = d3.scaleBand().range([100, 0]).padding(0.1);

            miniX.domain([0, d3.max(data, d => d[""Domestic Consumption""])]);
            miniY.domain(data.map(d => d.Country));

            miniMap.append(""g"")
                .selectAll(""rect"")
                .data(data)
                .enter().append(""rect"")
                .attr(""x"", 0)
                .attr(""y"", d => miniY(d.Country))
                .attr(""width"", d => miniX(d[""Domestic Consumption""]))
                .attr(""height"", miniY.bandwidth())
                .attr(""fill"", ""lightgray"");
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,123,124
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            display: flex;
        }
        #scatterplot {
            width: 50%;
            height: 400px;
        }
        #barchart {
            width: 50%;
            height: 400px;
        }
    </style>
</head>
<body>
    <div id=""main"">
        <div id=""scatterplot""></div>
        <div id=""barchart""></div>
    </div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const years = [];
                const consumption = [];
                const totalProduction = [];
                const countries = [];

                rows.forEach(row => {
                    const cols = row.split(',');
                    if (cols.length >= 7) {
                        years.push(cols[0]);
                        countries.push(cols[1]);
                        consumption.push(parseFloat(cols[2]));
                        totalProduction.push(parseFloat(cols[6]));
                    }
                });

                const scatterplot = echarts.init(document.getElementById('scatterplot'));
                const barchart = echarts.init(document.getElementById('barchart'));

                scatterplot.setOption({
                    title: {
                        text: 'Scatterplot of Domestic Consumption vs Total Production'
                    },
                    tooltip: {},
                    xAxis: {
                        name: 'Total Production',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Domestic Consumption',
                        type: 'value'
                    },
                    series: [{
                        symbolSize: 10,
                        data: consumption.map((val, index) => [totalProduction[index], val]),
                        type: 'scatter'
                    }]
                });

                barchart.setOption({
                    title: {
                        text: 'Bar Chart of Domestic Consumption by Country'
                    },
                    tooltip: {},
                    xAxis: {
                        data: countries,
                        name: 'Country'
                    },
                    yAxis: {
                        name: 'Domestic Consumption'
                    },
                    series: [{
                        name: 'Consumption',
                        type: 'bar',
                        data: consumption
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,124,125
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            display: flex;
        }
        #scatterPlot {
            width: 50%;
            height: 600px;
        }
        #barChart {
            width: 50%;
            height: 600px;
        }
    </style>
</head>
<body>
    <div id=""main"">
        <div id=""scatterPlot""></div>
        <div id=""barChart""></div>
    </div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const csvData = data.split('\n').slice(1).map(row => {
                    const cols = row.split(',');
                    return {
                        Year: cols[0],
                        Country: cols[1],
                        DomesticConsumption: parseFloat(cols[2]),
                        Exports: parseFloat(cols[3]),
                        ImportPrice: parseFloat(cols[4]),
                        ExportPrice: parseFloat(cols[5]),
                        TotalProduction: parseFloat(cols[6]),
                    };
                }).filter(row => !isNaN(row.DomesticConsumption));
                
                const scatterData = csvData.map(item => ({
                    name: item.Country,
                    value: [item.DomesticConsumption, item.TotalProduction]
                }));

                const barData = csvData.map(item => item.Country);
                const barValues = csvData.map(item => item.DomesticConsumption);

                const scatterChart = echarts.init(document.getElementById('scatterPlot'));
                const barChart = echarts.init(document.getElementById('barChart'));

                scatterChart.setOption({
                    title: { text: 'Coffee Consumption Scatterplot' },
                    tooltip: {},
                    xAxis: { name: 'Domestic Consumption' },
                    yAxis: { name: 'Total Production' },
                    series: [{
                        name: 'Coffee Data',
                        type: 'scatter',
                        data: scatterData,
                        itemStyle: {
                            color: '#69b3a2'
                        }
                    }]
                });

                barChart.setOption({
                    title: { text: 'Coffee Consumption Bar Chart' },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: barData,
                        name: 'Country',
                        axisLabel: { interval: 0, rotate: 45 }
                    },
                    yAxis: { name: 'Domestic Consumption' },
                    series: [{
                        name: 'Domestic Consumption',
                        type: 'bar',
                        data: barValues
                    }]
                });

                // Interaction: Highlight bars based on scatter selection
                scatterChart.on('brush', params => {
                    const selectedCountries = params.batch[0].areas[0].coordRange;
                    const selectedValues = new Set(scatterData.filter(item => 
                        item.value[0] >= selectedCountries[0][0] &&
                        item.value[0] <= selectedCountries[1][0] &&
                        item.value[1] >= selectedCountries[0][1] &&
                        item.value[1] <= selectedCountries[1][1]
                    ).map(item => item.name));

                    const pieData = barData.map((country, index) => ({
                        country,
                        value: barValues[index],
                        selected: selectedValues.has(country)
                    }));

                    barChart.setOption({
                        series: [{
                            data: pieData.map(item => ({
                                value: item.value,
                                name: item.country,
                                itemStyle: {
                                    color: item.selected ? '#FF5722' : '#69b3a2'
                                }
                            }))
                        }]
                    });
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,125,126
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Domestic Consumption , while the pie chart represents the distribution of Exports.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""lineChart"" style=""width: 100%; height: 400px;""></div>
    <div id=""pieChart"" style=""width: 100%; height: 400px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const years = [];
                const domesticConsumption = [];
                const exportsData = {};
                
                lines.forEach(line => {
                    const [year, country, domestic, exports] = line.split(',');
                    if (year && country && domestic && exports) {
                        years.push(year);
                        domesticConsumption.push(parseFloat(domestic));
                        exportsData[country] = (exportsData[country] || 0) + parseFloat(exports);
                    }
                });

                const lineChart = echarts.init(document.getElementById('lineChart'));
                lineChart.setOption({
                    title: { text: 'Domestic Coffee Consumption Over Years' },
                    tooltip: {},
                    xAxis: { data: years },
                    yAxis: {},
                    series: [{
                        name: 'Domestic Consumption',
                        type: 'line',
                        data: domesticConsumption
                    }]
                });

                const pieChart = echarts.init(document.getElementById('pieChart'));
                pieChart.setOption({
                    title: { text: 'Coffee Exports Distribution by Country', subtext: 'in metric tons', left: 'center' },
                    tooltip: {
                        trigger: 'item'
                    },
                    series: [{
                        type: 'pie',
                        radius: '50%',
                        data: Object.entries(exportsData).map(([country, value]) => ({ name: country, value })),
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,126,127
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Domestic Consumption , while the pie chart represents the distribution of Exports. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Exports for the selected group.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Visualization</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
</head>
<body>
    <div id=""lineChart"" style=""width: 100%; height: 400px;""></div>
    <div id=""pieChart"" style=""width: 100%; height: 400px;""></div>

    <script>
        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv');
            const data = await response.text();
            return parseCSV(data);
        }

        function parseCSV(data) {
            const lines = data.split('\n').slice(1);
            const result = lines.map(line => {
                const [Year, Country, DomesticConsumption, Exports] = line.split(',');
                return { Year: Year, Country: Country, DomesticConsumption: +DomesticConsumption, Exports: +Exports };
            }).filter(item => item.Year);
            return result;
        }

        function prepareLineData(data) {
            const years = [...new Set(data.map(item => item.Year))];
            const domesticConsumption = years.map(year => {
                return data.filter(item => item.Year === year).reduce((sum, item) => sum + item.DomesticConsumption, 0);
            });
            return { years, domesticConsumption };
        }

        function setupLineChart(data) {
            const { years, domesticConsumption } = prepareLineData(data);
            const lineChart = echarts.init(document.getElementById('lineChart'));

            const option = {
                title: { text: 'Domestic Consumption Over Years' },
                xAxis: { type: 'category', data: years },
                yAxis: { type: 'value' },
                series: [{
                    name: 'Domestic Consumption',
                    type: 'line',
                    data: domesticConsumption,
                    emphasis: {
                        focus: 'series'
                    }
                }],
                toolbox: {
                    feature: {
                        saveAsImage: {}
                    }
                }
            };

            lineChart.setOption(option);
            lineChart.on('click', function (params) {
                if (params.componentType === 'series') {
                    updatePieChart(data, params.name);
                }
            });
        }

        function preparePieData(data, selectedYear) {
            const filteredData = data.filter(item => item.Year === selectedYear);
            const pieData = filteredData.map(item => ({ name: item.Country, value: item.Exports }));
            return pieData;
        }

        function updatePieChart(data, selectedYear) {
            const pieChart = echarts.init(document.getElementById('pieChart'));
            const pieData = preparePieData(data, selectedYear);

            const option = {
                title: { text: 'Exports Distribution', subtext: selectedYear, left: 'center' },
                series: [{
                    name: 'Exports',
                    type: 'pie',
                    radius: '50%',
                    data: pieData,
                    emphasis: {
                        itemStyle: {
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowColor: 'rgba(0, 0, 0, 0.5)'
                        }
                    }
                }]
            };

            pieChart.setOption(option);
        }

        async function init() {
            const data = await fetchData();
            setupLineChart(data);
        }

        init();
    </script>
</body>
</html>
```",Unexpected Execution Result,127,128
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Domestic Consumption,Exports,Import Price,Export Price, and Total Production. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        .chart-container {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            grid-template-rows: repeat(5, 1fr);
            gap: 10px;
            height: 100vh;
        }
        .chart {
            border: 1px solid #ccc;
        }
    </style>
</head>
<body>

<div class=""chart-container"" id=""scatterplotMatrix"">
    <div class=""chart"" id=""domesticConsumption""></div>
    <div class=""chart"" id=""exports""></div>
    <div class=""chart"" id=""importPrice""></div>
    <div class=""chart"" id=""exportPrice""></div>
    <div class=""chart"" id=""totalProduction""></div>
    <div class=""chart"" id=""exports_d""></div>
    <div class=""chart"" id=""importPrice_d""></div>
    <div class=""chart"" id=""exportPrice_d""></div>
    <div class=""chart"" id=""totalProduction_d""></div>
    <div class=""chart"" id=""importPrice_d2""></div>
    <div class=""chart"" id=""exportPrice_d2""></div>
    <div class=""chart"" id=""totalProduction_d2""></div>
    <div class=""chart"" id=""exportPrice_d2""></div>
    <div class=""chart"" id=""totalProduction_d3""></div>
    <div class=""chart"" id=""totalProduction_d3b""></div>
    <div class=""chart"" id=""totalProduction_d3b2""></div>
</div>

<script>
    async function fetchData() {
        const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv');
        const text = await response.text();
        const data = text.split('\n').slice(1).map(line => {
            const [year, country, domesticConsumption, exports, importPrice, exportPrice, totalProduction] = line.split(',');
            return {
                year: year.trim(),
                country: country.trim(),
                domesticConsumption: parseFloat(domesticConsumption.trim()),
                exports: parseFloat(exports.trim()),
                importPrice: parseFloat(importPrice.trim()),
                exportPrice: parseFloat(exportPrice.trim()),
                totalProduction: parseFloat(totalProduction.trim())
            };
        }).filter(d => !isNaN(d.domesticConsumption)); // Filter out invalid entries

        return data;
    }

    function initScatterplot(data) {
        const matrix = [
            ['Domestic Consumption', 'Exports', 'Import Price', 'Export Price', 'Total Production'],
            ['Exports', 'Exports', 'Import Price', 'Export Price', 'Total Production'],
            ['Import Price', 'Exports', 'Exports', 'Export Price', 'Total Production'],
            ['Export Price', 'Exports', 'Import Price', 'Export Price', 'Total Production'],
            ['Total Production', 'Exports', 'Import Price', 'Export Price', 'Total Production']
        ];
        
        const charts = [
            'domesticConsumption',
            'exports',
            'importPrice',
            'exportPrice',
            'totalProduction'
        ];

        charts.forEach((chartId, rowIndex) => {
            const chartDom = document.getElementById(chartId);
            const chart = echarts.init(chartDom);

            const otherCharts = charts.filter((_, idx) => idx !== rowIndex);
            const dimensions = ['domesticConsumption', 'exports', 'importPrice', 'exportPrice', 'totalProduction'];
            
            const option = {
                title: { text: `${chartId.replace(/([A-Z])/g, ' $1').trim()}` },
                tooltip: {},
                xAxis: { type: 'value' },
                yAxis: { type: 'value' },
                series: [{
                    type: 'scatter',
                    data: data.map(d => [d[dimensions[rowIndex]], d[dimensions[rowIndex + 1]]]),
                    itemStyle: {
                        color: '#5470C6',
                    },
                }],
                brush: {
                    type: ['scatter'],
                },
            };

            chart.setOption(option);
            chart.on('brushSelected', function (params) {
                const brushInfo = params.batch[0].areas;
                const selectedData = [];

                brushInfo.forEach(area => {
                    area.dataIndex.forEach(index => {
                        selectedData.push(data[index]);
                    });
                });

                otherCharts.forEach(otherChartId => {
                    const otherChart = echarts.getInstanceByDom(document.getElementById(otherChartId));
                    const otherOption = otherChart.getOption();
                    otherOption.series[0].itemStyle.color = '#ccc';
                    otherOption.series[0].data = data.map(d => d[dimensions[rowIndex]]);

                    if (selectedData.length) {
                        otherOption.series[0].data = data.map(d => ({
                            value: [d[dimensions[rowIndex]], d[dimensions[rowIndex + 1]]],
                            itemStyle: { color: selectedData.includes(d) ? '#FF6F61' : '#ccc' },
                        }));
                    }
                    otherChart.setOption(otherOption);
                });
            });
        });
    }

    fetchData().then(data => initScatterplot(data));
</script>

</body>
</html>
```",Initialization Error,128,129
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a brushable Scatterplot that visualizes the relationship between Domestic Consumption and Exports. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 70%;
            height: 600px;
            float: left;
        }
        #data-table {
            width: 25%;
            height: 600px;
            overflow: auto;
            float: right;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <div id=""data-table""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const rawData = rows.map(row => {
                    const cols = row.split(',');
                    return {
                        Year: cols[0],
                        Country: cols[1],
                        DomesticConsumption: parseFloat(cols[2]),
                        Exports: parseFloat(cols[3]),
                        ImportPrice: parseFloat(cols[4]),
                        ExportPrice: parseFloat(cols[5]),
                        TotalProduction: parseFloat(cols[6]),
                    };
                }).filter(row => !isNaN(row.DomesticConsumption) && !isNaN(row.Exports));

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);
                const option = {
                    title: {
                        text: 'Domestic Consumption vs Exports'
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'value',
                        name: 'Domestic Consumption'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Exports'
                    },
                    series: [{
                        type: 'scatter',
                        data: rawData.map(item => [item.DomesticConsumption, item.Exports]),
                        markPoint: {
                            data: rawData.map((item, index) => ({
                                coord: [item.DomesticConsumption, item.Exports],
                                value: item.Country,
                                itemStyle: {
                                    opacity: 0.5
                                }
                            })),
                            emphasis: {
                                label: {
                                    show: true,
                                    formatter: param => param.data.value
                                }
                            }
                        }
                    }],
                    brush: {
                        toolbox: ['rect', 'clear'],
                        xAxisIndex: 0,
                        yAxisIndex: 0
                    }
                };

                myChart.setOption(option);

                myChart.on('brushSelected', params => {
                    const selectedPoints = [];
                    const brushInfo = params.batch[0].areas[0];
                    const start = brushInfo.range[0];
                    const end = brushInfo.range[1];

                    rawData.forEach((item, index) => {
                        if (item.DomesticConsumption >= start[0] && item.DomesticConsumption <= end[0] && 
                            item.Exports >= start[1] && item.Exports <= end[1]) {
                            selectedPoints.push(item);
                        }
                    });

                    const table = document.getElementById('data-table');
                    table.innerHTML = '<table><tr><th>Year</th><th>Country</th><th>Domestic Consumption</th><th>Exports</th></tr>' +
                        selectedPoints.slice(0, 20).map(point => 
                            `<tr><td>${point.Year}</td><td>${point.Country}</td><td>${point.DomesticConsumption}</td><td>${point.Exports}</td></tr>`
                        ).join('') +
                        '</table>';
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,129,130
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a horizontal Bar Chart that shows Country and Domestic Consumption, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 80%; height: 600px; float: left;""></div>
    <div id=""minimap"" style=""width: 20%; height: 600px; float: right;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const parsedData = data.split('\n').slice(1).map(row => {
                    const columns = row.split(',');
                    return {
                        Year: columns[0],
                        Country: columns[1],
                        DomesticConsumption: parseFloat(columns[2]) || 0
                    };
                }).filter(row => row.Country);
                
                const countries = parsedData.map(item => item.Country);
                const domesticConsumption = parsedData.map(item => item.DomesticConsumption);
                
                const mainChart = echarts.init(document.getElementById('main'));
                const miniMapChart = echarts.init(document.getElementById('minimap'));

                const mainOption = {
                    title: {
                        text: 'Coffee Domestic Consumption by Country',
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'value',
                    },
                    yAxis: {
                        type: 'category',
                        data: countries,
                    },
                    series: [{
                        name: 'Domestic Consumption',
                        type: 'bar',
                        data: domesticConsumption,
                        itemStyle: {
                            color: '#008B45'
                        }
                    }]
                };

                const miniOption = {
                    title: {
                        text: 'Minimap',
                        left: 'center'
                    },
                    xAxis: {
                        type: 'value',
                        show: false
                    },
                    yAxis: {
                        type: 'category',
                        data: countries,
                        show: false
                    },
                    series: [{
                        name: 'Domestic Consumption',
                        type: 'bar',
                        data: domesticConsumption,
                        itemStyle: {
                            color: '#ff7f50'
                        }
                    }]
                };

                mainChart.setOption(mainOption);
                miniMapChart.setOption(miniOption);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,130,131
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npmvega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npmvega-lite@5.7.0""></script>
    <script src=""https://cdn.jsdelivr.net/npmvega-embed@6.20.1""></script>
    <style>
        #vis {
            display: flex;
        }
        #scatter {
            width: 50%;
        }
        #bar {
            width: 50%;
        }
    </style>
</head>
<body>
    <div id=""vis"">
        <div id=""scatter""></div>
        <div id=""bar""></div>
    </div>

    <script>
        const scatterSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatter plot showing Domestic Consumption vs Total Production."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Domestic Consumption"",
                    ""type"": ""quantitative"",
                    ""title"": ""Domestic Consumption (kg)""
                },
                ""y"": {
                    ""field"": ""Total Production"",
                    ""type"": ""quantitative"",
                    ""title"": ""Total Production (kg)""
                },
                ""color"": {
                    ""field"": ""Country"",
                    ""type"": ""nominal""
                }
            }
        };

        const barSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A bar chart showing Total Production by Country."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Country"",
                    ""type"": ""nominal"",
                    ""title"": ""Country""
                },
                ""y"": {
                    ""field"": ""Total Production"",
                    ""type"": ""quantitative"",
                    ""title"": ""Total Production (kg)""
                }
            }
        };

        vegaEmbed('#scatter', scatterSpec);
        vegaEmbed('#bar', barSpec);
    </script>
</body>
</html>
```",Unexpected Initial Result,131,132
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2.6.12""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.6.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2""></script>
    <style>
        #scatterplot, #barchart {
            display: inline-block;
            width: 48%;
            height: 400px;
        }
    </style>
</head>
<body>
    <div id=""scatterplot""></div>
    <div id=""barchart""></div>

    <script>
        const scatterplotSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""transform"": [
                {""filter"": {""selection"": ""brush""}},
                {""create"": ""yearMonth"", ""type"": ""datetime"", ""field"": ""Year""}
            ],
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {""field"": ""Domestic Consumption"", ""type"": ""quantitative""},
                ""y"": {""field"": ""Total Production"", ""type"": ""quantitative""},
                ""color"": {""field"": ""Country"", ""type"": ""nominal""},
                ""tooltip"": [
                    {""field"": ""Country""},
                    {""field"": ""Year""},
                    {""field"": ""Domestic Consumption""},
                    {""field"": ""Total Production""}
                ]
            },
            ""selection"": {
                ""brush"": {
                    ""type"": ""interval"",
                    ""encodings"": [""x"", ""y""]
                }
            }
        };

        const barchartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""transform"": [
                {""filter"": {""selection"": ""brush""}}
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {""field"": ""Country"", ""type"": ""nominal"", ""axis"": {""labelAngle"": -45}},
                ""y"": {""field"": ""Domestic Consumption"", ""type"": ""quantitative""},
                ""color"": {""field"": ""Country"", ""type"": ""nominal"", ""scale"": {""scheme"": ""category10""}},
                ""tooltip"": [
                    {""field"": ""Country""},
                    {""field"": ""Domestic Consumption""}
                ]
            }
        };

        vegaEmbed('#scatterplot', scatterplotSpec).then(function(result) {
            // Customize the brush and linking functionality
            const view = result.view;
            view.addSignalListener('brush', function(name, value) {
                const selectedCountries = value.map(d => d.Country);
                const update = {
                    filter: {'field': 'Country', 'oneOf': selectedCountries}
                };
                view.setState(update);
            });
        });

        vegaEmbed('#barchart', barchartSpec);
    </script>
</body>
</html>
```",Initialization Error,132,133
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Domestic Consumption , while the pie chart represents the distribution of Exports.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Visualizations</title>
    <script src=""https://cdn.jsdelivr.net/npmvega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npmvega-lite@5.9.0""></script>
    <script src=""https://cdn.jsdelivr.net/npmvega-embed@6.20.0""></script>
</head>
<body>
    <div id=""line-chart""></div>
    <div id=""pie-chart""></div>

    <script>
        const lineChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A line chart showing the trend of Domestic Consumption of Coffee."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": {""field"": ""Year"", ""type"": ""temporal""},
                ""y"": {""field"": ""Domestic Consumption"", ""type"": ""quantitative""},
                ""color"": {""field"": ""Country"", ""type"": ""nominal""}
            }
        };

        const pieChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A pie chart showing the distribution of Exports of Coffee."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""mark"": ""arc"",
            ""encoding"": {
                ""theta"": {""field"": ""Exports"", ""type"": ""quantitative""},
                ""color"": {""field"": ""Country"", ""type"": ""nominal""}
            }
        };

        vegaEmbed('#line-chart', lineChartSpec);
        vegaEmbed('#pie-chart', pieChartSpec);
    </script>
</body>
</html>
```",Initialization Error,133,134
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Domestic Consumption , while the pie chart represents the distribution of Exports. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Exports for the selected group.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.24.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.3.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.18.0""></script>
    <style>
        .chart {
            width: 600px;
            margin: auto;
        }
    </style>
</head>
<body>
    <div class=""chart"" id=""linechart""></div>
    <div class=""chart"" id=""piechart""></div>

    <script>
        const dataUrl = 'https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv';

        const lineChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""Line chart of Domestic Coffee Consumption over the years."",
            ""data"": {
                ""url"": dataUrl
            },
            ""transform"": [
                {
                    ""filter"": ""datum['Domestic Consumption'] !== null""
                }
            ],
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Year"",
                    ""type"": ""temporal"",
                    ""title"": ""Year""
                },
                ""y"": {
                    ""field"": ""Domestic Consumption"",
                    ""type"": ""quantitative"",
                    ""title"": ""Domestic Consumption""
                },
                ""tooltip"": [
                    {""field"": ""Country"", ""type"": ""nominal""},
                    {""field"": ""Domestic Consumption"", ""type"": ""quantitative""}
                ]
            },
            ""selection"": {
                ""brush"": {
                    ""type"": ""interval"",
                    ""encodings"": [""x""]
                }
            }
        };

        const pieChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""Pie chart of Exports for selected Countries."",
            ""data"": {
                ""url"": dataUrl,
                ""transform"": [
                    {
                        ""filter"": {
                            ""param"": ""brush"",
                            ""empty"": false
                        }
                    }
                ]
            },
            ""mark"": ""arc"",
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Exports"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Country"",
                    ""type"": ""nominal"",
                    ""legend"": {
                        ""title"": ""Countries""
                    }
                },
                ""tooltip"": [
                    {""field"": ""Country"", ""type"": ""nominal""},
                    {""field"": ""Exports"", ""type"": ""quantitative""}
                ]
            }
        };

        vegaEmbed('#linechart', lineChartSpec).then(() => {
            // Create a listener for the brush selection
            const view = new vega.View(vega.parse(lineChartSpec))
                .renderer('canvas')
                .initialize('#linechart')
                .hover()
                .run();

            view.addSignalListener('brush', () => {
                vegaEmbed('#piechart', pieChartSpec);
            });
        });

        vegaEmbed('#piechart', pieChartSpec);
    </script>
</body>
</html>
```",Initialization Error,134,135
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Domestic Consumption,Exports,Import Price,Export Price, and Total Production. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatterplot matrix of coffee consumption data."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""fold"": [""Domestic Consumption"", ""Exports"", ""Import Price"", ""Export Price"", ""Total Production""],
                    ""as"": [""variable"", ""value""]
                }
            ],
            ""facet"": {
                ""row"": {
                    ""field"": ""variable""
                },
                ""column"": {
                    ""field"": ""variable""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""value"",
                    ""type"": ""quantitative""
                },
                ""y"": {
                    ""field"": ""value"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""condition"": {
                        ""selection"": ""brush"",
                        ""field"": ""Country"",
                        ""type"": ""nominal""
                    },
                    ""value"": ""lightgray""
                },
                ""tooltip"": [
                    {""field"": ""Year"", ""type"": ""quantitative""},
                    {""field"": ""Country"", ""type"": ""nominal""},
                    {""field"": ""value"", ""type"": ""quantitative""}
                ]
            },
            ""selection"": {
                ""brush"": {
                    ""type"": ""interval"",
                    ""encodings"": [""x"", ""y""]
                }
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            // Successful rendering
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,135,136
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a brushable Scatterplot that visualizes the relationship between Domestic Consumption and Exports. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.7.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
    <style>
        #scatterplot {
            width: 70%;
            display: inline-block;
        }
        #table {
            width: 25%;
            display: inline-block;
            vertical-align: top;
        }
    </style>
</head>
<body>
    <div id=""scatterplot""></div>
    <div id=""table""></div>
    
    <script>
        const dataUrl = ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"";

        const scatterPlotSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatter plot of Domestic Consumption vs Exports of Coffee."",
            ""data"": {
                ""url"": dataUrl
            },
            ""transform"": [
                {
                    ""filter"": ""datum['Domestic Consumption'] != null && datum['Exports'] != null""
                },
                {
                    ""calculate"": ""datum['Domestic Consumption']"",
                    ""as"": ""Domestic_Consumption""
                },
                {
                    ""calculate"": ""datum['Exports']"",
                    ""as"": ""Exports""
                }
            ],
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Domestic_Consumption"",
                    ""type"": ""quantitative"",
                    ""title"": ""Domestic Consumption (kg per capita)""
                },
                ""y"": {
                    ""field"": ""Exports"",
                    ""type"": ""quantitative"",
                    ""title"": ""Exports (kg)""
                },
                ""color"": {
                    ""field"": ""Country"",
                    ""type"": ""nominal"",
                    ""title"": ""Country""
                },
                ""tooltip"": [
                    {""field"": ""Country"", ""type"": ""nominal""},
                    {""field"": ""Domestic Consumption"", ""type"": ""quantitative""},
                    {""field"": ""Exports"", ""type"": ""quantitative""}
                ]
            },
            ""selection"": {
                ""brush"": {
                    ""type"": ""interval"",
                    ""encodings"": [""x"", ""y""]
                }
            }
        };

        vegaEmbed('#scatterplot', scatterPlotSpec).then(function(result) {
            // create a table that shows selected points
            const view = result.view;
            view.addEventListener(""mouseover"", function(event) {
                const selectedData = view.data('brush').filter(d => d).slice(0, 20);
                let tableHtml = ""<table border='1'><tr><th>Country</th><th>Domestic Consumption</th><th>Exports</th></tr>"";
                selectedData.forEach(d => {
                    tableHtml += `<tr><td>${d.Country}</td><td>${d['Domestic Consumption']}</td><td>${d.Exports}</td></tr>`;
                });
                tableHtml += ""</table>"";
                document.getElementById('table').innerHTML = tableHtml;
            });
        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Initial Result,136,137
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a horizontal Bar Chart that shows Country and Domestic Consumption, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv\\n\\nThe data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"" },
            ""vconcat"": [
                {
                    ""width"": 400,
                    ""height"": 300,
                    ""mark"": ""bar"",
                    ""encoding"": {
                        ""x"": {
                            ""field"": ""Domestic Consumption"",
                            ""type"": ""quantitative""
                        },
                        ""y"": {
                            ""field"": ""Country"",
                            ""type"": ""nominal"",
                            ""sort"": ""-x""
                        }
                    }
                },
                {
                    ""width"": 100,
                    ""height"": 100,
                    ""mark"": ""bar"",
                    ""encoding"": {
                        ""x"": {
                            ""field"": ""Domestic Consumption"",
                            ""type"": ""quantitative""
                        },
                        ""y"": {
                            ""field"": ""Country"",
                            ""type"": ""nominal"",
                            ""sort"": ""-x""
                        }
                    },
                    ""config"": {
                        ""view"": { ""stroke"": null }
                    }
                }
            ]
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Unexpected Initial Result,137,138
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Country, Year, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Scatterplot that visualizes the relationship between Domestic Consumption and Exports.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Country, Year, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Scatterplot</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .scatterplot {
            font: 10px sans-serif;
        }
        .axis path,
        .axis line {
            fill: none;
            shape-rendering: crispEdges;
        }
        .dot {
            fill: steelblue;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600"" class=""scatterplot""></svg>
    <script>
        const svg = d3.select(""svg""),
            margin = {top: 20, right: 30, bottom: 30, left: 40},
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            data.forEach(d => {
                d.Domestic_Consumption = +d[""Domestic Consumption""];
                d.Exports = +d.Exports;
            });

            const x = d3.scaleLinear()
                .domain(d3.extent(data, d => d.Domestic_Consumption)).nice()
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain(d3.extent(data, d => d.Exports)).nice()
                .range([height, 0]);

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            g.selectAll("".dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => x(d.Domestic_Consumption))
                .attr(""cy"", d => y(d.Exports))
                .attr(""r"", 3.5);
        });
    </script>
</body>
</html>
```",Correct,138,139
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Country, Year, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Line Chart that visualizes the trend of Domestic Consumption over the Year for each Country.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Country, Year, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Line Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke-width: 1.5px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = {top: 20, right: 30, bottom: 30, left: 40};
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            data.forEach(d => {
                d['Domestic Consumption'] = +d['Domestic Consumption'];
                d['Year'] = +d['Year'];
            });

            const countries = Array.from(new Set(data.map(d => d.Country)));

            const x = d3.scaleLinear()
                .domain(d3.extent(data, d => d.Year))
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Domestic Consumption'])])
                .range([height, 0]);

            const line = d3.line()
                .x(d => x(d.Year))
                .y(d => y(d['Domestic Consumption']));

            countries.forEach(country => {
                const countryData = data.filter(d => d.Country === country);
                g.append(""path"")
                    .datum(countryData)
                    .attr(""class"", ""line"")
                    .attr(""d"", line)
                    .style(""stroke"", d3.schemeCategory10[countries.indexOf(country) % 10]) // Use color scheme
                    .on(""mouseover"", function() {
                        d3.select(this).style(""stroke-width"", 3);
                    })
                    .on(""mouseout"", function() {
                        d3.select(this).style(""stroke-width"", 1.5);
                    });
            });

            g.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x).ticks(10));

            g.append(""g"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Correct,139,140
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Country, Year, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Bar Chart that visualizes the Domestic Consumption for each Country in 2017.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Country, Year, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(function(data) {
            // Filter data for the year 2017
            const filteredData = data.filter(d => d.Year == 2017).map(d => ({
                Country: d.Country,
                DomesticConsumption: +d[""Domestic Consumption""]
            }));

            const svg = d3.select(""svg""),
                margin = {top: 20, right: 30, bottom: 40, left: 40},
                width = +svg.attr(""width"") - margin.left - margin.right,
                height = +svg.attr(""height"") - margin.top - margin.bottom,
                g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

            const x = d3.scaleBand()
                .domain(filteredData.map(d => d.Country))
                .range([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([0, d3.max(filteredData, d => d.DomesticConsumption)])
                .nice()
                .range([height, 0]);

            g.append(""g"")
                .selectAll("".bar"")
                .data(filteredData)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => x(d.Country))
                .attr(""y"", d => y(d.DomesticConsumption))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d.DomesticConsumption));

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Correct,140,141
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Country, Year, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Pie Chart that visualizes the proportion of Domestic Consumption contributed by each Country in 2017.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Country, Year, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Pie Chart</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .pie-chart {
            max-width: 600px;
            margin: auto;
        }
        .arc text {
            font-size: 12px;
            fill: white;
        }
    </style>
</head>
<body>
    <div class=""pie-chart""></div>
    <script>
        const width = 600;
        const height = 600;
        const radius = Math.min(width, height) / 2;

        const svg = d3.select("".pie-chart"")
            .append(""svg"")
            .attr(""width"", width)
            .attr(""height"", height)
            .append(""g"")
            .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            const filteredData = data.filter(d => d.Year === ""2017"");

            const pieData = d3.pie()
                .value(d => +d[""Domestic Consumption""])(filteredData);

            const arc = d3.arc()
                .outerRadius(radius - 10)
                .innerRadius(0);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            svg.selectAll("".arc"")
                .data(pieData)
                .enter().append(""g"")
                .attr(""class"", ""arc"")
                .append(""path"")
                .attr(""d"", arc)
                .attr(""fill"", (d, i) => color(i));

            svg.selectAll("".arc"")
                .append(""text"")
                .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                .attr(""dy"", "".35em"")
                .text(d => filteredData[d.index].Country);
        });
    </script>
</body>
</html>
```",Correct,141,142
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Country, Year, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Donut Chart that visualizes the distribution of Domestic Consumption among Country in 2017.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Country, Year, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Donut Chart</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .arc {
            stroke: #fff;
        }
    </style>
</head>
<body>
    <h2>Coffee Domestic Consumption by Country in 2017</h2>
    <svg width=""600"" height=""600""></svg>
    
    <script>
        const width = 600;
        const height = 600;
        const margin = {top: 20, right: 20, bottom: 20, left: 20};
        
        const radius = Math.min(width, height) / 2 - margin.top;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            const filteredData = data.filter(d => d.Year === ""2017"");
            
            const consumptionData = filteredData.map(d => ({country: d.Country, consumption: +d[""Domestic Consumption""]}));

            const color = d3.scaleOrdinal(d3.schemeCategory10);
            const pie = d3.pie().value(d => d.consumption);
            const arc = d3.arc().innerRadius(radius * 0.6).outerRadius(radius);

            const arcs = svg.selectAll("".arc"")
                .data(pie(consumptionData))
                .enter()
                .append(""g"")
                .attr(""class"", ""arc"");

            arcs.append(""path"")
                .attr(""d"", arc)
                .attr(""fill"", (d, i) => color(i));

            arcs.append(""text"")
                .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                .attr(""dy"", ""0.35em"")
                .text(d => d.data.country);
        });
    </script>
</body>
</html>
```",Correct,142,143
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Country, Year, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Coxcomb Chart(polar area chart) to compare the Domestic Consumption of different Country in 2017.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Country, Year, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coxcomb Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .arc {
            stroke: #fff;
        }
    </style>
</head>
<body>
    <script>
        const width = 800;
        const height = 800;
        const radius = Math.min(width, height) / 2;

        const svg = d3.select(""body"").append(""svg"")
            .attr(""width"", width)
            .attr(""height"", height)
          .append(""g"")
            .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            const filteredData = data.filter(d => d.Year == ""2017"");

            filteredData.forEach(d => {
                d[""Domestic Consumption""] = +d[""Domestic Consumption""];
            });

            const pie = d3.pie()
                .value(d => d[""Domestic Consumption""]);

            const arc = d3.arc()
                .innerRadius(0)
                .outerRadius(d => radius * d.data[""Domestic Consumption""] / d3.max(filteredData, d => d[""Domestic Consumption""]));

            const arcs = pie(filteredData);

            svg.selectAll("".arc"")
                .data(arcs)
              .enter().append(""path"")
                .attr(""class"", ""arc"")
                .attr(""d"", arc)
                .attr(""fill"", (d, i) => d3.schemeCategory10[i % 10])
                .attr(""stroke"", ""#fff"")
                .attr(""transform"", ""rotate(90)""); // Rotate to start at the top
        });
    </script>
</body>
</html>
```",Correct,143,144
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Country, Year, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Radar Chart to compare the Domestic Consumption of different Country in 2017.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Country, Year, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Radar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .radarChart {
            position: relative;
            width: 600px;
            height: 600px;
        }
        .circle {
            fill: none;
            stroke: steelblue;
            stroke-width: 2px;
        }
        .axis {
            stroke: #b0b0b0;
            stroke-width: 1px;
        }
        .label {
            font-size: 10px;
        }
    </style>
</head>
<body>
    <svg class=""radarChart""></svg>
    <script>
        const width = 600, height = 600;
        const radius = Math.min(width, height) / 2;

        const angleSlice = (Math.PI * 2) / 5;
        const Color = d3.scaleOrdinal(d3.schemeCategory10);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            data = data.filter(d => d.Year == 2017);
            const countries = data.map(d => d.Country);
            const domesticConsumption = data.map(d => +d[""Domestic Consumption""]);

            const radarData = countries.map((country, i) => {
                return { axis: country, value: domesticConsumption[i] };
            });

            const svg = d3.select("".radarChart"")
                .attr(""width"", width)
                .attr(""height"", height)
                .append(""g"")
                .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

            const radarLine = d3.lineRadial()
                .radius(d => radius * (d.value / d3.max(domesticConsumption)))
                .angle((d, i) => i * angleSlice);

            const axes = svg.selectAll("".axis"")
                .data(radarData)
                .enter().append(""g"")
                .attr(""class"", ""axis"")
                .attr(""transform"", (d, i) => `rotate(${i * (360 / radarData.length)})`);

            axes.append(""line"")
                .attr(""x1"", 0)
                .attr(""y1"", 0)
                .attr(""x2"", 0)
                .attr(""y2"", -radius)
                .attr(""class"", ""axis"");

            axes.append(""text"")
                .attr(""class"", ""label"")
                .attr(""x"", 0)
                .attr(""y"", -radius - 10)
                .attr(""text-anchor"", ""middle"")
                .text(d => d.axis);

            svg.append(""path"")
                .datum(radarData)
                .attr(""d"", radarLine)
                .attr(""class"", ""circle"");
        });
    </script>
</body>
</html>
```",Correct,144,145
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Country, Year, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Streamgraph that visualizes the changes of Domestic Consumption over the Year for each Country.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Country, Year, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Streamgraph</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .stream {
            opacity: 0.6;
        }
        .stream:hover {
            opacity: 1;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>

    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 20, bottom: 20, left: 20},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const color = d3.scaleOrdinal(d3.schemeCategory10);

        const stack = d3.stack()
            .keys([]);

        const area = d3.area()
            .x(d => x(d.data.Year))
            .y0(d => y(d[0]))
            .y1(d => y(d[1]));

        const x = d3.scaleBand()
            .range([0, width])
            .padding(0.1);
        
        const y = d3.scaleLinear()
            .range([height, 0]);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            const countries = Array.from(new Set(data.map(d => d.Country)));
            
            countries.forEach(country => {
                const countryData = data.filter(d => d.Country === country);
                const consumptionData = countryData.map(d => ({ Year: +d.Year, Domestic_Consumption: +d['Domestic Consumption'] }));
                stack.keys(countries);
            });

            const layers = stack(countries.map(country => ({
                Country: country,
                values: data.filter(d => d.Country === country).map(d => ({ Year: +d.Year, Domestic_Consumption: +d['Domestic Consumption'] }))
            })));

            x.domain(data.map(d => d.Year));
            y.domain([0, d3.max(layers, layer => d3.max(layer, d => d[1]))]);

            svg.selectAll("".layer"")
                .data(layers)
                .enter().append(""path"")
                .attr(""class"", ""layer"")
                .attr(""d"", area)
                .style(""fill"", (d, i) => color(i))
                .attr(""transform"", ""translate(0,"" + margin.top + "")"");
        });
    </script>
</body>
</html>
```",Initialization Error,145,146
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Country, Year, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Slopegraph to compare the Domestic Consumption between two selected Years for each Country.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Country, Year, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Slopegraph</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line {
            stroke: #ccc;
            stroke-width: 2;
        }
        .circle {
            fill: steelblue;
        }
        .axis {
            font-size: 10px;
        }
        .country-label {
            font-size: 10px;
            text-anchor: end;
        }
    </style>
</head>
<body>
    <svg width=""960"" height=""500""></svg>
    <script>
        const margin = {top: 50, right: 80, bottom: 50, left: 80};
        const width = 960 - margin.left - margin.right;
        const height = 500 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            const selectedYears = [2010, 2020];
            const filteredData = data.filter(d => selectedYears.includes(+d.Year));

            const countries = [...new Set(filteredData.map(d => d.Country))];

            const consumptionData = countries.map(country => {
                const countryData = filteredData.filter(d => d.Country === country);
                return {
                    Country: country,
                    Year1: +countryData.find(d => d.Year == selectedYears[0])['Domestic Consumption'],
                    Year2: +countryData.find(d => d.Year == selectedYears[1])['Domestic Consumption']
                };
            });

            const x = d3.scaleLinear()
                .domain([0, d3.max(consumptionData, d => Math.max(d.Year1, d.Year2))])
                .range([0, width]);

            const y = d3.scaleBand()
                .domain(consumptionData.map(d => d.Country))
                .range([0, height])
                .padding(0.1);

            svg.append(""g"")
                .attr(""class"", ""x-axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""y-axis"")
                .call(d3.axisLeft(y));

            svg.selectAll("".line"")
                .data(consumptionData)
                .enter().append(""line"")
                .attr(""class"", ""line"")
                .attr(""x1"", d => x(d.Year1))
                .attr(""x2"", d => x(d.Year2))
                .attr(""y1"", d => y(d.Country) + y.bandwidth() / 2)
                .attr(""y2"", d => y(d.Country) + y.bandwidth() / 2);

            svg.selectAll("".circle"")
                .data(consumptionData)
                .enter().append(""circle"")
                .attr(""class"", ""circle"")
                .attr(""cx"", d => x(d.Year1))
                .attr(""cy"", d => y(d.Country) + y.bandwidth() / 2)
                .attr(""r"", 4);

            svg.selectAll("".circle"")
                .data(consumptionData)
                .enter().append(""circle"")
                .attr(""class"", ""circle"")
                .attr(""cx"", d => x(d.Year2))
                .attr(""cy"", d => y(d.Country) + y.bandwidth() / 2)
                .attr(""r"", 4);
            
            svg.selectAll("".country-label"")
                .data(consumptionData)
                .enter().append(""text"")
                .attr(""class"", ""country-label"")
                .attr(""x"", d => x(d.Year1) - 5)
                .attr(""y"", d => y(d.Country) + y.bandwidth() / 2)
                .text(d => d.Country)
                .attr(""dy"", "".35em"");
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,146,147
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Country, Year, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Heatmap that visualizes the Domestic Consumption across Country and Years.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Country, Year, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Heatmap</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .cell {
            stroke: #ccc;
        }
        .cell:hover {
            stroke: #000;
        }
        .axis {
            font: 10px sans-serif;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script>
        const margin = { top: 50, right: 10, bottom: 30, left: 50 },
            width = +d3.select(""svg"").attr(""width"") - margin.left - margin.right,
            height = +d3.select(""svg"").attr(""height"") - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            const countries = Array.from(new Set(data.map(d => d.Country))),
                years = Array.from(new Set(data.map(d => d.Year)));

            const colorScale = d3.scaleSequential(d3.interpolateYlGnBu)
                .domain([0, d3.max(data, d => +d[""Domestic Consumption""])]);

            const x = d3.scaleBand()
                .domain(years)
                .range([0, width])
                .padding(0.01);

            const y = d3.scaleBand()
                .domain(countries)
                .range([height, 0])
                .padding(0.01);

            data.forEach(d => {
                d[""Domestic Consumption""] = +d[""Domestic Consumption""];
            });

            svg.append(""g"")
                .selectAll("".cell"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""cell"")
                .attr(""x"", d => x(d.Year))
                .attr(""y"", d => y(d.Country))
                .attr(""width"", x.bandwidth())
                .attr(""height"", y.bandwidth())
                .attr(""fill"", d => colorScale(d[""Domestic Consumption""]));

            svg.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""y axis"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Correct,147,148
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Country, Year, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Stacked Bar Chart that visualizes the composition of Domestic Consumption by Country in 2017.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Country, Year, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Stacked Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill-opacity: 0.7;
        }
        .axis--x path {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>
    <script>
        const svg = d3.select(""svg""),
            margin = { top: 20, right: 30, bottom: 40, left: 40 },
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            data = data.filter(d => d.Year === '2017');
            const countries = data.map(d => d.Country);
            const consumption = data.map(d => +d[""Domestic Consumption""]);

            // Stacking data
            const stackedData = countries.map((country, i) => ({
                country,
                value: consumption[i]
            }));

            const x = d3.scaleBand()
                .domain(countries)
                .range([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([0, d3.max(stackedData, d => d.value)])
                .nice()
                .range([height, 0]);

            g.append(""g"")
                .selectAll("".bar"")
                .data(stackedData)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => x(d.country))
                .attr(""y"", d => y(d.value))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d.value))
                .attr(""fill"", (d, i) => d3.schemeCategory10[i % 10]);

            g.append(""g"")
                .attr(""class"", ""axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis--y"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,148,149
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Country, Year, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Horizontal Bar Chart that visualizes the Domestic Consumption for each Country in 2017.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Country, Year, Domestic Consumption,Exports,Import Price,Export Price,Total Production",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption 2017</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis-label {
            font-size: 14px;
        }
        .x-axis path,
        .x-axis line {
            fill: none;
            shape-rendering: crispEdges;
        }
        .y-axis path,
        .y-axis line {
            fill: none;
            shape-rendering: crispEdges;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 40, left: 100},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"").then(data => {
            const filteredData = data.filter(d => d.Year == 2017).map(d => ({
                Country: d.Country,
                DomesticConsumption: +d[""Domestic Consumption""]
            }));

            const x = d3.scaleLinear()
                .domain([0, d3.max(filteredData, d => d.DomesticConsumption)])
                .range([0, width]);

            const y = d3.scaleBand()
                .domain(filteredData.map(d => d.Country))
                .range([0, height])
                .padding(0.1);

            g.append(""g"")
                .attr(""class"", ""x-axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""y-axis"")
                .call(d3.axisLeft(y));

            g.selectAll("".bar"")
                .data(filteredData)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", 0)
                .attr(""y"", d => y(d.Country))
                .attr(""width"", d => x(d.DomesticConsumption))
                .attr(""height"", y.bandwidth());
        });
    </script>
</body>
</html>
```",Correct,149,150
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Scatterplot that visualizes the relationship between Domestic Consumption and Exports.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint:  You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const domesticConsumption = [];
                const exports = [];

                lines.forEach(line => {
                    const cols = line.split(',');
                    if (cols.length >= 4) {
                        domesticConsumption.push(parseFloat(cols[2]));
                        exports.push(parseFloat(cols[3]));
                    }
                });

                const option = {
                    title: {
                        text: 'Domestic Consumption vs Exports of Coffee'
                    },
                    tooltip: {},
                    xAxis: {
                        name: 'Domestic Consumption'
                    },
                    yAxis: {
                        name: 'Exports'
                    },
                    series: [{
                        symbolSize: 10,
                        data: domesticConsumption.map((dc, i) => [dc, exports[i]]),
                        type: 'scatter'
                    }]
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,150,151
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Line Chart that visualizes the trend of Domestic Consumption over the Year for each Country.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint:  You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Trend</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const countryData = {};

                lines.forEach(line => {
                    const [year, country, domesticConsumption] = line.split(',');
                    if (!countryData[country]) {
                        countryData[country] = { years: [], consumption: [] };
                    }
                    countryData[country].years.push(year);
                    countryData[country].consumption.push(parseFloat(domesticConsumption));
                });

                const series = Object.keys(countryData).map(country => ({
                    name: country,
                    type: 'line',
                    data: countryData[country].consumption
                }));

                const option = {
                    title: {
                        text: 'Coffee Domestic Consumption Trend by Country'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    legend: {
                        data: Object.keys(countryData)
                    },
                    xAxis: {
                        type: 'category',
                        data: countryData[Object.keys(countryData)[0]].years // assuming all countries have the same years
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: series
                };

                const myChart = echarts.init(document.getElementById('main'));
                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,151,152
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Bar Chart that visualizes the Domestic Consumption for each Country in 2017.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint:  You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1);
            const consumptionData = {};

            rows.forEach(row => {
                const cols = row.split(',');
                if (cols[0] === '2017') {
                    const country = cols[1];
                    const consumption = parseFloat(cols[2]);
                    consumptionData[country] = consumption;
                }
            });

            const countries = Object.keys(consumptionData);
            const domesticConsumption = Object.values(consumptionData);

            const myChart = echarts.init(document.getElementById('main'));
            myChart.setOption({
                title: {
                    text: 'Domestic Coffee Consumption by Country (2017)',
                },
                tooltip: {},
                xAxis: {
                    type: 'category',
                    data: countries,
                    axisLabel: {
                        interval: 0,
                        rotate: 30,
                    },
                },
                yAxis: {
                    type: 'value',
                },
                series: [{
                    name: 'Domestic Consumption',
                    type: 'bar',
                    data: domesticConsumption,
                }],
            });
        });
    </script>
</body>
</html>
```",Correct,152,153
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Pie Chart that visualizes the proportion of Domestic Consumption contributed by each Country in 2017.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint:  You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Pie Chart</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.2/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 600px;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(text => {
                const data = text.split('\n').slice(1);
                const domesticConsumptionData = data
                    .map(row => {
                        const cols = row.split(',');
                        return { year: cols[0], country: cols[1], domesticConsumption: parseFloat(cols[2]) };
                    })
                    .filter(item => item.year === '2017');

                const totalConsumption = domesticConsumptionData.reduce((sum, item) => sum + item.domesticConsumption, 0);
                const seriesData = domesticConsumptionData.map(item => ({
                    name: item.country,
                    value: (item.domesticConsumption / totalConsumption) * 100 // Convert to percentage
                }));

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);
                const option = {
                    title: {
                        text: 'Domestic Coffee Consumption by Country in 2017',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    series: [{
                        name: 'Countries',
                        type: 'pie',
                        radius: '50%',
                        data: seriesData,
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }]
                };
                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,153,154
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Donut Chart that visualizes the distribution of Domestic Consumption among Country in 2017.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint:  You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Donut Chart of Coffee Consumption in 2017</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 600px;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n');
                const result = {};
                lines.slice(1).forEach(line => {
                    const [year, country, domesticConsumption] = line.split(',');
                    if (year === '2017') {
                        result[country] = parseFloat(domesticConsumption);
                    }
                });

                const chartData = Object.keys(result).map(country => ({
                    name: country,
                    value: result[country]
                }));

                const chart = echarts.init(document.getElementById('main'));

                const option = {
                    title: {
                        text: 'Coffee Domestic Consumption by Country in 2017',
                        subtext: 'Source: Coffee Consumption Data',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    legend: {
                        orient: 'vertical',
                        left: 'left'
                    },
                    series: [
                        {
                            name: 'Domestic Consumption',
                            type: 'pie',
                            innerRadius: '50%',
                            radius: '70%',
                            data: chartData,
                            emphasis: {
                                itemStyle: {
                                    shadowBlur: 10,
                                    shadowOffsetX: 0,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            },
                            label: {
                                formatter: '{b}: {d}%'
                            }
                        }
                    ]
                };

                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,154,155
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Coxcomb Chart(polar area chart) to compare the Domestic Consumption of different Country in 2017.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint:  You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coxcomb Chart - Coffee Consumption 2017</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 800px;height:600px;""></div>
    <script>
        async function createChart() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv');
            const data = await response.text();
            const lines = data.split('\n').slice(1);
            const consumptionData = [];
            const countries = [];

            lines.forEach(line => {
                const [year, country, domesticConsumption] = line.split(',');
                if (year === '2017') {
                    countries.push(country);
                    consumptionData.push(parseFloat(domesticConsumption));
                }
            });

            const chartDom = document.getElementById('main');
            const myChart = echarts.init(chartDom);
            const option = {
                tooltip: {
                    trigger: 'item'
                },
                legend: {
                    orient: 'vertical',
                    left: 'left'
                },
                polar: {
                    radius: '80%'
                },
                series: [{
                    type: 'pie',
                    radius: ['40%', '70%'],
                    center: ['50%', '50%'],
                    roseType: 'area',
                    data: countries.map((country, index) => ({
                        name: country,
                        value: consumptionData[index]
                    })),
                    emphasis: {
                        itemStyle: {
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowColor: 'rgba(0, 0, 0, 0.5)'
                        }
                    }
                }]
            };

            myChart.setOption(option);
        }

        createChart();
    </script>
</body>
</html>
```",Initialization Error,155,156
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Radar Chart to compare the Domestic Consumption of different Country in 2017.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint:  You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Radar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""radar-chart"" style=""width: 600px; height: 400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1); // Skip header
                const consumptionData = {};

                rows.forEach(row => {
                    const columns = row.split(',');
                    const year = columns[0].trim();
                    const country = columns[1].trim();
                    const domesticConsumption = parseFloat(columns[2].trim());

                    if (year === '2017') {
                        consumptionData[country] = domesticConsumption;
                    }
                });

                const countries = Object.keys(consumptionData);
                const values = Object.values(consumptionData);

                const chartDom = document.getElementById('radar-chart');
                const myChart = echarts.init(chartDom);
                const option = {
                    title: {
                        text: 'Coffee Domestic Consumption by Country in 2017'
                    },
                    tooltip: {},
                    radar: {
                        indicator: countries.map(country => ({ name: country, max: Math.max(...values) + 10 })),
                    },
                    series: [{
                        type: 'radar',
                        data: [{
                            value: values,
                            name: 'Domestic Consumption (kg per capita)',
                            areaStyle: {}
                        }]
                    }]
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Initialization Error,156,157
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Streamgraph that visualizes the changes of Domestic Consumption over the Year for each Country.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint:  You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Streamgraph</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 600px;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const consumptionData = {};
                const years = new Set();

                rows.forEach(row => {
                    const [year, country, domesticConsumption] = row.split(',');
                    if (!consumptionData[country]) {
                        consumptionData[country] = [];
                    }
                    consumptionData[country].push({ year: parseInt(year), consumption: parseFloat(domesticConsumption) });
                    years.add(parseInt(year));
                });

                const series = Object.keys(consumptionData).map(country => ({
                    name: country,
                    type: 'line',
                    smooth: true,
                    data: yearsArray.map(year => {
                        const entry = consumptionData[country].find(d => d.year === year);
                        return entry ? entry.consumption : 0;
                    }),
                }));

                const yearsArray = Array.from(years).sort((a, b) => a - b);

                const option = {
                    title: {
                        text: 'Coffee Domestic Consumption Over Years',
                    },
                    tooltip: {
                        trigger: 'axis',
                    },
                    legend: {
                        data: Object.keys(consumptionData),
                    },
                    xAxis: {
                        type: 'category',
                        data: yearsArray,
                    },
                    yAxis: {
                        type: 'value',
                    },
                    series: series,
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Initialization Error,157,158
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Slopegraph to compare the Domestic Consumption between two selected Years for each Country.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint:  You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Coffee Consumption Slopegraph</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
<div id=""main"" style=""width: 800px; height: 600px;""></div>
<script>
    fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1);
            const consumptionData = {};

            rows.forEach(row => {
                const [year, country, domesticConsumption] = row.split(',');
                if (!consumptionData[country]) {
                    consumptionData[country] = {};
                }
                consumptionData[country][year] = Number(domesticConsumption);
            });

            const year1 = '2000';
            const year2 = '2020';
            const slopeData = [];

            for (const country in consumptionData) {
                if (consumptionData[country][year1] && consumptionData[country][year2]) {
                    slopeData.push({
                        country: country,
                        year1: consumptionData[country][year1],
                        year2: consumptionData[country][year2]
                    });
                }
            }

            const options = {
                title: {
                    text: 'Coffee Domestic Consumption Slopegraph'
                },
                xAxis: {
                    type: 'value',
                    name: 'Consumption (kg per person)',
                    splitLine: {
                        show: false
                    }
                },
                yAxis: {
                    type: 'category',
                    data: slopeData.map(d => d.country)
                },
                series: [{
                    type: 'line',
                    data: slopeData.map(d => [{value: d.year1, name: d.country}, {value: d.year2, name: d.country}]),
                    lineStyle: {width: 2},
                    itemStyle: {
                        borderWidth: 2
                    },
                    label: {
                        show: true,
                        formatter: params => params.data[0].name
                    }
                }]
            };

            const chart = echarts.init(document.getElementById('main'));
            chart.setOption(options);
        });
</script>
</body>
</html>
```",Unexpected Initial Result,158,159
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Heatmap that visualizes the Domestic Consumption across Country and Years.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint:  You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Heatmap</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv');
            const data = await response.text();
            const lines = data.split('\n').slice(1);
            const countries = new Set();
            const years = new Set();
            const consumptionData = [];

            lines.forEach(line => {
                const parts = line.split(',');
                if (parts.length === 7) {
                    const year = parts[0].trim();
                    const country = parts[1].trim();
                    const consumption = parseFloat(parts[2].trim()) || 0;
                    countries.add(country);
                    years.add(year);
                    consumptionData.push({ year, country, consumption });
                }
            });

            const countryArray = Array.from(countries);
            const yearArray = Array.from(years).sort();

            const heatmapData = consumptionData.map(item => {
                return {
                    name: item.country,
                    value: [yearArray.indexOf(item.year), countryArray.indexOf(item.country), item.consumption]
                };
            });

            return { heatmapData, countryArray, yearArray };
        }

        async function initChart() {
            const { heatmapData, countryArray, yearArray } = await fetchData();

            const chartDom = document.getElementById('main');
            const myChart = echarts.init(chartDom);

            const option = {
                tooltip: {
                    position: 'top'
                },
                grid: {
                    height: '50%',
                    width: '50%',
                    top: '10%'
                },
                xAxis: {
                    type: 'category',
                    data: yearArray,
                    name: 'Year',
                    splitLine: { show: false }
                },
                yAxis: {
                    type: 'category',
                    data: countryArray,
                    name: 'Country',
                    splitLine: { show: false }
                },
                visualMap: {
                    min: 0,
                    max: Math.max(...heatmapData.map(item => item.value[2])),
                    calculable: true,
                    inRange: {
                        color: ['#f5f5f5', '#d9534f']
                    }
                },
                series: [
                    {
                        name: 'Domestic Consumption',
                        type: 'heatmap',
                        data: heatmapData.map(item => item.value),
                        label: {
                            show: true
                        },
                        animation: false
                    }
                ]
            };

            myChart.setOption(option);
        }

        initChart();
    </script>
</body>
</html>
```",Correct,159,160
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint:  You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Stacked Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 800px;height:600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1).filter(line => line);
                const years = [...new Set(lines.map(line => line.split(',')[0]))];
                const countries = [...new Set(lines.map(line => line.split(',')[1]))];
                
                const consumptionData = countries.map(country => {
                    return years.map(year => {
                        const record = lines.find(line => {
                            const [csvYear, csvCountry] = line.split(',');
                            return csvYear === year && csvCountry === country;
                        });
                        return record ? parseFloat(record.split(',')[2]) : 0;
                    });
                });

                const seriesData = countries.map((country, index) => {
                    return {
                        name: country,
                        type: 'bar',
                        stack: 'consumption',
                        data: consumptionData[index],
                    };
                });

                const option = {
                    title: {
                        text: 'Coffee Consumption by Country',
                    },
                    tooltip: {
                        trigger: 'axis',
                    },
                    legend: {
                        data: countries,
                    },
                    xAxis: {
                        type: 'category',
                        data: years,
                    },
                    yAxis: {
                        type: 'value',
                    },
                    series: seriesData,
                };

                const myChart = echarts.init(document.getElementById('main'));
                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,160,161
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Horizontal Bar Chart that visualizes the Domestic Consumption for each Country in 2017.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint:  You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption 2017</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1);
            const countries = [];
            const domesticConsumption = [];

            rows.forEach(row => {
                const cols = row.split(',');
                if (cols[0] === '2017') {
                    countries.push(cols[1]);
                    domesticConsumption.push(parseFloat(cols[2]));
                }
            });

            const chartDom = document.getElementById('chart');
            const myChart = echarts.init(chartDom);
            const option = {
                title: {
                    text: 'Coffee Domestic Consumption by Country (2017)',
                    subtext: 'Source: Coffee Consumption Dataset',
                    left: 'center'
                },
                tooltip: {},
                xAxis: {
                    type: 'value',
                    name: 'Consumption (kg)',
                },
                yAxis: {
                    type: 'category',
                    data: countries,
                },
                series: [{
                    name: 'Domestic Consumption',
                    type: 'bar',
                    data: domesticConsumption,
                    emphasis: {
                        itemStyle: {
                            color: '#FF5733'
                        }
                    }
                }]
            };
            myChart.setOption(option);
        });
    </script>
</body>
</html>
```",Correct,161,162
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Scatterplot that visualizes the relationship between Domestic Consumption and Exports.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">

<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.9.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2""></script>
</head>

<body>
    <div id=""vis""></div>
    <script>
        const spec = {
               ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
               ""description"": ""A scatterplot showing the relationship between Domestic Consumption and Exports."",
               ""data"": {
                   ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
                   ""format"": { ""type"": ""csv"" }
               },
               ""mark"": ""point"",
               ""encoding"": {
                   ""x"": {""field"": ""Domestic Consumption"", ""type"": ""quantitative"", ""title"": ""Domestic Consumption""},
                   ""y"": {""field"": ""Exports"", ""type"": ""quantitative"", ""title"": ""Exports""},
                   ""tooltip"": [
                       {""field"": ""Country"", ""type"": ""nominal"", ""title"": ""Country""},
                       {""field"": ""Year"", ""type"": ""ordinal"", ""title"": ""Year""}
                   ]
               }
           };

        vegaEmbed('#vis', spec)
            .then(result => {
                // Visualization successfully created
            })
            .catch(console.error);
    </script>
</body>

</html>
```",Correct,162,163
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Line Chart that visualizes the trend of Domestic Consumption over the Year for each Country.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Line Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.7.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.23.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A line chart showing Domestic Consumption over the years for each Country."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Year"",
                    ""type"": ""temporal"",
                    ""title"": ""Year""
                },
                ""y"": {
                    ""field"": ""Domestic Consumption"",
                    ""type"": ""quantitative"",
                    ""title"": ""Domestic Consumption (kg per capita)""
                },
                ""color"": {
                    ""field"": ""Country"",
                    ""type"": ""nominal"",
                    ""title"": ""Country""
                }
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            // Access the generated Vega view instance
        }).catch(console.error);
    </script>
</body>
</html>
```",Correct,163,164
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Bar Chart that visualizes the Domestic Consumption for each Country in 2017.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption in 2017</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": { 
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
                ""format"": { ""type"": ""csv"" }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Year == 2017""
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": { ""field"": ""Country"", ""type"": ""nominal"", ""axis"": { ""labelAngle"": -45 } },
                ""y"": { ""field"": ""Domestic Consumption"", ""type"": ""quantitative"" }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Correct,164,165
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Pie Chart that visualizes the proportion of Domestic Consumption contributed by each Country in 2017.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Pie Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Year == '2017'""
                }
            ],
            ""mark"": ""arc"",
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Domestic Consumption"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Country"",
                    ""type"": ""nominal""
                }
            }
        };

        vegaEmbed('#vis', spec).then(result => {
            // Successfully rendered
        }).catch(console.error);
    </script>
</body>
</html>
```",Correct,165,166
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Donut Chart that visualizes the distribution of Domestic Consumption among Country in 2017.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Donut Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>

<div id=""vis""></div>

<script>
    const spec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""description"": ""A Donut chart showing the distribution of Domestic Consumption among countries in 2017."",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
            ""format"": {
                ""type"": ""csv""
            }
        },
        ""transform"": [
            {
                ""filter"": ""datum.Year == 2017""
            },
            {
                ""calculate"": ""datum.Domestic_Consumption"",
                ""as"": ""Consumption""
            }
        ],
        ""mark"": {
            ""type"": ""arc"",
            ""innerRadius"": 50
        },
        ""encoding"": {
            ""theta"": {
                ""field"": ""Consumption"",
                ""type"": ""quantitative""
            },
            ""color"": {
                ""field"": ""Country"",
                ""type"": ""nominal"",
                ""scale"": {
                    ""scheme"": ""category10""
                }
            },
            ""tooltip"": [
                {""field"": ""Country"", ""type"": ""nominal""},
                {""field"": ""Consumption"", ""type"": ""quantitative""}
            ]
        }
    };

    vegaEmbed('#vis', spec);
</script>
</body>
</html>
```",Unexpected Initial Result,166,167
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Coxcomb Chart(polar area chart) to compare the Domestic Consumption of different Country in 2017.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coxcomb Chart of Coffee Consumption</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.4.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""field"": ""Year"",
                        ""equal"": 2017
                    }
                }
            ],
            ""mark"": ""arc"",
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Domestic Consumption"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Country"",
                    ""type"": ""nominal"",
                    ""scale"": { ""scheme"": ""category10"" }
                }
            },
            ""view"": {
                ""stroke"": null
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Initial Result,167,168
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Radar Chart to compare the Domestic Consumption of different Country in 2017.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Radar Chart - Coffee Consumption 2017</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
    <style>
        .radar-area {
            position: relative;
            width: 600px;
            height: 600px;
            margin: auto;
        }
    </style>
</head>
<body>
    <div class=""radar-area"" id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""Radar Chart comparing Domestic Consumption of different countries in 2017."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Year == '2017'""
                }
            ],
            ""mark"": ""point"",
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Country"",
                    ""type"": ""ordinal""
                },
                ""radius"": {
                    ""field"": ""Domestic Consumption"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Country"",
                    ""type"": ""nominal""
                }
            },
            ""view"": {
                ""stroke"": null
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            // Access the Vega view instance and modify it if needed
        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Initial Result,168,169
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Streamgraph that visualizes the changes of Domestic Consumption over the Year for each Country.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Streamgraph</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.7.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.1""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""area"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Year"",
                    ""type"": ""temporal"",
                    ""title"": ""Year""
                },
                ""y"": {
                    ""aggregate"": ""sum"",
                    ""field"": ""Domestic Consumption"",
                    ""type"": ""quantitative"",
                    ""title"": ""Domestic Consumption""
                },
                ""color"": {
                    ""field"": ""Country"",
                    ""type"": ""nominal"",
                    ""title"": ""Country""
                },
                ""tooltip"": [
                    {""field"": ""Country"", ""type"": ""nominal""},
                    {""field"": ""Year"", ""type"": ""temporal""},
                    {""field"": ""Domestic Consumption"", ""type"": ""quantitative""}
                ]
            },
            ""config"": {
                ""layer"": {
                    ""opacity"": 0.8
                }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Correct,169,170
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Slopegraph to compare the Domestic Consumption between two selected Years for each Country.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Slopegraph</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <style>
        #vis {
            width: 800px;
            height: 600px;
        }
    </style>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""or"": [
                            {""field"": ""Year"", ""equal"": 2010},
                            {""field"": ""Year"", ""equal"": 2020}
                        ]
                    }
                },
                {
                    ""window"": [
                        {
                            ""op"": ""rank"", ""as"": ""rank""
                        }
                    ],
                    ""groupby"": [""Country""]
                }
            ],
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Year"", ""type"": ""ordinal"",
                    ""axis"": {""title"": ""Year""}
                },
                ""y"": {
                    ""field"": ""Domestic Consumption"", ""type"": ""quantitative"",
                    ""axis"": {""title"": ""Domestic Consumption""}
                },
                ""color"": {
                    ""field"": ""Country"", ""type"": ""nominal"",
                    ""legend"": {""title"": ""Country""}
                },
                ""tooltips"": [
                    {""field"": ""Country"", ""type"": ""nominal""},
                    {""field"": ""Year"", ""type"": ""ordinal""},
                    {""field"": ""Domestic Consumption"", ""type"": ""quantitative""}
                ]
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            // Successfully embedded
        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Initial Result,170,171
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Heatmap that visualizes the Domestic Consumption across Country and Years.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Heatmap</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.23.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.3.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""rect"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Year"",
                    ""type"": ""ordinal"",
                    ""title"": ""Year""
                },
                ""y"": {
                    ""field"": ""Country"",
                    ""type"": ""ordinal"",
                    ""title"": ""Country""
                },
                ""color"": {
                    ""field"": ""Domestic Consumption"",
                    ""type"": ""quantitative"",
                    ""title"": ""Domestic Consumption (kg)""
                }
            },
            ""width"": 800,
            ""height"": 400,
            ""title"": ""Heatmap of Domestic Coffee Consumption""
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Correct,171,172
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption Stacked Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>

    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A stacked bar chart showing coffee consumption statistics."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Year"",
                    ""type"": ""ordinal"",
                    ""axis"": {
                        ""title"": ""Year""
                    }
                },
                ""y"": {
                    ""aggregate"": ""sum"",
                    ""field"": ""Domestic Consumption"",
                    ""type"": ""quantitative"",
                    ""axis"": {
                        ""title"": ""Consumption (kg per person)""
                    }
                },
                ""color"": {
                    ""field"": ""Country"",
                    ""type"": ""nominal"",
                    ""legend"": {
                        ""title"": ""Country""
                    }
                }
            },
            ""config"": {
                ""background"": ""white""
            }
        };

        vegaEmbed('#vis', spec).then(result => {
            // Visualization rendered successfully
        }).catch(console.error);
    </script>
</body>
</html>
```",Correct,172,173
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production
Your task is to create a Horizontal Bar Chart that visualizes the Domestic Consumption for each Country in 2017.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv

The data table contains the following columns: Year, Country, Domestic Consumption,Exports,Import Price,Export Price,Total Production",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coffee Consumption in 2017</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.23.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.7.1""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8401c4fbc9fa979f342598b002449931/raw/9cb3aef8b2bfe83a01e218193b6e03e8b89b5884/Coffee%2520Consumption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Year == 2017""
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""y"": {
                    ""field"": ""Country"",
                    ""type"": ""nominal"",
                    ""title"": ""Country""
                },
                ""x"": {
                    ""field"": ""Domestic Consumption"",
                    ""type"": ""quantitative"",
                    ""title"": ""Domestic Consumption (kg)""
                }
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            // Visualization rendered successfully
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,173,174
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Units Sold vs Revenue</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter {
            fill: steelblue;
            opacity: 0.7;
        }
        .scatter:hover {
            fill: orange;
        }
        .tooltip {
            position: absolute;
            text-align: center;
            width: 60px;
            padding: 5px;
            font: 12px sans-serif;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = {top: 20, right: 20, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const xScale = d3.scaleLinear().range([0, width]);
        const yScale = d3.scaleLinear().range([height, 0]);

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d['Units Sold'] = +d['Units Sold'];
                d['Revenue'] = +d['Revenue'];
            });

            xScale.domain(d3.extent(data, d => d['Units Sold'])).nice();
            yScale.domain([0, d3.max(data, d => d['Revenue'])]).nice();

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(xScale));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(yScale));

            const tooltip = d3.select(""body"").append(""div"")
                .attr(""class"", ""tooltip"")
                .style(""opacity"", 0);

            g.selectAll("".scatter"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""scatter"")
                .attr(""r"", 4)
                .attr(""cx"", d => xScale(d['Units Sold']))
                .attr(""cy"", d => yScale(d['Revenue']))
                .on(""mouseover"", (event, d) => {
                    tooltip.transition()
                        .duration(200)
                        .style(""opacity"", .9);
                    tooltip.html(`Units Sold: ${d['Units Sold']}<br/>Revenue: $${d['Revenue'].toFixed(2)}`)
                        .style(""left"", (event.pageX + 5) + ""px"")
                        .style(""top"", (event.pageY - 28) + ""px"");
                    d3.select(event.target)
                        .attr(""r"", 8)
                        .attr(""fill"", ""orange"");
                })
                .on(""mouseout"", (event, d) => {
                    tooltip.transition()
                        .duration(500)
                        .style(""opacity"", 0);
                    d3.select(event.target)
                        .attr(""r"", 4)
                        .attr(""fill"", ""steelblue"");
                });
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,174,175
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Units Sold vs Revenue</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter {
            fill: steelblue;
            stroke: white;
            stroke-width: 1.5px;
        }
        .point {
            cursor: pointer;
            opacity: 0.7;
        }
        .selected {
            fill: orange;
        }
    </style>
</head>
<body>

<svg width=""800"" height=""600""></svg>

<script>
    const svg = d3.select(""svg"");
    const margin = {top: 20, right: 30, bottom: 30, left: 40},
          width = +svg.attr(""width"") - margin.left - margin.right,
          height = +svg.attr(""height"") - margin.top - margin.bottom;

    const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
        data.forEach(d => {
            d[""Units Sold""] = +d[""Units Sold""];
            d[""Revenue""] = +d[""Revenue""];
        });

        const x = d3.scaleLinear()
            .domain([0, d3.max(data, d => d[""Units Sold""])])
            .range([0, width]);

        const y = d3.scaleLinear()
            .domain([0, d3.max(data, d => d[""Revenue""])])
            .range([height, 0]);

        g.append(""g"")
            .attr(""transform"", `translate(0,${height})`)
            .call(d3.axisBottom(x));

        g.append(""g"")
            .call(d3.axisLeft(y));

        const points = g.selectAll("".point"")
            .data(data)
            .enter().append(""circle"")
            .attr(""class"", ""point"")
            .attr(""cx"", d => x(d[""Units Sold""]))
            .attr(""cy"", d => y(d[""Revenue""]))
            .attr(""r"", 5)
            .on(""mouseover"", function(event, d) {
                d3.select(this).attr(""r"", 8);
            })
            .on(""mouseout"", function(event, d) {
                d3.select(this).attr(""r"", 5);
            })
            .on(""click"", function(event, d) {
                d3.select(this).classed(""selected"", !d3.select(this).classed(""selected""));
            });

        const brush = d3.brush()
            .extent([[0, 0], [width, height]])
            .on(""brush end"", brushed);

        g.append(""g"")
            .attr(""class"", ""brush"")
            .call(brush);

        function brushed(event) {
            if (event.selection) {
                const [[x0, y0], [x1, y1]] = event.selection;

                points.classed(""selected"", d => {
                    const xValue = x(d[""Units Sold""]);
                    const yValue = y(d[""Revenue""]);
                    return xValue >= x0 && xValue <= x1 && yValue >= y0 && yValue <= y1;
                });
            }
        }
    });
</script>

</body>
</html>
```",Correct,175,176
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot: Units Sold vs Revenue</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter {
            fill: steelblue;
            stroke: white;
            stroke-width: 1.5px;
        }
        .axis {
            font: 10px sans-serif;
        }
        .x.axis path,
        .y.axis path {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        const xAxis = d3.axisBottom(x);
        const yAxis = d3.axisLeft(y);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d['Units Sold'] = +d['Units Sold'];
                d['Revenue'] = +d['Revenue'];
            });

            x.domain(d3.extent(data, d => d['Units Sold'])).nice();
            y.domain(d3.extent(data, d => d['Revenue'])).nice();

            g.append(""g"")
                .attr(""class"", ""axis x-axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(xAxis);

            g.append(""g"")
                .attr(""class"", ""axis y-axis"")
                .call(yAxis);

            g.selectAll("".scatter"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""scatter"")
                .attr(""cx"", d => x(d['Units Sold']))
                .attr(""cy"", d => y(d['Revenue']))
                .attr(""r"", 5);

            svg.call(d3.zoom()
                .scaleExtent([1, 8])
                .on(""zoom"", (event) => {
                    g.attr(""transform"", event.transform);
                    g.select("".x-axis"").call(xAxis.scale(event.transform.rescaleX(x)));
                    g.select("".y-axis"").call(yAxis.scale(event.transform.rescaleY(y)));
                    g.selectAll("".scatter"")
                        .attr(""cx"", d => event.transform.applyX(x(d['Units Sold'])))
                        .attr(""cy"", d => event.transform.applyY(y(d['Revenue'])));
                }));
        });
    </script>
</body>
</html>
```",Correct,176,177
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot: Units Sold vs Revenue</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .tooltip {
            position: absolute;
            text-align: center;
            padding: 5px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
        .scatter circle {
            fill: steelblue;
            stroke: white;
            stroke-width: 1.5px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
            margin = { top: 20, right: 20, bottom: 30, left: 50 },
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom;

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d['Units Sold'] = +d['Units Sold'];
                d['Revenue'] = +d['Revenue'];
            });

            x.domain(d3.extent(data, d => d['Units Sold'])).nice();
            y.domain(d3.extent(data, d => d['Revenue'])).nice();

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            const tooltip = d3.select(""body"").append(""div"")
                .attr(""class"", ""tooltip"")
                .style(""opacity"", 0);

            g.selectAll("".scatter"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""scatter"")
                .attr(""r"", 5)
                .attr(""cx"", d => x(d['Units Sold']))
                .attr(""cy"", d => y(d['Revenue']))
                .on(""mouseover"", function(event, d) {
                    tooltip.transition().duration(200).style(""opacity"", .9);
                    tooltip.html(`Units Sold: ${d['Units Sold']}<br>Revenue: $${d['Revenue']}`)
                        .style(""left"", (event.pageX + 5) + ""px"")
                        .style(""top"", (event.pageY - 28) + ""px"");
                })
                .on(""mouseout"", function() {
                    tooltip.transition().duration(500).style(""opacity"", 0);
                })
                .on(""click"", function(event, d) {
                    window.open(`https://www.google.com/search?q=${d['Units Sold']}+Units+Sold+Revenue`);
                });
        });
    </script>
</body>
</html>
```",Correct,177,178
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot with query widgets showing the Units Sold and Revenue of the given dataset. Add a slider to represent the Date.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot with D3</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter-point {
            fill: steelblue;
            radius: 3px;
        }
        .axis {
            font: 10px sans-serif;
        }
    </style>
</head>
<body>
    <h2>Units Sold vs Revenue</h2>
    <svg width=""800"" height=""400""></svg>
    <input type=""range"" id=""dateSlider"" min=""0"" step=""1"">
    <p id=""sliderValue""></p>

    <script>
        const svg = d3.select(""svg""),
            margin = {top: 20, right: 30, bottom: 40, left: 50},
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d[""Units Sold""] = +d[""Units Sold""];
                d[""Revenue""] = +d[""Revenue""];
                d[""Date""] = new Date(d[""Date""]);
            });

            const x = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Units Sold""])])
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Revenue""])])
                .range([height, 0]);

            const xAxis = d3.axisBottom(x);
            const yAxis = d3.axisLeft(y);

            g.append(""g"")
                .attr(""class"", ""axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(xAxis);

            g.append(""g"")
                .attr(""class"", ""axis"")
                .call(yAxis);

            const points = g.selectAll("".scatter-point"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""scatter-point"")
                .attr(""cx"", d => x(d[""Units Sold""]))
                .attr(""cy"", d => y(d[""Revenue""]))
                .attr(""r"", 3);

            const dates = Array.from(new Set(data.map(d => d[""Date""].toISOString().split('T')[0])));

            const slider = d3.select(""#dateSlider"")
                .attr(""max"", dates.length - 1)
                .attr(""value"", 0);

            slider.on(""input"", function() {
                const index = +this.value;
                const filteredData = data.filter(d => d[""Date""].toISOString().split('T')[0] === dates[index]);

                points
                    .data(filteredData)
                    .attr(""cx"", d => x(d[""Units Sold""]))
                    .attr(""cy"", d => y(d[""Revenue""]))
                    .attr(""r"", 3);
                    
                d3.select(""#sliderValue"").text(`Date: ${dates[index]}`);
            });

            d3.select(""#sliderValue"").text(`Date: ${dates[0]}`);
        });
    </script>
</body>
</html>
```",Correct,178,179
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot showing the Units Sold of Phoenix. Add animated transitions that connect these points using lines in order.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Phoenix Units Sold Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .point {
            fill: blue;
        }
        .line {
            fill: none;
            stroke: orange;
            stroke-width: 2px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = {top: 20, right: 30, bottom: 30, left: 40};
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;
        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            data.forEach(d => {
                if (d['Store Location'] === 'Phoenix') {
                    d['Units Sold'] = +d['Units Sold'];
                    d['Date'] = new Date(d['Date']);
                }
            });

            data = data.filter(d => d['Store Location'] === 'Phoenix');

            const x = d3.scaleTime()
                .domain(d3.extent(data, d => d['Date']))
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Units Sold'])])
                .range([height, 0]);

            const xAxis = d3.axisBottom(x);
            const yAxis = d3.axisLeft(y);

            g.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(xAxis);

            g.append(""g"")
                .attr(""class"", ""y axis"")
                .call(yAxis);

            const lineGenerator = d3.line()
                .x(d => x(d['Date']))
                .y(d => y(d['Units Sold']));

            const linePath = g.append(""path"")
                .datum(data)
                .attr(""class"", ""line"")
                .attr(""d"", lineGenerator)
                .attr(""opacity"", 0)
                .transition()
                .duration(2000)
                .attr(""opacity"", 1);

            const points = g.selectAll("".point"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""point"")
                .attr(""cx"", d => x(d['Date']))
                .attr(""cy"", d => y(d['Units Sold']))
                .attr(""r"", 5)
                .attr(""opacity"", 0)
                .transition()
                .duration(2000)
                .delay((d, i) => i * 200)
                .attr(""opacity"", 1);
        });
    </script>
</body>
</html>
```",Correct,179,180
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Units Sold of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Multi-Series Line Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke-width: 2px;
        }
        .line:hover {
            stroke-width: 4px;
        }
        .axis path,
        .axis line {
            fill: none;
            shape-rendering: crispEdges;
        }
        .tooltip {
            position: absolute;
            text-align: center;
            padding: 5px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <svg width=""960"" height=""500""></svg>
    <script>
        const margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +d3.select(""svg"").attr(""width"") - margin.left - margin.right,
              height = +d3.select(""svg"").attr(""height"") - margin.top - margin.bottom;

        const svg = d3.select(""svg"").append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleTime().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        const line = d3.line()
            .x(d => x(d.Date))
            .y(d => y(d.Units_Sold));

        const color = d3.scaleOrdinal(d3.schemeCategory10);

        const tooltip = d3.select(""body"").append(""div"").attr(""class"", ""tooltip"").style(""opacity"", 0);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            const nestedData = d3.groups(data, d => d[""Store Location""]);
            nestedData.forEach(group => {
                group[1].forEach(d => {
                    d.Date = d3.timeParse(""%Y-%m-%d"")(d.Date);
                    d.Units_Sold = +d[""Units Sold""];
                });
            });

            x.domain(d3.extent(data, d => d3.timeParse(""%Y-%m-%d"")(d.Date)));
            y.domain([0, d3.max(data, d => +d[""Units Sold""])]);

            svg.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""y axis"")
                .call(d3.axisLeft(y));

            const series = svg.selectAll("".series"")
                .data(nestedData)
                .enter().append(""g"")
                .attr(""class"", ""series"");

            series.append(""path"")
                .attr(""class"", ""line"")
                .attr(""d"", d => line(d[1]))
                .style(""stroke"", (d, i) => color(i))
                .on(""mouseover"", function(event, d) {
                    d3.select(this).style(""stroke-width"", ""4px"");
                    tooltip.transition().duration(200).style(""opacity"", .9);
                })
                .on(""mouseout"", function(d) {
                    d3.select(this).style(""stroke-width"", ""2px"");
                    tooltip.transition().duration(500).style(""opacity"", 0);
                })
                .on(""mousemove"", function(event, d) {
                    const [x, y] = d3.pointer(event);
                    tooltip.html(`${d[0]}: ${d[1].length} data points`)
                        .style(""left"", (event.pageX + 5) + ""px"")
                        .style(""top"", (event.pageY - 28) + ""px"");
                });
        });
    </script>
</body>
</html>
```",Initialization Error,180,181
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Bar Chart - Units Sold by Store Location</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }

        .bar:hover {
            fill: orange;
        }

        .axis--x path,
        .axis--x line {
            display: none;
        }

        .axis--y .domain {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleBand().range([0, width]).padding(0.1);
        const y = d3.scaleLinear().range([height, 0]);

        const zoom = d3.zoom()
            .scaleExtent([1, 10])
            .on(""zoom"", (event) => {
                g.attr(""transform"", event.transform);
            });

        svg.call(zoom);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"")
            .then(data => {
                data.forEach(d => {
                    if (d['Date'] === '2021-01-01') {
                        d['Units Sold'] = +d['Units Sold'];
                    }
                });

                const filteredData = data.filter(d => d['Date'] === '2021-01-01');

                x.domain(filteredData.map(d => d['Store Location']));
                y.domain([0, d3.max(filteredData, d => d['Units Sold'])]);

                g.append(""g"")
                    .attr(""class"", ""axis axis--x"")
                    .attr(""transform"", `translate(0,${height})`)
                    .call(d3.axisBottom(x));

                g.append(""g"")
                    .attr(""class"", ""axis axis--y"")
                    .call(d3.axisLeft(y));

                g.selectAll("".bar"")
                    .data(filteredData)
                    .enter().append(""rect"")
                    .attr(""class"", ""bar"")
                    .attr(""x"", d => x(d['Store Location']))
                    .attr(""y"", d => y(d['Units Sold']))
                    .attr(""width"", x.bandwidth())
                    .attr(""height"", d => height - y(d['Units Sold']));
            });
    </script>
</body>
</html>
```",Correct,181,182
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Bar Chart of Units Sold</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
            cursor: pointer;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path,
        .axis--x line {
            display: none;
        }
        .axis--y line {
            stroke: #ccc;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const margin = {top: 20, right: 30, bottom: 50, left: 40};
        const width = 800 - margin.left - margin.right;
        const height = 400 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            data.forEach(d => {
                if (d['Date'] === '2021-01-01') {
                    d['Units Sold'] = +d['Units Sold'];
                }
            });

            const filteredData = data.filter(d => d['Date'] === '2021-01-01');
            const storeData = d3.rollup(filteredData, v => d3.sum(v, d => d['Units Sold']), d => d['Store Location']);
            const storeArray = Array.from(storeData, ([key, value]) => ({StoreLocation: key, UnitsSold: value}));

            const x = d3.scaleBand()
                .domain(storeArray.map(d => d.StoreLocation))
                .range([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([0, d3.max(storeArray, d => d.UnitsSold)])
                .nice()
                .range([height, 0]);

            svg.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            const bars = svg.selectAll("".bar"")
                .data(storeArray)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => x(d.StoreLocation))
                .attr(""y"", d => y(d.UnitsSold))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d.UnitsSold))
                .call(d3.drag()
                    .on(""start"", dragstarted)
                    .on(""drag"", dragged)
                    .on(""end"", dragended));

            function dragstarted(event, d) {
                d3.select(this).raise().classed(""active"", true);
            }

            function dragged(event, d) {
                const xPos = Math.min(width - x.bandwidth(), Math.max(0, event.x));
                d3.select(this).attr(""x"", xPos).attr(""y"", y(d.UnitsSold));
            }

            function dragended(event, d) {
                const newX = d3.select(this).attr(""x"");
                const newIndex = Math.round((newX / x.bandwidth()));
                d3.select(this).attr(""x"", x(storeArray[newIndex].StoreLocation))
                .attr(""y"", y(d.UnitsSold)).classed(""active"", false);
                update(newIndex);
            }

            function update() {
                bars.transition().duration(200)
                    .attr(""x"", d => x(d.StoreLocation))
                    .attr(""width"", x.bandwidth())
                    .attr(""height"", d => height - y(d.UnitsSold))
                    .attr(""y"", d => y(d.UnitsSold));
            }
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,182,183
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Units Sold.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Bar Chart - Units Sold</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path {
            display: none;
        }
        .axis--y path {
            display: none;
        }
    </style>
</head>
<body>
    <h1>Units Sold by Store Location on 2021-01-01</h1>
    <select id=""sortOrder"">
        <option value=""ascending"">Ascending</option>
        <option value=""descending"">Descending</option>
    </select>
    <svg width=""800"" height=""400""></svg>

    <script>
        const svg = d3.select(""svg""),
            margin = { top: 20, right: 30, bottom: 40, left: 40 },
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            data = data.filter(d => d[""Date""] === ""2021-01-01"");
            data.forEach(d => {
                d[""Units Sold""] = +d[""Units Sold""];
            });

            let sortOrder = ""ascending"";
            render(data);

            d3.select(""#sortOrder"").on(""change"", function() {
                sortOrder = this.value;
                render(data);
            });

            function render(data) {
                // Sort data
                data.sort((a, b) => sortOrder === ""ascending"" ? a[""Units Sold""] - b[""Units Sold""] : b[""Units Sold""] - a[""Units Sold""]);

                const x = d3.scaleBand()
                    .domain(data.map(d => d[""Store Location""]))
                    .range([0, width])
                    .padding(0.1);

                const y = d3.scaleLinear()
                    .domain([0, d3.max(data, d => d[""Units Sold""])])
                    .nice()
                    .range([height, 0]);

                // Clear previous bars
                g.selectAll("".bar"").remove();
                g.selectAll("".axis"").remove();

                g.append(""g"")
                    .selectAll("".bar"")
                    .data(data)
                    .enter().append(""rect"")
                    .attr(""class"", ""bar"")
                    .attr(""x"", d => x(d[""Store Location""]))
                    .attr(""y"", d => y(d[""Units Sold""]))
                    .attr(""width"", x.bandwidth())
                    .attr(""height"", d => height - y(d[""Units Sold""]))
                    .transition()
                    .duration(750)
                    .attr(""height"", d => height - y(d[""Units Sold""]));

                g.append(""g"")
                    .attr(""class"", ""axis axis--x"")
                    .attr(""transform"", `translate(0,${height})`)
                    .call(d3.axisBottom(x));

                g.append(""g"")
                    .attr(""class"", ""axis axis--y"")
                    .call(d3.axisLeft(y));
            }
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,183,184
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Units Sold vs Revenue</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const units = [];
                const revenue = [];
                
                rows.forEach(row => {
                    const cols = row.split(',');
                    if (cols.length > 1) {
                        units.push(parseFloat(cols[2]));
                        revenue.push(parseFloat(cols[3]));
                    }
                });

                const myChart = echarts.init(document.getElementById('main'));

                const option = {
                    tooltip: {
                        trigger: 'item',
                        formatter: function (params) {
                            return `Units Sold: ${params.data[0]}<br/>Revenue: ${params.data[1]}`;
                        }
                    },
                    xAxis: {
                        name: 'Units Sold',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Revenue',
                        type: 'value'
                    },
                    series: [{
                        symbolSize: 10,
                        data: units.map((unit, index) => [unit, revenue[index]]),
                        type: 'scatter'
                    }]
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,184,185
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Units Sold vs Revenue</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const unitsSold = [];
                const revenue = [];

                lines.forEach(line => {
                    const cols = line.split(',');
                    if (cols.length > 1) {
                        unitsSold.push(Number(cols[2])); // Units Sold
                        revenue.push(Number(cols[3])); // Revenue
                    }
                });

                const scatterData = unitsSold.map((us, index) => {
                    return { value: [us, revenue[index]] };
                });

                const myChart = echarts.init(document.getElementById('main'));
                const option = {
                    title: {
                        text: 'Scatterplot of Units Sold vs Revenue'
                    },
                    tooltip: {},
                    xAxis: {
                        name: 'Units Sold',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Revenue',
                        type: 'value'
                    },
                    series: [{
                        type: 'scatter',
                        data: scatterData,
                        symbolSize: 10,
                        itemStyle: {
                            color: 'blue'
                        }
                    }]
                };

                myChart.setOption(option);

                myChart.on('brushSelected', function (params) {
                    const brushedPoints = [];
                    const selected = params.batch[0].selected;

                    for (const series of selected) {
                        series.data.forEach(dataIndex => {
                            brushedPoints.push(scatterData[dataIndex]);
                        });
                    }
                    
                    console.log('Brushed Points:', brushedPoints);
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,185,186
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold vs Revenue Scatterplot</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.1.2/echarts.min.js""></script>
</head>
<body>
    <div id=""scatterplot"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const unitsSold = [];
                const revenue = [];

                rows.forEach(row => {
                    const columns = row.split(',');
                    if (columns.length > 1) {
                        unitsSold.push(parseFloat(columns[2]));
                        revenue.push(parseFloat(columns[3]));
                    }
                });

                const scatterplot = echarts.init(document.getElementById('scatterplot'));
                scatterplot.setOption({
                    title: {
                        text: 'Units Sold vs Revenue',
                    },
                    tooltip: {
                        trigger: 'item',
                    },
                    xAxis: {
                        name: 'Units Sold',
                    },
                    yAxis: {
                        name: 'Revenue',
                    },
                    series: [{
                        symbolSize: 10,
                        data: unitsSold.map((us, index) => [us, revenue[index]]),
                        type: 'scatter',
                    }],
                    dataZoom: [{
                        type: 'inside',
                        xAxisIndex: [0],
                        rangeStart: 0,
                        rangeEnd: 100,
                    }],
                });
            });
    </script>
</body>
</html>
```",Correct,186,187
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold vs Revenue Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%;height:600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const points = lines.map(line => {
                    const [date, storeLocation, unitsSold, revenue, profit, operatingHours, customerVisits, productCategory] = line.split(',');
                    return {
                        name: `${storeLocation} on ${date}`,
                        unitsSold: parseFloat(unitsSold),
                        revenue: parseFloat(revenue)
                    };
                }).filter(point => !isNaN(point.unitsSold) && !isNaN(point.revenue));
                
                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);
                
                const option = {
                    title: {
                        text: 'Units Sold vs Revenue'
                    },
                    tooltip: {
                        trigger: 'item',
                        formatter: function (params) {
                            return `${params.data.name}<br/>Units Sold: ${params.data.unitsSold}<br/>Revenue: $${params.data.revenue}`;
                        }
                    },
                    xAxis: {
                        name: 'Units Sold',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Revenue',
                        type: 'value'
                    },
                    series: [{
                        type: 'scatter',
                        data: points.map(point => ({
                            name: point.name,
                            value: [point.unitsSold, point.revenue],
                            unitsSold: point.unitsSold,
                            revenue: point.revenue
                        })),
                        symbolSize: 10,
                        itemStyle: {
                            color: '#5470C6'
                        }
                    }]
                };
                
                myChart.setOption(option);
                
                myChart.on('click', function (params) {
                    if (params.data) {
                        const searchQuery = `${params.data.unitsSold} Units Sold ${params.data.revenue} Revenue`;
                        window.open(`https://www.google.com/search?q=${encodeURIComponent(searchQuery)}`, '_blank');
                    }
                });
            });
    </script>
</body>
</html>
```",Correct,187,188
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot with query widgets showing the Units Sold and Revenue of the given dataset. Add a slider to represent the Date.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot with Date Slider</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 600px;
        }
        #dateSlider {
            width: 100%;
            margin: 20px 0;
        }
    </style>
</head>
<body>

<div id=""main""></div>
<input type=""range"" id=""dateSlider"" min=""0"" max=""0"" value=""0"" step=""1"">

<script>
    async function fetchData() {
        const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv');
        const data = await response.text();
        const parsedData = parseCSV(data);
        initChart(parsedData);
    }

    function parseCSV(data) {
        const lines = data.split('\n').slice(1);
        const result = [];
        for (const line of lines) {
            const columns = line.split(',');
            if (columns.length < 8) continue; // skip invalid rows
            result.push({
                date: new Date(columns[0]),
                unitsSold: parseFloat(columns[2]),
                revenue: parseFloat(columns[3])
            });
        }
        return result;
    }

    function initChart(data) {
        const chart = echarts.init(document.getElementById('main'));
        let currentData = data;

        const option = {
            title: {
                text: 'Units Sold vs Revenue'
            },
            tooltip: {
                trigger: 'item'
            },
            xAxis: {
                name: 'Units Sold'
            },
            yAxis: {
                name: 'Revenue'
            },
            series: [{
                type: 'scatter',
                data: currentData.map(d => [d.unitsSold, d.revenue]),
                symbolSize: 10
            }]
        };

        chart.setOption(option);
        setupDateSlider(data);
    }

    function setupDateSlider(data) {
        const dateSlider = document.getElementById('dateSlider');
        dateSlider.max = data.length - 1;
        
        dateSlider.addEventListener('input', (event) => {
            const index = event.target.value;
            const filteredData = data.slice(0, parseInt(index) + 1);
            const chart = echarts.init(document.getElementById('main'));
            const option = {
                series: [{
                    data: filteredData.map(d => [d.unitsSold, d.revenue]),
                }]
            };
            chart.setOption(option);
        });
    }

    fetchData();
</script>

</body>
</html>
```",Correct,188,189
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot showing the Units Sold of Phoenix. Add animated transitions that connect these points using lines in order.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const unitsSold = [];
                const dates = [];

                rows.forEach(row => {
                    const columns = row.split(',');
                    if (columns[1] === 'Phoenix') {
                        dates.push(columns[0]);
                        unitsSold.push(parseInt(columns[2], 10));
                    }
                });

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);
                const option = {
                    title: {
                        text: 'Units Sold in Phoenix'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    xAxis: {
                        type: 'category',
                        data: dates,
                        axisLabel: {
                            interval: 0,
                            rotate: 45
                        }
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        name: 'Units Sold',
                        type: 'line',
                        smooth: true,
                        data: unitsSold,
                        markPoint: {
                            data: [
                                { type: 'max', name: 'Max Units Sold' },
                                { type: 'min', name: 'Min Units Sold' }
                            ]
                        },
                        animationDuration: 2000,
                        animationEasing: 'cubicInOut'
                    }]
                };
                
                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,189,190
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Units Sold of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Multi-series Line Chart with ECharts</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        async function fetchData(url) {
            const response = await fetch(url);
            const data = await response.text();
            const rows = data.split('\n').slice(1);
            const salesData = rows.map(row => {
                const cols = row.split(',');
                return {
                    date: cols[0],
                    storeLocation: cols[1],
                    unitsSold: parseFloat(cols[2]),
                    revenue: parseFloat(cols[3]),
                    profit: parseFloat(cols[4]),
                    operatingHours: parseFloat(cols[5]),
                    customerVisits: parseFloat(cols[6]),
                    productCategory: cols[7]
                };
            });
            return salesData;
        }

        function processData(data) {
            const seriesData = {};
            const categories = [...new Set(data.map(item => item.storeLocation))];

            categories.forEach(category => {
                seriesData[category] = [];
            });

            data.forEach(item => {
                seriesData[item.storeLocation].push({
                    name: item.date,
                    value: item.unitsSold
                });
            });

            return categories.map(category => ({
                name: category,
                type: 'line',
                data: seriesData[category].map(item => item.value),
                smooth: true
            }));
        }

        async function initChart() {
            const data = await fetchData('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv');
            const categories = [...new Set(data.map(item => item.storeLocation))];
            const series = processData(data);

            const chart = echarts.init(document.getElementById('main'));

            const option = {
                title: {
                    text: 'Units Sold by Store Location',
                },
                tooltip: {
                    trigger: 'axis',
                    axisPointer: {
                        type: 'cross',
                        label: {
                            backgroundColor: '#6a7985'
                        }
                    }
                },
                legend: {
                    data: categories,
                },
                xAxis: {
                    type: 'category',
                    boundaryGap: false,
                    data: [...new Set(data.map(item => item.date))],
                },
                yAxis: {
                    type: 'value',
                },
                series: series,
            };

            chart.setOption(option);

            chart.on('mouseover', function (params) {
                if (params.seriesType === 'line') {
                    const highlightedSeries = params.seriesName;
                    chart.dispatchAction({
                        type: 'highlight',
                        seriesName: highlightedSeries,
                    });
                }
            });

            chart.on('mouseout', function (params) {
                if (params.seriesType === 'line') {
                    const highlightedSeries = params.seriesName;
                    chart.dispatchAction({
                        type: 'downplay',
                        seriesName: highlightedSeries,
                    });
                }
            });
        }

        initChart();
    </script>
</body>
</html>
```",Correct,190,191
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Bar Chart Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const filteredData = rows.filter(row => row).map(row => {
                    const columns = row.split(',');
                    return {
                        Date: columns[0],
                        StoreLocation: columns[1],
                        UnitsSold: parseInt(columns[2]),
                        Revenue: parseFloat(columns[3]),
                        Profit: parseFloat(columns[4]),
                        OperatingHours: parseFloat(columns[5]),
                        CustomerVisits: parseInt(columns[6]),
                        ProductCategory: columns[7],
                    };
                }).filter(item => item.Date === '2021-01-01');

                const storeLocations = [...new Set(filteredData.map(item => item.StoreLocation))];
                const unitsSold = storeLocations.map(location => {
                    const totalUnits = filteredData
                        .filter(item => item.StoreLocation === location)
                        .reduce((sum, item) => sum + item.UnitsSold, 0);
                    return totalUnits;
                });

                const myChart = echarts.init(document.getElementById('main'));
                const options = {
                    title: {
                        text: 'Units Sold for Each Store Location on 2021-01-01',
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: storeLocations,
                    },
                    yAxis: {
                        type: 'value',
                    },
                    series: [{
                        name: 'Units Sold',
                        type: 'bar',
                        data: unitsSold,
                    }],
                    dataZoom: [{
                        type: 'slider',
                        xAxisIndex: [0],
                        start: 0,
                        end: 100,
                    }, {
                        type: 'inside',
                        xAxisIndex: [0],
                    }],
                    toolbox: {
                        feature: {
                            saveAsImage: {},
                        },
                    },
                };
                myChart.setOption(options);
            });
    </script>
</body>
</html>
```",Correct,191,192
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Bar Chart - Units Sold</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.1.2/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 600px;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <script>
        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv');
            const data = await response.text();
            return parseCSV(data);
        }

        function parseCSV(data) {
            const lines = data.split('\n').slice(1);
            const result = [];
            lines.forEach(line => {
                const [date, storeLocation, unitsSold, revenue, profit, operatingHours, customerVisits, productCategory] = line.split(',');
                if (date === '2021-01-01') {
                    result.push({ storeLocation, unitsSold: parseInt(unitsSold) });
                }
            });
            return result;
        }

        function renderChart(data) {
            const chart = echarts.init(document.getElementById('main'));
            const storeLocations = data.map(item => item.storeLocation);
            const unitsSold = data.map(item => item.unitsSold);

            const option = {
                title: {
                    text: 'Units Sold in Store Locations on 2021-01-01'
                },
                tooltip: {},
                xAxis: {
                    type: 'category',
                    data: storeLocations,
                    axisLabel: {
                        interval: 0,
                        rotate: 30
                    }
                },
                yAxis: {
                    type: 'value'
                },
                series: [{
                    name: 'Units Sold',
                    type: 'bar',
                    data: unitsSold,
                    draggable: true
                }],
                animation: false
            };

            chart.setOption(option);

            chart.on('finished', function() {
                chart.dispatchAction({
                    type: 'dataZoom',
                    start: 0,
                    end: 100
                });
            });

            chart.on('dataZoom', function() {
                const currentData = chart.getOption().series[0].data.map((d, i) => ({ storeLocation: storeLocations[i], unitsSold: d }));
                const sortedData = currentData.sort((a, b) => b.unitsSold - a.unitsSold);
                const updatedStoreLocations = sortedData.map(d => d.storeLocation);
                const updatedUnitsSold = sortedData.map(d => d.unitsSold);
                chart.setOption({
                    xAxis: {
                        data: updatedStoreLocations
                    },
                    series: [{
                        data: updatedUnitsSold
                    }]
                });
            });
        }

        fetchData().then(data => renderChart(data));
    </script>
</body>
</html>
```",Unexpected Execution Result,192,193
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Units Sold.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Store Units Sold Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <select id=""sortOrder"" onchange=""updateChart()"">
        <option value=""descending"">Descending</option>
        <option value=""ascending"">Ascending</option>
    </select>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>

    <script>
        let chartData = [];
        let sortedData = [];

        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv');
            const text = await response.text();
            const rows = text.split('\n').slice(1);
            rows.forEach(row => {
                const columns = row.split(',');
                const date = new Date(columns[0]);
                if (columns[1] && date.toISOString().slice(0, 10) === '2021-01-01') {
                    chartData.push({
                        storeLocation: columns[1],
                        unitsSold: parseInt(columns[2])
                    });
                }
            });
            updateChart();
        }

        function updateChart() {
            const sortOrder = document.getElementById('sortOrder').value;
            sortedData = chartData.sort((a, b) => sortOrder === 'ascending' ? a.unitsSold - b.unitsSold : b.unitsSold - a.unitsSold);
            renderChart();
        }

        function renderChart() {
            const myChart = echarts.init(document.getElementById('main'));
            const option = {
                title: { text: 'Units Sold for Each Store Location on 2021-01-01' },
                tooltip: {},
                xAxis: {
                    type: 'category',
                    data: sortedData.map(item => item.storeLocation),
                    axisLabel: { rotate: 30 }
                },
                yAxis: { type: 'value' },
                series: [{
                    type: 'bar',
                    data: sortedData.map(item => item.unitsSold),
                    animationDuration: 1000,
                }]
            };
            myChart.setOption(option);
        }

        fetchData();
    </script>
</body>
</html>
```",Unexpected Initial Result,193,194
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.7.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2""></script>
</head>
<body>
    <div id=""vis""></div>
    <script type=""text/javascript"">
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatterplot showing the relationship between Units Sold and Revenue."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": {
                ""type"": ""point"",
                ""tooltip"": true
            },
            ""encoding"": {
                ""x"": {
                    ""field"": ""Units Sold"",
                    ""type"": ""quantitative"",
                    ""title"": ""Units Sold""
                },
                ""y"": {
                    ""field"": ""Revenue"",
                    ""type"": ""quantitative"",
                    ""title"": ""Revenue"",
                    ""axis"": {
                        ""title"": ""Revenue ($)"",
                        ""labelExpr"": ""datum.value""
                    }
                },
                ""tooltip"": [
                    {""field"": ""Units Sold"", ""type"": ""quantitative"", ""title"": ""Units Sold""},
                    {""field"": ""Revenue"", ""type"": ""quantitative"", ""title"": ""Revenue""}
                ]
            },
            ""config"": {
                ""tooltip"": {
                    ""content"": ""encoding""
                }
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            // Access the Vega view instance
            const view = result.view;

            // Add interactivity: highlight the value on hover
            view.addEventListener('mousemove', function(event) {
                view.hover(event);
            });
        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Initial Result,194,195
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Units Sold vs Revenue</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/vega/5.20.2/vega.min.js""></script>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/vega-lite/5.4.0/vega-lite.min.js""></script>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/vega-embed/6.20.0/vega-embed.min.js""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatter plot for Units Sold vs Revenue."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""selection"": {
                ""brush"": {
                    ""type"": ""interval"",
                    ""encodings"": [""x"", ""y""]
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Units Sold"",
                    ""type"": ""quantitative"",
                    ""title"": ""Units Sold""
                },
                ""y"": {
                    ""field"": ""Revenue"",
                    ""type"": ""quantitative"",
                    ""title"": ""Revenue""
                },
                ""color"": {
                    ""condition"": {
                        ""param"": ""brush"",
                        ""field"": ""Product Category"",
                        ""type"": ""nominal""
                    },
                    ""value"": ""lightgray""
                },
                ""opacity"": {
                    ""condition"": {
                        ""param"": ""brush"",
                        ""test"": ""datum !== null"",
                        ""value"": 1
                    },
                    ""value"": 0.2
                }
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            // Visualization successfully created
        }).catch(console.error);
    </script>
</body>
</html>
```",Correct,195,196
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Units Sold vs Revenue</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>

<div id=""vis""></div>

<script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""description"": ""A scatter plot showing the relationship between Units Sold and Revenue."",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
        ""format"": {
          ""type"": ""csv""
        }
      },
      ""mark"": ""point"",
      ""encoding"": {
        ""x"": {
          ""field"": ""Units Sold"",
          ""type"": ""quantitative"",
          ""title"": ""Units Sold""
        },
        ""y"": {
          ""field"": ""Revenue"",
          ""type"": ""quantitative"",
          ""title"": ""Revenue""
        },
        ""tooltip"": [
          {""field"": ""Date"", ""type"": ""temporal"", ""title"": ""Date""},
          {""field"": ""Store Location"", ""type"": ""nominal"", ""title"": ""Store Location""},
          {""field"": ""Units Sold"", ""type"": ""quantitative"", ""title"": ""Units Sold""},
          {""field"": ""Revenue"", ""type"": ""quantitative"", ""title"": ""Revenue""},
          {""field"": ""Profit"", ""type"": ""quantitative"", ""title"": ""Profit""},
          {""field"": ""Operating Hours"", ""type"": ""quantitative"", ""title"": ""Operating Hours""},
          {""field"": ""Customer Visits"", ""type"": ""quantitative"", ""title"": ""Customer Visits""},
          {""field"": ""Product Category"", ""type"": ""nominal"", ""title"": ""Product Category""}
        ]
      },
      ""config"": {
        ""view"": {
          ""continuousWidth"": 400,
          ""continuousHeight"": 300,
          ""zoom"": true
        }
      }
    };

    vegaEmbed('#vis', spec).then(() => {
      // Embed succeeded
    }).catch(console.error);
</script>

</body>
</html>
```",Unexpected Execution Result,196,197
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Units Sold vs Revenue</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
          ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
          ""description"": ""A scatter plot showing the relationship between Units Sold and Revenue."",
          ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
            ""format"": {""type"": ""csv""}
          },
          ""mark"": ""point"",
          ""encoding"": {
            ""x"": {
              ""field"": ""Units Sold"",
              ""type"": ""quantitative"",
              ""title"": ""Units Sold""
            },
            ""y"": {
              ""field"": ""Revenue"",
              ""type"": ""quantitative"",
              ""title"": ""Revenue""
            },
            ""tooltip"": [
              {""field"": ""Date"", ""title"": ""Date""},
              {""field"": ""Store Location"", ""title"": ""Store Location""},
              {""field"": ""Units Sold"", ""title"": ""Units Sold""},
              {""field"": ""Revenue"", ""title"": ""Revenue""},
              {""field"": ""Profit"", ""title"": ""Profit""},
              {""field"": ""Operating Hours"", ""title"": ""Operating Hours""},
              {""field"": ""Customer Visits"", ""title"": ""Customer Visits""},
              {""field"": ""Product Category"", ""title"": ""Product Category""}
            ]
          },
          ""selection"": {
            ""point"": {
              ""type"": ""single"",
              ""on"": ""click"",
              ""encodings"": [""x"", ""y""]
            }
          },
          ""config"": {
            ""view"": {
              ""stroke"": ""transparent""
            }
          }
        };

        vegaEmbed('#vis', spec).then((result) => {
          const view = result.view;
          view.addEventListener('click', function(event) {
              const item = view.data('point');
              if (item) {
                const searchQuery = `${item[0].Units Sold} ${item[0].Revenue}`;
                window.open(`https://www.google.com/search?q=${encodeURIComponent(searchQuery)}`);
              }
          });
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,197,198
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot with query widgets showing the Units Sold and Revenue of the given dataset. Add a slider to represent the Date.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot with Vega-Lite</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.10.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2""></script>
    <style>
        #vis {
            width: 800px;
            height: 400px;
        }
    </style>
</head>
<body>
    <div id=""vis""></div>
    <input type=""range"" id=""dateSlider"" min=""0"" max=""29"" value=""0"">
    <script>
        const dataUrl = ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"";
        
        const spec = {
            $schema: 'https://vega.github.io/schema/vega-lite/v5.json',
            data: {
                url: dataUrl,
                format: { type: 'csv' }
            },
            params: [
                {
                    name: ""dateFilter"",
                    value: 0,
                    select: { 
                        type: ""point"", 
                        fields: [""Date""],
                        bind: { 
                            input: ""range"", 
                            min: 0, 
                            max: 29 
                        }
                    }
                }
            ],
            mark: 'circle',
            encoding: {
                x: { field: 'Units Sold', type: 'quantitative', title: 'Units Sold' },
                y: { field: 'Revenue', type: 'quantitative', title: 'Revenue' },
                tooltip: [
                    { field: 'Date', type: 'temporal' },
                    { field: 'Units Sold', type: 'quantitative' },
                    { field: 'Revenue', type: 'quantitative' }
                ]
            },
            transform: [
                {
                    filter: {
                        field: 'Date',
                        oneOf: {
                            param: 'dateFilter'
                        }
                    }
                }
            ]
        };

        vegaEmbed('#vis', spec).then(function(result) {
            const slider = document.getElementById('dateSlider');
            slider.addEventListener('input', () => {
                result.view.signal('dateFilter', parseInt(slider.value)).run();
            });
        }).catch(console.error);
    </script>
</body>
</html>
```",Execution Error,198,199
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot showing the Units Sold of Phoenix. Add animated transitions that connect these points using lines in order.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <title>Units Sold in Phoenix - Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum['Store Location'] === 'Phoenix'""
                },
                {
                    ""calculate"": ""datum['Date']"",
                    ""as"": ""date""
                }
            ],
            ""mark"": {
                ""type"": ""point"",
                ""filled"": true,
                ""size"": 100
            },
            ""encoding"": {
                ""x"": {
                    ""field"": ""date"",
                    ""type"": ""temporal"",
                    ""title"": ""Date""
                },
                ""y"": {
                    ""field"": ""Units Sold"",
                    ""type"": ""quantitative"",
                    ""title"": ""Units Sold""
                },
                ""tooltip"": [
                    {""field"": ""Date"", ""type"": ""temporal""},
                    {""field"": ""Units Sold"", ""type"": ""quantitative""},
                    {""field"": ""Revenue"", ""type"": ""quantitative""},
                    {""field"": ""Profit"", ""type"": ""quantitative""}
                ]
            },
            ""config"": {
                ""view"": {
                    ""stroke"": ""transparent""
                }
            },
            ""resolve"": {
                ""scale"": {
                    ""y"": ""independent""
                }
            }
        };

        vegaEmbed('#vis', spec).then(result => {
            const vlSpec = {
                ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
                ""data"": {
                    ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
                    ""format"": {
                        ""type"": ""csv""
                    }
                },
                ""transform"": [
                    {
                        ""filter"": ""datum['Store Location'] === 'Phoenix'""
                    }
                ],
                ""layer"": [
                    {
                        ""mark"": ""line"",
                        ""encoding"": {
                            ""x"": {
                                ""field"": ""Date"",
                                ""type"": ""temporal""
                            },
                            ""y"": {
                                ""field"": ""Units Sold"",
                                ""type"": ""quantitative""
                            }
                        }
                    },
                    {
                        ""mark"": {
                            ""type"": ""point"",
                            ""filled"": true,
                            ""size"": 100
                        },
                        ""encoding"": {
                            ""x"": {
                                ""field"": ""Date"",
                                ""type"": ""temporal""
                            },
                            ""y"": {
                                ""field"": ""Units Sold"",
                                ""type"": ""quantitative""
                            },
                            ""tooltip"": [
                                {""field"": ""Date"", ""type"": ""temporal""},
                                {""field"": ""Units Sold"", ""type"": ""quantitative""},
                                {""field"": ""Revenue"", ""type"": ""quantitative""},
                                {""field"": ""Profit"", ""type"": ""quantitative""}
                            ]
                        }
                    }
                ],
                ""config"": {
                    ""view"": {
                        ""stroke"": ""transparent""
                    }
                }
            };

            vegaEmbed('#vis', vlSpec);
        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Initial Result,199,200
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Units Sold of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold Line Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.6.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.19.1""></script>
</head>
<body>
    <h1>Units Sold Line Chart</h1>
    <div id=""vis""></div>

    <script type=""text/javascript"">
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": {
                ""type"": ""line"",
                ""tooltip"": true,
                ""opacity"": 0.8
            },
            ""encoding"": {
                ""x"": {
                    ""field"": ""Date"",
                    ""type"": ""temporal"",
                    ""title"": ""Date""
                },
                ""y"": {
                    ""field"": ""Units Sold"",
                    ""type"": ""quantitative"",
                    ""title"": ""Units Sold""
                },
                ""color"": {
                    ""field"": ""Store Location"",
                    ""type"": ""nominal"",
                    ""title"": ""Store Location""
                }
            },
            ""config"": {
                ""mark"": {
                    ""tooltip"": true,
                    ""strokeWidth"": 2
                }
            },
            ""selection"": {
                ""highlight"": {
                    ""type"": ""single"",
                    ""fields"": [""Store Location""],
                    ""on"": ""mouseover"",
                    ""empty"": ""none"",
                    ""encodings"": [""color""]
                }
            }
        };

        vegaEmbed('#vis', spec)
            .then(result => {
                const view = result.view;
                view.addSignalListener('highlight', (name, value) => {
                    if (value) {
                        view.tooltip.text = `Store Location: ${value['Store Location']}`;
                        view.tooltip.show();
                    } else {
                        view.tooltip.hide();
                    }
                });
            })
            .catch(err => console.error(err));
    </script>
</body>
</html>
```",Unexpected Initial Result,200,201
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.1.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.19.2""></script>
</head>
<body>
    <div id=""vis""></div>
    <script type=""text/javascript"">
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Date === '2021-01-01'""
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Store Location"",
                    ""type"": ""ordinal"",
                    ""axis"": {""labelAngle"": 45}
                },
                ""y"": {
                    ""field"": ""Units Sold"",
                    ""type"": ""quantitative""
                }
            },
            ""config"": {
                ""view"": {
                    ""continuousWidth"": 400,
                    ""continuousHeight"": 300,
                    ""zoom"": true,
                    ""pan"": true
                }
            }
        };

        vegaEmbed('#vis', spec, { actions: false }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,201,202
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <title>Interactive Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.8.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""> </script>
    <style>
        #vis {
            width: 600px;
            height: 400px;
        }
    </style>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const vegaSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""field"": ""Date"",
                        ""equal"": ""2021-01-01""
                    }
                },
                {
                    ""calculate"": ""datum.Units Sold"",
                    ""as"": ""Units_Sold""
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Store Location"",
                    ""type"": ""ordinal"",
                    ""title"": ""Store Location""
                },
                ""y"": {
                    ""field"": ""Units_Sold"",
                    ""type"": ""quantitative"",
                    ""title"": ""Units Sold""
                },
                ""order"": {
                    ""field"": ""Units_Sold"",
                    ""type"": ""quantitative""
                }
            },
            ""config"": {
                ""mark"": {
                    ""drag"": ""y"",
                    ""clip"": true
                }
            }
        };

        vegaEmbed('#vis', vegaSpec).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,202,203
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Units Sold.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Bar Chart of Units Sold</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.8.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
    <style>
        #vis {
            width: 100%;
            height: 500px;
        }
    </style>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Date == '2021-01-01'""
                },
                {
                    ""calculate"": ""datum['Units Sold']"",
                    ""as"": ""Units Sold""
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Store Location"",
                    ""type"": ""ordinal"",
                    ""sort"": ""x"",
                    ""axis"": {""labelAngle"": 45}
                },
                ""y"": {
                    ""field"": ""Units Sold"",
                    ""type"": ""quantitative""
                },
                ""tooltip"": [
                    {""field"": ""Store Location"", ""type"": ""ordinal""},
                    {""field"": ""Units Sold"", ""type"": ""quantitative""}
                ]
            },
            ""config"": {
                ""view"": {""stroke"": ""transparent""}
            }
        };

        const sortOptions = {
            ""options"": [
                { ""label"": ""Ascending"", ""value"": ""ascending"" },
                { ""label"": ""Descending"", ""value"": ""descending"" }
            ]
        };

        const updateSpec = (order) => {
            spec.encoding.x.sort = {""field"": ""Units Sold"", ""order"": order};
            vegaEmbed('#vis', spec).then(({ view }) => {
                view.run();
            });
        };

        vegaEmbed('#vis', spec).then(({ view }) => {
            view.addSignalListener('sortOrder', (name, value) => {
                updateSpec(value);
            });
        });

        // Set the default sort order
        updateSpec('ascending');
    </script>
</body>
</html>
```",Initialization Error,203,204
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Units Sold and Revenue, and a Bar Chart on the right that displays Store Location versus Units Sold.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Daily Sales Visualization</title>
    <style>
        body {
            display: flex;
            justify-content: space-between;
            margin: 20px;
        }
        .chart {
            width: 45%;
        }
        .scatterplot {
            margin: 20px;
        }
        .bar-chart {
            margin: 20px;
        }
    </style>
</head>
<body>
    <div class=""chart scatterplot""></div>
    <div class=""chart bar-chart""></div>

    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d['Units Sold'] = +d['Units Sold'];
                d['Revenue'] = +d['Revenue'];
            });

            // Scatterplot
            const scatterplotWidth = 400;
            const scatterplotHeight = 300;
            const scatterplotMargin = { top: 20, right: 30, bottom: 30, left: 40 };
            const scatterplotSvg = d3.select("".scatterplot"")
                .append(""svg"")
                .attr(""width"", scatterplotWidth)
                .attr(""height"", scatterplotHeight);
            
            const xScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Units Sold'])])
                .range([scatterplotMargin.left, scatterplotWidth - scatterplotMargin.right]);
            
            const yScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Revenue'])])
                .range([scatterplotHeight - scatterplotMargin.bottom, scatterplotMargin.top]);

            scatterplotSvg.append(""g"")
                .attr(""transform"", `translate(0,${scatterplotHeight - scatterplotMargin.bottom})`)
                .call(d3.axisBottom(xScale));
            
            scatterplotSvg.append(""g"")
                .attr(""transform"", `translate(${scatterplotMargin.left},0)`)
                .call(d3.axisLeft(yScale));
            
            scatterplotSvg.selectAll(""circle"")
                .data(data)
                .enter()
                .append(""circle"")
                .attr(""cx"", d => xScale(d['Units Sold']))
                .attr(""cy"", d => yScale(d['Revenue']))
                .attr(""r"", 5)
                .attr(""fill"", ""blue"");

            // Bar Chart
            const barChartWidth = 400;
            const barChartHeight = 300;
            const barChartMargin = { top: 20, right: 30, bottom: 30, left: 40 };
            const barChartSvg = d3.select("".bar-chart"")
                .append(""svg"")
                .attr(""width"", barChartWidth)
                .attr(""height"", barChartHeight);

            const storeLocationCounts = d3.rollup(data, v => d3.sum(v, d => d['Units Sold']), d => d['Store Location']);
            const storeLocations = Array.from(storeLocationCounts, ([key, value]) => ({ key, value }));

            const xBarScale = d3.scaleBand()
                .domain(storeLocations.map(d => d.key))
                .range([barChartMargin.left, barChartWidth - barChartMargin.right])
                .padding(0.1);
            
            const yBarScale = d3.scaleLinear()
                .domain([0, d3.max(storeLocations, d => d.value)])
                .range([barChartHeight - barChartMargin.bottom, barChartMargin.top]);

            barChartSvg.append(""g"")
                .attr(""transform"", `translate(0,${barChartHeight - barChartMargin.bottom})`)
                .call(d3.axisBottom(xBarScale));
            
            barChartSvg.append(""g"")
                .attr(""transform"", `translate(${barChartMargin.left},0)`)
                .call(d3.axisLeft(yBarScale));
            
            barChartSvg.selectAll(""rect"")
                .data(storeLocations)
                .enter()
                .append(""rect"")
                .attr(""x"", d => xBarScale(d.key))
                .attr(""y"", d => yBarScale(d.value))
                .attr(""height"", d => yBarScale(0) - yBarScale(d.value))
                .attr(""width"", xBarScale.bandwidth())
                .attr(""fill"", ""orange"");
        });
    </script>
</body>
</html>
```",Correct,204,205
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Units Sold and Revenue, and a Bar Chart on the right that displays Store Location versus Units Sold. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Data Visualization</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .scatter { cursor: pointer; }
        .bar { fill: steelblue; }
        .bar.highlighted { fill: orange; }
        .tooltip { position: absolute; text-align: center; width: auto; padding: 5px; font: 12px sans-serif; background: lightsteelblue; border: 0; border-radius: 8px; pointer-events: none; }
    </style>
</head>
<body>

<div id=""scatterplot""></div>
<div id=""barchart""></div>
<div class=""tooltip"" style=""opacity:0;""></div>

<script>
    const margin = { top: 20, right: 30, bottom: 40, left: 40 };
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const svgScatter = d3.select(""#scatterplot"").append(""svg"")
        .attr(""width"", width + margin.left + margin.right)
        .attr(""height"", height + margin.top + margin.bottom)
        .append(""g"")
        .attr(""transform"", `translate(${margin.left},${margin.top})`);

    const svgBar = d3.select(""#barchart"").append(""svg"")
        .attr(""width"", width + margin.left + margin.right)
        .attr(""height"", height + margin.top + margin.bottom)
        .append(""g"")
        .attr(""transform"", `translate(${margin.left},${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
        data.forEach(d => {
            d[""Units Sold""] = +d[""Units Sold""];
            d[""Revenue""] = +d[""Revenue""];
        });

        const xScaleScatter = d3.scaleLinear()
            .domain([0, d3.max(data, d => d[""Units Sold""])])
            .range([0, width]);

        const yScaleScatter = d3.scaleLinear()
            .domain([0, d3.max(data, d => d[""Revenue""])])
            .range([height, 0]);

        const xScaleBar = d3.scaleBand()
            .domain(data.map(d => d[""Store Location""]))
            .range([0, width])
            .padding(0.1);

        const yScaleBar = d3.scaleLinear()
            .domain([0, d3.max(data, d => d[""Units Sold""])])
            .range([height, 0]);

        const scatterPoints = svgScatter.selectAll("".scatter"")
            .data(data)
            .enter().append(""circle"")
            .attr(""class"", ""scatter"")
            .attr(""cx"", d => xScaleScatter(d[""Units Sold""]))
            .attr(""cy"", d => yScaleScatter(d[""Revenue""]))
            .attr(""r"", 5)
            .style(""fill"", ""steelblue"")
            .on(""mouseover"", function(event, d) {
                d3.select("".tooltip"")
                    .style(""opacity"", 1)
                    .html(`Units: ${d[""Units Sold""]}<br>Revenue: ${d[""Revenue""]}`)
                    .style(""left"", (event.pageX + 5) + ""px"")
                    .style(""top"", (event.pageY - 28) + ""px"");
            })
            .on(""mouseout"", function() {
                d3.select("".tooltip"").style(""opacity"", 0);
            });

        const bars = svgBar.selectAll("".bar"")
            .data(data)
            .enter().append(""rect"")
            .attr(""class"", ""bar"")
            .attr(""x"", d => xScaleBar(d[""Store Location""]))
            .attr(""y"", d => yScaleBar(d[""Units Sold""]))
            .attr(""width"", xScaleBar.bandwidth())
            .attr(""height"", d => height - yScaleBar(d[""Units Sold""]))
            .on(""click"", function(event, d) {
                const selectedLocation = d[""Store Location""];
                svgBar.selectAll("".bar"")
                    .classed(""highlighted"", false);
                svgBar.selectAll("".bar"")
                    .filter(data => data[""Store Location""] === selectedLocation)
                    .classed(""highlighted"", true);

                d3.selectAll("".scatter"")
                    .style(""fill"", data => (data[""Store Location""] === selectedLocation ? ""orange"" : ""steelblue""));
            });

        const brush = d3.brush()
            .extent([[0, 0], [width, height]])
            .on(""brush end"", brushed);

        svgScatter.append(""g"")
            .attr(""class"", ""brush"")
            .call(brush);

        function brushed(event) {
            const selection = event.selection;
            if (selection) {
                const [[x0, y0], [x1, y1]] = selection;
                const brushedData = data.filter(d =>
                    xScaleScatter(d[""Units Sold""]) >= x0 &&
                    xScaleScatter(d[""Units Sold""]) <= x1 &&
                    yScaleScatter(d[""Revenue""]) >= y1 &&
                    yScaleScatter(d[""Revenue""]) <= y0
                );

                svgBar.selectAll("".bar"").classed(""highlighted"", d => brushedData.includes(d));
                scatterPoints.style(""fill"", d => brushedData.includes(d) ? ""orange"" : ""steelblue"");

                d3.select("".brush"").call(brush.move, null); // Clear brush
            }
        }

        svgScatter.append(""g"")
            .attr(""class"", ""x-axis"")
            .attr(""transform"", `translate(0,${height})`)
            .call(d3.axisBottom(xScaleScatter));

        svgScatter.append(""g"")
            .attr(""class"", ""y-axis"")
            .call(d3.axisLeft(yScaleScatter));

        svgBar.append(""g"")
            .attr(""class"", ""x-axis"")
            .attr(""transform"", `translate(0,${height})`)
            .call(d3.axisBottom(xScaleBar));

        svgBar.append(""g"")
            .attr(""class"", ""y-axis"")
            .call(d3.axisLeft(yScaleBar));
    });
</script>
</body>
</html>
```",Unexpected Initial Result,205,206
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Sold , while the pie chart represents the distribution of Revenue.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Dashboard</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line-chart {
            margin-bottom: 20px;
        }
        .pie-chart {
            width: 400px;
            height: 400px;
        }
    </style>
</head>
<body>

<div class=""line-chart""></div>
<div class=""pie-chart""></div>

<script>
    const margin = {top: 20, right: 30, bottom: 30, left: 40};
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const svgLine = d3.select("".line-chart"").append(""svg"")
        .attr(""width"", width + margin.left + margin.right)
        .attr(""height"", height + margin.top + margin.bottom)
        .append(""g"")
        .attr(""transform"", `translate(${margin.left},${margin.top})`);

    const svgPie = d3.select("".pie-chart"").append(""svg"")
        .attr(""width"", 400)
        .attr(""height"", 400)
        .append(""g"")
        .attr(""transform"", ""translate(200,200)"");

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
        data.forEach(d => {
            d[""Units Sold""] = +d[""Units Sold""];
            d[""Revenue""] = +d[""Revenue""];
            d[""Date""] = new Date(d[""Date""]);
        });

        const xLine = d3.scaleTime()
            .domain(d3.extent(data, d => d[""Date""]))
            .range([0, width]);

        const yLine = d3.scaleLinear()
            .domain([0, d3.max(data, d => d[""Units Sold""])])
            .range([height, 0]);

        const line = d3.line()
            .x(d => xLine(d[""Date""]))
            .y(d => yLine(d[""Units Sold""]));

        svgLine.append(""path"")
            .datum(data)
            .attr(""fill"", ""none"")
            .attr(""stroke"", ""steelblue"")
            .attr(""stroke-width"", 1.5)
            .attr(""d"", line);

        svgLine.append(""g"")
            .attr(""transform"", `translate(0,${height})`)
            .call(d3.axisBottom(xLine));

        svgLine.append(""g"")
            .call(d3.axisLeft(yLine));

        const revenueData = d3.rollup(data, v => d3.sum(v, d => d[""Revenue""]), d => d[""Product Category""]);
        const pieData = Array.from(revenueData, ([key, value]) => ({key, value}));

        const pie = d3.pie().value(d => d.value);
        const arc = d3.arc().innerRadius(0).outerRadius(150);

        const arcs = svgPie.selectAll(""arc"")
            .data(pie(pieData))
            .enter().append(""g"")
            .attr(""class"", ""arc"");

        arcs.append(""path"")
            .attr(""d"", arc)
            .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

        arcs.append(""text"")
            .attr(""transform"", d => `translate(${arc.centroid(d)})`)
            .text(d => d.data.key);
    });
</script>

</body>
</html>
```",Correct,206,207
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Sold , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Data Visualization</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .chart {
            display: block;
            margin: auto;
        }
        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 2px;
        }
        .arc {
            stroke: #fff;
        }
    </style>
</head>
<body>
    <svg class=""chart"" width=""800"" height=""400""></svg>
    <svg class=""chart"" width=""400"" height=""400""></svg>
    
    <script>
        const svgLine = d3.select(""svg"").attr(""class"", ""line-chart"");
        const svgPie = d3.select(""svg:nth-of-type(2)"").attr(""class"", ""pie-chart"");
        const widthLine = 800, heightLine = 400, widthPie = 400, heightPie = 400;

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d[""Units Sold""] = +d[""Units Sold""];
                d[""Revenue""] = +d[""Revenue""];
            });

            const xLine = d3.scaleTime()
                .domain(d3.extent(data, d => new Date(d.Date)))
                .range([0, widthLine]);

            const yLine = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Units Sold""])])
                .range([heightLine, 0]);

            const line = d3.line()
                .x(d => xLine(new Date(d.Date)))
                .y(d => yLine(d[""Units Sold""]));

            svgLine.append(""g"")
                .attr(""transform"", `translate(0,${heightLine})`)
                .call(d3.axisBottom(xLine));

            svgLine.append(""g"")
                .call(d3.axisLeft(yLine));

            svgLine.append(""path"")
                .datum(data)
                .attr(""class"", ""line"")
                .attr(""d"", line);

            const pieColor = d3.scaleOrdinal(d3.schemeCategory10);
            const pie = d3.pie().value(d => d.Revenue);
            const arc = d3.arc()
                .innerRadius(0)
                .outerRadius(Math.min(widthPie, heightPie) / 2 - 1);

            const g = svgPie.append(""g"")
                .attr(""transform"", `translate(${widthPie / 2}, ${heightPie / 2})`);

            const updatePie = (filteredData) => {
                const pieData = pie(filteredData);

                g.selectAll("".arc"").remove();
                const arcs = g.selectAll("".arc"")
                    .data(pieData)
                    .enter().append(""g"")
                    .attr(""class"", ""arc"");

                arcs.append(""path"")
                    .attr(""class"", ""arc"")
                    .attr(""d"", arc)
                    .style(""fill"", (d, i) => pieColor(i));

                arcs.append(""text"")
                    .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                    .attr(""dy"", "".35em"")
                    .text(d => d.data.Revenue);
            };

            svgLine.on(""click"", function(event) {
                const [mx, my] = d3.pointer(event);
                const x0 = xLine.invert(mx);
                const selectedData = data.filter(d => new Date(d.Date) >= x0);
                updatePie(selectedData);
            });

            updatePie(data);
        });
    </script>
</body>
</html>
```",Correct,207,208
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Units Sold, Revenue, Profit, and Customer Visits. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot Matrix</title>
    <style>
        .cell {
            display: inline-block;
            width: 200px;
            height: 200px;
            margin: 10px;
            border: 1px solid #ccc;
            position: relative;
        }
        .highlight {
            fill: orange;
            stroke: black;
            stroke-width: 2;
        }
    </style>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
</head>
<body>
    <div id=""scatterplotMatrix""></div>
    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 40 },
            width = 200 - margin.left - margin.right,
            height = 200 - margin.top - margin.bottom;

        const dimensions = [""Units Sold"", ""Revenue"", ""Profit"", ""Customer Visits""];

        Promise.all([
            d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv""),
        ]).then(data => {
            data.forEach(d => {
                d[""Units Sold""] = +d[""Units Sold""];
                d[""Revenue""] = +d[""Revenue""];
                d[""Profit""] = +d[""Profit""];
                d[""Customer Visits""] = +d[""Customer Visits""];
            });

            const svg = d3.select(""#scatterplotMatrix"")
                .selectAll("".cell"")
                .data(dimensions)
                .enter().append(""div"")
                .attr(""class"", ""cell"")
                .each(function(yVar, i) {
                    const xVar = dimensions[i];
                    const g = d3.select(this).append(""svg"")
                        .attr(""width"", width + margin.left + margin.right)
                        .attr(""height"", height + margin.top + margin.bottom)
                        .append(""g"")
                        .attr(""transform"", `translate(${margin.left},${margin.top})`);

                    const x = d3.scaleLinear()
                        .domain(d3.extent(data, d => d[xVar])).nice()
                        .range([0, width]);

                    const y = d3.scaleLinear()
                        .domain(d3.extent(data, d => d[yVar])).nice()
                        .range([height, 0]);

                    g.selectAll(""circle"")
                        .data(data)
                        .enter().append(""circle"")
                        .attr(""cx"", d => x(d[xVar]))
                        .attr(""cy"", d => y(d[yVar]))
                        .attr(""r"", 3)
                        .on(""mouseover"", function(event, d) {
                            d3.select(this).classed(""highlight"", true);
                        })
                        .on(""mouseout"", function(event, d) {
                            d3.select(this).classed(""highlight"", false);
                        });

                    g.append(""g"")
                        .attr(""class"", ""x axis"")
                        .attr(""transform"", `translate(0,${height})`)
                        .call(d3.axisBottom(x));

                    g.append(""g"")
                        .attr(""class"", ""y axis"")
                        .call(d3.axisLeft(y));
                });
                
            const brush = d3.brush()
                .extent([[0, 0], [width, height]])
                .on(""brush"", brushed)
                .on(""end"", brushended);

            d3.selectAll(""svg"").select(""g"").call(brush);

            function brushed(event) {
                const selection = event.selection;
                const [[x0, y0], [x1, y1]] = selection;

                d3.selectAll(""circle"").classed(""highlight"", false);
                
                d3.selectAll(""circle"").filter((d) => {
                    return x0 <= x(d[""Units Sold""]) && x(d[""Units Sold""]) <= x1 &&
                           y0 <= y(d[""Revenue""]) && y(d[""Revenue""]) <= y1;
                }).classed(""highlight"", true);
            }

            function brushended(event) {
                if (!event.selection) {
                    d3.selectAll(""circle"").classed(""highlight"", false);
                }
            }
        });
    </script>
</body>
</html>
```",Initialization Error,208,209
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a brushable Scatterplot that visualizes the relationship between Units Sold and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot</title>
    <style>
        .brush .selection {
            fill: #9e9e9e;
            fill-opacity: 0.5;
            stroke: #000;
            stroke-width: 1.5px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>
    <div id=""table-container"" style=""margin-top: 20px;"">
        <table border=""1"">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Store Location</th>
                    <th>Units Sold</th>
                    <th>Revenue</th>
                    <th>Profit</th>
                </tr>
            </thead>
            <tbody id=""data-table-body""></tbody>
        </table>
    </div>

    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const svg = d3.select(""svg""),
            margin = { top: 20, right: 20, bottom: 30, left: 40 },
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom;

        const x = d3.scaleLinear().range([0, width]),
            y = d3.scaleLinear().range([height, 0]);

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        const brush = d3.brush().extent([[0, 0], [width, height]])
            .on(""brush end"", brushed);

        svg.append(""g"")
            .attr(""class"", ""brush"")
            .call(brush);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d[""Units Sold""] = +d[""Units Sold""];
                d[""Revenue""] = +d[""Revenue""];
            });

            x.domain(d3.extent(data, d => d[""Units Sold""])).nice();
            y.domain(d3.extent(data, d => d[""Revenue""])).nice();

            g.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""y axis"")
                .call(d3.axisLeft(y));

            g.selectAll("".dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => x(d[""Units Sold""]))
                .attr(""cy"", d => y(d[""Revenue""]))
                .attr(""r"", 3.5);

            function brushed(event) {
                const selection = event.selection;
                if (selection) {
                    const [[x0, y0], [x1, y1]] = selection;

                    const selectedData = data.filter(d => 
                        x(d[""Units Sold""]) >= x0 && x(d[""Units Sold""]) <= x1 &&
                        y(d[""Revenue""]) >= y0 && y(d[""Revenue""]) <= y1
                    ).slice(0, 20);

                    updateTable(selectedData);
                }
            }

            function updateTable(selectedData) {
                const tbody = d3.select(""#data-table-body"");
                tbody.selectAll(""tr"").remove();
                
                const rows = tbody.selectAll(""tr"")
                    .data(selectedData)
                    .enter().append(""tr"");
                
                rows.selectAll(""td"")
                    .data(d => [d[""Date""], d[""Store Location""], d[""Units Sold""], d[""Revenue""], d[""Profit""]])
                    .enter().append(""td"")
                    .text(d => d);
            }
        });
    </script>
</body>
</html>
```",Initialization Error,209,210
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a horizontal Bar Chart that shows all the data concerning Store Location and Units Sold, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Store Location Units Sold Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .x-axis path,
        .x-axis line {
            display: none;
        }
        .minimap {
            fill: lightgray;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script>
        const margin = {top: 20, right: 40, bottom: 30, left: 100},
              width = 800 - margin.left - margin.right,
              height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d[""Units Sold""] = +d[""Units Sold""];
            });

            const x = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Units Sold""])])
                .range([0, width]);

            const y = d3.scaleBand()
                .domain(data.map(d => d[""Store Location""]))
                .range([0, height])
                .padding(0.1);

            svg.append(""g"")
                .attr(""class"", ""x-axis"")
                .attr(""transform"", `translate(0, ${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .selectAll("".bar"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", 0)
                .attr(""y"", d => y(d[""Store Location""]))
                .attr(""width"", d => x(d[""Units Sold""]))
                .attr(""height"", y.bandwidth());

            // Minimap
            const minimapWidth = 200;
            const minimapHeight = 100;

            const minimap = d3.select(""svg"")
                .append(""g"")
                .attr(""transform"", `translate(${width + margin.left}, ${margin.top + height - minimapHeight})`);

            const minimapX = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Units Sold""])])
                .range([0, minimapWidth]);

            minimap.selectAll("".minimap-bar"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""minimap"")
                .attr(""x"", 0)
                .attr(""y"", (d, i) => i * (minimapHeight / data.length))
                .attr(""width"", d => minimapX(d[""Units Sold""]))
                .attr(""height"", minimapHeight / data.length - 1);
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,210,211
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Units Sold and Revenue, and a Bar Chart on the right that displays Store Location versus Units Sold.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            display: flex;
            justify-content: space-between;
        }
        #scatterplot, #barchart {
            width: 48%;
            height: 400px;
        }
    </style>
</head>
<body>
    <div id=""main"">
        <div id=""scatterplot""></div>
        <div id=""barchart""></div>
    </div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const unitsSold = [];
                const revenue = [];
                const salesData = {};

                rows.forEach(row => {
                    const cols = row.split(',');
                    if (cols.length > 1) {
                        const location = cols[1].trim();
                        const units = parseFloat(cols[2]);
                        const revenueValue = parseFloat(cols[3]);

                        unitsSold.push(units);
                        revenue.push(revenueValue);

                        if (salesData[location]) {
                            salesData[location] += units;
                        } else {
                            salesData[location] = units;
                        }
                    }
                });

                const locations = Object.keys(salesData);
                const unitsByLocation = locations.map(location => salesData[location]);

                const scatterplot = echarts.init(document.getElementById('scatterplot'));
                scatterplot.setOption({
                    title: {
                        text: 'Units Sold vs Revenue'
                    },
                    tooltip: {},
                    xAxis: {
                        name: 'Units Sold'
                    },
                    yAxis: {
                        name: 'Revenue'
                    },
                    series: [{
                        symbolSize: 10,
                        data: unitsSold.map((units, index) => [units, revenue[index]]),
                        type: 'scatter'
                    }]
                });

                const barchart = echarts.init(document.getElementById('barchart'));
                barchart.setOption({
                    title: {
                        text: 'Store Location vs Units Sold'
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: locations
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        data: unitsByLocation,
                        type: 'bar'
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,211,212
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Units Sold and Revenue, and a Bar Chart on the right that displays Store Location versus Units Sold. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            display: flex;
        }
        #scatter, #bar {
            width: 50%;
            height: 400px;
        }
    </style>
</head>
<body>

<div id=""main"">
    <div id=""scatter""></div>
    <div id=""bar""></div>
</div>

<script>
    fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1).map(row => row.split(','));
            const headers = ['Date', 'Store Location', 'Units Sold', 'Revenue', 'Profit', 'Operating Hours', 'Customer Visits', 'Product Category'];
            const salesData = rows.map(row => {
                return {
                    Date: row[0],
                    'Store Location': row[1],
                    'Units Sold': +row[2],
                    Revenue: +row[3],
                    Profit: +row[4],
                    'Operating Hours': +row[5],
                    'Customer Visits': +row[6],
                    'Product Category': row[7]
                };
            });

            const scatterData = salesData.map(item => [item['Units Sold'], item.Revenue]);
            const barData = salesData.reduce((acc, item) => {
                acc[item['Store Location']] = (acc[item['Store Location']] || 0) + item['Units Sold'];
                return acc;
            }, {});

            const barLocations = Object.keys(barData);
            const barUnits = Object.values(barData);

            const scatterChart = echarts.init(document.getElementById('scatter'));
            const barChart = echarts.init(document.getElementById('bar'));

            scatterChart.setOption({
                title: {
                    text: 'Scatterplot: Units Sold vs Revenue'
                },
                tooltip: {},
                xAxis: {
                    name: 'Units Sold',
                },
                yAxis: {
                    name: 'Revenue',
                },
                series: [{
                    type: 'scatter',
                    data: scatterData,
                    itemStyle: {
                        normal: {
                            color: '#3fb8b5'
                        }
                    },
                    emphasis: {
                        itemStyle: {
                            color: '#ff7f0e'
                        }
                    }
                }]
            });

            barChart.setOption({
                title: {
                    text: 'Bar Chart: Store Location vs Units Sold'
                },
                tooltip: {},
                xAxis: {
                    type: 'category',
                    data: barLocations
                },
                yAxis: {
                    name: 'Units Sold',
                },
                series: [{
                    type: 'bar',
                    data: barUnits,
                    itemStyle: {
                        normal: {
                            color: '#ffbb78'
                        }
                    }
                }]
            });

            let selectedData = [];

            scatterChart.on('brush', params => {
                selectedData = params.batch[0].areas[0].coords.map(coord => {
                    return salesData[coord[1]];
                });
                const selectedLocations = [...new Set(selectedData.map(item => item['Store Location']))];
                const highlightedUnits = barLocations.map(loc => {
                    return selectedLocations.includes(loc) ? barData[loc] : 0;
                });

                barChart.setOption({
                    series: [{
                        data: highlightedUnits
                    }]
                });
            });

            scatterChart.on('brushend', () => {
                barChart.setOption({
                    series: [{
                        data: barUnits
                    }]
                });
            });
        });
</script>

</body>
</html>
```",Unexpected Execution Result,212,213
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Sold , while the pie chart represents the distribution of Revenue.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""lineChart"" style=""width: 100%; height: 400px;""></div>
    <div id=""pieChart"" style=""width: 100%; height: 400px;""></div>

    <script>
        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv');
            const text = await response.text();
            const data = text.split('\n').slice(1).map(row => row.split(','));

            // Prepare data for line chart
            const dates = data.map(row => row[0]);
            const unitsSold = data.map(row => parseInt(row[2], 10));

            const lineChartOption = {
                title: {
                    text: 'Trend of Units Sold'
                },
                tooltip: {},
                xAxis: {
                    type: 'category',
                    data: dates
                },
                yAxis: {
                    type: 'value'
                },
                series: [{
                    name: 'Units Sold',
                    type: 'line',
                    data: unitsSold
                }]
            };
            const lineChart = echarts.init(document.getElementById('lineChart'));
            lineChart.setOption(lineChartOption);

            // Prepare data for pie chart
            const revenueData = {};
            data.forEach(row => {
                const category = row[7];
                const revenue = parseFloat(row[3]);
                if (!revenueData[category]) revenueData[category] = 0;
                revenueData[category] += revenue;
            });

            const pieChartData = Object.keys(revenueData).map(key => ({ value: revenueData[key], name: key }));

            const pieChartOption = {
                title: {
                    text: 'Revenue Distribution by Product Category',
                    left: 'center'
                },
                tooltip: {
                    trigger: 'item'
                },
                series: [{
                    name: 'Revenue',
                    type: 'pie',
                    radius: '50%',
                    data: pieChartData,
                    emphasis: {
                        itemStyle: {
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowColor: 'rgba(0, 0, 0, 0.5)'
                        }
                    }
                }]
            };
            const pieChart = echarts.init(document.getElementById('pieChart'));
            pieChart.setOption(pieChartOption);
        }

        fetchData();
    </script>
</body>
</html>
```",Correct,213,214
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Sold , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Data Visualization</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.2.2/echarts.min.js""></script>
    <style>
        #lineChart, #pieChart {
            width: 100%; 
            height: 400px; 
        }
    </style>
</head>
<body>

<div id=""lineChart""></div>
<div id=""pieChart""></div>

<script>
    fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
        .then(response => response.text())
        .then(data => {
            const lines = data.split('\n').slice(1);
            const date = [];
            const unitsSold = [];
            const revenueData = {};

            lines.forEach(line => {
                const [dateItem, , units, revenue] = line.split(',');
                if (dateItem && units && revenue) {
                    date.push(dateItem);
                    unitsSold.push(parseInt(units, 10));
                    revenueData[dateItem] = parseFloat(revenue);
                }
            });

            const lineChart = echarts.init(document.getElementById('lineChart'));
            const pieChart = echarts.init(document.getElementById('pieChart'));

            lineChart.setOption({
                title: {
                    text: 'Units Sold Over Time'
                },
                tooltip: {
                    trigger: 'axis',
                    axisPointer: { type: 'cross' }
                },
                xAxis: {
                    type: 'category',
                    data: date
                },
                yAxis: {
                    type: 'value'
                },
                series: [{
                    name: 'Units Sold',
                    type: 'line',
                    data: unitsSold,
                    itemStyle: {
                        color: '#3388cc'
                    }
                }]
            });

            lineChart.on('brushSelected', function(params) {
                const selectedDates = [];
                params.batch[0].selected.forEach(item => {
                    selectedDates.push(date[item.dataIndex]);
                });
                
                const filteredRevenue = {};
                selectedDates.forEach(selectedDate => {
                    if (revenueData[selectedDate]) {
                        filteredRevenue[selectedDate] = revenueData[selectedDate];
                    }
                });

                const pieData = Object.entries(filteredRevenue).map(([key, value]) => ({ name: key, value }));
                pieChart.setOption({
                    title: {
                        text: 'Revenue Distribution',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    series: [{
                        type: 'pie',
                        radius: '50%',
                        data: pieData,
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }]
                });
            });

            lineChart.dispatchAction({
                type: 'brush',
                areas: [{
                    brushType: 'lineX',
                    range: [0, date.length - 1]
                }]
            });
        });
</script>
</body>
</html>
```",Execution Error,214,215
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Units Sold, Revenue, Profit, and Customer Visits. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        .scatter-container {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            grid-gap: 10px;
            margin: 20px;
        }
        .scatter {
            width: 300px;
            height: 300px;
        }
    </style>
</head>
<body>
    <div id=""scatterplotMatrix"" class=""scatter-container""></div>

    <script>
        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv');
            const data = await response.text();
            const rows = data.split('\n').slice(1);
            const parsedData = rows.map(row => {
                const cols = row.split(',');
                return {
                    unitsSold: parseFloat(cols[2]),
                    revenue: parseFloat(cols[3]),
                    profit: parseFloat(cols[4]),
                    customerVisits: parseFloat(cols[6])
                };
            }).filter(d => !isNaN(d.unitsSold));  // Filter out invalid rows
            
            return parsedData;
        }

        async function createScatterplotMatrix() {
            const data = await fetchData();
            const scatterPlots = [];

            const variables = ['unitsSold', 'revenue', 'profit', 'customerVisits'];
            for (let i = 0; i < variables.length; i++) {
                for (let j = 0; j < variables.length; j++) {
                    let chartId = `scatter${i}${j}`;
                    if (i === j) {
                        scatterPlots.push('<div></div>'); // Placeholder for diagonal
                    } else {
                        scatterPlots.push(`<div id=""${chartId}"" class=""scatter""></div>`);
                        const seriesData = data.map(d => ({
                            value: [d[variables[i]], d[variables[j]]],
                            itemStyle: {
                                color: 'rgba(0, 0, 255, 0.5)' // Default color
                            }
                        }));

                        const myChart = echarts.init(document.getElementById(chartId));
                        myChart.setOption({
                            xAxis: { type: 'value', name: variables[i] },
                            yAxis: { type: 'value', name: variables[j] },
                            series: [{
                                type: 'scatter',
                                data: seriesData,
                                symbolSize: 10
                            }]
                        });

                        (function(i, j) {
                            myChart.on('click', function (params) {
                                const selectedPoints = seriesData.map((item, index) => {
                                    return {
                                        selected: item.value
                                    }
                                });
                                myChart.setOption({
                                    series: [{
                                        itemStyle: {
                                            color: 'rgba(0, 255, 0, 0.5)' // Highlight selected
                                        }
                                    }]
                                });

                                // You can add more interactive functionalities here
                            });
                        })(i, j);
                    }
                }
            }
            document.getElementById('scatterplotMatrix').innerHTML = scatterPlots.join('');
        }

        createScatterplotMatrix();
    </script>
</body>
</html>
```",Initialization Error,215,216
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a brushable Scatterplot that visualizes the relationship between Units Sold and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot with ECharts</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.0.2/echarts.min.js""></script>
    <style>
        #main, #table {
            width: 48%;
            height: 400px;
            display: inline-block;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <div id=""table""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const seriesData = lines.map(line => {
                    const [date, storeLocation, unitsSold, revenue, profit, operatingHours, customerVisits, productCategory] = line.split(',');
                    return {
                        date,
                        storeLocation,
                        unitsSold: +unitsSold,
                        revenue: +revenue,
                    };
                }).filter(d => !isNaN(d.unitsSold) && !isNaN(d.revenue));

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption({
                    title: { text: 'Scatterplot of Units Sold vs Revenue' },
                    tooltip: {},
                    xAxis: { name: 'Units Sold' },
                    yAxis: { name: 'Revenue' },
                    series: [{
                        type: 'scatter',
                        symbolSize: 5,
                        data: seriesData.map(item => [item.unitsSold, item.revenue]),
                    }],
                    brush: {
                        type: ['rect']
                    },
                    dataZoom: [{
                        type: 'inside',
                        start: 0,
                        end: 100
                    }]
                });

                chart.on('brushSelected', (params) => {
                    const selectedPoints = params.batch[0].areas[0].selected;
                    const selectedData = selectedPoints.map((point, index) => ({
                        ...seriesData[point.dataIndex],
                        index: index + 1
                    })).slice(0, 20);
                    updateTable(selectedData);
                });

                function updateTable(data) {
                    const table = document.getElementById('table');
                    table.innerHTML = `<table border=""1"">
                                          <tr>
                                              <th>#</th>
                                              <th>Date</th>
                                              <th>Store Location</th>
                                              <th>Units Sold</th>
                                              <th>Revenue</th>
                                          </tr>${
                                              data.map(d => `
                                              <tr>
                                                  <td>${d.index}</td>
                                                  <td>${d.date}</td>
                                                  <td>${d.storeLocation}</td>
                                                  <td>${d.unitsSold}</td>
                                                  <td>${d.revenue}</td>
                                              </tr>`).join('')
                                          }</table>`;
                }
            });
    </script>
</body>
</html>
```",Initialization Error,216,217
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a horizontal Bar Chart that shows all the data concerning Store Location and Units Sold, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Store Sales Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 70%; height: 400px; display: inline-block;""></div>
    <div id=""minimap"" style=""width: 25%; height: 200px; display: inline-block;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1);
            const storeLocations = [];
            const unitsSold = [];

            rows.forEach(row => {
                const cols = row.split(',');
                if (cols.length > 1) {
                    storeLocations.push(cols[1]); // Store Location
                    unitsSold.push(parseInt(cols[2])); // Units Sold
                }
            });

            // Main Chart
            const mainChart = echarts.init(document.getElementById('main'));
            mainChart.setOption({
                title: {
                    text: 'Units Sold by Store Location'
                },
                tooltip: {},
                xAxis: {
                    type: 'value'
                },
                yAxis: {
                    type: 'category',
                    data: [...new Set(storeLocations)]
                },
                series: [{
                    name: 'Units Sold',
                    type: 'bar',
                    data: unitsSold,
                }]
            });

            // Minimap
            const minimap = echarts.init(document.getElementById('minimap'));
            minimap.setOption({
                title: {
                    text: 'Overview of Units Sold'
                },
                tooltip: {},
                xAxis: {
                    type: 'value'
                },
                yAxis: {
                    type: 'category',
                    data: [...new Set(storeLocations)]
                },
                series: [{
                    name: 'Units Sold',
                    type: 'bar',
                    data: unitsSold,
                    itemStyle: {
                        opacity: 0.2 // Make minimap bars less prominent
                    }
                }]
            });
        });
    </script>
</body>
</html>
```",Correct,217,218
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Units Sold and Revenue, and a Bar Chart on the right that displays Store Location versus Units Sold.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.22.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.8.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
    <style>
        #vis {
            display: flex;
        }
        #scatterplot {
            width: 50%;
        }
        #barchart {
            width: 50%;
        }
    </style>
</head>
<body>
    <div id=""vis"">
        <div id=""scatterplot""></div>
        <div id=""barchart""></div>
    </div>

    <script>
        const scatterplotSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
                ""format"": { ""type"": ""csv"" }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": { ""field"": ""Units Sold"", ""type"": ""quantitative"" },
                ""y"": { ""field"": ""Revenue"", ""type"": ""quantitative"" },
                ""color"": { ""field"": ""Store Location"", ""type"": ""nominal"" }
            },
            ""width"": ""container"",
            ""height"": 300
        };

        const barChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
                ""format"": { ""type"": ""csv"" }
            },
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": { ""field"": ""Store Location"", ""type"": ""nominal"", ""axis"": { ""labelAngle"": 0 } },
                ""y"": { ""field"": ""Units Sold"", ""type"": ""quantitative"" }
            },
            ""width"": ""container"",
            ""height"": 300
        };

        vegaEmbed('#scatterplot', scatterplotSpec).then(result => {
            console.log(""Scatterplot rendered"");
        }).catch(console.error);

        vegaEmbed('#barchart', barChartSpec).then(result => {
            console.log(""Bar chart rendered"");
        }).catch(console.error);
    </script>
</body>
</html>
```",Correct,218,219
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Units Sold and Revenue, and a Bar Chart on the right that displays Store Location versus Units Sold. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Interactive Visualizations</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.8.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.25.1""></script>
    <style>
        .chart {
            display: inline-block;
            width: 45%;
            height: 400px;
        }
    </style>
</head>
<body>
    <div id=""scatterplot"" class=""chart""></div>
    <div id=""barchart"" class=""chart""></div>

    <script>
        const dataUrl = ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"";

        const scatterSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": { ""url"": dataUrl },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": { ""field"": ""Units Sold"", ""type"": ""quantitative"" },
                ""y"": { ""field"": ""Revenue"", ""type"": ""quantitative"" },
                ""color"": { ""field"": ""Store Location"", ""type"": ""nominal"" },
                ""tooltip"": [
                    { ""field"": ""Date"", ""type"": ""temporal"" },
                    { ""field"": ""Units Sold"", ""type"": ""quantitative"" },
                    { ""field"": ""Revenue"", ""type"": ""quantitative"" },
                    { ""field"": ""Profit"", ""type"": ""quantitative"" }
                ]
            },
            ""selection"": {
                ""brush"": {
                    ""type"": ""interval"",
                    ""encodings"": [""x"", ""y""]
                }
            },
            ""config"": {
                ""mark"": {
                    ""tooltip"": true
                }
            }
        };

        const barSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": { ""url"": dataUrl },
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": { ""field"": ""Store Location"", ""type"": ""nominal"", ""axis"": { ""labelAngle"": -45 } },
                ""y"": {
                    ""field"": ""Units Sold"",
                    ""type"": ""quantitative"",
                    ""aggregate"": ""sum""
                },
                ""color"": {
                    ""condition"": {
                        ""param"": ""brush"",
                        ""field"": ""Store Location"",
                        ""type"": ""nominal"",
                        ""legend"": null
                    },
                    ""value"": ""lightgray""
                }
            },
            ""transform"": [
                {
                    ""filter"": {""param"": ""brush"", ""empty"": false}
                }
            ]
        };

        vegaEmbed('#scatterplot', scatterSpec).then(function (result) {
            const view = result.view;

            view.addSignalListener('brush', function (name, value) {
                view.run();
            });
        });

        vegaEmbed('#barchart', barSpec);
    </script>
</body>
</html>
```",Initialization Error,219,220
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Sold , while the pie chart represents the distribution of Revenue.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.1.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.1""></script>
</head>
<body>

<div id=""line-chart""></div>
<div id=""pie-chart""></div>

<script>
    const lineChartSpec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
            ""format"": {""type"": ""csv""}
        },
        ""mark"": ""line"",
        ""encoding"": {
            ""x"": {""field"": ""Date"", ""type"": ""temporal"", ""title"": ""Date""},
            ""y"": {""field"": ""Units Sold"", ""type"": ""quantitative"", ""title"": ""Units Sold""}
        }
    };

    const pieChartSpec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
            ""format"": {""type"": ""csv""}
        },
        ""mark"": ""arc"",
        ""encoding"": {
            ""theta"": {""field"": ""Revenue"", ""type"": ""quantitative"", ""title"": ""Revenue""},
            ""color"": {""field"": ""Product Category"", ""type"": ""nominal"", ""title"": ""Product Category""}
        }
    };

    vegaEmbed('#line-chart', lineChartSpec);
    vegaEmbed('#pie-chart', pieChartSpec);
</script>

</body>
</html>
```",Correct,220,221
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Sold , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Interactive Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npmvega@5.21.0/build/vega.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npmvega-lite@5.12.0/build/vega-lite.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npmvega-embed@6.20.0/build/vega-embed.min.js""></script>
    <style>
        #vis {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        .chart {
            width: 80%;
            margin: 20px 0;
        }
    </style>
</head>
<body>
    <div id=""vis"">
        <div id=""line-chart"" class=""chart""></div>
        <div id=""pie-chart"" class=""chart""></div>
    </div>

    <script type=""text/javascript"">
        const dataUrl = ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"";

        const lineChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": dataUrl
            },
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Date"",
                    ""type"": ""temporal"",
                    ""title"": ""Date""
                },
                ""y"": {
                    ""field"": ""Units Sold"",
                    ""type"": ""quantitative"",
                    ""title"": ""Units Sold""
                }
            },
            ""selection"": {
                ""brush"": {
                    ""type"": ""interval"",
                    ""encodings"": [""x""]
                }
            }
        };

        const pieChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": dataUrl,
                ""transform"": [
                    {
                        ""filter"": {
                            ""selection"": ""brush""
                        }
                    },
                    {
                        ""aggregate"": [
                            {
                                ""op"": ""sum"",
                                ""field"": ""Revenue"",
                                ""as"": ""Total Revenue""
                            }
                        ],
                        ""groupby"": [""Product Category""]
                    }
                ]
            },
            ""mark"": ""arc"",
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Total Revenue"",
                    ""type"": ""quantitative"",
                    ""title"": ""Revenue""
                },
                ""color"": {
                    ""field"": ""Product Category"",
                    ""type"": ""nominal"",
                    ""title"": ""Product Category""
                }
            }
        };

        vegaEmbed('#line-chart', lineChartSpec);
        vegaEmbed('#pie-chart', pieChartSpec);
    </script>
</body>
</html>
```",Initialization Error,221,222
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Units Sold, Revenue, Profit, and Customer Visits. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Brushable Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.22.1""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.6.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2""></script>
</head>
<body>

<div id=""vis""></div>

<script>
    const spec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
            ""format"": {
                ""type"": ""csv""
            }
        },
        ""transform"": [
            {
                ""filter"": {""selection"": ""brush""}
            }
        ],
        ""selection"": {
            ""brush"": {
                ""type"": ""interval"", 
                ""encodings"": [""x"", ""y""]
            }
        },
        ""layer"": [
            {
                ""data"": {
                    ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
                    ""format"": {
                        ""type"": ""csv""
                    }
                },
                ""mark"": ""point"",
                ""encoding"": {
                    ""x"": {
                        ""field"": ""Units Sold"",
                        ""type"": ""quantitative""
                    },
                    ""y"": {
                        ""field"": ""Revenue"",
                        ""type"": ""quantitative""
                    },
                    ""color"": {
                        ""condition"": {
                            ""selection"": ""brush"",
                            ""fields"": [""Units Sold""],
                            ""value"": ""orange""
                        },
                        ""value"": ""lightgray""
                    },
                    ""tooltip"": [
                        {""field"": ""Profit"", ""type"": ""quantitative""},
                        {""field"": ""Customer Visits"", ""type"": ""quantitative""}
                    ]
                }
            },
            {
                ""data"": {
                    ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
                    ""format"": {
                        ""type"": ""csv""
                    }
                },
                ""mark"": ""point"",
                ""encoding"": {
                    ""x"": {
                        ""field"": ""Units Sold"",
                        ""type"": ""quantitative""
                    },
                    ""y"": {
                        ""field"": ""Profit"",
                        ""type"": ""quantitative""
                    },
                    ""color"": {
                        ""condition"": {
                            ""selection"": ""brush"",
                            ""fields"": [""Units Sold""],
                            ""value"": ""orange""
                        },
                        ""value"": ""lightgray""
                    },
                    ""tooltip"": [
                        {""field"": ""Revenue"", ""type"": ""quantitative""},
                        {""field"": ""Customer Visits"", ""type"": ""quantitative""}
                    ]
                }
            },
            {
                ""data"": {
                    ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
                    ""format"": {
                        ""type"": ""csv""
                    }
                },
                ""mark"": ""point"",
                ""encoding"": {
                    ""x"": {
                        ""field"": ""Revenue"",
                        ""type"": ""quantitative""
                    },
                    ""y"": {
                        ""field"": ""Customer Visits"",
                        ""type"": ""quantitative""
                    },
                    ""color"": {
                        ""condition"": {
                            ""selection"": ""brush"",
                            ""fields"": [""Units Sold""],
                            ""value"": ""orange""
                        },
                        ""value"": ""lightgray""
                    },
                    ""tooltip"": [
                        {""field"": ""Units Sold"", ""type"": ""quantitative""},
                        {""field"": ""Profit"", ""type"": ""quantitative""}
                    ]
                }
            }
        ]
    };

    vegaEmbed('#vis', spec).then(function(result) {
        // Visualization successfully created
    }).catch(console.error);
</script>

</body>
</html>
```",Initialization Error,222,223
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a brushable Scatterplot that visualizes the relationship between Units Sold and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot with Brushable Selection</title>
    <script type=""text/javascript"" src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script type=""text/javascript"" src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script type=""text/javascript"" src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
    <script type=""text/javascript"" src=""https://cdn.jsdelivr.net/npm/vega-embed@6.24.0""></script>
    <style>
        #vis {
            width: 60%;
            height: 500px;
            display: inline-block;
        }
        #table {
            width: 35%;
            height: 500px;
            display: inline-block;
            overflow-y: auto;
        }
    </style>
</head>
<body>
    <div id=""vis""></div>
    <div id=""table""></div>

    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": { 
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""width"": 400,
            ""height"": 300,
            ""scatter"": {
                ""mark"": ""point"",
                ""encoding"": {
                    ""x"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
                    ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
                    ""tooltip"": [
                        {""field"": ""Date"", ""type"": ""temporal""},
                        {""field"": ""Store Location"", ""type"": ""nominal""},
                        {""field"": ""Units Sold"", ""type"": ""quantitative""},
                        {""field"": ""Revenue"", ""type"": ""quantitative""},
                        {""field"": ""Profit"", ""type"": ""quantitative""},
                        {""field"": ""Operating Hours"", ""type"": ""quantitative""},
                        {""field"": ""Customer Visits"", ""type"": ""quantitative""},
                        {""field"": ""Product Category"", ""type"": ""nominal""}
                    ]
                }
            },
            ""selection"": {
                ""brush"": {
                    ""type"": ""interval"",
                    ""encodings"": [""x"", ""y""]
                }
            }
        };

        vegaEmbed('#vis', spec).then(result => {
            const view = result.view;

            // Update the table based on selection
            view.addSignalListener('brush', function(name, value) {
                const selectedData = view.data('table').filter(d => 
                    value && value.x && value.x[0] <= d['Units Sold'] && d['Units Sold'] <= value.x[1] &&
                    value.y && value.y[0] <= d['Revenue'] && d['Revenue'] <= value.y[1]
                ).slice(0, 20);

                let tableHtml = '<table border=""1""><tr><th>Date</th><th>Store Location</th><th>Units Sold</th><th>Revenue</th><th>Profit</th><th>Operating Hours</th><th>Customer Visits</th><th>Product Category</th></tr>';
                selectedData.forEach(d => {
                    tableHtml += `<tr>
                        <td>${d['Date']}</td>
                        <td>${d['Store Location']}</td>
                        <td>${d['Units Sold']}</td>
                        <td>${d['Revenue']}</td>
                        <td>${d['Profit']}</td>
                        <td>${d['Operating Hours']}</td>
                        <td>${d['Customer Visits']}</td>
                        <td>${d['Product Category']}</td>
                    </tr>`;
                });
                tableHtml += '</table>';

                document.getElementById('table').innerHTML = tableHtml;
            });
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,223,224
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a horizontal Bar Chart that shows all the data concerning Store Location and Units Sold, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Store Location Units Sold Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.3.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
    <style>
        #view {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
        }
        #minimap {
            width: 200px;
            height: 150px;
            margin-left: 20px;
        }
    </style>
</head>
<body>

<div id=""view"">
    <div id=""vis""></div>
    <div id=""minimap""></div>
</div>

<script>
    const mainChartSpec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
            ""format"": {""type"": ""csv""}
        },
        ""mark"": ""bar"",
        ""encoding"": {
            ""x"": {
                ""field"": ""Units Sold"",
                ""type"": ""quantitative""
            },
            ""y"": {
                ""field"": ""Store Location"",
                ""type"": ""ordinal""
            }
        }
    };

    const miniMapSpec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
            ""format"": {""type"": ""csv""}
        },
        ""mark"": ""bar"",
        ""encoding"": {
            ""x"": {
                ""field"": ""Units Sold"",
                ""type"": ""quantitative""
            },
            ""y"": {
                ""field"": ""Store Location"",
                ""type"": ""ordinal""
            },
            ""color"": {
                ""field"": ""Store Location"",
                ""type"": ""nominal"",
                ""legend"": null
            }
        },
        ""height"": 150
    };

    vegaEmbed('#vis', mainChartSpec);
    vegaEmbed('#minimap', miniMapSpec);
</script>

</body>
</html>
```",Initialization Error,224,225
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Units Sold vs Revenue</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        svg {
            border: 1px solid black;
        }
    </style>
</head>
<body>
    <h1>Scatterplot of Units Sold vs Revenue</h1>
    <svg width=""800"" height=""600""></svg>

    <script>
        const margin = {top: 20, right: 30, bottom: 40, left: 50},
              width = 800 - margin.left - margin.right,
              height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d[""Units Sold""] = +d[""Units Sold""];
                d[""Revenue""] = +d[""Revenue""];
            });

            const x = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Units Sold""])])
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Revenue""])])
                .range([height, 0]);

            svg.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .call(d3.axisLeft(y));

            svg.selectAll(""circle"")
                .data(data)
                .enter()
                .append(""circle"")
                .attr(""cx"", d => x(d[""Units Sold""]))
                .attr(""cy"", d => y(d[""Revenue""]))
                .attr(""r"", 5)
                .attr(""fill"", ""blue"")
                .attr(""opacity"", 0.6);
        });
    </script>
</body>
</html>
```",Correct,225,226
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Line Chart that visualizes the trend of Units Sold over the Date for each Store Location.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold over Date for Each Store Location</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke-width: 2;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d.Date = new Date(d.Date);
                d[""Units Sold""] = +d[""Units Sold""];
                d[""Store Location""] = d[""Store Location""];
            });

            const x = d3.scaleTime()
                .domain(d3.extent(data, d => d.Date))
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Units Sold""])])
                .nice()
                .range([height, 0]);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const line = d3.line()
                .x(d => x(d.Date))
                .y(d => y(d[""Units Sold""]));

            const storeLocations = Array.from(new Set(data.map(d => d[""Store Location""])));

            storeLocations.forEach((store, i) => {
                const storeData = data.filter(d => d[""Store Location""] === store);
                g.append(""path"")
                    .datum(storeData)
                    .attr(""class"", ""line"")
                    .attr(""d"", line)
                    .style(""stroke"", color(i));
            });

            g.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Correct,226,227
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Bar Chart of Units Sold</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path {
            display: none;
        }
        .axis--y line {
            stroke: #ccc;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
            margin = {top: 20, right: 30, bottom: 30, left: 40},
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            data.forEach(d => {
                if (d.Date === ""2021-01-01"") {
                    d[""Units Sold""] = +d[""Units Sold""];
                }
            });

            const groupedData = d3.nest()
                .key(d => d[""Store Location""])
                .rollup(v => d3.sum(v, d => d[""Units Sold""]))
                .entries(data.filter(d => d[""Units Sold""]));

            const x = d3.scaleBand()
                .domain(groupedData.map(d => d.key))
                .range([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([0, d3.max(groupedData, d => d.value)])
                .nice()
                .range([height, 0]);

            g.append(""g"")
                .selectAll("".bar"")
                .data(groupedData)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => x(d.key))
                .attr(""y"", d => y(d.value))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d.value));

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Initialization Error,227,228
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Pie Chart that visualizes the proportion of Units Sold contributed by each Store Location in 2021-01-01.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Pie Chart of Units Sold by Store Location</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .pie-chart {
            width: 400px;
            height: 400px;
            margin: auto;
        }
    </style>
</head>
<body>
    <svg class=""pie-chart""></svg>
    <script>
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            const filteredData = data.filter(d => d.Date === ""2021-01-01"");
            const locationUnits = d3.rollup(filteredData, v => d3.sum(v, d => +d[""Units Sold""]), d => d[""Store Location""]);
            
            const pieData = Array.from(locationUnits, ([key, value]) => ({ location: key, units: value }));

            const width = 400, height = 400, radius = Math.min(width, height) / 2;

            const svg = d3.select("".pie-chart"")
                .attr(""width"", width)
                .attr(""height"", height)
                .append(""g"")
                .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const pie = d3.pie().value(d => d.units);
            const arc = d3.arc().innerRadius(0).outerRadius(radius);

            const arcs = svg.selectAll("".arc"")
                .data(pie(pieData))
                .enter().append(""g"")
                .attr(""class"", ""arc"");

            arcs.append(""path"")
                .attr(""d"", arc)
                .attr(""fill"", d => color(d.data.location));

            arcs.append(""text"")
                .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                .attr(""dy"", "".35em"")
                .text(d => d.data.location);
        });
    </script>
</body>
</html>
```",Correct,228,229
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Donut Chart that visualizes the distribution of Units Sold among Store Location in 2021-01-01.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Donut Chart</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .arc {
            stroke: #fff;
        }
    </style>
</head>
<body>
    <h2>Units Sold Distribution - Store Location (2021-01-01)</h2>
    <svg width=""600"" height=""600""></svg>
    <script>
        const width = 600, height = 600, radius = Math.min(width, height) / 2;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            const filteredData = data.filter(d => d[""Date""] === ""2021-01-01"");

            const unitsByStore = d3.rollup(filteredData, v => d3.sum(v, d => +d[""Units Sold""]), d => d[""Store Location""]);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const pie = d3.pie()
                .value(d => d[1])
                .sort(null);

            const arc = d3.arc()
                .innerRadius(radius * 0.5)
                .outerRadius(radius - 10);

            const pieData = pie(Array.from(unitsByStore.entries()));

            svg.selectAll("".arc"")
                .data(pieData)
                .enter().append(""g"")
                .attr(""class"", ""arc"")
                .append(""path"")
                .attr(""d"", arc)
                .attr(""fill"", (d, i) => color(i));
        });
    </script>
</body>
</html>
```",Correct,229,230
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Coxcomb Chart(polar area chart) to compare the Units Sold of different Store Location in 2021-01-01.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coxcomb Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .arc {
            stroke: #fff;
        }
    </style>
</head>
<body>
    <svg width=""600"" height=""600""></svg>
    <script>
        const margin = {top: 20, right: 20, bottom: 20, left: 20},
              width = 600 - margin.left - margin.right,
              height = 600 - margin.top - margin.bottom,
              radius = Math.min(width, height) / 2;

        const color = d3.scaleOrdinal(d3.schemeCategory10);

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${width / 2 + margin.left}, ${height / 2 + margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            const filteredData = data.filter(d => d[""Date""] === ""2021-01-01"");

            const salesData = d3.rollup(filteredData, v => d3.sum(v, d => +d[""Units Sold""]), d => d[""Store Location""]);

            const arcs = Array.from(salesData, ([key, value]) => ({key, value}));

            const pie = d3.pie()
                .value(d => d.value)
                .sort(null);

            const arcGenerator = d3.arc()
                .innerRadius(0)
                .outerRadius(radius);

            const arcsData = pie(arcs);

            svg.selectAll("".arc"")
                .data(arcsData)
                .enter()
                .append(""path"")
                .attr(""class"", ""arc"")
                .attr(""d"", arcGenerator)
                .attr(""fill"", (d, i) => color(i))
                .attr(""transform"", ""rotate(90)"");
            
            svg.selectAll("".label"")
                .data(arcsData)
                .enter()
                .append(""text"")
                .attr(""transform"", d => `translate(${arcGenerator.centroid(d)})`)
                .attr(""dy"", ""0.35em"")
                .text(d => d.data.key)
                .style(""text-anchor"", ""middle"");
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,230,231
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Radar Chart to compare the Units Sold of different Store Location in 2021-01-01.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Radar Chart</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .axis {
            stroke: #999;
            stroke-width: 1;
        }
        .grid-line {
            stroke: #ccc;
            stroke-width: 1;
        }
    </style>
</head>
<body>
    <h1>Radar Chart of Units Sold</h1>
    <svg width=""500"" height=""500""></svg>
    <script>
        const width = 500, height = 500, margin = 50;
        const radarChartOptions = {
            w: width - margin,
            h: height - margin,
            maxRadius: Math.min(width, height) / 2 - margin,
        };
        
        const radarLine = d3.lineRadial()
            .radius(d => d.value)
            .angle((d, i) => i * (2 * Math.PI / Object.keys(dataValues).length));

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            const filteredData = data.filter(d => d.Date === ""2021-01-01"");
            const storeData = d3.rollup(filteredData, v => d3.sum(v, d => +d[""Units Sold""]), d => d[""Store Location""]);
            const storeLocations = Array.from(storeData.keys());
            const dataValues = storeLocations.map(loc => ({key: loc, value: storeData.get(loc)}));

            const svg = d3.select(""svg"")
                .append(""g"")
                .attr(""transform"", `translate(${radarChartOptions.w / 2}, ${radarChartOptions.h / 2})`);

            const radialAxis = d3.scaleBand()
                .domain(storeLocations)
                .range([0, Math.PI * 2])
                .padding(0.1);

            const radialScale = d3.scaleLinear()
                .domain([0, d3.max(dataValues, d => d.value)])
                .range([0, radarChartOptions.maxRadius]);

            for (let j = 0; j < 5; j++) {
                const r = (j + 1) * radarChartOptions.maxRadius / 5;
                svg.append(""circle"")
                    .attr(""r"", r)
                    .attr(""class"", ""grid-line"");
            }

            const axes = svg.selectAll("".axis"")
                .data(storeLocations)
                .enter()
                .append(""line"")
                .attr(""class"", ""axis"")
                .attr(""x1"", 0)
                .attr(""y1"", 0)
                .attr(""x2"", (d, i) => radialScale(d3.max(dataValues, d => d.value)) * Math.cos(radialAxis(d)))
                .attr(""y2"", (d, i) => radialScale(d3.max(dataValues, d => d.value)) * Math.sin(radialAxis(d)));

            svg.append(""path"")
                .datum(dataValues)
                .attr(""d"", radarLine)
                .attr(""fill"", ""lightblue"")
                .attr(""stroke"", ""blue"")
                .attr(""stroke-width"", 2)
                .attr(""fill-opacity"", 0.5);
        });
    </script>
</body>
</html>
```",Initialization Error,231,232
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Streamgraph that visualizes the changes of Units Sold over the Date for each Store Location.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Streamgraph of Units Sold</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .stream {
            opacity: 0.7;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 40 },
              width = +d3.select(""svg"").attr(""width"") - margin.left - margin.right,
              height = +d3.select(""svg"").attr(""height"") - margin.top - margin.bottom;

        const svg = d3.select(""svg"").append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d[""Date""] = new Date(d[""Date""]);
                d[""Units Sold""] = +d[""Units Sold""];
            });

            const nestedData = d3.groups(data, d => d[""Store Location""]);

            const stack = d3.stack()
                .keys(nestedData.map(d => d[0]))
                .value((d, key) => d.find(v => v[""Store Location""] === key)[""Units Sold""]);

            const series = stack(nestedData.map(d => {
                return { date: d[1][0][""Date""], values: d[1] };
            }));

            const x = d3.scaleTime()
                .domain(d3.extent(data, d => d[""Date""]))
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(series, s => d3.max(s, d => d[1]))])
                .range([height, 0]);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            svg.selectAll("".layer"")
                .data(series)
                .enter().append(""path"")
                .attr(""class"", ""layer"")
                .attr(""fill"", (d, i) => color(i))
                .attr(""d"", d3.area()
                    .x((d) => x(d.data.date))
                    .y0((d) => y(d[0]))
                    .y1((d) => y(d[1]))
                );

            svg.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Initialization Error,232,233
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Slopegraph to compare the Units Sold between 2021-01-04 and 2021-01-05 for each Store Location.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Slopegraph of Units Sold</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .line {
            stroke: #4682b4;
            stroke-width: 2;
        }
        .point {
            fill: #ff6347;
        }
        .axis line,
        .axis path {
            fill: none;
            shape-rendering: crispEdges;
        }
        .x.axis path {
            display: none;
        }
        .label {
            font: 10px sans-serif;
        }
    </style>
</head>
<body>
    <svg width=""600"" height=""400""></svg>
    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 50 },
              width = 600 - margin.left - margin.right,
              height = 400 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            const filteredData = data.filter(d => d['Date'] === '2021-01-04' || d['Date'] === '2021-01-05');
            const nestedData = d3.group(filteredData, d => d['Store Location']);

            const unitsSoldData = Array.from(nestedData, ([key, values]) => ({
                location: key,
                units: values.map(d => ({
                    date: d['Date'],
                    units: +d['Units Sold']
                }))
            }));

            const x = d3.scalePoint()
                .domain(['2021-01-04', '2021-01-05'])
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(unitsSoldData, d => d3.max(d.units, u => u.units))])
                .range([height, 0]);

            svg.append(""g"")
                .attr(""class"", ""axis x"")
                .attr(""transform"", `translate(0, ${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""axis y"")
                .call(d3.axisLeft(y));

            unitsSoldData.forEach(store => {
                const lineData = store.units.map(d => ({
                    date: d.date,
                    units: d.units
                }));

                svg.append(""line"")
                    .attr(""class"", ""line"")
                    .attr(""x1"", x(lineData[0].date))
                    .attr(""y1"", y(lineData[0].units))
                    .attr(""x2"", x(lineData[1].date))
                    .attr(""y2"", y(lineData[1].units));

                svg.selectAll(`.point-${store.location}`)
                    .data(lineData)
                    .enter()
                    .append(""circle"")
                    .attr(""class"", `point point-${store.location}`)
                    .attr(""cx"", d => x(d.date))
                    .attr(""cy"", d => y(d.units))
                    .attr(""r"", 5);
            });

            svg.selectAll("".label"")
                .data(unitsSoldData)
                .enter()
                .append(""text"")
                .attr(""class"", ""label"")
                .attr(""x"", x('2021-01-05'))
                .attr(""y"", d => y(d.units[1].units))
                .attr(""dy"", -3)
                .text(d => d.location);
        });
    </script>
</body>
</html>
```",Correct,233,234
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Heatmap that visualizes the Units Sold across Store Location and Dates.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold Heatmap</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .cell {
            stroke: #fff;
        }
        .tooltip {
            position: absolute;
            text-align: center;
            padding: 6px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <script>
        const margin = {top: 50, right: 0, bottom: 50, left: 50},
              width = 800 - margin.left - margin.right,
              height = 400 - margin.top - margin.bottom;

        const svg = d3.select(""body"").append(""svg"")
              .attr(""width"", width + margin.left + margin.right)
              .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
              .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            const nestedData = d3.rollup(data, v => d3.sum(v, d => +d[""Units Sold""]), d => d[""Store Location""], d => d[""Date""]);
            const storeLocations = Array.from(new Set(data.map(d => d[""Store Location""])));
            const dates = Array.from(new Set(data.map(d => d[""Date""])));

            const xScale = d3.scaleBand()
                .domain(dates)
                .range([0, width])
                .padding(0.05);

            const yScale = d3.scaleBand()
                .domain(storeLocations)
                .range([height, 0])
                .padding(0.05);

            const colorScale = d3.scaleSequential(d3.interpolateBlues)
                .domain([0, d3.max(Array.from(nestedData.values(), d => d3.max(Array.from(d.values()))))]);

            svg.selectAll("".cell"")
                .data(Array.from(nestedData, ([store, dateData]) => {
                    return Array.from(dateData, ([date, count]) => {
                        return {store, date, count};
                    });
                }).flat())
                .enter().append(""rect"")
                .attr(""class"", ""cell"")
                .attr(""x"", d => xScale(d.date))
                .attr(""y"", d => yScale(d.store))
                .attr(""width"", xScale.bandwidth())
                .attr(""height"", yScale.bandwidth())
                .attr(""fill"", d => colorScale(d.count))
                .on(""mouseover"", function(event, d) {
                    d3.select("".tooltip"")
                        .style(""opacity"", 1)
                        .text(`Store: ${d.store}, Date: ${d.date}, Units Sold: ${d.count}`);
                })
                .on(""mousemove"", function(event) {
                    d3.select("".tooltip"")
                        .style(""left"", (event.pageX + 5) + ""px"")
                        .style(""top"", (event.pageY - 28) + ""px"");
                })
                .on(""mouseout"", function() {
                    d3.select("".tooltip"").style(""opacity"", 0);
                });

            svg.append(""g"")
                .selectAll("".x-axis"")
                .data(dates)
                .enter().append(""text"")
                .attr(""x"", d => xScale(d) + xScale.bandwidth()/2)
                .attr(""y"", height + margin.bottom/2)
                .attr(""text-anchor"", ""middle"")
                .text(d => d);

            svg.append(""g"")
                .selectAll("".y-axis"")
                .data(storeLocations)
                .enter().append(""text"")
                .attr(""x"", -margin.left/2)
                .attr(""y"", d => yScale(d) + yScale.bandwidth()/2)
                .attr(""text-anchor"", ""end"")
                .text(d => d);

            d3.select(""body"").append(""div"")
                .attr(""class"", ""tooltip"")
                .style(""opacity"", 0);
        });
    </script>
</body>
</html>
```",Correct,234,235
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Stacked Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            stroke-width: 1px;
            stroke: #fff;
        }
        .axis -- x {
            font-size: 12px;
        }
        .axis -- y {
            font-size: 12px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = { top: 20, right: 30, bottom: 40, left: 40 };
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d['Units Sold'] = +d['Units Sold'];
                d['Revenue'] = +d['Revenue'];
                d['Profit'] = +d['Profit'];
                d['Customer Visits'] = +d['Customer Visits'];
            });

            const keys = ['Units Sold', 'Revenue', 'Profit'];

            const x = d3.scaleBand()
                .domain(data.map(d => d['Store Location']))
                .range([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Units Sold'] + d['Revenue'] + d['Profit'])])
                .nice()
                .range([height, 0]);

            const color = d3.scaleOrdinal()
                .domain(keys)
                .range(d3.schemeCategory10);

            const stacks = d3.stack()
                .keys(keys)(data);

            g.append(""g"")
                .selectAll(""g"")
                .data(stacks)
                .enter().append(""g"")
                .attr(""fill"", d => color(d.key))
                .selectAll(""rect"")
                .data(d => d)
                .enter().append(""rect"")
                .attr(""x"", d => x(d.data['Store Location']))
                .attr(""y"", d => y(d[1]))
                .attr(""height"", d => y(d[0]) - y(d[1]))
                .attr(""width"", x.bandwidth());

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Correct,235,236
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Horizontal Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Daily Sales Visualization</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>

    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"").then(data => {
            data = data.filter(d => d[""Date""] === ""2021-01-01"");
            data.forEach(d => {
                d[""Units Sold""] = +d[""Units Sold""];
            });

            const x = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Units Sold""])])
                .range([0, width]);

            const y = d3.scaleBand()
                .domain(data.map(d => d[""Store Location""]))
                .range([0, height])
                .padding(0.1);

            g.append(""g"")
                .selectAll("".bar"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", 0)
                .attr(""y"", d => y(d[""Store Location""]))
                .attr(""width"", d => x(d[""Units Sold""]))
                .attr(""height"", y.bandwidth());

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Correct,236,237
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Units Sold vs Revenue</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
</head>
<body>
    <div id=""scatterPlot"" style=""width: 100%; height: 500px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const unitsSold = [];
                const revenue = [];

                rows.forEach(row => {
                    const columns = row.split(',');
                    if (columns.length > 1) {
                        unitsSold.push(parseFloat(columns[2]));
                        revenue.push(parseFloat(columns[3]));
                    }
                });

                const scatterPlot = echarts.init(document.getElementById('scatterPlot'));
                const option = {
                    title: {
                        text: 'Scatterplot of Units Sold vs Revenue'
                    },
                    tooltip: {},
                    xAxis: {
                        name: 'Units Sold',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Revenue',
                        type: 'value'
                    },
                    series: [{
                        symbolSize: 10,
                        data: unitsSold.map((units, index) => [units, revenue[index]]),
                        type: 'scatter'
                    }]
                };
                scatterPlot.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,237,238
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Line Chart that visualizes the trend of Units Sold over the Date for each Store Location.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold Line Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv');
            const data = await response.text();
            const parsedData = parseCSV(data);
            drawChart(parsedData);
        }

        function parseCSV(data) {
            const lines = data.split('\n');
            const result = [];
            const headers = lines[0].split(',');
            for (let i = 1; i < lines.length; i++) {
                const currentLine = lines[i].split(',');
                if(currentLine.length === headers.length) {
                    const entry = {};
                    headers.forEach((header, index) => {
                        entry[header.trim()] = currentLine[index].trim();
                    });
                    result.push(entry);
                }
            }
            return result;
        }

        function drawChart(data) {
            const unitsSold = {};
            const dates = new Set();

            data.forEach(entry => {
                const date = entry['Date'];
                const store = entry['Store Location'];
                const units = parseInt(entry['Units Sold'], 10) || 0;

                dates.add(date);
                if (!unitsSold[store]) {
                    unitsSold[store] = [];
                }
                unitsSold[store].push({ date, units });
            });

            const series = Object.keys(unitsSold).map(store => {
                return {
                    name: store,
                    type: 'line',
                    data: Array.from(dates).map(date => {
                        const entry = unitsSold[store].find(e => e.date === date);
                        return entry ? entry.units : 0;
                    }),
                };
            });

            const option = {
                title: {
                    text: 'Units Sold Over Time',
                },
                tooltip: {
                    trigger: 'axis',
                },
                legend: {
                    data: Object.keys(unitsSold),
                },
                xAxis: {
                    type: 'category',
                    data: Array.from(dates),
                },
                yAxis: {
                    type: 'value',
                },
                series: series,
            };

            const chart = echarts.init(document.getElementById('main'));
            chart.setOption(option);
        }

        fetchData();
    </script>
</body>
</html>
```",Correct,238,239
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold by Store Location</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 600px;height:400px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const unitsSoldData = {};
                
                lines.forEach(line => {
                    const [date, storeLocation, unitsSold] = line.split(',');

                    if (date === '2021-01-01') {
                        unitsSoldData[storeLocation] = (unitsSoldData[storeLocation] || 0) + parseInt(unitsSold, 10);
                    }
                });

                const storeLocations = Object.keys(unitsSoldData);
                const unitsSold = storeLocations.map(location => unitsSoldData[location]);

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption({
                    title: {
                        text: 'Units Sold by Store Location on 2021-01-01'
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: storeLocations
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        name: 'Units Sold',
                        type: 'bar',
                        data: unitsSold
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,239,240
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Pie Chart that visualizes the proportion of Units Sold contributed by each Store Location in 2021-01-01.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold by Store Location on 2021-01-01</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 600px;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const salesData = {};

                rows.forEach(row => {
                    const cols = row.split(',');
                    if (cols[0] === '2021-01-01') {
                        const storeLocation = cols[1];
                        const unitsSold = parseInt(cols[2], 10);
                        if (salesData[storeLocation]) {
                            salesData[storeLocation] += unitsSold;
                        } else {
                            salesData[storeLocation] = unitsSold;
                        }
                    }
                });

                const seriesData = Object.entries(salesData).map(([store, units]) => ({ name: store, value: units }));

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);
                const option = {
                    title: {
                        text: 'Units Sold by Store Location on 2021-01-01',
                        subtext: 'Source: Daily Sales Data',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    series: [
                        {
                            name: 'Store Location',
                            type: 'pie',
                            radius: '50%',
                            data: seriesData,
                            emphasis: {
                                itemStyle: {
                                    shadowBlur: 10,
                                    shadowOffsetX: 0,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            }
                        }
                    ]
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,240,241
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Donut Chart that visualizes the distribution of Units Sold among Store Location in 2021-01-01.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Donut Chart Example</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 600px; height: 400px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const salesData = rows.map(row => {
                    const columns = row.split(',');
                    return {
                        date: columns[0],
                        storeLocation: columns[1],
                        unitsSold: parseInt(columns[2], 10),
                    };
                });

                const filteredData = salesData.filter(entry => entry.date === '2021-01-01');
                const storeSales = {};

                filteredData.forEach(entry => {
                    storeSales[entry.storeLocation] = (storeSales[entry.storeLocation] || 0) + entry.unitsSold;
                });

                const chartData = Object.entries(storeSales).map(([storeLocation, unitsSold]) => ({
                    name: storeLocation,
                    value: unitsSold
                }));

                const myChart = echarts.init(document.getElementById('main'));
                const option = {
                    title: {
                        text: 'Distribution of Units Sold on 2021-01-01',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    legend: {
                        orient: 'vertical',
                        left: 'left'
                    },
                    series: [
                        {
                            name: 'Units Sold',
                            type: 'pie',
                            radius: ['40%', '70%'],
                            avoidLabelOverlap: false,
                            label: {
                                show: false,
                                position: 'center'
                            },
                            emphasis: {
                                label: {
                                    show: true,
                                    fontSize: '30',
                                    fontWeight: 'bold'
                                }
                            },
                            labelLine: {
                                show: false
                            },
                            data: chartData,
                        }
                    ]
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,241,242
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Coxcomb Chart(polar area chart) to compare the Units Sold of different Store Location in 2021-01-01.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coxcomb Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 600px;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const filteredData = rows
                    .map(row => {
                        const cols = row.split(',');
                        return {
                            date: cols[0],
                            storeLocation: cols[1],
                            unitsSold: parseInt(cols[2]),
                        };
                    })
                    .filter(item => item.date === '2021-01-01');

                const storeLocations = [];
                const unitsSold = [];

                filteredData.forEach(item => {
                    storeLocations.push(item.storeLocation);
                    unitsSold.push(item.unitsSold);
                });

                const myChart = echarts.init(document.getElementById('main'));
                const option = {
                    title: {
                        text: 'Units Sold by Store Location on 2021-01-01',
                        left: 'center'
                    },
                    polar: {},
                    angleAxis: {
                        type: 'category',
                        data: storeLocations,
                        z: 10
                    },
                    radiusAxis: {
                        max: Math.max(...unitsSold) * 1.2
                    },
                    series: [{
                        type: 'bar',
                        data: unitsSold,
                        coordinateSystem: 'polar',
                        name: 'Units Sold',
                        itemStyle: {
                            color: '#3B87E6'
                        },
                        emphasis: {
                            itemStyle: {
                                color: '#F76C6C'
                            }
                        }
                    }],
                    tooltip: {
                        trigger: 'item',
                        formatter: function (params) {
                            return `${params.name}<br/>Units Sold: ${params.value}`;
                        }
                    }
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,242,243
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Radar Chart to compare the Units Sold of different Store Location in 2021-01-01.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Radar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 600px;
            height: 400px;
            margin: 0 auto;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1);
            const unitsSold = {};

            rows.forEach(row => {
                const columns = row.split(',');
                const date = columns[0];
                const storeLocation = columns[1];
                const units = parseInt(columns[2]);

                if (date === '2021-01-01' && !isNaN(units)) {
                    if (!unitsSold[storeLocation]) {
                        unitsSold[storeLocation] = 0;
                    }
                    unitsSold[storeLocation] += units;
                }
            });

            const storeLocations = Object.keys(unitsSold);
            const units = storeLocations.map(location => unitsSold[location]);

            const option = {
                title: {
                    text: 'Units Sold Comparison on 2021-01-01',
                    subtext: 'By Store Location',
                    left: 'center'
                },
                tooltip: {},
                radar: {
                    indicator: storeLocations.map(location => ({ name: location })),
                    center: ['50%', '50%'],
                    radius: '70%'
                },
                series: [{
                    name: 'Units Sold',
                    type: 'radar',
                    data: [{
                        value: units,
                        name: 'Units Sold'
                    }]
                }]
            };

            const chart = echarts.init(document.getElementById('main'));
            chart.setOption(option);
        });
    </script>
</body>
</html>
```",Correct,243,244
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Streamgraph that visualizes the changes of Units Sold over the Date for each Store Location.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Streamgraph of Units Sold by Store Location</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).filter(row => row);
                const parsedData = rows.map(row => {
                    const cols = row.split(',');
                    return {
                        Date: cols[0],
                        StoreLocation: cols[1],
                        UnitsSold: +cols[2],
                    };
                });

                const dates = [...new Set(parsedData.map(d => d.Date))];
                const storeLocations = [...new Set(parsedData.map(d => d.StoreLocation))];
                
                const seriesData = storeLocations.map(location => {
                    return {
                        name: location,
                        type: 'line',
                        stack: 'total',
                        areaStyle: {},
                        data: dates.map(date => {
                            const entry = parsedData.find(d => d.Date === date && d.StoreLocation === location);
                            return entry ? entry.UnitsSold : 0;
                        }),
                    };
                });
                
                const option = {
                    title: {
                        text: 'Units Sold Over Time by Store Location',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    legend: {
                        data: storeLocations,
                        left: 'left'
                    },
                    xAxis: {
                        type: 'category',
                        data: dates,
                        name: 'Date',
                        axisLabel: {
                            rotate: 45
                        }
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Units Sold'
                    },
                    series: seriesData
                };

                const myChart = echarts.init(document.getElementById('main'));
                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,244,245
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Slopegraph to compare the Units Sold between 2021-01-04 and 2021-01-05 for each Store Location.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Slopegraph of Units Sold</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
</head>
<body>
    <div id=""slopegraph"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const salesData = {};
                
                lines.forEach(line => {
                    const [date, storeLocation, unitsSold] = line.split(',');
                    if (date === '2021-01-04' || date === '2021-01-05') {
                        if (!salesData[storeLocation]) {
                            salesData[storeLocation] = {};
                        }
                        salesData[storeLocation][date] = parseInt(unitsSold);
                    }
                });

                const seriesData = [];
                const xAxisData = ['2021-01-04', '2021-01-05'];

                for (const store in salesData) {
                    seriesData.push({
                        name: store,
                        type: 'line',
                        data: [salesData[store]['2021-01-04'], salesData[store]['2021-01-05']],
                        label: {
                            show: true,
                            formatter: store
                        }
                    });
                }

                const myChart = echarts.init(document.getElementById('slopegraph'));
                myChart.setOption({
                    title: {
                        text: 'Units Sold Comparison on 2021-01-04 and 2021-01-05'
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: xAxisData
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: seriesData
                });
            });
    </script>
</body>
</html>
```",Correct,245,246
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Heatmap that visualizes the Units Sold across Store Location and Dates.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Heatmap Visualization</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
</head>
<body>
    <div id=""heatmap"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).filter(row => row);
                const dates = [...new Set(rows.map(row => row.split(',')[0]))];
                const storeLocations = [...new Set(rows.map(row => row.split(',')[1]))];
                
                const heatmapData = [];
                
                rows.forEach(row => {
                    const [date, storeLocation, unitsSold] = row.split(',');
                    const units = parseInt(unitsSold);
                    const dateIndex = dates.indexOf(date);
                    const storeIndex = storeLocations.indexOf(storeLocation);
                    heatmapData.push([storeIndex, dateIndex, units]);
                });

                const option = {
                    tooltip: {
                        position: 'top'
                    },
                    animation: false,
                    grid: {
                        height: '50%',
                        width: '50%',
                        top: '10%',
                        left: '10%'
                    },
                    xAxis: {
                        type: 'category',
                        data: dates,
                        name: 'Date'
                    },
                    yAxis: {
                        type: 'category',
                        data: storeLocations,
                        name: 'Store Location'
                    },
                    visualMap: {
                        min: 0,
                        max: Math.max(...heatmapData.map(item => item[2])),
                        calculable: true,
                        orient: 'horizontal',
                        left: 'center',
                        bottom: '15%',
                        inRange: {
                            color: ['#ffffb2', '#fd8d3c', '#e31a1c']
                        }
                    },
                    series: [{
                        name: 'Units Sold',
                        type: 'heatmap',
                        data: heatmapData,
                        label: {
                            show: true
                        },
                        emphasis: {
                            itemStyle: {
                                borderColor: '#333',
                                borderWidth: 1
                            }
                        }
                    }]
                };

                const heatmap = echarts.init(document.getElementById('heatmap'));
                heatmap.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,246,247
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Stacked Bar Chart</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%;height:500px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const categories = [...new Set(rows.map(row => row.split(',')[7]))];
                const dates = [...new Set(rows.map(row => row.split(',')[0]))];
                
                const seriesData = categories.map(category => {
                    return {
                        name: category,
                        type: 'bar',
                        stack: 'total',
                        data: dates.map(date => {
                            const totalUnits = rows.filter(row => {
                                const cols = row.split(',');
                                return cols[0] === date && cols[7] === category;
                            }).reduce((sum, row) => sum + parseInt(row.split(',')[2]), 0);
                            return totalUnits;
                        })
                    };
                });

                const option = {
                    title: {
                        text: 'Daily Sales Stacked Bar Chart',
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    legend: {
                        data: categories
                    },
                    xAxis: {
                        type: 'category',
                        data: dates
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: seriesData
                };

                const myChart = echarts.init(document.getElementById('main'));
                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,247,248
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Horizontal Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Horizontal Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 800px;height:400px;""></div>
    <script>
        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv');
            const data = await response.text();
            processData(data);
        }

        function processData(csv) {
            const lines = csv.split('\n').slice(1);
            const unitsSoldData = {};

            lines.forEach(line => {
                const [date, storeLocation, unitsSold] = line.split(',');
                if (date === '2021-01-01') {
                    unitsSoldData[storeLocation] = unitsSoldData[storeLocation] ? unitsSoldData[storeLocation] + parseInt(unitsSold) : parseInt(unitsSold);
                }
            });

            renderChart(unitsSoldData);
        }

        function renderChart(data) {
            const storeLocations = Object.keys(data);
            const unitsSold = Object.values(data);

            const chart = echarts.init(document.getElementById('main'));
            const option = {
                title: {
                    text: 'Units Sold for Each Store Location on 2021-01-01'
                },
                tooltip: {},
                xAxis: {
                    type: 'value',
                    name: 'Units Sold'
                },
                yAxis: {
                    type: 'category',
                    data: storeLocations
                },
                series: [{
                    name: 'Units Sold',
                    type: 'bar',
                    data: unitsSold,
                    itemStyle: {
                        color: '#4CAF50'
                    }
                }]
            };
            chart.setOption(option);
        }

        fetchData();
    </script>
</body>
</html>
```",Correct,248,249
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Units Sold vs Revenue</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.7.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.1""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            '$schema': 'https://vega.github.io/schema/vega-lite/v5.json',
            'data': {
                'url': 'https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv',
                'format': {'type': 'csv'}
            },
            'mark': 'point',
            'encoding': {
                'x': {
                    'field': 'Units Sold',
                    'type': 'quantitative'
                },
                'y': {
                    'field': 'Revenue',
                    'type': 'quantitative'
                }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Correct,249,250
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Line Chart that visualizes the trend of Units Sold over the Date for each Store Location.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold Trend Line Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.3.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.1/dist/vega-embed.min.js""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Date"",
                    ""type"": ""temporal"",
                    ""title"": ""Date""
                },
                ""y"": {
                    ""field"": ""Units Sold"",
                    ""type"": ""quantitative"",
                    ""title"": ""Units Sold""
                },
                ""color"": {
                    ""field"": ""Store Location"",
                    ""type"": ""nominal"",
                    ""title"": ""Store Location""
                }
            },
            ""scales"": [
                {
                    ""name"": ""xscale"",
                    ""type"": ""time"",
                    ""domain"": {""data"": ""source"", ""field"": ""Date""},
                    ""range"": ""width""
                },
                {
                    ""name"": ""yscale"",
                    ""domain"": {""data"": ""source"", ""field"": ""Units Sold""},
                    ""nice"": true,
                    ""range"": ""height""
                }
            ],
            ""width"": 800,
            ""height"": 400,
            ""title"": ""Trend of Units Sold Over Time by Store Location""
        };

        vegaEmbed('#vis', spec).then(function(result) {
            // Access the Vega view instance as result.view
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,250,251
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Bar Chart of Units Sold</title>
    <script src=""https://cdn.jsdelivr.net/npm.vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm.vega-lite@5.6.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.22.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""transform"": [
                {
                    ""filter"": {""field"": ""Date"", ""equal"": ""2021-01-01""}
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Store Location"",
                    ""type"": ""ordinal"",
                    ""title"": ""Store Location""
                },
                ""y"": {
                    ""field"": ""Units Sold"",
                    ""type"": ""quantitative"",
                    ""title"": ""Units Sold""
                }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Initialization Error,251,252
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Pie Chart that visualizes the proportion of Units Sold contributed by each Store Location in 2021-01-01.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <title>Pie Chart Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script type=""text/javascript"">
        const yourData = {
            ""values"": [{""Date"":""2021-01-01"",""Store Location"":""A"",""Units Sold"":100,""Revenue"":1000,""Profit"":200,""Operating Hours"":8,""Customer Visits"":50,""Product Category"":""Electronics""},
                        {""Date"":""2021-01-01"",""Store Location"":""B"",""Units Sold"":150,""Revenue"":1500,""Profit"":300,""Operating Hours"":8,""Customer Visits"":70,""Product Category"":""Groceries""},
                        {""Date"":""2021-01-01"",""Store Location"":""C"",""Units Sold"":50,""Revenue"":500,""Profit"":100,""Operating Hours"":8,""Customer Visits"":30,""Product Category"":""Clothes""}]
        };

        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A pie chart showing the Units Sold by Store Location on 2021-01-01."",
            ""data"": {
                ""values"": yourData.values
            },
            ""mark"": ""arc"",
            ""encoding"": {
                ""theta"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
                ""color"": {""field"": ""Store Location"", ""type"": ""nominal""}
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Correct,252,253
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Donut Chart that visualizes the distribution of Units Sold among Store Location in 2021-01-01.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <title>Donut Chart of Units Sold by Store Location</title>
</head>
<body>
    <div id=""vis""></div>
    <script type=""text/javascript"">
        const yourData = ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"";

        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""width"": 400,
            ""height"": 400,
            ""data"": {
                ""url"": yourData,
                ""format"": {
                    ""type"": ""csv""
                },
                ""transform"": [
                    {
                        ""filter"": {""field"": ""Date"", ""equal"": ""2021-01-01""}
                    },
                    {
                        ""aggregate"": [
                            {""op"": ""sum"", ""field"": ""Units Sold"", ""as"": ""Total Units Sold""}
                        ],
                        ""groupby"": [""Store Location""]
                    }
                ]
            },
            ""mark"": {""type"": ""arc"", ""innerRadius"": 100},
            ""encoding"": {
                ""theta"": {""field"": ""Total Units Sold"", ""type"": ""quantitative""},
                ""color"": {""field"": ""Store Location"", ""type"": ""nominal""}
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Initialization Error,253,254
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Coxcomb Chart(polar area chart) to compare the Units Sold of different Store Location in 2021-01-01.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coxcomb Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.22.0/build/vega.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.6.0/build/vega-lite.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0/build/vega-embed.min.js""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""field"": ""Date"",
                        ""equal"": ""2021-01-01""
                    }
                },
                {
                    ""calculate"": ""datum.Units Sold"",
                    ""as"": ""Units""
                }
            ],
            ""mark"": ""arc"",
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Units"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Store Location"",
                    ""type"": ""nominal""
                },
                ""radius"": {
                    ""value"": 100
                }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Initialization Error,254,255
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Radar Chart to compare the Units Sold of different Store Location in 2021-01-01.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Radar Chart with Vega-Lite</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
          ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
          ""description"": ""Radar Chart comparing Units Sold at different store locations on 2021-01-01."",
          ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
            ""format"": {
              ""type"": ""csv""
            }
          },
          ""transform"": [
            {
              ""filter"": ""datum['Date'] === '2021-01-01'""
            },
            {
              ""aggregate"": [
                {
                  ""op"": ""sum"",
                  ""field"": ""Units Sold"",
                  ""as"": ""Total Units Sold""
                }
              ],
              ""groupby"": [""Store Location""]
            }
          ],
          ""mark"": ""line"",
          ""encoding"": {
            ""theta"": {
              ""field"": ""Store Location"",
              ""type"": ""nominal""
            },
            ""radius"": {
              ""field"": ""Total Units Sold"",
              ""type"": ""quantitative""
            },
            ""color"": {
              ""field"": ""Store Location"",
              ""type"": ""nominal""
            }
          }
        };

        vegaEmbed('#vis', spec).then(function(result) {
          // Callback after the visualization is rendered
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,255,256
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Streamgraph that visualizes the changes of Units Sold over the Date for each Store Location.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Streamgraph Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""Streamgraph showing Units Sold over Date for each Store Location."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""area"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Date"",
                    ""type"": ""temporal"",
                    ""axis"": {
                        ""title"": ""Date""
                    }
                },
                ""y"": {
                    ""field"": ""Units Sold"",
                    ""type"": ""quantitative"",
                    ""axis"": {
                        ""title"": ""Units Sold""
                    }
                },
                ""color"": {
                    ""field"": ""Store Location"",
                    ""type"": ""nominal"",
                    ""legend"": {
                        ""title"": ""Store Location""
                    }
                },
                ""order"": {
                    ""field"": ""Store Location""
                }
            },
            ""theme"": ""dark""
        };

        vegaEmbed('#vis', spec)
            .then(result => {
                // Access the Vega view instance
                console.log(result);
            })
            .catch(console.error);
    </script>
</body>
</html>
```",Correct,256,257
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Slopegraph to compare the Units Sold between 2021-01-04 and 2021-01-05 for each Store Location.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""or"": [
                            {""field"": ""Date"", ""equal"": ""2021-01-04""},
                            {""field"": ""Date"", ""equal"": ""2021-01-05""}
                        ]
                    }
                },
                {
                    ""groupby"": [""Store Location"", ""Date""],
                    ""aggregate"": [{""op"": ""sum"", ""field"": ""Units Sold"", ""as"": ""Units Sold""}]
                },
                {
                    ""fold"": [""2021-01-04"", ""2021-01-05""],
                    ""as"": [""Date"", ""Units Sold""]
                }
            ],
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Date"",
                    ""type"": ""ordinal"",
                    ""axis"": {""title"": ""Date""}
                },
                ""y"": {
                    ""field"": ""Units Sold"",
                    ""type"": ""quantitative"",
                    ""axis"": {""title"": ""Units Sold""}
                },
                ""color"": {
                    ""field"": ""Store Location"",
                    ""type"": ""nominal"",
                    ""legend"": {""title"": ""Store Location""}
                },
                ""tooltip"": [
                    {""field"": ""Store Location"", ""title"": ""Store""},
                    {""field"": ""Units Sold"", ""title"": ""Units Sold""},
                    {""field"": ""Date"", ""title"": ""Date""}
                ]
            }
        };

        window.onload = function() {
            vegaEmbed('#vis', spec);
        };
    </script>
</head>
<body>
    <div id=""vis""></div>
</body>
</html>
```",Unexpected Initial Result,257,258
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Heatmap that visualizes the Units Sold across Store Location and Dates.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Vega-Lite Heatmap</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.7.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.27.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script type=""text/plain"" id=""vl"">
        {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A heatmap of units sold across store locations and dates."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""rect"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Date"",
                    ""type"": ""ordinal"",
                    ""title"": ""Date""
                },
                ""y"": {
                    ""field"": ""Store Location"",
                    ""type"": ""ordinal"",
                    ""title"": ""Store Location""
                },
                ""color"": {
                    ""field"": ""Units Sold"",
                    ""type"": ""quantitative"",
                    ""title"": ""Units Sold"",
                    ""scale"": {
                        ""scheme"": ""blues""
                    }
                }
            },
            ""width"": 800,
            ""height"": 400
        }
    </script>
    <script>
        const spec = document.getElementById('vl').textContent;
        vegaEmbed('#vis', spec).then(result => {
            // Successfully embedded the visualization
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,258,259
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <style>
        #vis {
            width: 600px;
            height: 400px;
        }
    </style>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
                ""format"": { ""type"": ""csv"" }
            },
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Date"",
                    ""type"": ""temporal"",
                    ""title"": ""Date""
                },
                ""y"": {
                    ""aggregate"": ""sum"",
                    ""field"": ""Units Sold"",
                    ""title"": ""Units Sold""
                },
                ""color"": {
                    ""field"": ""Product Category"",
                    ""type"": ""nominal"",
                    ""title"": ""Product Category""
                }
            },
            ""width"": 600,
            ""height"": 400
        };

        vegaEmbed('#vis', spec).then(result => {
            // Visualization rendering succeeded
        }).catch(console.error);
    </script>
</body>
</html>
```",Correct,259,260
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category
Your task is to create a Horizontal Bar Chart that visualizes the Units Sold for each Store Location in 2021-01-01.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv

The data table contains the following columns: Date,Store Location,Units Sold,Revenue,Profit,Operating Hours,Customer Visits,Product Category",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <title>Units Sold by Store Location</title>
    <script type=""text/javascript"" src=""https://cdn.jsdelivr.net/npm/vue@2.6.12""></script>
    <script type=""text/javascript"" src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script type=""text/javascript"" src=""https://cdn.jsdelivr.net/npm/vega-lite@5.5.0""></script>
    <script type=""text/javascript"" src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2""></script>
</head>
<body>
    <div id=""vis""></div>
    <script type=""text/javascript"">
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A horizontal bar chart showing Units Sold for each Store Location on 2021-01-01."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/f31f77b8b8aa4d1898e5bd00dba3959f/raw/a79d3da79d62a68bdd96d94b4e985d67c336fd2c/Daily%2520Sales.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Date == '2021-01-01'""
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""y"": {
                    ""field"": ""Store Location"",
                    ""type"": ""nominal"",
                    ""sort"": ""-x""
                },
                ""x"": {
                    ""field"": ""Units Sold"",
                    ""type"": ""quantitative""
                }
            }
        };

        vegaEmbed('#vis', spec).catch(console.error);
    </script>
</body>
</html>
```",Correct,260,261
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot that visualizes the relationship between Enrollment Number and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment vs Revenue Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .dot {
            fill: steelblue;
        }
        .dot:hover {
            fill: orange;
        }
        .axis--x,
        .axis--y {
            font: 10px sans-serif;
        }
        .tooltip {
            position: absolute;
            text-align: center;
            padding: 5px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 1px solid gray;
            border-radius: 4px;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <div class=""tooltip"" style=""opacity: 0;""></div>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            data.forEach(d => {
                d[""Enrollment Number""] = +d[""Enrollment Number""];
                d[""Revenue""] = +d[""Revenue""];
            });

            const x = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Enrollment Number""])])
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Revenue""])])
                .range([height, 0]);

            const xAxis = d3.axisBottom(x);
            const yAxis = d3.axisLeft(y);

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(xAxis);

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(yAxis);

            const tooltip = d3.select("".tooltip"");

            g.selectAll("".dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => x(d[""Enrollment Number""]))
                .attr(""cy"", d => y(d[""Revenue""]))
                .attr(""r"", 5)
                .on(""mouseover"", (event, d) => {
                    tooltip.transition().duration(200).style(""opacity"", .9);
                    tooltip.html(`Enrollment: ${d[""Enrollment Number""]}<br>Revenue: ${d[""Revenue""]}`)
                        .style(""left"", (event.pageX + 5) + ""px"")
                        .style(""top"", (event.pageY - 28) + ""px"");
                })
                .on(""mouseout"", () => {
                    tooltip.transition().duration(500).style(""opacity"", 0);
                });
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,261,262
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot that visualizes the relationship between Enrollment Number and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment vs Revenue Scatterplot</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .dot {
            stroke: #333;
            stroke-width: 1.5px;
        }
        .brush .selection {
            fill: steelblue;
            opacity: 0.5;
        }
        .tooltip {
            position: absolute;
            text-align: center;
            padding: 5px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>
    <script>
        const margin = { top: 20, right: 30, bottom: 40, left: 40 },
            width = 800 - margin.left - margin.right,
            height = 500 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        const xAxis = d3.axisBottom(x);
        const yAxis = d3.axisLeft(y);

        const brush = d3.brush().extent([[0, 0], [width, height]])
            .on(""brush end"", brushed);

        svg.append(""g"")
            .attr(""class"", ""brush"")
            .call(brush);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            data.forEach(d => {
                d['Enrollment Number'] = +d['Enrollment Number'];
                d['Revenue'] = +d['Revenue'];
            });

            x.domain(d3.extent(data, d => d['Enrollment Number'])).nice();
            y.domain(d3.extent(data, d => d['Revenue'])).nice();

            svg.append(""g"")
                .attr(""class"", ""x-axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(xAxis);

            svg.append(""g"")
                .attr(""class"", ""y-axis"")
                .call(yAxis);

            const dot = svg.selectAll("".dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => x(d['Enrollment Number']))
                .attr(""cy"", d => y(d['Revenue']))
                .attr(""r"", 5)
                .attr(""fill"", ""steelblue"")
                .on(""mouseover"", function(event, d) {
                    tooltip.transition().duration(200).style(""opacity"", .9);
                    tooltip.html(`Enrollment: ${d['Enrollment Number']}<br>Revenue: ${d['Revenue']}`)
                        .style(""left"", (event.pageX + 5) + ""px"")
                        .style(""top"", (event.pageY - 28) + ""px"");
                })
                .on(""mouseout"", function() {
                    tooltip.transition().duration(500).style(""opacity"", 0);
                });

            const tooltip = d3.select(""body"").append(""div"")
                .attr(""class"", ""tooltip"")
                .style(""opacity"", 0);

            function brushed(event) {
                const selection = event.selection;
                if (selection) {
                    const x0 = x.invert(selection[0][0]);
                    const x1 = x.invert(selection[1][0]);
                    const y0 = y.invert(selection[1][1]);
                    const y1 = y.invert(selection[0][1]);

                    dot.classed(""selected"", d => x0 <= d['Enrollment Number'] && d['Enrollment Number'] <= x1 && y0 <= d['Revenue'] && d['Revenue'] <= y1);
                }
            }
        });
    </script>
</body>
</html>
```",Execution Error,262,263
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot that visualizes the relationship between Enrollment Number and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Enrollment Number vs Revenue</title>
    <style>
        .scatterplot {
            font-family: Arial, sans-serif;
        }
        .axis path,
        .axis line {
            fill: none;
            shape-rendering: crispEdges;
        }
        .dot {
            fill: steelblue;
            opacity: 0.7;
        }
    </style>
</head>
<body>
    <div class=""scatterplot""></div>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 40 },
            width = 960 - margin.left - margin.right,
            height = 500 - margin.top - margin.bottom;

        const svg = d3.select("".scatterplot"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            data.forEach(d => {
                d['Enrollment Number'] = +d['Enrollment Number'];
                d.Revenue = +d.Revenue;
            });

            const x = d3.scaleLinear()
                .domain(d3.extent(data, d => d['Enrollment Number'])).nice()
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.Revenue)]).nice()
                .range([height, 0]);

            const xAxis = d3.axisBottom(x);
            const yAxis = d3.axisLeft(y);

            svg.append(""g"")
                .attr(""class"", ""axis x-axis"")
                .attr(""transform"", `translate(0, ${height})`)
                .call(xAxis);

            svg.append(""g"")
                .attr(""class"", ""axis y-axis"")
                .call(yAxis);

            svg.selectAll("".dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => x(d['Enrollment Number']))
                .attr(""cy"", d => y(d.Revenue))
                .attr(""r"", 5);

            const zoom = d3.zoom()
                .scaleExtent([0.5, 10])
                .on(""zoom"", (event) => {
                    const newXScale = event.transform.rescaleX(x);
                    const newYScale = event.transform.rescaleY(y);
                    svg.selectAll("".dot"")
                        .attr(""cx"", d => newXScale(d['Enrollment Number']))
                        .attr(""cy"", d => newYScale(d.Revenue));
                    svg.select("".x-axis"").call(xAxis.scale(newXScale));
                    svg.select("".y-axis"").call(yAxis.scale(newYScale));
                });

            svg.call(zoom);
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,263,264
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Enrollment Number and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment vs Revenue Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter {
            fill-opacity: 0.7;
        }
    </style>
</head>
<body>
    <h1>Scatterplot of Enrollment Number vs Revenue</h1>
    <svg width=""800"" height=""600""></svg>
    <script>
        const margin = { top: 20, right: 30, bottom: 30, left: 40 },
              width = 800 - margin.left - margin.right,
              height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""svg"").append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            data.forEach(d => {
                d['Enrollment Number'] = +d['Enrollment Number'];
                d.Revenue = +d.Revenue;
            });

            const x = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Enrollment Number'])])
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.Revenue)])
                .range([height, 0]);

            const tooltip = d3.select(""body"").append(""div"")
                .style(""position"", ""absolute"")
                .style(""visibility"", ""hidden"")
                .style(""background"", ""lightgray"")
                .style(""border"", ""1px solid black"")
                .style(""padding"", ""5px"");

            svg.append(""g"")
                .attr(""class"", ""x-axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""y-axis"")
                .call(d3.axisLeft(y));

            svg.selectAll("".scatter"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""scatter"")
                .attr(""cx"", d => x(d['Enrollment Number']))
                .attr(""cy"", d => y(d.Revenue))
                .attr(""r"", 5)
                .on(""mouseover"", function (event, d) {
                    tooltip.html(`Enrollment: ${d['Enrollment Number']}<br>Revenue: ${d.Revenue}`)
                        .style(""visibility"", ""visible"");
                })
                .on(""mousemove"", function (event) {
                    tooltip.style(""top"", (event.pageY - 10) + ""px"")
                           .style(""left"", (event.pageX + 10) + ""px"");
                })
                .on(""mouseout"", function () {
                    tooltip.style(""visibility"", ""hidden"");
                })
                .on(""click"", function (event, d) {
                    window.open(`https://www.google.com/search?q=${d['Education Level']} enrollment`, '_blank');
                });
        });
    </script>
</body>
</html>
```",Correct,264,265
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot with query widgets showing the Enrollment Number and Revenue of the given dataset. Add a slider to represent the Quarter.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot with D3</title>
    <style>
        .scatter {
            fill-opacity: 0.7;
            stroke: #333;
            stroke-width: 1px;
        }
        .axis {
            font: 10px sans-serif;
            fill: #333;
        }
    </style>
</head>
<body>
    <div>
        <label for=""quarterRange"">Quarter:</label>
        <input type=""range"" id=""quarterRange"" min=""1"" max=""4"" value=""1"">
    </div>
    <svg width=""800"" height=""600""></svg>

    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <script>
        const svg = d3.select(""svg"");
        const margin = {top: 20, right: 30, bottom: 40, left: 40},
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        const xAxis = d3.axisBottom(x);
        const yAxis = d3.axisLeft(y);

        const quarterSlider = d3.select(""#quarterRange"");

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            data.forEach(d => {
                d[""Enrollment Number""] = +d[""Enrollment Number""];
                d.Revenue = +d.Revenue;
                d.Quarter = +d.Quarter;
            });

            quarterSlider.on(""input"", function() {
                const selectedQuarter = +this.value;
                update(selectedQuarter);
            });

            function update(selectedQuarter) {
                const filteredData = data.filter(d => d.Quarter === selectedQuarter);

                x.domain([0, d3.max(filteredData, d => d[""Enrollment Number""])]);
                y.domain([0, d3.max(filteredData, d => d.Revenue)]);

                g.selectAll("".dot"").remove();
                g.selectAll("".dot"")
                    .data(filteredData)
                    .enter().append(""circle"")
                    .attr(""class"", ""dot"")
                    .attr(""cx"", d => x(d[""Enrollment Number""]))
                    .attr(""cy"", d => y(d.Revenue))
                    .attr(""r"", 5)
                    .attr(""fill"", ""blue"");

                g.selectAll("".axis"").remove();

                g.append(""g"")
                    .attr(""class"", ""axis axis--x"")
                    .attr(""transform"", `translate(0,${height})`)
                    .call(xAxis);

                g.append(""g"")
                    .attr(""class"", ""axis axis--y"")
                    .call(yAxis);
            }

            update(1); // Initial update for the first quarter
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,265,266
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot showing the Enrollment Number of Graduate. Add animated transitions that connect these points using lines in order.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter circle {
            fill: steelblue;
        }
        .line {
            fill: none;
            stroke: orange;
            stroke-width: 2;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = { top: 20, right: 30, bottom: 30, left: 40 };
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            data = data.filter(d => d[""Education Level""] === ""Graduate"")
                       .map(d => ({
                           Quarter: d.Quarter,
                           Enrollment: +d[""Enrollment Number""],
                           Revenue: +d.Revenue,
                           Operating_Costs: +d[""Operating Costs""],
                           Profit: +d.Profit,
                           Average_Tuition: +d[""Average Tuition""],
                           Number_of_Staff: +d[""Number of Staff""],
                           Graduation_Rate: +d[""Graduation Rate""]
                       }));

            const x = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.Enrollment)]).nice()
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.Graduation_Rate)]).nice()
                .range([height, 0]);

            g.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .call(d3.axisLeft(y));

            const line = d3.line()
                .x(d => x(d.Enrollment))
                .y(d => y(d.Graduation_Rate));

            g.append(""path"")
                .datum(data)
                .attr(""class"", ""line"")
                .attr(""d"", line);

            const circles = g.selectAll(""circle"")
                .data(data)
                .enter().append(""circle"")
                .attr(""cx"", d => x(d.Enrollment))
                .attr(""cy"", d => y(d.Graduation_Rate))
                .attr(""r"", 5);

            circles.transition()
                .duration(1000)
                .attr(""r"", 8)
                .transition()
                .duration(1000)
                .attr(""r"", 5);

            circles.on(""mouseover"", function(event, d) {
                d3.select(this).transition()
                    .duration(200)
                    .attr(""r"", 10)
                    .attr(""fill"", ""red"");
            }).on(""mouseout"", function(event, d) {
                d3.select(this).transition()
                    .duration(200)
                    .attr(""r"", 5)
                    .attr(""fill"", ""steelblue"");
            });

        });
    </script>
</body>
</html>
```",Correct,266,267
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Enrollment Number of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Number Line Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke-width: 2px;
        }
        .highlight {
            stroke-width: 4px;
        }
        .axis path,
        .axis line {
            fill: none;
            shape-rendering: crispEdges;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = { top: 20, right: 30, bottom: 30, left: 40 };
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            const allKeys = Array.from(new Set(data.map(d => d[""Education Level""])));
            const parseTime = d3.timeParse(""%Y-%m-%d"");
            const yAccessor = d => +d[""Enrollment Number""];

            data.forEach(d => {
                d[""Quarter""] = parseTime(d[""Quarter""]);
                d[""Enrollment Number""] = +d[""Enrollment Number""];
            });

            const x = d3.scaleTime()
                .domain(d3.extent(data, d => d[""Quarter""]))
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Enrollment Number""])])
                .range([height, 0]);

            const line = d3.line()
                .x(d => x(d[""Quarter""]))
                .y(d => y(d[""Enrollment Number""]));

            const color = d3.scaleOrdinal(d3.schemeCategory10)
                .domain(allKeys);

            const groups = g.selectAll("".line-group"")
                .data(allKeys)
                .enter().append(""g"")
                .attr(""class"", ""line-group"");

            groups.append(""path"")
                .attr(""class"", ""line"")
                .attr(""d"", d => line(data.filter(v => v[""Education Level""] === d)))
                .attr(""stroke"", d => color(d))
                .on(""mouseover"", function(event, d) {
                    d3.select(this).classed(""highlight"", true);
                })
                .on(""mouseout"", function(event, d) {
                    d3.select(this).classed(""highlight"", false);
                });

            g.append(""g"")
                .attr(""class"", ""axis axis-x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis-y"")
                .call(d3.axisLeft(y));

            g.append(""text"")
                .attr(""transform"", ""rotate(-90)"")
                .attr(""y"", 0 - margin.left)
                .attr(""x"", 0 - (height / 2))
                .attr(""dy"", ""1em"")
                .style(""text-anchor"", ""middle"")
                .text(""Enrollment Number"");

            g.append(""text"")
                .attr(""transform"", `translate(${width / 2} ,${height + margin.top})`)
                .style(""text-anchor"", ""middle"")
                .text(""Quarter"");
        });
    </script>
</body>
</html>
```",Execution Error,267,268
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }

        .bar:hover {
            fill: orange;
        }

        .axis--x path,
        .axis--x line,
        .axis--y path,
        .axis--y line {
            fill: none;
            shape-rendering: crispEdges;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>

    <script>
        const svg = d3.select(""svg""),
            margin = { top: 20, right: 30, bottom: 40, left: 40 },
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            data.forEach(d => {
                d[""Enrollment Number""] = +d[""Enrollment Number""];
                d[""Quarter""] = new Date(d[""Quarter""]);
            });
            
            const filteredData = data.filter(d => d[""Quarter""].getFullYear() === 2021 && d[""Quarter""].getMonth() === 3);

            const x = d3.scaleBand()
                .domain(filteredData.map(d => d[""Education Level""]))
                .range([0, width])
                .padding(0.1);
            
            const y = d3.scaleLinear()
                .domain([0, d3.max(filteredData, d => d[""Enrollment Number""])])
                .nice()
                .range([height, 0]);

            const xAxis = g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            const yAxis = g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            g.selectAll("".bar"")
                .data(filteredData)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => x(d[""Education Level""]))
                .attr(""y"", d => y(d[""Enrollment Number""]))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d[""Enrollment Number""]));

            svg.call(d3.zoom()
                .scaleExtent([0.5, 10])
                .on(""zoom"", (event) => {
                    g.attr(""transform"", event.transform);
                    g.select("".axis--x"").call(d3.axisBottom(x).scale(event.transform.rescaleX(x)));
                    g.select("".axis--y"").call(d3.axisLeft(y).scale(event.transform.rescaleY(y)));
                }));
        });
    </script>
</body>
</html>
```",Execution Error,268,269
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar { 
            fill: steelblue; 
            cursor: pointer; 
        }

        .bar:hover { 
            fill: orange; 
        }

        .axis--x path, .axis--x line {
            display: none;
        }

        .axis--y line {
            stroke: lightgray;
            opacity: 0.7;
        }

        .axis--y path {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            const filteredData = data.filter(d => d.Quarter === ""Q2-2021"");
            filteredData.forEach(d => {
                d[""Enrollment Number""] = +d[""Enrollment Number""];
            });

            const x = d3.scaleBand()
                .domain(filteredData.map(d => d[""Education Level""]))
                .range([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([0, d3.max(filteredData, d => d[""Enrollment Number""])])
                .nice()
                .range([height, 0]);

            g.append(""g"")
                .selectAll("".bar"")
                .data(filteredData)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => x(d[""Education Level""]))
                .attr(""y"", d => y(d[""Enrollment Number""]))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d[""Enrollment Number""]))
                .call(d3.drag()    
                    .on(""start drag"", (event, d) => {
                        const yPos = d3.pointer(event)[1];
                        const index = filteredData.indexOf(d);
                        const newIndex = Math.max(0, Math.min(filteredData.length - 1, Math.floor(yPos / (height / filteredData.length))));
                        if (newIndex !== index) {
                            filteredData.splice(index, 1);
                            filteredData.splice(newIndex, 0, d);
                            updateBars();
                        }
                    }));

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            function updateBars() {
                g.selectAll("".bar"")
                    .data(filteredData)
                    .transition().duration(100)
                    .attr(""x"", d => x(d[""Education Level""]))
                    .attr(""y"", d => y(d[""Enrollment Number""]))
                    .attr(""height"", d => height - y(d[""Enrollment Number""]));
            }
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,269,270
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Enrollment Number.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }

        .bar:hover {
            fill: orange;
        }

        .axis--x path,
        .axis--x line {
            display: none;
        }

        .dropdown {
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class=""dropdown"">
        <label for=""sortOrder"">Sort Order:</label>
        <select id=""sortOrder"">
            <option value=""ascending"">Ascending</option>
            <option value=""descending"">Descending</option>
        </select>
    </div>
    <svg width=""800"" height=""400""></svg>

    <script>
        const svg = d3.select(""svg""),
            margin = { top: 20, right: 30, bottom: 40, left: 40 },
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom;

        const x = d3.scaleBand().range([0, width]).padding(0.1),
            y = d3.scaleLinear().range([height, 0]);

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            data.forEach(d => {
                if (d['Quarter'] === 'Q2-2021') {
                    d['Enrollment Number'] = +d['Enrollment Number'];
                }
            });

            const updateChart = (order) => {
                const sortedData = order === 'ascending' ? 
                    data.filter(d => d['Quarter'] === 'Q2-2021').sort((a, b) => a['Enrollment Number'] - b['Enrollment Number']) :
                    data.filter(d => d['Quarter'] === 'Q2-2021').sort((a, b) => b['Enrollment Number'] - a['Enrollment Number']);
                
                x.domain(sortedData.map(d => d['Education Level']));
                y.domain([0, d3.max(sortedData, d => d['Enrollment Number'])]);

                g.selectAll("".bar"").remove();
                g.selectAll("".axis"").remove();

                g.selectAll("".bar"")
                    .data(sortedData)
                    .enter().append(""rect"")
                    .attr(""class"", ""bar"")
                    .attr(""x"", d => x(d['Education Level']))
                    .attr(""y"", d => y(d['Enrollment Number']))
                    .attr(""width"", x.bandwidth())
                    .attr(""height"", d => height - y(d['Enrollment Number']))
                    .transition()
                    .duration(800);

                g.append(""g"")
                    .attr(""class"", ""axis axis--x"")
                    .attr(""transform"", `translate(0,${height})`)
                    .call(d3.axisBottom(x));

                g.append(""g"")
                    .attr(""class"", ""axis axis--y"")
                    .call(d3.axisLeft(y));
            };

            updateChart('ascending');

            d3.select(""#sortOrder"").on(""change"", function() {
                const selectedValue = this.value;
                updateChart(selectedValue);
            });
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,270,271
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot that visualizes the relationship between Enrollment Number and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Enrollment Number vs Revenue</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 600px;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1); // Remove header
                const enrollment = [];
                const revenue = [];

                lines.forEach(line => {
                    const cols = line.split(',');
                    if (cols.length === 9) {
                        const enrollmentNumber = parseFloat(cols[2]);
                        const revenueValue = parseFloat(cols[3]);
                        if (!isNaN(enrollmentNumber) && !isNaN(revenueValue)) {
                            enrollment.push(enrollmentNumber);
                            revenue.push(revenueValue);
                        }
                    }
                });

                const myChart = echarts.init(document.getElementById('main'));

                const option = {
                    tooltip: {
                        trigger: 'item',
                        formatter: function (params) {
                            return `Enrollment Number: ${params.data[0]}<br/>Revenue: ${params.data[1]}`;
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Enrollment Number',
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Revenue',
                    },
                    series: [{
                        type: 'scatter',
                        data: enrollment.map((enroll, index) => [enroll, revenue[index]]),
                        symbolSize: 10,
                        itemStyle: {
                            color: '#29a329'
                        }
                    }]
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,271,272
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot that visualizes the relationship between Enrollment Number and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Enrollment Number vs Revenue</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.2.0/echarts.min.js""></script>
    <style>
        .chart {
            width: 100%;
            height: 600px;
        }
    </style>
</head>
<body>
    <div id=""chart"" class=""chart""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const enrollmentNumbers = [];
                const revenues = [];
                
                rows.forEach(row => {
                    const columns = row.split(',');
                    if (columns.length >= 4) {
                        enrollmentNumbers.push(parseFloat(columns[2]));
                        revenues.push(parseFloat(columns[3]));
                    }
                });

                const myChart = echarts.init(document.getElementById('chart'));
                const option = {
                    title: {
                        text: 'Enrollment Number vs Revenue'
                    },
                    tooltip: {},
                    xAxis: {
                        name: 'Enrollment Number'
                    },
                    yAxis: {
                        name: 'Revenue'
                    },
                    dataZoom: [{
                        type: 'inside',
                        start: 0,
                        end: 100
                    }],
                    series: [{
                        name: 'Data Points',
                        type: 'scatter',
                        data: enrollmentNumbers.map((enrollment, index) => [enrollment, revenues[index]]),
                        itemStyle: {
                            color: '#5470C6'
                        }
                    }]
                };

                myChart.setOption(option);

                myChart.on('brush', (params) => {
                    // Handle brush selection
                    const selectedPoints = params.batch[0].areas.map(area => area.dataIndex);
                    console.log('Selected Points:', selectedPoints);
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,272,273
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot that visualizes the relationship between Enrollment Number and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment vs Revenue Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const enrollmentNumbers = [];
                const revenues = [];

                rows.forEach(row => {
                    const columns = row.split(',');
                    if(columns.length === 9) {
                        enrollmentNumbers.push(parseFloat(columns[2]));
                        revenues.push(parseFloat(columns[3]));
                    }
                });

                const scatterData = enrollmentNumbers.map((num, index) => {
                    return [num, revenues[index]];
                });

                const chart = echarts.init(document.getElementById('main'));
                const option = {
                    title: {
                        text: 'Scatterplot of Enrollment Number vs Revenue',
                    },
                    tooltip: {},
                    xAxis: {
                        name: 'Enrollment Number',
                    },
                    yAxis: {
                        name: 'Revenue',
                    },
                    series: [{
                        type: 'scatter',
                        data: scatterData,
                        symbolSize: 10,
                    }]
                };

                chart.setOption(option);
                window.addEventListener('resize', function() {
                    chart.resize();
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,273,274
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Enrollment Number and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment vs Revenue Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
        .then(response => response.text())
        .then(data => {
            const lines = data.split('\n').slice(1);
            const points = lines.map(line => {
                const [quarter, educationLevel, enrollmentNumber, revenue] = line.split(',');
                return {
                    quarter,
                    educationLevel,
                    enrollmentNumber: parseInt(enrollmentNumber),
                    revenue: parseFloat(revenue)
                };
            }).filter(point => !isNaN(point.enrollmentNumber) && !isNaN(point.revenue));

            const chartDom = document.getElementById('main');
            const myChart = echarts.init(chartDom);

            const option = {
                tooltip: {
                    trigger: 'item',
                    formatter: function (params) {
                        return `${params.data.quarter}<br/>Enrollment: ${params.data.enrollmentNumber}<br/>Revenue: ${params.data.revenue}`;
                    }
                },
                xAxis: {
                    type: 'value',
                    name: 'Enrollment Number'
                },
                yAxis: {
                    type: 'value',
                    name: 'Revenue'
                },
                series: [{
                    symbolSize: 10,
                    data: points,
                    type: 'scatter',
                    itemStyle: {
                        color: '#36a2eb'
                    }
                }]
            };

            myChart.setOption(option);

            myChart.on('click', function (params) {
                if (params.data) {
                    const query = `${params.data.quarter} ${params.data.educationLevel}`;
                    window.open(`https://www.google.com/search?q=${encodeURIComponent(query)}`, '_blank');
                }
            });
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,274,275
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot with query widgets showing the Enrollment Number and Revenue of the given dataset. Add a slider to represent the Quarter.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment vs Revenue Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 600px;
        }
        #quarter-slider {
            margin: 20px;
        }
    </style>
</head>
<body>
    <input type=""range"" id=""quarter-slider"" min=""1"" max=""4"" value=""1"">
    <div id=""main""></div>

    <script>
        const url = ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"";
        
        async function fetchData() {
            const response = await fetch(url);
            const data = await response.text();
            processData(data);
        }

        function processData(data) {
            const rows = data.split(""\n"").slice(1);
            const enrollmentData = [];

            rows.forEach(row => {
                const columns = row.split("","");
                if (columns.length >= 9) {
                    const quarter = parseInt(columns[0].trim());
                    const enrollmentNumber = parseFloat(columns[2].trim());
                    const revenue = parseFloat(columns[3].trim());

                    enrollmentData.push({ quarter, enrollmentNumber, revenue });
                }
            });

            createChart(enrollmentData);
        }

        function createChart(enrollmentData) {
            const myChart = echarts.init(document.getElementById('main'));
            const quarterSlider = document.getElementById('quarter-slider');

            function updateChart(quarter) {
                const filteredData = enrollmentData.filter(data => data.quarter === quarter);
                const enrollmentNumbers = filteredData.map(data => data.enrollmentNumber);
                const revenues = filteredData.map(data => data.revenue);

                const option = {
                    title: {
                        text: 'Enrollment Number vs Revenue'
                    },
                    xAxis: {
                        name: 'Enrollment Number'
                    },
                    yAxis: {
                        name: 'Revenue'
                    },
                    series: [{
                        symbolSize: 10,
                        data: filteredData.map(data => [data.enrollmentNumber, data.revenue]),
                        type: 'scatter'
                    }]
                };
                myChart.setOption(option);
            }

            quarterSlider.addEventListener('input', () => {
                updateChart(parseInt(quarterSlider.value));
            });

            updateChart(parseInt(quarterSlider.value)); // Initial load
        }

        fetchData();
    </script>
</body>
</html>
```",Unexpected Initial Result,275,276
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot showing the Enrollment Number of Graduate. Add animated transitions that connect these points using lines in order.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Number Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1); // skip header
            const graduateEnrollments = [];

            rows.forEach(row => {
                const cols = row.split(',');
                if (cols[1] === ""Graduate"") {
                    graduateEnrollments.push({
                        quarter: cols[0],
                        enrollment: parseInt(cols[2]),
                    });
                }
            });

            const option = {
                xAxis: {
                    type: 'category',
                    data: graduateEnrollments.map(item => item.quarter),
                    name: 'Quarter'
                },
                yAxis: {
                    type: 'value',
                    name: 'Enrollment Number'
                },
                series: [{
                    name: 'Graduate Enrollment',
                    type: 'line',
                    data: graduateEnrollments.map(item => item.enrollment),
                    smooth: true,
                    lineStyle: {
                        width: 2
                    },
                    animationDuration: 1000,
                    animationEasing: 'cubicOut',
                }, {
                    name: 'Scatter',
                    type: 'scatter',
                    data: graduateEnrollments.map(item => item.enrollment),
                    symbolSize: 10,
                    animationDuration: 1000,
                    animationEasing: 'cubicOut',
                }]
            };

            const myChart = echarts.init(document.getElementById('main'));
            myChart.setOption(option);
        });
    </script>
</body>
</html>
```",Correct,276,277
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Enrollment Number of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Line Chart</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const parsedData = lines.map(line => {
                    const columns = line.split(',');
                    return {
                        Quarter: columns[0],
                        EducationLevel: columns[1],
                        EnrollmentNumber: parseFloat(columns[2])
                    };
                }).filter(row => !isNaN(row.EnrollmentNumber));

                const enrollmentData = {};
                parsedData.forEach(row => {
                    if (!enrollmentData[row.EducationLevel]) {
                        enrollmentData[row.EducationLevel] = { name: row.EducationLevel, data: [] };
                    }
                    enrollmentData[row.EducationLevel].data.push(row.EnrollmentNumber);
                });

                const series = Object.values(enrollmentData).map(level => ({
                    name: level.name,
                    type: 'line',
                    data: level.data,
                    smooth: true,
                    emphasis: {
                        focus: 'series'
                    }
                }));

                const option = {
                    title: {
                        text: 'Enrollment Numbers by Education Level'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'cross'
                        }
                    },
                    legend: {
                        data: Object.keys(enrollmentData)
                    },
                    xAxis: {
                        type: 'category',
                        data: parsedData.map(row => row.Quarter),
                        boundaryGap: false
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: series
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,277,278
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Educational Enrollment Bar Chart</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 600px;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const filteredData = rows.filter(row => row[0] === 'Q2-2021');
                
                const educationLevels = filteredData.map(row => row[1]);
                const enrollmentNumbers = filteredData.map(row => parseInt(row[2]));

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);

                const option = {
                    title: {
                        text: 'Enrollment Number by Education Level in Q2-2021'
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: educationLevels
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        name: 'Enrollment Number',
                        type: 'bar',
                        data: enrollmentNumbers
                    }]
                };

                myChart.setOption(option);

                // Enable zoom and pan functionality
                myChart.on('dataZoom', function (params) {
                    const zoomData = myChart.getOption().dataZoom[0];
                    myChart.dispatchAction({
                        type: 'dataZoom',
                        start: zoomData.start,
                        end: zoomData.end
                    });
                });

                myChart.on('mousedown', function (event) {
                    if (event.event.button === 0) {
                        const startPoint = myChart.convertFromPixel({ seriesIndex: 0 }, [event.offsetX, event.offsetY]);
                        const moveHandler = function (moveEvent) {
                            const currentPoint = myChart.convertFromPixel({ seriesIndex: 0 }, [moveEvent.offsetX, moveEvent.offsetY]);
                            const dx = currentPoint[0] - startPoint[0];
                            myChart.dispatchAction({
                                type: 'dataZoom',
                                start: Math.max(0, Math.min(100, zoomData.start + dx)),
                                end: Math.max(0, Math.min(100, zoomData.end + dx))
                            });
                        };
                        const upHandler = function () {
                            myChart.getDom().removeEventListener('mousemove', moveHandler);
                            myChart.getDom().removeEventListener('mouseup', upHandler);
                        };
                        myChart.getDom().addEventListener('mousemove', moveHandler);
                        myChart.getDom().addEventListener('mouseup', upHandler);
                    }
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,278,279
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Number Bar Chart</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.2.2/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 400px;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const q2_2021_data = rows.filter(row => row.includes('Q2-2021'));
                
                const educationLevels = [];
                const enrollmentNumbers = [];

                q2_2021_data.forEach(row => {
                    const cols = row.split(',');
                    educationLevels.push(cols[1]);
                    enrollmentNumbers.push(parseInt(cols[2], 10));
                });

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);

                const option = {
                    title: {
                        text: 'Enrollment Number for each Education Level in Q2-2021'
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: educationLevels,
                        axisLabel: {
                            interval: 0,
                            rotate: 45
                        }
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        name: 'Enrollment Number',
                        type: 'bar',
                        data: enrollmentNumbers,
                        draggable: true
                    }]
                };

                // Enable draggable function
                myChart.on('mousedown', function (params) {
                    if (params.componentType === 'series') {
                        myChart.dispatchAction({
                            type: 'downplay',
                            seriesIndex: params.seriesIndex,
                            dataIndex: params.dataIndex
                        });
                    }
                });

                myChart.on('mouseup', function (params) {
                    if (params.componentType === 'series') {
                        myChart.dispatchAction({
                            type: 'highlight',
                            seriesIndex: params.seriesIndex,
                            dataIndex: params.dataIndex
                        });
                    }
                });

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,279,280
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Enrollment Number.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Number by Education Level</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <select id=""sortOrder"" onchange=""updateChart()"">
        <option value=""desc"">Descending</option>
        <option value=""asc"">Ascending</option>
    </select>

    <script>
        let data = [];
        
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(text => {
                const rows = text.split('\n').slice(1);
                rows.forEach(row => {
                    const columns = row.split(',');
                    if (columns[0] === 'Q2-2021') {
                        data.push({
                            educationLevel: columns[1],
                            enrollmentNumber: parseInt(columns[2])
                        });
                    }
                });
                updateChart();
            });

        function updateChart() {
            const sortOrder = document.getElementById('sortOrder').value;
            const sortedData = data.sort((a, b) => 
                sortOrder === 'asc' ? a.enrollmentNumber - b.enrollmentNumber : b.enrollmentNumber - a.enrollmentNumber
            );

            const educationLevels = sortedData.map(item => item.educationLevel);
            const enrollmentNumbers = sortedData.map(item => item.enrollmentNumber);

            const chart = echarts.init(document.getElementById('chart'));
            const option = {
                title: {
                    text: 'Enrollment Number by Education Level in Q2-2021'
                },
                tooltip: {},
                xAxis: {
                    type: 'category',
                    data: educationLevels,
                    axisLabel: {
                        interval: 0,
                        rotate: 30
                    }
                },
                yAxis: {
                    type: 'value'
                },
                series: [{
                    name: 'Enrollment Number',
                    type: 'bar',
                    data: enrollmentNumbers,
                    animationDuration: 1000,
                    animationEasing: 'cubicInOut'
                }],
                toolbox: {
                    feature: {
                        saveAsImage: {}
                    }
                }
            };

            chart.setOption(option);
        }
    </script>
</body>
</html>
```",Correct,280,281
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot that visualizes the relationship between Enrollment Number and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <title>Scatterplot Visualization</title>
</head>
<body>
    <div id=""vis""></div>
    <script type=""text/javascript"">
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatter plot showing the relationship between Enrollment Number and Revenue."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Enrollment Number"",
                    ""type"": ""quantitative"",
                    ""scale"": {""domain"": [0, null]},
                    ""title"": ""Enrollment Number""
                },
                ""y"": {
                    ""field"": ""Revenue"",
                    ""type"": ""quantitative"",
                    ""scale"": {""domain"": [0, null]},
                    ""title"": ""Revenue""
                },
                ""tooltip"": [
                    {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
                    {""field"": ""Revenue"", ""type"": ""quantitative""}
                ]
            },
            ""selection"": {
                ""hover"": {
                    ""type"": ""point"",
                    ""on"": ""mouseover"",
                    ""nearest"": true,
                    ""empty"": ""none""
                }
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""selection"": ""hover""
                    }
                }
            ]
        };

        vegaEmbed('#vis', spec, {mode: 'vega-lite'}).then(function(result) {}).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Execution Result,281,282
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot that visualizes the relationship between Enrollment Number and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Enrollment Number vs Revenue</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.4.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.21.0""></script>
</head>
<body>
<div id=""vis""></div>
<script>
const spec = {
    ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
    ""description"": ""A scatterplot showing the relationship between Enrollment Number and Revenue."",
    ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
        ""format"": {
            ""type"": ""csv""
        }
    },
    ""mark"": ""point"",
    ""encoding"": {
        ""x"": {
            ""field"": ""Enrollment Number"",
            ""type"": ""quantitative"",
            ""title"": ""Enrollment Number""
        },
        ""y"": {
            ""field"": ""Revenue"",
            ""type"": ""quantitative"",
            ""title"": ""Revenue""
        },
        ""tooltip"": [
            {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
            {""field"": ""Revenue"", ""type"": ""quantitative""},
            {""field"": ""Education Level"", ""type"": ""nominal""}
        ]
    },
    ""selection"": {
        ""brush"": {
            ""type"": ""interval"",
            ""encodings"": [""x"", ""y""]
        }
    }
};

vegaEmbed('#vis', spec).then(function(result) {
    // Access the Vega view instance
    const view = result.view;
    view.addEventListener('click', function(event) {
        const tuple = view.lookup('brush').fields;
        // if desired, do something with the selected data
    });
}).catch(console.error);
</script>
</body>
</html>
```",Correct,282,283
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot that visualizes the relationship between Enrollment Number and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Number vs Revenue Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.6.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2""></script>
</head>
<body>
    <div id=""vis""></div>
    <script type=""text/javascript"">
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatter plot showing the relationship between Enrollment Number and Revenue."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Enrollment Number"", 
                    ""type"": ""quantitative"", 
                    ""title"": ""Enrollment Number""
                },
                ""y"": {
                    ""field"": ""Revenue"", 
                    ""type"": ""quantitative"", 
                    ""title"": ""Revenue""
                },
                ""tooltip"": [
                    {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
                    {""field"": ""Revenue"", ""type"": ""quantitative""},
                    {""field"": ""Education Level"", ""type"": ""nominal""}
                ]
            },
            ""config"": {
                ""mark"": {
                    ""tooltip"": true
                }
            }
        };

        vegaEmbed('#vis', spec, {actions: false}).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Execution Result,283,284
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Enrollment Number and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment vs Revenue Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.0.0-rc.3""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatter plot showing the relationship between Enrollment Number and Revenue."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Enrollment Number"",
                    ""type"": ""quantitative"",
                    ""title"": ""Enrollment Number""
                },
                ""y"": {
                    ""field"": ""Revenue"",
                    ""type"": ""quantitative"",
                    ""title"": ""Revenue""
                },
                ""tooltip"": [
                    {""field"": ""Quarter"", ""type"": ""quantitative""},
                    {""field"": ""Education Level"", ""type"": ""nominal""},
                    {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
                    {""field"": ""Revenue"", ""type"": ""quantitative""},
                    {""field"": ""Operating Costs"", ""type"": ""quantitative""},
                    {""field"": ""Profit"", ""type"": ""quantitative""},
                    {""field"": ""Average Tuition"", ""type"": ""quantitative""},
                    {""field"": ""Number of Staff"", ""type"": ""quantitative""},
                    {""field"": ""Graduation Rate"", ""type"": ""quantitative""}
                ]
            },
            ""config"": {
                ""view"": {""stroke"": ""transparent""}
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            const view = result.view;

            view.addEventListener('click', function(event, item) {
                const { data } = item;
                if (data && data[0]) {
                    const educationLevel = data[0][""Education Level""];
                    const url = `https://www.google.com/search?q=${encodeURIComponent(educationLevel)}`;
                    window.open(url, '_blank');
                }
            });
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,284,285
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot with query widgets showing the Enrollment Number and Revenue of the given dataset. Add a slider to represent the Quarter.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot of Enrollment Number and Revenue</title>
    <script src=""https://cdn.jsdelivr.net/npm Vega/v5.21.0/v5.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm Vega-Lite/v5.4.0/vl.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm Vega-Embed/v6.19.3/vega-embed.js""></script>
    <style>
        .vis-container {
            width: 100%;
            height: 500px;
        }
    </style>
</head>
<body>
    <div class=""vis-container"" id=""vis""></div>

    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatter plot showing Enrollment Number and Revenue."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""params"": [
                {
                    ""name"": ""quarter"",
                    ""value"": ""Q1"",
                    ""select"": {
                        ""type"": ""point"",
                        ""values"": [""Q1"", ""Q2"", ""Q3"", ""Q4""],
                        ""bind"": ""select""
                    }
                }
            ],
            ""transform"": [
                {
                    ""filter"": ""datum.Quarter === quarter""
                }
            ],
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Enrollment Number"",
                    ""type"": ""quantitative"",
                    ""title"": ""Enrollment Number""
                },
                ""y"": {
                    ""field"": ""Revenue"",
                    ""type"": ""quantitative"",
                    ""title"": ""Revenue""
                },
                ""color"": {
                    ""field"": ""Education Level"",
                    ""type"": ""nominal"",
                    ""title"": ""Education Level""
                },
                ""tooltip"": [
                    {""field"": ""Quarter"", ""type"": ""ordinal"", ""title"": ""Quarter""},
                    {""field"": ""Enrollment Number"", ""type"": ""quantitative"", ""title"": ""Enrollment Number""},
                    {""field"": ""Revenue"", ""type"": ""quantitative"", ""title"": ""Revenue""}
                ]
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            // Access the Vega view instance
            const view = result.view;
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,285,286
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot showing the Enrollment Number of Graduate. Add animated transitions that connect these points using lines in order.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Number Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatter plot showing the Enrollment Number of Graduate with animated transitions."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum['Education Level'] === 'Graduate'""
                },
                {
                    ""type"": ""sort"",
                    ""by"": [""Quarter""]
                }
            ],
            ""mark"": {
                ""type"": ""circle"",
                ""tooltip"": true,
                ""interpolate"": ""linear"",
                ""fill"": ""steelblue""
            },
            ""encoding"": {
                ""x"": {
                    ""field"": ""Quarter"",
                    ""type"": ""ordinal"",
                    ""axis"": {""title"": ""Quarter""}
                },
                ""y"": {
                    ""field"": ""Enrollment Number"",
                    ""type"": ""quantitative"",
                    ""axis"": {""title"": ""Enrollment Number""}
                },
                ""size"": {""field"": ""Number of Staff"", ""type"": ""quantitative"", ""title"": ""Number of Staff""},
                ""color"": {""field"": ""Graduation Rate"", ""type"": ""quantitative"", ""title"": ""Graduation Rate""},
                ""tooltip"": [
                    {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
                    {""field"": ""Revenue"", ""type"": ""quantitative""},
                    {""field"": ""Operating Costs"", ""type"": ""quantitative""},
                    {""field"": ""Profit"", ""type"": ""quantitative""},
                    {""field"": ""Average Tuition"", ""type"": ""quantitative""},
                    {""field"": ""Number of Staff"", ""type"": ""quantitative""},
                    {""field"": ""Graduation Rate"", ""type"": ""quantitative""}
                ]
            },
            ""config"": {
                ""mark"": {
                    ""transition"": {
                        ""duration"": 2000
                    }
                }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Unexpected Initial Result,286,287
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Enrollment Number of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Number Line Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.5.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""width"": 800,
            ""height"": 400,
            ""mark"": {
                ""type"": ""line"",
                ""point"": true,
                ""tooltip"": true
            },
            ""encoding"": {
                ""x"": {
                    ""field"": ""Quarter"",
                    ""type"": ""temporal"",
                    ""title"": ""Quarter""
                },
                ""y"": {
                    ""field"": ""Enrollment Number"",
                    ""type"": ""quantitative"",
                    ""title"": ""Enrollment Number""
                },
                ""color"": {
                    ""field"": ""Education Level"",
                    ""type"": ""nominal"",
                    ""scale"": {
                        ""domain"": [""Undergraduate"", ""Graduate"", ""High School""],
                        ""range"": [""#1f77b4"", ""#ff7f0e"", ""#2ca02c""]
                    },
                    ""legend"": {
                        ""title"": ""Education Level""
                    }
                },
                ""strokeWidth"": {
                    ""condition"": {
                        ""test"": ""datum['Education Level'] === hovered_level"",
                        ""value"": 4
                    },
                    ""value"": 1
                }
            },
            ""transform"": [
                {
                    ""calculate"": ""datum['Education Level']"",
                    ""as"": ""hovered_level""
                }
            ],
            ""title"": {
                ""text"": ""Enrollment Number Over Time"",
                ""anchor"": ""start""
            }
        };
        
        vegaEmbed('#vis', spec).then(function(result) {
            const view = result.view;

            // Mouseover interaction
            view.addEventListener('mouseover', function(event, item) {
                if (item && item.mark) {
                    view.data('hovered_level', item.datum[""Education Level""]);
                    view.run();
                }
            });

            // Mouseout interaction
            view.addEventListener('mouseout', function(event) {
                view.data('hovered_level', null);
                view.run();
            });
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,287,288
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Number by Education Level in Q2-2021</title>
    <script src=""https://cdn.jsdelivr.net/npm Vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm Vega-Lite@5.1.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm Vega-Embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""title"": ""Enrollment Number by Education Level in Q2-2021"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""field"": ""Quarter"",
                        ""equal"": ""Q2-2021""
                    }
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Enrollment Number"",
                    ""type"": ""quantitative"",
                    ""title"": ""Enrollment Number""
                },
                ""y"": {
                    ""field"": ""Education Level"",
                    ""type"": ""ordinal"",
                    ""title"": ""Education Level""
                },
                ""color"": {
                    ""field"": ""Education Level"",
                    ""type"": ""nominal""
                }
            }
        };

        vegaEmbed('#vis', spec, {renderer: 'canvas'}).then(function(result) {
            // console.log(result); // Access the Vega View Instance here if needed
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,288,289
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Number Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.6.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2""></script>
    <style>
        #vis {
            width: 800px;
            height: 400px;
        }
    </style>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A bar chart showing Enrollment Number for each Education Level in Q2-2021."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum['Quarter'] === 'Q2-2021'""
                },
                {
                    ""calculate"": ""datum['Enrollment Number']"",
                    ""as"": ""Enrollment""
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Education Level"",
                    ""type"": ""ordinal"",
                    ""axis"": {""labelAngle"": 0}
                },
                ""y"": {
                    ""field"": ""Enrollment"",
                    ""type"": ""quantitative"",
                    ""title"": ""Enrollment Number""
                },
                ""order"": {
                    ""field"": ""Enrollment"",
                    ""type"": ""quantitative"",
                    ""sort"": ""descending""
                }
            },
            ""selection"": {
                ""drag"": {
                    ""type"": ""interval"",
                    ""bind"": ""scales""
                }
            }
        };

        vegaEmbed('#vis', spec).then(result => {
            // Customize the embed for drag-and-drop interactions
            const view = result.view;
            view.addSignalListener('drag', (name, value) => {
                view.renderer('svg');
            });
        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Execution Result,289,290
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Enrollment Number.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/react@17/umd/react.production.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/react-dom@17/umd/react-dom.production.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
      const vlSpec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""description"": ""A bar chart showing enrollment numbers by education level for Q2-2021."",
        ""data"": {
          ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
          ""format"": {""type"": ""csv""}
        },
        ""transform"": [
          {
            ""filter"": ""datum.Quarter == 'Q2-2021'""
          },
          {
            ""calculate"": ""datum['Enrollment Number']"",
            ""as"": ""Enrollment""
          }
        ],
        ""mark"": {
          ""type"": ""bar"",
          ""tooltip"": true
        },
        ""encoding"": {
          ""x"": {
            ""field"": ""Education Level"",
            ""type"": ""ordinal"",
            ""axis"": {""labelAngle"": 0}
          },
          ""y"": {
            ""field"": ""Enrollment"",
            ""type"": ""quantitative"",
            ""title"": ""Enrollment Number""
          },
          ""color"": {
            ""field"": ""Education Level"",
            ""type"": ""nominal""
          }
        },
        ""parameters"": [
          {
            ""name"": ""sortOrder"",
            ""value"": ""descending"",
            ""bind"": {
              ""inputs"": [""ascending"", ""descending""]
            }
          }
        ],
        ""sort"": [
          {
            ""field"": ""Enrollment"",
            ""order"": {""param"": ""sortOrder""}
          }
        ]
      };

      vegaEmbed('#vis', vlSpec).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Initial Result,290,291
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Enrollment Number and Revenue, and a Bar Chart on the right that displays Education Level versus Enrollment Number.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Educational Enrollment Visualization</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        body {
            display: flex;
            justify-content: space-between;
        }
        #scatterplot, #barchart {
            margin: 20px;
        }
        svg {
            border: 1px solid #ccc;
        }
    </style>
</head>
<body>
    <div id=""scatterplot""></div>
    <div id=""barchart""></div>

    <script>
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            // Convert data types
            data.forEach(d => {
                d[""Enrollment Number""] = +d[""Enrollment Number""];
                d[""Revenue""] = +d[""Revenue""];
                d[""Operating Costs""] = +d[""Operating Costs""];
                d[""Profit""] = +d[""Profit""];
                d[""Average Tuition""] = +d[""Average Tuition""];
                d[""Number of Staff""] = +d[""Number of Staff""];
                d[""Graduation Rate""] = +d[""Graduation Rate""];
            });

            // Scatterplot setup
            const scatterWidth = 400, scatterHeight = 300;
            const scatterSVG = d3.select(""#scatterplot"").append(""svg"")
                .attr(""width"", scatterWidth)
                .attr(""height"", scatterHeight);

            const xScale = d3.scaleLinear()
                .domain(d3.extent(data, d => d[""Enrollment Number""]))
                .range([50, scatterWidth - 50]);

            const yScale = d3.scaleLinear()
                .domain(d3.extent(data, d => d[""Revenue""]))
                .range([scatterHeight - 50, 50]);

            scatterSVG.selectAll(""circle"")
                .data(data)
                .enter().append(""circle"")
                .attr(""cx"", d => xScale(d[""Enrollment Number""]))
                .attr(""cy"", d => yScale(d[""Revenue""]))
                .attr(""r"", 5)
                .attr(""fill"", ""blue"");

            scatterSVG.append(""g"")
                .attr(""transform"", `translate(0, ${scatterHeight - 50})`)
                .call(d3.axisBottom(xScale));

            scatterSVG.append(""g"")
                .attr(""transform"", `translate(50, 0)`)
                .call(d3.axisLeft(yScale));

            // Bar chart setup
            const barWidth = 400, barHeight = 300;
            const barSVG = d3.select(""#barchart"").append(""svg"")
                .attr(""width"", barWidth)
                .attr(""height"", barHeight);

            const enrollmentByEducation = d3.rollups(data, v => d3.sum(v, d => d[""Enrollment Number""]), d => d[""Education Level""]);

            const yBarScale = d3.scaleBand()
                .domain(enrollmentByEducation.map(d => d[0]))
                .range([0, barHeight - 50])
                .padding(0.1);

            const xBarScale = d3.scaleLinear()
                .domain([0, d3.max(enrollmentByEducation, d => d[1])])
                .range([0, barWidth - 50]);

            barSVG.selectAll(""rect"")
                .data(enrollmentByEducation)
                .enter().append(""rect"")
                .attr(""x"", 50)
                .attr(""y"", d => yBarScale(d[0]))
                .attr(""width"", d => xBarScale(d[1]))
                .attr(""height"", yBarScale.bandwidth())
                .attr(""fill"", ""orange"");

            barSVG.append(""g"")
                .attr(""transform"", `translate(50, 0)`)
                .call(d3.axisLeft(yBarScale));

            barSVG.append(""g"")
                .attr(""transform"", `translate(50, ${barHeight - 50})`)
                .call(d3.axisBottom(xBarScale));
        });
    </script>
</body>
</html>
```",Correct,291,292
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Enrollment Number and Revenue, and a Bar Chart on the right that displays Education Level versus Enrollment Number. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Data Visualization</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .scatterplot {
            float: left;
            width: 50%;
        }
        .barchart {
            float: right;
            width: 50%;
        }
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path,
        .axis--x line {
            display: none;
        }
    </style>
</head>
<body>
    <svg class=""scatterplot"" width=""500"" height=""400""></svg>
    <svg class=""barchart"" width=""500"" height=""400""></svg>
    <script>
        const margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = 500 - margin.left - margin.right,
              height = 400 - margin.top - margin.bottom;

        const scatterplotSvg = d3.select("".scatterplot"").append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);
        const barchartSvg = d3.select("".barchart"").append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        let data;

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(loadedData => {
            data = loadedData.map(d => ({
                Quarter: d.Quarter,
                ""Education Level"": d[""Education Level""],
                ""Enrollment Number"": +d[""Enrollment Number""],
                Revenue: +d.Revenue,
                ""Operating Costs"": +d[""Operating Costs""],
                Profit: +d.Profit,
                ""Average Tuition"": +d[""Average Tuition""],
                ""Number of Staff"": +d[""Number of Staff""],
                ""Graduation Rate"": +d[""Graduation Rate""]
            }));

            drawScatterplot();
            drawBarchart();
        });

        function drawScatterplot() {
            const x = d3.scaleLinear()
                .domain(d3.extent(data, d => d[""Enrollment Number""])).nice()
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain(d3.extent(data, d => d.Revenue)).nice()
                .range([height, 0]);

            const xAxis = d3.axisBottom(x);
            const yAxis = d3.axisLeft(y);

            scatterplotSvg.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(xAxis);

            scatterplotSvg.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(yAxis);

            const scatterplotPoints = scatterplotSvg.selectAll(""circle"")
                .data(data)
                .enter().append(""circle"")
                .attr(""cx"", d => x(d[""Enrollment Number""]))
                .attr(""cy"", d => y(d.Revenue))
                .attr(""r"", 4)
                .attr(""class"", ""scatterpoint"")
                .style(""fill"", ""steelblue"");

            let brush = d3.brush()
                .extent([[0, 0], [width, height]])
                .on(""end"", brushed);

            scatterplotSvg.append(""g"")
                .attr(""class"", ""brush"")
                .call(brush);

            function brushed(event) {
                const selection = event.selection;
                if (selection) {
                    const [[x0, y0], [x1, y1]] = selection;
                    scatterplotPoints.classed(""selected"", d => {
                        const cx = x(d[""Enrollment Number""]);
                        const cy = y(d.Revenue);
                        return x0 <= cx && cx <= x1 && y0 <= cy && cy <= y1;
                    });

                    const selectedData = data.filter(d => scatterplotPoints.classed(""selected""));

                    updateBarchart(selectedData);
                }
            }
        }

        function drawBarchart() {
            const x = d3.scaleBand()
                .domain(data.map(d => d[""Education Level""]))
                .range([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Enrollment Number""])])
                .nice()
                .range([height, 0]);

            barchartSvg.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x)).selectAll(""text"")
                .attr(""transform"", ""translate(-10,0)rotate(-45)"")
                .style(""text-anchor"", ""end"");

            barchartSvg.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            updateBarchart(data);
        }

        function updateBarchart(selectedData) {
            const x = d3.scaleBand()
                .domain(selectedData.map(d => d[""Education Level""]))
                .range([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([0, d3.max(selectedData, d => d[""Enrollment Number""])])
                .nice()
                .range([height, 0]);

            barchartSvg.selectAll("".bar"")
                .data(selectedData, d => d[""Education Level""])
                .join(
                    enter => enter.append(""rect"")
                                .attr(""class"", ""bar"")
                                .attr(""x"", d => x(d[""Education Level""]))
                                .attr(""y"", d => y(d[""Enrollment Number""]))
                                .attr(""width"", x.bandwidth())
                                .attr(""height"", d => height - y(d[""Enrollment Number""])),
                    update => update.transition()
                                    .duration(750)
                                    .attr(""y"", d => y(d[""Enrollment Number""]))
                                    .attr(""height"", d => height - y(d[""Enrollment Number""])),
                    exit => exit.remove()
                );
        }
    </script>
</body>
</html>
```",Execution Error,292,293
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Enrollment Number , while the pie chart represents the distribution of Revenue.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment and Revenue Visualization</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line-chart {
            margin-bottom: 50px;
        }
        .pie-chart {
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class=""line-chart""></div>
    <div class=""pie-chart""></div>

    <script>
        const margin = { top: 20, right: 30, bottom: 50, left: 60 };
        const width = 800 - margin.left - margin.right;
        const height = 400 - margin.top - margin.bottom;

        const svgLine = d3.select("".line-chart"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const svgPie = d3.select("".pie-chart"")
            .append(""svg"")
            .attr(""width"", 400)
            .attr(""height"", 400)
            .append(""g"")
            .attr(""transform"", ""translate(200,200)"");

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            // Parse data
            data.forEach(d => {
                d[""Enrollment Number""] = +d[""Enrollment Number""];
                d[""Revenue""] = +d[""Revenue""];
            });

            // Line Chart
            const xScale = d3.scaleBand()
                .domain(data.map(d => d.Quarter))
                .range([0, width])
                .padding(0.1);

            const yScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Enrollment Number""])])
                .nice()
                .range([height, 0]);

            svgLine.append(""g"")
                .attr(""class"", ""x-axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(xScale));

            svgLine.append(""g"")
                .attr(""class"", ""y-axis"")
                .call(d3.axisLeft(yScale));

            svgLine.append(""path"")
                .datum(data)
                .attr(""fill"", ""none"")
                .attr(""stroke"", ""steelblue"")
                .attr(""stroke-width"", 1.5)
                .attr(""d"", d3.line()
                    .x(d => xScale(d.Quarter) + xScale.bandwidth() / 2)
                    .y(d => yScale(d[""Enrollment Number""]))
                );

            // Pie Chart
            const pieData = d3.rollup(data, v => d3.sum(v, d => d[""Revenue""]), d => d[""Education Level""]);
            const pieChartData = Array.from(pieData, ([key, value]) => ({ key, value }));

            const pie = d3.pie().value(d => d.value);
            const arc = d3.arc().innerRadius(0).outerRadius(150);

            const arcs = svgPie.selectAll("".arc"")
                .data(pie(pieChartData))
                .enter().append(""g"")
                .attr(""class"", ""arc"");

            arcs.append(""path"")
                .attr(""d"", arc)
                .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

            arcs.append(""text"")
                .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                .attr(""dy"", "".35em"")
                .text(d => d.data.key);
        });
    </script>
</body>
</html>
```",Correct,293,294
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Enrollment Number , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Data Visualization</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .chart {
            margin: 20px;
        }
        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 2px;
        }
        .arc {
            stroke: #fff;
        }
    </style>
</head>
<body>
    <div class=""chart"" id=""line-chart""></div>
    <div class=""chart"" id=""pie-chart""></div>

    <script>
        const margin = {top: 20, right: 30, bottom: 30, left: 40};
        const width = 800 - margin.right - margin.left;
        const height = 400 - margin.top - margin.bottom;

        const lineSvg = d3.select(""#line-chart"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const pieSvg = d3.select(""#pie-chart"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${width / 2 + margin.left},${height / 2 + margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"")
            .then(data => {
                data.forEach(d => {
                    d['Enrollment Number'] = +d['Enrollment Number'];
                    d.Revenue = +d.Revenue;
                    d['Operating Costs'] = +d['Operating Costs'];
                    d.Profit = +d.Profit;
                    d['Average Tuition'] = +d['Average Tuition'];
                    d['Number of Staff'] = +d['Number of Staff'];
                    d['Graduation Rate'] = +d['Graduation Rate'];
                });

                const x = d3.scaleLinear()
                    .domain(d3.extent(data, (d) => d3.timeParse(""%Y-Q%q"")(d.Quarter)))
                    .range([0, width]);

                const y = d3.scaleLinear()
                    .domain([0, d3.max(data, d => d['Enrollment Number'])])
                    .range([height, 0]);

                const xAxis = d3.axisBottom(x).ticks(5);
                const yAxis = d3.axisLeft(y);

                lineSvg.append(""g"")
                    .attr(""class"", ""x-axis"")
                    .attr(""transform"", `translate(0, ${height})`)
                    .call(xAxis);

                lineSvg.append(""g"")
                    .attr(""class"", ""y-axis"")
                    .call(yAxis);

                const line = d3.line()
                    .x(d => x(d3.timeParse(""%Y-Q%q"")(d.Quarter)))
                    .y(d => y(d['Enrollment Number']));

                lineSvg.append(""path"")
                    .datum(data)
                    .attr(""class"", ""line"")
                    .attr(""d"", line);

                const brush = d3.brushX()
                    .extent([[0, 0], [width, height]])
                    .on(""brush end"", brushed);

                lineSvg.append(""g"")
                    .attr(""class"", ""brush"")
                    .call(brush);

                function brushed(event) {
                    if (!event.selection) return;
                    const [x0, x1] = event.selection;
                    const selectedData = data.filter(d => {
                        const xValue = x(d3.timeParse(""%Y-Q%q"")(d.Quarter));
                        return xValue >= x0 && xValue <= x1;
                    });
                    updatePieChart(selectedData);
                }

                function updatePieChart(selectedData) {
                    const revenueData = d3.rollup(selectedData, v => d3.sum(v, d => d.Revenue), d => d['Education Level']);
                    const pieData = Array.from(revenueData, ([key, value]) => ({key, value}));

                    const pie = d3.pie().value(d => d.value);
                    const arc = d3.arc().innerRadius(0).outerRadius(100);

                    pieSvg.selectAll(""*"").remove();

                    const arcs = pieSvg.selectAll("".arc"")
                        .data(pie(pieData))
                        .enter().append(""g"")
                        .attr(""class"", ""arc"");

                    arcs.append(""path"")
                        .attr(""class"", ""arc"")
                        .attr(""d"", arc)
                        .attr(""fill"", (d, i) => d3.schemeCategory10[i]);

                    arcs.append(""text"")
                        .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                        .attr(""dx"", ""-0.5em"")
                        .attr(""dy"", "".35em"")
                        .text(d => d.data.key);
                }

                updatePieChart(data); // Initial pie chart
            });
    </script>
</body>
</html>
```",Initialization Error,294,295
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Enrollment Number, Revenue, and Profit. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot Matrix</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatterplot {
            display: inline-block;
            position: relative;
            margin: 10px;
        }
        .brush .selection {
            fill: lightgray;
            fill-opacity: 0.5;
            stroke: gray;
            stroke-width: 1.5px;
        }
    </style>
</head>
<body>
    <h1>Scatterplot Matrix</h1>
    <div id=""scatterplot-matrix""></div>
    <script>
        const dimensions = ['Enrollment Number', 'Revenue', 'Profit'];
        const size = 200;
        const margin = {top: 20, right: 20, bottom: 20, left: 20};
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            data.forEach(d => {
                d['Enrollment Number'] = +d['Enrollment Number'];
                d.Revenue = +d.Revenue;
                d.Profit = +d.Profit;
            });

            const svg = d3.select(""#scatterplot-matrix"")
                .append(""svg"")
                .attr(""width"", size * dimensions.length + margin.left + margin.right)
                .attr(""height"", size * dimensions.length + margin.top + margin.bottom)
                .append(""g"")
                .attr(""transform"", `translate(${margin.left},${margin.top})`);

            const color = d3.scaleOrdinal(d3.schemeCategory10);
            const brushes = [];

            dimensions.forEach((dimX, i) => {
                dimensions.forEach((dimY, j) => {
                    const g = svg.append(""g"")
                        .attr(""class"", ""scatterplot"")
                        .attr(""transform"", `translate(${i * size},${j * size})`);

                    const x = d3.scaleLinear()
                        .domain(d3.extent(data, d => d[dimX]))
                        .range([0, size]);

                    const y = d3.scaleLinear()
                        .domain(d3.extent(data, d => d[dimY]))
                        .range([size, 0]);

                    g.append(""g"")
                        .attr(""class"", ""x-axis"")
                        .attr(""transform"", `translate(0,${size})`)
                        .call(d3.axisBottom(x));

                    g.append(""g"")
                        .attr(""class"", ""y-axis"")
                        .call(d3.axisLeft(y));

                    const circle = g.selectAll(""circle"")
                        .data(data)
                        .enter().append(""circle"")
                        .attr(""cx"", d => x(d[dimX]))
                        .attr(""cy"", d => y(d[dimY]))
                        .attr(""r"", 4)
                        .style(""fill"", (d, index) => color(index));

                    const brush = d3.brush()
                        .extent([[0, 0], [size, size]])
                        .on(""brush end"", brushed);

                    g.append(""g"")
                        .attr(""class"", ""brush"")
                        .call(brush);

                    brushes.push(brush);

                    function brushed(event) {
                        const selection = event.selection;
                        if (selection) {
                            const [[x0, y0], [x1, y1]] = selection;
                            circle.classed(""selected"", d => {
                                return x0 <= x(d[dimX]) && x(d[dimX]) <= x1 && 
                                       y0 <= y(d[dimY]) && y(d[dimY]) <= y1;
                            });
                        } else {
                            circle.classed(""selected"", false);
                        }
                    }
                });
            });
        });
    </script>
</body>
</html>
```",Execution Error,295,296
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a brushable Scatterplot that visualizes the relationship between Enrollment Number and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Brushable Scatterplot</title>
    <style>
        #scatterplot {
            display: inline-block;
        }

        table {
            border-collapse: collapse;
            margin-left: 20px;
        }

        table, th, td {
            border: 1px solid black;
        }

        th, td {
            padding: 8px;
            text-align: left;
        }
    </style>
</head>
<body>
    <div id=""scatterplot""></div>
    <table id=""data-table"">
        <thead>
            <tr>
                <th>Quarter</th>
                <th>Education Level</th>
                <th>Enrollment Number</th>
                <th>Revenue</th>
                <th>Operating Costs</th>
                <th>Profit</th>
                <th>Average Tuition</th>
                <th>Number of Staff</th>
                <th>Graduation Rate</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
    
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <script>
        const margin = { top: 20, right: 30, bottom: 30, left: 40 };
        const width = 800 - margin.left - margin.right;
        const height = 400 - margin.top - margin.bottom;

        const svg = d3.select(""#scatterplot"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        const brush = d3.brushX()
            .extent([[0, 0], [width, height]])
            .on(""brush end"", brushed);

        let data = [];

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(loadedData => {
            data = loadedData.map(d => {
                return {
                    Quarter: d.Quarter,
                    ""Education Level"": d[""Education Level""],
                    ""Enrollment Number"": +d[""Enrollment Number""],
                    Revenue: +d.Revenue,
                    ""Operating Costs"": +d[""Operating Costs""],
                    Profit: +d.Profit,
                    ""Average Tuition"": +d[""Average Tuition""],
                    ""Number of Staff"": +d[""Number of Staff""],
                    ""Graduation Rate"": +d[""Graduation Rate""]
                };
            });

            x.domain(d3.extent(data, d => d[""Enrollment Number""])).nice();
            y.domain(d3.extent(data, d => d.Revenue)).nice();

            svg.append(""g"")
                .attr(""class"", ""axis x-axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""axis y-axis"")
                .call(d3.axisLeft(y));

            svg.append(""g"")
                .attr(""class"", ""brush"")
                .call(brush);

            svg.append(""g"")
                .attr(""class"", ""scatter"")
                .selectAll(""circle"")
                .data(data)
                .enter().append(""circle"")
                .attr(""cx"", d => x(d[""Enrollment Number""]))
                .attr(""cy"", d => y(d.Revenue))
                .attr(""r"", 3)
                .attr(""fill"", ""steelblue"");
        });

        function brushed(event) {
            const selection = d3.event.selection;
            if (selection) {
                const [x0, x1] = selection.map(x.invert);                
                const selectedData = data.filter(d => x0 <= d[""Enrollment Number""] && d[""Enrollment Number""] <= x1);
                
                updateTable(selectedData);
            }
        }

        function updateTable(selectedData) {
            const tbody = d3.select(""#data-table tbody"");
            tbody.selectAll(""tr"").remove();

            selectedData.slice(0, 20).forEach(d => {
                tbody.append(""tr"")
                    .selectAll(""td"")
                    .data([d.Quarter, d[""Education Level""], d[""Enrollment Number""], d.Revenue, d[""Operating Costs""], d.Profit, d[""Average Tuition""], d[""Number of Staff""], d[""Graduation Rate""]])
                    .enter().append(""td"")
                    .text(d => d);
            });
        }
    </script>
</body>
</html>
```",Correct,296,297
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a horizontal Bar Chart that shows all the data concerning Enrollment Number, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Number Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .minimap {
            stroke: lightgray;
            fill: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script>
        const margin = {top: 20, right: 20, bottom: 30, left: 100},
              width = 800 - margin.left - margin.right,
              height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            data.forEach(d => {
                d['Enrollment Number'] = +d['Enrollment Number'];
            });

            const x = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Enrollment Number'])])
                .range([0, width]);
    
            const y = d3.scaleBand()
                .domain(data.map(d => d['Education Level']))
                .range([0, height])
                .padding(0.1);

            svg.selectAll("".bar"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", 0)
                .attr(""y"", d => y(d['Education Level']))
                .attr(""width"", d => x(d['Enrollment Number']))
                .attr(""height"", y.bandwidth());

            const minimapWidth = 200;
            const minimapHeight = 100;

            const minimap = svg.append(""g"")
                .attr(""transform"", `translate(${width + margin.left}, 0)`);

            const xMinimap = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Enrollment Number'])])
                .range([0, minimapWidth]);

            const yMinimap = d3.scaleBand()
                .domain(data.map(d => d['Education Level']))
                .range([0, minimapHeight])
                .padding(0.1);

            minimap.selectAll("".mini-bar"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""mini-bar"")
                .attr(""x"", 0)
                .attr(""y"", d => yMinimap(d['Education Level']))
                .attr(""width"", d => xMinimap(d['Enrollment Number']))
                .attr(""height"", yMinimap.bandwidth())
                .attr(""fill"", ""lightgray"");

            minimap.append(""rect"")
                .attr(""class"", ""minimap"")
                .attr(""x"", 0)
                .attr(""y"", 0)
                .attr(""width"", minimapWidth)
                .attr(""height"", minimapHeight)
                .style(""fill"", ""none"")
                .style(""stroke"", ""black"");
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,297,298
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Enrollment Number and Revenue, and a Bar Chart on the right that displays Education Level versus Enrollment Number.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Educational Enrollment Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            display: flex;
        }
        #scatterplot, #barchart {
            width: 50%;
            height: 600px;
        }
    </style>
</head>
<body>
    <div id=""main"">
        <div id=""scatterplot""></div>
        <div id=""barchart""></div>
    </div>

    <script>
        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv');
            const data = await response.text();
            const rows = data.trim().split('\n').slice(1).map(row => row.split(','));

            const scatterData = [];
            const barData = {};

            rows.forEach(row => {
                const educationLevel = row[1];
                const enrollmentNumber = parseInt(row[2]);
                const revenue = parseFloat(row[3]);

                scatterData.push([enrollmentNumber, revenue]);

                if (!barData[educationLevel]) {
                    barData[educationLevel] = 0;
                }
                barData[educationLevel] += enrollmentNumber;
            });

            const xAxisDataBar = Object.keys(barData);
            const yAxisDataBar = Object.values(barData);

            drawScatterPlot(scatterData);
            drawBarChart(xAxisDataBar, yAxisDataBar);
        }

        function drawScatterPlot(data) {
            const scatterplot = echarts.init(document.getElementById('scatterplot'));
            scatterplot.setOption({
                title: {
                    text: 'Enrollment Number vs Revenue'
                },
                tooltip: {},
                xAxis: {
                    type: 'value',
                    name: 'Enrollment Number'
                },
                yAxis: {
                    type: 'value',
                    name: 'Revenue'
                },
                series: [{
                    symbolSize: 10,
                    data: data,
                    type: 'scatter'
                }]
            });
        }

        function drawBarChart(categories, values) {
            const barchart = echarts.init(document.getElementById('barchart'));
            barchart.setOption({
                title: {
                    text: 'Education Level vs Enrollment Number'
                },
                tooltip: {},
                xAxis: {
                    type: 'category',
                    data: categories
                },
                yAxis: {
                    type: 'value',
                    name: 'Enrollment Number'
                },
                series: [{
                    data: values,
                    type: 'bar'
                }]
            });
        }

        fetchData();
    </script>
</body>
</html>
```",Correct,298,299
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Enrollment Number and Revenue, and a Bar Chart on the right that displays Education Level versus Enrollment Number. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            display: flex;
        }
        #scatter-chart, #bar-chart {
            width: 50%;
            height: 500px;
        }
    </style>
</head>
<body>
    <div id=""main"">
        <div id=""scatter-chart""></div>
        <div id=""bar-chart""></div>
    </div>

    <script>
        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv');
            const data = await response.text();
            return data.split('\n').slice(1).map(line => {
                const [Quarter, EducationLevel, EnrollmentNumber, Revenue, OperatingCosts, Profit, AverageTuition, NumberOfStaff, GraduationRate] = line.split(',');
                return {
                    Quarter,
                    EducationLevel,
                    EnrollmentNumber: +EnrollmentNumber,
                    Revenue: +Revenue,
                    OperatingCosts: +OperatingCosts,
                    Profit: +Profit,
                    AverageTuition: +AverageTuition,
                    NumberOfStaff: +NumberOfStaff,
                    GraduationRate: +GraduationRate
                };
            }).filter(row => !isNaN(row.EnrollmentNumber)); // Filter out invalid entries
        }

        fetchData().then(data => {
            const scatterChart = echarts.init(document.getElementById('scatter-chart'));
            const barChart = echarts.init(document.getElementById('bar-chart'));
          
            const scatterOption = {
                title: { text: 'Enrollment Number vs Revenue' },
                tooltip: {},
                xAxis: { name: 'Enrollment Number' },
                yAxis: { name: 'Revenue' },
                series: [{
                    type: 'scatter',
                    data: data.map(item => [item.EnrollmentNumber, item.Revenue]),
                    itemStyle: {
                        normal: { color: '#1f77b4' }
                    }
                }]
            };

            const barOption = {
                title: { text: 'Education Level vs Enrollment Number' },
                tooltip: {},
                xAxis: {
                    type: 'category',
                    data: [...new Set(data.map(item => item.EducationLevel))]
                },
                yAxis: { name: 'Enrollment Number' },
                series: [{
                    type: 'bar',
                    data: []
                }]
            };

            scatterChart.setOption(scatterOption);
            barChart.setOption(barOption);

            scatterChart.on('brush', params => {
                const brushedPoints = params.batch[0].areas[0].brushSelectData;
                const brushedEducationLevels = new Set();

                brushedPoints.forEach(point => {
                    const dataIndex = point.dataIndex;
                    brushedEducationLevels.add(data[dataIndex].EducationLevel);
                });

                const filteredData = data.reduce((acc, item) => {
                    if (brushedEducationLevels.has(item.EducationLevel)) {
                        acc[item.EducationLevel] = (acc[item.EducationLevel] || 0) + item.EnrollmentNumber;
                    }
                    return acc;
                }, {});

                const barData = Object.entries(filteredData).map(([educationLevel, enrollment]) => ({
                    name: educationLevel,
                    value: enrollment
                }));

                barChart.setOption({
                    series: [{
                        data: barData
                    }]
                });
            });

            scatterChart.dispatchAction({
                type: 'brush',
                areas: [{
                    type: 'rect',
                    coords: [[0, 0], [0, 0]]
                }]
            });
        });
    </script>
</body>
</html>
```",Initialization Error,299,300
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Enrollment Number , while the pie chart represents the distribution of Revenue.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment and Revenue Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 400px;
        }
        #pie {
            width: 100%;
            height: 400px;
        }
    </style>
</head>
<body>

<div id=""main""></div>
<div id=""pie""></div>

<script>
    fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1);
            const enrollmentData = [];
            const revenueData = {};
            rows.forEach(row => {
                const [quarter, educationLevel, enrollmentNumber, revenue] = row.split(',');
                if (quarter && educationLevel && enrollmentNumber && revenue) {
                    enrollmentData.push({ quarter, enrollmentNumber: +enrollmentNumber });
                    revenueData[educationLevel] = (revenueData[educationLevel] || 0) + (+revenue);
                }
            });

            const lineChart = echarts.init(document.getElementById('main'));
            const pieChart = echarts.init(document.getElementById('pie'));

            lineChart.setOption({
                title: { text: 'Enrollment Number Trend' },
                tooltip: { trigger: 'axis' },
                xAxis: {
                    type: 'category',
                    data: enrollmentData.map(data => data.quarter),
                },
                yAxis: {
                    type: 'value',
                },
                series: [{
                    name: 'Enrollment Number',
                    type: 'line',
                    data: enrollmentData.map(data => data.enrollmentNumber),
                }]
            });

            const pieData = Object.entries(revenueData).map(([educationLevel, totalRevenue]) => ({ name: educationLevel, value: totalRevenue }));

            pieChart.setOption({
                title: { text: 'Revenue Distribution', subtext: 'by Education Level', left: 'center' },
                tooltip: { trigger: 'item' },
                series: [{
                    type: 'pie',
                    radius: '50%',
                    data: pieData,
                    emphasis: {
                        itemStyle: {
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowColor: 'rgba(0, 0, 0, 0.5)'
                        }
                    }
                }]
            });
        });
</script>

</body>
</html>
```",Correct,300,301
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Enrollment Number , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment and Revenue Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 600px;
        }
        #lineChart {
            height: 300px;
        }
        #pieChart {
            height: 300px;
        }
    </style>
</head>
<body>
    <div id=""main"">
        <div id=""lineChart""></div>
        <div id=""pieChart""></div>
    </div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const records = lines.map(line => {
                    const [quarter, educationLevel, enrollmentNumber, revenue, operatingCosts, profit, averageTuition, numberOfStaff, graduationRate] = line.split(',');
                    return {
                        quarter,
                        educationLevel,
                        enrollmentNumber: +enrollmentNumber,
                        revenue: +revenue
                    };
                }).filter(record => !isNaN(record.enrollmentNumber)); // Remove invalid records

                const enrollmentData = records.map(record => record.enrollmentNumber);
                const revenueData = records.map(record => record.revenue);
                const quarters = records.map(record => record.quarter);
                
                const lineChart = echarts.init(document.getElementById('lineChart'));
                const pieChart = echarts.init(document.getElementById('pieChart'));

                lineChart.setOption({
                    title: {
                        text: 'Enrollment Number Trend'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    xAxis: {
                        type: 'category',
                        boundaryGap: false,
                        data: quarters
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        name: 'Enrollment Number',
                        type: 'line',
                        data: enrollmentData,
                        markPoint: {
                            data: [
                                { type: 'max', name: 'Max' },
                                { type: 'min', name: 'Min' }
                            ]
                        }
                    }]
                });

                lineChart.on('click', function(params) {
                    const selectedQuarter = params.name;
                    const selectedData = records.filter(record => record.quarter === selectedQuarter);
                    const revenueDistribution = {};

                    selectedData.forEach(record => {
                        revenueDistribution[record.educationLevel] = (revenueDistribution[record.educationLevel] || 0) + record.revenue;
                    });

                    const pieData = Object.keys(revenueDistribution).map(key => ({
                        name: key,
                        value: revenueDistribution[key]
                    }));

                    pieChart.setOption({
                        title: {
                            text: 'Revenue Distribution',
                            subtext: 'For Selected Enrollment',
                            left: 'center'
                        },
                        tooltip: {
                            trigger: 'item'
                        },
                        series: [{
                            name: 'Revenue',
                            type: 'pie',
                            radius: '50%',
                            data: pieData,
                            emphasis: {
                                itemStyle: {
                                    shadowBlur: 10,
                                    shadowOffsetX: 0,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            }
                        }]
                    });
                });

                lineChart.dispatchAction({type: 'highlight', seriesIndex: 0, dataIndex: -1});
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,301,302
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Enrollment Number, Revenue, and Profit. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        .scatterplot {
            display: flex;
            flex-wrap: wrap;
            width: 800px;
            height: 800px;
        }
        .chart {
            width: 400px;
            height: 400px;
        }
    </style>
</head>
<body>
    <div id=""scatterplot"" class=""scatterplot""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const enrollmentData = [];

                rows.forEach(row => {
                    const cols = row.split(',');
                    if (cols.length === 9) {
                        enrollmentData.push({
                            enrollment: Number(cols[2]),
                            revenue: Number(cols[3]),
                            profit: Number(cols[5])
                        });
                    }
                });

                const scatterplot = document.getElementById('scatterplot');
                const charts = [];

                const createChart = (xIndex, yIndex) => {
                    const chartDiv = document.createElement('div');
                    chartDiv.className = 'chart';
                    scatterplot.appendChild(chartDiv);
                    
                    const chart = echarts.init(chartDiv);
                    charts.push(chart);
                    
                    const highlightData = (selectedIndices) => {
                        const highlighted = enrollmentData.map((item, index) => ({
                            ...item,
                            selected: selectedIndices.includes(index)
                        }));
                        const seriesData = highlighted.map(data => ({
                            value: [data[xIndex], data[yIndex]],
                            itemStyle: {
                                color: data.selected ? 'red' : 'blue'
                            }
                        }));

                        chart.setOption({
                            xAxis: {
                                type: 'value',
                                name: ['Enrollment', 'Revenue', 'Profit'][xIndex]
                            },
                            yAxis: {
                                type: 'value',
                                name: ['Enrollment', 'Revenue', 'Profit'][yIndex]
                            },
                            series: [{
                                type: 'scatter',
                                data: seriesData,
                                symbolSize: 10
                            }]
                        });
                    };

                    chart.on('brushSelected', params => {
                        const selectedIndices = [];
                        params.batch.forEach(item => {
                            item.selected.forEach(dataIndex => {
                                selectedIndices.push(dataIndex);
                            });
                        });
                        highlightData(selectedIndices);
                    });

                    highlightData([]);
                };

                createChart(0, 1); // Enrollment vs Revenue
                createChart(0, 2); // Enrollment vs Profit
                createChart(1, 2); // Revenue vs Profit
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,302,303
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a brushable Scatterplot that visualizes the relationship between Enrollment Number and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Educational Enrollment Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 60%;
            height: 400px;
            float: left;
        }
        #table {
            width: 35%;
            height: 400px;
            float: right;
            overflow-y: scroll;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <div id=""table""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).filter(row => row);
                const chartData = rows.map(row => {
                    const cols = row.split(',');
                    return {
                        quarter: cols[0],
                        educationLevel: cols[1],
                        enrollmentNumber: Number(cols[2]),
                        revenue: Number(cols[3]),
                        operatingCosts: Number(cols[4]),
                        profit: Number(cols[5]),
                        averageTuition: Number(cols[6]),
                        numberOfStaff: Number(cols[7]),
                        graduationRate: Number(cols[8]),
                    };
                });

                const scatterData = chartData.map(item => [item.enrollmentNumber, item.revenue]);

                const myChart = echarts.init(document.getElementById('main'));
                myChart.setOption({
                    title: { text: 'Enrollment vs Revenue' },
                    tooltip: {},
                    xAxis: { name: 'Enrollment Number' },
                    yAxis: { name: 'Revenue' },
                    series: [{
                        type: 'scatter',
                        data: scatterData,
                        itemStyle: {
                            emphasis: {
                                itemStyle: {
                                    borderColor: '#333',
                                    borderWidth: 1,
                                }
                            }
                        }
                    }],
                    dataZoom: [{ type: 'inside' }],
                    brush: {
                        type: ['rect'],
                    },
                });

                myChart.on('brushSelected', function (params) {
                    const selectedPoints = [];
                    const brushComponent = params.batch[0]; // We assume only one brush selection
                    const selectedIndices = brushComponent.selected[0].dataIndex;

                    selectedIndices.forEach(idx => {
                        selectedPoints.push(chartData[idx]);
                    });

                    const tableContent = selectedPoints.slice(0, 20).map(item => `
                        <tr>
                            <td>${item.quarter}</td>
                            <td>${item.educationLevel}</td>
                            <td>${item.enrollmentNumber}</td>
                            <td>${item.revenue}</td>
                            <td>${item.operatingCosts}</td>
                            <td>${item.profit}</td>
                            <td>${item.averageTuition}</td>
                            <td>${item.numberOfStaff}</td>
                            <td>${item.graduationRate}</td>
                        </tr>
                    `).join('');

                    document.getElementById('table').innerHTML = `
                        <table border=""1"">
                            <thead>
                                <tr>
                                    <th>Quarter</th>
                                    <th>Education Level</th>
                                    <th>Enrollment Number</th>
                                    <th>Revenue</th>
                                    <th>Operating Costs</th>
                                    <th>Profit</th>
                                    <th>Average Tuition</th>
                                    <th>Number of Staff</th>
                                    <th>Graduation Rate</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${tableContent}
                            </tbody>
                        </table>
                    `;
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,303,304
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a horizontal Bar Chart that shows all the data concerning Enrollment Number, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Number Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 70%;
            height: 400px;
            display: inline-block;
        }
        #minimap {
            width: 25%;
            height: 100px;
            display: inline-block;
        }
    </style>
</head>
<body>

<div id=""main""></div>
<div id=""minimap""></div>

<script>
    async function fetchData() {
        const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv');
        const data = await response.text();
        return data.split('\n').slice(1).map(row => {
            const [quarter, educationLevel, enrollmentNumber] = row.split(',');
            return {
                quarter,
                educationLevel,
                enrollmentNumber: parseInt(enrollmentNumber, 10)
            };
        }).filter(row => !isNaN(row.enrollmentNumber));
    }

    async function initChart() {
        const data = await fetchData();
        const enrollmentNumbers = data.map(item => item.enrollmentNumber);
        const educationLevels = data.map(item => item.educationLevel);

        const mainChart = echarts.init(document.getElementById('main'));
        const miniChart = echarts.init(document.getElementById('minimap'));

        const optionMain = {
            title: {
                text: 'Enrollment Number by Education Level',
                left: 'center'
            },
            tooltip: {},
            xAxis: {
                type: 'value'
            },
            yAxis: {
                type: 'category',
                data: educationLevels
            },
            series: [{
                name: 'Enrollment Number',
                type: 'bar',
                data: enrollmentNumbers,
                itemStyle: {
                    color: '#6f8cd8'
                }
            }]
        };

        const optionMini = {
            title: {
                text: 'Overview',
                left: 'center'
            },
            tooltip: {},
            xAxis: {
                type: 'value'
            },
            yAxis: {
                type: 'category',
                data: educationLevels
            },
            series: [{
                name: 'Enrollment Number',
                type: 'bar',
                data: enrollmentNumbers,
                itemStyle: {
                    color: '#90c6f3'
                }
            }]
        };

        mainChart.setOption(optionMain);
        miniChart.setOption(optionMini);
    }

    initChart();
</script>

</body>
</html>
```",Correct,304,305
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Enrollment Number and Revenue, and a Bar Chart on the right that displays Education Level versus Enrollment Number.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Educational Enrollment Visualizations</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <style>
        #vis {
            display: flex;
            justify-content: space-between;
        }
        #scatterplot, #barchart {
            width: 48%;
            height: 500px;
        }
    </style>
</head>
<body>
    <div id=""vis"">
        <div id=""scatterplot""></div>
        <div id=""barchart""></div>
    </div>

    <script>
        const scatterplotSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatter plot showing the relationship between Enrollment Number and Revenue."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Enrollment Number"",
                    ""type"": ""quantitative"",
                    ""title"": ""Enrollment Number""
                },
                ""y"": {
                    ""field"": ""Revenue"",
                    ""type"": ""quantitative"",
                    ""title"": ""Revenue""
                },
                ""size"": {
                    ""field"": ""Profit"",
                    ""type"": ""quantitative"",
                    ""title"": ""Profit""
                },
                ""color"": {
                    ""field"": ""Education Level"",
                    ""type"": ""nominal"",
                    ""title"": ""Education Level""
                }
            }
        };

        const barchartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A bar chart showing Enrollment Number by Education Level."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Education Level"",
                    ""type"": ""nominal"",
                    ""title"": ""Education Level""
                },
                ""y"": {
                    ""field"": ""Enrollment Number"",
                    ""type"": ""quantitative"",
                    ""title"": ""Enrollment Number""
                }
            }
        };

        vegaEmbed('#scatterplot', scatterplotSpec);
        vegaEmbed('#barchart', barchartSpec);
    </script>
</body>
</html>
```",Correct,305,306
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Enrollment Number and Revenue, and a Bar Chart on the right that displays Education Level versus Enrollment Number. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Interactive Visualizations</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <style>
        #scatterplot, #barchart {
            width: 45%;
            display: inline-block;
            vertical-align: top;
        }
    </style>
</head>
<body>
    <div id=""scatterplot""></div>
    <div id=""barchart""></div>

    <script>
        const scatterplotSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {""field"": ""Revenue"", ""type"": ""quantitative""},
                ""y"": {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
                ""tooltip"": [
                    {""field"": ""Education Level"", ""type"": ""nominal""},
                    {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
                    {""field"": ""Revenue"", ""type"": ""quantitative""}
                ]
            },
            ""selection"": {
                ""brush"": {
                    ""type"": ""interval"",
                    ""encodings"": [""x"", ""y""]
                }
            }
        };

        const barChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Education Level"",
                    ""type"": ""ordinal"",
                    ""axis"": {""labelAngle"": 0}
                },
                ""y"": {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
                ""color"": {
                    ""condition"": {
                        ""selection"": ""brush"",
                        ""field"": ""Education Level"",
                        ""type"": ""nominal"",
                        ""legend"": null
                    },
                    ""value"": ""lightgray""
                }
            },
            ""transform"": [{
                ""filter"": {""selection"": ""brush""}
            }]
        };

        vegaEmbed('#scatterplot', scatterplotSpec).then(function(result) {
            result.view.addEventListener('click', () => {
                const brush = result.view.get('brush');
                const b = brush ? {'x': brush.x, 'y': brush.y} : {};
                vegaEmbed('#barchart', barChartSpec).then(function(barResult) {
                    barResult.view.signal('brush', b).update();
                });
            });
        });

        vegaEmbed('#barchart', barChartSpec);
    </script>
</body>
</html>
```",Initialization Error,306,307
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Enrollment Number , while the pie chart represents the distribution of Revenue.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">

<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Educational Enrollment Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>

<body>
    <div id=""visualization""></div>

    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""hConcat"": [
                {
                    ""title"": ""Enrollment Number Trend"",
                    ""data"": {
                        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv""
                    },
                    ""mark"": ""line"",
                    ""encoding"": {
                        ""x"": {
                            ""field"": ""Quarter"",
                            ""type"": ""temporal"",
                            ""title"": ""Quarter""
                        },
                        ""y"": {
                            ""field"": ""Enrollment Number"",
                            ""type"": ""quantitative"",
                            ""title"": ""Enrollment Number""
                        }
                    }
                },
                {
                    ""title"": ""Revenue Distribution"",
                    ""data"": {
                        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv""
                    },
                    ""mark"": ""arc"",
                    ""encoding"": {
                        ""theta"": {
                            ""field"": ""Revenue"",
                            ""type"": ""quantitative""
                        },
                        ""color"": {
                            ""field"": ""Education Level"",
                            ""type"": ""nominal""
                        }
                    }
                }
            ]
        };

        vegaEmbed('#visualization', spec).catch(console.error);
    </script>
</body>

</html>
```",Initialization Error,307,308
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Enrollment Number , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment and Revenue Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.7.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2""></script>
    <style>
        .chart {
            width: 100%;
            height: 400px;
        }
    </style>
</head>
<body>
    <div id=""lineChart"" class=""chart""></div>
    <div id=""pieChart"" class=""chart""></div>

    <script>
        const dataUrl = ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"";

        const lineChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": dataUrl,
                ""format"": {""type"": ""csv""}
            },
            ""transform"": [
                {""filter"": ""datum['Enrollment Number'] !== null""}
            ],
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": {""field"": ""Quarter"", ""type"": ""temporal""},
                ""y"": {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
                ""tooltip"": [
                    {""field"": ""Quarter"", ""type"": ""temporal""},
                    {""field"": ""Enrollment Number"", ""type"": ""quantitative""}
                ]
            }
        };

        const pieChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": dataUrl,
                ""format"": {""type"": ""csv""}
            },
            ""transform"": [
                {""filter"": ""datum['Revenue'] !== null""},
                {""aggregate"": [{""op"": ""sum"", ""field"": ""Revenue"", ""as"": ""Total Revenue""}], ""groupby"": [""Education Level""]},
                {""calculate"": ""datum['Total Revenue'] / sum(datum['Total Revenue'])"", ""as"": ""Percentage""}
            ],
            ""mark"": ""arc"",
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Total Revenue"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Education Level"",
                    ""type"": ""nominal""
                },
                ""tooltip"": [
                    {""field"": ""Education Level"", ""type"": ""nominal""},
                    {""field"": ""Total Revenue"", ""type"": ""quantitative""},
                    {""field"": ""Percentage"", ""type"": ""quantitative"", ""format"": "".1%""}
                ]
            }
        };

        vegaEmbed('#lineChart', lineChartSpec).then(result => {
            const view = result.view;
            view.addSignalListener('brush', (name, value) => {
                const selectedData = value.filter(v => v !== null);
                const filterExpr = selectedData.length > 0
                    ? `datum['Quarter'] >= ${selectedData[0]} && datum['Quarter'] <= ${selectedData[1]}`
                    : 'true';
                pieChartSpec.transform[0].filter = filterExpr;
                vegaEmbed('#pieChart', pieChartSpec);
            });
        }).catch(console.error);

        vegaEmbed('#pieChart', pieChartSpec).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,308,309
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Enrollment Number, Revenue, and Profit. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Brushable Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <style>
        .vega-embed {
            max-width: 900px;
            margin: auto;
        }
    </style>
</head>
<body>
    <div id=""vis""></div>

    <script>
        const spec = {
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""layer"": [
                {
                    ""mark"": ""point"",
                    ""encoding"": {
                        ""x"": {
                            ""field"": ""Enrollment Number"",
                            ""type"": ""quantitative""
                        },
                        ""y"": {
                            ""field"": ""Revenue"",
                            ""type"": ""quantitative""
                        },
                        ""color"": {
                            ""condition"": {
                                ""param"": ""brush"",
                                ""field"": ""Profit"",
                                ""type"": ""quantitative"",
                                ""scale"": {
                                    ""type"": ""linear"",
                                    ""domain"": {""data"": ""brush"", ""field"": ""Profit""},
                                    ""range"": [""#d9d9d9"", ""#1f77b4""]
                                }
                            },
                            ""value"": ""#cccccc""
                        },
                        ""tooltip"": [
                            {""field"": ""Quarter"", ""type"": ""nominal""},
                            {""field"": ""Education Level"", ""type"": ""nominal""},
                            {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
                            {""field"": ""Revenue"", ""type"": ""quantitative""},
                            {""field"": ""Profit"", ""type"": ""quantitative""}
                        ]
                    }
                },
                {
                    ""mark"": ""point"",
                    ""encoding"": {
                        ""x"": {
                            ""field"": ""Enrollment Number"",
                            ""type"": ""quantitative""
                        },
                        ""y"": {
                            ""field"": ""Profit"",
                            ""type"": ""quantitative""
                        },
                        ""color"": {
                            ""condition"": {
                                ""param"": ""brush"",
                                ""field"": ""Revenue"",
                                ""type"": ""quantitative"",
                                ""scale"": {
                                    ""type"": ""linear"",
                                    ""domain"": {""data"": ""brush"", ""field"": ""Revenue""},
                                    ""range"": [""#d9d9d9"", ""#1f77b4""]
                                }
                            },
                            ""value"": ""#cccccc""
                        },
                        ""tooltip"": [
                            {""field"": ""Quarter"", ""type"": ""nominal""},
                            {""field"": ""Education Level"", ""type"": ""nominal""},
                            {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
                            {""field"": ""Profit"", ""type"": ""quantitative""},
                            {""field"": ""Revenue"", ""type"": ""quantitative""}
                        ]
                    }
                },
                {
                    ""mark"": ""point"",
                    ""encoding"": {
                        ""x"": {
                            ""field"": ""Profit"",
                            ""type"": ""quantitative""
                        },
                        ""y"": {
                            ""field"": ""Revenue"",
                            ""type"": ""quantitative""
                        },
                        ""color"": {
                            ""condition"": {
                                ""param"": ""brush"",
                                ""field"": ""Enrollment Number"",
                                ""type"": ""quantitative"",
                                ""scale"": {
                                    ""type"": ""linear"",
                                    ""domain"": {""data"": ""brush"", ""field"": ""Enrollment Number""},
                                    ""range"": [""#d9d9d9"", ""#1f77b4""]
                                }
                            },
                            ""value"": ""#cccccc""
                        },
                        ""tooltip"": [
                            {""field"": ""Quarter"", ""type"": ""nominal""},
                            {""field"": ""Education Level"", ""type"": ""nominal""},
                            {""field"": ""Profit"", ""type"": ""quantitative""},
                            {""field"": ""Revenue"", ""type"": ""quantitative""},
                            {""field"": ""Enrollment Number"", ""type"": ""quantitative""}
                        ]
                    }
                }
            ],
            ""params"": [
                {
                    ""name"": ""brush"",
                    ""select"": {""type"": ""interval"", ""encodings"": [""x"", ""y""]}
                }
            ],
            ""width"": 300,
            ""height"": 300
        };

        vegaEmbed('#vis', spec).then(function(result) {
            // Access the Vega view instance
            const view = result.view;
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,309,310
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a brushable Scatterplot that visualizes the relationship between Enrollment Number and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot with Brushable Selection</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <style>
        #scatterplot {
            width: 60%;
            height: 400px;
            display: inline-block;
        }
        #table {
            width: 35%;
            display: inline-block;
            vertical-align: top;
        }
    </style>
</head>
<body>
    <div id=""scatterplot""></div>
    <div id=""table""></div>

    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatterplot with selectable points."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""selection"": {
                ""brush"": {
                    ""type"": ""interval"",
                    ""encodings"": [""x"", ""y""]
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Enrollment Number"",
                    ""type"": ""quantitative""
                },
                ""y"": {
                    ""field"": ""Revenue"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""condition"": {
                        ""selection"": ""brush"",
                        ""field"": ""Education Level"",
                        ""type"": ""nominal""
                    },
                    ""value"": ""grey""
                },
                ""tooltip"": [
                    {""field"": ""Quarter"", ""type"": ""nominal""},
                    {""field"": ""Education Level"", ""type"": ""nominal""},
                    {""field"": ""Enrollment Number"", ""type"": ""quantitative""},
                    {""field"": ""Revenue"", ""type"": ""quantitative""},
                    {""field"": ""Operating Costs"", ""type"": ""quantitative""},
                    {""field"": ""Profit"", ""type"": ""quantitative""},
                    {""field"": ""Average Tuition"", ""type"": ""quantitative""},
                    {""field"": ""Number of Staff"", ""type"": ""quantitative""},
                    {""field"": ""Graduation Rate"", ""type"": ""quantitative""}
                ]
            }
        };

        vegaEmbed(""#scatterplot"", spec).then(function (result) {
            const view = result.view;

            view.addSignalListener('brush', function(name, value) {
                const filteredData = view.data('table').filter(row => {
                    return value && value[0][0] <= row['Enrollment Number'] && row['Enrollment Number'] <= value[1][0] &&
                           value[0][1] <= row['Revenue'] && row['Revenue'] <= value[1][1];
                }).slice(0, 20);

                updateTable(filteredData);
            });

            function updateTable(data) {
                let html = ""<table border='1'><tr><th>Quarter</th><th>Education Level</th><th>Enrollment Number</th><th>Revenue</th><th>Operating Costs</th><th>Profit</th><th>Average Tuition</th><th>Number of Staff</th><th>Graduation Rate</th></tr>"";
                data.forEach(row => {
                    html += `<tr>
                        <td>${row['Quarter']}</td>
                        <td>${row['Education Level']}</td>
                        <td>${row['Enrollment Number']}</td>
                        <td>${row['Revenue']}</td>
                        <td>${row['Operating Costs']}</td>
                        <td>${row['Profit']}</td>
                        <td>${row['Average Tuition']}</td>
                        <td>${row['Number of Staff']}</td>
                        <td>${row['Graduation Rate']}</td>
                    </tr>`;
                });
                html += ""</table>"";
                document.getElementById('table').innerHTML = html;
            }
        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Initial Result,310,311
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a horizontal Bar Chart that shows all the data concerning Enrollment Number, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Number Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.22.1""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.7.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.23.0""></script>
    <style>
        #vis-container {
            display: flex;
        }
        #main-chart {
            width: 70%;
        }
        #minimap {
            width: 30%;
            height: 150px;
        }
    </style>
</head>
<body>
    <div id=""vis-container"">
        <div id=""main-chart""></div>
        <div id=""minimap""></div>
    </div>
    <script>
        const mainChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
                ""format"": { ""type"": ""csv"" }
            },
            ""mark"": ""bar"",
            ""encoding"": {
                ""y"": {
                    ""field"": ""Enrollment Number"",
                    ""type"": ""quantitative"",
                    ""axis"": { ""title"": ""Enrollment Number"" }
                },
                ""x"": {
                    ""field"": ""Education Level"",
                    ""type"": ""ordinal"",
                    ""axis"": { ""title"": ""Education Level"" }
                }
            }
        };

        const minimapSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
                ""format"": { ""type"": ""csv"" }
            },
            ""mark"": ""bar"",
            ""encoding"": {
                ""y"": {
                    ""field"": ""Enrollment Number"",
                    ""type"": ""quantitative""
                },
                ""x"": {
                    ""field"": ""Education Level"",
                    ""type"": ""ordinal""
                }
            },
            ""width"": 100,
            ""height"": 50
        };

        vegaEmbed('#main-chart', mainChartSpec);
        vegaEmbed('#minimap', minimapSpec);
    </script>
</body>
</html>
```",Unexpected Initial Result,311,312
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot that visualizes the relationship between Enrollment Number and Revenue.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot: Enrollment Number vs Revenue</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter-point {
            fill: steelblue;
        }
        .axis {
            font: 10px sans-serif;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>

    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            data.forEach(d => {
                d[""Enrollment Number""] = +d[""Enrollment Number""];
                d[""Revenue""] = +d[""Revenue""];
            });

            const x = d3.scaleLinear()
                .domain(d3.extent(data, d => d[""Enrollment Number""])).nice()
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain(d3.extent(data, d => d[""Revenue""])).nice()
                .range([height, 0]);

            const xAxis = g.append(""g"")
                .attr(""class"", ""axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            const yAxis = g.append(""g"")
                .attr(""class"", ""axis"")
                .call(d3.axisLeft(y));

            g.selectAll("".scatter-point"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""scatter-point"")
                .attr(""cx"", d => x(d[""Enrollment Number""]))
                .attr(""cy"", d => y(d[""Revenue""]))
                .attr(""r"", 3);
        });
    </script>
</body>
</html>
```",Correct,312,313
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Line Chart that visualizes the trend of Enrollment Number over the Quarter for each Education Level.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Number Trend</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke-width: 2px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            const nestedData = d3.group(data, d => d[""Education Level""]);
            
            const margin = {top: 20, right: 30, bottom: 30, left: 40};
            const width = 800 - margin.left - margin.right;
            const height = 400 - margin.top - margin.bottom;
            const svg = d3.select(""svg"").append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

            const x = d3.scalePoint()
                .domain(data.map(d => d[""Quarter""]))
                .range([0, width])
                .padding(0.5);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => +d[""Enrollment Number""])])
                .nice()
                .range([height, 0]);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const line = d3.line()
                .x(d => x(d[""Quarter""]))
                .y(d => y(+d[""Enrollment Number""]));

            svg.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));
            
            svg.append(""g"")
                .call(d3.axisLeft(y));

            const educationLevels = Array.from(nestedData.keys());

            educationLevels.forEach(educationLevel => {
                svg.append(""path"")
                    .datum(nestedData.get(educationLevel))
                    .attr(""class"", ""line"")
                    .attr(""d"", line)
                    .attr(""stroke"", color(educationLevel))
                    .attr(""fill"", ""none"");

                svg.append(""text"")
                    .attr(""x"", width - 60)
                    .attr(""y"", () => y(nestedData.get(educationLevel)[nestedData.get(educationLevel).length - 1][""Enrollment Number""]))
                    .text(educationLevel)
                    .attr(""fill"", color(educationLevel));
            });
        });
    </script>
</body>
</html>
```",Correct,313,314
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Bar Chart of Enrollment Numbers</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }

        .bar:hover {
            fill: orange;
        }

        .axis--x path {
            display: none;
        }

        .axis--y text {
            font-size: 12px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            const filteredData = data.filter(d => d[""Quarter""] === ""Q2-2021"");
            
            const enrollmentData = d3.rollup(filteredData, 
                v => d3.sum(v, d => +d[""Enrollment Number""]), 
                d => d[""Education Level""]
            );

            const categories = Array.from(enrollmentData.keys());
            const values = Array.from(enrollmentData.values());

            const svg = d3.select(""svg""),
                margin = {top: 20, right: 30, bottom: 40, left: 40},
                width = +svg.attr(""width"") - margin.left - margin.right,
                height = +svg.attr(""height"") - margin.top - margin.bottom;

            const x = d3.scaleBand()
                .domain(categories)
                .range([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([0, d3.max(values)])
                .nice()
                .range([height, 0]);

            const g = svg.append(""g"")
                .attr(""transform"", `translate(${margin.left},${margin.top})`);

            g.append(""g"")
                .selectAll("".bar"")
                .data(values)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", (d, i) => x(categories[i]))
                .attr(""y"", d => y(d))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d));

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Correct,314,315
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Pie Chart that visualizes the proportion of Enrollment Number contributed by each Education Level in Q2-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Pie Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .arc {
            stroke: #fff;
        }
    </style>
</head>
<body>
    <h1>Enrollment Proportion by Education Level (Q2-2021)</h1>
    <svg width=""600"" height=""600""></svg>
    <script>
        const width = 600;
        const height = 600;
        const radius = Math.min(width, height) / 2;

        const svg = d3.select(""svg"")
            .attr(""viewBox"", `0 0 ${width} ${height}`)
            .append(""g"")
            .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            const filteredData = data.filter(d => d.Quarter === ""Q2-2021"");

            const enrollmentByLevel = d3.nest()
                .key(d => d['Education Level'])
                .rollup(v => d3.sum(v, d => +d['Enrollment Number']))
                .entries(filteredData);

            const pie = d3.pie()
                .value(d => d.value);

            const arc = d3.arc()
                .outerRadius(radius - 10)
                .innerRadius(0);

            const g = svg.selectAll("".arc"")
                .data(pie(enrollmentByLevel))
                .enter().append(""g"")
                .attr(""class"", ""arc"");

            g.append(""path"")
                .attr(""d"", arc)
                .style(""fill"", (d, i) => d3.schemeCategory10[i]);

            g.append(""text"")
                .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                .attr(""dy"", "".35em"")
                .text(d => d.data.key);
        });
    </script>
</body>
</html>
```",Initialization Error,315,316
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Donut Chart that visualizes the distribution of Enrollment Number among Education Level in Q2-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Donut Chart</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .arc {
            stroke: #fff;
        }
    </style>
</head>
<body>
    <svg width=""600"" height=""600""></svg>
    <script>
        const width = 600;
        const height = 600;
        const radius = Math.min(width, height) / 2 - 40;

        const svg = d3.select(""svg"")
                      .append(""g"")
                      .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            const filteredData = data.filter(d => d.Quarter === ""Q2-2021"");
            const enrollmentData = d3.nest()
                                      .key(d => d[""Education Level""])
                                      .rollup(v => d3.sum(v, d => +d[""Enrollment Number""]))
                                      .entries(filteredData);

            const totalEnrollment = d3.sum(enrollmentData, d => d.value);

            const color = d3.scaleOrdinal()
                            .domain(enrollmentData.map(d => d.key))
                            .range(d3.schemeCategory10);

            const pie = d3.pie()
                          .value(d => d.value);
                          
            const arc = d3.arc()
                          .innerRadius(radius * 0.4)
                          .outerRadius(radius);

            const paths = svg.selectAll(""path"")
                             .data(pie(enrollmentData))
                             .enter()
                             .append(""path"")
                             .attr(""class"", ""arc"")
                             .attr(""d"", arc)
                             .attr(""fill"", d => color(d.data.key))
                             .attr(""stroke"", ""#fff"")
                             .attr(""stroke-width"", 2);

            svg.selectAll(""text"")
               .data(pie(enrollmentData))
               .enter()
               .append(""text"")
               .attr(""transform"", d => `translate(${arc.centroid(d)})`)
               .attr(""dy"", ""0.35em"")
               .text(d => `${d.data.key}: ${((d.data.value / totalEnrollment) * 100).toFixed(1)}%`);
        });
    </script>
</body>
</html>
```",Initialization Error,316,317
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Coxcomb Chart(polar area chart) to compare the Enrollment Number of different Education Level in Q2-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coxcomb Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .arc {
            fill: steelblue;
            stroke: white;
            stroke-width: 1px;
        }
    </style>
</head>
<body>
    <script>
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(function(data) {
            const filteredData = data.filter(d => d.Quarter === ""Q2 2021"");

            const enrollmentData = d3.rollup(filteredData, v => d3.sum(v, d => +d[""Enrollment Number""]), d => d[""Education Level""]);
            const levels = Array.from(enrollmentData.keys());
            const enrollments = Array.from(enrollmentData.values());

            const width = 600, height = 600, outerRadius = Math.min(width, height) / 2 - 10, innerRadius = 70;

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const svg = d3.select(""body"").append(""svg"")
                .attr(""width"", width)
                .attr(""height"", height)
                .append(""g"")
                .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

            const pie = d3.pie()
                .value(d => d)
                .sort(null);

            const arc = d3.arc()
                .innerRadius(innerRadius)
                .outerRadius(d => outerRadius * (d.data / d3.sum(enrollments)));

            const arcs = svg.selectAll("".arc"")
                .data(pie(enrollments))
                .enter().append(""g"")
                .attr(""class"", ""arc"");

            arcs.append(""path"")
                .attr(""d"", arc)
                .attr(""fill"", (d, i) => color(i));

            arcs.append(""text"")
                .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                .attr(""dy"", ""0.35em"")
                .text((d, i) => levels[i]);

        });
    </script>
</body>
</html>
```",Unexpected Initial Result,317,318
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Radar Chart to compare the Enrollment Number of different Education Level in Q2-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Radar Chart for Enrollment Numbers</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .radar-chart {
            width: 100%;
            height: 100%;
        }
    </style>
</head>
<body>
    <svg class=""radar-chart"" width=""600"" height=""600""></svg>
    <script>
        const width = 600;
        const height = 600;
        const maxRadius = Math.min(width / 2, height / 2);
        const color = d3.scaleOrdinal(d3.schemeCategory10);

        const radarChartOptions = {
            w: width,
            h: height,
            radius: maxRadius,
            levels: 5,
            format: '.0f',
            axisLabel: 'Enrollment Number'
        };

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            const filteredData = data.filter(d => d['Quarter'] === 'Q2-2021');
            const educationLevels = [...new Set(filteredData.map(d => d['Education Level']))];

            const enrollmentData = educationLevels.map(level => {
                return {
                    axis: level,
                    value: +filteredData.find(d => d['Education Level'] === level)['Enrollment Number']
                };
            });

            const radarChart = d3.radialLine()
                .radius(d => d.value)
                .angle((d, i) => i * (2 * Math.PI / enrollmentData.length));

            const svg = d3.select('.radar-chart').append('g')
                .attr('transform', `translate(${width / 2}, ${height / 2})`);

            svg.selectAll('.area')
                .data([enrollmentData])
                .enter().append('path')
                .attr('class', 'area')
                .attr('d', radarChart)
                .style('fill', color(0))
                .style('fill-opacity', 0.5)
                .style('stroke', color(0));

            const axis = svg.selectAll('.axis')
                .data(enrollmentData)
                .enter().append('g')
                .attr('class', 'axis');

            axis.append('line')
                .attr('x1', 0)
                .attr('y1', 0)
                .attr('x2', d => radarChart.radius(d.value))
                .attr('y2', 0)
                .attr('transform', (d, i) => `rotate(${i * (360 / enrollmentData.length)})`)
                .style('stroke', '#999');

            axis.append('text')
                .attr('class', 'legend')
                .attr('dy', '-10')
                .attr('transform', (d, i) => `rotate(${i * (360 / enrollmentData.length)})`)
                .attr('x', d => radarChart.radius(d.value))
                .text(d => d.axis)
                .style('font-family', 'sans-serif')
                .style('font-size', '10px')
                .style('text-anchor', 'middle');
        });
    </script>
</body>
</html>
```",Initialization Error,318,319
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Streamgraph that visualizes the changes of Enrollment Number over the Quarter for each Education Level.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Streamgraph of Educational Enrollment</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .stream {
            opacity: 0.7;
        }
    </style>
</head>
<body>
    <script>
        const margin = {top: 20, right: 30, bottom: 40, left: 50},
              width = 800 - margin.left - margin.right,
              height = 400 - margin.top - margin.bottom;

        const svg = d3.select(""body"").append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
          .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            const nestedData = d3.group(data, d => d['Education Level']);
            
            const parseQuarter = d3.timeParse(""%Y Q%q"");
            const enrollmentData = Array.from(nestedData, ([key, values]) => {
                return {
                    key,
                    values: values.map(d => ({ 
                        quarter: parseQuarter(d['Quarter']),
                        enrollment: +d['Enrollment Number'] 
                    }))
                };
            });

            const x = d3.scaleTime()
                .domain(d3.extent(enrollmentData[0].values, d => d.quarter))
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(enrollmentData, d => d3.max(d.values, v => v.enrollment))])
                .range([height, 0]);

            const area = d3.area()
                .x(d => x(d.quarter))
                .y0(height)
                .y1(d => y(d.enrollment))
                .curve(d3.curveBasis);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            svg.selectAll(""path"")
                .data(enrollmentData)
                .enter().append(""path"")
                .attr(""class"", ""stream"")
                .attr(""d"", d => area(d.values))
                .attr(""fill"", (d, i) => color(i))
                .attr(""opacity"", 0.7);

            svg.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x).ticks(5));

            svg.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Initialization Error,319,320
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Slopegraph to compare the Enrollment Number between Q1-2020 and Q2-2020 for each Education Level.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Slopegraph Example</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .slope {
            stroke: steelblue;
            stroke-width: 2;
        }
        .point {
            fill: steelblue;
            r: 4;
        }
        .axis {
            font: 12px sans-serif;
        }
        .text {
            font: 12px sans-serif;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = { top: 20, right: 30, bottom: 30, left: 50 };
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;
        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            const filteredData = data.filter(d => (d.Quarter === ""Q1-2020"" || d.Quarter === ""Q2-2020"") && d[""Education Level""]);

            const enrollmentData = {};
            filteredData.forEach(d => {
                const level = d[""Education Level""];
                const quarter = d.Quarter;
                const enrollment = +d[""Enrollment Number""];
                if (!enrollmentData[level]) {
                    enrollmentData[level] = {};
                }
                enrollmentData[level][quarter] = enrollment;
            });

            const points = Object.keys(enrollmentData).map(level => ({
                level: level,
                Q1: enrollmentData[level][""Q1-2020""],
                Q2: enrollmentData[level][""Q2-2020""]
            }));

            const xScale = d3.scaleLinear()
                .domain([0, d3.max(points, d => Math.max(d.Q1, d.Q2))])
                .range([0, width]);
            
            const yScale = d3.scaleBand()
                .domain(points.map(d => d.level))
                .range([0, height])
                .padding(0.1);

            g.append(""g"")
                .selectAll("".slope"")
                .data(points)
                .enter().append(""line"")
                .attr(""class"", ""slope"")
                .attr(""x1"", d => xScale(d.Q1))
                .attr(""y1"", d => yScale(d.level) + yScale.bandwidth() / 2)
                .attr(""x2"", d => xScale(d.Q2))
                .attr(""y2"", d => yScale(d.level) + yScale.bandwidth() / 2);

            g.append(""g"")
                .selectAll("".point"")
                .data(points)
                .enter().append(""circle"")
                .attr(""class"", ""point"")
                .attr(""cx"", d => xScale(d.Q1))
                .attr(""cy"", d => yScale(d.level) + yScale.bandwidth() / 2)
                .attr(""r"", 4);

            g.append(""g"")
                .selectAll("".point"")
                .data(points)
                .enter().append(""circle"")
                .attr(""class"", ""point"")
                .attr(""cx"", d => xScale(d.Q2))
                .attr(""cy"", d => yScale(d.level) + yScale.bandwidth() / 2)
                .attr(""r"", 4);

            g.append(""g"")
                .attr(""class"", ""axis"")
                .attr(""transform"", `translate(0, ${height})`)
                .call(d3.axisBottom(xScale));

            g.append(""g"")
                .attr(""class"", ""axis"")
                .call(d3.axisLeft(yScale));
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,320,321
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Heatmap that visualizes the Enrollment Number across Education Level and Quarters.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Heatmap of Enrollment Numbers</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .cell {
            stroke: #fff;
        }
        .axis {
            font: 10px sans-serif;
        }
    </style>
</head>
<body>
    <h1>Enrollment Number Heatmap</h1>
    <svg width=""800"" height=""400""></svg>
    <script>
        const margin = {top: 20, right: 20, bottom: 30, left: 40},
              width = 800 - margin.left - margin.right,
              height = 400 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            const educationLevels = Array.from(new Set(data.map(d => d['Education Level'])));
            const quarters = Array.from(new Set(data.map(d => d['Quarter'])));
            const matrix = [];

            educationLevels.forEach(educationLevel => {
                const tempArray = [];
                quarters.forEach(quarter => {
                    const entry = data.find(d => d['Education Level'] === educationLevel && d['Quarter'] === quarter);
                    tempArray.push(entry ? +entry['Enrollment Number'] : 0);
                });
                matrix.push(tempArray);
            });

            const x = d3.scaleBand()
                .range([0, width])
                .domain(quarters)
                .padding(0.05);

            const y = d3.scaleBand()
                .range([height, 0])
                .domain(educationLevels)
                .padding(0.05);

            const colorScale = d3.scaleSequential(d3.interpolateYlGnBu)
                .domain([0, d3.max(matrix.flat())]);

            svg.append(""g"")
                .selectAll()
                .data(matrix.flat())
                .enter()
                .append(""rect"")
                .attr(""class"", ""cell"")
                .attr(""x"", (d, i) => x(quarters[i % quarters.length]))
                .attr(""y"", (d, i) => y(educationLevels[Math.floor(i / quarters.length)]))
                .attr(""width"", x.bandwidth())
                .attr(""height"", y.bandwidth())
                .attr(""fill"", d => colorScale(d));

            svg.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""y axis"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Correct,321,322
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Stacked Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            display: block;
            width: 20px;
            margin: 1px;
        }
        .axis {
            font-size: 12px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const x = d3.scaleBand().range([0, width]).padding(0.1);
        const y = d3.scaleLinear().range([height, 0]);
        
        const z = d3.scaleOrdinal(d3.schemeCategory10);

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            data.forEach(d => {
                d['Enrollment Number'] = +d['Enrollment Number'];
                d.Revenue = +d.Revenue;
                d['Operating Costs'] = +d['Operating Costs'];
                d.Profit = +d.Profit;
            });
            
            const keys = Object.keys(data[0]).filter(key => key !== 'Quarter' && key !== 'Education Level');

            const stackedData = d3.stack().keys(keys)(data);
            x.domain(data.map(d => d['Quarter']));
            y.domain([0, d3.max(stackedData, d => d3.max(d, d => d[1]))]).nice();
            
            g.append(""g"").selectAll(""g"")
                .data(stackedData)
                .enter().append(""g"")
                .attr(""fill"", (d, i) => z(i))
                .selectAll(""rect"")
                .data(d => d)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => x(d.data['Quarter']))
                .attr(""y"", d => y(d[1]))
                .attr(""height"", d => y(d[0]) - y(d[1]))
                .attr(""width"", x.bandwidth());

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,322,323
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Horizontal Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Numbers by Education Level - Q2 2021</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis-label {
            font: 10px sans-serif;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 40, left: 100},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const x = d3.scaleLinear().range([0, width]),
              y = d3.scaleBand().range([0, height]).padding(0.1);

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"").then(data => {
            data = data.filter(d => d.Quarter === ""Q2-2021"");
            data.forEach(d => {
                d['Enrollment Number'] = +d['Enrollment Number'];
            });

            x.domain([0, d3.max(data, d => d['Enrollment Number'])]);
            y.domain(data.map(d => d['Education Level']));

            g.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""y axis"")
                .call(d3.axisLeft(y));

            g.selectAll("".bar"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", 0)
                .attr(""y"", d => y(d['Education Level']))
                .attr(""width"", d => x(d['Enrollment Number']))
                .attr(""height"", y.bandwidth());
        });
    </script>
</body>
</html>
```",Correct,323,324
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot that visualizes the relationship between Enrollment Number and Revenue.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment vs Revenue Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 600px;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const enrollment = [];
                const revenue = [];
                
                lines.forEach(line => {
                    const columns = line.split(',');
                    if (columns.length > 1) {
                        enrollment.push(parseInt(columns[2]) || 0);
                        revenue.push(parseFloat(columns[3]) || 0);
                    }
                });

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);
                const option = {
                    title: {
                        text: 'Scatterplot of Enrollment Number vs Revenue'
                    },
                    tooltip: {},
                    xAxis: {
                        name: 'Enrollment Number',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Revenue',
                        type: 'value'
                    },
                    series: [{
                        symbolSize: 10,
                        data: enrollment.map((e, i) => [e, revenue[i]]),
                        type: 'scatter'
                    }]
                };
                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,324,325
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Line Chart that visualizes the trend of Enrollment Number over the Quarter for each Education Level.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Number Trend</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const parsedData = data.split('\n').slice(1).map(row => row.split(','));
                const enrollmentData = {};

                parsedData.forEach(row => {
                    const quarter = row[0];
                    const educationLevel = row[1];
                    const enrollmentNumber = parseInt(row[2]);

                    if (!enrollmentData[educationLevel]) {
                        enrollmentData[educationLevel] = { quarters: [], numbers: [] };
                    }

                    if (!enrollmentData[educationLevel].quarters.includes(quarter)) {
                        enrollmentData[educationLevel].quarters.push(quarter);
                        enrollmentData[educationLevel].numbers.push(0); // Initialize with 0
                    }

                    const index = enrollmentData[educationLevel].quarters.indexOf(quarter);
                    enrollmentData[educationLevel].numbers[index] += enrollmentNumber; // Sum enrollment numbers
                });

                const series = Object.keys(enrollmentData).map(level => ({
                    name: level,
                    type: 'line',
                    data: enrollmentData[level].numbers,
                    smooth: true
                }));

                const option = {
                    title: {
                        text: 'Enrollment Number Trend by Education Level'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    legend: {
                        data: Object.keys(enrollmentData)
                    },
                    xAxis: {
                        type: 'category',
                        data: Array.from(new Set(parsedData.map(row => row[0]))), // Unique quarters
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: series
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,325,326
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Number Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 600px; height: 400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const filteredData = lines
                    .map(line => line.split(','))
                    .filter(line => line[0] === 'Q2-2021');
                
                const educationLevels = [];
                const enrollmentNumbers = [];

                filteredData.forEach(line => {
                    educationLevels.push(line[1]);
                    enrollmentNumbers.push(Number(line[2]));
                });

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);
                
                const option = {
                    title: {
                        text: 'Enrollment Number per Education Level - Q2 2021'
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: educationLevels
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        name: 'Enrollment Number',
                        type: 'bar',
                        data: enrollmentNumbers
                    }]
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,326,327
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Pie Chart that visualizes the proportion of Enrollment Number contributed by each Education Level in Q2-2021.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Pie Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 600px;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const enrollmentData = {};

                lines.forEach(line => {
                    const columns = line.split(',');
                    const quarter = columns[0].trim();
                    const educationLevel = columns[1].trim();
                    const enrollmentNumber = parseInt(columns[2].trim());

                    if (quarter === 'Q2-2021') {
                        if (!enrollmentData[educationLevel]) {
                            enrollmentData[educationLevel] = 0;
                        }
                        enrollmentData[educationLevel] += enrollmentNumber;
                    }
                });

                const categories = Object.keys(enrollmentData);
                const values = Object.values(enrollmentData);

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);
                const option = {
                    title: {
                        text: 'Enrollment Number Proportion by Education Level (Q2-2021)',
                        subtext: 'Data Source: Educational Enrollment',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    legnd: {
                        orient: 'vertical',
                        left: 'left'
                    },
                    series: [
                        {
                            name: 'Enrollment Number',
                            type: 'pie',
                            radius: '50%',
                            data: categories.map((category, index) => ({
                                value: values[index],
                                name: category
                            })),
                            emphasis: {
                                itemStyle: {
                                    shadowBlur: 10,
                                    shadowOffsetX: 0,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            }
                        }
                    ]
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,327,328
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Donut Chart that visualizes the distribution of Enrollment Number among Education Level in Q2-2021.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Donut Chart - Enrollment Number by Education Level (Q2-2021)</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 600px;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1);
            const filteredData = rows
                .map(row => row.split(','))
                .filter(row => row[0] === 'Q2-2021')
                .map(row => ({ 'Education Level': row[1], 'Enrollment Number': parseInt(row[2]) }));

            const educationLevels = filteredData.map(item => item['Education Level']);
            const enrollmentNumbers = filteredData.map(item => item['Enrollment Number']);

            var myChart = echarts.init(document.getElementById('main'));

            var option = {
                title: {
                    text: 'Enrollment Number by Education Level (Q2-2021)',
                    subtext: 'Source: Educational Enrollment Data',
                    left: 'center'
                },
                tooltip: {
                    trigger: 'item'
                },
                legend: {
                    orient: 'vertical',
                    left: 'left'
                },
                series: [
                    {
                        name: 'Enrollment Number',
                        type: 'pie',
                        radius: ['50%', '70%'],
                        avoidLabelOverlap: false,
                        label: {
                            show: false,
                            position: 'center'
                        },
                        emphasis: {
                            label: {
                                show: true,
                                fontSize: '30',
                                fontWeight: 'bold'
                            }
                        },
                        labelLine: {
                            show: false
                        },
                        data: educationLevels.map((level, index) => ({ value: enrollmentNumbers[index], name: level })),
                        itemStyle: {
                            borderRadius: 10,
                            borderColor: '#fff',
                            borderWidth: 2
                        }
                    }
                ]
            };

            myChart.setOption(option);
        });
    </script>
</body>
</html>
```",Correct,328,329
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Coxcomb Chart(polar area chart) to compare the Enrollment Number of different Education Level in Q2-2021.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coxcomb Chart - Enrollment Number Q2-2021</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 600px;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n');
                const header = lines[0].split(',');
                const educationLevelIndex = header.indexOf('Education Level');
                const enrollmentNumberIndex = header.indexOf('Enrollment Number');
                const quarterIndex = header.indexOf('Quarter');
                
                const enrollmentData = {};
                
                for (let i = 1; i < lines.length; i++) {
                    const line = lines[i].split(',');
                    if (line[quarterIndex] === 'Q2-2021') {
                        const educationLevel = line[educationLevelIndex];
                        const enrollmentNumber = parseInt(line[enrollmentNumberIndex], 10);
                        
                        if (!isNaN(enrollmentNumber)) {
                            if (!enrollmentData[educationLevel]) {
                                enrollmentData[educationLevel] = 0;
                            }
                            enrollmentData[educationLevel] += enrollmentNumber;
                        }
                    }
                }

                const categories = Object.keys(enrollmentData);
                const values = Object.values(enrollmentData);

                const option = {
                    title: {
                        text: 'Enrollment Number by Education Level in Q2-2021',
                        left: 'center'
                    },
                    angleAxis: {
                        type: 'category',
                        data: categories
                    },
                    radiusAxis: {},
                    polar: {},
                    series: [{
                        type: 'bar',
                        data: values,
                        coordinateSystem: 'polar',
                        name: 'Enrollment Number',
                        emphasis: {
                            focus: 'series'
                        }
                    }],
                    tooltip: {
                        trigger: 'item',
                        formatter: '{a} <br/>{b}: {c}'
                    }
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,329,330
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Radar Chart to compare the Enrollment Number of different Education Level in Q2-2021.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Radar Chart - Educational Enrollment Q2-2021</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>

<div id=""radarChart"" style=""width: 600px;height:400px;""></div>

<script>
    fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
        .then(response => response.text())
        .then(data => {
            const lines = data.split('\n').slice(1); // Skip header
            const q2_2021_data = {};

            lines.forEach(line => {
                const columns = line.split(',');
                const quarter = columns[0].trim();
                const educationLevel = columns[1].trim();
                const enrollmentNumber = parseInt(columns[2].trim());

                if (quarter === 'Q2-2021') {
                    if (!q2_2021_data[educationLevel]) {
                        q2_2021_data[educationLevel] = 0;
                    }
                    q2_2021_data[educationLevel] += enrollmentNumber;
                }
            });

            const educationLevels = Object.keys(q2_2021_data);
            const enrollmentNumbers = Object.values(q2_2021_data);

            const radarChart = echarts.init(document.getElementById('radarChart'));
            const option = {
                title: {
                    text: 'Enrollment Number by Education Level in Q2-2021'
                },
                tooltip: {},
                radar: {
                    indicator: educationLevels.map(level => ({ name: level, max: Math.max(...enrollmentNumbers) })),
                },
                series: [{
                    name: 'Enrollment Numbers',
                    type: 'radar',
                    data: [{
                        value: enrollmentNumbers,
                        name: 'Q2-2021 Enrollment'
                    }]
                }]
            };

            radarChart.setOption(option);
        });
</script>

</body>
</html>
```",Correct,330,331
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Streamgraph that visualizes the changes of Enrollment Number over the Quarter for each Education Level.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,static view,"```html
<!DOCTYPE html>
<html style=""height: 100%;"">
<head>
    <meta charset=""UTF-8"">
    <title>Streamgraph of Educational Enrollment</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            height: 100%;
        }
    </style>
</head>
<body>
<div id=""main""></div>
<script>
    fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1);
            const seriesData = {};
            const quarters = [];

            rows.forEach(row => {
                const [quarter, educationLevel, enrollmentNumber] = row.split(',');
                if (!quarters.includes(quarter)) {
                    quarters.push(quarter);
                }
                if (!seriesData[educationLevel]) {
                    seriesData[educationLevel] = new Array(quarters.length).fill(0);
                }
                const index = quarters.indexOf(quarter);
                seriesData[educationLevel][index] = parseInt(enrollmentNumber, 10);
            });

            const series = Object.keys(seriesData).map(educationLevel => ({
                name: educationLevel,
                type: 'line',
                stack: 'Total',
                areaStyle: {},
                data: seriesData[educationLevel]
            }));

            const option = {
                title: {
                    text: 'Educational Enrollment Over Time',
                    left: 'center'
                },
                tooltip: {
                    trigger: 'axis'
                },
                legend: {
                    data: Object.keys(seriesData),
                    bottom: '10%'
                },
                xAxis: {
                    type: 'category',
                    data: quarters,
                    boundaryGap: false
                },
                yAxis: {
                    type: 'value',
                    name: 'Enrollment Number'
                },
                series: series
            };

            const chart = echarts.init(document.getElementById('main'));
            chart.setOption(option);
        });
</script>
</body>
</html>
```",Unexpected Initial Result,331,332
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Slopegraph to compare the Enrollment Number between Q1-2020 and Q2-2020 for each Education Level.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Slopegraph of Enrollment Numbers</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""slopegraph"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const enrollmentData = {};
                
                rows.forEach(row => {
                    const [quarter, level, enrollment] = row;
                    if (quarter === 'Q1-2020' || quarter === 'Q2-2020') {
                        if (!enrollmentData[level]) {
                            enrollmentData[level] = {};
                        }
                        enrollmentData[level][quarter] = parseInt(enrollment);
                    }
                });

                const educationLevels = Object.keys(enrollmentData);
                const seriesData = educationLevels.map(level => {
                    return [
                        {
                            name: level,
                            value: enrollmentData[level]['Q1-2020']
                        },
                        {
                            name: level,
                            value: enrollmentData[level]['Q2-2020']
                        }
                    ];
                }).flat();

                const chartDom = document.getElementById('slopegraph');
                const myChart = echarts.init(chartDom);
                const option = {
                    title: {
                        text: 'Enrollment Number Comparison (Q1-2020 vs Q2-2020)',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    xAxis: {
                        type: 'value',
                        position: 'top',
                        splitLine: { show: false },
                        name: 'Enrollment Number'
                    },
                    yAxis: {
                        type: 'category',
                        data: educationLevels,
                        inverse: true,
                    },
                    series: [{
                        type: 'line',
                        data: seriesData,
                        label: {
                            show: true,
                            position: 'right'
                        }
                    }]
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,332,333
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Heatmap that visualizes the Enrollment Number across Education Level and Quarters.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Heatmap</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""heatmap"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1).map(row => row.split(','));
            const educationLevels = [...new Set(rows.map(row => row[1]))];
            const quarters = [...new Set(rows.map(row => row[0]))];
            const enrollmentData = [];

            educationLevels.forEach((level, i) => {
                const row = quarters.map(quarter => {
                    const enrollment = rows.find(r => r[1] === level && r[0] === quarter);
                    return enrollment ? parseInt(enrollment[2]) : 0;
                });
                enrollmentData.push(row);
            });

            const option = {
                tooltip: {
                    position: 'top'
                },
                grid: {
                    height: '50%',
                    top: '10%',
                    bottom: '10%',
                    left: '10%',
                    right: '10%'
                },
                xAxis: {
                    type: 'category',
                    data: quarters,
                    name: 'Quarter'
                },
                yAxis: {
                    type: 'category',
                    data: educationLevels,
                    name: 'Education Level'
                },
                visualMap: {
                    min: 0,
                    max: Math.max(...enrollmentData.flat()),
                    calculable: true,
                    orient: 'vertical',
                    left: 'right',
                    bottom: '10%'
                },
                series: [{
                    name: 'Enrollment Number',
                    type: 'heatmap',
                    data: [],
                    label: {
                        show: true
                    }
                }]
            };

            for (let i = 0; i < enrollmentData.length; i++) {
                for (let j = 0; j < enrollmentData[i].length; j++) {
                    option.series[0].data.push([j, i, enrollmentData[i][j]]);
                }
            }

            const chart = echarts.init(document.getElementById('heatmap'));
            chart.setOption(option);
        });
    </script>
</body>
</html>
```",Correct,333,334
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Stacked Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const educationLevels = [];
                const enrollmentNumbers = [];
                const profits = [];

                rows.forEach(row => {
                    const cols = row.split(',');
                    if (cols.length > 1) {
                        const educationLevel = cols[1];
                        const enrollmentNumber = parseFloat(cols[2]) || 0;
                        const profit = parseFloat(cols[5]) || 0;

                        if (!educationLevels.includes(educationLevel)) {
                            educationLevels.push(educationLevel);
                        }
                        enrollmentNumbers.push({ level: educationLevel, value: enrollmentNumber });
                        profits.push({ level: educationLevel, value: profit });
                    }
                });

                const enrollmentData = educationLevels.map(level => {
                    return {
                        name: level,
                        type: 'bar',
                        stack: 'total',
                        data: enrollmentNumbers.filter(e => e.level === level).map(e => e.value)
                    };
                });

                const profitData = educationLevels.map(level => {
                    return {
                        name: level,
                        type: 'bar',
                        stack: 'total',
                        data: profits.filter(p => p.level === level).map(p => p.value)
                    };
                });

                const option = {
                    title: {
                        text: 'Educational Enrollment and Profit by Level'
                    },
                    tooltip: {},
                    legend: {
                        data: educationLevels
                    },
                    xAxis: {
                        type: 'category',
                        data: ['Enrollment', 'Profit']
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [...enrollmentData, ...profitData]
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,334,335
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Horizontal Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Number for Education Levels - Q2 2021</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 600px;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').map(row => row.split(','));
                const headers = rows[0];
                const enrollmentIndex = headers.indexOf(""Enrollment Number"");
                const educationLevelIndex = headers.indexOf(""Education Level"");
                const quarterIndex = headers.indexOf(""Quarter"");

                const enrollmentData = {};
                
                rows.slice(1).forEach(row => {
                    if (row[quarterIndex] === 'Q2-2021') {
                        const educationLevel = row[educationLevelIndex];
                        const enrollmentNumber = parseInt(row[enrollmentIndex], 10);
                        enrollmentData[educationLevel] = (enrollmentData[educationLevel] || 0) + enrollmentNumber;
                    }
                });

                const educationLevels = Object.keys(enrollmentData);
                const enrollmentNumbers = Object.values(enrollmentData);

                const chartInstance = echarts.init(document.getElementById('main'));
                const option = {
                    title: {
                        text: 'Enrollment Number for Education Levels - Q2 2021'
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'value'
                    },
                    yAxis: {
                        type: 'category',
                        data: educationLevels
                    },
                    series: [{
                        name: 'Enrollment Number',
                        type: 'bar',
                        data: enrollmentNumbers,
                        itemStyle: {
                            color: '#009688'
                        }
                    }]
                };

                chartInstance.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,335,336
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Scatterplot that visualizes the relationship between Enrollment Number and Revenue.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Enrollment Number vs Revenue</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            '$schema': 'https://vega.github.io/schema/vega-lite/v5.json',
            'description': 'A scatterplot showing the relationship between Enrollment Number and Revenue.',
            'data': {
                'url': 'https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv',
                'format': {'type': 'csv'}
            },
            'mark': 'point',
            'encoding': {
                'x': {
                    'field': 'Enrollment Number',
                    'type': 'quantitative',
                    'title': 'Enrollment Number'
                },
                'y': {
                    'field': 'Revenue',
                    'type': 'quantitative',
                    'title': 'Revenue'
                },
                'tooltip': [
                    {'field': 'Enrollment Number', 'type': 'quantitative'},
                    {'field': 'Revenue', 'type': 'quantitative'}
                ]
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            // Access the underlying Vega view and its API
        }).catch(console.error);
    </script>
</body>
</html>
```",Correct,336,337
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Line Chart that visualizes the trend of Enrollment Number over the Quarter for each Education Level.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Vega-Lite Enrollment Trend</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.9.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.1""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Quarter"",
                    ""type"": ""temporal"",
                    ""title"": ""Quarter""
                },
                ""y"": {
                    ""field"": ""Enrollment Number"",
                    ""type"": ""quantitative"",
                    ""title"": ""Enrollment Number""
                },
                ""color"": {
                    ""field"": ""Education Level"",
                    ""type"": ""nominal"",
                    ""title"": ""Education Level""
                }
            },
            ""width"": 800,
            ""height"": 400,
            ""title"": ""Enrollment Number Trend Over Quarters by Education Level""
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Unexpected Initial Result,337,338
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <script src=""https://cdn.jsdelivr.net/npmvega@5.20.2/build/vega.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npmvega-lite@5.8.1/build/vega-lite.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npmvega-embed@6.20.1/build/vega-embed.min.js""></script>
    <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npmvega@5.20.2/build/vega.css"">
    <title>Enrollment Number Bar Chart</title>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum['Quarter'] === 'Q2-2021'""
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Education Level"",
                    ""type"": ""ordinal"",
                    ""title"": ""Education Level""
                },
                ""y"": {
                    ""field"": ""Enrollment Number"",
                    ""type"": ""quantitative"",
                    ""title"": ""Enrollment Number""
                }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Initialization Error,338,339
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Pie Chart that visualizes the proportion of Enrollment Number contributed by each Education Level in Q2-2021.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">

<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Number by Education Level - Q2 2021</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <style>
        #vis {
            width: 500px;
            height: 500px;
        }
    </style>
</head>

<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Quarter === 'Q2-2021'""
                },
                {
                    ""aggregate"": [
                        {
                            ""op"": ""sum"",
                            ""field"": ""Enrollment Number"",
                            ""as"": ""Total Enrollment""
                        }
                    ],
                    ""groupby"": [""Education Level""]
                },
                {
                    ""calculate"": ""datum['Enrollment Number'] / datum['Total Enrollment']"",
                    ""as"": ""Proportion""
                }
            ],
            ""mark"": ""arc"",
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Proportion"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Education Level"",
                    ""type"": ""nominal""
                },
                ""tooltip"": [
                    {
                        ""field"": ""Education Level"",
                        ""type"": ""nominal""
                    },
                    {
                        ""field"": ""Proportion"",
                        ""type"": ""quantitative"",
                        ""title"": ""Proportion of Enrollment""
                    }
                ]
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>

</html>
```",Unexpected Initial Result,339,340
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Donut Chart that visualizes the distribution of Enrollment Number among Education Level in Q2-2021.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Donut Chart - Enrollment Distribution</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.6.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2""></script>
</head>
<body>
    <div id=""vis""></div>
    <script type=""text/javascript"">
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum['Quarter'] === 'Q2-2021'""
                }
            ],
            ""mark"": {
                ""type"": ""arc"",
                ""innerRadius"": 50
            },
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Enrollment Number"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Education Level"",
                    ""type"": ""nominal"",
                    ""scale"": {""scheme"": ""category10""}
                },
                ""tooltip"": [
                    {""field"": ""Education Level"", ""type"": ""nominal""},
                    {""field"": ""Enrollment Number"", ""type"": ""quantitative""}
                ]
            }
        };

        vegaEmbed('#vis', spec).then(result => {
            console.log(result);
        }).catch(console.error);
    </script>
</body>
</html>
```",Correct,340,341
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Coxcomb Chart(polar area chart) to compare the Enrollment Number of different Education Level in Q2-2021.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coxcomb Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue/dist/vue.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script type=""text/javascript"">
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A Coxcomb Chart showing Enrollment Numbers by Education Level in Q2-2021."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
                ""format"": { ""type"": ""csv"" }
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""field"": ""Quarter"",
                        ""equal"": ""Q2-2021""
                    }
                }
            ],
            ""mark"": ""arc"",
            ""encoding"": {
                ""theta"": { ""field"": ""Enrollment Number"", ""type"": ""quantitative"" },
                ""color"": { ""field"": ""Education Level"", ""type"": ""nominal"" },
                ""radius"": { ""value"": 100 }
            },
            ""view"": { ""stroke"": null }
        };

        vegaEmbed('#vis', spec).then(result => {
        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Initial Result,341,342
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Radar Chart to compare the Enrollment Number of different Education Level in Q2-2021.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Radar Chart - Enrollment Comparison</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script type=""text/javascript"">
        const spec = {
          ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
          ""description"": ""Radar Chart to compare Enrollment Number of different Education Level in Q2-2021."",
          ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
            ""format"": {
              ""type"": ""csv""
            }
          },
          ""transform"": [
            {
              ""filter"": ""datum['Quarter'] === 'Q2-2021'""
            },
            {
              ""aggregate"": [
                {
                  ""op"": ""sum"",
                  ""field"": ""Enrollment Number"",
                  ""as"": ""Total Enrollment""
                }
              ],
              ""groupby"": [""Education Level""]
            }
          ],
          ""polar"": true,
          ""radius"": {
            ""max"": 1000
          },
          ""encoding"": {
            ""theta"": {
              ""field"": ""Total Enrollment"",
              ""type"": ""quantitative""
            },
            ""color"": {
              ""field"": ""Education Level"",
              ""type"": ""nominal""
            }
          },
          ""layer"": [
            {
              ""mark"": {
                ""type"": ""line"",
                ""point"": true
              }
            },
            {
              ""mark"": ""text"",
              ""encoding"": {
                ""text"": {
                  ""field"": ""Education Level""
                },
                ""theta"": {
                  ""field"": ""Total Enrollment""
                },
                ""radius"": {
                  ""field"": ""Total Enrollment"",
                  ""type"": ""quantitative""
                }
              }
            }
          ]
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Unexpected Initial Result,342,343
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Streamgraph that visualizes the changes of Enrollment Number over the Quarter for each Education Level.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Streamgraph of Educational Enrollment</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.9.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script type=""text/javascript"">
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": {
                ""type"": ""area"",
                ""point"": true
            },
            ""encoding"": {
                ""x"": {
                    ""field"": ""Quarter"",
                    ""type"": ""temporal"",
                    ""title"": ""Quarter""
                },
                ""y"": {
                    ""field"": ""Enrollment Number"",
                    ""type"": ""quantitative"",
                    ""title"": ""Enrollment Number""
                },
                ""color"": {
                    ""field"": ""Education Level"",
                    ""type"": ""nominal"",
                    ""title"": ""Education Level""
                },
                ""order"": {
                    ""field"": ""Education Level"",
                    ""type"": ""nominal""
                }
            },
            ""height"": 400,
            ""width"": 700
        };

        vegaEmbed('#vis', spec).then(result => {
            // Access the Vega view instance
            const view = result.view;
        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Initial Result,343,344
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Slopegraph to compare the Enrollment Number between Q1-2020 and Q2-2020 for each Education Level.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Slopegraph of Enrollment Numbers</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""or"": [
                            {""field"": ""Quarter"", ""equal"": ""Q1-2020""},
                            {""field"": ""Quarter"", ""equal"": ""Q2-2020""}
                        ]
                    }
                },
                {
                    ""calculate"": ""datum.Quarter === 'Q1-2020' ? -1 : 1"",
                    ""as"": ""position""
                }
            ],
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Enrollment Number"",
                    ""type"": ""quantitative"",
                    ""axis"": {""title"": ""Enrollment Number""}
                },
                ""y"": {
                    ""field"": ""Education Level"",
                    ""type"": ""ordinal"",
                    ""axis"": {""title"": ""Education Level""}
                },
                ""detail"": {
                    ""field"": ""Education Level""
                },
                ""color"": {
                    ""field"": ""Quarter"",
                    ""type"": ""nominal"",
                    ""scale"": {""domain"": [""Q1-2020"", ""Q2-2020""], ""range"": [""#1f78b4"", ""#33a02c""]}
                }
            },
            ""config"": {
                ""line"": {
                    ""interpolate"": ""monotone""
                }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Unexpected Initial Result,344,345
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Heatmap that visualizes the Enrollment Number across Education Level and Quarters.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Heatmap</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.23.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.5.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.19.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""mark"": ""rect"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Quarter"",
                    ""type"": ""ordinal"",
                    ""title"": ""Quarter""
                },
                ""y"": {
                    ""field"": ""Education Level"",
                    ""type"": ""ordinal"",
                    ""title"": ""Education Level""
                },
                ""color"": {
                    ""field"": ""Enrollment Number"",
                    ""type"": ""quantitative"",
                    ""title"": ""Enrollment Number"",
                    ""scale"": {""scheme"": ""blues""}
                }
            },
            ""width"": 500,
            ""height"": 300
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Correct,345,346
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
  <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
  <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>

<div id=""vis""></div>

<script>
  const spec = {
    ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
    ""data"": {
      ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
      ""format"": {
        ""type"": ""csv""
      }
    },
    ""mark"": ""bar"",
    ""encoding"": {
      ""x"": {
        ""field"": ""Quarter"",
        ""type"": ""nominal"",
        ""axis"": { ""labelAngle"": 0 }
      },
      ""y"": {
        ""aggregate"": ""sum"",
        ""field"": ""Enrollment Number"",
        ""type"": ""quantitative""
      },
      ""color"": {
        ""field"": ""Education Level"",
        ""type"": ""nominal""
      },
      ""tooltip"": [
        { ""field"": ""Education Level"", ""type"": ""nominal"" },
        { ""field"": ""Enrollment Number"", ""type"": ""quantitative"" }
      ]
    },
    ""config"": {
      ""view"": {
        ""stroke"": ""transparent""
      }
    }
  };

  vegaEmbed('#vis', spec);
</script>

</body>
</html>
```",Correct,346,347
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate
Your task is to create a Horizontal Bar Chart that visualizes the Enrollment Number for each Education Level in Q2-2021.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv

The data table contains the following columns: Quarter,Education Level,Enrollment Number,Revenue,Operating Costs,Profit,Average Tuition,Number of Staff,Graduation Rate",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Enrollment Number by Education Level - Q2 2021</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.22.1""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.8.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/e84fa1e18efa3cd9ab2c4fb5c27c6191/raw/da2c085514a6958572f6ed3fb7efaaaa967e40d5/Educational%2520Enrollment.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum['Quarter'] === 'Q2-2021'""
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""y"": {
                    ""field"": ""Enrollment Number"",
                    ""type"": ""quantitative"",
                    ""title"": ""Enrollment Number""
                },
                ""x"": {
                    ""field"": ""Education Level"",
                    ""type"": ""ordinal"",
                    ""title"": ""Education Level""
                }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Unexpected Initial Result,347,348
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot that visualizes the relationship between Sales Figures and Hours Worked. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Sales Figures vs Hours Worked</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .dot {
            fill: steelblue;
            stroke: white;
            stroke-width: 1.5px;
        }
        .tooltip {
            position: absolute;
            text-align: center;
            padding: 5px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0;
            border-radius: 8px;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            data.forEach(d => {
                d['Sales Figures'] = +d['Sales Figures'];
                d['Hours Worked'] = +d['Hours Worked'];
            });

            const x = d3.scaleLinear()
                .domain(d3.extent(data, d => d['Hours Worked'])).nice()
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain(d3.extent(data, d => d['Sales Figures'])).nice()
                .range([height, 0]);

            const xAxis = d3.axisBottom(x);
            const yAxis = d3.axisLeft(y);

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(xAxis);

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(yAxis);

            const tooltip = d3.select(""body"").append(""div"")
                .attr(""class"", ""tooltip"")
                .style(""opacity"", 0);

            g.selectAll("".dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => x(d['Hours Worked']))
                .attr(""cy"", d => y(d['Sales Figures']))
                .attr(""r"", 5)
                .on(""mouseover"", function(event, d) {
                    tooltip.transition()
                        .duration(200)
                        .style(""opacity"", .9);
                    tooltip.html(`Sales: ${d['Sales Figures']}<br/>Hours: ${d['Hours Worked']}`)
                        .style(""left"", (event.pageX + 5) + ""px"")
                        .style(""top"", (event.pageY - 28) + ""px"");
                    d3.select(this).attr(""r"", 8).style(""fill"", ""orange"");
                })
                .on(""mouseout"", function(d) {
                    tooltip.transition()
                        .duration(500)
                        .style(""opacity"", 0);
                    d3.select(this).attr(""r"", 5).style(""fill"", ""steelblue"");
                });
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,348,349
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot that visualizes the relationship between Sales Figures and Hours Worked. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot - D3</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatterplot {
            border: 1px solid black;
        }
        .tooltip {
            position: absolute;
            text-align: center;
            width: auto;
            height: auto;
            padding: 5px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
    </style>
</head>
<body>

<svg class=""scatterplot"" width=""800"" height=""600""></svg>
<div class=""tooltip"" style=""opacity:0;""></div>

<script>
    const svg = d3.select('.scatterplot');
    const tooltip = d3.select('.tooltip');

    const margin = {top: 20, right: 20, bottom: 30, left: 40};
    const width = +svg.attr('width') - margin.left - margin.right;
    const height = +svg.attr('height') - margin.top - margin.bottom;

    const g = svg.append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

    const x = d3.scaleLinear().range([0, width]);
    const y = d3.scaleLinear().range([height, 0]);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
        data.forEach(d => {
            d['Sales Figures'] = +d['Sales Figures'];
            d['Hours Worked'] = +d['Hours Worked'];
        });

        x.domain(d3.extent(data, d => d['Sales Figures'])).nice();
        y.domain(d3.extent(data, d => d['Hours Worked'])).nice();

        g.append(""g"")
            .attr(""transform"", ""translate(0,"" + height + "")"")
            .call(d3.axisBottom(x));

        g.append(""g"")
            .call(d3.axisLeft(y));

        const points = g.selectAll('circle')
            .data(data)
            .enter().append('circle')
            .attr('cx', d => x(d['Sales Figures']))
            .attr('cy', d => y(d['Hours Worked']))
            .attr('r', 5)
            .attr('fill', 'steelblue')
            .attr('opacity', 0.7)
            .on('mouseover', function(event, d) {
                tooltip.transition().duration(200).style(""opacity"", .9);
                tooltip.html(""Sales: "" + d['Sales Figures'] + ""<br/>Hours: "" + d['Hours Worked'])
                    .style(""left"", (event.pageX + 5) + ""px"")
                    .style(""top"", (event.pageY - 28) + ""px"");
            })
            .on('mouseout', function(d) {
                tooltip.transition().duration(500).style(""opacity"", 0);
            });

        const brush = d3.brush()
            .extent([[0, 0], [width, height]])
            .on(""brush end"", brushed);

        g.append(""g"")
            .attr(""class"", ""brush"")
            .call(brush);

        function brushed(event) {
            const selection = d3.event.selection;
            // Clear previous brush selection
            points.classed(""selected"", false);
            if (selection) {
                const [[x0, y0], [x1, y1]] = selection;
                points.classed(""selected"", d => {
                    const xSelected = x(d['Sales Figures']);
                    const ySelected = y(d['Hours Worked']);
                    return xSelected >= x0 && xSelected <= x1 && ySelected >= y0 && ySelected <= y1;
                });
            }
        }
    });
</script>

</body>
</html>
```",Correct,349,350
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot that visualizes the relationship between Sales Figures and Hours Worked. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales vs Hours Worked Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter {
            fill: steelblue;
            opacity: 0.7;
        }
        .scatter:hover {
            opacity: 1;
        }
        .axis line, .axis path {
            fill: none;
            shape-rendering: crispEdges;
        }
        .axis text {
            font-family: Arial, sans-serif;
            font-size: 12px;
        }
    </style>
</head>
<body>
    <h2>Sales Figures vs Hours Worked</h2>
    <svg width=""800"" height=""500""></svg>
    <script>
        const margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = 800 - margin.left - margin.right,
              height = 500 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        const xAxis = d3.axisBottom(x);
        const yAxis = d3.axisLeft(y);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(function(data) {
            data.forEach(d => {
                d['Sales Figures'] = +d['Sales Figures'];
                d['Hours Worked'] = +d['Hours Worked'];
            });

            x.domain(d3.extent(data, d => d['Sales Figures'])).nice();
            y.domain(d3.extent(data, d => d['Hours Worked'])).nice();

            svg.append(""g"")
                .attr(""class"", ""axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(xAxis);

            svg.append(""g"")
                .attr(""class"", ""axis"")
                .call(yAxis);

            svg.append(""g"")
                .selectAll("".scatter"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""scatter"")
                .attr(""cx"", d => x(d['Sales Figures']))
                .attr(""cy"", d => y(d['Hours Worked']))
                .attr(""r"", 5);

            svg.call(d3.zoom()
                .scaleExtent([0.5, 5])
                .on(""zoom"", (event) => {
                    svg.attr(""transform"", event.transform);
                    svg.selectAll("".axis"").call(event.transform.rescaleX(x));
                    svg.selectAll("".axis"").call(event.transform.rescaleY(y));
                    svg.selectAll("".scatter"")
                        .attr(""cx"", d => event.transform.applyX(x(d['Sales Figures'])))
                        .attr(""cy"", d => event.transform.applyY(y(d['Hours Worked'])));
                }));
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,350,351
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Sales Figures and Hours Worked. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales vs Hours Worked Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter {
            fill-opacity: 0.7;
        }
        .dot {
            cursor: pointer;
        }
        .tooltip {
            position: absolute;
            text-align: center;
            width: 120px;
            height: auto;
            padding: 5px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <div class=""tooltip"" style=""opacity: 0;""></div>
    
    <script>
        const margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = 800 - margin.left - margin.right,
              height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            data.forEach(d => {
                d[""Sales Figures""] = +d[""Sales Figures""];
                d[""Hours Worked""] = +d[""Hours Worked""];
            });

            x.domain(d3.extent(data, d => d[""Sales Figures""])).nice();
            y.domain(d3.extent(data, d => d[""Hours Worked""])).nice();

            svg.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""y axis"")
                .call(d3.axisLeft(y));

            const tooltip = d3.select("".tooltip"");

            svg.selectAll("".dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => x(d[""Sales Figures""]))
                .attr(""cy"", d => y(d[""Hours Worked""]))
                .attr(""r"", 5)
                .attr(""fill"", ""blue"")
                .on(""mouseover"", (event, d) => {
                    tooltip.style(""opacity"", 1)
                           .html(`Sales: ${d[""Sales Figures""]}<br/>Hours: ${d[""Hours Worked""]}`)
                           .style(""left"", (event.pageX + 5) + ""px"")
                           .style(""top"", (event.pageY - 28) + ""px"");
                })
                .on(""mouseout"", () => {
                    tooltip.style(""opacity"", 0);
                })
                .on(""click"", (event, d) => {
                    const query = `${d[""Sales Figures""]} ${d[""Hours Worked""]}`;
                    window.open(`https://www.google.com/search?q=${encodeURIComponent(query)}`, '_blank');
                });
        });
    </script>
</body>
</html>
```",Correct,351,352
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot with query widgets showing the Sales Figures and Hours Worked of the given dataset. Add a slider to represent the Year.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter point {
            fill: steelblue;
        }

        .x.axis path,
        .y.axis path {
            display: none;
        }
    </style>
</head>
<body>
    <h2>Employee Performance Scatterplot</h2>
    <div>
        <label for=""yearSlider"">Year:</label>
        <input type=""range"" id=""yearSlider"" min=""2016"" max=""2020"" value=""2016"" step=""1"">
        <span id=""yearDisplay"">2016</span>
    </div>
    <svg width=""800"" height=""500""></svg>

    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        let data;
        let year = 2016;

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(loadedData => {
            data = loadedData.map(d => {
                return {
                    Year: +d.Year,
                    [d.Department]: d.Department,
                    ""Sales Figures"": +d[""Sales Figures""],
                    ""Hours Worked"": +d[""Hours Worked""],
                    Revenue: +d.Revenue,
                    Profit: +d.Profit,
                    ""Employee Satisfaction Score"": +d[""Employee Satisfaction Score""],
                    ""Number of Employees"": +d[""Number of Employees""]
                };
            });

            updateChart();
        });

        d3.select(""#yearSlider"").on(""input"", function() {
            year = +this.value;
            d3.select(""#yearDisplay"").text(year);
            updateChart();
        });

        function updateChart() {
            const filteredData = data.filter(d => d.Year === year);

            const x = d3.scaleLinear()
                .domain([0, d3.max(filteredData, d => d[""Sales Figures""])])
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(filteredData, d => d[""Hours Worked""])])
                .range([height, 0]);

            g.selectAll(""*"").remove();

            g.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""y axis"")
                .call(d3.axisLeft(y));

            g.selectAll("".scatter"")
                .data(filteredData)
                .enter().append(""circle"")
                .attr(""class"", ""scatter"")
                .attr(""cx"", d => x(d[""Sales Figures""]))
                .attr(""cy"", d => y(d[""Hours Worked""]))
                .attr(""r"", 5);
        }
    </script>
</body>
</html>
```",Correct,352,353
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot showing the Sales Figures of Marketing. Add animated transitions that connect these points using lines in order.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Sales Figures - Marketing</title>
    <style>
        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 2;
        }
        .dot {
            fill: red;
            stroke: white;
            stroke-width: 1.5;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const svg = d3.select(""svg"");
        const margin = {top: 20, right: 30, bottom: 40, left: 50};
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            data = data.filter(d => d.Department === ""Marketing"")
                        .map(d => ({
                            Year: +d.Year,
                            SalesFigures: +d[""Sales Figures""],
                            HoursWorked: +d[""Hours Worked""],
                            Revenue: +d.Revenue,
                            Profit: +d.Profit,
                            EmployeeSatisfactionScore: +d[""Employee Satisfaction Score""],
                            NumberOfEmployees: +d[""Number of Employees""]
                        }));

            const x = d3.scaleLinear()
                        .domain(d3.extent(data, d => d.Year)).nice()
                        .range([0, width]);

            const y = d3.scaleLinear()
                        .domain([0, d3.max(data, d => d.SalesFigures)]).nice()
                        .range([height, 0]);

            g.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .call(d3.axisLeft(y));

            const line = d3.line()
                           .x(d => x(d.Year))
                           .y(d => y(d.SalesFigures));

            g.append(""path"")
                .datum(data)
                .attr(""class"", ""line"")
                .attr(""d"", line)
                .attr(""fill"", ""none"");

            const dots = g.selectAll("".dot"")
                          .data(data)
                          .enter().append(""circle"")
                          .attr(""class"", ""dot"")
                          .attr(""cx"", d => x(d.Year))
                          .attr(""cy"", d => y(d.SalesFigures))
                          .attr(""r"", 5)
                          .style(""opacity"", 0);

            dots.transition()
                .duration(1000)
                .style(""opacity"", 1)
                .attr(""r"", 5);
        });
    </script>
</body>
</html>
```",Correct,353,354
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Sales Figures of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Figures Line Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke-width: 2px;
        }

        .line:hover {
            stroke-width: 4px;
        }

        .axis path,
        .axis line {
            fill: none;
            shape-rendering: crispEdges;
        }

        .tooltip {
            position: absolute;
            text-align: center;
            width: 60px;
            padding: 5px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const margin = {top: 20, right: 20, bottom: 30, left: 50},
              width = 800 - margin.left - margin.right,
              height = 400 - margin.top - margin.bottom;

        const svg = d3.select(""svg"").append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scalePoint().range([0, width]).padding(0.5);
        const y = d3.scaleLinear().range([height, 0]);

        const color = d3.scaleOrdinal(d3.schemeCategory10);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            data.forEach(d => {
                d[""Sales Figures""] = +d[""Sales Figures""];
                d.Year = d.Year;
            });

            const departments = Array.from(new Set(data.map(d => d.Department)));
            x.domain(data.map(d => d.Year));
            y.domain([0, d3.max(data, d => d[""Sales Figures""])]);

            const line = d3.line()
                .x(d => x(d.Year))
                .y(d => y(d[""Sales Figures""]));

            const departmentLines = svg.selectAll("".line"")
                .data(departments)
                .enter().append(""g"")
                .attr(""class"", ""line"")
                .attr(""fill"", ""none"");

            departmentLines.append(""path"")
                .attr(""class"", ""line"")
                .attr(""d"", d => line(data.filter(row => row.Department === d)))
                .style(""stroke"", d => color(d))
                .style(""opacity"", 0.7)
                .on(""mouseover"", function() {
                    d3.select(this).style(""opacity"", 1);
                })
                .on(""mouseout"", function() {
                    d3.select(this).style(""opacity"", 0.7);
                });

            svg.append(""g"")
                .attr(""class"", ""axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""axis"")
                .call(d3.axisLeft(y));

            const tooltip = d3.select(""body"").append(""div"")
                .attr(""class"", ""tooltip"")
                .style(""opacity"", 0);

            svg.selectAll("".line"")
                .on(""mousemove"", (event, d) => {
                    tooltip.transition().duration(200).style(""opacity"", 0.9);
                    tooltip.html(d)
                        .style(""left"", (event.pageX + 5) + ""px"")
                        .style(""top"", (event.pageY - 28) + ""px"");
                })
                .on(""mouseout"", () => {
                    tooltip.transition().duration(500).style(""opacity"", 0);
                });
        });
    </script>
</body>
</html>
```",Correct,354,355
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Bar Chart that visualizes the Sales Figures for each Department in 2020. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Bar Chart Visualization</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path,
        .axis--x line {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
            margin = {top: 20, right: 30, bottom: 30, left: 40},
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom,
            g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleBand().range([0, width]).padding(0.1),
            y = d3.scaleLinear().range([height, 0]);

        const xAxis = d3.axisBottom(x),
            yAxis = d3.axisLeft(y);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            data.forEach(d => {
                if (d.Year === ""2020"") {
                    d[""Sales Figures""] = +d[""Sales Figures""];
                }
            });

            const filteredData = data.filter(d => d.Year === ""2020"");

            x.domain(filteredData.map(d => d.Department));
            y.domain([0, d3.max(filteredData, d => d[""Sales Figures""])]);

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(xAxis);

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(yAxis);

            g.selectAll("".bar"")
                .data(filteredData)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => x(d.Department))
                .attr(""y"", d => y(d[""Sales Figures""]))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d[""Sales Figures""]));

            svg.call(d3.zoom()
                .scaleExtent([0.5, 5])
                .on(""zoom"", (event) => {
                    g.attr(""transform"", event.transform);
                }));
        });
    </script>
</body>
</html>
```",Correct,355,356
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Bar Chart that visualizes the Sales Figures for each Department in 2020. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Figures Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis {
            font-size: 12px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            // Filter for the year 2020 and convert types
            const filteredData = data.filter(d => d.Year == 2020).map(d => ({
                Department: d.Department,
                Sales: +d['Sales Figures']
            }));

            // Set up the x and y scales
            const x = d3.scaleBand()
                        .domain(filteredData.map(d => d.Department))
                        .range([0, width])
                        .padding(0.1);
            const y = d3.scaleLinear()
                        .domain([0, d3.max(filteredData, d => d.Sales)])
                        .range([height, 0]);

            // Add x axis
            g.append(""g"")
                .attr(""class"", ""axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            // Add y axis
            g.append(""g"")
                .attr(""class"", ""axis"")
                .call(d3.axisLeft(y));

            // Create bars
            const bars = g.selectAll("".bar"")
                          .data(filteredData)
                          .enter().append(""rect"")
                          .attr(""class"", ""bar"")
                          .attr(""x"", d => x(d.Department))
                          .attr(""y"", d => y(d.Sales))
                          .attr(""width"", x.bandwidth())
                          .attr(""height"", d => height - y(d.Sales))
                          .call(d3.drag()
                              .on(""start"", dragStarted)
                              .on(""drag"", dragged)
                              .on(""end"", dragEnded));

            function dragStarted(event) {
                d3.select(this).raise().classed(""active"", true);
            }

            function dragged(event, d) {
                const newY = Math.min(height, Math.max(0, event.y));
                d3.select(this).attr(""y"", newY).attr(""height"", height - newY);
                const newSales = Math.round((height - newY) / (height / d3.max(filteredData, d => d.Sales)));
                d.Sales = newSales;
            }

            function dragEnded(event) {
                d3.select(this).classed(""active"", false);
                // Re-sort bars based on new Sales values
                const sortedData = filteredData.sort((a, b) => b.Sales - a.Sales);
                x.domain(sortedData.map(d => d.Department));
                g.selectAll("".bar"")
                  .data(sortedData)
                  .transition()
                  .duration(500)
                  .attr(""x"", d => x(d.Department))
                  .attr(""y"", d => y(d.Sales))
                  .attr(""height"", d => height - y(d.Sales));
                g.select("".axis--x"").call(d3.axisBottom(x))
            }
        });
    </script>
</body>
</html>
```",Correct,356,357
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Bar Chart that visualizes the Sales Figures for each Department in 2020. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Sales Figures.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Sales Figures Visualization</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
            transition: height 0.5s;
        }
        .bar:hover {
            fill: orange;
        }
        #menu {
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <select id=""menu"">
        <option value=""asc"">Sort Ascending</option>
        <option value=""desc"">Sort Descending</option>
    </select>
    <svg width=""600"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = { top: 20, right: 30, bottom: 40, left: 40 };
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;
        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            data.forEach(d => {
                if (d.Year === ""2020"") {
                    d[""Sales Figures""] = +d[""Sales Figures""];
                    d.Department = d.Department;
                }
            });

            updateChart(data.filter(d => d[""Sales Figures""]));

            d3.select(""#menu"").on(""change"", function() {
                const selected = d3.select(this).property(""value"");
                const sortedData = selected === ""asc"" ? data.sort((a, b) => a[""Sales Figures""] - b[""Sales Figures""]) : data.sort((a, b) => b[""Sales Figures""] - a[""Sales Figures""]);
                updateChart(sortedData.filter(d => d[""Sales Figures""]));
            });

            function updateChart(data) {
                g.selectAll(""*"").remove();

                const x = d3.scaleBand()
                    .domain(data.map(d => d.Department))
                    .range([0, width])
                    .padding(0.1);

                const y = d3.scaleLinear()
                    .domain([0, d3.max(data, d => d[""Sales Figures""])])
                    .nice()
                    .range([height, 0]);

                g.append(""g"")
                    .selectAll("".bar"")
                    .data(data)
                    .enter().append(""rect"")
                    .attr(""class"", ""bar"")
                    .attr(""x"", d => x(d.Department))
                    .attr(""y"", d => y(d[""Sales Figures""]))
                    .attr(""width"", x.bandwidth())
                    .attr(""height"", d => height - y(d[""Sales Figures""]))
                    .on(""mouseover"", function(event, d) {
                        d3.select(this).transition().duration(100).style(""fill"", ""orange"");
                    })
                    .on(""mouseout"", function(event, d) {
                        d3.select(this).transition().duration(100).style(""fill"", ""steelblue"");
                    });

                g.append(""g"")
                    .attr(""class"", ""x-axis"")
                    .attr(""transform"", `translate(0,${height})`)
                    .call(d3.axisBottom(x));

                g.append(""g"")
                    .attr(""class"", ""y-axis"")
                    .call(d3.axisLeft(y));
            }
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,357,358
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot that visualizes the relationship between Sales Figures and Hours Worked. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance Scatterplot</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.0.2/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const salesFigures = [];
                const hoursWorked = [];
                rows.forEach(row => {
                    const cols = row.split(',');
                    if (cols.length > 1) {
                        salesFigures.push(parseFloat(cols[2]));
                        hoursWorked.push(parseFloat(cols[3]));
                    }
                });

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);
                
                const option = {
                    tooltip: {
                        trigger: 'item',
                        formatter: function (params) {
                            return `Sales: ${params.value[0]}<br/>Hours: ${params.value[1]}`;
                        }
                    },
                    xAxis: {
                        name: 'Sales Figures',
                        type: 'value',
                    },
                    yAxis: {
                        name: 'Hours Worked',
                        type: 'value',
                    },
                    series: [{
                        symbolSize: 10,
                        data: salesFigures.map((sales, index) => [sales, hoursWorked[index]]),
                        type: 'scatter',
                        itemStyle: {
                            color: '#5470c6',
                        },
                    }]
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,358,359
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot that visualizes the relationship between Sales Figures and Hours Worked. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Sales Figures and Hours Worked</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 600px;
        }
    </style>
</head>
<body>

<div id=""main""></div>

<script>
    fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
        .then(response => response.text())
        .then(data => {
            const lines = data.split('\n').slice(1);
            const salesFigures = [];
            const hoursWorked = [];
            const points = [];

            lines.forEach(line => {
                const cols = line.split(',');
                if(cols.length > 1 && !isNaN(cols[2]) && !isNaN(cols[3])) {
                    salesFigures.push(parseFloat(cols[2]));
                    hoursWorked.push(parseFloat(cols[3]));
                    points.push([parseFloat(cols[2]), parseFloat(cols[3])]);
                }
            });

            const myChart = echarts.init(document.getElementById('main'));

            const option = {
                title: {
                    text: 'Scatterplot of Sales Figures and Hours Worked'
                },
                tooltip: {
                    trigger: 'item',
                    formatter: (params) => {
                        return `Sales Figures: ${params.value[0]}<br>Hours Worked: ${params.value[1]}`;
                    }
                },
                xAxis: {
                    name: 'Sales Figures',
                    type: 'value',
                },
                yAxis: {
                    name: 'Hours Worked',
                    type: 'value',
                },
                series: [{
                    type: 'scatter',
                    data: points,
                    symbolSize: 10,
                    itemStyle: {
                        color: '#2f4554'
                    }
                }],
                brush: {
                    type: ['scatter'],
                    toolbox: ['rect'],
                    xAxisIndex: 0,
                    yAxisIndex: 0,
                    inBrush: {
                        color: '#4caf50'
                    }
                }
            };

            myChart.setOption(option);
            myChart.on('brushSelected', (params) => {
                const selectedPoints = params.batch[0].selected.map(idx => points[idx]);
                // Perform any action needed for the selected points
                console.log('Selected data points:', selectedPoints);
            });
        });
</script>

</body>
</html>
```",Correct,359,360
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot that visualizes the relationship between Sales Figures and Hours Worked. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance Scatterplot</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
        .then(response => response.text())
        .then(data => {
            const lines = data.split('\n').slice(1);
            const salesFigures = [];
            const hoursWorked = [];
            lines.forEach(line => {
                const columns = line.split(',');
                if (columns.length > 1) {
                    salesFigures.push(parseFloat(columns[2]));
                    hoursWorked.push(parseFloat(columns[3]));
                }
            });

            const chartDom = document.getElementById('main');
            const myChart = echarts.init(chartDom);

            const option = {
                title: {
                    text: 'Sales Figures vs Hours Worked',
                },
                xAxis: {
                    type: 'value',
                    name: 'Hours Worked',
                },
                yAxis: {
                    type: 'value',
                    name: 'Sales Figures',
                },
                series: [{
                    symbolSize: 10,
                    data: salesFigures.map((sales, index) => [hoursWorked[index], sales]),
                    type: 'scatter',
                }],
                tooltip: {
                    trigger: 'item',
                    formatter: (params) => {
                        return `Sales: ${params.data[1]}<br/>Hours: ${params.data[0]}`;
                    }
                },
            };

            myChart.setOption(option);
            window.addEventListener('resize', myChart.resize);
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,360,361
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Sales Figures and Hours Worked. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 800px;height:600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const chartData = lines.map(line => {
                    const [year, department, salesFigures, hoursWorked, revenue, profit, employeeSatisfactionScore, numberOfEmployees] = line.split(',');
                    return {
                        year,
                        department,
                        salesFigures: parseFloat(salesFigures),
                        hoursWorked: parseFloat(hoursWorked),
                    };
                }).filter(item => !isNaN(item.salesFigures) && !isNaN(item.hoursWorked));

                const myChart = echarts.init(document.getElementById('main'));

                const option = {
                    title: {
                        text: 'Sales Figures vs. Hours Worked',
                    },
                    tooltip: {
                        trigger: 'item',
                        formatter: function (params) {
                            return `Year: ${params.data.year}<br/>Department: ${params.data.department}<br/>Sales Figures: ${params.data.salesFigures}<br/>Hours Worked: ${params.data.hoursWorked}`;
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Sales Figures',
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Hours Worked',
                    },
                    series: [{
                        symbolSize: 10,
                        data: chartData.map(item => ({
                            value: [item.salesFigures, item.hoursWorked],
                            year: item.year,
                            department: item.department,
                            salesFigures: item.salesFigures,
                            hoursWorked: item.hoursWorked,
                        })),
                        type: 'scatter',
                    }],
                };

                myChart.setOption(option);

                myChart.on('click', function (params) {
                    if (params.componentType === 'series') {
                        const searchQuery = `${params.data.year} ${params.data.department}`;
                        const url = `https://www.google.com/search?q=${encodeURIComponent(searchQuery)}`;
                        window.open(url, '_blank');
                    }
                });
            });
    </script>
</body>
</html>
```",Correct,361,362
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot with query widgets showing the Sales Figures and Hours Worked of the given dataset. Add a slider to represent the Year.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #chart {
            width: 100%;
            height: 500px;
        }
        #yearSlider {
            margin: 20px 0;
        }
    </style>
</head>
<body>
    <div id=""yearSlider""></div>
    <div id=""chart""></div>

    <script>
        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv');
            const data = await response.text();
            const parsedData = parseCSV(data);
            return parsedData;
        }

        function parseCSV(data) {
            const rows = data.split('\n').slice(1);
            const result = rows.map(row => {
                const columns = row.split(',');
                return {
                    year: parseInt(columns[0]),
                    department: columns[1],
                    salesFigures: parseFloat(columns[2]),
                    hoursWorked: parseFloat(columns[3]),
                    revenue: parseFloat(columns[4]),
                    profit: parseFloat(columns[5]),
                    employeeSatisfactionScore: parseFloat(columns[6]),
                    numberOfEmployees: parseInt(columns[7])
                };
            });
            return result;
        }

        function createScatterPlot(data) {
            const chart = echarts.init(document.getElementById('chart'));
            const option = {
                tooltip: {},
                xAxis: {
                    name: 'Sales Figures',
                    type: 'value'
                },
                yAxis: {
                    name: 'Hours Worked',
                    type: 'value'
                },
                series: [{
                    symbolSize: 10,
                    data: data.map(item => [item.salesFigures, item.hoursWorked]),
                    type: 'scatter'
                }]
            };
            chart.setOption(option);
            return chart;
        }

        function updateChart(yearData, year) {
            const chart = echarts.init(document.getElementById('chart'));
            const filteredData = yearData.filter(item => item.year === year);
            const option = {
                series: [{
                    data: filteredData.map(item => [item.salesFigures, item.hoursWorked]),
                }]
            };
            chart.setOption(option);
        }

        async function init() {
            const data = await fetchData();
            const years = [...new Set(data.map(item => item.year))];
            
            const yearSlider = document.createElement('input');
            yearSlider.type = 'range';
            yearSlider.min = Math.min(...years);
            yearSlider.max = Math.max(...years);
            yearSlider.value = Math.min(...years);
            yearSlider.step = 1;
            yearSlider.id = 'yearRange';
            yearSlider.oninput = function() {
                updateChart(data, parseInt(this.value));
            };
            document.getElementById('yearSlider').appendChild(yearSlider);

            createScatterPlot(data);
            updateChart(data, parseInt(yearSlider.value));
        }

        init();
    </script>
</body>
</html>
```",Correct,362,363
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot showing the Sales Figures of Marketing. Add animated transitions that connect these points using lines in order.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Figures Scatterplot for Marketing</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 800px;height:600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
        .then(response => response.text())
        .then(data => {
            const parsedData = data.split('\n').slice(1).map(row => row.split(','));
            const marketingData = parsedData.filter(row => row[1] === 'Marketing').map(row => ({
                year: row[0],
                salesFigures: parseFloat(row[2]),
            }));

            const years = marketingData.map(item => item.year);
            const salesFigures = marketingData.map(item => item.salesFigures);

            const myChart = echarts.init(document.getElementById('main'));

            const option = {
                xAxis: {
                    type: 'category',
                    data: years,
                    name: 'Year'
                },
                yAxis: {
                    type: 'value',
                    name: 'Sales Figures'
                },
                series: [{
                    name: 'Sales Figures',
                    type: 'scatter',
                    data: marketingData,
                    animationDuration: 1000,
                    lineStyle: {
                        type: 'dashed',
                        color: '#5470C6'
                    },
                    label: {
                        show: true,
                        position: 'top'
                    }
                }, {
                    name: 'Line',
                    type: 'line',
                    data: salesFigures.map((value, index) => [index, value]),
                    animationDuration: 2000,
                    lineStyle: {
                        color: '#FF0000'
                    }
                }]
            };

            myChart.setOption(option);
        });
    </script>
</body>
</html>
```",Correct,363,364
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Sales Figures of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Sales Figures</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #chart {
            width: 100%;
            height: 600px;
        }
    </style>
</head>
<body>
    <div id=""chart""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const yearSet = new Set();
                const salesData = {};

                lines.forEach(line => {
                    const [year, department, salesFigures] = line.split(',');
                    if (year && department && salesFigures) {
                        yearSet.add(year);
                        if (!salesData[department]) {
                            salesData[department] = [];
                        }
                        salesData[department].push({ year: year, sales: parseFloat(salesFigures) });
                    }
                });

                const years = Array.from(yearSet);
                const series = Object.keys(salesData).map(department => ({
                    name: department,
                    type: 'line',
                    data: years.map(year => {
                        const record = salesData[department].find(r => r.year === year);
                        return record ? record.sales : 0;
                    }),
                    smooth: true,
                }));

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    title: {
                        text: 'Employee Sales Figures Over Years',
                    },
                    tooltip: {
                        trigger: 'axis',
                    },
                    legend: {
                        data: Object.keys(salesData),
                    },
                    xAxis: {
                        type: 'category',
                        data: years,
                    },
                    yAxis: {
                        type: 'value',
                    },
                    series: series,
                    color: ['#5470C6', '#91CC75', '#EE6666', '#73C0DE', '#3BA0E9'],
                };

                chart.setOption(option);

                // Highlight effect on hover
                chart.on('mouseover', function (params) {
                    if (params.seriesType === 'line') {
                        chart.dispatchAction({
                            type: 'highlight',
                            seriesIndex: params.seriesIndex,
                            dataIndex: params.dataIndex,
                        });
                    }
                });
                chart.on('mouseout', function (params) {
                    if (params.seriesType === 'line') {
                        chart.dispatchAction({
                            type: 'downplay',
                            seriesIndex: params.seriesIndex,
                            dataIndex: params.dataIndex,
                        });
                    }
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,364,365
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Bar Chart that visualizes the Sales Figures for each Department in 2020. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Figures Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const salesData = {};
                lines.forEach(line => {
                    const [year, department, salesFigures] = line.split(',');
                    if (year.trim() === '2020') {
                        salesData[department.trim()] = salesFigures.trim();
                    }
                });
                const departments = Object.keys(salesData);
                const salesFigures = departments.map(dept => salesData[dept]);

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption({
                    title: {
                        text: 'Sales Figures by Department (2020)'
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: departments,
                        axisLabel: {
                            interval: 0,
                            rotate: 45
                        }
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        type: 'bar',
                        data: salesFigures,
                        itemStyle: {
                            color: '#5470c6'
                        }
                    }],
                    dataZoom: [{
                        type: 'inside',
                        xmin: 0,
                        xmax: departments.length - 1
                    }, {
                        type: 'slider',
                        show: true,
                        xAxisIndex: [0],
                        left: '10%',
                        right: '10%',
                        bottom: 20,
                        height: 20,
                        start: 0,
                        end: 100
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,365,366
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Bar Chart that visualizes the Sales Figures for each Department in 2020. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 600px;
            height: 400px;
            margin: auto;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const salesData = {};
                rows.forEach(row => {
                    const cols = row.split(',');
                    if (cols[0] === '2020') {
                        const department = cols[1];
                        const salesFigures = parseFloat(cols[2]);
                        salesData[department] = (salesData[department] || 0) + salesFigures;
                    }
                });
                
                const departments = Object.keys(salesData);
                const salesFigures = departments.map(dep => salesData[dep]);

                const chartData = departments.map((dep, index) => ({ name: dep, value: salesFigures[index] }));
                chartData.sort((a, b) => b.value - a.value);

                const chart = echarts.init(document.getElementById('main'));
                const option = {
                    title: {
                        text: 'Sales Figures by Department (2020)',
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: chartData.map(item => item.name),
                        axisLabel: {
                            interval: 0,
                            rotate: 30 // Rotate labels for better readability
                        }
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        type: 'bar',
                        data: chartData.map(item => item.value),
                        draggable: true
                    }]
                };

                chart.setOption(option);

                chart.on('drop', function (params) {
                    const dataIndex = params.targetIndex;
                    const departmentName = params.name;

                    chartData.splice(dataIndex, 1);
                    chartData.push({ name: departmentName, value: salesData[departmentName] });
                    chartData.sort((a, b) => b.value - a.value);

                    chart.setOption({
                        xAxis: {
                            data: chartData.map(item => item.name)
                        },
                        series: [{
                            data: chartData.map(item => item.value)
                        }]
                    });
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,366,367
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Bar Chart that visualizes the Sales Figures for each Department in 2020. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Sales Figures.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Figures by Department in 2020</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.0/echarts.min.js""></script>
    <style>
        #main {
            width: 600px;
            height: 400px;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <select id=""sortOrder"" onchange=""updateChart()"">
        <option value=""asc"">Ascending</option>
        <option value=""desc"">Descending</option>
    </select>
    <script>
        let chartData = [];
        let sortedData = [];

        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1);
            rows.forEach(row => {
                const cols = row.split(',');
                if (cols[0] === '2020') {
                    chartData.push({
                        department: cols[1],
                        sales: parseFloat(cols[2])
                    });
                }
            });
            updateChart();
        });

        function updateChart() {
            const sortOrder = document.getElementById('sortOrder').value;
            sortedData = [...chartData].sort((a, b) => sortOrder === 'asc' ? a.sales - b.sales : b.sales - a.sales);

            const departments = sortedData.map(item => item.department);
            const salesFigures = sortedData.map(item => item.sales);

            const chartDOM = document.getElementById('main');
            const myChart = echarts.init(chartDOM);

            const option = {
                title: {
                    text: 'Sales Figures by Department in 2020',
                    subtext: 'Select sorting order',
                    left: 'center'
                },
                xAxis: {
                    type: 'category',
                    data: departments,
                },
                yAxis: {
                    type: 'value',
                    name: 'Sales Figures',
                },
                series: [{
                    type: 'bar',
                    data: salesFigures,
                    animationEasing: 'easeOutBounce',
                    animationDelay: (idx) => idx * 100,
                }],
                animationDurationUpdate: 1000
            };

            myChart.setOption(option);
        }
    </script>
</body>
</html>
```",Correct,367,368
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot that visualizes the relationship between Sales Figures and Hours Worked. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot of Sales Figures vs Hours Worked</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.5.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.1""></script>
    <style>
        .vega-tooltip {
            position: absolute;
            background: white;
            border: 1px solid #ccc;
            padding: 5px;
            pointer-events: none;
            opacity: 0.9;
        }
    </style>
</head>
<body>
    <div id=""vis""></div>

    <script>
        const yourVlSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv""
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Sales Figures"",
                    ""type"": ""quantitative"",
                    ""scale"": {
                        ""domain"": { ""data"": ""data"", ""field"": ""Sales Figures"" }
                    },
                    ""axis"": { ""title"": ""Sales Figures"" }
                },
                ""y"": {
                    ""field"": ""Hours Worked"",
                    ""type"": ""quantitative"",
                    ""scale"": {
                        ""domain"": { ""data"": ""data"", ""field"": ""Hours Worked"" }
                    },
                    ""axis"": { ""title"": ""Hours Worked"" }
                },
                ""tooltip"": [
                    { ""field"": ""Sales Figures"", ""type"": ""quantitative"" },
                    { ""field"": ""Hours Worked"", ""type"": ""quantitative"" },
                    { ""field"": ""Employee Satisfaction Score"", ""type"": ""quantitative"" }
                ]
            },
            ""config"": {
                ""view"": {
                    ""tooltip"": true
                }
            }
        };

        vegaEmbed('#vis', yourVlSpec).then(function(result) {
            result.view.addSignalListener('hover', function(name, value) {
                console.log(name, value);
            });
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,368,369
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot that visualizes the relationship between Sales Figures and Hours Worked. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Sales Figures vs Hours Worked</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatterplot showing the relationship between Sales Figures and Hours Worked."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Sales Figures"",
                    ""type"": ""quantitative"",
                    ""title"": ""Sales Figures""
                },
                ""y"": {
                    ""field"": ""Hours Worked"",
                    ""type"": ""quantitative"",
                    ""title"": ""Hours Worked""
                },
                ""tooltip"": [
                    {""field"": ""Sales Figures"", ""type"": ""quantitative""},
                    {""field"": ""Hours Worked"", ""type"": ""quantitative""},
                    {""field"": ""Employee Satisfaction Score"", ""type"": ""quantitative""}
                ]
            },
            ""selection"": {
                ""brush"": {
                    ""type"": ""interval"", 
                    ""encodings"": [""x"", ""y""]
                }
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""selection"": ""brush""
                    }
                }
            ]
        };

        vegaEmbed('#vis', spec).then(function(result) {
            // Access the underlying Vega view instance and listen for changes.
            result.view.addEventListener('click', function(event) {
                const selections = result.view.data('table');
                console.log(selections);
            });
        }).catch(console.error);
    </script>
</body>
</html>
```",Execution Error,369,370
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot that visualizes the relationship between Sales Figures and Hours Worked. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Sales Figures and Hours Worked</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>

<div id=""vis""></div>

<script type=""text/javascript"">
    const spec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
            ""format"": {""type"": ""csv""}
        },
        ""mark"": ""point"",
        ""encoding"": {
            ""x"": {""field"": ""Sales Figures"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Hours Worked"", ""type"": ""quantitative""},
            ""tooltip"": [
                {""field"": ""Sales Figures"", ""type"": ""quantitative""},
                {""field"": ""Hours Worked"", ""type"": ""quantitative""}
            ]
        },
        ""resolve"": {""scale"": {""x"": ""independent"", ""y"": ""independent""}},
        ""config"": {
            ""view"": {""stroke"": ""transparent""},
            ""axes"": {
                ""domain"": false
            }
        }
    };

    vegaEmbed('#vis', spec, {renderer: 'canvas', actions: false}).then(function(result) {
        // Add interactivity for zooming
        result.view.addListener('wheel', function(event) {
            result.view.zoom(event);
            result.view.run();
        });
    }).catch(console.error);
</script>

</body>
</html>
```",Execution Error,370,371
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Sales Figures and Hours Worked. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Sales Figures vs Hours Worked</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script type=""text/javascript"">
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
                ""format"": { ""type"": ""csv"" }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Sales Figures"",
                    ""type"": ""quantitative"",
                    ""title"": ""Sales Figures""
                },
                ""y"": {
                    ""field"": ""Hours Worked"",
                    ""type"": ""quantitative"",
                    ""title"": ""Hours Worked""
                },
                ""tooltip"": [
                    {""field"": ""Department"", ""type"": ""nominal""},
                    {""field"": ""Revenue"", ""type"": ""quantitative""},
                    {""field"": ""Profit"", ""type"": ""quantitative""},
                    {""field"": ""Employee Satisfaction Score"", ""type"": ""quantitative""}
                ]
            },
            ""config"": {
                ""mark"": {
                    ""tooltip"": true
                }
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            const view = result.view;
            view.addEventListener('click', function(event, item) {
                if (item && item.datum) {
                    const sales = item.datum[""Sales Figures""];
                    const hours = item.datum[""Hours Worked""];
                    const query = `Sales Figures: ${sales}, Hours Worked: ${hours}`;
                    const googleSearchUrl = `https://www.google.com/search?q=${encodeURIComponent(query)}`;
                    window.open(googleSearchUrl, '_blank');
                }
            });
        }).catch(console.error);
    </script>
</body>
</html>
```",Correct,371,372
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot with query widgets showing the Sales Figures and Hours Worked of the given dataset. Add a slider to represent the Year.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>

<div id=""vis""></div>

<script type=""text/javascript"">
    const spec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""description"": ""A scatter plot showing Sales Figures vs Hours Worked."",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
            ""format"": {""type"": ""csv""}
        },
        ""transform"": [
            {
                ""filter"": ""datum.Year == year""
            }
        ],
        ""params"": [
            {
                ""name"": ""year"",
                ""value"": 2020,
                ""bind"": {
                    ""input"": ""range"",
                    ""min"": 2015,
                    ""max"": 2023,
                    ""step"": 1
                }
            }
        ],
        ""mark"": ""circle"",
        ""encoding"": {
            ""x"": {
                ""field"": ""Sales Figures"",
                ""type"": ""quantitative"",
                ""title"": ""Sales Figures""
            },
            ""y"": {
                ""field"": ""Hours Worked"",
                ""type"": ""quantitative"",
                ""title"": ""Hours Worked""
            },
            ""color"": {
                ""field"": ""Department"",
                ""type"": ""nominal"",
                ""title"": ""Department""
            },
            ""tooltip"": [
                {""field"": ""Year"", ""type"": ""ordinal""},
                {""field"": ""Sales Figures"", ""type"": ""quantitative""},
                {""field"": ""Hours Worked"", ""type"": ""quantitative""},
                {""field"": ""Profit"", ""type"": ""quantitative""}
            ]
        },
        ""width"": 600,
        ""height"": 400
    };

    vegaEmbed('#vis', spec)
        .then(function(result) {})
        .catch(console.error);
</script>

</body>
</html>
```",Correct,372,373
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot showing the Sales Figures of Marketing. Add animated transitions that connect these points using lines in order.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Figures Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Department === 'Marketing'""
                }
            ],
            ""mark"": {
                ""type"": ""point"",
                ""filled"": true
            },
            ""encoding"": {
                ""x"": {
                    ""field"": ""Sales Figures"",
                    ""type"": ""quantitative"",
                    ""axis"": {
                        ""title"": ""Sales Figures""
                    }
                },
                ""y"": {
                    ""field"": ""Revenue"",
                    ""type"": ""quantitative"",
                    ""axis"": {
                        ""title"": ""Revenue""
                    }
                },
                ""tooltip"": [
                    {""field"": ""Year"", ""type"": ""ordinal""},
                    {""field"": ""Sales Figures"", ""type"": ""quantitative""},
                    {""field"": ""Revenue"", ""type"": ""quantitative""}
                ]
            },
            ""animation"": {
                ""duration"": 2000,
                ""easing"": ""quadratic-in-out"",
                ""update"": [
                    {""property"": ""opacity"", ""from"": 0, ""to"": 1}
                ]
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            console.log(result);
        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Initial Result,373,374
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Sales Figures of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance - Sales Figures</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.17.0""></script>
    <style>
        #vis {
            width: 800px;
            height: 400px;
        }
    </style>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""Sales Figures by Department over Years"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": {
                ""type"": ""line"",
                ""point"": true,
                ""tooltip"": true
            },
            ""encoding"": {
                ""x"": {
                    ""field"": ""Year"",
                    ""type"": ""ordinal"",
                    ""title"": ""Year""
                },
                ""y"": {
                    ""field"": ""Sales Figures"",
                    ""type"": ""quantitative"",
                    ""title"": ""Sales Figures""
                },
                ""color"": {
                    ""field"": ""Department"",
                    ""type"": ""nominal"",
                    ""title"": ""Department""
                }
            },
            ""config"": {
                ""view"": {
                    ""stroke"": null
                },
                ""line"": {
                    ""interpolate"": ""monotone""
                }
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            const view = result.view;
            view.addEventListener('mouseover', function(event, item) {
                if (item && item.mark && item.mark.type === 'line') {
                    const mark = item.mark;
                    mark.stroke = 'orange';
                    mark.strokeWidth = 3;
                    view.run();
                }
            });

            view.addEventListener('mouseout', function(event, item) {
                if (item && item.mark && item.mark.type === 'line') {
                    const mark = item.mark;
                    mark.stroke = undefined;
                    mark.strokeWidth = 1;
                    view.run();
                }
            });
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,374,375
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Bar Chart that visualizes the Sales Figures for each Department in 2020. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Figures by Department in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.9.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""Bar Chart of Sales Figures for each Department in 2020"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Year === '2020'""
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Department"",
                    ""type"": ""ordinal"",
                    ""title"": ""Department""
                },
                ""y"": {
                    ""field"": ""Sales Figures"",
                    ""type"": ""quantitative"",
                    ""title"": ""Sales Figures""
                }
            },
            ""interaction"": {
                ""scrollZoom"": true,
                ""pan"": true
            }
        };

        vegaEmbed('#vis', spec, {renderer: 'svg'}).then(result => {
            result.view.addSignalListener('zoom', () => {
                result.view.run();
            });
            result.view.addSignalListener('pan', () => {
                result.view.run();
            });
        });
    </script>
</body>
</html>
```",Initialization Error,375,376
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Bar Chart that visualizes the Sales Figures for each Department in 2020. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <title>Sales Figures by Department in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/d3@7.0.0/dist/d3.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0/build/vega.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.3.0/build/vega-lite.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0/build/vega-embed.js""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""field"": ""Year"",
                        ""equal"": 2020
                    }
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Department"",
                    ""type"": ""ordinal"",
                    ""sort"": null,
                    ""title"": ""Department""
                },
                ""y"": {
                    ""field"": ""Sales Figures"",
                    ""type"": ""quantitative"",
                    ""title"": ""Sales Figures""
                },
                ""color"": {
                    ""field"": ""Department"",
                    ""type"": ""nominal""
                }
            },
            ""config"": {
                ""drag"": ""x""
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            const view = result.view;
            view.addSignalListener('drag', (name, value) => {
                view.data('table').update();
                view.runAsync();
            });
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,376,377
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Bar Chart that visualizes the Sales Figures for each Department in 2020. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Sales Figures.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance Visualization</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/vega/5.21.0/vega.min.js""></script>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/vega-lite/5.10.0/vega-lite.min.js""></script>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/vega-embed/6.20.2/vega-embed.min.js""></script>
</head>
<body>
    <h2>Sales Figures by Department in 2020</h2>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Year == 2020""
                },
                {
                    ""calculate"": ""datum.Sales Figures"",
                    ""as"": ""SalesFigures""
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Department"",
                    ""type"": ""ordinal"",
                    ""axis"": {
                        ""labelAngle"": -45
                    }
                },
                ""y"": {
                    ""field"": ""SalesFigures"",
                    ""type"": ""quantitative"",
                    ""title"": ""Sales Figures""
                },
                ""color"": {
                    ""field"": ""SalesFigures"",
                    ""type"": ""quantitative"",
                    ""scale"": {
                        ""scheme"": ""blues""
                    }
                }
            },
            ""params"": [
                {
                    ""name"": ""sortOrder"",
                    ""value"": ""ascending"",
                    ""bind"": {
                        ""input"": ""select"",
                        ""options"": [
                            ""ascending"",
                            ""descending""
                        ]
                    }
                }
            ],
            ""config"": {
                ""view"": {
                    ""continuousWidth"": 500,
                    ""continuousHeight"": 300
                }
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            result.view.addSignalListener('sortOrder', function(name, value) {
                result.view.dispatch('start', true);
                result.view.runAsync();
            });
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,377,378
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance Visualization</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .chart {
            display: inline-block;
            margin: 20px;
        }
        .scatterplot {
            width: 500px;
            height: 400px;
        }
        .barchart {
            width: 500px;
            height: 400px;
        }
    </style>
</head>
<body>
    <div class=""chart scatterplot"" id=""scatterplot""></div>
    <div class=""chart barchart"" id=""barchart""></div>

    <script>
        const width = 500, height = 400;

        d3.csv('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv').then(data => {
            // Prepare data
            data.forEach(d => {
                d['Sales Figures'] = +d['Sales Figures'];
                d['Profit'] = +d['Profit'];
                d['Revenue'] = +d['Revenue'];
                d['Employee Satisfaction Score'] = +d['Employee Satisfaction Score'];
            });

            // Scatterplot
            const svgScatter = d3.select('#scatterplot')
                .append('svg')
                .attr('width', width)
                .attr('height', height);

            const xScaleScatter = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Sales Figures'])])
                .range([0, width]);

            const yScaleScatter = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Profit'])])
                .range([height, 0]);

            svgScatter.selectAll('circle')
                .data(data)
                .enter()
                .append('circle')
                .attr('cx', d => xScaleScatter(d['Sales Figures']))
                .attr('cy', d => yScaleScatter(d['Profit']))
                .attr('r', 5)
                .attr('fill', 'blue')
                .attr('opacity', 0.5);

            svgScatter.append('g')
                .attr('transform', `translate(0,${height})`)
                .call(d3.axisBottom(xScaleScatter));

            svgScatter.append('g')
                .call(d3.axisLeft(yScaleScatter));

            // Bar Chart
            const svgBar = d3.select('#barchart')
                .append('svg')
                .attr('width', width)
                .attr('height', height);

            const xScaleBar = d3.scaleBand()
                .domain(data.map(d => d.Department))
                .range([0, width])
                .padding(0.1);

            const yScaleBar = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Revenue'])])
                .range([height, 0]);

            svgBar.selectAll('rect')
                .data(data)
                .enter()
                .append('rect')
                .attr('x', d => xScaleBar(d.Department))
                .attr('y', d => yScaleBar(d['Revenue']))
                .attr('width', xScaleBar.bandwidth())
                .attr('height', d => height - yScaleBar(d['Revenue']))
                .attr('fill', 'orange');

            svgBar.append('g')
                .attr('transform', `translate(0,${height})`)
                .call(d3.axisBottom(xScaleBar));

            svgBar.append('g')
                .call(d3.axisLeft(yScaleBar));
        });
    </script>
</body>
</html>
```",Initialization Error,378,379
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance Visualization</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter {
            fill: steelblue;
            stroke: white;
            stroke-width: 1.5px;
        }
        .bar {
            fill: orange;
        }
        .bar.highlight {
            fill: red;
        }
        .axis--x path,
        .axis--y path {
            display: none;
        }
        .axis--x line,
        .axis--y line {
            stroke: lightgrey;
        }
    </style>
</head>
<body>
    <svg id=""scatterplot"" width=""400"" height=""400""></svg>
    <svg id=""barchart"" width=""400"" height=""400""></svg>

    <script>
        const margin = {top: 20, right: 20, bottom: 30, left: 40};
        const scatterWidth = 400 - margin.left - margin.right;
        const scatterHeight = 400 - margin.top - margin.bottom;
        const barWidth = 400 - margin.left - margin.right;
        const barHeight = 400 - margin.top - margin.bottom;
        
        const scatterSvg = d3.select(""#scatterplot"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const barSvg = d3.select(""#barchart"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            data.forEach(d => {
                d[""Sales Figures""] = +d[""Sales Figures""];
                d[""Profit""] = +d[""Profit""];
                d[""Employee Satisfaction Score""] = +d[""Employee Satisfaction Score""];
            });

            const xScale = d3.scaleLinear()
                .domain(d3.extent(data, d => d[""Sales Figures""]))
                .range([0, scatterWidth]);
            
            const yScale = d3.scaleLinear()
                .domain(d3.extent(data, d => d[""Profit""]))
                .range([scatterHeight, 0]);

            let xAxis = d3.axisBottom(xScale);
            let yAxis = d3.axisLeft(yScale);

            scatterSvg.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${scatterHeight})`)
                .call(xAxis);

            scatterSvg.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(yAxis);

            const scatterPoints = scatterSvg.selectAll("".scatter"")
                .data(data)
                .enter().append(""circle"")
                    .attr(""class"", ""scatter"")
                    .attr(""r"", 5)
                    .attr(""cx"", d => xScale(d[""Sales Figures""]))
                    .attr(""cy"", d => yScale(d[""Profit""]))
                    .on(""click"", function(event, d) {
                        const selectedDept = d.Department;
                        barSvg.selectAll("".bar"").classed(""highlight"", false);
                        barSvg.selectAll("".bar"").filter(b => b.Department === selectedDept).classed(""highlight"", true);
                    });

            const barXScale = d3.scaleBand()
                .domain(data.map(d => d.Department))
                .range([0, barWidth])
                .padding(0.1);
                
            const barYScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Employee Satisfaction Score""])])
                .range([barHeight, 0]);

            barSvg.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${barHeight})`)
                .call(d3.axisBottom(barXScale));

            barSvg.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(barYScale));

            barSvg.selectAll("".bar"")
                .data(data)
                .enter().append(""rect"")
                    .attr(""class"", ""bar"")
                    .attr(""x"", d => barXScale(d.Department))
                    .attr(""y"", d => barYScale(d[""Employee Satisfaction Score""]))
                    .attr(""width"", barXScale.bandwidth())
                    .attr(""height"", d => barHeight - barYScale(d[""Employee Satisfaction Score""]));

            let brush = d3.brush()
                .extent([[0, 0], [scatterWidth, scatterHeight]])
                .on(""end"", brushed);
            
            scatterSvg.append(""g"")
                .attr(""class"", ""brush"")
                .call(brush);
            
            function brushed(event) {
                const selection = event.selection;
                if (selection) {
                    const [[x0, y0], [x1, y1]] = selection;
                    
                    scatterPoints.classed(""highlight"", function(d) {
                        return xScale(d[""Sales Figures""]) >= x0 && xScale(d[""Sales Figures""]) <= x1 &&
                               yScale(d[""Profit""]) >= y1 && yScale(d[""Profit""]) <= y0;
                    });

                    let selectedDepartments = scatterPoints.filter(d => d3.select(this).classed(""highlight""))
                        .data().map(d => d.Department);

                    barSvg.selectAll("".bar"")
                        .classed(""highlight"", d => selectedDepartments.includes(d.Department));
                }
            }
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,379,380
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Sales Figures , while the pie chart represents the distribution of Hours Worked.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance Data Visualization</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 2;
        }
        .arc {
            stroke: #fff;
        }
    </style>
</head>
<body>
    <h2>Employee Performance Dashboard</h2>
    <svg id=""line-chart"" width=""800"" height=""400""></svg>
    <svg id=""pie-chart"" width=""400"" height=""400""></svg>

    <script>
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(function(data) {
            // Parse data
            data.forEach(function(d) {
                d[""Sales Figures""] = +d[""Sales Figures""];
                d[""Hours Worked""] = +d[""Hours Worked""];
                d.Year = +d.Year;
            });

            // Line Chart for Sales Figures
            const svgLine = d3.select(""#line-chart""),
                margin = {top: 20, right: 30, bottom: 30, left: 60},
                width = +svgLine.attr(""width"") - margin.left - margin.right,
                height = +svgLine.attr(""height"") - margin.top - margin.bottom,
                gLine = svgLine.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

            const xLine = d3.scaleLinear().domain(d3.extent(data, d => d.Year)).range([0, width]);
            const yLine = d3.scaleLinear().domain([0, d3.max(data, d => d[""Sales Figures""])]).range([height, 0]);

            gLine.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(xLine));

            gLine.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(yLine));

            const line = d3.line()
                .x(d => xLine(d.Year))
                .y(d => yLine(d[""Sales Figures""]));

            gLine.append(""path"")
                .datum(data)
                .attr(""class"", ""line"")
                .attr(""d"", line);

            // Pie Chart for Hours Worked
            const svgPie = d3.select(""#pie-chart""),
                radius = Math.min(+svgPie.attr(""width""), +svgPie.attr(""height"")) / 2,
                gPie = svgPie.append(""g"").attr(""transform"", `translate(${radius},${radius})`);

            const pie = d3.pie().value(d => d[""Hours Worked""]);
            const arc = d3.arc().innerRadius(0).outerRadius(radius);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const arcData = pie(data);
            gPie.selectAll("".arc"")
                .data(arcData)
                .enter().append(""path"")
                .attr(""class"", ""arc"")
                .attr(""d"", arc)
                .attr(""fill"", (d, i) => color(i));
        });
    </script>
</body>
</html>
```",Correct,380,381
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Sales Figures , while the pie chart represents the distribution of Hours Worked. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Hours Worked for the selected group.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance Visualization</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .chart {
            margin: 20px;
        }
    </style>
</head>
<body>
<div class=""chart"" id=""lineChart""></div>
<div class=""chart"" id=""pieChart""></div>

<script>
    // Load CSV data
    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
        // Parse data
        data.forEach(d => {
            d[""Sales Figures""] = +d[""Sales Figures""];
            d[""Hours Worked""] = +d[""Hours Worked""];
            d[""Revenue""] = +d[""Revenue""];
            d[""Profit""] = +d[""Profit""];
            d[""Employee Satisfaction Score""] = +d[""Employee Satisfaction Score""];
            d[""Number of Employees""] = +d[""Number of Employees""];
            d.Year = +d.Year;
        });

        const margin = {top: 20, right: 30, bottom: 30, left: 40},
            width = 600 - margin.left - margin.right,
            height = 400 - margin.top - margin.bottom;

        // Line chart
        const lineSvg = d3.select(""#lineChart"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleLinear().domain(d3.extent(data, d => d.Year)).range([0, width]);
        const y = d3.scaleLinear().domain([0, d3.max(data, d => d[""Sales Figures""])]).range([height, 0]);

        lineSvg.append(""g"")
            .attr(""transform"", `translate(0,${height})`)
            .call(d3.axisBottom(x));

        lineSvg.append(""g"")
            .call(d3.axisLeft(y));

        const line = d3.line()
            .x(d => x(d.Year))
            .y(d => y(d[""Sales Figures""]));

        lineSvg.append(""path"")
            .datum(data)
            .attr(""fill"", ""none"")
            .attr(""stroke"", ""steelblue"")
            .attr(""stroke-width"", 1.5)
            .attr(""d"", line);

        // Brushing and linking
        const brush = d3.brushX()
            .extent([[0, 0], [width, height]])
            .on(""brush end"", brushed);

        lineSvg.append(""g"")
            .attr(""class"", ""brush"")
            .call(brush);

        function brushed(event) {
            const selection = event.selection;
            if (selection) {
                const [x0, x1] = selection.map(x.invert);
                const selectedData = data.filter(d => d.Year >= x0 && d.Year <= x1);
                updatePieChart(selectedData);
            }
        }

        // Pie chart
        const pieWidth = 400, pieHeight = 400;
        const pieSvg = d3.select(""#pieChart"")
            .append(""svg"")
            .attr(""width"", pieWidth)
            .attr(""height"", pieHeight)
            .append(""g"")
            .attr(""transform"", `translate(${pieWidth / 2},${pieHeight / 2})`);

        const radius = Math.min(pieWidth, pieHeight) / 2;

        const pie = d3.pie().value(d => d[""Hours Worked""]);
        const arc = d3.arc().innerRadius(0).outerRadius(radius);

        function updatePieChart(data) {
            const pieData = pie(data);
            pieSvg.selectAll(""*"").remove();
            const arcs = pieSvg.selectAll("".arc"")
                .data(pieData)
                .enter().append(""g"")
                .attr(""class"", ""arc"");

            arcs.append(""path"")
                .attr(""d"", arc)
                .attr(""fill"", (d, i) => d3.schemeCategory10[i % 10]);

            arcs.append(""text"")
                .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                .attr(""dy"", "".35em"")
                .text(d => d.data[""Hours Worked""]);
        }

        updatePieChart(data);  // Initial pie chart
    });
</script>
</body>
</html>
```",Correct,381,382
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Sales Figures, Revenue, Profit, Hours Worked, and Employee Satisfaction. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot Matrix</title>
    <style>
        .scatterplot {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            grid-template-rows: repeat(4, 1fr);
            gap: 10px;
        }
        .cell {
            border: 1px solid #ccc;
            position: relative;
        }
        .brush {
            fill: none;
            stroke: #000;
            stroke-width: 1.5;
        }
    </style>
</head>
<body>
    <div class=""scatterplot"" id=""scatterplot""></div>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const dimensions = ['Sales Figures', 'Revenue', 'Profit', 'Hours Worked', 'Employee Satisfaction Score'];
        const width = 200, height = 200;

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            data.forEach(d => {
                d[""Sales Figures""] = +d[""Sales Figures""];
                d.Revenue = +d.Revenue;
                d.Profit = +d.Profit;
                d[""Hours Worked""] = +d[""Hours Worked""];
                d[""Employee Satisfaction Score""] = +d[""Employee Satisfaction Score""];
            });
            
            const svg = d3.select(""#scatterplot"")
                .selectAll("".cell"")
                .data(dimensions)
                .enter()
                .append(""div"")
                .attr(""class"", ""cell"")
                .style(""width"", width + ""px"")
                .style(""height"", height + ""px"")
                .each(function(dimX, i) {
                    d3.select(this).selectAll(""svg"")
                        .data(dimensions)
                        .enter()
                        .append(""svg"")
                        .attr(""width"", width)
                        .attr(""height"", height)
                        .append(""g"")
                        .attr(""transform"", ""translate(20, 20)"")
                        .each(function(dimY) {
                            const x = d3.scaleLinear()
                                .domain(d3.extent(data, d => d[dimX])).nice()
                                .range([0, width - 40]);

                            const y = d3.scaleLinear()
                                .domain(d3.extent(data, d => d[dimY])).nice()
                                .range([height - 40, 0]);

                            d3.select(this).append(""g"")
                                .selectAll(""circle"")
                                .data(data)
                                .enter()
                                .append(""circle"")
                                .attr(""cx"", d => x(d[dimX]))
                                .attr(""cy"", d => y(d[dimY]))
                                .attr(""r"", 3)
                                .attr(""fill"", ""#4682b4"")
                                .attr(""stroke"", ""#fff"")
                                .attr(""stroke-width"", 1);

                            d3.select(this).append(""g"")
                                .attr(""transform"", ""translate(0,"" + (height - 40) + "")"")
                                .call(d3.axisBottom(x));

                            d3.select(this).append(""g"")
                                .call(d3.axisLeft(y));

                            const brush = d3.brushSelect()
                                .extent([[0, 0], [width - 40, height - 40]])
                                .on(""brush end"", brushed);

                            d3.select(this).append(""g"")
                                .attr(""class"", ""brush"")
                                .call(brush);
                        });
                });

            function brushed(event) {
                const selection = d3.event.selection;
                const [[x0, y0], [x1, y1]] = selection || [[0, 0], [0, 0]];
                
                d3.selectAll(""circle"").classed(""selected"", d => {
                    const cx = x(d[dimensions[i]]);
                    const cy = y(d[dimensions[j]]);
                    return x0 <= cx && cx <= x1 && y0 <= cy && cy <= y1;
                });
            }
        });
    </script>
</body>
</html>
```",Initialization Error,382,383
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a brushable Scatterplot that visualizes the relationship between Sales Figures and Hours Worked. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot with D3</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatterplot {
            border: 1px solid #ccc;
        }
        .brush .extent {
            fill-opacity: .3;
            fill: #3182bd;
            stroke: #fff;
        }
        table {
            border-collapse: collapse;
            margin-left: 20px;
        }
        th, td {
            border: 1px solid #ccc;
            padding: 5px;
        }
    </style>
</head>
<body>
    <svg class=""scatterplot"" width=""800"" height=""500""></svg>
    <table id=""data-table"">
        <thead>
            <tr>
                <th>Year</th>
                <th>Department</th>
                <th>Sales Figures</th>
                <th>Hours Worked</th>
                <th>Revenue</th>
                <th>Profit</th>
                <th>Employee Satisfaction Score</th>
                <th>Number of Employees</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
    <script>
        const svg = d3.select("".scatterplot"");
        const margin = { top: 20, right: 30, bottom: 30, left: 40 };
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;
        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);
        
        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);
        
        const brush = d3.brush()
            .extent([[0, 0], [width, height]])
            .on(""brush end"", brushed);
        
        g.append(""g"")
            .attr(""class"", ""brush"")
            .call(brush);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then((data) => {
            data.forEach(d => {
                d[""Sales Figures""] = +d[""Sales Figures""];
                d[""Hours Worked""] = +d[""Hours Worked""];
            });

            x.domain(d3.extent(data, d => d[""Sales Figures""]));
            y.domain(d3.extent(data, d => d[""Hours Worked""]));

            g.append(""g"")
                .attr(""class"", ""x-axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""y-axis"")
                .call(d3.axisLeft(y));

            g.selectAll("".dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => x(d[""Sales Figures""]))
                .attr(""cy"", d => y(d[""Hours Worked""]))
                .attr(""r"", 4);

            function brushed(event) {
                const selection = d3.event.selection;
                if (!selection) return;
                
                const [[x0, y0], [x1, y1]] = selection;

                const selectedData = data.filter(d =>
                    x(d[""Sales Figures""]) >= x0 &&
                    x(d[""Sales Figures""]) <= x1 &&
                    y(d[""Hours Worked""]) >= y0 &&
                    y(d[""Hours Worked""]) <= y1
                );

                updateTable(selectedData.slice(0, 20));
            }

            function updateTable(data) {
                const tbody = d3.select(""#data-table tbody"");
                tbody.selectAll(""tr"").remove();
                
                const rows = tbody.selectAll(""tr"")
                    .data(data)
                    .enter()
                    .append(""tr"");

                rows.selectAll(""td"")
                    .data(d => [
                        d[""Year""],
                        d[""Department""],
                        d[""Sales Figures""],
                        d[""Hours Worked""],
                        d[""Revenue""],
                        d[""Profit""],
                        d[""Employee Satisfaction Score""],
                        d[""Number of Employees""],
                    ])
                    .enter()
                    .append(""td"")
                    .text(d => d);
            }
        });
    </script>
</body>
</html>
```",Initialization Error,383,384
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a horizontal Bar Chart that shows Department and Sales Figures, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path {
            display: none;
        }
        .mini {
            fill: lightgrey;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const margin = {top: 20, right: 40, bottom: 30, left: 100},
              width = 800 - margin.left - margin.right,
              height = 400 - margin.top - margin.bottom;

        const svg = d3.select(""svg"").append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            data.forEach(d => {
                d['Sales Figures'] = +d['Sales Figures'];
            });

            const x = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Sales Figures'])])
                .range([0, width]);

            const y = d3.scaleBand()
                .domain(data.map(d => d.Department))
                .range([0, height])
                .padding(0.1);

            const xAxis = d3.axisBottom(x);
            const yAxis = d3.axisLeft(y);

            svg.append(""g"")
                .attr(""class"", ""axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(xAxis);

            svg.append(""g"")
                .attr(""class"", ""axis--y"")
                .call(yAxis);

            svg.selectAll("".bar"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", 0)
                .attr(""y"", d => y(d.Department))
                .attr(""width"", d => x(d['Sales Figures']))
                .attr(""height"", y.bandwidth());

            // Minimap
            const minimapWidth = 100;
            const minimapHeight = height / 4;
            const minimap = svg.append(""g"")
                .attr(""transform"", `translate(${width + 20}, ${0})`);

            const xMini = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Sales Figures'])])
                .range([0, minimapWidth]);

            minimap.selectAll("".mini"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""mini"")
                .attr(""x"", 0)
                .attr(""y"", (d, i) => i * (minimapHeight / data.length))
                .attr(""width"", d => xMini(d['Sales Figures']))
                .attr(""height"", minimapHeight / data.length);
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,384,385
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""scatterplot"" style=""width: 50%; height: 400px; float: left;""></div>
    <div id=""barchart"" style=""width: 50%; height: 400px; float: right;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const scatterData = [];
                const barData = {};
                
                rows.forEach(row => {
                    const cols = row.split(',');
                    const year = cols[0];
                    const department = cols[1];
                    const salesFigures = parseFloat(cols[2]);
                    const revenue = parseFloat(cols[4]);
                    const profit = parseFloat(cols[5]);
                    const employeeSatisfactionScore = parseFloat(cols[6]);
                    
                    scatterData.push([salesFigures, employeeSatisfactionScore]);
                    
                    if (!barData[year]) {
                        barData[year] = { totalRevenue: 0, totalProfit: 0 };
                    }
                    barData[year].totalRevenue += revenue;
                    barData[year].totalProfit += profit;
                });

                const barCategories = Object.keys(barData);
                const barRevenue = barCategories.map(year => barData[year].totalRevenue);
                const barProfit = barCategories.map(year => barData[year].totalProfit);

                const scatterChart = echarts.init(document.getElementById('scatterplot'));
                scatterChart.setOption({
                    title: { text: 'Sales Figures vs Employee Satisfaction Score' },
                    xAxis: { type: 'value', name: 'Sales Figures' },
                    yAxis: { type: 'value', name: 'Employee Satisfaction Score' },
                    series: [{
                        symbolSize: 10,
                        data: scatterData,
                        type: 'scatter'
                    }]
                });

                const barChart = echarts.init(document.getElementById('barchart'));
                barChart.setOption({
                    title: { text: 'Revenue and Profit by Year' },
                    tooltip: {},
                    legend: { data: ['Revenue', 'Profit'] },
                    xAxis: { data: barCategories },
                    yAxis: {},
                    series: [
                        { name: 'Revenue', type: 'bar', data: barRevenue },
                        { name: 'Profit', type: 'bar', data: barProfit }
                    ]
                });
            });
    </script>
</body>
</html>
```",Correct,385,386
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance Visualization</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
    <style>
        #container {
            display: flex;
            justify-content: space-between;
            height: 500px;
        }
        #scatterplot, #barchart {
            width: 45%;
            height: 100%;
        }
    </style>
</head>
<body>

<div id=""container"">
    <div id=""scatterplot""></div>
    <div id=""barchart""></div>
</div>

<script>
    async function fetchData() {
        const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv');
        const data = await response.text();
        const rows = data.split('\n').slice(1);
        return rows.map(row => {
            const cols = row.split(',');
            return {
                Year: cols[0],
                Department: cols[1],
                SalesFigures: parseFloat(cols[2]),
                HoursWorked: parseFloat(cols[3]),
                Revenue: parseFloat(cols[4]),
                Profit: parseFloat(cols[5]),
                EmployeeSatisfactionScore: parseFloat(cols[6]),
                NumberOfEmployees: parseInt(cols[7])
            };
        }).filter(item => !isNaN(item.SalesFigures)); // Filter out any incomplete data
    }

    function renderScatterPlot(data) {
        const scatterData = data.map(item => ({
            value: [item.SalesFigures, item.Profit],
            label: {
                formatter: `{b|${item.Department}}`,
                backgroundColor: '#fff',
                borderColor: 'rgba(0,0,0,0.5)',
                borderWidth: 1,
                borderRadius: 4,
                padding: [5, 10]
            }
        }));

        const scatterChart = echarts.init(document.getElementById('scatterplot'));
        scatterChart.setOption({
            tooltip: {},
            xAxis: {
                name: 'Sales Figures',
                type: 'value'
            },
            yAxis: {
                name: 'Profit',
                type: 'value'
            },
            series: [{
                type: 'scatter',
                data: scatterData,
                symbolSize: 10,
                itemStyle: {
                    color: '#37A2DA',
                }
            }],
            dataZoom: [
                {
                    type: 'inside',
                    start: 0,
                    end: 100
                },
                {
                    type: 'slider',
                    show: true,
                    xAxisIndex: [0],
                    start: 0,
                    end: 100
                }
            ]
        });

        scatterChart.on('click', function (params) {
            const selectedData = data.filter(item => item.Department === params.seriesData[0].name);
            renderBarChart(selectedData);
        });
    }

    function renderBarChart(data) {
        const barData = [...new Set(data.map(item => item.Department))];
        const barValues = barData.map(department => {
            return data.filter(item => item.Department === department).reduce((acc, item) => acc + item.Revenue, 0);
        });

        const barChart = echarts.init(document.getElementById('barchart'));
        barChart.setOption({
            tooltip: {},
            xAxis: {
                data: barData
            },
            yAxis: {
                name: 'Revenue',
                type: 'value'
            },
            series: [{
                name: 'Revenue',
                type: 'bar',
                data: barValues,
                itemStyle: {
                    color: '#FF9F7F',
                }
            }],
            toolbox: {
                feature: {
                    saveAsImage: {}
                }
            }
        });
    }

    fetchData().then(data => {
        renderScatterPlot(data);
        renderBarChart(data);
    });
</script>

</body>
</html>
```",Unexpected Execution Result,386,387
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Sales Figures , while the pie chart represents the distribution of Hours Worked.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""lineChart"" style=""width: 100%; height: 400px;""></div>
    <div id=""pieChart"" style=""width: 100%; height: 400px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const salesFigures = [];
                const hoursWorked = [];
                const years = [];

                rows.forEach(row => {
                    const cols = row.split(',');
                    if (cols.length > 0) {
                        years.push(cols[0]);
                        salesFigures.push(parseFloat(cols[2]));
                        hoursWorked.push(parseFloat(cols[3]));
                    }
                });

                // Line Chart for Sales Figures
                const lineChart = echarts.init(document.getElementById('lineChart'));
                lineChart.setOption({
                    title: {
                        text: 'Sales Figures Trend'
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: years
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        name: 'Sales Figures',
                        type: 'line',
                        data: salesFigures
                    }]
                });

                // Pie Chart for Distribution of Hours Worked
                const pieChart = echarts.init(document.getElementById('pieChart'));
                const totalHours = hoursWorked.reduce((a, b) => a + b, 0);
                const hoursData = hoursWorked.map(hours => ({ value: hours, name: (hours / totalHours * 100).toFixed(2) + '%' }));

                pieChart.setOption({
                    title: {
                        text: 'Distribution of Hours Worked',
                        subtext: 'in %',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    series: [{
                        name: 'Hours Worked',
                        type: 'pie',
                        radius: '50%',
                        data: hoursData,
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,387,388
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Sales Figures , while the pie chart represents the distribution of Hours Worked. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Hours Worked for the selected group.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""lineChart"" style=""width: 100%; height: 400px;""></div>
    <div id=""pieChart"" style=""width: 100%; height: 400px;""></div>

    <script>
        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv');
            const data = await response.text();
            return data.split('\n').slice(1).map(row => {
                const columns = row.split(',');
                return {
                    Year: columns[0],
                    Department: columns[1],
                    SalesFigures: parseFloat(columns[2]),
                    HoursWorked: parseFloat(columns[3]),
                    Revenue: parseFloat(columns[4]),
                    Profit: parseFloat(columns[5]),
                    EmployeeSatisfactionScore: parseFloat(columns[6]),
                    NumberOfEmployees: parseInt(columns[7], 10)
                };
            }).filter(d => d.Year); // Remove empty rows
        }

        function drawLineChart(data) {
            const lineChart = echarts.init(document.getElementById('lineChart'));
            const option = {
                title: {
                    text: 'Sales Figures Trend'
                },
                tooltip: {},
                xAxis: {
                    type: 'category',
                    data: data.map(d => d.Year),
                    boundaryGap: false
                },
                yAxis: {
                    type: 'value'
                },
                series: [{
                    name: 'Sales Figures',
                    type: 'line',
                    data: data.map(d => d.SalesFigures),
                    markPoint: {
                        data: [
                            { type: 'max', name: 'Max' },
                            { type: 'min', name: 'Min' }
                        ]
                    },
                }]
            };

            lineChart.setOption(option);

            lineChart.on('brushselected', function (params) {
                const selectedPoints = [];
                params.selected.forEach(function (select) {
                    const selectedDataIndex = select.dataIndex;
                    selectedDataIndex.forEach(function (dataIndex) {
                        selectedPoints.push(data[dataIndex]);
                    });
                });
                drawPieChart(selectedPoints);
            });
        }

        function drawPieChart(data) {
            const pieChart = echarts.init(document.getElementById('pieChart'));
            const hoursData = data.reduce((acc, curr) => {
                acc[curr.Department] = (acc[curr.Department] || 0) + curr.HoursWorked;
                return acc;
            }, {});
            
            const pieSeries = Object.keys(hoursData).map(department => ({
                name: department,
                value: hoursData[department]
            }));

            const option = {
                title: {
                    text: 'Distribution of Hours Worked',
                    subtext: 'by Department',
                    left: 'center'
                },
                tooltip: {
                    trigger: 'item'
                },
                series: [{
                    type: 'pie',
                    radius: '50%',
                    data: pieSeries,
                    emphasis: {
                        itemStyle: {
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowColor: 'rgba(0, 0, 0, 0.5)'
                        }
                    }
                }]
            };

            pieChart.setOption(option);
        }

        fetchData().then(data => {
            drawLineChart(data);
            drawPieChart(data); // Initial pie chart with all data
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,388,389
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Sales Figures, Revenue, Profit, Hours Worked, and Employee Satisfaction. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Brushable Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        .scatterplot-matrix {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            grid-template-rows: repeat(5, 1fr);
            width: 100%;
            height: 100vh;
        }
        .cell {
            border: 1px solid #ccc;
        }
    </style>
</head>
<body>
    <div id=""scatterplot-matrix"" class=""scatterplot-matrix""></div>
    <script>
        const url = 'https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv';

        async function fetchData() {
            const response = await fetch(url);
            const dataText = await response.text();
            const rows = dataText.split('\n').slice(1);
            const data = rows.map(row => {
                const cols = row.split(',');
                return {
                    year: +cols[0],
                    department: cols[1],
                    salesFigures: +cols[2],
                    hoursWorked: +cols[3],
                    revenue: +cols[4],
                    profit: +cols[5],
                    employeeSatisfaction: +cols[6],
                    numberOfEmployees: +cols[7]
                };
            }).filter(row => !isNaN(row.salesFigures));
            return data;
        }

        async function createScatterplotMatrix() {
            const data = await fetchData();
            const variables = ['salesFigures', 'revenue', 'profit', 'hoursWorked', 'employeeSatisfaction'];
            const charts = {};

            const highlight = (points) => {
                for (const key in charts) {
                    charts[key].dispatchAction({
                        type: 'downplay',
                        seriesIndex: 0,
                    });
                    if (points.length > 0) {
                        charts[key].dispatchAction({
                            type: 'highlight',
                            seriesIndex: 0,
                            dataIndices: points
                        });
                    }
                }
            };

            const prepareData = (xVariable, yVariable) => {
                return data.map((item, index) => ({
                    name: item.department,
                    value: [item[xVariable], item[yVariable]],
                    index: index
                }));
            };

            const createCell = (xVariable, yVariable) => {
                const chart = echarts.init(document.createElement('div'));
                chart.setOption({
                    tooltip: {},
                    xAxis: {
                        name: xVariable,
                        type: 'value'
                    },
                    yAxis: {
                        name: yVariable,
                        type: 'value'
                    },
                    series: [{
                        type: 'scatter',
                        data: prepareData(xVariable, yVariable),
                        symbolSize: 8,
                        name: 'Data',
                        itemStyle: {
                            color: '#5470c6'
                        }
                    }]
                });

                chart.on('brushselected', (params) => {
                    const brushInfo = params.batch[0].areas[0];
                    const selectedPoints = brushInfo.areas[0].dataIndex;
                    highlight(selectedPoints);
                });

                return chart;
            };

            variables.forEach((xVariable, xIndex) => {
                variables.forEach((yVariable, yIndex) => {
                    const cell = createCell(xVariable, yVariable);
                    charts[`${xVariable}-${yVariable}`] = cell;
                    document.getElementById('scatterplot-matrix').appendChild(cell.getDom());
                    cell.resize();
                });
            });

            window.addEventListener('resize', () => {
                Object.values(charts).forEach(chart => chart.resize());
            });

            // Resize all charts after they have been added to the DOM
            Object.values(charts).forEach(chart => chart.resize());
        }

        createScatterplotMatrix();
    </script>
</body>
</html>
```",Initialization Error,389,390
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a brushable Scatterplot that visualizes the relationship between Sales Figures and Hours Worked. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Brushable Scatterplot with ECharts</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
    <style>
        #main {
            width: 70%;
            height: 400px;
            float: left;
        }
        #table {
            width: 30%;
            height: 400px;
            float: left;
            overflow-y: auto;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid #ccc;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
    </style>
</head>
<body>

<div id=""main""></div>
<div id=""table"">
    <table id=""data-table"">
        <thead>
            <tr>
                <th>Year</th>
                <th>Department</th>
                <th>Sales Figures</th>
                <th>Hours Worked</th>
                <th>Revenue</th>
                <th>Profit</th>
                <th>Employee Satisfaction Score</th>
                <th>Number of Employees</th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>

<script>
    fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1).map(row => row.split(','));
            const dataset = rows.map(row => ({
                Year: row[0],
                Department: row[1],
                SalesFigures: +row[2],
                HoursWorked: +row[3],
                Revenue: +row[4],
                Profit: +row[5],
                EmployeeSatisfactionScore: +row[6],
                NumberOfEmployees: +row[7]
            }));

            const salesFigures = dataset.map(item => item.SalesFigures);
            const hoursWorked = dataset.map(item => item.HoursWorked);

            const chart = echarts.init(document.getElementById('main'));

            chart.setOption({
                title: {
                    text: 'Sales Figures vs Hours Worked',
                },
                tooltip: {},
                xAxis: {
                    name: 'Sales Figures'
                },
                yAxis: {
                    name: 'Hours Worked'
                },
                series: [{
                    type: 'scatter',
                    symbolSize: 10,
                    data: dataset.map(item => [item.SalesFigures, item.HoursWorked]),
                    itemStyle: {
                        color: '#5470C6'
                    }
                }]
            });

            chart.on('brushSelected', function (params) {
                const selectedPoints = [];
                const brushInfo = params.batch[0];
                brushInfoAreas = brushInfo.selected;

                for (let area of brushInfoAreas) {
                    for (let idx of area.dataIndex) {
                        selectedPoints.push(dataset[idx]);
                    }
                }

                const tableBody = document.getElementById('data-table').getElementsByTagName('tbody')[0];
                tableBody.innerHTML = '';
                
                selectedPoints.slice(0, 20).forEach(point => {
                    const row = tableBody.insertRow();
                    Object.values(point).forEach(text => {
                        const cell = row.insertCell();
                        cell.textContent = text;
                    });
                });
            });

            chart.dispatchAction({
                type: 'brush',
                areas: [{
                    brushType: 'scatter',
                    coordRange: [[0, 0], [0, 0]],
                    xAxisIndex: 0,
                    yAxisIndex: 0
                }]
            });
        });
</script>

</body>
</html>
```",Correct,390,391
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a horizontal Bar Chart that shows Department and Sales Figures, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 600px;
            height: 400px;
            display: inline-block;
        }
        #minimap {
            width: 200px;
            height: 100px;
            display: inline-block;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <div id=""minimap""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1);
            const departments = [];
            const salesFigures = [];

            rows.forEach(row => {
                const columns = row.split(',');
                const department = columns[1];
                const sales = parseFloat(columns[2]);

                if (!departments.includes(department)) {
                    departments.push(department);
                }
                salesFigures.push({ department, sales });
            });

            const chartData = salesFigures.reduce((acc, curr) => {
                const existing = acc.find(item => item.department === curr.department);
                if (existing) {
                    existing.sales += curr.sales;
                } else {
                    acc.push({ department: curr.department, sales: curr.sales });
                }
                return acc;
            }, []);

            const mainChart = echarts.init(document.getElementById('main'));
            const minimapChart = echarts.init(document.getElementById('minimap'));

            const mainOption = {
                title: {
                    text: 'Department Sales Figures',
                },
                tooltip: {},
                xAxis: {
                    type: 'value',
                    name: 'Sales Figures'
                },
                yAxis: {
                    type: 'category',
                    data: chartData.map(item => item.department)
                },
                series: [{
                    type: 'bar',
                    data: chartData.map(item => item.sales),
                    itemStyle: {
                        color: '#69b3a2'
                    }
                }]
            };

            const minimapOption = {
                series: [{
                    type: 'bar',
                    data: chartData.map(item => item.sales),
                    itemStyle: {
                        color: '#69b3a2'
                    }
                }]
            };

            mainChart.setOption(mainOption);
            minimapChart.setOption(minimapOption);
        });
    </script>
</body>
</html>
```",Initialization Error,391,392
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <style>
        #vis {
            display: flex;
        }
        #scatterplot {
            width: 50%;
        }
        #barchart {
            width: 50%;
        }
    </style>
</head>
<body>
    <div id=""vis"">
        <div id=""scatterplot""></div>
        <div id=""barchart""></div>
    </div>
    
    <script>
        const scatterplotSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Sales Figures"",
                    ""type"": ""quantitative""
                },
                ""y"": {
                    ""field"": ""Profit"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Department"",
                    ""type"": ""nominal""
                },
                ""tooltip"": [
                    {""field"": ""Year"", ""type"": ""quantitative""},
                    {""field"": ""Revenue"", ""type"": ""quantitative""},
                    {""field"": ""Employee Satisfaction Score"", ""type"": ""quantitative""},
                    {""field"": ""Number of Employees"", ""type"": ""quantitative""}
                ]
            }
        };

        const barchartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Department"",
                    ""type"": ""nominal"",
                    ""axis"": {""labelAngle"": 0}
                },
                ""y"": {
                    ""aggregate"": ""mean"",
                    ""field"": ""Employee Satisfaction Score"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Department"",
                    ""type"": ""nominal""
                }
            }
        };

        vegaEmbed('#scatterplot', scatterplotSpec);
        vegaEmbed('#barchart', barchartSpec);
    </script>
</body>
</html>
```",Correct,392,393
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm Vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm Vega-Lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm Vega-Embed@6""></script>
    <style>
        #chart-container {
            display: flex;
            justify-content: space-between;
            height: 500px;
        }
        .chart {
            width: 48%;
        }
    </style>
</head>
<body>
    <div id=""chart-container"">
        <div id=""scatterplot"" class=""chart""></div>
        <div id=""barchart"" class=""chart""></div>
    </div>
    <script>
        const scatterPlotSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
                ""format"": { ""type"": ""csv"" }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {""field"": ""Sales Figures"", ""type"": ""quantitative""},
                ""y"": {""field"": ""Profit"", ""type"": ""quantitative""},
                ""color"": {""field"": ""Department"", ""type"": ""nominal""}
            },
            ""selection"": {
                ""highlight"": {
                    ""type"": ""interval"", ""encodings"": [""x"", ""y""]
                }
            }
        };

        const barChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
                ""format"": { ""type"": ""csv"" }
            },
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {""field"": ""Department"", ""type"": ""nominal""},
                ""y"": {""aggregate"": ""sum"", ""field"": ""Profit"", ""type"": ""quantitative""},
                ""color"": {
                    ""condition"": {
                        ""selection"": ""highlight"",
                        ""field"": ""Department"",
                        ""type"": ""nominal""
                    },
                    ""value"": ""grey""
                }
            }
        };

        vegaEmbed('#scatterplot', scatterPlotSpec)
            .then(result => {
                const view = result.view;
                view.addSignalListener('highlight', function(name, value) {
                    view.set('highlight_data', value);
                    view.run();
                });
            });

        vegaEmbed('#barchart', barChartSpec);
    </script>
</body>
</html>
```",Initialization Error,393,394
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Sales Figures , while the pie chart represents the distribution of Hours Worked.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""lineChart""></div>
    <div id=""pieChart""></div>
    <script>
        const lineChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": {""field"": ""Year"", ""type"": ""ordinal""},
                ""y"": {""field"": ""Sales Figures"", ""type"": ""quantitative""},
                ""tooltip"": [{""field"": ""Year"", ""type"": ""ordinal""}, {""field"": ""Sales Figures"", ""type"": ""quantitative""}]
            }
        };
        
        const pieChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""mark"": ""arc"",
            ""encoding"": {
                ""theta"": {""field"": ""Hours Worked"", ""type"": ""quantitative""},
                ""color"": {""field"": ""Department"", ""type"": ""nominal"", ""scale"": {""scheme"": ""category20""}}
            }
        };

        vegaEmbed('#lineChart', lineChartSpec);
        vegaEmbed('#pieChart', pieChartSpec);
    </script>
</body>
</html>
```",Correct,394,395
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Sales Figures , while the pie chart represents the distribution of Hours Worked. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Hours Worked for the selected group.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npmvega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npmvega-lite@5.6.0""></script>
    <script src=""https://cdn.jsdelivr.net/npmvega-embed@6.20.0""></script>
    <style>
        #vis { width: 800px; height: 600px; }
    </style>
</head>
<body>

<div id=""vis""></div>

<script type=""text/javascript"">
    const dataUrl = 'https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv';

    const lineChartSpec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""data"": {
            ""url"": dataUrl,
            ""format"": {
                ""type"": ""csv""
            }
        },
        ""mark"": ""line"",
        ""selection"": {
            ""brush"": {
                ""type"": ""interval"",
                ""encodings"": [""x""]
            }
        },
        ""encoding"": {
            ""x"": {
                ""field"": ""Year"",
                ""type"": ""quantitative""
            },
            ""y"": {
                ""field"": ""Sales Figures"",
                ""type"": ""quantitative""
            },
            ""tooltip"": [
                {""field"": ""Year"", ""type"": ""quantitative""},
                {""field"": ""Sales Figures"", ""type"": ""quantitative""}
            ]
        }
    };

    const pieChartSpec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""data"": {
            ""url"": dataUrl,
            ""format"": {
                ""type"": ""csv""
            },
            ""transform"": [
                {
                    ""filter"": ""datum['Year'] >= selection('brush').x[0] && datum['Year'] <= selection('brush').x[1]""
                },
                {
                    ""aggregate"": [
                        {
                            ""op"": ""sum"",
                            ""field"": ""Hours Worked"",
                            ""as"": ""totalHours""
                        }
                    ],
                    ""groupby"": [""Department""]
                }
            ]
        },
        ""mark"": ""arc"",
        ""encoding"": {
            ""theta"": {
                ""field"": ""totalHours"",
                ""type"": ""quantitative""
            },
            ""color"": {
                ""field"": ""Department"",
                ""type"": ""ordinal""
            }
        }
    };

    vegaEmbed('#vis', {
        ""$schema"": ""https://vega.github.io/schema/vega/v5.json"",
        ""signals"": [],
        ""data"": {
            ""values"": []
        },
        ""vconcat"": [
            lineChartSpec,
            pieChartSpec
        ]
    });
</script>

</body>
</html>
```",Initialization Error,395,396
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Sales Figures, Revenue, Profit, Hours Worked, and Employee Satisfaction. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Brushable Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <style>
        .scatterplot-matrix {
            display: flex;
            flex-direction: column;
        }
        .row {
            display: flex;
        }
        .cell {
            flex: 1;
            padding: 10px;
        }
    </style>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""transform"": [
                {
                    ""filter"": ""datum['Sales Figures'] !== null && datum['Revenue'] !== null && datum['Profit'] !== null && datum['Hours Worked'] !== null && datum['Employee Satisfaction Score'] !== null""
                }
            ],
            ""mark"": ""circle"",
            ""encoding"": {
                ""x"": {""field"": ""Sales Figures"", ""type"": ""quantitative""},
                ""y"": {""field"": ""Revenue"", ""type"": ""quantitative""},
                ""opacity"": {""value"": 0.4},
                ""tooltip"": [
                    {""field"": ""Profit"", ""type"": ""quantitative""},
                    {""field"": ""Hours Worked"", ""type"": ""quantitative""},
                    {""field"": ""Employee Satisfaction Score"", ""type"": ""quantitative""}
                ]
            },
            ""selection"": {
                brush: {
                    type: ""interval"",
                    encodings: [""x"", ""y""]
                }
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            const view = result.view;

            view.addSignalListener('brush', function(name, value) {
                view: view.run();
            });

        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Initial Result,396,397
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a brushable Scatterplot that visualizes the relationship between Sales Figures and Hours Worked. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot with Brushable Selection</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <style>
        #view {
            width: 50%;
            height: 400px;
            display: inline-block;
        }
        #table {
            width: 45%;
            display: inline-block;
            vertical-align: top;
            margin-left: 20px;
        }
    </style>
</head>
<body>
    <div id=""view""></div>
    <div id=""table""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatterplot with brushing to select points."",
            ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"" },
            ""transform"": [
                {
                    ""filter"": ""datum['Sales Figures'] !== null && datum['Hours Worked'] !== null""
                }
            ],
            ""layer"": [
                {
                    ""mark"": ""point"",
                    ""encoding"": {
                        ""x"": { ""field"": ""Sales Figures"", ""type"": ""quantitative"", ""title"": ""Sales Figures"" },
                        ""y"": { ""field"": ""Hours Worked"", ""type"": ""quantitative"", ""title"": ""Hours Worked"" },
                        ""tooltip"": [
                            { ""field"": ""Department"", ""type"": ""nominal"" },
                            { ""field"": ""Revenue"", ""type"": ""quantitative"" },
                            { ""field"": ""Profit"", ""type"": ""quantitative"" },
                            { ""field"": ""Employee Satisfaction Score"", ""type"": ""quantitative"" },
                            { ""field"": ""Number of Employees"", ""type"": ""quantitative"" }
                        ]
                    }
                },
                {
                    ""mark"": {
                        ""type"": ""rect"",
                        ""fill"": ""lightgrey"",
                        ""fillOpacity"": 0.3
                    },
                    ""encoding"": {
                        ""tooltip"": [],
                        ""color"": { ""value"": ""lightgrey"" }
                    },
                    ""transform"": [
                        {
                            ""filter"": ""datum.x1 !== null && datum.y1 !== null""
                        }
                    ]
                }
            ],
            ""selection"": {
                ""brush"": {
                    ""type"": ""interval"",
                    ""encodings"": [""x"", ""y""]
                }
            }
        };

        const view = new vega.View(vega.parse(spec))
            .renderer('canvas')
            .initialize('#view')
            .hover()
            .run();

        view.addEventListener('mousemove', function(event, item) {
            if (item) {
                const brush = view.data('brush');
                const tableData = brush.length > 0 ? view.data('tableData') : [];
                const tableHtml = tableData.slice(0, 20).map(d => (
                    `<tr>
                        <td>${d['Department']}</td>
                        <td>${d['Sales Figures']}</td>
                        <td>${d['Hours Worked']}</td>
                        <td>${d['Revenue']}</td>
                        <td>${d['Profit']}</td>
                        <td>${d['Employee Satisfaction Score']}</td>
                        <td>${d['Number of Employees']}</td>
                    </tr>`
                )).join('');

                document.getElementById('table').innerHTML = `
                    <table border=""1"">
                        <tr>
                            <th>Department</th>
                            <th>Sales Figures</th>
                            <th>Hours Worked</th>
                            <th>Revenue</th>
                            <th>Profit</th>
                            <th>Employee Satisfaction Score</th>
                            <th>Number of Employees</th>
                        </tr>
                        ${tableHtml}
                    </table>
                `;
            }
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,397,398
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a horizontal Bar Chart that shows Department and Sales Figures, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance Sales Figures</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.8.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
    <style>
        #vis {
            display: flex;
        }
        .minimap {
            width: 200px;
            height: 150px;
            margin-left: 20px;
        }
    </style>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const mainSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""bar"",
            ""encoding"": {
                ""y"": {
                    ""field"": ""Department"",
                    ""type"": ""nominal"",
                    ""axis"": { ""title"": ""Department"" }
                },
                ""x"": {
                    ""field"": ""Sales Figures"",
                    ""type"": ""quantitative"",
                    ""axis"": { ""title"": ""Sales Figures"" }
                }
            },
            ""width"": 400,
            ""height"": 300
        };

        const miniMapSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""bar"",
            ""encoding"": {
                ""y"": {
                    ""field"": ""Department"",
                    ""type"": ""nominal"",
                },
                ""x"": {
                    ""field"": ""Sales Figures"",
                    ""type"": ""quantitative""
                },
            },
            ""width"": 200,
            ""height"": 150
        };

        vegaEmbed('#vis', {
            ""version"": ""5.8.2"",
            ""width"": 600,
            ""height"": 300,
            ""padding"": 5,
            ""signals"": [],
            ""layer"": [
                mainSpec,
                {
                    ""mark"": { ""type"": ""group"", ""width"": 200, ""height"": 150 },
                    ""encoding"": {},
                    ""data"": miniMapSpec.data,
                    ""layer"": [miniMapSpec]
                }
            ]
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,398,399
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot that visualizes the relationship between Sales Figures and Hours Worked.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Sales Figures vs Hours Worked</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .scatterplot {
            margin: 50px;
        }
        .dot {
            fill: steelblue;
        }
    </style>
</head>
<body>
    <div class=""scatterplot""></div>
    <script>
        const margin = { top: 20, right: 30, bottom: 30, left: 40 },
            width = 800 - margin.left - margin.right,
            height = 400 - margin.top - margin.bottom;

        const svg = d3.select('.scatterplot').append('svg')
            .attr('width', width + margin.left + margin.right)
            .attr('height', height + margin.top + margin.bottom)
            .append('g')
            .attr('transform', `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            data.forEach(d => {
                d['Sales Figures'] = +d['Sales Figures'];
                d['Hours Worked'] = +d['Hours Worked'];
            });

            const x = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Sales Figures'])])
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Hours Worked'])])
                .range([height, 0]);

            svg.append('g')
                .attr('transform', `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svg.append('g')
                .call(d3.axisLeft(y));

            svg.selectAll('.dot')
                .data(data)
                .enter().append('circle')
                .attr('class', 'dot')
                .attr('cx', d => x(d['Sales Figures']))
                .attr('cy', d => y(d['Hours Worked']))
                .attr('r', 5);
        });
    </script>
</body>
</html>
```",Correct,399,400
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Line Chart that visualizes the trend of Sales Figures over the Year for each Department.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Figures Trend by Department</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke-width: 2;
        }
        .axis {
            font: 10px sans-serif;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);
        const color = d3.scaleOrdinal(d3.schemeCategory10);

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            data.forEach(d => {
                d.Year = +d[""Year""];
                d[""Sales Figures""] = +d[""Sales Figures""];
                d.Department = d.Department.trim();
            });

            const departments = Array.from(new Set(data.map(d => d.Department)));

            const salesData = departments.map(dep => {
                return {
                    department: dep,
                    values: data.filter(d => d.Department === dep).map(d => ({ year: d.Year, sales: d[""Sales Figures""] }))
                };
            });

            x.domain(d3.extent(data, d => d.Year));
            y.domain([0, d3.max(data, d => d[""Sales Figures""])]);
            color.domain(departments);

            const line = d3.line()
                .x(d => x(d.year))
                .y(d => y(d.sales));

            g.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""y axis"")
                .call(d3.axisLeft(y));

            salesData.forEach(dep => {
                g.append(""path"")
                    .datum(dep.values)
                    .attr(""class"", ""line"")
                    .attr(""d"", line)
                    .style(""stroke"", color(dep.department));

                g.append(""text"")
                    .datum(dep.values[dep.values.length - 1])
                    .attr(""x"", x(dep.values[dep.values.length - 1].year))
                    .attr(""y"", y(dep.values[dep.values.length - 1].sales))
                    .attr(""dy"", "".35em"")
                    .attr(""fill"", color(dep.department))
                    .text(dep.department);
            });
        });
    </script>
</body>
</html>
```",Correct,400,401
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Bar Chart that visualizes the Sales Figures for each Department in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Figures by Department in 2020</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path,
        .axis--x line {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = { top: 20, right: 30, bottom: 40, left: 40 };
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;
        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            const filteredData = data.filter(d => d.Year === '2020');

            const salesByDepartment = d3.rollup(filteredData, v => d3.sum(v, d => +d['Sales Figures']), d => d.Department);
            const departments = Array.from(salesByDepartment.keys());
            const salesFigures = Array.from(salesByDepartment.values());

            const x = d3.scaleBand()
                .domain(departments)
                .range([0, width])
                .padding(0.1);
            const y = d3.scaleLinear()
                .domain([0, d3.max(salesFigures)])
                .nice()
                .range([height, 0]);

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            g.selectAll("".bar"")
                .data(salesFigures)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", (d, i) => x(departments[i]))
                .attr(""y"", d => y(d))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d));
        });
    </script>
</body>
</html>
```",Correct,401,402
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Pie Chart that visualizes the proportion of Sales Figures contributed by each Department in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<meta charset=""utf-8"">
<style>
  .arc {
    fill: steelblue;
  }
</style>
<body>
  <svg width=""600"" height=""600""></svg>
  <script src=""https://d3js.org/d3.v6.min.js""></script>
  <script>
    const width = 600;
    const height = 600;
    const radius = Math.min(width, height) / 2;

    const svg = d3.select(""svg"")
      .attr(""width"", width)
      .attr(""height"", height)
      .append(""g"")
      .attr(""transform"", `translate(${width / 2},${height / 2})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
      const filteredData = data.filter(d => d.Year === ""2020"");

      const salesByDepartment = d3.rollup(filteredData, v => d3.sum(v, d => +d[""Sales Figures""]), d => d.Department);
      
      const pieData = Array.from(salesByDepartment, ([key, value]) => ({ key, value }));

      const color = d3.scaleOrdinal(d3.schemeCategory10);

      const pie = d3.pie().value(d => d.value);
      const arc = d3.arc().innerRadius(0).outerRadius(radius);

      const g = svg.selectAll("".arc"")
        .data(pie(pieData))
        .enter().append(""g"")
        .attr(""class"", ""arc"");

      g.append(""path"")
        .attr(""d"", arc)
        .attr(""fill"", d => color(d.data.key));

      g.append(""text"")
        .attr(""transform"", d => `translate(${arc.centroid(d)})`)
        .attr(""dy"", "".35em"")
        .text(d => d.data.key);
    });
  </script>
</body>
```",Correct,402,403
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Donut Chart that visualizes the distribution of Sales Figures among Department in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Donut Chart - Sales Figures by Department in 2020</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .arc {
            cursor: pointer;
        }
        .arc:hover {
            opacity: 0.8;
        }
    </style>
</head>
<body>
    <svg width=""600"" height=""600""></svg>
    <script>
        const width = 600;
        const height = 600;
        const radius = Math.min(width, height) / 2 - 40;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            const filteredData = data.filter(d => d.Year === ""2020"");
            const salesByDepartment = d3.rollup(filteredData, v => d3.sum(v, d => +d[""Sales Figures""]), d => d.Department);
            
            const pie = d3.pie()
                .value(d => d[1]);

            const arc = d3.arc()
                .innerRadius(radius * 0.5)
                .outerRadius(radius);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const arcs = pie(Array.from(salesByDepartment.entries()));

            svg.selectAll("".arc"")
                .data(arcs)
                .enter().append(""path"")
                .attr(""class"", ""arc"")
                .attr(""d"", arc)
                .attr(""fill"", (d, i) => color(i));
        });
    </script>
</body>
</html>
```",Correct,403,404
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Coxcomb Chart(polar area chart) to compare the Sales Figures of different Department in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coxcomb Chart</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .arc {
            stroke: #fff;
        }
    </style>
</head>
<body>
    <svg width=""600"" height=""600""></svg>
    <script>
        const width = 600, height = 600, radius = Math.min(width, height) / 2;

        const svg = d3.select(""svg"")
            .attr(""width"", width)
            .attr(""height"", height)
            .append(""g"")
            .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            const salesData = data.filter(d => d.Year === ""2020"")
                .map(d => ({ Department: d.Department, SalesFigures: +d['Sales Figures'] }));

            const totalSales = d3.sum(salesData, d => d.SalesFigures);
            const angles = salesData.map(d => (d.SalesFigures / totalSales) * 2 * Math.PI);

            const arcs = d3.pie().value(d => d.SalesFigures)(salesData);
            const arcGenerator = d3.arc().innerRadius(0).outerRadius(radius);

            svg.selectAll("".arc"")
                .data(arcs)
                .enter().append(""path"")
                .attr(""class"", ""arc"")
                .attr(""d"", arcGenerator)
                .attr(""fill"", (d, i) => d3.schemeCategory10[i])
                .attr(""stroke"", ""#fff"");
            
            svg.selectAll("".arc-text"")
                .data(arcs)
                .enter().append(""text"")
                .attr(""transform"", d => `translate(${arcGenerator.centroid(d)})`)
                .text((d, i) => salesData[i].Department)
                .style(""text-anchor"", ""middle"")
                .style(""fill"", ""#000"");
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,404,405
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Radar Chart to compare the Sales Figures of different Department in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE HTML>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Radar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .RadarChart {
            margin: auto;
            width: 600px;
            height: 600px;
        }
    </style>
</head>
<body>
    <svg class=""RadarChart""></svg>
    <script>
        const margin = {top: 20, right: 20, bottom: 20, left: 20},
              width = 600 - margin.left - margin.right,
              height = 600 - margin.top - margin.bottom;
        
        const radarChartOptions = {
            w: width,
            h: height,
            maxValue: 100,
            levels: 5,
            roundStrokes: true,
            color: d3.scaleOrdinal(d3.schemeCategory10)
        };
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(function(data) {
            const filteredData = data.filter(d => d.Year === ""2020"");
            const departments = [...new Set(filteredData.map(d => d.Department))];
            const salesFigures = departments.map(department => {
                const departmentData = filteredData.filter(d => d.Department === department);
                return {
                    department: department,
                    sales: +departmentData[0][""Sales Figures""]
                };
            });
            
            const allValues = salesFigures.map(d => d.sales);
            const allLabels = salesFigures.map(d => d.department);
            
            const radius = Math.min(radarChartOptions.w / 2, radarChartOptions.h / 2);
            const angleSlice = Math.PI * 2 / allLabels.length;

            // Scale
            const rScale = d3.scaleLinear()
                .range(['0', `${radius}`])
                .domain([0, d3.max(allValues)]);

            // Create the empty radar chart
            const svg = d3.select("".RadarChart"")
                .append(""g"")
                .attr(""transform"", ""translate("" + radarChartOptions.w / 2 + "","" + radarChartOptions.h / 2 + "")"");
            
            // Draw the circular grid
            for (let j = 0; j < radarChartOptions.levels; j++) {
                const levelRadius = radius / radarChartOptions.levels * (j + 1);
                const levelGroup = svg.append(""g"");
                levelGroup.selectAll("".levels"")
                    .data(allLabels)
                    .enter()
                    .append(""line"")
                    .attr(""x1"", (d, i) => levelRadius * Math.cos(angleSlice * i - Math.PI / 2))
                    .attr(""y1"", (d, i) => levelRadius * Math.sin(angleSlice * i - Math.PI / 2))
                    .attr(""x2"", (d, i) => levelRadius * Math.cos(angleSlice * (i + 1) - Math.PI / 2))
                    .attr(""y2"", (d, i) => levelRadius * Math.sin(angleSlice * (i + 1) - Math.PI / 2))
                    .attr(""class"", ""line"")
                    .style(""stroke"", ""grey"")
                    .style(""stroke-width"", ""1px"")
                    .style(""opacity"", ""0.5"");
            }

            // Draw the axis
            const axisGrid = svg.append(""g"").attr(""class"", ""axisWrapper"");
            const axis = axisGrid.selectAll("".axis"")
                .data(allLabels)
                .enter()
                .append(""g"")
                .attr(""class"", ""axis"");
                
            axis.append(""line"")
                .attr(""x1"", 0)
                .attr(""y1"", 0)
                .attr(""x2"", (d, i) => radius * Math.cos(angleSlice * i - Math.PI / 2))
                .attr(""y2"", (d, i) => radius * Math.sin(angleSlice * i - Math.PI / 2))
                .attr(""class"", ""line"")
                .style(""stroke"", ""grey"")
                .style(""stroke-width"", ""1px"");
                
            axis.append(""text"")
                .attr(""class"", ""legend"")
                .text((d, i) => d)
                .attr(""text-anchor"", ""middle"")
                .attr(""dy"", ""1em"")
                .attr(""x"", (d, i) => (radius + 10) * Math.cos(angleSlice * i - Math.PI / 2))
                .attr(""y"", (d, i) => (radius + 10) * Math.sin(angleSlice * i - Math.PI / 2));
            
            // Draw the data
            const dataValues = salesFigures.map(d => rScale(d.sales));
            dataValues.push(dataValues[0]); // Close the loop
            const radarLine = d3.lineRadial()
                .angle((d, i) => angleSlice * i)
                .radius(d => d);
            
            svg.append(""path"")
                .datum(dataValues)
                .attr(""d"", radarLine)
                .style(""fill"", radarChartOptions.color(0))
                .style(""fill-opacity"", 0.6)
                .style(""stroke"", radarChartOptions.color(0))
                .style(""stroke-width"", 2);
        });
    </script>
</body>
</html>
```",Correct,405,406
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Streamgraph that visualizes the changes of Sales Figures over the Year for each Department.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Streamgraph of Sales Figures</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .stream {
            fill-opacity: 0.6;
        }
        .axis {
            font: 12px sans-serif;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 20, bottom: 20, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleBand().range([height, 0]).padding(0.1);
        const color = d3.scaleOrdinal(d3.schemeCategory10);

        const stack = d3.stack().keys([]).value((d, key) => d[key]);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            const departments = Array.from(new Set(data.map(d => d.Department)));
            const years = Array.from(new Set(data.map(d => d.Year)));

            departments.forEach(department => {
                const departmentData = data.filter(d => d.Department === department);
                const salesFigures = years.map(year => {
                    const entry = departmentData.find(d => d.Year === year);
                    return {Year: year, Sales: +entry[""Sales Figures""]};
                });
                salesFigures.forEach(d => {
                    d.Department = department;
                });
                if (!stack.keys().includes(department)) {
                    stack.keys([...stack.keys(), department]);
                }
            });

            const stackedData = d3.nest()
                .key(d => d.Year)
                .entries(data.map(d => ({
                    Year: d.Year,
                    Department: d.Department,
                    Sales: +d[""Sales Figures""]
                })));

            x.domain([0, d3.max(stackedData, d => d3.max(d.values, v => v.Sales))]);
            y.domain(years).range([height, 0]);
            color.domain(departments);

            svg.selectAll("".layer"")
               .data(stack(stackedData))
               .enter().append(""path"")
               .attr(""class"", ""layer"")
               .attr(""d"", d3.area()
                     .x0(d => x(d[0][1]))
                     .x1(d => x(d[0][0]))
                     .y(d => y(d.data.Year)))
               .style(""fill"", (d, i) => color(i))
               .attr(""transform"", ""translate(0,"" + margin.top + "")"");

            svg.append(""g"")
               .attr(""class"", ""axis"")
               .attr(""transform"", `translate(0,${height})`)
               .call(d3.axisBottom(x));

            svg.append(""g"")
               .attr(""class"", ""axis"")
               .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Initialization Error,406,407
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Slopegraph to compare the Sales Figures between 2019 and 2020 for each Department.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Slopegraph - Sales Figures 2019 vs 2020</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line { fill: none; stroke: steelblue; stroke-width: 2; }
        .circle { fill: steelblue; }
        .text { font: 10px sans-serif; }
        .axis path, .axis line { fill: none; shape-rendering: crispEdges; }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 100},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleBand().range([height, 0]).padding(0.1);
        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            const salesData = data.filter(d => d.Year === ""2019"" || d.Year === ""2020"")
                                  .reduce((acc, d) => {
                                      const year = d.Year;
                                      const department = d.Department;
                                      const sales = +d[""Sales Figures""];
                                      acc[department] = acc[department] || {};
                                      acc[department][year] = sales;
                                      return acc;
                                  }, {});
            
            const departments = Object.keys(salesData);
            const chartData = departments.map(department => ({
                department,
                sales2019: salesData[department][""2019""],
                sales2020: salesData[department][""2020""]
            })).filter(d => d.sales2019 !== undefined && d.sales2020 !== undefined);

            x.domain([0, d3.max(chartData, d => Math.max(d.sales2019, d.sales2020))]);
            y.domain(chartData.map(d => d.department));

            g.append(""g"")
             .attr(""class"", ""axis axis--x"")
             .attr(""transform"", `translate(0,${height})`)
             .call(d3.axisBottom(x));

            g.append(""g"")
             .attr(""class"", ""axis axis--y"")
             .call(d3.axisLeft(y));

            const line = d3.line()
                            .x(d => x(d.sales))
                            .y(d => y(d.department) + y.bandwidth() / 2);

            g.append(""path"")
             .datum(chartData)
             .attr(""class"", ""line"")
             .attr(""d"", line([{sales: 0}, ...chartData, {sales: 0}]))
             .attr(""fill"", ""none"");

            g.selectAll("".circle"")
             .data(chartData)
             .enter().append(""circle"")
             .attr(""class"", ""circle"")
             .attr(""cx"", d => x(d.sales2019))
             .attr(""cy"", d => y(d.department) + y.bandwidth() / 2)
             .attr(""r"", 5);

            g.selectAll("".circle"")
             .data(chartData)
             .enter().append(""circle"")
             .attr(""class"", ""circle"")
             .attr(""cx"", d => x(d.sales2020))
             .attr(""cy"", d => y(d.department) + y.bandwidth() / 2)
             .attr(""r"", 5);

            g.selectAll("".text"")
             .data(chartData)
             .enter().append(""text"")
             .attr(""class"", ""text"")
             .attr(""x"", d => x(d.sales2019) + 5)
             .attr(""y"", d => y(d.department) + y.bandwidth() / 2)
             .text(d => d.sales2019);

            g.selectAll("".text"")
             .data(chartData)
             .enter().append(""text"")
             .attr(""class"", ""text"")
             .attr(""x"", d => x(d.sales2020) + 5)
             .attr(""y"", d => y(d.department) + y.bandwidth() / 2 + 15)
             .text(d => d.sales2020);
        });
    </script>
</body>
</html>
```",Initialization Error,407,408
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Heatmap that visualizes the Sales Figures across Department and Years.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Figures Heatmap</title>
    <style>
        .cell {
            stroke-width: 1;
            stroke: #fff;
        }
        .label {
            font-size: 10px;
            fill: black;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const margin = {top: 20, right: 20, bottom: 30, left: 40},
              width = 800 - margin.left - margin.right,
              height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
                      .append(""g"")
                      .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            const years = [...new Set(data.map(d => d.Year))];
            const departments = [...new Set(data.map(d => d.Department))];

            const colorScale = d3.scaleSequential(d3.interpolateBlues)
                                 .domain([0, d3.max(data, d => +d['Sales Figures'])]);

            const xScale = d3.scaleBand()
                             .range([0, width])
                             .domain(departments)
                             .padding(0.05);

            const yScale = d3.scaleBand()
                             .range([height, 0])
                             .domain(years)
                             .padding(0.05);

            svg.append(""g"")
               .selectAll("".cell"")
               .data(data)
               .enter()
               .append(""rect"")
               .attr(""class"", ""cell"")
               .attr(""x"", d => xScale(d.Department))
               .attr(""y"", d => yScale(d.Year))
               .attr(""width"", xScale.bandwidth())
               .attr(""height"", yScale.bandwidth())
               .attr(""fill"", d => colorScale(+d['Sales Figures']));

            svg.append(""g"")
               .attr(""class"", ""x-axis"")
               .attr(""transform"", `translate(0,${height})`)
               .call(d3.axisBottom(xScale));

            svg.append(""g"")
               .attr(""class"", ""y-axis"")
               .call(d3.axisLeft(yScale));
        });
    </script>
</body>
</html>
```",Correct,408,409
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Stacked Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            stroke-width: 1;
            stroke: #fff;
        }
        .axis {
            font: 10px sans-serif;
        }
        .x.axis path {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script>
        const margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = 800 - margin.left - margin.right,
              height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            const keys = [""Sales Figures"", ""Revenue"", ""Profit""];
            data.forEach(d => {
                d[""Sales Figures""] = +d[""Sales Figures""];
                d.Revenue = +d.Revenue;
                d.Profit = +d.Profit;
            });

            const x = d3.scaleBand()
                .domain(data.map(d => d.Year))
                .range([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Sales Figures""] + d.Revenue + d.Profit)])
                .range([height, 0]);

            const z = d3.scaleOrdinal()
                .domain(keys)
                .range(d3.schemeCategory10);

            const stack = d3.stack()
                .keys(keys);

            const stackedData = stack(data);

            svg.append(""g"")
                .selectAll(""g"")
                .data(stackedData)
                .enter().append(""g"")
                .attr(""fill"", d => z(d.key))
                .attr(""class"", ""bar"")
                .selectAll(""rect"")
                .data(d => d)
                .enter().append(""rect"")
                .attr(""x"", d => x(d.data.Year))
                .attr(""y"", d => y(d[1]))
                .attr(""height"", d => y(d[0]) - y(d[1]))
                .attr(""width"", x.bandwidth());

            svg.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""y axis"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Correct,409,410
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Horizontal Bar Chart that visualizes the Sales Figures for each Department in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Figures by Department (2020)</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path,
        .axis--x line {
            display: none;
        }
        .axis--y text {
            font-size: 12px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 40, left: 100},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              x = d3.scaleLinear().range([0, width]),
              y = d3.scaleBand().range([0, height]).padding(0.1),
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"").then(data => {
            const filteredData = data.filter(d => d.Year === ""2020"");
            filteredData.forEach(d => {
                d[""Sales Figures""] = +d[""Sales Figures""];
            });

            x.domain([0, d3.max(filteredData, d => d[""Sales Figures""])]);
            y.domain(filteredData.map(d => d.Department));

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            g.selectAll("".bar"")
                .data(filteredData)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", 0)
                .attr(""y"", d => y(d.Department))
                .attr(""width"", d => x(d[""Sales Figures""]))
                .attr(""height"", y.bandwidth());
        });
    </script>
</body>
</html>
```",Correct,410,411
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot that visualizes the relationship between Sales Figures and Hours Worked.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales vs Hours Worked Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""scatterplot"" style=""width: 600px; height: 400px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(csvData => {
                const rows = csvData.split('\n').slice(1);
                const salesFigures = [];
                const hoursWorked = [];

                rows.forEach(row => {
                    const columns = row.split(',');
                    if (columns.length > 3) {
                        salesFigures.push(parseFloat(columns[2]));
                        hoursWorked.push(parseFloat(columns[3]));
                    }
                });

                const scatterplot = echarts.init(document.getElementById('scatterplot'));
                const option = {
                    title: {
                        text: 'Sales Figures vs Hours Worked'
                    },
                    tooltip: {},
                    xAxis: {
                        name: 'Sales Figures',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Hours Worked',
                        type: 'value'
                    },
                    series: [{
                        symbolSize: 10,
                        data: salesFigures.map((sales, index) => [sales, hoursWorked[index]]),
                        type: 'scatter'
                    }]
                };

                scatterplot.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,411,412
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Line Chart that visualizes the trend of Sales Figures over the Year for each Department.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Sales Figures Trend by Department</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.2.0/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(csvData => {
                const rows = csvData.split('\n').slice(1);
                const data = {};
                
                rows.forEach(row => {
                    const cols = row.split(',');
                    const year = cols[0];
                    const department = cols[1];
                    const salesFigures = parseFloat(cols[2]);

                    if (!data[department]) {
                        data[department] = {};
                    }
                    if (!data[department][year]) {
                        data[department][year] = 0;
                    }
                    data[department][year] += salesFigures;
                });

                const years = Array.from(new Set(rows.map(row => row.split(',')[0]))).sort();
                const departments = Object.keys(data);
                const series = departments.map(department => ({
                    name: department,
                    type: 'line',
                    data: years.map(year => data[department][year] || 0),
                }));

                const option = {
                    title: {
                        text: 'Sales Figures Trend by Department'
                    },
                    tooltip: {},
                    legend: {
                        data: departments
                    },
                    xAxis: {
                        data: years
                    },
                    yAxis: {},
                    series: series
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,412,413
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Bar Chart that visualizes the Sales Figures for each Department in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Figures by Department in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 500px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const salesByDepartment = {};
                
                lines.forEach(line => {
                    const [year, department, salesFigures] = line.split(',');
                    if (year.trim() === '2020') {
                        if (!salesByDepartment[department]) {
                            salesByDepartment[department] = 0;
                        }
                        salesByDepartment[department] += parseFloat(salesFigures);
                    }
                });

                const departments = Object.keys(salesByDepartment);
                const salesFigures = departments.map(department => salesByDepartment[department]);

                const chartDom = document.getElementById('chart');
                const myChart = echarts.init(chartDom);
                const option = {
                    title: {
                        text: 'Sales Figures by Department in 2020'
                    },
                    xAxis: {
                        type: 'category',
                        data: departments
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        data: salesFigures,
                        type: 'bar'
                    }]
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,413,414
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Pie Chart that visualizes the proportion of Sales Figures contributed by each Department in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Department Sales Figures in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 600px;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1); // Skip the header
                const salesData = {};

                lines.forEach(line => {
                    const [year, department, salesFigures] = line.split(',');
                    if (year.trim() === '2020') {
                        const dep = department.trim();
                        const sales = parseFloat(salesFigures.trim());
                        if (!isNaN(sales)) {
                            salesData[dep] = (salesData[dep] || 0) + sales;
                        }
                    }
                });

                const departments = Object.keys(salesData);
                const salesFigures = Object.values(salesData);

                const myChart = echarts.init(document.getElementById('main'));
                const option = {
                    title: {
                        text: 'Sales Figures by Department in 2020',
                        subtext: 'Source: Employee Performance Data',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    legend: {
                        orient: 'vertical',
                        left: 'left'
                    },
                    series: [
                        {
                            name: 'Sales Figures',
                            type: 'pie',
                            radius: '50%',
                            data: departments.map((dep, index) => ({ value: salesFigures[index], name: dep })),
                            emphasis: {
                                itemStyle: {
                                    shadowBlur: 10,
                                    shadowOffsetX: 0,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            }
                        }
                    ]
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,414,415
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Donut Chart that visualizes the distribution of Sales Figures among Department in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Donut Chart - Sales Figures by Department (2020)</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 600px;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1);
            const salesData = {};

            rows.forEach(row => {
                const columns = row.split(',');
                if (columns[0] === '2020') {
                    const department = columns[1];
                    const salesFigures = parseFloat(columns[2]);

                    if (!salesData[department]) {
                        salesData[department] = 0;
                    }
                    salesData[department] += salesFigures;
                }
            });

            const departments = Object.keys(salesData);
            const salesFigures = Object.values(salesData);

            const option = {
                title: {
                    text: 'Sales Figures by Department (2020)',
                    subtext: 'Donut Chart',
                    left: 'center'
                },
                tooltip: {
                    trigger: 'item'
                },
                series: [{
                    name: 'Sales Figures',
                    type: 'pie',
                    radius: ['40%', '70%'],
                    avoidLabelOverlap: false,
                    label: {
                        show: false,
                        position: 'center'
                    },
                    emphasis: {
                        label: {
                            show: true,
                            fontSize: '30',
                            fontWeight: 'bold'
                        }
                    },
                    labelLine: {
                        show: false
                    },
                    data: departments.map((dept, index) => ({
                        value: salesFigures[index],
                        name: dept
                    }))
                }]
            };

            const chart = echarts.init(document.getElementById('main'));
            chart.setOption(option);
        });
    </script>
</body>
</html>
```",Correct,415,416
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Coxcomb Chart(polar area chart) to compare the Sales Figures of different Department in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coxcomb Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 600px;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n');
                const headers = lines[0].split(',');
                const salesIndex = headers.indexOf('Sales Figures');
                const departmentIndex = headers.indexOf('Department');
                const yearIndex = headers.indexOf('Year');

                const salesData = {};
                lines.slice(1).forEach(line => {
                    const columns = line.split(',');
                    const year = columns[yearIndex];
                    const department = columns[departmentIndex];
                    const sales = parseFloat(columns[salesIndex]);

                    if (year === '2020') {
                        if (!salesData[department]) salesData[department] = 0;
                        salesData[department] += sales;
                    }
                });

                const departments = Object.keys(salesData);
                const salesFigures = Object.values(salesData);

                const option = {
                    title: {
                        text: 'Sales Figures by Department in 2020',
                        subtext: 'Coxcomb Chart',
                        left: 'center'
                    },
                    polar: {},
                    tooltip: {
                        trigger: 'item'
                    },
                    radiusAxis: {
                        type: 'category',
                        data: departments,
                        // Set the start angle to offset the first slice at the top
                        startAngle: 90
                    },
                    angleAxis: {
                        show: false
                    },
                    series: [{
                        type: 'bar',
                        data: salesFigures,
                        coordinateSystem: 'polar',
                        name: 'Sales Figures',
                        stack: 'a',
                        emphasis: {
                            focus: 'series'
                        }
                    }],
                    legend: {
                        show: true,
                        data: ['Sales Figures'],
                        left: 'center'
                    }
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,416,417
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Radar Chart to compare the Sales Figures of different Department in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Radar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""radarChart"" style=""width: 600px; height: 400px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const salesData = {};
                
                rows.forEach(row => {
                    const columns = row.split(',');
                    const year = columns[0].trim();
                    const department = columns[1].trim();
                    const salesFigures = parseFloat(columns[2].trim());
                    
                    if(year == '2020') {
                        if(!salesData[department]) {
                            salesData[department] = salesFigures;
                        }
                    }
                });
                
                const departments = Object.keys(salesData);
                const salesFigures = departments.map(department => salesData[department]);

                const option = {
                    title: {
                        text: 'Sales Figures by Department in 2020',
                        left: 'center'
                    },
                    tooltip: {},
                    radar: {
                        indicator: departments.map(department => ({ name: department, max: Math.max(...salesFigures) * 1.2 })),
                        shape: 'circle'
                    },
                    series: [{
                        type: 'radar',
                        data: [{
                            value: salesFigures,
                            name: 'Sales Figures'
                        }]
                    }]
                };

                const radarChart = echarts.init(document.getElementById('radarChart'));
                radarChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,417,418
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Streamgraph that visualizes the changes of Sales Figures over the Year for each Department.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Streamgraph Example</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 600px;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <script>
        // Fetching the data
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const salesData = {};
                
                rows.forEach(row => {
                    const cols = row.split(',');
                    if(cols.length < 8) return; // skip incomplete lines
                    
                    const year = cols[0];
                    const department = cols[1];
                    const sales = parseFloat(cols[2]);
                    
                    if (!salesData[department]) {
                        salesData[department] = {};
                    }
                    if (!salesData[department][year]) {
                        salesData[department][year] = 0;
                    }
                    salesData[department][year] += sales;
                });

                const years = [...new Set(rows.map(row => row.split(',')[0]))];
                const seriesData = Object.keys(salesData).map(department => {
                    return {
                        name: department,
                        type: 'line',
                        stack: 'total',
                        areaStyle: {},
                        data: years.map(year => salesData[department][year] || 0)
                    };
                });

                // Create ECharts instance
                const myChart = echarts.init(document.getElementById('main'));
                
                // Specify chart options
                const option = {
                    title: {
                        text: 'Sales Figures Streamgraph by Department Over Years',
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'cross'
                        }
                    },
                    legend: {
                        data: Object.keys(salesData)
                    },
                    xAxis: {
                        type: 'category',
                        boundaryGap: false,
                        data: years
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: seriesData
                };
                
                // Use the specified chart option
                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,418,419
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Slopegraph to compare the Sales Figures between 2019 and 2020 for each Department.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Slopegraph</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const salesData = {};
                
                rows.forEach(row => {
                    const cols = row.split(',');
                    const year = cols[0].trim();
                    const department = cols[1].trim();
                    const salesFigures = parseFloat(cols[2].trim());

                    if (year === '2019' || year === '2020') {
                        if (!salesData[department]) {
                            salesData[department] = {};
                        }
                        salesData[department][year] = salesFigures;
                    }
                });

                const departments = Object.keys(salesData);
                const seriesData = departments.map(department => {
                    return [
                        { name: department, value: salesData[department]['2019'], year: '2019' },
                        { name: department, value: salesData[department]['2020'], year: '2020' }
                    ];
                }).flat();

                const option = {
                    title: {
                        text: 'Sales Figures Comparison (2019 vs 2020)',
                        left: 'center'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Sales Figures',
                        position: 'top',
                        splitLine: { show: false }
                    },
                    yAxis: {
                        type: 'category',
                        data: departments,
                        inverse: true
                    },
                    series: [{
                        type: 'line',
                        data: seriesData,
                        lineStyle: {
                            width: 2,
                            color: '#5470c6'
                        },
                        label: {
                            show: true,
                            position: 'right'
                        },
                        tooltip: {
                            formatter: function (params) {
                                return `${params.data.name}<br/>Year: ${params.data.year}<br/>Sales: ${params.data.value}`;
                            }
                        }
                    }]
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,419,420
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Heatmap that visualizes the Sales Figures across Department and Years.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Figures Heatmap</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const salesData = {};
                const years = new Set();
                const departments = new Set();
                
                rows.forEach(row => {
                    const columns = row.split(',');
                    if (columns.length >= 3) {
                        const year = columns[0].trim();
                        const department = columns[1].trim();
                        const sales = parseFloat(columns[2].trim()) || 0;

                        years.add(year);
                        departments.add(department);

                        if (!salesData[department]) {
                            salesData[department] = {};
                        }
                        salesData[department][year] = sales;
                    }
                });

                const yearsArray = Array.from(years);
                const departmentsArray = Array.from(departments);
                const dataMap = [];

                departmentsArray.forEach(department => {
                    yearsArray.forEach(year => {
                        const value = salesData[department][year] || 0;
                        dataMap.push([departmentsArray.indexOf(department), yearsArray.indexOf(year), value]);
                    });
                });

                const option = {
                    tooltip: {
                        position: 'top'
                    },
                    grid: {
                        height: '60%',
                        y: '10%'
                    },
                    xAxis: {
                        type: 'category',
                        data: yearsArray,
                        splitArea: {
                            show: true
                        }
                    },
                    yAxis: {
                        type: 'category',
                        data: departmentsArray,
                        splitArea: {
                            show: true
                        }
                    },
                    visualMap: {
                        min: 0,
                        max: Math.max(...dataMap.map(item => item[2])),
                        calculable: true,
                        orient: 'horizontal',
                        left: 'center',
                        bottom: '15%',
                        inRange: {
                            color: ['#d94e5d', '#eac736', '#50a3ba']
                        }
                    },
                    series: [{
                        name: 'Sales Figures',
                        type: 'heatmap',
                        data: dataMap,
                        label: {
                            show: false
                        },
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowColor: '#333'
                            }
                        }
                    }]
                };

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);
                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,420,421
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Stacked Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const years = [...new Set(rows.map(row => row[0]))];
                const departments = [...new Set(rows.map(row => row[1]))];

                const seriesData = departments.map(department => {
                    return {
                        name: department,
                        type: 'bar',
                        stack: 'total',
                        data: years.map(year => {
                            const totalProfit = rows.reduce((acc, row) => {
                                if (row[0] === year && row[1] === department) {
                                    return acc + parseFloat(row[5]);
                                }
                                return acc;
                            }, 0);
                            return totalProfit;
                        })
                    };
                });

                const option = {
                    title: {
                        text: 'Employee Performance Stacked Bar Chart'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    legend: {
                        data: departments
                    },
                    xAxis: {
                        type: 'category',
                        data: years
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: seriesData
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,421,422
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Horizontal Bar Chart that visualizes the Sales Figures for each Department in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Figures by Department in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const salesData = {};

                rows.forEach(row => {
                    const columns = row.split(',');
                    const year = columns[0].trim();
                    const department = columns[1].trim();
                    const salesFigures = parseFloat(columns[2].trim());

                    if (year === '2020') {
                        if (!salesData[department]) {
                            salesData[department] = 0;
                        }
                        salesData[department] += salesFigures;
                    }
                });

                const departments = Object.keys(salesData);
                const salesFigures = departments.map(department => salesData[department]);

                const chart = echarts.init(document.getElementById('main'));

                const option = {
                    title: {
                        text: 'Sales Figures by Department in 2020',
                        subtext: 'Horizontal Bar Chart',
                        left: 'center'
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'value'
                    },
                    yAxis: {
                        type: 'category',
                        data: departments
                    },
                    series: [{
                        name: 'Sales Figures',
                        type: 'bar',
                        data: salesFigures,
                        itemStyle: {
                            color: '#4CAF50'
                        }
                    }]
                };

                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,422,423
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Scatterplot that visualizes the relationship between Sales Figures and Hours Worked.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot: Sales Figures vs Hours Worked</title>
    <script src=""https://cdn.jsdelivr.net/npm Vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm Vega-Lite@5.8.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm Vega-Embed@6.20.2""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatterplot showing the relationship between Sales Figures and Hours Worked."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Sales Figures"",
                    ""type"": ""quantitative"",
                    ""title"": ""Sales Figures""
                },
                ""y"": {
                    ""field"": ""Hours Worked"",
                    ""type"": ""quantitative"",
                    ""title"": ""Hours Worked""
                },
                ""tooltip"": [
                    {""field"": ""Sales Figures"", ""type"": ""quantitative""},
                    {""field"": ""Hours Worked"", ""type"": ""quantitative""},
                    {""field"": ""Employee Satisfaction Score"", ""type"": ""quantitative""}
                ]
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,423,424
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Line Chart that visualizes the trend of Sales Figures over the Year for each Department.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance - Sales Figures Trend</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.6.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A line chart showing the trend of Sales Figures over the Year for each Department."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Year"",
                    ""type"": ""temporal"",
                    ""title"": ""Year""
                },
                ""y"": {
                    ""field"": ""Sales Figures"",
                    ""type"": ""quantitative"",
                    ""title"": ""Sales Figures""
                },
                ""color"": {
                    ""field"": ""Department"",
                    ""type"": ""nominal"",
                    ""title"": ""Department""
                }
            }
        };

        vegaEmbed('#vis', spec).catch(console.error);
    </script>
</body>
</html>
```",Correct,424,425
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Bar Chart that visualizes the Sales Figures for each Department in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Figures by Department in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2.6.12/dist/vue.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.8.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Year === '2020'""
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Department"",
                    ""type"": ""nominal"",
                    ""title"": ""Department""
                },
                ""y"": {
                    ""field"": ""Sales Figures"",
                    ""type"": ""quantitative"",
                    ""title"": ""Sales Figures""
                }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Correct,425,426
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Pie Chart that visualizes the proportion of Sales Figures contributed by each Department in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance Pie Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/d3@7""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.4""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20""></script>
    <style>
        #vis {
            width: 600px;
            height: 400px;
        }
    </style>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Year === 2020""
                },
                {
                    ""aggregate"": [{
                        ""op"": ""sum"",
                        ""field"": ""Sales Figures"",
                        ""as"": ""Total Sales""
                    }],
                    ""groupby"": [""Department""]
                }
            ],
            ""mark"": ""arc"",
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Total Sales"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Department"",
                    ""type"": ""nominal"",
                    ""legend"": {
                        ""orient"": ""right""
                    }
                },
                ""tooltip"": [
                    {""field"": ""Department"", ""type"": ""nominal""},
                    {""field"": ""Total Sales"", ""type"": ""quantitative""}
                ]
            }
        };

        vegaEmbed('#vis', spec).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Initial Result,426,427
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Donut Chart that visualizes the distribution of Sales Figures among Department in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Donut Chart Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2.6.14""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.23.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.8.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
<div id=""vis""></div>
<script>
    const spec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
            ""format"": {
                ""type"": ""csv""
            }
        },
        ""transform"": [
            {
                ""filter"": ""datum.Year == 2020""
            },
            {
                ""aggregate"": [
                    {
                        ""op"": ""sum"",
                        ""field"": ""Sales Figures"",
                        ""as"": ""Total Sales""
                    }
                ],
                ""groupby"": [""Department""]
            }
        ],
        ""mark"": ""arc"",
        ""encoding"": {
            ""theta"": {
                ""field"": ""Total Sales"",
                ""type"": ""quantitative""
            },
            ""color"": {
                ""field"": ""Department"",
                ""type"": ""nominal""
            },
            ""tooltip"": [
                {""field"": ""Department"", ""type"": ""nominal""},
                {""field"": ""Total Sales"", ""type"": ""quantitative""}
            ]
        }
    };

    vegaEmbed('#vis', spec, {actions: false});
</script>
</body>
</html>
```",Unexpected Initial Result,427,428
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Coxcomb Chart(polar area chart) to compare the Sales Figures of different Department in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coxcomb Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Year === 2020""
                }
            ],
            ""mark"": {
                ""type"": ""arc"",
                ""outerRadius"": 100
            },
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Sales Figures"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Department"",
                    ""type"": ""nominal""
                },
                ""order"": {
                    ""field"": ""Sales Figures"",
                    ""type"": ""quantitative"",
                    ""sort"": ""descending""
                }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Unexpected Initial Result,428,429
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Radar Chart to compare the Sales Figures of different Department in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Employee Performance Radar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.17.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.1""></script>
</head>
<body>

<div id=""vis""></div>

<script>
    const spec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
            ""format"": {
                ""type"": ""csv""
            }
        },
        ""transform"": [
            {
                ""filter"": ""datum.Year == 2020""
            }
        ],
        ""mark"": ""point"",
        ""encoding"": {
            ""theta"": {
                ""field"": ""Sales Figures"",
                ""type"": ""quantitative""
            },
            ""color"": {
                ""field"": ""Department"",
                ""type"": ""nominal""
            },
            ""tooltip"": [
                {""field"": ""Department"", ""type"": ""nominal""},
                {""field"": ""Sales Figures"", ""type"": ""quantitative""}
            ]
        },
        ""config"": {
            ""mark"": {
                ""radius"": 200
            }
        }
    };

    vegaEmbed('#vis', spec).then(function(result) {}).catch(console.error);
</script>

</body>
</html>
```",Unexpected Initial Result,429,430
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Streamgraph that visualizes the changes of Sales Figures over the Year for each Department.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Streamgraph Example</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script type=""text/javascript"">
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vegalite/v5.json"",
            ""description"": ""A streamgraph showing Sales Figures changes over the Year for each Department."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": {""type"": ""area"", ""interpolate"": ""basis""},
            ""encoding"": {
                ""x"": {""field"": ""Year"", ""type"": ""temporal"", ""title"": ""Year""},
                ""y"": {""field"": ""Sales Figures"", ""type"": ""quantitative"", ""title"": ""Sales Figures"", ""stack"": ""center""},
                ""color"": {
                    ""field"": ""Department"",
                    ""type"": ""nominal"",
                    ""title"": ""Department""
                },
                ""tooltip"": [
                    {""field"": ""Department"", ""type"": ""nominal""},
                    {""field"": ""Year"", ""type"": ""temporal""},
                    {""field"": ""Sales Figures"", ""type"": ""quantitative""}
                ]
            },
            ""view"": {
                ""stroke"": null
            }
        };

        vegaEmbed('#vis', spec).then(result => {
            // Access the resulting view instance
            console.log(result);
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,430,431
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Slopegraph to compare the Sales Figures between 2019 and 2020 for each Department.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Slopegraph of Sales Figures</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.8.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.23.0""></script>
</head>
<body>
<div id=""vis""></div>
<script>
    const spec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
            ""format"": {""type"": ""csv""}
        },
        ""transform"": [
            {
                ""filter"": ""datum.Year == 2019 || datum.Year == 2020""
            },
            {
                ""fold"": [""Sales Figures""],
                ""as"": [""Measure"", ""Value""]
            }
        ],
        ""mark"": ""line"",
        ""encoding"": {
            ""x"": {
                ""field"": ""Year"",
                ""type"": ""ordinal"",
                ""title"": ""Year""
            },
            ""y"": {
                ""field"": ""Value"",
                ""type"": ""quantitative"",
                ""title"": ""Sales Figures""
            },
            ""color"": {
                ""field"": ""Department"",
                ""type"": ""nominal"",
                ""title"": ""Department""
            },
            ""tooltip"": [
                {""field"": ""Department"", ""title"": ""Department""},
                {""field"": ""Year"", ""title"": ""Year""},
                {""field"": ""Value"", ""title"": ""Sales Figures""}
            ]
        }
    };

    vegaEmbed('#vis', spec);
</script>
</body>
</html>
```",Correct,431,432
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Heatmap that visualizes the Sales Figures across Department and Years.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Figures Heatmap</title>
    <script src=""https://cdn.jsdelivr.net/npmvega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npmvega-lite@5.1.0""></script>
    <script src=""https://cdn.jsdelivr.net/npmvega-embed@6.18.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""rect"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Year"",
                    ""type"": ""ordinal"",
                    ""title"": ""Year""
                },
                ""y"": {
                    ""field"": ""Department"",
                    ""type"": ""ordinal"",
                    ""title"": ""Department""
                },
                ""color"": {
                    ""field"": ""Sales Figures"",
                    ""type"": ""quantitative"",
                    ""title"": ""Sales Figures"",
                    ""scale"": {""scheme"": ""blues""}
                }
            },
            ""width"": 600,
            ""height"": 400
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Initialization Error,432,433
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Stacked Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.7.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Year"",
                    ""type"": ""ordinal"",
                    ""title"": ""Year""
                },
                ""y"": {
                    ""aggregate"": ""sum"",
                    ""field"": ""Sales Figures"",
                    ""type"": ""quantitative"",
                    ""title"": ""Total Sales Figures""
                },
                ""color"": {
                    ""field"": ""Department"",
                    ""type"": ""nominal"",
                    ""title"": ""Department""
                }
            },
            ""width"": 800,
            ""height"": 400
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Correct,433,434
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees
Your task is to create a Horizontal Bar Chart that visualizes the Sales Figures for each Department in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv

The data table contains the following columns: Year,Department,Sales Figures,Hours Worked,Revenue,Profit,Employee Satisfaction Score,Number of Employees",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <script src=""https://cdn.jsdelivr.net/npm.vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm.vega-lite@5.1.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm.vega-embed@6.18.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        var spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/12da6a6d9f28ee754e96e4f7af8906dc/raw/a024625ad34783f72456f7440dd4b3a1f67a4aaf/Employee%2520Performance.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Year === '2020'""
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Sales Figures"", 
                    ""type"": ""quantitative""
                },
                ""y"": {
                    ""field"": ""Department"", 
                    ""type"": ""nominal"",
                    ""sort"": ""-x""
                }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Initialization Error,434,435
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot that visualizes the relationship between Energy Consumed and Cost. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .tooltip {
            position: absolute;
            text-align: center;
            width: 60px;
            padding: 5px;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>
    <script>
        const margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = 800 - margin.left - margin.right,
              height = 500 - margin.top - margin.bottom;
        
        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        const tooltip = d3.select(""body"").append(""div"")
            .attr(""class"", ""tooltip"")
            .style(""opacity"", 0);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"").then(data => {
            data.forEach(d => {
                d[""Energy Consumed""] = +d[""Energy Consumed""];
                d[""Cost""] = +d[""Cost""];
            });

            x.domain(d3.extent(data, d => d[""Energy Consumed""])).nice();
            y.domain(d3.extent(data, d => d[""Cost""])).nice();

            svg.append(""g"")
                .attr(""transform"", `translate(0, ${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .call(d3.axisLeft(y));

            svg.selectAll(""dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""cx"", d => x(d[""Energy Consumed""]))
                .attr(""cy"", d => y(d[""Cost""]))
                .attr(""r"", 5)
                .style(""fill"", ""#69b3a2"")
                .on(""mouseover"", function(event, d) {
                    tooltip.transition()
                        .duration(200)
                        .style(""opacity"", .9);
                    tooltip.html(`Consumed: ${d[""Energy Consumed""]}<br>Cost: ${d[""Cost""]}`)
                        .style(""left"", (event.pageX + 5) + ""px"")
                        .style(""top"", (event.pageY - 28) + ""px"");
                    d3.select(this).attr(""r"", 8);
                })
                .on(""mousemove"", function(event) {
                    tooltip.style(""left"", (event.pageX + 5) + ""px"")
                           .style(""top"", (event.pageY - 28) + ""px"");
                })
                .on(""mouseout"", function(d) {
                    tooltip.transition()
                        .duration(500)
                        .style(""opacity"", 0);
                    d3.select(this).attr(""r"", 5);
                });
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,435,436
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot that visualizes the relationship between Energy Consumed and Cost. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatterplot {
            font-family: Arial, sans-serif;
        }
        .dot {
            fill: steelblue;
            stroke: white;
            stroke-width: 1.5px;
        }
    </style>
</head>
<body>
    <svg class=""scatterplot"" width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select("".scatterplot""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const xScale = d3.scaleLinear().range([0, width]),
              yScale = d3.scaleLinear().range([height, 0]);

        const xAxis = d3.axisBottom(xScale),
              yAxis = d3.axisLeft(yScale);

        const brush = d3.brush()
            .extent([[0, 0], [width, height]])
            .on(""brush end"", brushed);

        svg.append(""g"").attr(""class"", ""x-axis"").attr(""transform"", `translate(0,${height})`);
        svg.append(""g"").attr(""class"", ""y-axis"");

        svg.append(""g"").attr(""class"", ""brush"");

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"").then(data => {
            data.forEach(d => {
                d[""Energy Consumed""] = +d[""Energy Consumed""];
                d[""Cost""] = +d[""Cost""];
            });

            xScale.domain(d3.extent(data, d => d[""Energy Consumed""])).nice();
            yScale.domain(d3.extent(data, d => d[""Cost""])).nice();

            svg.select("".x-axis"").call(xAxis);
            svg.select("".y-axis"").call(yAxis);

            const dots = svg.append(""g"").selectAll("".dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => xScale(d[""Energy Consumed""]))
                .attr(""cy"", d => yScale(d[""Cost""]))
                .attr(""r"", 5);

            svg.select("".brush"").call(brush);

            function brushed(event) {
                const selection = event.selection;
                if (selection) {
                    const [[x0, y0], [x1, y1]] = selection;
                    dots.classed(""selected"", d => 
                        xScale(d[""Energy Consumed""]) >= x0 && 
                        xScale(d[""Energy Consumed""]) <= x1 &&
                        yScale(d[""Cost""]) >= y0 && 
                        yScale(d[""Cost""]) <= y1
                    );
                }
            }
        });
    </script>
</body>
</html>
```",Initialization Error,436,437
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot that visualizes the relationship between Energy Consumed and Cost. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot Visualization</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter {
            fill: steelblue;
            stroke: white;
            stroke-width: 1.5px;
        }
        .axis {
            font: 12px sans-serif;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    
    <script>
        const svg = d3.select(""svg"");
        const margin = { top: 20, right: 20, bottom: 30, left: 40 };
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;
        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"").then(data => {

            data.forEach(d => {
                d[""Energy Consumed""] = +d[""Energy Consumed""];
                d[""Cost""] = +d[""Cost""];
            });

            const x = d3.scaleLinear()
                .domain(d3.extent(data, d => d[""Energy Consumed""])).nice()
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain(d3.extent(data, d => d[""Cost""])).nice()
                .range([height, 0]);

            const xAxis = d3.axisBottom(x);
            const yAxis = d3.axisLeft(y);

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(xAxis);

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(yAxis);

            g.selectAll("".scatter"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""scatter"")
                .attr(""cx"", d => x(d[""Energy Consumed""]))
                .attr(""cy"", d => y(d[""Cost""]))
                .attr(""r"", 3.5);

            const zoom = d3.zoom()
                .scaleExtent([1, 10])
                .on(""zoom"", (event) => {
                    const transform = event.transform;
                    g.attr(""transform"", transform);
                    g.select("".axis--x"").call(xAxis.scale(transform.rescaleX(x)));
                    g.select("".axis--y"").call(yAxis.scale(transform.rescaleY(y)));
                    g.selectAll("".scatter"")
                        .attr(""cx"", d => transform.applyX(x(d[""Energy Consumed""])))
                        .attr(""cy"", d => transform.applyY(y(d[""Cost""])));
                });

            svg.call(zoom);

        });
    </script>
</body>
</html>
```",Correct,437,438
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Energy Consumed and Cost. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Scatterplot</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .tooltip {
            position: absolute;
            text-align: center;
            width: 100px;
            height: auto;
            padding: 5px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
        svg {
            font: 10px sans-serif;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = {top: 20, right: 30, bottom: 40, left: 70};
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"").then(data => {
            data.forEach(d => {
                d[""Energy Consumed""] = +d[""Energy Consumed""];
                d[""Cost""] = +d[""Cost""];
            });

            const x = d3.scaleLinear()
                .domain(d3.extent(data, d => d[""Energy Consumed""])).nice()
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain(d3.extent(data, d => d[""Cost""])).nice()
                .range([height, 0]);

            g.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .call(d3.axisLeft(y));

            const tooltip = d3.select(""body"").append(""div"")
                .attr(""class"", ""tooltip"")
                .style(""opacity"", 0);

            g.selectAll(""dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""cx"", d => x(d[""Energy Consumed""]))
                .attr(""cy"", d => y(d[""Cost""]))
                .attr(""r"", 5)
                .attr(""fill"", ""#69b3a2"")
                .on(""mouseover"", function(event, d) {
                    tooltip.transition()
                        .duration(200)
                        .style(""opacity"", .9);
                    tooltip.html(`Energy: ${d[""Energy Consumed""]}<br>Cost: ${d[""Cost""]}`)
                        .style(""left"", (event.pageX + 5) + ""px"")
                        .style(""top"", (event.pageY - 28) + ""px"");
                })
                .on(""mouseout"", function() {
                    tooltip.transition()
                        .duration(500)
                        .style(""opacity"", 0);
                })
                .on(""click"", function(event, d) {
                    window.open(`https://www.google.com/search?q=${d[""Energy Sector""]}`, '_blank');
                });
        });
    </script>
</body>
</html>
```",Correct,438,439
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot with query widgets showing the Energy Consumed and Cost of the given dataset. Add a slider to represent the Month.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatterplot {
            border: 1px solid #ccc;
            margin: 20px;
        }
        .axis {
            font-size: 12px;
        }
    </style>
</head>
<body>
    <h1>Energy Consumption vs Cost</h1>
    <div>
        <label for=""month-slider"">Select Month:</label>
        <input type=""range"" id=""month-slider"" min=""1"" max=""12"" value=""1"">
        <span id=""month-value"">1</span>
    </div>
    <svg class=""scatterplot"" width=""800"" height=""400""></svg>

    <script>
        const svg = d3.select("".scatterplot""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);
        const xAxis = g.append(""g"").attr(""class"", ""axis"").attr(""transform"", `translate(0,${height})`);
        const yAxis = g.append(""g"").attr(""class"", ""axis"");

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"").then(data => {
            data.forEach(d => {
                d['Energy Consumed'] = +d['Energy Consumed'];
                d['Cost'] = +d['Cost'];
                d['Month'] = +d['Month'];
            });

            function update(month) {
                const filteredData = data.filter(d => d['Month'] === month);
                x.domain([0, d3.max(filteredData, d => d['Energy Consumed'])]);
                y.domain([0, d3.max(filteredData, d => d['Cost'])]);

                xAxis.call(d3.axisBottom(x));
                yAxis.call(d3.axisLeft(y));

                const circles = g.selectAll(""circle"").data(filteredData);
                circles.exit().remove();
                circles.enter().append(""circle"")
                    .attr(""r"", 5)
                    .merge(circles)
                    .attr(""cx"", d => x(d['Energy Consumed']))
                    .attr(""cy"", d => y(d['Cost']))
                    .attr(""fill"", ""steelblue"");
            }

            update(1);

            d3.select(""#month-slider"").on(""input"", function() {
                const month = +this.value;
                d3.select(""#month-value"").text(month);
                update(month);
            });
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,439,440
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot showing the Energy Consumed of Industrial. Add animated transitions that connect these points using lines in order.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .dot {
            fill: steelblue;
        }
        .line {
            fill: none;
            stroke: darkorange;
            stroke-width: 2px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const x = d3.scalePoint().range([0, width]).padding(0.5),
              y = d3.scaleLinear().range([height, 0]);

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"").then(data => {
            data = data.filter(d => d[""Energy Sector""] === ""Industrial"")
                        .map(d => ({ 
                            Month: d.Month, 
                            EnergyConsumed: +d[""Energy Consumed""] 
                        }));
            
            x.domain(data.map(d => d.Month));
            y.domain([0, d3.max(data, d => d.EnergyConsumed)]);

            g.append(""g"")
             .attr(""transform"", `translate(0,${height})`)
             .call(d3.axisBottom(x));

            g.append(""g"")
             .call(d3.axisLeft(y));

            const line = d3.line()
                .x(d => x(d.Month))
                .y(d => y(d.EnergyConsumed));

            g.append(""path"")
             .datum(data)
             .attr(""class"", ""line"")
             .attr(""d"", line)
             .attr(""opacity"", 0);

            const dots = g.selectAll("".dot"")
                          .data(data)
                          .enter().append(""circle"")
                          .attr(""class"", ""dot"")
                          .attr(""cx"", d => x(d.Month))
                          .attr(""cy"", height)
                          .attr(""r"", 5)
                          .attr(""opacity"", 0);

            // Animate dots and line
            dots.transition()
                .duration(2000)
                .attr(""cy"", d => y(d.EnergyConsumed))
                .attr(""opacity"", 1);

            g.select("".line"")
             .transition()
             .duration(2000)
             .attr(""opacity"", 1)
             .attr(""d"", line);
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,440,441
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Energy Consumed of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Line Chart</title>
    <style>
        .line {
            fill: none;
            stroke-width: 2px;
        }
        .line:hover {
            stroke-width: 4px;
        }
        .tooltip {
            position: absolute;
            text-align: center;
            width: 60px;
            padding: 5px;
            font: 12px sans-serif;
            background: lightgrey;
            border: 0px;
            border-radius: 5px;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const svg = d3.select(""svg"");
        const margin = { top: 20, right: 30, bottom: 30, left: 60 };
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;
        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scalePoint().range([0, width]).padding(0.5);
        const y = d3.scaleLinear().range([height, 0]);

        const line = d3.line()
            .x(d => x(d.Month))
            .y(d => y(d[""Energy Consumed""]));

        const color = d3.scaleOrdinal(d3.schemeCategory10);
        const tooltip = d3.select(""body"").append(""div"").attr(""class"", ""tooltip"").style(""opacity"", 0);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"").then(data => {
            data.forEach(d => {
                d[""Energy Consumed""] = +d[""Energy Consumed""];
                d.Month = d.Month.trim();
            });

            const sectors = Array.from(new Set(data.map(d => d[""Energy Sector""])));

            x.domain(data.map(d => d.Month));
            y.domain([0, d3.max(data, d => d[""Energy Consumed""])]);

            sectors.forEach((sector, i) => {
                const sectorData = data.filter(d => d[""Energy Sector""] === sector);

                g.append(""path"")
                    .datum(sectorData)
                    .attr(""class"", ""line"")
                    .attr(""stroke"", color(sector))
                    .attr(""d"", line)
                    .on(""mouseover"", function() {
                        d3.select(this).style(""stroke-width"", ""4px"");
                    })
                    .on(""mouseout"", function() {
                        d3.select(this).style(""stroke-width"", ""2px"");
                    });

                g.append(""text"")
                    .datum(sectorData[sectorData.length - 1])
                    .attr(""transform"", d => `translate(${x(d.Month)},${y(d[""Energy Consumed""])})`)
                    .attr(""x"", 5)
                    .attr(""dy"", ""0.35em"")
                    .style(""fill"", color(sector))
                    .text(sector);
            });

            const xAxis = d3.axisBottom(x);
            const yAxis = d3.axisLeft(y);

            g.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(xAxis);

            g.append(""g"")
                .attr(""class"", ""y axis"")
                .call(yAxis);
        });
    </script>
</body>
</html>
```",Correct,441,442
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Bar Chart that visualizes the Energy Consumed for each Energy Sector in January. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Bar Chart</title>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path,
        .axis--x line {
            display: none;
        }
        .axis--y line {
            stroke: #ddd;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <script>
        const svg = d3.select(""svg""),
              width = +svg.attr(""width""),
              height = +svg.attr(""height""),
              margin = {top: 20, right: 30, bottom: 40, left: 40};

        const x = d3.scaleBand().range([margin.left, width - margin.right]).padding(0.1),
              y = d3.scaleLinear().range([height - margin.bottom, margin.top]);

        const xAxis = svg.append(""g"")
                         .attr(""class"", ""axis axis--x"")
                         .attr(""transform"", `translate(0,${height - margin.bottom})`);

        const yAxis = svg.append(""g"")
                         .attr(""class"", ""axis axis--y"")
                         .attr(""transform"", `translate(${margin.left},0)`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"").then(data => {
            const januaryData = data.filter(d => d.Month === ""January"");
            const energyData = d3.rollup(januaryData, v => d3.sum(v, d => +d[""Energy Consumed""]), d => d[""Energy Sector""]);

            const sectors = Array.from(energyData, ([key, value]) => ({ sector: key, value }));

            x.domain(sectors.map(d => d.sector));
            y.domain([0, d3.max(sectors, d => d.value)]);

            xAxis.call(d3.axisBottom(x));
            yAxis.call(d3.axisLeft(y));

            const bars = svg.selectAll("".bar"")
                            .data(sectors)
                            .enter().append(""rect"")
                            .attr(""class"", ""bar"")
                            .attr(""x"", d => x(d.sector))
                            .attr(""y"", d => y(d.value))
                            .attr(""height"", d => y(0) - y(d.value))
                            .attr(""width"", x.bandwidth());

            const zoom = d3.zoom()
                           .scaleExtent([1, 10])
                           .translateExtent([[0, 0], [width, height]])
                           .on(""zoom"", (event) => {
                               const newX = event.transform.rescaleX(x);
                               const newY = event.transform.rescaleY(y);
                               xAxis.call(d3.axisBottom(newX));
                               yAxis.call(d3.axisLeft(newY));
                               bars.attr(""x"", d => newX(d.sector))
                                   .attr(""y"", d => newY(d.value))
                                   .attr(""height"", d => newY(0) - newY(d.value));
                           });

            svg.call(zoom);
        });
    </script>
</body>
</html>
```",Execution Error,442,443
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Bar Chart that visualizes the Energy Consumed for each Energy Sector in January. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
            cursor: move;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path {
            display: none;
        }
        .axis--y path {
            display: none;
        }
    </style>
    <title>Energy Consumption Bar Chart</title>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 100, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"").then(data => {
            const filteredData = data.filter(d => d.Month === ""January"").map(d => ({
                EnergySector: d[""Energy Sector""],
                EnergyConsumed: +d[""Energy Consumed""]
            })).sort((a, b) => b.EnergyConsumed - a.EnergyConsumed);

            const x = d3.scaleBand()
                .domain(filteredData.map(d => d.EnergySector))
                .range([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([0, d3.max(filteredData, d => d.EnergyConsumed)])
                .nice()
                .range([height, 0]);

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x))
                .selectAll(""text"")
                .attr(""transform"", ""rotate(-45)"")
                .attr(""dx"", ""-.8em"")
                .attr(""dy"", "".15em"")
                .style(""text-anchor"", ""end"");

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            const bar = g.selectAll("".bar"")
                .data(filteredData)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => x(d.EnergySector))
                .attr(""y"", d => y(d.EnergyConsumed))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d.EnergyConsumed))
                .call(d3.drag()
                    .on(""start"", dragStart)
                    .on(""drag"", dragged)
                    .on(""end"", dragEnd));

            function dragStart(event, d) {
                d3.select(this).attr(""opacity"", 0.5);
            }

            function dragged(event, d) {
                const target = d3.select(this);
                const yPos = d3.pointer(event)[1];
                const newY = Math.max(0, Math.min(height, yPos));
                const newHeight = height - newY;
                const energyConsumed = y.invert(newY);
                target.attr(""y"", newY).attr(""height"", newHeight);
            }

            function dragEnd(event, d) {
                const target = d3.select(this);
                target.attr(""opacity"", 1);
                const newEnergyConsumed = y.invert(target.attr(""y""));
                const currentData = filteredData.find(e => e.EnergySector === d.EnergySector);
                currentData.EnergyConsumed = newEnergyConsumed;
                
                // Re-sort and update
                filteredData.sort((a, b) => b.EnergyConsumed - a.EnergyConsumed);
                updateBars();
            }

            function updateBars() {
                y.domain([0, d3.max(filteredData, d => d.EnergyConsumed)]).nice();
                g.selectAll("".bar"")
                    .data(filteredData)
                    .transition()
                    .duration(200)
                    .attr(""y"", d => y(d.EnergyConsumed))
                    .attr(""height"", d => height - y(d.EnergyConsumed));
                g.select("".axis--y"").call(d3.axisLeft(y));
            }
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,443,444
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Bar Chart that visualizes the Energy Consumed for each Energy Sector in January. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Energy Consumed.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path {
            display: none;
        }
        .dropdown {
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class=""dropdown"">
        <label for=""sortOrder"">Sort by: </label>
        <select id=""sortOrder"">
            <option value=""ascending"">Ascending</option>
            <option value=""descending"">Descending</option>
        </select>
    </div>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = { top: 20, right: 30, bottom: 40, left: 40 };
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;
        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"").then(data => {
            const januaryData = data.filter(d => d.Month === ""January"");
            januaryData.forEach(d => {
                d[""Energy Consumed""] = +d[""Energy Consumed""];
            });

            let sortOrder = 'ascending';
            renderChart(januaryData);

            d3.select(""#sortOrder"").on(""change"", function() {
                sortOrder = this.value;
                renderChart(januaryData);
            });

            function renderChart(data) {
                const sortedData = data.sort((a, b) => sortOrder === 'ascending' ? a[""Energy Consumed""] - b[""Energy Consumed""] : b[""Energy Consumed""] - a[""Energy Consumed""]);

                g.selectAll(""*"").remove(); // Clear previous chart

                const x = d3.scaleBand()
                    .domain(sortedData.map(d => d[""Energy Sector""]))
                    .range([0, width])
                    .padding(0.1);

                const y = d3.scaleLinear()
                    .domain([0, d3.max(sortedData, d => d[""Energy Consumed""])])
                    .nice()
                    .range([height, 0]);

                g.append(""g"")
                    .selectAll("".bar"")
                    .data(sortedData)
                    .enter().append(""rect"")
                    .attr(""class"", ""bar"")
                    .attr(""x"", d => x(d[""Energy Sector""]))
                    .attr(""y"", d => y(d[""Energy Consumed""]))
                    .attr(""width"", x.bandwidth())
                    .attr(""height"", d => height - y(d[""Energy Consumed""]))
                    .transition()
                    .duration(1000);

                g.append(""g"")
                    .attr(""class"", ""axis axis--x"")
                    .attr(""transform"", `translate(0,${height})`)
                    .call(d3.axisBottom(x));

                g.append(""g"")
                    .attr(""class"", ""axis axis--y"")
                    .call(d3.axisLeft(y));
            }
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,444,445
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot that visualizes the relationship between Energy Consumed and Cost. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const energyConsumed = [];
                const cost = [];
                
                lines.forEach(line => {
                    const cols = line.split(',');
                    if (cols.length >= 4) {
                        energyConsumed.push(parseFloat(cols[2])); // Energy Consumed
                        cost.push(parseFloat(cols[3])); // Cost
                    }
                });

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);
                
                const option = {
                    tooltip: {
                        trigger: 'item',
                        formatter: function (params) {
                            return `Energy Consumed: ${params.data[0]}<br/>Cost: ${params.data[1]}`;
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Energy Consumed',
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Cost',
                    },
                    series: [{
                        symbolSize: 10,
                        data: energyConsumed.map((ec, index) => [ec, cost[index]]),
                        type: 'scatter'
                    }]
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,445,446
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot that visualizes the relationship between Energy Consumed and Cost. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Scatterplot</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 600px;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const energyData = rows.map(row => {
                    const cols = row.split(',');
                    return {
                        EnergyConsumed: parseFloat(cols[2]),
                        Cost: parseFloat(cols[3]),
                    };
                }).filter(d => !isNaN(d.EnergyConsumed) && !isNaN(d.Cost));

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);
                const option = {
                    title: {
                        text: 'Energy Consumed vs Cost',
                    },
                    tooltip: {},
                    xAxis: {
                        name: 'Energy Consumed',
                    },
                    yAxis: {
                        name: 'Cost',
                    },
                    series: [{
                        type: 'scatter',
                        symbolSize: 10,
                        data: energyData.map(d => [d.EnergyConsumed, d.Cost]),
                        itemStyle: {
                            color: '#5470c6',
                        },
                    }],
                    brush: {
                        type: ['scatter'],
                    },
                };

                myChart.setOption(option);

                myChart.on('brushSelected', function (params) {
                    const selectedData = [];
                    const brushInfo = params.batch[0];

                    for (const selected of brushInfo.selected) {
                        const indices = selected.dataIndex;
                        for (let i = 0; i < indices.length; i++) {
                            const idx = indices[i];
                            selectedData.push(energyData[idx]);
                        }
                    }

                    console.log('Selected Data Points:', selectedData);
                });
            });
    </script>
</body>
</html>
```",Correct,446,447
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot that visualizes the relationship between Energy Consumed and Cost. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Scatterplot</title>
    <!-- Import ECharts -->
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
</head>
<body>
    <div id=""scatterChart"" style=""width: 100%; height: 600px;""></div>
    <script>
        // Fetching the data from the provided CSV URL
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1); // Skip the header
                const energyConsumed = [];
                const cost = [];

                rows.forEach(row => {
                    const columns = row.split(',');
                    if (columns.length > 0) {
                        energyConsumed.push(parseFloat(columns[2])); // Energy Consumed
                        cost.push(parseFloat(columns[3])); // Cost
                    }
                });

                // Initialize ECharts
                const scatterChart = echarts.init(document.getElementById('scatterChart'));

                // Option configuration
                const option = {
                    title: {
                        text: 'Energy Consumed vs Cost'
                    },
                    tooltip: {
                        formatter: function (params) {
                            return `Energy Consumed: ${params.data[0]}<br>Cost: ${params.data[1]}`;
                        }
                    },
                    xAxis: {
                        name: 'Energy Consumed',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Cost',
                        type: 'value'
                    },
                    series: [{
                        type: 'scatter',
                        symbolSize: 10,
                        data: energyConsumed.map((ec, index) => [ec, cost[index]])
                    }]
                };

                // Set the options
                scatterChart.setOption(option);

                // Enable zooming via mouse wheel
                scatterChart.on('dataZoom', function () {
                    scatterChart.setOption({
                        // Optional: can configure data zoom areas if needed
                    });
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,447,448
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Energy Consumed and Cost. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const energyData = rows.map(row => {
                    const cols = row.split(',');
                    return {
                        month: cols[0],
                        sector: cols[1],
                        energyConsumed: parseFloat(cols[2]),
                        cost: parseFloat(cols[3]),
                        emissions: parseFloat(cols[4]),
                        numberOfPlants: parseInt(cols[5]),
                        revenue: parseFloat(cols[6]),
                        renewable: cols[7],
                        region: cols[8]
                    };
                }).filter(d => !isNaN(d.energyConsumed) && !isNaN(d.cost));

                const chartData = energyData.map(item => [item.energyConsumed, item.cost, item.region, item.month]);

                const myChart = echarts.init(document.getElementById('main'));
                myChart.setOption({
                    tooltip: {
                        trigger: 'item',
                        formatter: function (params) {
                            return `Month: ${params.data[3]}<br>
                                    Energy Consumed: ${params.data[0]}<br>
                                    Cost: ${params.data[1]}<br>
                                    <a href=""https://www.google.com/search?q=${params.data[2]} Energy Consumption"" target=""_blank"">Google Search</a>`;
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Energy Consumed'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Cost'
                    },
                    series: [{
                        type: 'scatter',
                        data: chartData,
                        encode: {
                            x: 0,
                            y: 1,
                            tooltip: [0, 1, 2, 3]
                        }
                    }]
                });

                myChart.on('click', function (params) {
                    if (params.componentType === 'series') {
                        window.open(`https://www.google.com/search?q=${params.data[2]} Energy Consumption`, '_blank');
                    }
                });
            });
    </script>
</body>
</html>
```",Correct,448,449
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot with query widgets showing the Energy Consumed and Cost of the given dataset. Add a slider to represent the Month.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Scatterplot</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
    <style>
        #main {
            width: 800px;
            height: 600px;
            margin: 0 auto;
        }
        #month-slider {
            width: 300px;
            margin: 30px auto;
        }
    </style>
</head>
<body>
    <div id=""month-slider""></div>
    <div id=""main""></div>
    <script>
        const url = 'https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv';

        fetch(url)
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const energyData = rows.map(row => {
                    const cols = row.split(',');
                    return {
                        Month: cols[0],
                        EnergyConsumed: parseFloat(cols[2]),
                        Cost: parseFloat(cols[3])
                    };
                }).filter(item => !isNaN(item.EnergyConsumed) && !isNaN(item.Cost));

                const months = [...new Set(energyData.map(item => item.Month))];
                let selectedMonth = months[0];

                const drawChart = month => {
                    const filteredData = energyData.filter(item => item.Month === month);
                    const option = {
                        title: { text: 'Energy Consumed vs Cost' },
                        tooltip: {},
                        xAxis: {
                            name: 'Energy Consumed',
                            type: 'value'
                        },
                        yAxis: {
                            name: 'Cost',
                            type: 'value'
                        },
                        series: [{
                            symbolSize: 10,
                            data: filteredData.map(item => [item.EnergyConsumed, item.Cost]),
                            type: 'scatter'
                        }]
                    };
                    const chart = echarts.init(document.getElementById('main'));
                    chart.setOption(option);
                };

                drawChart(selectedMonth);

                const slider = document.getElementById('month-slider');
                slider.innerHTML = `<input type=""range"" min=""0"" max=""${months.length - 1}"" value=""0"" id=""monthRange"">`;
                const monthRange = document.getElementById('monthRange');

                monthRange.addEventListener('input', function() {
                    selectedMonth = months[this.value];
                    drawChart(selectedMonth);
                });
            });
    </script>
</body>
</html>
```",Correct,449,450
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot showing the Energy Consumed of Industrial. Add animated transitions that connect these points using lines in order.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Energy Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        // Fetching the data
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1); // Skip header row
                const points = [];

                rows.forEach(row => {
                    const columns = row.split(',');
                    if (columns[1] === 'Industrial') {
                        points.push({
                            month: columns[0],
                            energyConsumed: parseFloat(columns[2]),
                            revenue: parseFloat(columns[6])
                        });
                    }
                });

                // Scatterplot configuration
                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);

                myChart.setOption({
                    title: {
                        text: 'Energy Consumption of Industrial Sector'
                    },
                    xAxis: {
                        type: 'category',
                        data: points.map(point => point.month)
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Energy Consumed (units)'
                    },
                    series: [{
                        type: 'scatter',
                        data: points.map(point => [point.month, point.energyConsumed]),
                        animation: true,
                        lineStyle: {
                            normal: {
                                width: 2,
                                type: 'solid'
                            }
                        },
                        emphasis: {
                            label: {
                                show: true,
                                formatter: function(params) {
                                    return `${params.value[0]}: ${params.value[1]} units`;
                                }
                            }
                        },
                        smooth: true
                    }]
                });

                // Add animated transition
                myChart.on('finished', function() {
                    myChart.setOption({
                        series: [{
                            type: 'line',
                            data: points.map(point => [point.month, point.energyConsumed]),
                            smooth: true
                        }]
                    });
                });
            });
    </script>
</body>
</html>
```",Initialization Error,450,451
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Energy Consumed of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Multi-Series Line Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).filter(row => row);
                const monthSet = new Set();
                const seriesData = {};
                
                rows.forEach(row => {
                    const columns = row.split(',');
                    const month = columns[0].trim();
                    const energySector = columns[1].trim();
                    const energyConsumed = parseFloat(columns[2].trim());

                    monthSet.add(month);
                    if (!seriesData[energySector]) {
                        seriesData[energySector] = [];
                    }
                    seriesData[energySector].push(energyConsumed);
                });

                const months = Array.from(monthSet);

                const series = Object.keys(seriesData).map(sector => ({
                    name: sector,
                    type: 'line',
                    data: seriesData[sector],
                    smooth: true,
                    emphasis: {
                        lineStyle: {
                            width: 4
                        }
                    }
                }));

                const option = {
                    title: {
                        text: 'Energy Consumed by Sector'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    legend: {
                        data: Object.keys(seriesData)
                    },
                    xAxis: {
                        type: 'category',
                        data: months
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Energy Consumed (MWh)'
                    },
                    series: series
                };

                const myChart = echarts.init(document.getElementById('main'));
                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,451,452
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Bar Chart that visualizes the Energy Consumed for each Energy Sector in January. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Bar Chart</title>
    <script src=""https://cdn.rawgit.com/ecomfe/echarts/master/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const energyData = [];

                rows.forEach(row => {
                    const cols = row.split(',');
                    if (cols[0] === ""January"") {
                        energyData.push({
                            energySector: cols[1],
                            energyConsumed: parseFloat(cols[2])
                        });
                    }
                });

                const sectors = energyData.map(item => item.energySector);
                const consumedValues = energyData.map(item => item.energyConsumed);

                const chartDom = document.getElementById('chart');
                const myChart = echarts.init(chartDom);
                const option = {
                    title: {
                        text: 'Energy Consumption by Sector in January'
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: sectors
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        name: 'Energy Consumed',
                        type: 'bar',
                        data: consumedValues
                    }],
                    dataZoom: [
                        {
                            type: 'inside'
                        },
                        {
                            type: 'slider'
                        }
                    ],
                    grid: {
                        bottom: '20%'
                    }
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Initialization Error,452,453
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Bar Chart that visualizes the Energy Consumed for each Energy Sector in January. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption by Sector in January</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #chart {
            width: 100%;
            height: 500px;
        }
    </style>
</head>
<body>
    <div id=""chart""></div>
    <script>
        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv');
            const data = await response.text();
            return data.split('\n').slice(1).map(row => {
                const [
                    month, energySector, energyConsumed, cost, emissions, numberOfPlants, revenue, renewable, region
                ] = row.split(',');
                return { month, energySector, energyConsumed: +energyConsumed, cost: +cost, emissions: +emissions, numberOfPlants: +numberOfPlants, revenue: +revenue, renewable, region };
            }).filter(item => item.month === 'January');
        }

        async function initChart() {
            const data = await fetchData();
            const sectors = data.map(item => item.energySector);
            const energyConsumed = data.map(item => item.energyConsumed);

            const chart = echarts.init(document.getElementById('chart'));

            const option = {
                title: {
                    text: 'Energy Consumed by Sector in January',
                },
                tooltip: {},
                xAxis: {
                    type: 'category',
                    data: sectors,
                    axisLabel: {
                        interval: 0,
                    },
                },
                yAxis: {
                    type: 'value',
                },
                series: [{
                    name: 'Energy Consumed',
                    type: 'bar',
                    data: energyConsumed,
                    draggable: true,
                }],
                graphic: {
                    type: 'text',
                    left: 'center',
                    top: 'center',
                    style: {
                        text: 'Drag and drop the bars to reorder them',
                        font: 'bold 20px Microsoft YaHei',
                        fill: '#aaa',
                    },
                },
            };

            chart.setOption(option);

            chart.on('dragend', (params) => {
                if (params.componentType === 'series') {
                    const newOrder = params.dataIndex;
                    console.log('New Order:', newOrder);
                    // Update data based on new order if desired
                }
            });

            window.addEventListener('resize', chart.resize);
        }

        initChart();
    </script>
</body>
</html>
```",Unexpected Execution Result,453,454
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Bar Chart that visualizes the Energy Consumed for each Energy Sector in January. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Energy Consumed.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <select id=""sortOrder"" onchange=""updateChart()"">
        <option value=""asc"">Sort Ascending</option>
        <option value=""desc"">Sort Descending</option>
    </select>
    <div id=""chart"" style=""width: 100%; height: 500px;""></div>

    <script>
        let chartDom = document.getElementById('chart');
        let myChart = echarts.init(chartDom);
        let energyData = [];

        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                rows.forEach(row => {
                    const cols = row.split(',');
                    if (cols[0] === 'January') {
                        energyData.push({
                            sector: cols[1],
                            consumed: parseFloat(cols[2])
                        });
                    }
                });
                updateChart();
            });

        function updateChart() {
            const sortOrder = document.getElementById('sortOrder').value;
            const sortedData = [...energyData].sort((a, b) => sortOrder === 'asc' ? a.consumed - b.consumed : b.consumed - a.consumed);
            const sectors = sortedData.map(d => d.sector);
            const consumed = sortedData.map(d => d.consumed);

            const option = {
                title: {
                    text: 'Energy Consumed by Sector in January',
                    subtext: 'Bar Chart with Sorting',
                    left: 'center'
                },
                xAxis: {
                    type: 'category',
                    data: sectors
                },
                yAxis: {
                    type: 'value'
                },
                series: [{
                    name: 'Energy Consumed',
                    type: 'bar',
                    data: consumed,
                    animationDuration: 1000,
                }],
                tooltip: {
                    trigger: 'axis',
                    axisPointer: {
                        type: 'shadow'
                    }
                }
            };

            myChart.setOption(option);
        }
    </script>
</body>
</html>
```",Correct,454,455
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot that visualizes the relationship between Energy Consumed and Cost. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.22.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.5.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script type=""text/javascript"">
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatter plot showing the relationship between Energy Consumed and Cost."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Energy Consumed"",
                    ""type"": ""quantitative"",
                    ""axis"": {""title"": ""Energy Consumed""}
                },
                ""y"": {
                    ""field"": ""Cost"",
                    ""type"": ""quantitative"",
                    ""axis"": {""title"": ""Cost""}
                },
                ""tooltip"": [
                    {""field"": ""Energy Consumed"", ""type"": ""quantitative""},
                    {""field"": ""Cost"", ""type"": ""quantitative""},
                    {""field"": ""Emissions"", ""type"": ""quantitative""},
                    {""field"": ""Revenue"", ""type"": ""quantitative""}
                ]
            },
            ""config"": {
                ""mark"": {
                    ""tooltip"": true
                }
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            console.log(result);
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,455,456
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot that visualizes the relationship between Energy Consumed and Cost. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.22.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.9.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2""></script>
    <title>Energy Consumption Scatterplot</title>
</head>
<body>
    <div id=""vis""></div>
    <script type=""text/javascript"">
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatter plot showing the relationship between Energy Consumed and Cost."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Energy Consumed"", 
                    ""type"": "" quantitative"", 
                    ""title"": ""Energy Consumed""
                },
                ""y"": {
                    ""field"": ""Cost"", 
                    ""type"": ""quantitative"", 
                    ""title"": ""Cost""
                },
                ""tooltip"": [
                    {""field"": ""Energy Consumed"", ""type"": ""quantitative""},
                    {""field"": ""Cost"", ""type"": ""quantitative""},
                    {""field"": ""Month"", ""type"": ""temporal""},
                    {""field"": ""Energy Sector"", ""type"": ""nominal""}
                ]
            },
            ""selection"": {
                ""brush"": {
                    ""type"": ""interval"", 
                    ""encodings"": [""x"", ""y""]
                }
            },
            ""layer"": [
                {
                    ""mark"": ""point"",
                    ""encoding"": {
                        ""opacity"": {
                            ""condition"": {
                                ""selection"": ""brush"",
                                ""value"": 1
                            },
                            ""value"": 0.2
                        },
                        ""color"": {
                            ""condition"": {
                                ""selection"": ""brush"",
                                ""field"": ""Energy Sector"",
                                ""type"": ""nominal""
                            },
                            ""value"": ""grey""
                        }
                    }
                },
                {
                    ""mark"": ""rect"",
                    ""encode"": {
                        ""enter"": {
                            ""fill"": { ""value"": ""lightgrey"" },
                            ""fillOpacity"": { ""value"": 0.5 }
                        },
                        ""update"": {
                            ""x"": { ""selection"": ""brush"", ""field"": ""Energy Consumed"" },
                            ""y"": { ""selection"": ""brush"", ""field"": ""Cost"" },
                            ""x2"": { ""selection"": ""brush"", ""field"": ""Energy Consumed"" },
                            ""y2"": { ""selection"": ""brush"", ""field"": ""Cost"" }
                        }
                    }
                }
            ]
        };

        vegaEmbed('#vis', spec)
            .then(result => console.log('Visualization rendered'))
            .catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,456,457
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot that visualizes the relationship between Energy Consumed and Cost. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm.vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm.vega-lite@5.7.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""title"": ""Relationship between Energy Consumed and Cost"",
            ""description"": ""A scatterplot showing the relationship between energy consumed and cost."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Energy Consumed"",
                    ""type"": ""quantitative"",
                    ""title"": ""Energy Consumed""
                },
                ""y"": {
                    ""field"": ""Cost"",
                    ""type"": ""quantitative"",
                    ""title"": ""Cost""
                },
                ""tooltip"": [
                    {""field"": ""Energy Consumed"", ""type"": ""quantitative""},
                    {""field"": ""Cost"", ""type"": ""quantitative""},
                    {""field"": ""Energy Sector"", ""type"": ""nominal""}
                ]
            },
            ""config"": {
                ""view"": {
                    ""continuousWidth"": 500,
                    ""continuousHeight"": 300,
                    ""zoom"": true
                }
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            // Access the Vega view instance
            const view = result.view;

            // Set mouse wheel zoom capability
            view.addSignalListener('zoom', function(name, value) {
                view.zoom(value);
            });
        }).catch(console.warn);
    </script>
</body>
</html>
```",Initialization Error,457,458
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Energy Consumed and Cost. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <title>Energy Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatterplot showing the relationship between Energy Consumed and Cost."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Energy Consumed"",
                    ""type"": ""quantitative"",
                    ""axis"": {
                        ""title"": ""Energy Consumed""
                    }
                },
                ""y"": {
                    ""field"": ""Cost"",
                    ""type"": ""quantitative"",
                    ""axis"": {
                        ""title"": ""Cost""
                    }
                },
                ""tooltip"": [
                    {""field"": ""Energy Sector"", ""type"": ""nominal""},
                    {""field"": ""Emissions"", ""type"": ""quantitative""},
                    {""field"": ""Number of Plants"", ""type"": ""quantitative""},
                    {""field"": ""Revenue"", ""type"": ""quantitative""},
                    {""field"": ""Renewable"", ""type"": ""nominal""},
                    {""field"": ""Region"", ""type"": ""nominal""}
                ]
            },
            ""selection"": {
                ""point"": {
                    ""type"": ""single"",
                    ""fields"": [""Energy Consumed"", ""Cost""],
                    ""on"": ""click"",
                    ""empty"": ""none""
                }
            },
            ""config"": {
                ""mark"": {
                    ""tooltip"": false
                }
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            result.view.addEventListener('click', function(event, item) {
                if (item && item.datum) {
                    const query = `${item.datum[""Energy Sector""]} Energy Consumption`;
                    window.open(`https://www.google.com/search?q=${encodeURIComponent(query)}`, '_blank');
                }
            });
        }).catch(console.error);
    </script>
</body>
</html>
```",Correct,458,459
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot with query widgets showing the Energy Consumed and Cost of the given dataset. Add a slider to represent the Month.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.22.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.8.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.23.0""></script>
    <style>
        #vis {
            width: 100%;
            height: 500px;
        }
    </style>
</head>
<body>

<div id=""vis""></div>

<script type=""text/javascript"">
    const spec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""title"": ""Energy Consumption vs Cost"",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
            ""format"": {""type"": ""csv""}
        },
        ""transform"": [
            {""filter"": ""datum.Month >= 1 && datum.Month <= 12""}
        ],
        ""params"": [
            {
                ""name"": ""month_slider"",
                ""value"": 1,
                ""bind"": {
                    ""input"": ""range"",
                    ""min"": 1,
                    ""max"": 12,
                    ""step"": 1
                }
            }
        ],
        ""mark"": ""point"",
        ""encoding"": {
            ""x"": {""field"": ""Energy Consumed"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Cost"", ""type"": ""quantitative""},
            ""color"": {""field"": ""Region"", ""type"": ""nominal""},
            ""tooltip"": [
                {""field"": ""Energy Consumed"", ""type"": ""quantitative""},
                {""field"": ""Cost"", ""type"": ""quantitative""},
                {""field"": ""Region"", ""type"": ""nominal""}
            ]
        }
    };

    vegaEmbed('#vis', spec).then(result => {
        result.view.addSignalListener('month_slider', function(name, value) {
            result.view.transform('filter', {
                type: 'filter',
                expr: 'datum.Month == ' + value
            }).run();
        });
    }).catch(console.error);
</script>

</body>
</html>
```",Unexpected Execution Result,459,460
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot showing the Energy Consumed of Industrial. Add animated transitions that connect these points using lines in order.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.8.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.22.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script type=""text/javascript"">
        var spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""field"": ""Energy Sector"",
                        ""equal"": ""Industrial""
                    }
                },
                {
                    ""sort"": {
                        ""field"": ""Month"",
                        ""order"": ""ascending""
                    }
                },
                {
                    ""calculate"": ""datum.Month + ' ' + datum['Energy Consumed']"",
                    ""as"": ""Month_Energy""
                }
            ],
            ""mark"": ""circle"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Month"",
                    ""type"": ""ordinal"",
                    ""title"": ""Month""
                },
                ""y"": {
                    ""field"": ""Energy Consumed"",
                    ""type"": ""quantitative"",
                    ""title"": ""Energy Consumed""
                },
                ""tooltip"": [
                    {""field"": ""Month"", ""title"": ""Month""},
                    {""field"": ""Energy Consumed"", ""title"": ""Energy Consumed""}
                ]
            },
            ""animation"": {
                ""duration"": 500,
                ""easing"": ""linear"",
                ""update"": {
                    ""type"": ""line""
                }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Unexpected Initial Result,460,461
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Energy Consumed of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Line Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>

<div id=""vis""></div>

<script>
    const spec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
            ""format"": {
                ""type"": ""csv""
            }
        },
        ""mark"": ""line"",
        ""encoding"": {
            ""x"": {
                ""field"": ""Month"",
                ""type"": ""temporal"",
                ""title"": ""Month""
            },
            ""y"": {
                ""field"": ""Energy Consumed"",
                ""type"": ""quantitative"",
                ""title"": ""Energy Consumed (units)""
            },
            ""color"": {
                ""field"": ""Energy Sector"",
                ""type"": ""nominal"",
                ""legend"": {
                    ""title"": ""Energy Sector""
                }
            },
            ""tooltip"": [
                {""field"": ""Energy Sector"", ""type"": ""nominal"", ""title"": ""Energy Sector""},
                {""field"": ""Energy Consumed"", ""type"": ""quantitative"", ""title"": ""Energy Consumed""},
                {""field"": ""Month"", ""type"": ""temporal"", ""title"": ""Month""}
            ]
        },
        ""config"": {
            ""mark"": {
                ""tooltip"": true,
                ""interpolate"": ""monotone""
            }
        }
    };

    vegaEmbed('#vis', spec, {renderer: ""svg""}).then(result => {
        const view = result.view;
        view.addEventListener('mousemove', (event) => {
            const item = view.tooltip(event);
            if (item) {
                view.highlight(item.mark.name);
            } else {
                view.clear();
            }
        });
    }).catch(console.error);
</script>

</body>
</html>
```",Initialization Error,461,462
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Bar Chart that visualizes the Energy Consumed for each Energy Sector in January. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.22.1""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.1.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
    <style>
        #vis {
            width: 100%;
            height: 500px;
        }
    </style>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A bar chart showing energy consumed by energy sector in January."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""field"": ""Month"",
                        ""equal"": ""January""
                    }
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Energy Sector"",
                    ""type"": ""ordinal"",
                    ""title"": ""Energy Sector""
                },
                ""y"": {
                    ""field"": ""Energy Consumed"",
                    ""type"": ""quantitative"",
                    ""title"": ""Energy Consumed""
                },
                ""tooltip"": [
                    {""field"": ""Energy Sector"", ""title"": ""Energy Sector""},
                    {""field"": ""Energy Consumed"", ""title"": ""Energy Consumed""}
                ]
            },
            ""config"": {
                ""view"": {
                    ""stroke"": ""transparent""
                }
            }
        };

        vegaEmbed('#vis', spec, { actions: false }).then(function (result) {
            const view = result.view;
            view.addEventListener('wheel', (event) => {
                event.preventDefault();
                const zoomFactor = event.deltaY > 0 ? 0.9 : 1.1;
                view.scale('x', view.scale('x').scaleValue(zoomFactor));
                view.scale('y', view.scale('y').scaleValue(zoomFactor));
                view.run();
            });

            let isDragging = false;
            let startX, startY;
            view.addEventListener('mousedown', (event) => {
                isDragging = true;
                startX = event.clientX;
                startY = event.clientY;
            });

            view.addEventListener('mousemove', (event) => {
                if (isDragging) {
                    const dx = event.clientX - startX;
                    const dy = event.clientY - startY;
                    view.xpan(dx);
                    view.ypan(dy);
                    startX = event.clientX;
                    startY = event.clientY;
                    view.run();
                }
            });

            view.addEventListener('mouseup', () => {
                isDragging = false;
            });

            view.addEventListener('mouseleave', () => {
                isDragging = false;
            });
        }).catch(console.error);
    </script>
</body>
</html>
```",Execution Error,462,463
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Bar Chart that visualizes the Energy Consumed for each Energy Sector in January. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.22.1""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.7.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.1""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A bar chart showing Energy Consumed for each Energy Sector in January."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Month === 'January'""
                },
                {
                    ""calculate"": ""datum['Energy Consumed']"",
                    ""as"": ""EnergyConsumed""
                },
                {
                    ""window"": [
                        {
                            ""op"": ""rank"",
                            ""as"": ""rank""
                        }
                    ],
                    ""sort"": [
                        {
                            ""field"": ""EnergyConsumed"",
                            ""order"": ""descending""
                        }
                    ]
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""EnergyConsumed"",
                    ""type"": ""quantitative"",
                    ""title"": ""Energy Consumed""
                },
                ""y"": {
                    ""field"": ""Energy Sector"",
                    ""type"": ""ordinal"",
                    ""title"": ""Energy Sector""
                },
                ""color"": {
                    ""field"": ""Energy Sector"",
                    ""type"": ""nominal""
                }
            },
            ""resolve"": {
                ""scale"": {
                    ""y"": ""independent""
                }
            },
            ""draggable"": true
        };

        vegaEmbed('#vis', spec)
            .then(function(result) {
                // Embed has been successfully created
            })
            .catch(console.error);
    </script>
</body>
</html>
```",Unexpected Execution Result,463,464
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Bar Chart that visualizes the Energy Consumed for each Energy Sector in January. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Energy Consumed.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A bar chart showing Energy Consumed in January by Energy Sector."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Month === 'January'""
                },
                {
                    ""calculate"": ""datum.Energy_Consumed"",
                    ""as"": ""EnergyCons""
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Energy Sector"",
                    ""type"": ""ordinal"",
                    ""axis"": {
                        ""labelAngle"": -45
                    }
                },
                ""y"": {
                    ""field"": ""EnergyCons"",
                    ""type"": ""quantitative"",
                    ""title"": ""Energy Consumed""
                },
                ""color"": {
                    ""field"": ""Energy Sector"",
                    ""type"": ""nominal""
                }
            },
            ""layer"": [
                {
                    ""mark"": {
                        ""type"": ""bar"",
                        ""tooltip"": true,
                        ""animate"": {
                            ""duration"": 500,
                            ""easing"": ""linear""
                        }
                    },
                    ""encoding"": {
                        ""y"": {
                            ""field"": ""Energy Consumed"",
                            ""type"": ""quantitative""
                        }
                    }
                }
            ],
            ""resolve"": {
                ""scale"": {
                    ""y"": ""independent""
                }
            }
        };

        vegaEmbed('#vis', spec, {renderer: 'svg'}).then(function(result) {
            // Adding sorting functionality
            const sortDropdown = document.createElement('select');
            const options = [
                { value: 'ascending', label: 'Ascending' },
                { value: 'descending', label: 'Descending' }
            ];

            options.forEach(option => {
                const opt = document.createElement('option');
                opt.value = option.value;
                opt.innerHTML = option.label;
                sortDropdown.appendChild(opt);
            });

            sortDropdown.onchange = function() {
                spec.encoding.y.sort = { field: ""EnergyCons"", order: sortDropdown.value };
                vegaEmbed('#vis', spec, {renderer: 'svg'});
            };

            document.body.insertBefore(sortDropdown, document.getElementById('vis'));
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,464,465
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Energy Consumed and Cost, and a Bar Chart on the right that displays Energy Sector versus Energy Consumed.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Visualization</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        body {
            display: flex;
            justify-content: space-between;
        }
        svg {
            border: 1px solid black;
            margin: 10px;
        }
    </style>
</head>
<body>
    <div id=""scatterplot""></div>
    <div id=""barchart""></div>
    <script>
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"")
            .then(data => {
                data.forEach(d => {
                    d['Energy Consumed'] = +d['Energy Consumed'];
                    d['Cost'] = +d['Cost'];
                });

                const scatterMargin = { top: 20, right: 30, bottom: 30, left: 40 };
                const scatterWidth = 400 - scatterMargin.left - scatterMargin.right;
                const scatterHeight = 300 - scatterMargin.top - scatterMargin.bottom;

                const scatterSvg = d3.select(""#scatterplot"")
                    .append(""svg"")
                    .attr(""width"", scatterWidth + scatterMargin.left + scatterMargin.right)
                    .attr(""height"", scatterHeight + scatterMargin.top + scatterMargin.bottom)
                    .append(""g"")
                    .attr(""transform"", `translate(${scatterMargin.left},${scatterMargin.top})`);

                const x = d3.scaleLinear()
                    .domain(d3.extent(data, d => d['Energy Consumed'])).nice()
                    .range([0, scatterWidth]);

                const y = d3.scaleLinear()
                    .domain(d3.extent(data, d => d['Cost'])).nice()
                    .range([scatterHeight, 0]);

                scatterSvg.append(""g"")
                    .attr(""class"", ""x-axis"")
                    .attr(""transform"", `translate(0,${scatterHeight})`)
                    .call(d3.axisBottom(x));

                scatterSvg.append(""g"")
                    .attr(""class"", ""y-axis"")
                    .call(d3.axisLeft(y));

                scatterSvg.selectAll(""circle"")
                    .data(data)
                    .enter().append(""circle"")
                    .attr(""cx"", d => x(d['Energy Consumed']))
                    .attr(""cy"", d => y(d['Cost']))
                    .attr(""r"", 5)
                    .attr(""fill"", ""#69b3a2"");

                // Bar Chart
                const barMargin = { top: 20, right: 30, bottom: 30, left: 40 };
                const barWidth = 400 - barMargin.left - barMargin.right;
                const barHeight = 300 - barMargin.top - barMargin.bottom;

                const barSvg = d3.select(""#barchart"")
                    .append(""svg"")
                    .attr(""width"", barWidth + barMargin.left + barMargin.right)
                    .attr(""height"", barHeight + barMargin.top + barMargin.bottom)
                    .append(""g"")
                    .attr(""transform"", `translate(${barMargin.left},${barMargin.top})`);

                const energyConsumedBySector = d3.rollup(data, 
                    v => d3.sum(v, d => d['Energy Consumed']), 
                    d => d['Energy Sector']
                );

                const xBar = d3.scaleBand()
                    .domain(Array.from(energyConsumedBySector.keys()))
                    .range([0, barWidth])
                    .padding(0.1);

                const yBar = d3.scaleLinear()
                    .domain([0, d3.max(Array.from(energyConsumedBySector.values()))]).nice()
                    .range([barHeight, 0]);

                barSvg.append(""g"")
                    .attr(""class"", ""x-axis"")
                    .attr(""transform"", `translate(0,${barHeight})`)
                    .call(d3.axisBottom(xBar));

                barSvg.append(""g"")
                    .attr(""class"", ""y-axis"")
                    .call(d3.axisLeft(yBar));

                barSvg.selectAll("".bar"")
                    .data(Array.from(energyConsumedBySector.entries()))
                    .enter().append(""rect"")
                    .attr(""class"", ""bar"")
                    .attr(""x"", d => xBar(d[0]))
                    .attr(""y"", d => yBar(d[1]))
                    .attr(""width"", xBar.bandwidth())
                    .attr(""height"", d => barHeight - yBar(d[1]))
                    .attr(""fill"", ""#ff6f61"");
            });
    </script>
</body>
</html>
```",Correct,465,466
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Energy Consumed and Cost, and a Bar Chart on the right that displays Energy Sector versus Energy Consumed. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Analysis</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .scatter {
            display: inline-block;
            margin-right: 50px;
        }

        .bar {
            display: inline-block;
        }

        .highlight {
            opacity: 1;
        }

        .unhighlight {
            opacity: 0.2;
        }

        .axis {
            font: 12px sans-serif;
        }

        .axis line,
        .axis path {
            fill: none;
            shape-rendering: crispEdges;
        }
        
        .brush .selection {
            fill: #ccc;
            stroke: #666;
        }
    </style>
</head>
<body>
    <div class=""scatter"" id=""scatterplot""></div>
    <div class=""bar"" id=""barchart""></div>

    <script>
        const svgWidth = 600, svgHeight = 400;
        const margin = { top: 20, right: 30, bottom: 30, left: 40 };

        const scatterSvg = d3.select(""#scatterplot"").append(""svg"")
            .attr(""width"", svgWidth)
            .attr(""height"", svgHeight);
        
        const barSvg = d3.select(""#barchart"").append(""svg"")
            .attr(""width"", svgWidth)
            .attr(""height"", svgHeight);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"").then(data => {
            data.forEach(d => {
                d['Energy Consumed'] = +d['Energy Consumed'];
                d['Cost'] = +d['Cost'];
            });

            const xScaleScatter = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Energy Consumed'])])
                .range([margin.left, svgWidth - margin.right]);
            
            const yScaleScatter = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Cost'])])
                .range([svgHeight - margin.bottom, margin.top]);

            const xScaleBar = d3.scaleBand()
                .domain(data.map(d => d['Energy Sector']))
                .range([margin.left, svgWidth - margin.right])
                .padding(0.1);
            
            const yScaleBar = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Energy Consumed'])])
                .range([svgHeight - margin.bottom, margin.top]);

            scatterSvg.append(""g"")
                .attr(""class"", ""x-axis axis"")
                .attr(""transform"", `translate(0,${svgHeight - margin.bottom})`)
                .call(d3.axisBottom(xScaleScatter));
            
            scatterSvg.append(""g"")
                .attr(""class"", ""y-axis axis"")
                .attr(""transform"", `translate(${margin.left},0)`)
                .call(d3.axisLeft(yScaleScatter));

            const scatter = scatterSvg.append(""g"");

            const dots = scatter.selectAll(""circle"")
                .data(data)
                .enter()
                .append(""circle"")
                .attr(""cx"", d => xScaleScatter(d['Energy Consumed']))
                .attr(""cy"", d => yScaleScatter(d['Cost']))
                .attr(""r"", 5)
                .attr(""fill"", ""blue"");

            const bars = barSvg.selectAll(""rect"")
                .data(data)
                .enter()
                .append(""rect"")
                .attr(""x"", d => xScaleBar(d['Energy Sector']))
                .attr(""y"", d => yScaleBar(d['Energy Consumed']))
                .attr(""width"", xScaleBar.bandwidth())
                .attr(""height"", d => svgHeight - margin.bottom - yScaleBar(d['Energy Consumed']))
                .attr(""fill"", ""orange"");

            const brush = d3.brushX()
                .extent([[margin.left, margin.top], [svgWidth - margin.right, svgHeight - margin.bottom]])
                .on(""brush end"", brushed);

            scatterSvg.append(""g"")
                .attr(""class"", ""brush"")
                .call(brush);

            function brushed(event) {
                if (!event.selection) {
                    dots.classed(""highlight unhighlight"", false);
                    bars.classed(""highlight unhighlight"", false);
                    return;
                }
                const [x0, x1] = event.selection;

                const selectedData = data.filter(d => {
                    const xValue = xScaleScatter(d['Energy Consumed']);
                    return xValue >= x0 && xValue <= x1;
                });

                dots.classed(""highlight unhighlight"", d => selectedData.includes(d));
                bars.classed(""highlight unhighlight"", d => !selectedData.includes(d));
            }
        });
    </script>
</body>
</html>
```",Correct,466,467
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Energy Consumed , while the pie chart represents the distribution of Cost.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Visualization</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke-width: 2px;
        }
        .arc {
            stroke: #fff;
            stroke-width: 1.5px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <svg width=""400"" height=""400""></svg>

    <script>
        const lineChartSvg = d3.select(""svg:nth-of-type(1)"");
        const pieChartSvg = d3.select(""svg:last-of-type"");

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"").then(data => {
            // Parse data
            data.forEach(d => {
                d[""Energy Consumed""] = +d[""Energy Consumed""];
                d[""Cost""] = +d[""Cost""];
                d.Month = new Date(d.Month + ' 1'); // Convert month to date object
            });

            drawLineChart(data);
            drawPieChart(data);
        });

        function drawLineChart(data) {
            const margin = {top: 20, right: 30, bottom: 30, left: 40};
            const width = +lineChartSvg.attr(""width"") - margin.left - margin.right;
            const height = +lineChartSvg.attr(""height"") - margin.top - margin.bottom;
            const g = lineChartSvg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

            const x = d3.scaleTime()
                .domain(d3.extent(data, d => d.Month))
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Energy Consumed""])])
                .range([height, 0]);

            const line = d3.line()
                .x(d => x(d.Month))
                .y(d => y(d[""Energy Consumed""]));

            g.append(""path"")
                .datum(data)
                .attr(""fill"", ""none"")
                .attr(""stroke"", ""steelblue"")
                .attr(""class"", ""line"")
                .attr(""d"", line);

            g.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .call(d3.axisLeft(y));
        }

        function drawPieChart(data) {
            const margin = {top: 20, right: 20, bottom: 20, left: 20};
            const width = +pieChartSvg.attr(""width"") - margin.left - margin.right;
            const height = +pieChartSvg.attr(""height"") - margin.top - margin.bottom;
            const radius = Math.min(width, height) / 2;

            const g = pieChartSvg.append(""g"")
                .attr(""transform"", `translate(${width / 2},${height / 2})`);

            const pie = d3.pie().value(d => d[""Cost""]);
            const arc = d3.arc().innerRadius(0).outerRadius(radius);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const arcData = pie(data);

            g.selectAll("".arc"")
                .data(arcData)
                .enter().append(""path"")
                .attr(""class"", ""arc"")
                .attr(""d"", arc)
                .attr(""fill"", (d, i) => color(i));
        }
    </script>
</body>
</html>
```",Correct,467,468
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Energy Consumed , while the pie chart represents the distribution of Cost. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Cost for the selected group.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Visualization</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .chart {
            display: inline-block;
            margin: 10px;
        }
        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 1.5px;
        }
        .arc {
            stroke: #fff;
        }
    </style>
</head>
<body>

<div class=""chart"" id=""line-chart""></div>
<div class=""chart"" id=""pie-chart""></div>

<script>
    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"").then(function(data) {
        data.forEach(d => {
            d[""Energy Consumed""] = +d[""Energy Consumed""];
            d[""Cost""] = +d[""Cost""];
        });

        const margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = 800 - margin.left - margin.right,
              height = 400 - margin.top - margin.bottom;

        const svgLine = d3.select(""#line-chart"").append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
          .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scalePoint()
            .domain(data.map(d => d.Month))
            .range([0, width])
            .padding(0.5);

        const y = d3.scaleLinear()
            .domain([0, d3.max(data, d => d[""Energy Consumed""])])
            .nice()
            .range([height, 0]);

        svgLine.append(""g"")
            .attr(""class"", ""axis x-axis"")
            .attr(""transform"", `translate(0,${height})`)
            .call(d3.axisBottom(x));

        svgLine.append(""g"")
            .attr(""class"", ""axis y-axis"")
            .call(d3.axisLeft(y));

        const line = d3.line()
            .x(d => x(d.Month))
            .y(d => y(d[""Energy Consumed""]));

        svgLine.append(""path"")
            .datum(data)
            .attr(""class"", ""line"")
            .attr(""d"", line);

        const brush = d3.brushX()
            .extent([[0, 0], [width, height]])
            .on(""brush end"", brushed);

        svgLine.append(""g"")
            .attr(""class"", ""brush"")
            .call(brush);

        function brushed(event) {
            const selection = event.selection;
            if (selection) {
                const [x0, x1] = selection.map(x.invert);
                const selectedData = data.filter(d => x0 <= d.Month && d.Month <= x1);
                updatePieChart(selectedData);
            }
        }

        const svgPie = d3.select(""#pie-chart"").append(""svg"")
            .attr(""width"", width)
            .attr(""height"", height)
          .append(""g"")
            .attr(""transform"", `translate(${width/2},${height/2})`);

        const radius = Math.min(width, height) / 2 - 10;

        function updatePieChart(selectedData) {
            const pie = d3.pie().value(d => d[""Cost""]);
            const arc = d3.arc().innerRadius(0).outerRadius(radius);

            svgPie.selectAll(""*"").remove();

            const dataReady = pie(selectedData);

            svgPie.selectAll('path')
                .data(dataReady)
                .enter()
                .append('path')
                .attr('d', arc)
                .attr('class', 'arc')
                .attr('fill', (d, i) => d3.schemeCategory10[i % 10]);
        }

        updatePieChart(data); // Initialize with all data
    });
</script>

</body>
</html>
```",Unexpected Execution Result,468,469
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Energy Consumed, Revenue, Cost, Emissions, and Renewable. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot Matrix</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatterplot {
            display: inline-block;
            width: 200px;
            height: 200px;
            margin: 10px;
        }
        .brush .extent {
            fill: steelblue;
            opacity: 0.5;
        }
        .highlight {
            fill: orange !important;
        }
    </style>
</head>
<body>
    <div id=""scatterplotMatrix""></div>
    <script>
        const width = 200, height = 200, padding = 20;
        const variables = [""Energy Consumed"", ""Revenue"", ""Cost"", ""Emissions"", ""Renewable""];
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"").then(data => {
            const parsedData = data.map(d => ({
                ""Energy Consumed"": +d[""Energy Consumed""],
                ""Revenue"": +d[""Revenue""],
                ""Cost"": +d[""Cost""],
                ""Emissions"": +d[""Emissions""],
                ""Renewable"": +d[""Renewable""]
            }));

            const svg = d3.select(""#scatterplotMatrix"").selectAll(""svg"")
                .data(variables)
                .enter().append(""svg"")
                .attr(""class"", ""scatterplot"")
                .attr(""width"", width * variables.length)
                .attr(""height"", height * variables.length);

            variables.forEach((xVar, i) => {
                variables.forEach((yVar, j) => {
                    const g = svg.append(""g"")
                        .attr(""transform"", `translate(${i * width}, ${j * height})`);

                    const xScale = d3.scaleLinear()
                        .domain(d3.extent(parsedData, d => d[xVar]))
                        .range([padding, width - padding]);

                    const yScale = d3.scaleLinear()
                        .domain(d3.extent(parsedData, d => d[yVar]))
                        .range([height - padding, padding]);

                    g.append(""g"")
                        .attr(""class"", ""x-axis"")
                        .attr(""transform"", `translate(0, ${height - padding})`)
                        .call(d3.axisBottom(xScale));

                    g.append(""g"")
                        .attr(""class"", ""y-axis"")
                        .attr(""transform"", `translate(${padding}, 0)`)
                        .call(d3.axisLeft(yScale));

                    const points = g.selectAll(""circle"")
                        .data(parsedData)
                        .enter().append(""circle"")
                        .attr(""cx"", d => xScale(d[xVar]))
                        .attr(""cy"", d => yScale(d[yVar]))
                        .attr(""r"", 3)
                        .style(""fill"", ""steelblue"");

                    const brush = d3.brush()
                        .extent([[0, 0], [width, height]])
                        .on(""brush end"", brushed);

                    g.append(""g"")
                        .attr(""class"", ""brush"")
                        .call(brush);

                    function brushed(event) {
                        const selection = event.selection;
                        if (selection) {
                            const [[x0, y0], [x1, y1]] = selection;
                            const brushedPoints = parsedData.filter(d => 
                                xScale(d[xVar]) >= x0 && xScale(d[xVar]) <= x1 &&
                                yScale(d[yVar]) >= y0 && yScale(d[yVar]) <= y1
                            );

                            svg.selectAll(""circle"")
                                .classed(""highlight"", d => brushedPoints.includes(d));
                        }
                    }
                });
            });
        });
    </script>
</body>
</html>
```",Correct,469,470
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a brushable Scatterplot that visualizes the relationship between Energy Consumed and Cost. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatterplot {
            display: inline-block;
        }
        .brush {
            stroke: #000;
            stroke-width: 1.5px;
            fill: none;
        }
        .table-container {
            display: inline-block;
            vertical-align: top;
            margin-left: 20px;
        }
        table {
            border-collapse: collapse;
            margin-top: 20px;
        }
        th, td {
            border: 1px solid black;
            padding: 5px;
        }
    </style>
</head>
<body>
    <div class=""scatterplot""></div>
    <div class=""table-container"">
        <table>
            <thead>
                <tr>
                    <th>Month</th>
                    <th>Energy Sector</th>
                    <th>Energy Consumed</th>
                    <th>Cost</th>
                    <th>Emissions</th>
                    <th>Number of Plants</th>
                    <th>Revenue</th>
                    <th>Renewable</th>
                    <th>Region</th>
                </tr>
            </thead>
            <tbody id=""table-body""></tbody>
        </table>
    </div>
    <script>
        const svgWidth = 800, svgHeight = 400;
        const margin = { top: 20, right: 30, bottom: 30, left: 40 };
        const width = svgWidth - margin.left - margin.right;
        const height = svgHeight - margin.top - margin.bottom;

        const svg = d3.select("".scatterplot"").append(""svg"")
            .attr(""width"", svgWidth)
            .attr(""height"", svgHeight);

        const g = svg.append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        const brush = d3.brush()
            .extent([[0, 0], [width, height]])
            .on(""brush end"", brushed);

        let data;

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"").then(loadedData => {
            data = loadedData.map(d => ({
                Month: d.Month,
                EnergySector: d[""Energy Sector""],
                EnergyConsumed: +d[""Energy Consumed""],
                Cost: +d.Cost,
                Emissions: +d.Emissions,
                NumberOfPlants: +d[""Number of Plants""],
                Revenue: +d.Revenue,
                Renewable: d.Renewable,
                Region: d.Region
            }));

            x.domain(d3.extent(data, d => d.EnergyConsumed)).nice();
            y.domain(d3.extent(data, d => d.Cost)).nice();

            g.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""y axis"")
                .call(d3.axisLeft(y));

            g.selectAll("".dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => x(d.EnergyConsumed))
                .attr(""cy"", d => y(d.Cost))
                .attr(""r"", 3.5)
                .style(""fill"", ""steelblue"");

            g.append(""g"")
                .attr(""class"", ""brush"")
                .call(brush);
        });

        function brushed(event) {
            const selection = d3.event.selection;
            if (selection) {
                const [[x0, y0], [x1, y1]] = selection;
                const selectedData = data.filter(d => 
                    x(d.EnergyConsumed) >= x0 && x(d.EnergyConsumed) <= x1 &&
                    y(d.Cost) >= y0 && y(d.Cost) <= y1
                );

                updateTable(selectedData.slice(0, 20));
            }
        }

        function updateTable(selectedRows) {
            const tbody = d3.select(""#table-body"");
            tbody.selectAll(""tr"").remove();
            
            const rows = tbody.selectAll(""tr"")
                .data(selectedRows)
                .enter().append(""tr"");

            rows.selectAll(""td"")
                .data(d => [d.Month, d.EnergySector, d.EnergyConsumed, d.Cost, d.Emissions, d.NumberOfPlants, d.Revenue, d.Renewable, d.Region])
                .enter().append(""td"")
                .text(d => d);
        }
    </script>
</body>
</html>
```",Correct,470,471
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a horizontal Bar Chart that shows all the data concerning Energy Consumed, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path {
            display: none;
        }
        .minimap {
            height: 100px;
            width: 250px;
            margin-left: 20px;
        }
    </style>
</head>
<body>

<svg id=""chart"" width=""600"" height=""400""></svg>
<svg id=""minimap"" class=""minimap"" width=""300"" height=""100""></svg>

<script>
    const margin = {top: 20, right: 30, bottom: 30, left: 100},
          width = +d3.select(""#chart"").attr(""width"") - margin.left - margin.right,
          height = +d3.select(""#chart"").attr(""height"") - margin.top - margin.bottom;

    const x = d3.scaleLinear().range([0, width]);
    const y = d3.scaleBand().range([height, 0]).padding(0.1);

    const svg = d3.select(""#chart"")
        .append(""g"")
        .attr(""transform"", `translate(${margin.left},${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"").then(data => {
        data.forEach(d => {
            d[""Energy Consumed""] = +d[""Energy Consumed""];
        });

        x.domain([0, d3.max(data, d => d[""Energy Consumed""])]);
        y.domain(data.map(d => d.Month));

        svg.append(""g"")
            .attr(""class"", ""axis axis--x"")
            .attr(""transform"", `translate(0,${height})`)
            .call(d3.axisBottom(x));

        svg.append(""g"")
            .attr(""class"", ""axis axis--y"")
            .call(d3.axisLeft(y));

        svg.selectAll("".bar"")
            .data(data)
            .enter().append(""rect"")
            .attr(""class"", ""bar"")
            .attr(""x"", 0)
            .attr(""y"", d => y(d.Month))
            .attr(""height"", y.bandwidth())
            .attr(""width"", d => x(d[""Energy Consumed""]));

        createMinimap(data);
    });

    function createMinimap(data) {
        const minimapMargin = {top: 10, right: 10, bottom: 10, left: 50},
              minimapWidth = +d3.select(""#minimap"").attr(""width"") - minimapMargin.left - minimapMargin.right,
              minimapHeight = +d3.select(""#minimap"").attr(""height"") - minimapMargin.top - minimapMargin.bottom;

        const minimapX = d3.scaleLinear().range([0, minimapWidth]);
        const minimapY = d3.scaleBand().range([minimapHeight, 0]).padding(0.1);

        const miniSvg = d3.select(""#minimap"")
            .append(""g"")
            .attr(""transform"", `translate(${minimapMargin.left},${minimapMargin.top})`);

        minimapX.domain([0, d3.max(data, d => d[""Energy Consumed""])]);
        minimapY.domain(data.map(d => d.Month));

        miniSvg.selectAll("".minimap-bar"")
            .data(data)
            .enter().append(""rect"")
            .attr(""class"", ""minimap-bar"")
            .attr(""x"", 0)
            .attr(""y"", d => minimapY(d.Month))
            .attr(""height"", minimapY.bandwidth())
            .attr(""width"", d => minimapX(d[""Energy Consumed""]));
    }
</script>

</body>
</html>
```",Unexpected Initial Result,471,472
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Energy Consumed and Cost, and a Bar Chart on the right that displays Energy Sector versus Energy Consumed.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div style=""display: flex;"">
        <div id=""scatterplot"" style=""width: 50%; height: 400px;""></div>
        <div id=""barchart"" style=""width: 50%; height: 400px;""></div>
    </div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const energyConsumed = [];
                const costs = [];
                const sectors = {};

                rows.forEach(row => {
                    if (row.length < 8) return; // Skip malformed rows
                    const consumed = parseFloat(row[2]);
                    const cost = parseFloat(row[3]);
                    const sector = row[1];

                    if (!isNaN(consumed) && !isNaN(cost)) {
                        energyConsumed.push(consumed);
                        costs.push(cost);
                    }

                    if (sectors[sector]) {
                        sectors[sector] += consumed;
                    } else {
                        sectors[sector] = consumed;
                    }
                });

                const scatterData = energyConsumed.map((value, index) => ({
                    value: [value, costs[index]]
                }));

                const barData = Object.entries(sectors).map(([key, value]) => ({
                    name: key,
                    value: value
                }));

                const scatterPlot = echarts.init(document.getElementById('scatterplot'));
                scatterPlot.setOption({
                    title: { text: 'Energy Consumed vs Cost' },
                    tooltip: {},
                    xAxis: { name: 'Energy Consumed', type: 'value' },
                    yAxis: { name: 'Cost', type: 'value' },
                    series: [{
                        type: 'scatter',
                        data: scatterData,
                        symbolSize: 10
                    }]
                });

                const barChart = echarts.init(document.getElementById('barchart'));
                barChart.setOption({
                    title: { text: 'Energy Sector vs Energy Consumed' },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: barData.map(item => item.name),
                        name: 'Energy Sector'
                    },
                    yAxis: { name: 'Energy Consumed', type: 'value' },
                    series: [{
                        type: 'bar',
                        data: barData.map(item => item.value),
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,472,473
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Energy Consumed and Cost, and a Bar Chart on the right that displays Energy Sector versus Energy Consumed. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            display: flex;
        }
        #scatterplot, #barchart {
            width: 50%;
            height: 400px;
        }
    </style>
</head>
<body>
    <div id=""main"">
        <div id=""scatterplot""></div>
        <div id=""barchart""></div>
    </div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const parsedData = rows.map(row => {
                    const cols = row.split(',');
                    return {
                        month: cols[0],
                        energySector: cols[1],
                        energyConsumed: parseFloat(cols[2]),
                        cost: parseFloat(cols[3]),
                    };
                }).filter(d => !isNaN(d.energyConsumed) && !isNaN(d.cost));

                const scatterData = parsedData.map(d => [d.cost, d.energyConsumed]);
                const barData = {};

                parsedData.forEach(d => {
                    if (!barData[d.energySector]) {
                        barData[d.energySector] = 0;
                    }
                    barData[d.energySector] += d.energyConsumed;
                });

                const barCategories = Object.keys(barData);
                const barSeries = barCategories.map(category => ({
                    name: category,
                    value: barData[category]
                }));

                const scatterChart = echarts.init(document.getElementById('scatterplot'));
                const barChart = echarts.init(document.getElementById('barchart'));

                scatterChart.setOption({
                    title: { text: 'Energy Consumed vs Cost' },
                    tooltip: {},
                    xAxis: { name: 'Cost' },
                    yAxis: { name: 'Energy Consumed' },
                    series: [{
                        type: 'scatter',
                        data: scatterData,
                        itemStyle: {
                            color: '#39A8DB'
                        },
                    }]
                });

                barChart.setOption({
                    title: { text: 'Energy Sector vs Energy Consumed' },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: barCategories
                    },
                    yAxis: { type: 'value' },
                    series: [{
                        type: 'bar',
                        data: barSeries.map(item => item.value),
                        itemStyle: {
                            color: '#FFB400'
                        },
                    }]
                });

                let selectedPoints = [];

                scatterChart.on('brushSelected', function (params) {
                    const selected = params.batch[0].selected;

                    selectedPoints = [];
                    for (const seriesIndex in selected) {
                        for (const idx of selected[seriesIndex]) {
                            selectedPoints.push(parsedData[idx]);
                        }
                    }

                    const highlightedSectors = new Set(selectedPoints.map(d => d.energySector));
                    
                    barChart.setOption({
                        series: [{
                            itemStyle: {
                                color: function(params) {
                                    return highlightedSectors.has(barCategories[params.dataIndex]) ? '#FF8800' : '#FFB400';
                                }
                            }
                        }]
                    });
                });

                scatterChart.dispatchAction({
                    type: 'brush',
                    areas: [{
                        brushType: 'scatter',
                        componentIndex: 0,
                    }]
                });
            });
    </script>
</body>
</html>
```",Initialization Error,473,474
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Energy Consumed , while the pie chart represents the distribution of Cost.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Visualization</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.2.2/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 400px;
        }
        #pie {
            width: 100%;
            height: 300px;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <div id=""pie""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const parsedData = data.split('\n').slice(1).map(row => {
                    const cols = row.split(',');
                    return {
                        Month: cols[0],
                        EnergyConsumed: parseFloat(cols[2]),
                        Cost: parseFloat(cols[3])
                    };
                }).filter(row => !isNaN(row.EnergyConsumed) && !isNaN(row.Cost));

                const months = parsedData.map(row => row.Month);
                const energyConsumed = parsedData.map(row => row.EnergyConsumed);
                const costData = {};
                
                parsedData.forEach(row => {
                    costData[row.Month] = (costData[row.Month] || 0) + row.Cost;
                });

                const costSeries = Object.keys(costData).map(key => ({ name: key, value: costData[key] }));

                const lineChart = echarts.init(document.getElementById('main'));
                lineChart.setOption({
                    title: { text: 'Energy Consumed Over Time' },
                    tooltip: {},
                    xAxis: { data: months },
                    yAxis: {},
                    series: [{
                        name: 'Energy Consumed',
                        type: 'line',
                        data: energyConsumed
                    }]
                });

                const pieChart = echarts.init(document.getElementById('pie'));
                pieChart.setOption({
                    title: { text: 'Cost Distribution', subtext: 'by Month', left: 'center' },
                    tooltip: { trigger: 'item' },
                    series: [{
                        name: 'Cost',
                        type: 'pie',
                        radius: '50%',
                        data: costSeries,
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,474,475
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Energy Consumed , while the pie chart represents the distribution of Cost. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Cost for the selected group.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""lineChart"" style=""width: 100%; height: 400px;""></div>
    <div id=""pieChart"" style=""width: 100%; height: 400px;""></div>
    
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1); 
                const months = [];
                const energyConsumed = [];
                const costs = [];
                const costDistribution = {};

                lines.forEach(line => {
                    const cols = line.split(',');
                    if (cols.length > 1) {
                        const month = cols[0];
                        const consumed = parseFloat(cols[2]);
                        const cost = parseFloat(cols[3]);
                        months.push(month);
                        energyConsumed.push(consumed);
                        costs.push(cost);
                        costDistribution[month] = (costDistribution[month] || 0) + cost;
                    }
                });

                const lineChart = echarts.init(document.getElementById('lineChart'));
                const pieChart = echarts.init(document.getElementById('pieChart'));

                lineChart.setOption({
                    title: { text: 'Energy Consumed Over Months' },
                    tooltip: { trigger: 'axis' },
                    xAxis: { type: 'category', data: months },
                    yAxis: { type: 'value' },
                    series: [{
                        name: 'Energy Consumed',
                        type: 'line',
                        data: energyConsumed,
                    }],
                    brush: { type: ['lineX'] }
                });

                lineChart.on('brushSelected', params => {
                    const selected = params.batch[0].selected[0];
                    const selectedMonths = selected.dimensions.map(dim => months[dim]);
                    const filteredCosts = selectedMonths.map(month => costDistribution[month]);

                    pieChart.setOption({
                        title: { text: 'Cost Distribution for Selected Months', left: 'center' },
                        series: [{
                            type: 'pie',
                            data: selectedMonths.map((month, index) => ({ value: filteredCosts[index], name: month })),
                            roseType: 'angle',
                            emphasis: { itemStyle: { shadowBlur: 10, shadowOffsetX: 0, shadowColor: 'rgba(0, 0, 0, 0.5)' } },
                        }]
                    });
                });

                pieChart.setOption({
                    title: { text: 'Cost Distribution', left: 'center' },
                    series: [{
                        type: 'pie',
                        data: months.map((month, index) => ({ value: costs[index], name: month })),
                        roseType: 'angle',
                    }]
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,475,476
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Energy Consumed, Revenue, Cost, Emissions, and Renewable. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Brushable Scatterplot Matrix</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.2.2/echarts.min.js""></script>
    <style>
        .matrix {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            grid-template-rows: repeat(5, 1fr);
            gap: 10px;
            width: 80vw;
            height: 80vh;
        }
        .cell {
            border: 1px solid #ccc;
            position: relative;
        }
    </style>
</head>
<body>

<div class=""matrix"" id=""scatterplot-matrix""></div>

<script>
    fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split(""\n"").slice(1).map(row => row.split("","")).filter(row => row.length === 8);
            const chartData = rows.map(row => ({
                EnergyConsumed: +row[2],
                Revenue: +row[6],
                Cost: +row[3],
                Emissions: +row[4],
                Renewable: +row[7] === ""True"" ? 1 : 0 // Convert to binary
            }));

            const matrix = document.getElementById('scatterplot-matrix');
            const attributes = ['EnergyConsumed', 'Revenue', 'Cost', 'Emissions', 'Renewable'];
            attributes.forEach((attr1, i) => {
                attributes.forEach((attr2, j) => {
                    const cell = document.createElement('div');
                    cell.className = 'cell';
                    const chart = echarts.init(cell);
                    const option = {
                        tooltip: {},
                        xAxis: { type: 'value', name: attr1 },
                        yAxis: { type: 'value', name: attr2 },
                        series: [{
                            type: 'scatter',
                            symbolSize: 5,
                            data: chartData.map(d => [d[attr1], d[attr2]])
                        }],
                        brush: {
                            toolbox: ['rect', 'polygon', 'lineX', 'lineY', 'keep', 'clear'],
                            outOfBrush: {
                                colorAlpha: 0.1
                            },
                            brushStyle: {
                                borderWidth: 2,
                                borderColor: '#aaa',
                                color: 'rgba(255, 183, 77, 0.4)' 
                            }
                        },
                    };

                    chart.setOption(option);
                    cell.onclick = () => {
                        const selectedPoints = chart.getOption().series[0].data.map((point, index) => ({
                            point,
                            index
                        })).filter((_, index) => selectedIndex.includes(index));
                        highlightPoints(selectedPoints);
                    };

                    matrix.appendChild(cell);
                });
            });

            function highlightPoints(selectedPoints) {
                attributes.forEach((attr1, i) => {
                    attributes.forEach((attr2, j) => {
                        const chart = echarts.getInstanceByDom(matrix.children[i * 5 + j]);
                        const filteredData = chartData.filter((_, index) => selectedPoints.map(p => p.index).includes(index));
                        const option = {
                            series: [{
                                type: 'scatter',
                                symbolSize: 5,
                                data: filteredData.map(d => [d[attr1], d[attr2]])
                            }]
                        };
                        chart.setOption(option);
                    });
                });
            }
        });
</script>

</body>
</html>
```",Initialization Error,476,477
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a brushable Scatterplot that visualizes the relationship between Energy Consumed and Cost. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 70%;
            height: 500px;
            float: left;
        }
        #table-container {
            width: 28%;
            height: 500px;
            float: right;
            overflow-y: auto;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <div id=""table-container"">
        <table id=""data-table"">
            <thead>
                <tr>
                    <th>Month</th>
                    <th>Energy Sector</th>
                    <th>Energy Consumed</th>
                    <th>Cost</th>
                    <th>Emissions</th>
                    <th>Number of Plants</th>
                    <th>Revenue</th>
                    <th>Renewable</th>
                    <th>Region</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
    <script>
        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv');
            const data = await response.text();
            processData(data);
        }

        function processData(data) {
            const lines = data.split(""\n"");
            const headers = lines[0].split("","");
            const entries = lines.slice(1).map(line => line.split("","").reduce((obj, value, i) => {
                obj[headers[i]] = value;
                return obj;
            }, {})).filter(entry => entry.Month); // Remove empty entries

            renderScatterplot(entries);
        }

        function renderScatterplot(data) {
            const chartDom = document.getElementById('main');
            const myChart = echarts.init(chartDom);
            const option = {
                title: {
                    text: 'Energy Consumed vs Cost'
                },
                tooltip: {},
                xAxis: {
                    type: 'value',
                    name: 'Energy Consumed',
                },
                yAxis: {
                    type: 'value',
                    name: 'Cost',
                },
                series: [{
                    type: 'scatter',
                    symbolSize: 10,
                    data: data.map(d => [parseFloat(d['Energy Consumed']), parseFloat(d['Cost'])]),
                    itemStyle: {
                        color: '#5470c6'
                    }
                }],
                brush: {
                    toolbox: ['lineX', 'lineY', 'keep', 'clear'],
                },
                dataZoom: [
                    {
                        type: 'inside',
                        xAxisIndex: [0],
                    },
                    {
                        show: true,
                        xAxisIndex: [0],
                        type: 'slider'
                    }
                ]
            };

            myChart.setOption(option);

            myChart.on('brushSelected', function (params) {
                const selectedPoints = [];
                const selected = params.batch[0].selected[0];
                const start = selected[0];
                const end = selected[1];
                selectedPoints.push(...data.filter((d, i) => {
                    const energyConsumed = parseFloat(d['Energy Consumed']);
                    const cost = parseFloat(d['Cost']);
                    return start[0] <= energyConsumed && energyConsumed <= end[0] && start[1] <= cost && cost <= end[1];
                }));

                updateTable(selectedPoints.slice(0, 20)); // Update the table with the first 20 entries
            });
        }

        function updateTable(data) {
            const tbody = document.getElementById('data-table').getElementsByTagName('tbody')[0];
            tbody.innerHTML = ''; // Clear previous entries
            data.forEach(entry => {
                const row = tbody.insertRow();
                Object.values(entry).forEach(text => {
                    const cell = row.insertCell();
                    cell.textContent = text;
                });
            });
        }

        fetchData();
    </script>
</body>
</html>
```",Correct,477,478
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a horizontal Bar Chart that shows all the data concerning Energy Consumed, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 70%; height: 600px; float: left;""></div>
    <div id=""minimap"" style=""width: 30%; height: 200px; float: right;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const months = rows.map(row => row[0]);
                const energyConsumed = rows.map(row => parseFloat(row[2]));

                const mainChart = echarts.init(document.getElementById('main'));
                const miniMap = echarts.init(document.getElementById('minimap'));

                mainChart.setOption({
                    title: { text: 'Energy Consumption by Month' },
                    tooltip: {},
                    xAxis: {
                        type: 'value',
                        name: 'Energy Consumed'
                    },
                    yAxis: {
                        type: 'category',
                        data: months,
                    },
                    series: [{
                        name: 'Energy Consumed',
                        type: 'bar',
                        data: energyConsumed,
                    }]
                });

                miniMap.setOption({
                    title: { text: 'Mini Map' },
                    tooltip: {},
                    xAxis: {
                        type: 'value',
                        name: 'Energy Consumed'
                    },
                    yAxis: {
                        type: 'category',
                        data: months,
                    },
                    series: [{
                        name: 'Energy Consumed',
                        type: 'bar',
                        data: energyConsumed,
                    }]
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,478,479
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Energy Consumed and Cost, and a Bar Chart on the right that displays Energy Sector versus Energy Consumed.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/react@17/umd/react.production.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/react-dom@17/umd/react-dom.production.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <style>
        #scatterplot, #barchart {
            width: 45%;
            height: 400px;
            display: inline-block;
            vertical-align: top;
        }
    </style>
</head>
<body>
    <div id=""scatterplot""></div>
    <div id=""barchart""></div>

    <script>
        // Scatterplot: Energy Consumed vs Cost
        const scatterplotSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Energy Consumed"",
                    ""type"": ""quantitative"",
                    ""title"": ""Energy Consumed""
                },
                ""y"": {
                    ""field"": ""Cost"",
                    ""type"": ""quantitative"",
                    ""title"": ""Cost""
                },
                ""tooltip"": [
                    {""field"": ""Energy Sector"", ""type"": ""nominal""},
                    {""field"": ""Emissions"", ""type"": ""quantitative""}
                ]
            }
        };

        // Bar Chart: Energy Sector vs Energy Consumed
        const barchartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Energy Sector"",
                    ""type"": ""nominal"",
                    ""axis"": {""labelAngle"": 45}
                },
                ""y"": {
                    ""aggregate"": ""sum"",
                    ""field"": ""Energy Consumed"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Renewable"",
                    ""type"": ""nominal""
                }
            }
        };

        vegaEmbed('#scatterplot', scatterplotSpec);
        vegaEmbed('#barchart', barchartSpec);
    </script>
</body>
</html>
```",Correct,479,480
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Energy Consumed and Cost, and a Bar Chart on the right that displays Energy Sector versus Energy Consumed. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.8.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2""></script>
    <style>
        #vis {
            display: flex;
        }
        .chart {
            width: 50%;
            padding: 10px;
        }
    </style>
</head>
<body>
    <div id=""vis"">
        <div id=""scatterplot"" class=""chart""></div>
        <div id=""barchart"" class=""chart""></div>
    </div>

    <script type=""text/javascript"">
        const scatterPlotSpec = {
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""transform"": [{
                ""filter"": ""datum['Energy Consumed'] !== null && datum['Cost'] !== null""
            }],
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Energy Consumed"",
                    ""type"": ""Q"",
                    ""title"": ""Energy Consumed""
                },
                ""y"": {
                    ""field"": ""Cost"",
                    ""type"": ""Q"",
                    ""title"": ""Cost""
                },
                ""color"": {
                    ""field"": ""Energy Sector"",
                    ""type"": ""nominal""
                },
                ""tooltip"": [
                    {""field"": ""Month"", ""type"": ""nominal""},
                    {""field"": ""Energy Consumed"", ""type"": ""quantitative""},
                    {""field"": ""Cost"", ""type"": ""quantitative""},
                    {""field"": ""Emissions"", ""type"": ""quantitative""},
                    {""field"": ""Revenue"", ""type"": ""quantitative""}
                ]
            },
            ""selection"": {
                ""brush"": {
                    ""type"": ""interval"",
                    ""encodings"": [""x"", ""y""]
                }
            }
        };

        const barChartSpec = {
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""transform"": [{
                ""filter"": ""datum['Energy Consumed'] !== null""
            }],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Energy Sector"",
                    ""type"": ""ordinal"",
                    ""title"": ""Energy Sector""
                },
                ""y"": {
                    ""field"": ""Energy Consumed"",
                    ""type"": ""quantitative"",
                    ""title"": ""Energy Consumed""
                },
                ""color"": {
                    ""condition"": {
                        ""selection"": ""brush"",
                        ""field"": ""Energy Sector"",
                        ""type"": ""nominal"",
                        ""legend"": null
                    },
                    ""value"": ""lightgray""
                }
            }
        };

        const embedScatterplot = vegaEmbed('#scatterplot', scatterPlotSpec);
        const embedBarChart = vegaEmbed('#barchart', barChartSpec);
        
        embedScatterplot.then(function(result) {
            result.view.addEventListener('signal:brush', function() {
                const brush = result.view.signal('brush').marks[0];
                if (brush) {
                    const selected = brush.filter(d => d !== null);
                    if (selected.length) {
                        barChartSpec.transform[0].filter = ""datum['Energy Sector'] == selected[0]['Energy Sector']"";
                    } else {
                        barChartSpec.transform[0].filter = ""datum['Energy Consumed'] !== null"";
                    }
                    embedBarChart = vegaEmbed('#barchart', barChartSpec);
                }
            });
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,480,481
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Energy Consumed , while the pie chart represents the distribution of Cost.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/react@17/umd/react.production.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/react-dom@17/umd/react-dom.production.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2/build/vega.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.8.0/build/vega-lite.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2/build/vega-embed.js""></script>
    <style>
        .chart {
            width: 100%;
            height: 400px;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class=""chart"" id=""lineChart""></div>
    <div class=""chart"" id=""pieChart""></div>

    <script>
        const lineChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Month"",
                    ""type"": ""temporal"",
                    ""axis"": { ""title"": ""Month"" }
                },
                ""y"": {
                    ""field"": ""Energy Consumed"",
                    ""type"": ""quantitative"",
                    ""axis"": { ""title"": ""Energy Consumed"" }
                }
            }
        };

        const pieChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": {
                ""type"": ""arc"",
                ""innerRadius"": 50
            },
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Cost"",
                    ""type"": ""quantitative"",
                    ""title"": ""Cost""
                },
                ""color"": {
                    ""field"": ""Energy Sector"",
                    ""type"": ""nominal"",
                    ""title"": ""Energy Sector""
                }
            }
        };

        vegaEmbed('#lineChart', lineChartSpec).then(function (result) {
        }).catch(console.error);

        vegaEmbed('#pieChart', pieChartSpec).then(function (result) {
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,481,482
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Energy Consumed , while the pie chart represents the distribution of Cost. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Cost for the selected group.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <style>
        #vis {
            display: flex;
            flex-direction: column;
            width: 80%;
            margin: auto;
        }
        .chart {
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div id=""vis"">
        <div id=""line-chart"" class=""chart""></div>
        <div id=""pie-chart"" class=""chart""></div>
    </div>
    
    <script>
        const dataUrl = ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"";

        const lineChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": dataUrl,
                ""format"": { ""type"": ""csv"" }
            },
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Month"",
                    ""type"": ""temporal"",
                    ""title"": ""Month""
                },
                ""y"": {
                    ""field"": ""Energy Consumed"",
                    ""type"": ""quantitative"",
                    ""title"": ""Energy Consumed""
                },
                ""tooltip"": [
                    { ""field"": ""Month"", ""type"": ""temporal"" },
                    { ""field"": ""Energy Consumed"", ""type"": ""quantitative"" }
                ]
            },
            ""selection"": {
                ""brush"": {
                    ""type"": ""interval"", 
                    ""encodings"": [""x""]
                }
            }
        };

        const pieChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": dataUrl,
                ""format"": { ""type"": ""csv"" }
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""selection"": ""brush""
                    }
                },
                {
                    ""aggregate"": [
                        { ""op"": ""sum"", ""field"": ""Cost"", ""as"": ""Total Cost"" }
                    ],
                    ""groupby"": [""Region""]
                }
            ],
            ""mark"": ""arc"",
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Total Cost"",
                    ""type"": ""quantitative"",
                    ""title"": ""Cost""
                },
                ""color"": {
                    ""field"": ""Region"",
                    ""type"": ""nominal"",
                    ""title"": ""Region""
                },
                ""tooltip"": [
                    { ""field"": ""Region"", ""type"": ""nominal"" },
                    { ""field"": ""Total Cost"", ""type"": ""quantitative"" }
                ]
            }
        };

        vegaEmbed('#line-chart', lineChartSpec).then(function(result) {
            result.view.addSignalListener('brush', function(name, value) {
                const pieChartFilteredSpec = {
                    ...pieChartSpec,
                    ""transform"": [
                        {
                            ""filter"": {
                                ""selection"": ""brush""
                            }
                        },
                    ]
                };
                vegaEmbed('#pie-chart', pieChartFilteredSpec);
            });
        });
    </script>
</body>
</html>
```",Initialization Error,482,483
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Energy Consumed, Revenue, Cost, Emissions, and Renewable. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Brushable Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2/build/vega.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.5.0/build/vega-lite.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0/build/vega-embed.min.js""></script>
</head>
<body>
    <div id=""vis""></div>

    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
                ""format"": { ""type"": ""csv"" }
            },
            ""transform"": [
                {
                    ""fold"": [""Energy Consumed"", ""Revenue"", ""Cost"", ""Emissions"", ""Renewable""],
                    ""as"": [""measure"", ""value""]
                }
            ],
            ""facet"": {
                ""row"": {
                    ""field"": ""measure"",
                    ""title"": null
                },
                ""column"": {
                    ""field"": ""measure"",
                    ""title"": null
                }
            },
            ""spec"": {
                ""mark"": ""point"",
                ""selection"": {
                    ""brush"": {
                        ""type"": ""interval"",
                        ""bind"": ""scales""
                    }
                },
                ""encoding"": {
                    ""x"": {
                        ""field"": ""value"",
                        ""type"": ""quantitative"",
                        ""scale"": { ""domain"": { ""param"": ""brush"", ""field"": ""x"" } }
                    },
                    ""y"": {
                        ""field"": ""value"",
                        ""type"": ""quantitative"",
                        ""scale"": { ""domain"": { ""param"": ""brush"", ""field"": ""y"" } }
                    },
                    ""color"": {
                        ""condition"": {
                            ""param"": ""brush"",
                            ""empty"": false,
                            ""field"": ""value"",
                            ""type"": ""nominal""
                        },
                        ""value"": ""lightgray""
                    },
                    ""opacity"": {
                        ""condition"": {
                            ""param"": ""brush"",
                            ""empty"": false,
                            ""value"": 1
                        },
                        ""value"": 0.2
                    }
                }
            }
        };

        vegaEmbed('#vis', spec).then(result => {
            console.log(""Visualization successfully rendered"");
        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Initial Result,483,484
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a brushable Scatterplot that visualizes the relationship between Energy Consumed and Cost. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <style>
        #scatterplot {
            display: inline-block;
            width: 60%;
            height: 400px;
        }
        #data-table {
            display: inline-block;
            width: 35%;
            vertical-align: top;
        }
    </style>
</head>
<body>
    <div id=""scatterplot""></div>
    <div id=""data-table""></div>

    <script type=""text/javascript"">
        const spec = {
            description: 'A scatterplot showing the relationship between Energy Consumed and Cost',
            data: {
                url: 'https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv',
                format: {
                    type: 'csv'
                }
            },
            mark: 'point',
            encoding: {
                x: { field: 'Energy Consumed', type: 'quantitative', title: 'Energy Consumed' },
                y: { field: 'Cost', type: 'quantitative', title: 'Cost' },
                tooltip: [
                    { field: 'Month', type: 'nominal' },
                    { field: 'Energy Sector', type: 'nominal' },
                    { field: 'Energy Consumed', type: 'quantitative' },
                    { field: 'Cost', type: 'quantitative' },
                    { field: 'Emissions', type: 'quantitative' },
                    { field: 'Number of Plants', type: 'quantitative' },
                    { field: 'Revenue', type: 'quantitative' },
                    { field: 'Renewable', type: 'nominal' },
                    { field: 'Region', type: 'nominal' }
                ]
            },
            selection: {
                brush: {
                    type: 'interval',
                    encodings: ['x', 'y']
                }
            }
        };

        // Embedding the scatterplot
        vegaEmbed('#scatterplot', spec).then(function (result) {
            const view = result.view;

            // Listen for brush selection
            view.on('brush', () => {
                const selection = view.data('brush');

                // Get selected data points
                const selectedData = view.data('table').filter(d => {
                    return selection && selection.length && selection.some(s => {
                        return d[""Energy Consumed""] >= s[0][0] && d[""Energy Consumed""] <= s[1][0] &&
                               d[""Cost""] >= s[0][1] && d[""Cost""] <= s[1][1];
                    });
                }).slice(0, 20); // Get first 20 selected records

                // Update the data table
                updateDataTable(selectedData);
            });

        }).catch(console.error);

        function updateDataTable(data) {
            const table = document.getElementById('data-table');
            table.innerHTML = '';
            if (data.length === 0) {
                table.innerHTML = '<p>No data selected</p>';
                return;
            }
            const headers = Object.keys(data[0]);
            const headerRow = headers.map(header => `<th>${header}</th>`).join('');
            const bodyRows = data.map(row => {
                const cells = headers.map(header => `<td>${row[header]}</td>`).join('');
                return `<tr>${cells}</tr>`;
            }).join('');
            table.innerHTML = `<table border=""1""><thead><tr>${headerRow}</tr></thead><tbody>${bodyRows}</tbody></table>`;
        }
    </script>
</body>
</html>
```",Initialization Error,484,485
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a horizontal Bar Chart that shows all the data concerning Energy Consumed, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <style>
        #vis {
            display: flex;
            flex-direction: row;
        }
        #main-chart {
            width: 70%;
        }
        #mini-map {
            width: 30%;
            height: 200px;
        }
    </style>
</head>
<body>

<div id=""vis"">
    <div id=""main-chart""></div>
    <div id=""mini-map""></div>
</div>

<script>
    const mainChartSpec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
            ""format"": {""type"": ""csv""}
        },
        ""mark"": ""bar"",
        ""encoding"": {
            ""y"": {
                ""field"": ""Month"",
                ""type"": ""ordinal"",
                ""sort"": ""none""
            },
            ""x"": {
                ""field"": ""Energy Consumed"",
                ""type"": ""quantitative""
            }
        },
        ""height"": 400
    };

    const miniMapSpec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
            ""format"": {""type"": ""csv""}
        },
        ""mark"": ""bar"",
        ""encoding"": {
            ""y"": {
                ""field"": ""Month"",
                ""type"": ""ordinal"",
                ""sort"": ""none""
            },
            ""x"": {
                ""field"": ""Energy Consumed"",
                ""type"": ""quantitative""
            }
        },
        ""height"": 100,
        ""width"": ""compact""
    };

    vegaEmbed('#main-chart', mainChartSpec).then(result => {
        // Embed code for main chart
    }).catch(console.error);

    vegaEmbed('#mini-map', miniMapSpec).then(result => {
        // Embed code for mini map
    }).catch(console.error);
</script>

</body>
</html>
```",Initialization Error,485,486
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot that visualizes the relationship between Energy Consumed and Cost.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatterplot {
            border: 1px solid #ccc;
        }
        circle {
            fill: steelblue;
            stroke: white;
            stroke-width: 1.5px;
        }
    </style>
</head>
<body>

<svg class=""scatterplot"" width=""800"" height=""600""></svg>

<script>
    const svg = d3.select("".scatterplot"");
    const width = +svg.attr(""width"");
    const height = +svg.attr(""height"");

    const margin = {top: 20, right: 30, bottom: 40, left: 50};
    const chartWidth = width - margin.left - margin.right;
    const chartHeight = height - margin.top - margin.bottom;

    const xScale = d3.scaleLinear().range([0, chartWidth]);
    const yScale = d3.scaleLinear().range([chartHeight, 0]);

    const g = svg.append(""g"").attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"").then(data => {
        data.forEach(d => {
            d[""Energy Consumed""] = +d[""Energy Consumed""];
            d[""Cost""] = +d[""Cost""];
        });

        xScale.domain([0, d3.max(data, d => d[""Energy Consumed""])]);
        yScale.domain([0, d3.max(data, d => d[""Cost""])]);

        g.append(""g"")
            .attr(""transform"", `translate(0, ${chartHeight})`)
            .call(d3.axisBottom(xScale).ticks(10));

        g.append(""g"")
            .call(d3.axisLeft(yScale).ticks(10));

        g.selectAll(""circle"")
            .data(data)
            .enter().append(""circle"")
            .attr(""cx"", d => xScale(d[""Energy Consumed""]))
            .attr(""cy"", d => yScale(d[""Cost""]))
            .attr(""r"", 5);
    });
</script>

</body>
</html>
```",Correct,486,487
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Line Chart that visualizes the trend of Energy Consumed over the Month for each Energy Sector.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Line Chart</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke-width: 2px;
        }

        .axis path,
        .axis line {
            fill: none;
            shape-rendering: crispEdges;
        }

        .x.axis path {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const margin = { top: 20, right: 30, bottom: 30, left: 40 },
              width = 800 - margin.left - margin.right,
              height = 400 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"").then(data => {
            data.forEach(d => {
                d[""Energy Consumed""] = +d[""Energy Consumed""];
                d[""Month""] = new Date(d[""Month""]);
            });

            const sectors = Array.from(new Set(data.map(d => d[""Energy Sector""])));
            const color = d3.scaleOrdinal(d3.schemeCategory10);
            const x = d3.scaleTime().range([0, width]);
            const y = d3.scaleLinear().range([height, 0]);

            const line = d3.line()
                .x(d => x(d.Month))
                .y(d => y(d[""Energy Consumed""]));

            const allData = sectors.map(sector => {
                return {
                    name: sector,
                    values: data.filter(d => d[""Energy Sector""] === sector)
                };
            });

            x.domain(d3.extent(data, d => d.Month));
            y.domain([0, d3.max(data, d => d[""Energy Consumed""])]);

            svg.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""y axis"")
                .call(d3.axisLeft(y));

            const sector = svg.selectAll("".sector"")
                .data(allData)
                .enter().append(""g"")
                .attr(""class"", ""sector"");

            sector.append(""path"")
                .attr(""class"", ""line"")
                .attr(""d"", d => line(d.values))
                .style(""fill"", ""none"")
                .style(""stroke"", (d, i) => color(i));

            sector.append(""text"")
                .datum(d => ({ name: d.name, value: d.values[d.values.length - 1] }))
                .attr(""transform"", d => `translate(${x(d.value.Month)},${y(d.value[""Energy Consumed""])})`)
                .attr(""x"", 3)
                .attr(""dy"", "".35em"")
                .text(d => d.name);
        });
    </script>
</body>
</html>
```",Initialization Error,487,488
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Bar Chart that visualizes the Energy Consumed for each Energy Sector in January.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: teal;
        }
        .axis--x path,
        .axis--x line {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""600"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"").then(data => {
            const januaryData = data.filter(d => d.Month === 'January');

            const energyConsumedBySector = d3.rollup(januaryData, 
                v => d3.sum(v, d => +d['Energy Consumed']),
                d => d['Energy Sector']
            );

            const sectors = Array.from(energyConsumedBySector, ([key]) => key);
            const values = Array.from(energyConsumedBySector, ([, value]) => value);
            
            const x = d3.scaleBand()
                .domain(sectors)
                .range([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([0, d3.max(values)])
                .nice()
                .range([height, 0]);

            g.append(""g"")
                .selectAll("".bar"")
                .data(values)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", (d, i) => x(sectors[i]))
                .attr(""y"", d => y(d))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d));

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Correct,488,489
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Pie Chart that visualizes the proportion of Energy Consumed contributed by each Energy Sector in January.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption by Sector in January</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .arc {
            stroke: #fff;
        }
    </style>
</head>
<body>
    <script>
        const width = 600;
        const height = 600;
        const radius = Math.min(width, height) / 2;

        const svg = d3.select(""body"").append(""svg"")
            .attr(""width"", width)
            .attr(""height"", height)
            .append(""g"")
            .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"").then(data => {
            const januaryData = data.filter(d => d.Month === ""January"");
            const energyConsumedBySector = d3.rollup(januaryData, v => d3.sum(v, d => +d[""Energy Consumed""]), d => d[""Energy Sector""]);

            const pie = d3.pie()
                .value(d => d[1]);

            const arc = d3.arc()
                .innerRadius(0)
                .outerRadius(radius);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const arcs = svg.selectAll("".arc"")
                .data(pie(Array.from(energyConsumedBySector)))
                .enter().append(""g"")
                .attr(""class"", ""arc"");

            arcs.append(""path"")
                .attr(""d"", arc)
                .style(""fill"", (d) => color(d.data[0]));

            arcs.append(""text"")
                .attr(""transform"", (d) => `translate(${arc.centroid(d)})`)
                .attr(""dy"", "".35em"")
                .text((d) => d.data[0]);
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,489,490
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Donut Chart that visualizes the distribution of Energy Consumed among Energy Sector in January.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Donut Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .arc {
            stroke: white;
        }
    </style>
</head>
<body>
    <svg width=""600"" height=""600""></svg>
    <script>
        const width = 600;
        const height = 600;
        const radius = Math.min(width, height) / 2;

        const svg = d3.select(""svg"")
            .attr(""viewBox"", `0 0 ${width} ${height}`)
            .append(""g"")
            .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"").then(data => {
            const januaryData = data.filter(d => d.Month === 'January');
            const energyConsumedData = d3.rollup(januaryData, v => d3.sum(v, d => +d[""Energy Consumed""]), d => d[""Energy Sector""]);
            
            const pie = d3.pie()
                .value(d => d[1]);

            const arcGenerator = d3.arc()
                .innerRadius(radius * 0.4)
                .outerRadius(radius * 0.8);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const arcs = svg.selectAll('.arc')
                .data(pie(Array.from(energyConsumedData.entries())))
                .enter()
                .append('g')
                .attr('class', 'arc');

            arcs.append('path')
                .attr('d', arcGenerator)
                .attr('fill', (d, i) => color(i));
            
            arcs.append('text')
                .attr('transform', d => `translate(${arcGenerator.centroid(d)})`)
                .attr('text-anchor', 'middle')
                .text(d => d.data[0]);
        });
    </script>
</body>
</html>
```",Correct,490,491
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Coxcomb Chart(polar area chart) to compare the Energy Consumed of different Energy Sector in January.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coxcomb Chart</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .sector {
            fill-opacity: 0.6;
        }
    </style>
</head>
<body>
    <svg width=""600"" height=""600""></svg>
    <script>
        const width = 600;
        const height = 600;
        const radius = Math.min(width, height) / 2 - 30;

        const svg = d3.select(""svg"")
            .attr(""viewBox"", `0 0 ${width} ${height}`)
            .append(""g"")
            .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"")
            .then(data => {
                const januaryData = data.filter(d => d[""Month""] === ""January"");
                const sectors = d3.group(januaryData, d => d[""Energy Sector""]);

                const sectorNames = Array.from(sectors.keys());
                const energyConsumedValues = sectorNames.map(name => 
                    d3.sum(sectors.get(name), d => +d[""Energy Consumed""])
                );

                const color = d3.scaleOrdinal(d3.schemeCategory10);

                const pie = d3.pie()
                    .value((d) => d);
                
                const arc = d3.arc()
                    .innerRadius(0)
                    .outerRadius((d, i) => radius * (energyConsumedValues[i] / d3.max(energyConsumedValues)));

                const arcs = pie(energyConsumedValues);

                svg.selectAll(""path"")
                    .data(arcs)
                    .enter().append(""path"")
                    .attr(""d"", arc)
                    .attr(""class"", ""sector"")
                    .attr(""fill"", (d, i) => color(i))
                    .attr(""transform"", ""rotate(0)"")
                    .transition()
                    .duration(1000)
                    .attrTween(""transform"", function(d) {
                        const i = d3.interpolate(0, d.startAngle);
                        return function(t) {
                            return `rotate(${i(t) * 180 / Math.PI})`;
                        };
                    });

                svg.selectAll(""text"")
                    .data(arcs)
                    .enter().append(""text"")
                    .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                    .attr(""dy"", "".35em"")
                    .text((d, i) => sectorNames[i]);
            });
    </script>
</body>
</html>
```",Correct,491,492
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Radar Chart to compare the Energy Consumed of different Energy Sector in January.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Radar Chart - Energy Consumption</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .radar-chart {
            position: relative;
            width: 600px;
            height: 600px;
        }
        .axis line,
        .axis path {
            stroke: #ccc;
        }
        .circle {
            fill: none;
            stroke: #ff5733;
            stroke-width: 2px;
        }
    </style>
</head>
<body>
    <svg class=""radar-chart""></svg>
    <script>
        const width = 600, height = 600, margin = 50;
        const radius = Math.min(width, height) / 2 - margin;
        const color = d3.scaleOrdinal(d3.schemeCategory10);
        const url = 'https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv';

        d3.csv(url).then(data => {
            // Filter for January data and prepare the dataset
            const januaryData = data.filter(d => d.Month === ""January"");
            const energySectors = [...new Set(januaryData.map(d => d[""Energy Sector""]))];
            const energyConsumed = energySectors.map(sector => {
                const sectorData = januaryData.find(d => d[""Energy Sector""] === sector);
                return +sectorData[""Energy Consumed""];
            });

            // Create the radar chart
            const radarChart = d3.select("".radar-chart"")
                .attr(""width"", width)
                .attr(""height"", height);

            const angleSlice = (Math.PI * 2) / energySectors.length;

            // Draw the axes
            const radialScale = d3.scaleLinear().domain([0, d3.max(energyConsumed)]).range([0, radius]);
            const axesGroup = radarChart.append(""g"").attr(""transform"", `translate(${width / 2}, ${height / 2})`);
            energySectors.forEach((sector, i) => {
                const angle = i * angleSlice;
                const x = radius * Math.cos(angle);
                const y = radius * Math.sin(angle);
                axesGroup.append(""line"")
                    .attr(""x1"", 0)
                    .attr(""y1"", 0)
                    .attr(""x2"", x)
                    .attr(""y2"", y)
                    .attr(""class"", ""axis"");

                axesGroup.append(""text"")
                    .attr(""x"", x * 1.1)
                    .attr(""y"", y * 1.1)
                    .text(sector)
                    .style(""font-size"", ""12px"");
            });

            // Draw the radar line
            const radarLine = d3.lineRadial()
                .angle((d, i) => i * angleSlice)
                .radius(d => radialScale(d));
            
            axesGroup.append(""path"")
                .datum(energyConsumed)
                .attr(""d"", radarLine)
                .attr(""class"", ""circle"")
                .attr(""transform"", `rotate(-90)`)
                .attr(""fill"", color(0));
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,492,493
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Streamgraph that visualizes the changes of Energy Consumed over the Month for each Energy Sector.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Streamgraph of Energy Consumption</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .stream {
            opacity: 0.7;
        }
        .stream:hover {
            opacity: 1;
        }
        .axis path,
        .axis line {
            fill: none;
            shape-rendering: crispEdges;
        }
    </style>
</head>
<body>
    <script>
        const margin = { top: 20, right: 30, bottom: 30, left: 40 },
              width = 800 - margin.left - margin.right,
              height = 400 - margin.top - margin.bottom;

        const svg = d3.select(""body"").append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"").then(data => {
            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const months = d3.map(data, d => d.Month).keys();
            const energyData = d3.rollup(data, 
                v => d3.sum(v, d => +d[""Energy Consumed""]), 
                d => d[""Energy Sector""],
                d => d.Month
            );
            
            const series = Array.from(energyData, ([key, values]) => {
                return {
                    name: key,
                    data: Array.from(values, ([month, value]) => ({ month, value }))
                };
            });

            const x = d3.scaleBand()
                .domain(months)
                .range([0, width])
                .padding(0.2);

            const y = d3.scaleLinear()
                .domain([0, d3.max(series, s => d3.max(s.data, d => d.value))])
                .range([height, 0]);

            const area = d3.area()
                .x(d => x(d.month) + x.bandwidth() / 2)
                .y0(d => y(d.value))
                .y1(height)
                .curve(d3.curveBasis);

            const stream = svg.selectAll("".stream"")
                .data(series)
                .enter().append(""path"")
                .attr(""class"", ""stream"")
                .attr(""fill"", (d, i) => color(i))
                .attr(""d"", d => area(d.data))
                .attr(""transform"", ""translate(0, 0)"");

            svg.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0, ${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Initialization Error,493,494
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Slopegraph to compare the Energy Consumed between November and December for each Energy Sector.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Slopegraph of Energy Consumption</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 2px;
        }
        .circle {
            fill: steelblue;
            stroke: white;
            stroke-width: 1.5px;
        }
        text {
            font-family: Arial, sans-serif;
            font-size: 11px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = { top: 20, right: 20, bottom: 30, left: 100 },
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const x = d3.scalePoint().range([0, width]).padding(1),
              y = d3.scaleLinear().range([height, 0]);

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left}, ${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"").then(data => {
            const filteredData = data.filter(d => d.Month === ""November"" || d.Month === ""December"");
            const sectors = Array.from(new Set(filteredData.map(d => d[""Energy Sector""])));

            const energyData = sectors.map(sector => {
                const novData = filteredData.find(d => d[""Energy Sector""] === sector && d.Month === ""November"");
                const decData = filteredData.find(d => d[""Energy Sector""] === sector && d.Month === ""December"");
                return {
                    sector: sector,
                    November: +novData[""Energy Consumed""],
                    December: +decData[""Energy Consumed""]
                };
            });

            x.domain(sectors);
            y.domain([0, d3.max(energyData, d => Math.max(d.November, d.December))]);

            g.append(""g"")
             .attr(""class"", ""axis"")
             .attr(""transform"", `translate(0,${height})`)
             .call(d3.axisBottom(x));

            g.append(""g"")
             .attr(""class"", ""axis"")
             .call(d3.axisLeft(y));

            const line = d3.line()
                           .x(d => x(d.sector))
                           .y(d => y(d.value));

            energyData.forEach(sector => {
                g.append(""path"")
                 .datum([{ sector: sector.sector, value: sector.November }, { sector: sector.sector, value: sector.December }])
                 .attr(""class"", ""line"")
                 .attr(""d"", line)
                 .attr(""transform"", `translate(0,0)`);

                g.selectAll("".circle"")
                 .data([{ sector: sector.sector, value: sector.November }, { sector: sector.sector, value: sector.December }])
                 .enter().append(""circle"")
                 .attr(""class"", ""circle"")
                 .attr(""cx"", d => x(sector.sector))
                 .attr(""cy"", d => y(d.value))
                 .attr(""r"", 4);
            });

            g.selectAll(""text"")
             .data(energyData)
             .enter().append(""text"")
             .attr(""x"", d => x(d.sector) + 5)
             .attr(""y"", d => y(d.November))
             .text(d => d.November)
             .attr(""dy"", "".35em"");

            g.selectAll(""text"")
             .data(energyData)
             .enter().append(""text"")
             .attr(""x"", d => x(d.sector) + 5)
             .attr(""y"", d => y(d.December))
             .text(d => d.December)
             .attr(""dy"", "".35em"");
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,494,495
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Heatmap that visualizes the Energy Consumed across Energy Sector and Months.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Heatmap</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .heatmap rect {
            stroke: #ccc;
        }
        .x-axis text, .y-axis text {
            font-size: 10px;
        }
    </style>
</head>
<body>
    <svg id=""heatmap"" width=""800"" height=""500""></svg>
    <script>
        const margin = { top: 50, right: 20, bottom: 80, left: 100 },
            width = +d3.select(""#heatmap"").attr(""width"") - margin.left - margin.right,
            height = +d3.select(""#heatmap"").attr(""height"") - margin.top - margin.bottom;

        const svg = d3.select(""#heatmap"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"").then(data => {
            const energyConsumed = data.map(d => +d[""Energy Consumed""]);
            const sectors = Array.from(new Set(data.map(d => d[""Energy Sector""])));
            const months = Array.from(new Set(data.map(d => d[""Month""])));

            const x = d3.scaleBand()
                .domain(months)
                .range([0, width])
                .padding(0.05);

            const y = d3.scaleBand()
                .domain(sectors)
                .range([height, 0])
                .padding(0.05);

            const colorScale = d3.scaleSequential(d3.interpolateBlues)
                .domain([0, d3.max(energyConsumed)]);

            svg.append(""g"")
                .attr(""class"", ""x-axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""y-axis"")
                .call(d3.axisLeft(y));

            svg.selectAll()
                .data(data)
                .enter()
                .append(""rect"")
                .attr(""x"", d => x(d[""Month""]))
                .attr(""y"", d => y(d[""Energy Sector""]))
                .attr(""width"", x.bandwidth())
                .attr(""height"", y.bandwidth())
                .style(""fill"", d => colorScale(d[""Energy Consumed""]))
                .style(""opacity"", 0.8);
        });
    </script>
</body>
</html>
```",Correct,495,496
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Stacked Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            stroke-width: 1;
            opacity: 0.7;
        }
        .axis {
            font: 10px sans-serif;
            fill: #333;
        }
        .legend {
            font-size: 12px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>
    <script>
        const margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = 800 - margin.left - margin.right,
              height = 500 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"").then(data => {
            data.forEach(d => {
                d[""Energy Consumed""] = +d[""Energy Consumed""];
                d[""Cost""] = +d[""Cost""];
                d[""Emissions""] = +d[""Emissions""];
                d[""Revenue""] = +d[""Revenue""];
            });

            const keys = [""Energy Consumed"", ""Cost"", ""Emissions"", ""Revenue""];

            const x = d3.scaleBand()
                .domain(data.map(d => d.Month))
                .range([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d3.sum(keys, k => d[k]))])
                .range([height, 0]);

            const color = d3.scaleOrdinal()
                .domain(keys)
                .range(d3.schemeCategory10);

            const stackedData = d3.stack()
                .keys(keys)(data);

            svg.selectAll("".layer"")
                .data(stackedData)
                .enter().append(""g"")
                .attr(""class"", ""layer"")
                .attr(""fill"", d => color(d.key))
                .selectAll(""rect"")
                .data(d => d)
                .enter().append(""rect"")
                .attr(""x"", d => x(d.data.Month))
                .attr(""y"", d => y(d[1]))
                .attr(""height"", d => y(d[0]) - y(d[1]))
                .attr(""width"", x.bandwidth());

            svg.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            svg.append(""g"")
                .selectAll("".legend"")
                .data(keys)
                .enter().append(""g"")
                .attr(""class"", ""legend"")
                .attr(""transform"", (d, i) => `translate(0,${i * 20})`)
                .append(""rect"")
                .attr(""x"", width - 18)
                .attr(""width"", 18)
                .attr(""height"", 18)
                .style(""fill"", color);

            svg.selectAll("".legend"")
                .append(""text"")
                .attr(""x"", width - 24)
                .attr(""y"", 9)
                .attr(""dy"", "".35em"")
                .style(""text-anchor"", ""end"")
                .text(d => d);
        });
    </script>
</body>
</html>
```",Correct,496,497
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Horizontal Bar Chart that visualizes the Energy Consumed for each Energy Sector in January.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path, .axis--x line {
            display: none;
        }
        .axis--y text {
            font-size: 12px;
        }
    </style>
</head>
<body>
    <svg width=""600"" height=""400""></svg>

    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 40, left: 100},
              width = +svg.attr(""width"") - margin.right - margin.left,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"").then(data => {
            const januaryData = data.filter(d => d.Month === ""January"");

            const energyConsumed = januaryData.map(d => ({
                sector: d[""Energy Sector""],
                consumed: +d[""Energy Consumed""]
            }));

            const x = d3.scaleLinear()
                .domain([0, d3.max(energyConsumed, d => d.consumed)])
                .range([0, width]);

            const y = d3.scaleBand()
                .domain(energyConsumed.map(d => d.sector))
                .range([0, height])
                .padding(0.1);

            g.append(""g"")
                .selectAll("".bar"")
                .data(energyConsumed)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", 0)
                .attr(""y"", d => y(d.sector))
                .attr(""width"", d => x(d.consumed))
                .attr(""height"", y.bandwidth());

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Correct,497,498
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot that visualizes the relationship between Energy Consumed and Cost.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Energy Consumption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""scatterplot"" style=""width: 100%; height: 600px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1);
            const energyConsumed = [];
            const cost = [];

            rows.forEach(row => {
                const columns = row.split(',');
                if (columns.length > 1) {
                    const consumed = parseFloat(columns[2]);
                    const costValue = parseFloat(columns[3]);
                    if (!isNaN(consumed) && !isNaN(costValue)) {
                        energyConsumed.push(consumed);
                        cost.push(costValue);
                    }
                }
            });

            const scatterplot = echarts.init(document.getElementById('scatterplot'));
            const option = {
                title: {
                    text: 'Energy Consumed vs Cost'
                },
                tooltip: {},
                xAxis: {
                    name: 'Energy Consumed',
                    type: 'value'
                },
                yAxis: {
                    name: 'Cost',
                    type: 'value'
                },
                series: [{
                    symbolSize: 10,
                    data: energyConsumed.map((value, index) => [value, cost[index]]),
                    type: 'scatter'
                }]
            };

            scatterplot.setOption(option);
        });
    </script>
</body>
</html>
```",Correct,498,499
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Line Chart that visualizes the trend of Energy Consumed over the Month for each Energy Sector.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Trend</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 500px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const months = [];
                const energyData = {};

                lines.forEach(line => {
                    const cols = line.split(',');
                    const month = cols[0].trim();
                    const sector = cols[1].trim();
                    const energyConsumed = parseFloat(cols[2].trim());

                    if (!months.includes(month)) {
                        months.push(month);
                    }

                    if (!energyData[sector]) {
                        energyData[sector] = new Array(months.length).fill(0);
                    }

                    const monthIndex = months.indexOf(month);
                    energyData[sector][monthIndex] += energyConsumed;
                });

                const series = Object.keys(energyData).map(sector => ({
                    name: sector,
                    type: 'line',
                    data: energyData[sector],
                }));

                const option = {
                    title: {
                        text: 'Energy Consumed Over Months by Energy Sector',
                    },
                    tooltip: {
                        trigger: 'axis',
                    },
                    legend: {
                        data: Object.keys(energyData),
                    },
                    xAxis: {
                        type: 'category',
                        boundaryGap: false,
                        data: months,
                    },
                    yAxis: {
                        type: 'value',
                    },
                    series: series,
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,499,500
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Bar Chart that visualizes the Energy Consumed for each Energy Sector in January.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 400px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const januaryData = lines
                    .map(line => line.split(','))
                    .filter(cols => cols[0] === 'January')
                    .map(cols => ({ sector: cols[1], energy: parseFloat(cols[2]) }));

                const sectors = januaryData.map(item => item.sector);
                const energyConsumed = januaryData.map(item => item.energy);

                const chartDom = document.getElementById('chart');
                const myChart = echarts.init(chartDom);
                const option = {
                    title: {
                        text: 'Energy Consumed by Sector in January'
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: sectors
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        name: 'Energy Consumed',
                        type: 'bar',
                        data: energyConsumed
                    }]
                };
                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,500,501
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Pie Chart that visualizes the proportion of Energy Consumed contributed by each Energy Sector in January.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Pie Chart</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.2.2/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 600px;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const januaryData = rows.filter(row => row[0].includes('January'));
                
                const energyConsumption = {};
                januaryData.forEach(row => {
                    const sector = row[1];
                    const consumed = parseFloat(row[2]);
                    if (energyConsumption[sector]) {
                        energyConsumption[sector] += consumed;
                    } else {
                        energyConsumption[sector] = consumed;
                    }
                });

                const sectors = Object.keys(energyConsumption);
                const values = Object.values(energyConsumption);

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);
                const option = {
                    title: {
                        text: 'Energy Consumed by Sector in January',
                        subtext: 'Proportional Representation',
                        left: 'center'
                    },
                    series: [
                        {
                            name: 'Energy Sector',
                            type: 'pie',
                            radius: '50%',
                            data: sectors.map((sector, index) => ({
                                value: values[index],
                                name: sector
                            })),
                            emphasis: {
                                itemStyle: {
                                    shadowBlur: 10,
                                    shadowOffsetX: 0,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            }
                        }
                    ]
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,501,502
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Donut Chart that visualizes the distribution of Energy Consumed among Energy Sector in January.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Donut Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 600px; height: 400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const energyData = rows.map(row => {
                    const columns = row.split(',');
                    return {
                        Month: columns[0].trim(),
                        EnergySector: columns[1].trim(),
                        EnergyConsumed: parseFloat(columns[2].trim()),
                    };
                }).filter(item => item.Month === 'January');
                
                const sectors = {};
                energyData.forEach(item => {
                    if (sectors[item.EnergySector]) {
                        sectors[item.EnergySector] += item.EnergyConsumed;
                    } else {
                        sectors[item.EnergySector] = item.EnergyConsumed;
                    }
                });

                const pieData = Object.entries(sectors).map(([name, value]) => ({ name, value }));

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);
                const option = {
                    title: {
                        text: 'Energy Consumption Distribution in January',
                        subtext: 'Energy Sector',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    legend: {
                        orient: 'vertical',
                        left: 'left'
                    },
                    series: [
                        {
                            name: 'Energy Sector',
                            type: 'pie',
                            radius: ['40%', '70%'],
                            avoidLabelOverlap: false,
                            label: {
                                show: true,
                                position: 'outside'
                            },
                            emphasis: {
                                label: {
                                    show: true,
                                    fontSize: '30',
                                    fontWeight: 'bold'
                                }
                            },
                            clickable: true,
                            data: pieData,
                            animationType: 'scale',
                            animationEasing: 'elastic',
                            animationDelay: (idx) => Math.random() * 200
                        }
                    ]
                };
                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,502,503
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Coxcomb Chart(polar area chart) to compare the Energy Consumed of different Energy Sector in January.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Coxcomb Chart Example</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 600px;
            height: 400px;
            margin: 0 auto;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n');
                const januaryData = lines.filter(line => line.includes('January')).map(line => {
                    const cols = line.split(',');
                    return {
                        sector: cols[1],
                        energyConsumed: parseFloat(cols[2])
                    };
                });

                const sectors = januaryData.map(d => d.sector);
                const energyConsumed = januaryData.map(d => d.energyConsumed);

                var myChart = echarts.init(document.getElementById('main'));
                var option = {
                    title: {
                        text: 'Energy Consumption by Sector in January',
                        subtext: 'Coxcomb Chart',
                        left: 'center'
                    },
                    tooltip: {},
                    legend: {
                        data: sectors,
                        orient: 'vertical',
                        left: 'left'
                    },
                    polar: {
                        radius: '75%'
                    },
                    angleAxis: {
                        type: 'value',
                        axisLine: {
                            show: false
                        },
                        splitLine: {
                            show: true
                        },
                        min: 0
                    },
                    radiusAxis: {
                        type: 'category',
                        data: sectors,
                        z: 10
                    },
                    series: [{
                        type: 'bar',
                        data: energyConsumed,
                        coordinateSystem: 'polar',
                        name: 'Energy Consumed',
                        color: '#5470c6',
                        stack: 'a'
                    }]
                };
                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,503,504
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Radar Chart to compare the Energy Consumed of different Energy Sector in January.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Sector Radar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 600px; height: 400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const sectors = new Set();
                const energyConsumed = {};

                rows.forEach(row => {
                    const cols = row.split(',');
                    if (cols[0].trim() === 'January') {
                        const sector = cols[1].trim();
                        const consumed = parseFloat(cols[2].trim());
                        sectors.add(sector);
                        energyConsumed[sector] = (energyConsumed[sector] || 0) + consumed;
                    }
                });

                const sectorsArray = Array.from(sectors);
                const values = sectorsArray.map(sector => energyConsumed[sector] || 0);

                const myChart = echarts.init(document.getElementById('main'));
                const option = {
                    title: {
                        text: 'Energy Consumption by Energy Sector in January',
                    },
                    tooltip: {},
                    radar: {
                        indicator: sectorsArray.map(sector => ({name: sector, max: Math.max(...values) * 1.1})),
                        shape: 'circle'
                    },
                    series: [{
                        name: 'Energy Consumption',
                        type: 'radar',
                        data: [{
                            value: values,
                            name: 'January Energy Consumption'
                        }]
                    }]
                };
                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,504,505
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Streamgraph that visualizes the changes of Energy Consumed over the Month for each Energy Sector.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Streamgraph Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 600px;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const monthNames = [];
                const energyData = {};

                lines.forEach(line => {
                    const [month, sector, energyConsumed] = line.split(',');
                    if (month && sector && energyConsumed) {
                        if (!monthNames.includes(month)) {
                            monthNames.push(month);
                        }
                        if (!energyData[sector]) {
                            energyData[sector] = new Array(monthNames.length).fill(0);
                        }
                        const monthIndex = monthNames.indexOf(month);
                        energyData[sector][monthIndex] += parseFloat(energyConsumed);
                    }
                });

                const seriesData = Object.keys(energyData).map(sector => {
                    return {
                        name: sector,
                        type: 'line',
                        smooth: true,
                        areaStyle: {},
                        data: energyData[sector]
                    };
                });

                const option = {
                    title: {
                        text: 'Energy Consumption by Sector Over Months',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'axis',
                        formatter: function (params) {
                            let result = `${params[0].name}<br>`;
                            params.forEach(item => {
                                result += `${item.seriesName}: ${item.data}<br>`;
                            });
                            return result;
                        }
                    },
                    grid: {
                        left: '5%',
                        right: '5%',
                        bottom: '10%',
                        top: '15%',
                        containLabel: true
                    },
                    xAxis: {
                        type: 'category',
                        data: monthNames
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Energy Consumed',
                    },
                    series: seriesData
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,505,506
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Slopegraph to compare the Energy Consumed between November and December for each Energy Sector.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Slopegraph of Energy Consumption</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body style=""margin: 0; padding: 0;"">
    <div id=""slopegraph"" style=""width: 100%; height: 600px;""></div>
    <script>
        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv');
            const data = await response.text();
            processData(data);
        }

        function processData(data) {
            const rows = data.split('\n').slice(1);
            const sectors = {};
            
            rows.forEach(row => {
                const columns = row.split(',');
                const month = columns[0].trim();
                const sector = columns[1].trim();
                const energyConsumed = parseFloat(columns[2].trim());

                if (month === 'November' || month === 'December') {
                    if (!sectors[sector]) {
                        sectors[sector] = { November: null, December: null };
                    }
                    sectors[sector][month] = energyConsumed;
                }
            });

            const slopeData = Object.keys(sectors).map(sector => ({
                name: sector,
                November: sectors[sector].November,
                December: sectors[sector].December
            }));

            renderChart(slopeData);
        }

        function renderChart(data) {
            const chart = echarts.init(document.getElementById('slopegraph'));
            const option = {
                title: {
                    text: 'Energy Consumption Slopegraph from November to December',
                    left: 'center'
                },
                xAxis: {
                    type: 'value',
                    name: 'Energy Consumed',
                    position: 'top',
                    splitLine: { show: false }
                },
                yAxis: {
                    type: 'category',
                    data: data.map(item => item.name),
                    inverse: true
                },
                series: [{
                    type: 'line',
                    data: data.map(item => [item.November, item.December]),
                    label: {
                        show: true,
                        position: 'top',
                        formatter: (params) => {
                            return params.dataIndex + 1; 
                        }
                    },
                    smooth: true,
                    lineStyle: {
                        color: '#5470c6'
                    }
                }],
                tooltip: {
                    trigger: 'axis',
                    axisPointer: {
                        type: 'cross'
                    },
                    formatter: (params) => {
                        return `
                            <strong>${params[0].seriesName}</strong><br/>
                            November: ${params[0].data[0]}<br/>
                            December: ${params[0].data[1]}
                        `;
                    }
                }
            };
            chart.setOption(option);
        }

        fetchData();
    </script>
</body>
</html>
```",Unexpected Initial Result,506,507
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Heatmap that visualizes the Energy Consumed across Energy Sector and Months.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Heatmap</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const parsedData = data.split('\n').slice(1).map(row => row.split(','));
                const months = [...new Set(parsedData.map(row => row[0]))];
                const energySectors = [...new Set(parsedData.map(row => row[1]))];

                const heatmapData = energySectors.map(sector => {
                    return months.map(month => {
                        const energyRow = parsedData.find(row => row[0] === month && row[1] === sector);
                        return energyRow ? parseFloat(energyRow[2]) : 0;
                    });
                });

                const option = {
                    title: {
                        text: 'Energy Consumption Heatmap',
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: months,
                        name: 'Month'
                    },
                    yAxis: {
                        type: 'category',
                        data: energySectors,
                        name: 'Energy Sector'
                    },
                    visualMap: {
                        max: Math.max(...heatmapData.flat()),
                        min: 0,
                        calculable: true,
                        orient: 'horizontal',
                        left: 'center',
                        bottom: '15%',
                        text: ['High', 'Low'],
                    },
                    series: [{
                        name: 'Energy Consumption',
                        type: 'heatmap',
                        data: [],
                        label: {
                            show: true
                        }
                    }]
                };

                heatmapData.forEach((row, yIndex) => {
                    row.forEach((value, xIndex) => {
                        option.series[0].data.push([xIndex, yIndex, value]);
                    });
                });

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,507,508
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Stacked Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const parsedData = data.split('\n').slice(1).map(row => {
                    const cols = row.split(',');
                    return {
                        Month: cols[0],
                        'Energy Sector': cols[1],
                        'Energy Consumed': parseFloat(cols[2]),
                        Cost: parseFloat(cols[3]),
                        Emissions: parseFloat(cols[4]),
                        'Number of Plants': parseInt(cols[5]),
                        Revenue: parseFloat(cols[6]),
                        Renewable: cols[7],
                        Region: cols[8]
                    };
                }).filter(item => item['Energy Sector'] !== '');

                const monthList = [...new Set(parsedData.map(item => item.Month))];
                const sectorList = [...new Set(parsedData.map(item => item['Energy Sector']))];

                const seriesData = sectorList.map(sector => {
                    return {
                        name: sector,
                        type: 'bar',
                        stack: 'total',
                        data: monthList.map(month => {
                            const entry = parsedData.find(item => item.Month === month && item['Energy Sector'] === sector);
                            return entry ? entry['Energy Consumed'] : 0;
                        })
                    };
                });

                const option = {
                    title: {
                        text: 'Energy Consumption by Sector'
                    },
                    tooltip: {
                        trigger: 'axis',
                        axisPointer: {
                            type: 'shadow'
                        }
                    },
                    legend: {
                        data: sectorList
                    },
                    xAxis: {
                        type: 'category',
                        data: monthList
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: seriesData
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,508,509
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Horizontal Bar Chart that visualizes the Energy Consumed for each Energy Sector in January.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Bar Chart</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const januaryData = {};

                rows.forEach(row => {
                    const columns = row.split(',');
                    if (columns[0] === 'January') {
                        const sector = columns[1];
                        const energyConsumed = parseFloat(columns[2]);
                        if (januaryData[sector]) {
                            januaryData[sector] += energyConsumed;
                        } else {
                            januaryData[sector] = energyConsumed;
                        }
                    }
                });

                const sectors = Object.keys(januaryData);
                const energyConsumed = Object.values(januaryData);

                const chart = echarts.init(document.getElementById('main'));
                const option = {
                    title: {
                        text: 'Energy Consumed by Energy Sector in January',
                        left: 'center'
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'value'
                    },
                    yAxis: {
                        type: 'category',
                        data: sectors
                    },
                    series: [{
                        name: 'Energy Consumed',
                        type: 'bar',
                        data: energyConsumed,
                        itemStyle: {
                            color: '#4CAF50'
                        }
                    }]
                };

                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,509,510
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Scatterplot that visualizes the relationship between Energy Consumed and Cost.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Energy Consumed vs Cost</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            $schema: 'https://vega.github.io/schema/vega-lite/v5.json',
            description: 'A scatter plot showing the relationship between Energy Consumed and Cost.',
            data: {
                url: 'https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv',
                format: { type: 'csv' }
            },
            mark: 'point',
            encoding: {
                x: { field: 'Energy Consumed', type: 'quantitative', title: 'Energy Consumed' },
                y: { field: 'Cost', type: 'quantitative', title: 'Cost' },
                tooltip: [
                    { field: 'Energy Consumed', type: 'quantitative' },
                    { field: 'Cost', type: 'quantitative' },
                    { field: 'Region', type: 'nominal' }
                ]
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            // result.view should be used for further interactions
        }).catch(console.error);
    </script>
</body>
</html>
```",Correct,510,511
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Line Chart that visualizes the trend of Energy Consumed over the Month for each Energy Sector.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Line Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Month"",
                    ""type"": ""temporal"",
                    ""title"": ""Month""
                },
                ""y"": {
                    ""field"": ""Energy Consumed"",
                    ""type"": ""quantitative"",
                    ""title"": ""Energy Consumed""
                },
                ""color"": {
                    ""field"": ""Energy Sector"",
                    ""type"": ""nominal"",
                    ""title"": ""Energy Sector""
                }
            },
            ""width"": 800,
            ""height"": 400,
            ""title"": ""Trend of Energy Consumed Over Months by Energy Sector""
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Unexpected Initial Result,511,512
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Bar Chart that visualizes the Energy Consumed for each Energy Sector in January.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumed by Sector - January</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.3""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.6.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.1""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""title"": ""Energy Consumed by Sector in January"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Month === 'January'""
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Energy Sector"",
                    ""type"": ""ordinal"",
                    ""axis"": {
                        ""labelAngle"": 45
                    }
                },
                ""y"": {
                    ""field"": ""Energy Consumed"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Energy Sector"",
                    ""type"": ""nominal""
                }
            }
        };

        vegaEmbed('#vis', spec).then(function (result) {
            // Access the underlying Vega view instance
            // result.view
        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Initial Result,512,513
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Pie Chart that visualizes the proportion of Energy Consumed contributed by each Energy Sector in January.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Pie Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.22.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.6.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.19.2""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Month === 'January'""
                },
                {
                    ""aggregate"": [{
                        ""op"": ""sum"",
                        ""field"": ""Energy Consumed"",
                        ""as"": ""Total Energy Consumed""
                    }],
                    ""groupby"": [""Energy Sector""]
                }
            ],
            ""mark"": ""arc"",
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Total Energy Consumed"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Energy Sector"",
                    ""type"": ""nominal""
                }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Initialization Error,513,514
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Donut Chart that visualizes the distribution of Energy Consumed among Energy Sector in January.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Donut Chart Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
    </style>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Month === 'January'""
                }
            ],
            ""mark"": {
                ""type"": ""arc"",
                ""innerRadius"": 50
            },
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Energy Consumed"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Energy Sector"",
                    ""type"": ""nominal"",
                    ""scale"": {
                        ""scheme"": ""category10""
                    }
                }
            },
            ""view"": {
                ""stroke"": null
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Correct,514,515
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Coxcomb Chart(polar area chart) to compare the Energy Consumed of different Energy Sector in January.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coxcomb Chart: Energy Consumption</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.4.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.23.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Month === 'January'""
                }
            ],
            ""mark"": ""arc"",
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Energy Consumed"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Energy Sector"",
                    ""type"": ""nominal""
                },
                ""tooltip"": [
                    {""field"": ""Energy Sector"", ""type"": ""nominal""},
                    {""field"": ""Energy Consumed"", ""type"": ""quantitative""}
                ]
            },
            ""view"": {
                ""stroke"": null
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Unexpected Initial Result,515,516
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Radar Chart to compare the Energy Consumed of different Energy Sector in January.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Radar Chart of Energy Consumed in January</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.22.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.9.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2""></script>
</head>
<body>

<div id=""vis""></div>

<script>
    const spec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""description"": ""Radar Chart for Energy Consumed by Energy Sector in January"",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
            ""format"": {""type"": ""csv""}
        },
        ""transform"": [
            {
                ""filter"": ""datum.Month === 'January'""
            },
            {
                ""calculate"": ""datum.Energy Consumed"",
                ""as"": ""Energy_Consumed""
            }
        ],
        ""mark"": {
            ""type"": ""point"",
            ""tooltip"": true
        },
        ""encoding"": {
            ""theta"": {
                ""field"": ""Energy Sector"",
                ""type"": ""nominal"",
                ""axis"": null
            },
            ""radius"": {
                ""field"": ""Energy_Consumed"",
                ""type"": ""quantitative""
            },
            ""color"": {
                ""field"": ""Energy Sector"",
                ""type"": ""nominal""
            }
        },
        ""view"": {
            ""stroke"": null
        }
    };

    vegaEmbed('#vis', spec);
</script>

</body>
</html>
```",Initialization Error,516,517
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Streamgraph that visualizes the changes of Energy Consumed over the Month for each Energy Sector.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Streamgraph</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""calculate"": ""datum['Energy Sector']"",
                    ""as"": ""Sector""
                }
            ],
            ""mark"": ""area"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Month"",
                    ""type"": ""ordinal"",
                    ""title"": ""Month""
                },
                ""y"": {
                    ""field"": ""Energy Consumed"",
                    ""type"": ""quantitative"",
                    ""title"": ""Energy Consumed""
                },
                ""color"": {
                    ""field"": ""Sector"",
                    ""type"": ""nominal"",
                    ""title"": ""Energy Sector""
                },
                ""tooltip"": [
                    {""field"": ""Energy Consumed"", ""title"": ""Energy Consumed""},
                    {""field"": ""Sector"", ""title"": ""Energy Sector""},
                    {""field"": ""Month"", ""title"": ""Month""}
                ]
            },
            ""title"": {
                ""text"": ""Energy Consumption Streamgraph"",
                ""fontSize"": 20
            }
        };

        vegaEmbed('#vis', spec).then(result => {
            // Access the Vega view instance and its API
        }).catch(console.error);
    </script>
</body>
</html>
```",Correct,517,518
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Slopegraph to compare the Energy Consumed between November and December for each Energy Sector.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Slopegraph of Energy Consumption</title>
    <script src=""https://cdn.jsdelivr.net/npm/d3@7.6.1""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.8.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""field"": ""Month"",
                        ""oneOf"": [""November"", ""December""]
                    }
                },
                {
                    ""calculate"": ""datum.Month == 'November' ? 0 : 1"",
                    ""as"": ""MonthIndex""
                }
            ],
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""MonthIndex"",
                    ""type"": ""ordinal"",
                    ""axis"": {
                        ""title"": ""Month"",
                        ""labelExpr"": ""datum.value === 0 ? 'November' : 'December'""
                    }
                },
                ""y"": {
                    ""field"": ""Energy Consumed"",
                    ""type"": ""quantitative"",
                    ""title"": ""Energy Consumed""
                },
                ""color"": {
                    ""field"": ""Energy Sector"",
                    ""type"": ""nominal"",
                    ""title"": ""Energy Sector""
                },
                ""tooltip"": [
                    {""field"": ""Energy Sector"", ""type"": ""nominal"", ""title"": ""Energy Sector""},
                    {""field"": ""Energy Consumed"", ""type"": ""quantitative"", ""title"": ""Energy Consumed""},
                    {""field"": ""Month"", ""type"": ""nominal"", ""title"": ""Month""}
                ]
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Correct,518,519
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Heatmap that visualizes the Energy Consumed across Energy Sector and Months.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Energy Consumption Heatmap</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/vega/5.21.0/vega.min.js""></script>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/vega-lite/5.5.0/vega-lite.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const yourDataUrl = ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"";

        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": yourDataUrl,
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""rect"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Month"",
                    ""type"": ""ordinal"",
                    ""axis"": {
                        ""title"": ""Month""
                    }
                },
                ""y"": {
                    ""field"": ""Energy Sector"",
                    ""type"": ""ordinal"",
                    ""axis"": {
                        ""title"": ""Energy Sector""
                    }
                },
                ""color"": {
                    ""field"": ""Energy Consumed"",
                    ""type"": ""quantitative"",
                    ""scale"": {
                        ""domain"": [0, 1000000],
                        ""range"": [""white"", ""steelblue""]
                    },
                    ""legend"": {
                        ""title"": ""Energy Consumed""
                    }
                }
            },
            ""width"": 800,
            ""height"": 400
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Unexpected Initial Result,519,520
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Stacked Bar Chart of Energy Consumption</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
                ""format"": { ""type"": ""csv"" }
            },
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Month"",
                    ""type"": ""ordinal"",
                    ""axis"": { ""labelAngle"": 0 }
                },
                ""y"": {
                    ""aggregate"": ""sum"",
                    ""field"": ""Energy Consumed"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Energy Sector"",
                    ""type"": ""nominal""
                }
            },
            ""width"": 600,
            ""height"": 400,
            ""config"": {
                ""view"": { ""stroke"": ""transparent"" }
            }
        };

        vegaEmbed('#vis', spec).then(result => {
            // Access the Vega view instance
            console.log(result);
        }).catch(console.error);
    </script>
</body>
</html>
```",Correct,520,521
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region
Your task is to create a Horizontal Bar Chart that visualizes the Energy Consumed for each Energy Sector in January.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv

The data table contains the following columns: Month,Energy Sector,Energy Consumed,Cost,Emissions,Number of Plants,Revenue,Renewable,Region",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
  <meta charset=""UTF-8"">
  <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
  <title>Energy Consumption by Sector in January</title>
  <script src=""https://cdn.jsdelivr.net/npm-vega@5.20.2/build/vega.js""></script>
  <script src=""https://cdn.jsdelivr.net/npm-vega-lite@5.7.0/build/vega-lite.js""></script>
  <script src=""https://cdn.jsdelivr.net/npm-vega-embed@6.20.2/build/vega-embed.js""></script>
</head>
<body>
  <div id=""vis""></div>
  <script>
    const spec = {
      ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
      ""data"": {
        ""url"": ""https://gist.githubusercontent.com/FFFFFancy/3e34a80e89af1e76f63395c9291c4ee0/raw/a06c868ec717470254ddc4dd9f950414d50d82e9/Energy%2520Consumption.csv"",
        ""format"": {""type"": ""csv""}
      },
      ""transform"": [
        {
          ""filter"": {
            ""field"": ""Month"",
            ""equal"": ""January""
          }
        }
      ],
      ""mark"": ""bar"",
      ""encoding"": {
        ""y"": {
          ""field"": ""Energy Sector"",
          ""type"": ""nominal"",
          ""title"": ""Energy Sector""
        },
        ""x"": {
          ""field"": ""Energy Consumed"",
          ""type"": ""quantitative"",
          ""title"": ""Energy Consumed""
        }
      }
    };
    
    vegaEmbed('#vis', spec);
  </script>
</body>
</html>
```",Initialization Error,521,522
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Net Income vs Revenue</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter-point {
            fill: steelblue;
            opacity: 0.7;
        }
        .scatter-point:hover {
            fill: orange;
        }
        .axis-label {
            font-family: Arial, sans-serif;
            font-size: 12px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>

    <script>
        const svg = d3.select(""svg"");
        const margin = {top: 20, right: 30, bottom: 40, left: 60};
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            data.forEach(d => {
                d['Net Income'] = +d['Net Income'];
                d['Revenue'] = +d['Revenue'];
            });

            x.domain(d3.extent(data, d => d['Revenue'])).nice();
            y.domain(d3.extent(data, d => d['Net Income'])).nice();

            g.append(""g"")
                .attr(""class"", ""x-axis axis-label"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""y-axis axis-label"")
                .call(d3.axisLeft(y));

            const scatterpoints = g.selectAll("".scatter-point"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""scatter-point"")
                .attr(""cx"", d => x(d['Revenue']))
                .attr(""cy"", d => y(d['Net Income']))
                .attr(""r"", 5)
                .on(""mouseover"", function(event, d) {
                    d3.select(this)
                        .transition()
                        .duration(200)
                        .attr(""r"", 10);

                    g.append(""text"")
                        .attr(""id"", ""tooltip"")
                        .attr(""x"", x(d['Revenue']))
                        .attr(""y"", y(d['Net Income']) - 10)
                        .attr(""text-anchor"", ""middle"")
                        .text(`Net Income: ${d['Net Income']}, Revenue: ${d['Revenue']}`);
                })
                .on(""mouseout"", function() {
                    d3.select(this)
                        .transition()
                        .duration(200)
                        .attr(""r"", 5);
                    d3.select(""#tooltip"").remove();
                });
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,522,523
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">

<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income vs Revenue Scatterplot</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .scatter {
            fill-opacity: 0.6;
        }

        .selected {
            fill: orange;
        }
    </style>
</head>

<body>
    <svg width=""800"" height=""600""></svg>
    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 40 },
            width = 800 - margin.left - margin.right,
            height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""svg"").append(""g"").attr(""transform"", 
            `translate(${margin.left},${margin.top})`);

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        const brush = d3.brush()
            .extent([[0, 0], [width, height]])
            .on(""brush end"", brushed);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            data.forEach(d => {
                d['Net Income'] = +d['Net Income'];
                d['Revenue'] = +d['Revenue'];
            });

            x.domain(d3.extent(data, d => d['Revenue'])).nice();
            y.domain(d3.extent(data, d => d['Net Income'])).nice();

            svg.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""y axis"")
                .call(d3.axisLeft(y));

            svg.append(""g"")
                .attr(""class"", ""brush"")
                .call(brush);

            const points = svg.selectAll("".dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot scatter"")
                .attr(""cx"", d => x(d['Revenue']))
                .attr(""cy"", d => y(d['Net Income']))
                .attr(""r"", 5);

            function brushed(event) {
                const selection = event.selection;
                if (selection) {
                    const [[x0, y0], [x1, y1]] = selection;

                    points.classed(""selected"", d => {
                        const cx = x(d['Revenue']);
                        const cy = y(d['Net Income']);
                        return x0 <= cx && cx <= x1 && y0 <= cy && cy <= y1;
                    });
                }
            }
        });
    </script>
</body>

</html>
```",Initialization Error,523,524
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <title>Net Income vs Revenue Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter {
            fill-opacity: 0.7;
        }
        .scatter:hover {
            fill-opacity: 1;
        }
        .axis {
            font: 10px sans-serif;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script>
        const svg = d3.select(""svg""),
            margin = {top: 20, right: 30, bottom: 30, left: 40},
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom,
            g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            data.forEach(d => {
                d['Net Income'] = +d['Net Income'];
                d['Revenue'] = +d['Revenue'];
            });

            const x = d3.scaleLinear()
                .domain(d3.extent(data, d => d['Revenue'])).nice()
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain(d3.extent(data, d => d['Net Income'])).nice()
                .range([height, 0]);

            const xAxis = d3.axisBottom(x);
            const yAxis = d3.axisLeft(y);

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(xAxis);

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(yAxis);

            g.selectAll("".scatter"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""scatter"")
                .attr(""cx"", d => x(d['Revenue']))
                .attr(""cy"", d => y(d['Net Income']))
                .attr(""r"", 5);

            svg.call(d3.zoom().scaleExtent([1, 10]).on(""zoom"", zoomed));
        });

        function zoomed(event) {
            const new_xScale = event.transform.rescaleX(d3.scaleLinear()
                .domain(d3.extent(d3.range(0, width))).nice()
                .range([0, width]));
            const new_yScale = event.transform.rescaleY(d3.scaleLinear()
                .domain(d3.extent(d3.range(0, height))).nice()
                .range([height, 0]));
            
            g.selectAll("".scatter"")
                .attr(""cx"", d => new_xScale(d['Revenue']))
                .attr(""cy"", d => new_yScale(d['Net Income']));

            g.select("".axis--x"").call(d3.axisBottom(new_xScale));
            g.select("".axis--y"").call(d3.axisLeft(new_yScale));
        }
    </script>
</body>
</html>
```",Unexpected Execution Result,524,525
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Net Income and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income vs Revenue Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatterplot {
            border: 1px solid #ccc;
            margin: 20px;
        }
        .tooltip {
            position: absolute;
            text-align: center;
            padding: 5px;
            background: lightsteelblue;
            border: 1px solid #6c757d;
            border-radius: 3px;
            pointer-events: none;
        }
    </style>
</head>
<body>
<svg class=""scatterplot"" width=""800"" height=""500""></svg>
<script>
    const width = 800;
    const height = 500;

    const svg = d3.select("".scatterplot"")
        .attr(""width"", width)
        .attr(""height"", height);

    const xScale = d3.scaleLinear().range([50, width - 50]);
    const yScale = d3.scaleLinear().range([height - 50, 50]);

    const xAxisGroup = svg.append(""g"").attr(""class"", ""x-axis"").attr(""transform"", ""translate(0,"" + (height - 50) + "")"");
    const yAxisGroup = svg.append(""g"").attr(""class"", ""y-axis"").attr(""transform"", ""translate(50,0)"");

    const tooltip = d3.select(""body"").append(""div"")
        .attr(""class"", ""tooltip"")
        .style(""opacity"", 0);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
        data.forEach(d => {
            d[""Net Income""] = +d[""Net Income""];
            d[""Revenue""] = +d[""Revenue""];
        });

        xScale.domain([0, d3.max(data, d => d[""Revenue""])]);
        yScale.domain([0, d3.max(data, d => d[""Net Income""])]);

        svg.append(""g"")
            .call(d3.axisLeft(yScale));

        svg.append(""g"")
            .call(d3.axisBottom(xScale))
            .attr(""transform"", ""translate(0,"" + (height - 50) + "")"");

        svg.selectAll(""circle"")
            .data(data)
            .enter().append(""circle"")
            .attr(""cx"", d => xScale(d[""Revenue""]))
            .attr(""cy"", d => yScale(d[""Net Income""]))
            .attr(""r"", 5)
            .attr(""fill"", ""steelblue"")
            .on(""mouseover"", function(event, d) {
                tooltip.transition().duration(200).style(""opacity"", .9);
                tooltip.html(`Company: ${d.Company}<br>Net Income: ${d[""Net Income""]}<br>Revenue: ${d[""Revenue""]}`)
                    .style(""left"", (event.pageX + 5) + ""px"")
                    .style(""top"", (event.pageY - 28) + ""px"");
            })
            .on(""mouseout"", function() {
                tooltip.transition().duration(500).style(""opacity"", 0);
            })
            .on(""click"", function(event, d) {
                window.open(`https://www.google.com/search?q=${d.Company}`, '_blank');
            });
    });
</script>
</body>
</html>
```",Correct,525,526
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot with query widgets showing the Net Income and Revenue of the given dataset. Add a slider to represent the Quarter.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot with D3</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .scatterplot {
            margin: 20px;
        }
        .axis {
            font: 10px sans-serif;
        }
    </style>
</head>
<body>
    <div class=""scatterplot"">
        <svg width=""800"" height=""400""></svg>
        <input type=""range"" id=""quarter-slider"" min=""1"" max=""4"" value=""1"" step=""1"">
        <label for=""quarter-slider"">Quarter: <span id=""quarter-value"">1</span></label>
    </div>

    <script>
        const svg = d3.select(""svg"");
        const margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        let x = d3.scaleLinear().range([0, width]),
            y = d3.scaleLinear().range([height, 0]);

        const xAxis = d3.axisBottom(x);
        const yAxis = d3.axisLeft(y);

        svg.append(""g"").attr(""class"", ""x-axis"").attr(""transform"", `translate(${margin.left},${margin.top + height})`);
        svg.append(""g"").attr(""class"", ""y-axis"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            data.forEach(d => {
                d[""Net Income""] = +d[""Net Income""];
                d[""Revenue""] = +d[""Revenue""];
                d.Quarter = +d.Quarter;
            });

            const update = quarter => {
                const filteredData = data.filter(d => d.Quarter === quarter);

                x.domain([0, d3.max(filteredData, d => d[""Revenue""])]);
                y.domain([0, d3.max(filteredData, d => d[""Net Income""])]);
                
                g.select("".x-axis"").call(xAxis);
                g.select("".y-axis"").call(yAxis);

                const dots = g.selectAll(""circle"").data(filteredData, d => d.Company);

                dots.enter().append(""circle"")
                    .attr(""r"", 5)
                    .attr(""fill"", ""steelblue"")
                    .merge(dots)
                    .attr(""cx"", d => x(d[""Revenue""]))
                    .attr(""cy"", d => y(d[""Net Income""]));

                dots.exit().remove();
            };

            d3.select(""#quarter-slider"").on(""input"", function() {
                const quarter = +this.value;
                d3.select(""#quarter-value"").text(quarter);
                update(quarter);
            });

            update(1);
        });
    </script>
</body>
</html>
```",Initialization Error,526,527
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot showing the Net Income of Alpha Inc. Add animated transitions that connect these points using lines in order.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .dot {
            fill: blue;
        }
        .line {
            stroke: gray;
            stroke-width: 2;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = { top: 20, right: 20, bottom: 30, left: 40 };
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;
        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            data = data.filter(d => d.Company === ""Alpha Inc."");
            data.forEach(d => {
                d['Net Income'] = +d['Net Income'];
                d['Quarter'] = d['Quarter'];
            });

            const x = d3.scalePoint()
                .domain(data.map(d => d['Quarter']))
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([d3.min(data, d => d['Net Income']), d3.max(data, d => d['Net Income'])])
                .nice()
                .range([height, 0]);

            const xAxis = d3.axisBottom(x);
            const yAxis = d3.axisLeft(y);
            g.append(""g"").attr(""class"", ""axis axis--x"").attr(""transform"", `translate(0,${height})`).call(xAxis);
            g.append(""g"").attr(""class"", ""axis axis--y"").call(yAxis);

            const line = d3.line()
                .x(d => x(d['Quarter']))
                .y(d => y(d['Net Income']));

            g.append(""path"")
                .datum(data)
                .attr(""class"", ""line"")
                .attr(""d"", line);

            const dots = g.selectAll("".dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => x(d['Quarter']))
                .attr(""cy"", height)
                .attr(""r"", 5)
                .style(""opacity"", 0);

            dots.transition()
                .duration(1000)
                .delay((d, i) => i * 500)
                .attr(""cy"", d => y(d['Net Income']))
                .style(""opacity"", 1);
        });
    </script>
</body>
</html>
```",Initialization Error,527,528
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Net Income of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Line Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke-width: 2px;
        }
        .line:hover {
            opacity: 0.8;
        }
        .axis {
            font: 10px sans-serif;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>

    <script>
        const margin = { top: 20, right: 30, bottom: 30, left: 40 },
            width = 800 - margin.left - margin.right,
            height = 400 - margin.top - margin.bottom;

        const svg = d3.select(""svg"").append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            const parseQuarter = d3.timeParse(""%Y Q%q"");
            const seriesData = d3.group(data, d => d.Company);

            const x = d3.scaleTime()
                .domain(d3.extent(data, d => parseQuarter(d.Quarter)))
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => +d['Net Income'])])
                .range([height, 0]);

            const xAxis = d3.axisBottom(x).ticks(6);
            const yAxis = d3.axisLeft(y);

            svg.append(""g"")
                .attr(""class"", ""axis x-axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(xAxis);

            svg.append(""g"")
                .attr(""class"", ""axis y-axis"")
                .call(yAxis);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const lineGenerator = d3.line()
                .x(d => x(parseQuarter(d.Quarter)))
                .y(d => y(+d['Net Income']));

            const lines = svg.selectAll("".line"")
                .data(seriesData)
                .enter().append(""g"")
                .attr(""class"", ""line-group"");

            lines.append(""path"")
                .attr(""class"", ""line"")
                .attr(""fill"", ""none"")
                .attr(""stroke"", (d, i) => color(i))
                .attr(""d"", d => lineGenerator(d[1]))
                .on(""mouseover"", function() { d3.select(this).transition().duration(200).style(""opacity"", 0.5); })
                .on(""mouseout"", function() { d3.select(this).transition().duration(200).style(""opacity"", 1); });

            lines.append(""text"")
                .datum(d => ({ name: d[0], value: d[1][d[1].length - 1] }))
                .attr(""transform"", d => `translate(${x(parseQuarter(d.value.Quarter))},${y(+d.value['Net Income'])})`)
                .attr(""x"", 5)
                .attr(""dy"", "".35em"")
                .text(d => d.name);
        });
    </script>
</body>
</html>
```",Initialization Error,528,529
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .axis--x path,
        .axis--x line {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""960"" height=""500""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleBand().padding(0.1).range([0, width]),
              y = d3.scaleLinear().range([height, 0]);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            data.forEach(d => {
                d[""Net Income""] = +d[""Net Income""];
            });

            const filteredData = data.filter(d => d[""Quarter""] === ""Q1-2021"");
            x.domain(filteredData.map(d => d.Company));
            y.domain([0, d3.max(filteredData, d => d[""Net Income""])]);

            g.append(""g"").selectAll("".bar"")
                .data(filteredData)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => x(d.Company))
                .attr(""y"", d => y(d[""Net Income""]))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d[""Net Income""]));

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            const zoom = d3.zoom()
                .scaleExtent([1, 10])
                .translateExtent([[0, 0], [width, height]])
                .on(""zoom"", (event) => {
                    g.attr(""transform"", event.transform);
                    g.selectAll("".bar"").attr(""transform"", event.transform);
                    g.selectAll("".axis--x"").call(d3.axisBottom(x).scale(event.transform.rescaleX(x)));
                    g.selectAll("".axis--y"").call(d3.axisLeft(y).scale(event.transform.rescaleY(y)));
                });

            svg.call(zoom);
        });
    </script>
</body>
</html>
```",Execution Error,529,530
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
            cursor: grab;
        }
        .bar:hover {
            fill: orange;
        }
        .axis {
            font: 10px sans-serif;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const x = d3.scaleBand().range([0, width]).padding(0.1);
        const y = d3.scaleLinear().range([height, 0]);

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            data = data.filter(d => d.Quarter === ""Q1 2021"").map(d => {
                return {
                    Company: d.Company,
                    NetIncome: +d[""Net Income""]
                };
            });

            x.domain(data.map(d => d.Company));
            y.domain([0, d3.max(data, d => d.NetIncome)]);

            g.append(""g"")
                .selectAll("".bar"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => x(d.Company))
                .attr(""y"", d => y(d.NetIncome))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d.NetIncome))
                .call(d3.drag()
                    .on(""start"", dragStarted)
                    .on(""drag"", dragged)
                    .on(""end"", dragEnded));

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            function dragStarted(event) {
                d3.select(this).raise().classed(""active"", true);
            }

            function dragged(event, d) {
                const allBars = d3.selectAll("".bar"");
                const index = allBars.nodes().indexOf(this);
                const newIndex = Math.min(Math.max(0, index + Math.round(event.dy / 20)), data.length - 1);
                if (newIndex !== index) {
                    allBars.transition()
                        .attr(""y"", (d, i) => i === newIndex ? height - (d.NetIncome * (height / d3.max(data, d => d.NetIncome))) : allBars.nodes()[i].getAttribute(""y""))
                        .attr(""transform"", (d, i) => i < newIndex ? `translate(0, -20)` : `translate(0, 0)`);
                    const movedData = data.splice(index, 1)[0];
                    data.splice(newIndex, 0, movedData);
                    x.domain(data.map(d => d.Company));
                    g.selectAll("".bar"")
                     .data(data)
                     .transition()
                     .duration(100)
                     .attr(""x"", d => x(d.Company))
                     .attr(""y"", d => y(d.NetIncome))
                     .attr(""height"", d => height - y(d.NetIncome));
                }
            }

            function dragEnded(event) {
                d3.select(this).classed(""active"", false);
            }
        });
    </script>
</body>
</html>
```",Initialization Error,530,531
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Net Income.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Bar Chart</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }

        .bar:hover {
            fill: orange;
        }

        .axis--x path,
        .axis--x line {
            display: none;
        }

        .tooltip {
            position: absolute;
            text-align: center;
            width: auto;
            padding: 5px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }

        #sortMenu {
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <select id=""sortMenu"">
        <option value=""ascending"">Sort Ascending</option>
        <option value=""descending"">Sort Descending</option>
    </select>
    <svg width=""800"" height=""500""></svg>

    <script>
        const margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = 800 - margin.left - margin.right,
              height = 500 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleBand().range([0, width]).padding(0.1);
        const y = d3.scaleLinear().range([height, 0]);

        const tooltip = d3.select(""body"").append(""div"").attr(""class"", ""tooltip"").style(""opacity"", 0);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(function(data) {
            data.forEach(d => {
                if (d.Quarter === ""Q1-2021"") {
                    d['Net Income'] = +d['Net Income'];
                }
            });

            const companies = data.filter(d => d.Quarter === ""Q1-2021"");

            function updateChart(order) {
                if (order === ""ascending"") {
                    companies.sort((a, b) => d3.ascending(a['Net Income'], b['Net Income']));
                } else {
                    companies.sort((a, b) => d3.descending(a['Net Income'], b['Net Income']));
                }

                x.domain(companies.map(d => d.Company));
                y.domain([0, d3.max(companies, d => d['Net Income'])]);

                svg.selectAll("".bar"").remove();
                svg.selectAll("".axis"").remove();

                const bars = svg.selectAll("".bar"")
                    .data(companies)
                    .enter().append(""rect"")
                    .attr(""class"", ""bar"")
                    .attr(""x"", d => x(d.Company))
                    .attr(""y"", d => y(d['Net Income']))
                    .attr(""width"", x.bandwidth())
                    .attr(""height"", d => height - y(d['Net Income']))
                    .on(""mouseover"", function(event, d) {
                        tooltip.transition().duration(200).style(""opacity"", .9);
                        tooltip.html(`${d.Company}<br>Net Income: $${d['Net Income'].toLocaleString()}`)
                            .style(""left"", (event.pageX + 5) + ""px"")
                            .style(""top"", (event.pageY - 28) + ""px"");
                    })
                    .on(""mouseout"", function() {
                        tooltip.transition().duration(500).style(""opacity"", 0);
                    });

                svg.selectAll("".bar"")
                    .transition()
                    .duration(800)
                    .attr(""y"", d => y(d['Net Income']))
                    .attr(""height"", d => height - y(d['Net Income']));

                const xAxis = d3.axisBottom(x);
                const yAxis = d3.axisLeft(y);

                svg.append(""g"")
                    .attr(""class"", ""axis axis--x"")
                    .attr(""transform"", `translate(0,${height})`)
                    .call(xAxis);

                svg.append(""g"")
                    .attr(""class"", ""axis axis--y"")
                    .call(yAxis);
            }

            updateChart(""ascending"");

            d3.select(""#sortMenu"").on(""change"", function() {
                const selectedOption = d3.select(this).property(""value"");
                updateChart(selectedOption);
            });
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,531,532
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot of Net Income vs Revenue</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const netIncome = [];
                const revenue = [];
                rows.forEach(row => {
                    const columns = row.split(',');
                    if (columns.length > 1) {
                        netIncome.push(parseFloat(columns[2]));
                        revenue.push(parseFloat(columns[3]));
                    }
                });

                const chartDom = document.getElementById('chart');
                const myChart = echarts.init(chartDom);

                const option = {
                    title: {
                        text: 'Net Income vs Revenue',
                    },
                    tooltip: {
                        trigger: 'item',
                        formatter: params => {
                            const netIncomeVal = params.data[0];
                            const revenueVal = params.data[1];
                            return `Net Income: ${netIncomeVal}<br/>Revenue: ${revenueVal}`;
                        }
                    },
                    xAxis: {
                        name: 'Net Income',
                        type: 'value',
                    },
                    yAxis: {
                        name: 'Revenue',
                        type: 'value',
                    },
                    series: [{
                        symbolSize: 10,
                        data: netIncome.map((ni, idx) => [ni, revenue[idx]]),
                        type: 'scatter',
                    }]
                };

                myChart.setOption(option);
            })
            .catch(error => console.error('Error fetching the data:', error));
    </script>
</body>
</html>
```",Correct,532,533
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income vs Revenue Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 600px;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const netIncome = [];
                const revenue = [];
                const companyNames = [];

                rows.forEach(row => {
                    const columns = row.split(',');
                    if (columns.length > 1) {
                        companyNames.push(columns[1]);
                        netIncome.push(parseFloat(columns[2]));
                        revenue.push(parseFloat(columns[3]));
                    }
                });

                const option = {
                    title: {
                        text: 'Net Income vs Revenue Scatterplot'
                    },
                    tooltip: {
                        trigger: 'item',
                        formatter: function (params) {
                            return params.name + '<br/>' + 
                                   'Net Income: ' + params.value[1] + '<br/>' + 
                                   'Revenue: ' + params.value[0];
                        }
                    },
                    xAxis: {
                        name: 'Revenue',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Net Income',
                        type: 'value'
                    },
                    series: [{
                        name: 'Companies',
                        type: 'scatter',
                        data: revenue.map((rev, idx) => [rev, netIncome[idx], companyNames[idx]]),
                        emphasis: {
                            focus: 'series'
                        },
                        itemStyle: {
                            color: '#5470C6'
                        }
                    }]
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);

                chart.on('click', function (params) {
                    if (params.data) {
                        alert('You clicked on ' + params.data[2] + '\nNet Income: ' + params.data[1] + '\nRevenue: ' + params.data[0]);
                    }
                });

                chart.on('brushSelected', function (params) {
                    const selectedPoints = params.batch[0].selected;
                    let message = 'Selected Companies:\n';
                    selectedPoints.forEach(point => {
                        message += point.data[2] + '\n';
                    });
                    alert(message);
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,533,534
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income vs Revenue Scatterplot</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
</head>
<body>
    <div id=""scatterplot"" style=""width: 100%; height: 600px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1); // skip header
                
                const netIncome = [];
                const revenue = [];

                rows.forEach(row => {
                    const columns = row.split(',');
                    if (columns.length > 4) { // Ensure there are enough columns
                        netIncome.push(parseFloat(columns[2]));
                        revenue.push(parseFloat(columns[3]));
                    }
                });

                const myChart = echarts.init(document.getElementById('scatterplot'));

                const option = {
                    tooltip: {
                        formatter: function (params) {
                            return `Net Income: ${params.data[0]}<br/>Revenue: ${params.data[1]}`;
                        }
                    },
                    xAxis: {
                        name: 'Revenue',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Net Income',
                        type: 'value'
                    },
                    series: [{
                        symbolSize: 10,
                        data: netIncome.map((income, index) => [revenue[index], income]),
                        type: 'scatter'
                    }],
                    dataZoom: [{
                        type: 'inside',
                        xAxisIndex: [0],
                        filterMode: 'none'
                    }]
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,534,535
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Net Income and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Net Income vs Revenue Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1);
            const scatterData = rows.map(row => {
                const cols = row.split(',');
                return {
                    name: cols[1],
                    netIncome: parseFloat(cols[2]),
                    revenue: parseFloat(cols[3]),
                    url: `https://www.google.com/search?q=${encodeURIComponent(cols[1])}`
                };
            }).filter(item => !isNaN(item.netIncome) && !isNaN(item.revenue));

            const myChart = echarts.init(document.getElementById('main'));

            const option = {
                title: {
                    text: 'Net Income vs Revenue',
                },
                tooltip: {
                    formatter: function (params) {
                        return `${params.data.name}<br/>Net Income: ${params.data.netIncome}<br/>Revenue: ${params.data.revenue}`;
                    }
                },
                xAxis: {
                    name: 'Revenue',
                    type: 'value',
                },
                yAxis: {
                    name: 'Net Income',
                    type: 'value',
                },
                series: [{
                    symbolSize: 20,
                    data: scatterData.map(item => [item.revenue, item.netIncome, item]),
                    type: 'scatter',
                }]
            };

            myChart.setOption(option);

            myChart.on('click', function (params) {
                if (params.componentType === 'series') {
                    const clickedData = params.data[2];
                    window.open(clickedData.url, '_blank');
                }
            });
        });
    </script>
</body>
</html>
```",Correct,535,536
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot with query widgets showing the Net Income and Revenue of the given dataset. Add a slider to represent the Quarter.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 500px;""></div>
    <input type=""range"" id=""quarterSlider"" min=""1"" max=""4"" value=""1"" step=""1"" style=""width: 100%;"">
    <label for=""quarterSlider"">Quarter: <span id=""quarterLabel"">1</span></label>
    
    <script>
        let data;
        const quarterSlider = document.getElementById('quarterSlider');
        const quarterLabel = document.getElementById('quarterLabel');

        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(csvData => {
                const rows = csvData.split('\n').slice(1);
                data = rows.map(row => {
                    const cols = row.split(',');
                    return {
                        Quarter: parseInt(cols[0]),
                        Company: cols[1],
                        NetIncome: parseFloat(cols[2]),
                        Revenue: parseFloat(cols[3]),
                        Expenses: parseFloat(cols[4]),
                        EmployeeCount: parseInt(cols[5]),
                        Industry: cols[6],
                        StockPrice: parseFloat(cols[7])
                    };
                });
                updateChart(1);
            });

        function updateChart(quarter) {
            const filteredData = data.filter(d => d.Quarter === quarter);
            const netIncome = filteredData.map(d => d.NetIncome);
            const revenue = filteredData.map(d => d.Revenue);
            const companies = filteredData.map(d => d.Company);

            const option = {
                title: {
                    text: 'Net Income vs Revenue'
                },
                tooltip: {},
                xAxis: {
                    name: 'Revenue',
                    type: 'value'
                },
                yAxis: {
                    name: 'Net Income',
                    type: 'value'
                },
                series: [{
                    symbolSize: 10,
                    data: netIncome.map((ni, index) => [revenue[index], ni]),
                    type: 'scatter'
                }]
            };
            
            const chart = echarts.init(document.getElementById('main'));
            chart.setOption(option);
        }

        quarterSlider.addEventListener('input', function () {
            quarterLabel.textContent = this.value;
            updateChart(parseInt(this.value));
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,536,537
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot showing the Net Income of Alpha Inc. Add animated transitions that connect these points using lines in order.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Scatterplot</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.2/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const alphaIncData = rows
                    .map(row => row.split(','))
                    .filter(row => row[1] === 'Alpha Inc')
                    .map(row => ({
                        quarter: row[0],
                        netIncome: parseFloat(row[2]),
                        revenue: parseFloat(row[3]),
                        expenses: parseFloat(row[4]),
                        employeeCount: parseInt(row[5]),
                        industry: row[6],
                        stockPrice: parseFloat(row[7]),
                    }));

                const quarters = alphaIncData.map(item => item.quarter);
                const netIncomes = alphaIncData.map(item => item.netIncome);

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);
                const option = {
                    title: {
                        text: 'Net Income of Alpha Inc.',
                    },
                    xAxis: {
                        type: 'category',
                        data: quarters,
                    },
                    yAxis: {
                        type: 'value',
                    },
                    series: [{
                        type: 'line',
                        data: netIncomes,
                        animate: true,
                        lineSmooth: true,
                        label: {
                            show: true,
                            position: 'top'
                        },
                    }],
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,537,538
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Net Income of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Line Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const result = {};
                
                lines.forEach(line => {
                    const [quarter, company, netIncome] = line.split(',');
                    if (!result[company]) {
                        result[company] = { quarter: [], netIncome: [] };
                    }
                    result[company].quarter.push(quarter);
                    result[company].netIncome.push(parseFloat(netIncome));
                });

                const series = Object.keys(result).map(company => ({
                    name: company,
                    type: 'line',
                    data: result[company].netIncome,
                    smooth: true,
                }));

                const option = {
                    title: {
                        text: 'Net Income by Company',
                    },
                    tooltip: {
                        trigger: 'axis',
                    },
                    legend: {
                        data: Object.keys(result),
                    },
                    xAxis: {
                        type: 'category',
                        data: result[Object.keys(result)[0]].quarter,
                    },
                    yAxis: {
                        type: 'value',
                    },
                    series: series,
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);

                chart.on('mouseover', function (params) {
                    if (params.componentType === 'series') {
                        chart.dispatchAction({
                            type: 'highlight',
                            seriesIndex: params.seriesIndex,
                        });
                    }
                });

                chart.on('mouseout', function (params) {
                    if (params.componentType === 'series') {
                        chart.dispatchAction({
                            type: 'downplay',
                            seriesIndex: params.seriesIndex,
                        });
                    }
                });
            });
    </script>
</body>
</html>
```",Correct,538,539
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 400px;""></div>
    <script>
        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv');
            const data = await response.text();
            const rows = data.split('\n').slice(1);
            const companies = [];
            const netIncome = [];

            rows.forEach(row => {
                const values = row.split(',');
                if (values[0] === 'Q1-2021') {
                    companies.push(values[1]);
                    netIncome.push(parseFloat(values[2]));
                }
            });

            drawChart(companies, netIncome);
        }

        function drawChart(companies, netIncome) {
            const chartDom = document.getElementById('chart');
            const myChart = echarts.init(chartDom);
            const option = {
                title: {
                    text: 'Net Income for Each Company in Q1-2021',
                },
                tooltip: {},
                xAxis: {
                    type: 'category',
                    data: companies,
                },
                yAxis: {
                    type: 'value',
                },
                series: [{
                    name: 'Net Income',
                    type: 'bar',
                    data: netIncome,
                }],
                dataZoom: [
                    {
                        type: 'slider',
                        show: true,
                        start: 0,
                        end: 100,
                    },
                    {
                        type: 'inside',
                        start: 0,
                        end: 100,
                    }
                ],
                toolbox: {
                    feature: {
                        dataView: {},
                        magicType: { type: ['line', 'bar'] },
                        restore: {},
                        saveAsImage: {}
                    }
                }
            };

            myChart.setOption(option);
            window.addEventListener('resize', myChart.resize);
        }

        fetchData();
    </script>
</body>
</html>
```",Correct,539,540
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Net Income Bar Chart Q1-2021</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 600px;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1); // Skip header
                const q1_2021_data = rows
                    .map(row => row.split(','))
                    .filter(row => row[0] === 'Q1-2021')
                    .map(row => ({ company: row[1], netIncome: parseFloat(row[2]) }));

                const companies = q1_2021_data.map(item => item.company);
                const netIncomes = q1_2021_data.map(item => item.netIncome);

                const chart = echarts.init(document.getElementById('main'));

                const option = {
                    title: {
                        text: 'Net Income for Each Company in Q1-2021'
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: companies,
                        axisLabel: {
                            interval: 0,
                            rotate: 30
                        }
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        name: 'Net Income',
                        type: 'bar',
                        data: netIncomes,
                        draggable: true,
                    }],
                    animationDuration: 1000,
                    animationEasing: 'cubicInOut'
                };

                chart.setOption(option);

                // Enabling drag-and-drop functionality
                chart.on('mousedown', function (params) {
                    if (params.componentType === 'series') {
                        chart.dispatchAction({ type: 'down', seriesIndex: 0, dataIndex: params.dataIndex });
                    }
                });

                chart.on('mouseup', function (params) {
                    if (params.componentType === 'series') {
                        chart.dispatchAction({ type: 'up', seriesIndex: 0, dataIndex: params.dataIndex });
                    }
                });

                chart.on('drag', function (params) {
                    if (params.componentType === 'series') {
                        const newIndex = params.dataIndex;
                        const oldIndex = params.oldIndex;

                        if (newIndex !== oldIndex) {
                            const movedData = netIncomes[oldIndex];
                            netIncomes.splice(oldIndex, 1);
                            netIncomes.splice(newIndex, 0, movedData);
                            companies.splice(oldIndex, 1);
                            companies.splice(newIndex, 0, q1_2021_data[oldIndex].company);

                            chart.setOption({
                                xAxis: {
                                    data: companies
                                },
                                series: [{
                                    data: netIncomes
                                }]
                            });
                        }
                    }
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,540,541
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Net Income.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main { width: 600px; height: 400px; }
    </style>
</head>
<body>
    <div id=""main""></div>
    <select id=""sortOrder"" onchange=""updateChart()"">
        <option value=""desc"">Descending</option>
        <option value=""asc"">Ascending</option>
    </select>
    <script>
        let chartData = [];
        
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                rows.forEach(row => {
                    const cols = row.split(',');
                    if (cols[0] === 'Q1-2021') {
                        chartData.push({
                            Company: cols[1],
                            NetIncome: parseFloat(cols[2])
                        });
                    }
                });
                updateChart();
            });

        function updateChart() {
            const sortOrder = document.getElementById(""sortOrder"").value;
            const sortedData = chartData.sort((a, b) => sortOrder === 'asc' ? a.NetIncome - b.NetIncome : b.NetIncome - a.NetIncome);

            let companies = sortedData.map(d => d.Company);
            let netIncomes = sortedData.map(d => d.NetIncome);

            const option = {
                title: {
                    text: 'Net Income for Each Company in Q1-2021',
                    subtext: 'Bar Chart with Animated Transitions',
                },
                tooltip: {},
                xAxis: {
                    type: 'category',
                    data: companies,
                },
                yAxis: {
                    type: 'value'
                },
                series: [{
                    name: 'Net Income',
                    type: 'bar',
                    data: netIncomes,
                    animationDuration: 1000,
                }]
            };

            const myChart = echarts.init(document.getElementById('main'));
            myChart.setOption(option);
        }
    </script>
</body>
</html>
```",Correct,541,542
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income vs Revenue Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatter plot showing the relationship between Net Income and Revenue."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": {
                ""type"": ""circle"",
                ""tooltip"": true
            },
            ""encoding"": {
                ""x"": {
                    ""field"": ""Revenue"",
                    ""type"": ""quantitative"",
                    ""title"": ""Revenue""
                },
                ""y"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative"",
                    ""title"": ""Net Income""
                },
                ""color"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal""
                },
                ""size"": {
                    ""field"": ""Employee Count"",
                    ""type"": ""quantitative"",
                    ""title"": ""Employee Count""
                }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Unexpected Initial Result,542,543
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income vs Revenue Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm-vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm-vega-lite@5.2.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm-vega-embed@6.20.2""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            '$schema': 'https://vega.github.io/schema/vega-lite/v5.json',
            'description': 'A scatter plot showing the relationship between Net Income and Revenue.',
            'data': {
                'url': 'https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv',
                'format': {'type': 'csv'}
            },
            'mark': 'point',
            'selection': {
                'brush': {
                    'type': 'interval', 
                    'encodings': ['x', 'y']
                }
            },
            'encoding': {
                'x': {'field': 'Revenue', 'type': 'Q', 'title': 'Revenue'},
                'y': {'field': 'Net Income', 'type': 'Q', 'title': 'Net Income'},
                'opacity': {
                    'condition': {
                        'selection': 'brush',
                        'value': 1
                    },
                    'value': 0.2
                },
                'color': {'field': 'Company', 'type': 'nominal'}
            }
        };

        vegaEmbed('#vis', spec).then(result => {
            // Access the Vega View instance
            const view = result.view;

            // You can customize your view or attach events here if needed
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,543,544
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income vs Revenue Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.6""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatterplot showing the relationship between Net Income and Revenue."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Revenue"",
                    ""type"": ""quantitative"",
                    ""title"": ""Revenue""
                },
                ""y"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative"",
                    ""title"": ""Net Income""
                },
                ""color"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal"",
                    ""legend"": {
                        ""title"": ""Company""
                    }
                }
            },
            ""config"": {
                ""interaction"": {
                    ""type"": ""zoom"",
                    ""scale"": ""both""
                }
            }
        };

        vegaEmbed('#vis', spec, {""renderer"": ""canvas""})
            .then(function(result) {
                // Access the Vega View instance
                const view = result.view;

                // Enable zooming using the mouse wheel
                view.addSignalListener('zoom', (name, value) => {
                    view.zoom(value);
                });

            })
            .catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,544,545
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Net Income and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Net Income vs Revenue</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.4.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
<div id=""vis""></div>
<script type=""text/javascript"">
    const spec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""title"": ""Net Income vs Revenue"",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
            ""format"": {
                ""type"": ""csv""
            }
        },
        ""mark"": ""point"",
        ""encoding"": {
            ""x"": {
                ""field"": ""Revenue"",
                ""type"": ""quantitative"",
                ""title"": ""Revenue""
            },
            ""y"": {
                ""field"": ""Net Income"",
                ""type"": ""quantitative"",
                ""title"": ""Net Income""
            },
            ""tooltip"": [
                {""field"": ""Company"", ""type"": ""nominal"", ""title"": ""Company""},
                {""field"": ""Net Income"", ""type"": ""quantitative"", ""title"": ""Net Income""},
                {""field"": ""Revenue"", ""type"": ""quantitative"", ""title"": ""Revenue""},
                {""field"": ""Stock Price"", ""type"": ""quantitative"", ""title"": ""Stock Price""}
            ]
        },
        ""selection"": {
            ""mySelector"": {
                ""type"": ""single"",
                ""fields"": [""Company""],
                ""on"": ""mouseover""
            }
        }
    };

    vegaEmbed('#vis', spec).then(function(result) {
        const view = result.view;
        view.addEventListener('click', function(event, item) {
            if (item && item.mark) {
                const company = item.datum.Company;
                const googleSearchUrl = `https://www.google.com/search?q=${company}`;
                window.open(googleSearchUrl, '_blank');
            }
        });
    }).catch(console.error);
</script>
</body>
</html>
```",Correct,545,546
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot with query widgets showing the Net Income and Revenue of the given dataset. Add a slider to represent the Quarter.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Financial Data Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Quarter === quarter""
                }
            ],
            ""params"": [
                {
                    ""name"": ""quarter"",
                    ""select"": {
                        ""type"": ""point"",
                        ""fields"": [""Quarter""],
                        ""init"": {""Quarter"": ""Q1 2020""},
                        ""bind"": {
                            ""input"": ""range"",
                            ""min"": 1,
                            ""max"": 4,
                            ""step"": 1
                        }
                    }
                }
            ],
            ""mark"": ""circle"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Revenue"",
                    ""type"": ""quantitative"",
                    ""title"": ""Revenue""
                },
                ""y"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative"",
                    ""title"": ""Net Income""
                },
                ""color"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal"",
                    ""title"": ""Company""
                },
                ""tooltip"": [
                    {""field"": ""Company"", ""type"": ""nominal""},
                    {""field"": ""Quarter"", ""type"": ""nominal""},
                    {""field"": ""Revenue"", ""type"": ""quantitative""},
                    {""field"": ""Net Income"", ""type"": ""quantitative""}
                ]
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Initialization Error,546,547
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot showing the Net Income of Alpha Inc. Add animated transitions that connect these points using lines in order.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Alpha Inc. Net Income Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": { ""type"": ""csv"" }
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""field"": ""Company"",
                        ""equal"": ""Alpha Inc.""
                    }
                }
            ],
            ""mark"": {
                ""type"": ""point"",
                ""tooltip"": true
            },
            ""encoding"": {
                ""x"": {
                    ""field"": ""Quarter"",
                    ""type"": ""ordinal"",
                    ""axis"": { ""title"": ""Quarter"" }
                },
                ""y"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative"",
                    ""axis"": { ""title"": ""Net Income"" }
                },
                ""color"": { ""value"": ""blue"" }
            },
            ""config"": {
                ""mark"": {
                    ""interpolate"": ""monotone"",
                    ""line"": true
                },
                ""view"": {
                    ""stroke"": null,
                    ""fill"": ""lightgray""
                }
            },
            ""animation"": {
                ""duration"": 1000,
                ""easing"": ""linear""
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            console.log(result);
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,547,548
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Net Income of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Line Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>

<div id=""vis""></div>

<script>
const spec = {
  ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
  ""description"": ""A multi-series line chart of Net Income by Company."",
  ""data"": {
    ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
    ""format"": {""type"": ""csv""}
  },
  ""mark"": ""line"",
  ""encoding"": {
    ""x"": {
      ""field"": ""Quarter"",
      ""type"": ""temporal"",
      ""axis"": {""title"": ""Quarter""}
    },
    ""y"": {
      ""field"": ""Net Income"",
      ""type"": ""quantitative"",
      ""axis"": {""title"": ""Net Income""}
    },
    ""color"": {
      ""field"": ""Company"",
      ""type"": ""nominal"",
      ""legend"": {""title"": ""Company""}
    },
    ""tooltip"": [
      {""field"": ""Quarter"", ""title"": ""Quarter""},
      {""field"": ""Company"", ""title"": ""Company""},
      {""field"": ""Net Income"", ""title"": ""Net Income""}
    ]
  },
  ""config"": {
    ""view"": {
      ""stroke"": ""transparent""
    },
    ""mark"": {
      ""tooltip"": true,
      ""strokeWidth"": 2
    },
    ""line"": {
      ""interpolate"": ""basis""
    }
  }
};

vegaEmbed('#vis', spec, {renderer: 'svg'}).then(result => {
  // Hover effect
  const hoverEffect = {
    ""signal"": ""hoverCompany"",
    ""on"": [
      {
        ""events"": ""mouse:over"",
        ""update"": ""datum.Company""
      },
      {
        ""events"": ""mouse:out"",
        ""update"": ""null""
      }
    ]
  };

  // Adding the hover effect
  result.view.addSignalListener('hoverCompany', (name, value) => {
    const update = {
      ""scale"": {
        ""color"": {
          ""domain"": value === null ? [] : [value],
          ""range"": [""#ccc"", ""#1f77b4""]
        }
      }
    };
    result.view.runAsync().then(() => {
      result.view.setState(update);
    });
  });
});
</script>

</body>
</html>
```",Initialization Error,548,549
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.9.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.1""></script>
</head>
<body>

<div id=""vis""></div>

<script>
    const spec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""title"": ""Net Income for Each Company in Q1-2021"",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
            ""format"": {
                ""type"": ""csv""
            }
        },
        ""transform"": [
            {
                ""filter"": ""datum.Quarter == 'Q1-2021'""
            }
        ],
        ""mark"": ""bar"",
        ""encoding"": {
            ""x"": {
                ""field"": ""Company"",
                ""type"": ""nominal"",
                ""axis"": {
                    ""title"": ""Company""
                }
            },
            ""y"": {
                ""field"": ""Net Income"",
                ""type"": ""quantitative"",
                ""axis"": {
                    ""title"": ""Net Income""
                }
            },
            ""color"": {
                ""field"": ""Company"",
                ""type"": ""nominal""
            }
        },
        ""config"": {
            ""view"": {
                ""continuousWidth"": 800,
                ""continuousHeight"": 400,
                ""stroke"": ""transparent""
            }
        }
    };

    vegaEmbed('#vis', spec, {renderer: 'svg'}).then(result => {
        // Add zoom and pan capabilities
        const view = result.view;
        view.addSignalListener('zoom', () => view.run());
        view.addSignalListener('pan', () => view.run());
    });
</script>

</body>
</html>
```",Initialization Error,549,550
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npmvega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.7.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Quarter === 'Q1-2021'""
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Company"",
                    ""type"": ""ordinal"",
                    ""title"": ""Company""
                },
                ""y"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative"",
                    ""title"": ""Net Income""
                },
                ""order"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative"",
                    ""sort"": ""descending""
                }
            },
            ""config"": {
                ""view"": {
                    ""stroke"": ""transparent""
                }
            }
        };

        vegaEmbed('#vis', spec, { actions: false }).then(function(result) {
            const view = result.view;

            // Enable drag and drop feature
            const dragHandler = view.addEventListener('drag', function(event) {
                const newPosition = event.offsetX; // get the new position
                // code logic to reorder bars based on dragging functionality
            });

            return view;
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,550,551
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Net Income.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
<div id=""vis""></div>
<script>
    const spec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
            ""format"": {
                ""type"": ""csv""
            }
        },
        ""transform"": [
            {
                ""filter"": ""datum.Quarter == 'Q1-2021'""
            }
        ],
        ""mark"": ""bar"",
        ""encoding"": {
            ""x"": {
                ""field"": ""Company"",
                ""type"": ""nominal"",
                ""title"": ""Company"",
                ""sort"": ""x""
            },
            ""y"": {
                ""field"": ""Net Income"",
                ""type"": ""quantitative"",
                ""title"": ""Net Income"",
                ""axis"": {
                    ""format"": ""$""
                }
            },
            ""color"": {
                ""field"": ""Net Income"",
                ""type"": ""quantitative"",
                ""scale"": {
                    ""scheme"": ""blues""
                }
            }
        },
        ""config"": {
            ""view"": {
                ""continuousWidth"": 600,
                ""continuousHeight"": 400
            }
        }
    };

    vegaEmbed('#vis', spec).then(function (result) {
        const sortButton = document.createElement('select');
        sortButton.innerHTML = `
            <option value=""descending"">Sort by Net Income: Descending</option>
            <option value=""ascending"">Sort by Net Income: Ascending</option>
        `;
        sortButton.onchange = function () {
            const order = sortButton.value;
            const updatedSpec = { ...spec };
            updatedSpec.encoding.x.sort = order === ""ascending"" ? ""ascending"" : ""descending"";
            vegaEmbed('#vis', updatedSpec);
        };
        document.body.appendChild(sortButton);
    }).catch(console.error);
</script>
</body>
</html>
```",Unexpected Initial Result,551,552
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Net Income and Revenue, and a Bar Chart on the right that displays Company versus Net Income.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Visualization</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        body {
            display: flex;
            justify-content: space-between;
            padding: 20px;
        }
        #scatterplot, #barchart {
            width: 45%;
            height: 400px;
        }
    </style>
</head>
<body>
    <div id=""scatterplot""></div>
    <div id=""barchart""></div>

    <script>
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            // Convert data types
            data.forEach(d => {
                d[""Net Income""] = +d[""Net Income""];
                d[""Revenue""] = +d[""Revenue""];
            });

            // Scatterplot
            const svgScatter = d3.select(""#scatterplot"").append(""svg"").attr(""width"", 400).attr(""height"", 400);
            const xScale = d3.scaleLinear().domain([d3.min(data, d => d[""Revenue""]), d3.max(data, d => d[""Revenue""])]).range([0, 400]);
            const yScale = d3.scaleLinear().domain([d3.min(data, d => d[""Net Income""]), d3.max(data, d => d[""Net Income""])]).range([400, 0]);

            svgScatter.selectAll(""circle"")
                .data(data)
                .enter().append(""circle"")
                .attr(""cx"", d => xScale(d[""Revenue""]))
                .attr(""cy"", d => yScale(d[""Net Income""]))
                .attr(""r"", 5)
                .attr(""fill"", ""blue"");

            svgScatter.append(""g"").attr(""transform"", ""translate(0,400)"").call(d3.axisBottom(xScale));
            svgScatter.append(""g"").call(d3.axisLeft(yScale));

            // Bar Chart
            const svgBar = d3.select(""#barchart"").append(""svg"").attr(""width"", 400).attr(""height"", 400);
            const yBarScale = d3.scaleBand().domain(data.map(d => d.Company)).range([0, 400]).padding(0.1);
            const xBarScale = d3.scaleLinear().domain([0, d3.max(data, d => d[""Net Income""])]).range([0, 400]);

            svgBar.selectAll(""rect"")
                .data(data)
                .enter().append(""rect"")
                .attr(""x"", 0)
                .attr(""y"", d => yBarScale(d.Company))
                .attr(""width"", d => xBarScale(d[""Net Income""]))
                .attr(""height"", yBarScale.bandwidth())
                .attr(""fill"", ""orange"");

            svgBar.append(""g"").attr(""transform"", ""translate(0,0)"").call(d3.axisLeft(yBarScale));
            svgBar.append(""g"").attr(""transform"", ""translate(0,400)"").call(d3.axisBottom(xBarScale));
        });
    </script>
</body>
</html>
```",Initialization Error,552,553
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Net Income and Revenue, and a Bar Chart on the right that displays Company versus Net Income. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Visualization</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .chart {
            display: inline-block;
            margin: 10px;
        }

        .scatter circle {
            fill: steelblue;
            cursor: pointer;
        }

        .bar {
            fill: orange;
        }

        .highlight {
            fill: red !important;
        }
    </style>
</head>
<body>
    <div class=""chart"" id=""scatterplot""></div>
    <div class=""chart"" id=""barchart""></div>

    <script>
        const width = 500;
        const height = 400;

        const svgScatter = d3.select(""#scatterplot"")
            .append(""svg"")
            .attr(""width"", width)
            .attr(""height"", height);

        const svgBar = d3.select(""#barchart"")
            .append(""svg"")
            .attr(""width"", width)
            .attr(""height"", height);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            data.forEach(d => {
                d['Net Income'] = +d['Net Income'];
                d['Revenue'] = +d['Revenue'];
            });

            const xScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Revenue'])])
                .range([0, width]);

            const yScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Net Income'])])
                .range([height, 0]);

            svgScatter.selectAll(""circle"")
                .data(data)
                .enter()
                .append(""circle"")
                .attr(""cx"", d => xScale(d['Revenue']))
                .attr(""cy"", d => yScale(d['Net Income']))
                .attr(""r"", 5)
                .on(""mouseover"", function(event, d) {
                    d3.select(this).transition().duration(100).attr(""r"", 8);
                })
                .on(""mouseout"", function(event, d) {
                    d3.select(this).transition().duration(100).attr(""r"", 5);
                });

            svgScatter.append(""g"")
                .attr(""transform"", ""translate(0,"" + height + "")"")
                .call(d3.axisBottom(xScale));

            svgScatter.append(""g"")
                .call(d3.axisLeft(yScale));

            svgBar.selectAll(""rect"")
                .data(data)
                .enter()
                .append(""rect"")
                .attr(""x"", (d, i) => i * (width / data.length))
                .attr(""y"", d => yScale(d['Net Income']))
                .attr(""width"", width / data.length - 1)
                .attr(""height"", d => height - yScale(d['Net Income']))
                .attr(""class"", ""bar"")
                .on(""mouseover"", function(event, d) {
                    d3.select(this).transition().duration(100).attr(""fill"", ""yellow"");
                })
                .on(""mouseout"", function(event, d) {
                    d3.select(this).transition().duration(100).attr(""fill"", ""orange"");
                });

            svgBar.append(""g"")
                .call(d3.axisLeft(yScale).ticks(5));

            // Brushing
            const brush = d3.brush()
                .extent([[0, 0], [width, height]])
                .on(""brush end"", brushed);

            svgScatter.append(""g"")
                .attr(""class"", ""brush"")
                .call(brush);

            function brushed(event) {
                const selection = event.selection;
                if (selection) {
                    const [[x0, y0], [x1, y1]] = selection;

                    svgScatter.selectAll(""circle"")
                        .attr(""class"", d => {
                            if (xScale(d['Revenue']) >= x0 && xScale(d['Revenue']) <= x1 && 
                                yScale(d['Net Income']) >= y0 && yScale(d['Net Income']) <= y1) {
                                return ""highlight"";
                            } else {
                                return """";
                            }
                        });

                    const selectedCompanies = data.filter(d => 
                        xScale(d['Revenue']) >= x0 &&
                        xScale(d['Revenue']) <= x1 &&
                        yScale(d['Net Income']) >= y0 &&
                        yScale(d['Net Income']) <= y1
                    ).map(d => d['Company']);

                    svgBar.selectAll(""rect"")
                        .attr(""class"", d => selectedCompanies.includes(d['Company']) ? ""bar highlight"" : ""bar"");
                }
            }
        });
    </script>
</body>
</html>
```",Correct,553,554
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Net Income , while the pie chart represents the distribution of Revenue.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Visualization</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .line-chart {
            margin-bottom: 50px;
        }
        .pie-chart {
            width: 400px;
            height: 400px;
        }
    </style>
</head>
<body>
    <div class=""line-chart""></div>
    <div class=""pie-chart""></div>
    
    <script>
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            data.forEach(d => {
                d['Net Income'] = +d['Net Income'];
                d['Revenue'] = +d['Revenue'];
            });

            // Line Chart for Net Income
            const lineSvg = d3.select("".line-chart"").append(""svg"").attr(""width"", 600).attr(""height"", 400);
            const xScale = d3.scaleTime().domain(d3.extent(data, d => new Date(d['Quarter']))).range([0, 580]);
            const yScale = d3.scaleLinear().domain([0, d3.max(data, d => d['Net Income'])]).range([380, 20]);
            
            const lineGen = d3.line()
                .x(d => xScale(new Date(d['Quarter'])))
                .y(d => yScale(d['Net Income']));

            lineSvg.append(""path"")
                .attr(""d"", lineGen(data))
                .attr(""fill"", ""none"")
                .attr(""stroke"", ""blue"")
                .attr(""stroke-width"", 2);

            lineSvg.append(""g"").attr(""transform"", ""translate(0,380)"").call(d3.axisBottom(xScale));
            lineSvg.append(""g"").attr(""transform"", ""translate(0,0)"").call(d3.axisLeft(yScale)); 

            // Pie Chart for Revenue
            const pieSvg = d3.select("".pie-chart"").append(""svg"").attr(""width"", 400).attr(""height"", 400);
            const radius = Math.min(400, 400) / 2;
            const g = pieSvg.append(""g"").attr(""transform"", ""translate(200,200)"");

            const pie = d3.pie().value(d => d['Revenue']);
            const arc = d3.arc().innerRadius(0).outerRadius(radius);
            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const pieData = pie(data);

            g.selectAll("".arc"")
                .data(pieData)
                .enter().append(""g"")
                .attr(""class"", ""arc"")
                .append(""path"")
                .attr(""d"", arc)
                .style(""fill"", (d, i) => color(i));
        });
    </script>
</body>
</html>
```",Initialization Error,554,555
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Net Income , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Visualization</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .chart {
            margin: 20px;
        }
        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 2px;
        }
        .arc {
            stroke: #fff;
        }
    </style>
</head>
<body>
    <div class=""chart"" id=""line-chart""></div>
    <div class=""chart"" id=""pie-chart""></div>

    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 50 },
              width = 800 - margin.left - margin.right,
              height = 400 - margin.top - margin.bottom;

        const svgLine = d3.select(""#line-chart"").append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
          .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const svgPie = d3.select(""#pie-chart"").append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
          .append(""g"")
            .attr(""transform"", `translate(${width / 2 + margin.left},${height / 2 + margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            data.forEach(d => {
                d[""Net Income""] = +d[""Net Income""];
                d[""Revenue""] = +d[""Revenue""];
                d[""Quarter""] = d[""Quarter""];
            });

            const x = d3.scaleBand()
                .domain(data.map(d => d.Quarter))
                .range([0, width])
                .padding(0.1);
                
            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Net Income""])])
                .range([height, 0]);

            svgLine.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svgLine.append(""g"")
                .attr(""class"", ""y axis"")
                .call(d3.axisLeft(y));

            const line = d3.line()
                .x(d => x(d.Quarter) + x.bandwidth() / 2)
                .y(d => y(d[""Net Income""]));

            svgLine.append(""path"")
                .datum(data)
                .attr(""class"", ""line"")
                .attr(""d"", line);

            let currentData = data;

            const updatePieChart = (selectedData) => {
                svgPie.selectAll(""*"").remove();

                const pie = d3.pie()
                    .value(d => d.Revenue);
                    
                const arc = d3.arc()
                    .innerRadius(0)
                    .outerRadius(Math.min(width, height) / 2 - 1);

                const pieData = pie(selectedData);

                const g = svgPie.selectAll("".arc"")
                    .data(pieData)
                    .enter().append(""g"")
                    .attr(""class"", ""arc"");

                g.append(""path"")
                    .attr(""class"", ""arc"")
                    .attr(""d"", arc)
                    .style(""fill"", (d, i) => d3.schemeCategory10[i % 10]);

                g.append(""text"")
                    .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                    .attr(""dy"", "".35em"")
                    .text(d => d.data.Company);
            };

            updatePieChart(currentData);

            svgLine.selectAll("".line"")
                .on(""click"", function(event, d) {
                    const coords = d3.pointer(event);
                    const index = Math.floor(coords[0] / (width / data.length));
                    const selectedQuarter = data[index].Quarter;
                    const filteredData = data.filter(d => d.Quarter === selectedQuarter);
                    currentData = filteredData.length > 0 ? filteredData : currentData;
                    updatePieChart(currentData);
                });

        });
    </script>
</body>
</html>
```",Unexpected Execution Result,555,556
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Revenue, Expenses, Employee Count, and Stock Price. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot Matrix</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatterplot {
            display: inline-block;
            margin: 20px;
        }
        .cell {
            cursor: crosshair;
        }
        .highlight {
            fill: orange;
        }
    </style>
</head>
<body>
    <h1>Brushable Scatterplot Matrix</h1>
    <div id=""scatterplot-matrix""></div>
    
    <script>
        const margin = { top: 20, right: 20, bottom: 50, left: 50 };
        const width = 200 - margin.left - margin.right;
        const height = 200 - margin.top - margin.bottom;

        const dimensions = [""Revenue"", ""Expenses"", ""Employee Count"", ""Stock Price""];
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            // Convert data types
            dimensions.forEach(d => {
                data.forEach(row => {
                    row[d] = +row[d];
                });
            });

            const svg = d3.select(""#scatterplot-matrix"").append(""svg"")
                .attr(""width"", width * dimensions.length)
                .attr(""height"", height * dimensions.length);

            const xScale = {};
            const yScale = {};
            const brush = d3.brush();

            dimensions.forEach((dimX, i) => {
                dimensions.forEach((dimY, j) => {
                    const g = svg.append(""g"")
                        .attr(""class"", ""scatterplot cell"")
                        .attr(""transform"", `translate(${i * width}, ${j * height})`)
                        .on(""click"", brushed);

                    xScale[dimX] = d3.scaleLinear()
                        .domain(d3.extent(data, d => d[dimX]))
                        .range([0, width]);

                    yScale[dimY] = d3.scaleLinear()
                        .domain(d3.extent(data, d => d[dimY]))
                        .range([height, 0]);

                    g.append(""g"").selectAll(""circle"")
                        .data(data)
                        .enter().append(""circle"")
                        .attr(""cx"", d => xScale[dimX](d[dimX]))
                        .attr(""cy"", d => yScale[dimY](d[dimY]))
                        .attr(""r"", 3);

                    g.append(""g"")
                        .attr(""class"", ""x-axis"")
                        .attr(""transform"", `translate(0,${height})`)
                        .call(d3.axisBottom(xScale[dimX]));

                    g.append(""g"")
                        .attr(""class"", ""y-axis"")
                        .call(d3.axisLeft(yScale[dimY]));

                    g.append(""g"")
                        .attr(""class"", ""brush"")
                        .call(brush.x(xScale[dimX]).y(yScale[dimY]).on(""brush end"", brushed));

                    function brushed(event) {
                        const selection = d3.event.selection;
                        if (selection) {
                            const [[x0, y0], [x1, y1]] = selection;
                            const selectedData = data.filter(d => 
                                x0 <= xScale[dimX](d[dimX]) && xScale[dimX](d[dimX]) <= x1 && 
                                y0 <= yScale[dimY](d[dimY]) && yScale[dimY](d[dimY]) <= y1
                            );

                            svg.selectAll(""circle"").classed(""highlight"", false);
                            svg.selectAll(""circle"")
                                .filter(d => selectedData.includes(d))
                                .classed(""highlight"", true);
                        }
                    }
                });
            });
        });
    </script>
</body>
</html>
```",Initialization Error,556,557
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a brushable Scatterplot that visualizes the relationship between Net Income and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Brushable Scatterplot</title>
    <style>
        .scatterplot {
            border: 1px solid #ccc;
        }
        .brush .selection {
            fill: steelblue;
            fill-opacity: 0.3;
            stroke: #fff;
            stroke-width: 1.5px;
        }
        .tooltip {
            position: absolute;
            text-align: center;
            width: 60px;
            height: 28px;
            padding: 2px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
        table {
            margin-left: 30px;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid #ccc;
            padding: 5px;
            text-align: left;
        }
    </style>
</head>
<body>
    <svg class=""scatterplot"" width=""800"" height=""600""></svg>
    <div class=""tooltip"" style=""opacity:0;""></div>
    <table id=""data-table"">
        <thead>
            <tr>
                <th>Quarter</th>
                <th>Company</th>
                <th>Net Income</th>
                <th>Revenue</th>
                <th>Expenses</th>
                <th>Employee Count</th>
                <th>Industry</th>
                <th>Stock Price</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
    
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <script>
        const svg = d3.select("".scatterplot"");
        const margin = { top: 20, right: 30, bottom: 30, left: 40 };
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        const xAxis = g.append(""g"").attr(""class"", ""x axis"").attr(""transform"", `translate(0,${height})`);
        const yAxis = g.append(""g"").attr(""class"", ""y axis"");

        const brush = d3.brush().extent([[0, 0], [width, height]])
            .on(""brush end"", brushed);

        let data = [];

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(loadedData => {
            data = loadedData.map(d => ({
                Quarter: d.Quarter,
                Company: d.Company,
                NetIncome: +d['Net Income'],
                Revenue: +d.Revenue,
                Expenses: +d.Expenses,
                EmployeeCount: +d['Employee Count'],
                Industry: d.Industry,
                StockPrice: +d['Stock Price']
            }));

            x.domain(d3.extent(data, d => d.Revenue)).nice();
            y.domain(d3.extent(data, d => d.NetIncome)).nice();

            xAxis.call(d3.axisBottom(x));
            yAxis.call(d3.axisLeft(y));

            g.append(""g"")
                .attr(""class"", ""brush"")
                .call(brush);

            drawScatterplot();
        });

        function drawScatterplot() {
            g.selectAll(""circle"")
                .data(data)
                .enter().append(""circle"")
                .attr(""cx"", d => x(d.Revenue))
                .attr(""cy"", d => y(d.NetIncome))
                .attr(""r"", 5)
                .attr(""fill"", ""steelblue"")
                .on(""mouseover"", function(event, d) {
                    const tooltip = d3.select("".tooltip"");
                    tooltip.style(""opacity"", 1)
                           .html(""Net Income: "" + d.NetIncome + ""<br>Revenue: "" + d.Revenue)
                           .style(""left"", (event.pageX + 5) + ""px"")
                           .style(""top"", (event.pageY - 28) + ""px"");
                })
                .on(""mouseout"", function() {
                    d3.select("".tooltip"").style(""opacity"", 0);
                });
        }

        function brushed(event) {
            const selection = event.selection;
            if (!selection) return;

            const [[x0, y0], [x1, y1]] = selection;
            const selectedData = data.filter(d => x(d.Revenue) >= x0 && x(d.Revenue) <= x1 && 
                                                   y(d.NetIncome) >= y0 && y(d.NetIncome) <= y1);

            updateTable(selectedData.slice(0, 20));

            g.selectAll(""circle"")
                .attr(""fill"", d => selectedData.includes(d) ? ""orange"" : ""steelblue"");
        }

        function updateTable(selectedData) {
            const tbody = d3.select(""#data-table tbody"");
            tbody.selectAll(""tr"").remove();
            tbody.selectAll(""tr"")
                .data(selectedData).enter()
                .append(""tr"")
                .selectAll(""td"")
                .data(d => [d.Quarter, d.Company, d.NetIncome, d.Revenue, d.Expenses, 
                             d.EmployeeCount, d.Industry, d.StockPrice]).enter()
                .append(""td"")
                .text(d => d);
        }
    </script>
</body>
</html>
```",Correct,557,558
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a horizontal Bar Chart that shows all the data concerning Net Income, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }

        .bar:hover {
            fill: orange;
        }

        .axis-x path,
        .axis-x line {
            display: none;
        }

        .minimap {
            fill: lightgray;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const margin = { top: 20, right: 20, bottom: 20, left: 100 },
              width = 800 - margin.left - margin.right,
              height = 400 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            data.forEach(d => {
                d[""Net Income""] = +d[""Net Income""];
                d[""Company""] = d[""Company""];
            });

            const x = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Net Income""])])
                .range([0, width]);

            const y = d3.scaleBand()
                .domain(data.map(d => d[""Company""]))
                .range([0, height])
                .padding(0.1);

            const xAxis = d3.axisBottom(x).ticks(10);
            const yAxis = d3.axisLeft(y);

            svg.append(""g"")
                .call(yAxis);

            svg.append(""g"")
                .attr(""class"", ""axis-x"")
                .attr(""transform"", `translate(0, ${height})`)
                .call(xAxis);

            svg.selectAll("".bar"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", 0)
                .attr(""y"", d => y(d[""Company""]))
                .attr(""width"", d => x(d[""Net Income""]))
                .attr(""height"", y.bandwidth());

            const minimapWidth = 100;
            const minimapHeight = height / 2;
            const minimapX = width + 30;

            const minimapXScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Net Income""])])
                .range([0, minimapWidth]);

            const minimapYScale = d3.scaleBand()
                .domain(data.map(d => d[""Company""]))
                .range([0, minimapHeight])
                .padding(0.1);

            const minimap = svg.append(""g"")
                .attr(""transform"", `translate(${minimapX}, 0)`);

            minimap.selectAll("".minimap"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""minimap"")
                .attr(""x"", 0)
                .attr(""y"", d => minimapYScale(d[""Company""]))
                .attr(""width"", d => minimapXScale(d[""Net Income""]))
                .attr(""height"", minimapYScale.bandwidth());
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,558,559
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Net Income and Revenue, and a Bar Chart on the right that displays Company versus Net Income.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #container {
            display: flex;
        }
        #scatterplot {
            width: 50%;
            height: 400px;
        }
        #barchart {
            width: 50%;
            height: 400px;
        }
    </style>
</head>
<body>

<div id=""container"">
    <div id=""scatterplot""></div>
    <div id=""barchart""></div>
</div>

<script>
    fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1);
            const netIncome = [];
            const revenue = [];
            const companies = [];
            const incomeData = [];

            rows.forEach(row => {
                const cols = row.split(',');
                if (cols.length > 6) {
                    netIncome.push(parseFloat(cols[2]));
                    revenue.push(parseFloat(cols[3]));
                    companies.push(cols[1]);
                    incomeData.push({ name: cols[1], value: parseFloat(cols[2]) });
                }
            });

            const scatterChart = echarts.init(document.getElementById('scatterplot'));
            scatterChart.setOption({
                title: { text: 'Net Income vs Revenue' },
                tooltip: {},
                xAxis: { name: 'Revenue', type: 'value' },
                yAxis: { name: 'Net Income', type: 'value' },
                series: [{
                    symbolSize: 10,
                    data: netIncome.map((income, index) => [revenue[index], income]),
                    type: 'scatter'
                }]
            });

            const barChart = echarts.init(document.getElementById('barchart'));
            barChart.setOption({
                title: { text: 'Company vs Net Income' },
                tooltip: {},
                xAxis: {
                    type: 'category',
                    data: companies,
                    axisLabel: { interval: 0, rotate: 45 }
                },
                yAxis: { type: 'value' },
                series: [{
                    data: incomeData.map(item => item.value),
                    type: 'bar'
                }]
            });
        });
</script>

</body>
</html>
```",Correct,559,560
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Net Income and Revenue, and a Bar Chart on the right that displays Company versus Net Income. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Visualization</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
    <style>
        #chartContainer {
            display: flex;
            justify-content: space-between;
        }
        .chart {
            width: 45%;
            height: 500px;
        }
    </style>
</head>
<body>

<div id=""chartContainer"">
    <div id=""scatterPlot"" class=""chart""></div>
    <div id=""barChart"" class=""chart""></div>
</div>

<script>
    async function fetchData() {
        const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv');
        const data = await response.text();
        return parseCSV(data);
    }

    function parseCSV(data) {
        const rows = data.split('\n').slice(1);
        return rows.map(row => {
            const cols = row.split(',');
            return {
                Quarter: cols[0],
                Company: cols[1],
                NetIncome: parseFloat(cols[2]),
                Revenue: parseFloat(cols[3]),
                Expenses: parseFloat(cols[4]),
                EmployeeCount: parseInt(cols[5]),
                Industry: cols[6],
                StockPrice: parseFloat(cols[7])
            };
        }).filter(row => !isNaN(row.NetIncome) && !isNaN(row.Revenue));
    }

    function renderScatterPlot(data) {
        const scatterPlot = echarts.init(document.getElementById('scatterPlot'));
        
        scatterPlot.setOption({
            tooltip: {},
            xAxis: {
                name: 'Revenue',
            },
            yAxis: {
                name: 'Net Income',
            },
            series: [{
                symbolSize: 10,
                data: data.map(item => [item.Revenue, item.NetIncome]),
                type: 'scatter'
            }]
        });

        scatterPlot.on('brush:select', function (params) {
            const selectedPoints = params.batch[0].areas[0].dataIndex; 
            const selectedCompanies = selectedPoints.map(index => data[index].Company);
            highlightBarChart(selectedCompanies);
        });
    }

    function highlightBarChart(selectedCompanies) {
        const barChart = echarts.init(document.getElementById('barChart'));

        const filteredData = barData.filter(item => selectedCompanies.includes(item.Company));
        const companies = filteredData.map(item => item.Company);
        const netIncomes = filteredData.map(item => item.NetIncome);

        barChart.setOption({
            tooltip: {},
            xAxis: {
                data: companies,
            },
            yAxis: {},
            visualMap: {
                show: false,
                dimension: 0,
                pieces: selectedCompanies.map(company => ({ value: company, color: '#ff0000' })),
            },
            series: [{
                type: 'bar',
                data: netIncomes,
                itemStyle: {
                    color: function(params) {
                        return selectedCompanies.includes(companies[params.dataIndex]) ? '#ff0000' : '#3398DB';
                    }
                }
            }]
        });
    }

    async function init() {
        const data = await fetchData();
        window.barData = data;
        renderScatterPlot(data);
        highlightBarChart([]);
    }

    init();
</script>

</body>
</html>
```",Initialization Error,560,561
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Net Income , while the pie chart represents the distribution of Revenue.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""lineChart"" style=""width: 100%; height: 400px;""></div>
    <div id=""pieChart"" style=""width: 100%; height: 400px;""></div>

    <script>
        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv');
            const data = await response.text();
            const rows = data.split('\n').slice(1);
            const quarters = [];
            const netIncome = [];
            const revenueData = {};
            
            rows.forEach(row => {
                const columns = row.split(',');
                const quarter = columns[0];
                const company = columns[1];
                const netIncomeValue = parseFloat(columns[2]) || 0;
                const revenueValue = parseFloat(columns[3]) || 0;
                
                quarters.push(quarter);
                netIncome.push(netIncomeValue);
                
                if (revenueData[company]) {
                    revenueData[company] += revenueValue;
                } else {
                    revenueData[company] = revenueValue;
                }
            });

            drawLineChart(quarters, netIncome);
            drawPieChart(revenueData);
        }

        function drawLineChart(quarters, netIncome) {
            const myChart = echarts.init(document.getElementById('lineChart'));
            const option = {
                title: {
                    text: 'Net Income Trend'
                },
                tooltip: {},
                xAxis: {
                    type: 'category',
                    data: quarters
                },
                yAxis: {
                    type: 'value'
                },
                series: [{
                    name: 'Net Income',
                    type: 'line',
                    data: netIncome
                }]
            };
            myChart.setOption(option);
        }

        function drawPieChart(revenueData) {
            const myChart = echarts.init(document.getElementById('pieChart'));
            const pieData = Object.entries(revenueData).map(([company, revenue]) => ({
                name: company,
                value: revenue
            }));

            const option = {
                title: {
                    text: 'Revenue Distribution',
                    subtext: 'By Company',
                    left: 'center'
                },
                tooltip: {
                    trigger: 'item'
                },
                series: [{
                    type: 'pie',
                    radius: '50%',
                    data: pieData,
                    emphasis: {
                        itemStyle: {
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowColor: 'rgba(0, 0, 0, 0.5)'
                        }
                    }
                }]
            };
            myChart.setOption(option);
        }

        fetchData();
    </script>
</body>
</html>
```",Correct,561,562
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Net Income , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""lineChart"" style=""width: 100%; height: 400px;""></div>
    <div id=""pieChart"" style=""width: 100%; height: 400px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const chartData = rows.map(row => {
                    const cols = row.split(',');
                    return {
                        Quarter: cols[0],
                        Company: cols[1],
                        NetIncome: parseFloat(cols[2]),
                        Revenue: parseFloat(cols[3]),
                        Expenses: parseFloat(cols[4]),
                        EmployeeCount: parseInt(cols[5]),
                        Industry: cols[6],
                        StockPrice: parseFloat(cols[7])
                    };
                }).filter(row => !isNaN(row.NetIncome) && !isNaN(row.Revenue));
                
                drawLineChart(chartData);
                drawPieChart(chartData);
            });

        let lineChartInstance;
        let pieChartInstance;

        function drawLineChart(data) {
            const netIncomeData = data.map(item => item.NetIncome);
            const quarters = data.map(item => item.Quarter);

            lineChartInstance = echarts.init(document.getElementById('lineChart'));
            lineChartInstance.setOption({
                title: {
                    text: 'Net Income Trend'
                },
                xAxis: {
                    type: 'category',
                    data: quarters
                },
                yAxis: {
                    type: 'value'
                },
                series: [{
                    data: netIncomeData,
                    type: 'line',
                    smooth: true,
                }],
            });

            lineChartInstance.on('brush', params => {
                const selectedData = data.filter((item, index) => params.batch[0].areas[0].coordRange[0] <= index && index <= params.batch[0].areas[0].coordRange[1]);
                updatePieChart(selectedData);
            });
        }

        function drawPieChart(data) {
            const revenueData = {};

            data.forEach(item => {
                if (!revenueData[item.Industry]) {
                    revenueData[item.Industry] = 0;
                }
                revenueData[item.Industry] += item.Revenue;
            });

            const pieData = Object.entries(revenueData).map(([key, value]) => ({ name: key, value }));

            pieChartInstance = echarts.init(document.getElementById('pieChart'));
            pieChartInstance.setOption({
                title: {
                    text: 'Revenue Distribution by Industry'
                },
                series: [{
                    type: 'pie',
                    radius: '50%',
                    data: pieData,
                    emphasis: {
                        itemStyle: {
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowColor: 'rgba(0, 0, 0, 0.5)'
                        }
                    }
                }],
            });
        }

        function updatePieChart(selectedData) {
            drawPieChart(selectedData);
        }

    </script>
</body>
</html>
```",Unexpected Execution Result,562,563
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Revenue, Expenses, Employee Count, and Stock Price. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        .container {
            display: flex;
            flex-wrap: wrap;
        }
        .chart {
            width: 400px;
            height: 400px;
            margin: 10px;
        }
    </style>
</head>
<body>
    <div class=""container"">
        <div id=""scatter-rr"" class=""chart""></div>
        <div id=""scatter-re"" class=""chart""></div>
        <div id=""scatter-rp"" class=""chart""></div>
        <div id=""scatter-ee"" class=""chart""></div>
        <div id=""scatter-ep"" class=""chart""></div>
        <div id=""scatter-pp"" class=""chart""></div>
    </div>
    <script>
        let dataset;

        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                dataset = rows.map(row => {
                    const cols = row.split(',');
                    return {
                        Revenue: +cols[3],
                        Expenses: +cols[4],
                        EmployeeCount: +cols[5],
                        StockPrice: +cols[7],
                    };
                });
                drawScatterplotMatrix();
            });

        function drawScatterplotMatrix() {
            const highlights = new Set();

            const optionConfig = (xKey, yKey) => ({
                tooltip: {},
                xAxis: { type: 'value', name: xKey },
                yAxis: { type: 'value', name: yKey },
                series: [{
                    type: 'scatter',
                    data: dataset.map(d => [d[xKey], d[yKey]]),
                    itemStyle: {
                        color: (params) => highlights.has(params.dataIndex) ? 'red' : '#3398DB',
                    },
                }],
                brush: {
                    toolbox: ['rect', 'polygon', 'keep', 'clear'],
                },
            });

            const charts = [
                { id: 'scatter-rr', x: 'Revenue', y: 'Revenue' },
                { id: 'scatter-re', x: 'Revenue', y: 'Expenses' },
                { id: 'scatter-rp', x: 'Revenue', y: 'StockPrice' },
                { id: 'scatter-ee', x: 'Expenses', y: 'Expenses' },
                { id: 'scatter-ep', x: 'Expenses', y: 'StockPrice' },
                { id: 'scatter-pp', x: 'StockPrice', y: 'StockPrice' },
            ];

            charts.forEach(chart => {
                const chartElem = echarts.init(document.getElementById(chart.id));
                chartElem.setOption(optionConfig(chart.x, chart.y));
                chartElem.on('brushSelected', params => {
                    highlights.clear();
                    params.batch.forEach(batch => {
                        batch.selected.forEach(item => {
                            item.dataIndex.forEach(index => highlights.add(index));
                        });
                    });
                    charts.forEach(c => {
                        echarts.init(document.getElementById(c.id)).setOption(optionConfig(c.x, c.y));
                    });
                });
            });
        }
    </script>
</body>
</html>
```",Unexpected Initial Result,563,564
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a brushable Scatterplot that visualizes the relationship between Net Income and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 70%;
            height: 600px;
            float: left;
        }
        #table {
            width: 30%;
            height: 600px;
            float: right;
            overflow: auto;
            border: 1px solid #ccc;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            padding: 8px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
    </style>
</head>
<body>

<div id=""main""></div>
<div id=""table"">
    <table>
        <thead>
            <tr>
                <th>Quarter</th>
                <th>Company</th>
                <th>Net Income</th>
                <th>Revenue</th>
                <th>Expenses</th>
                <th>Employee Count</th>
                <th>Industry</th>
                <th>Stock Price</th>
            </tr>
        </thead>
        <tbody id=""table-body"">
        </tbody>
    </table>
</div>

<script>
    const myChart = echarts.init(document.getElementById('main'));

    fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
        .then(response => response.text())
        .then(data => {
            const lines = data.split('\n').slice(1);
            const parsedData = lines.map(line => {
                const [quarter, company, netIncome, revenue, expenses, employeeCount, industry, stockPrice] = line.split(',');
                return {
                    Quarter: quarter,
                    Company: company,
                    NetIncome: parseFloat(netIncome),
                    Revenue: parseFloat(revenue),
                    Expenses: parseFloat(expenses),
                    EmployeeCount: parseInt(employeeCount, 10),
                    Industry: industry,
                    StockPrice: parseFloat(stockPrice)
                };
            }).filter(item => !isNaN(item.NetIncome) && !isNaN(item.Revenue));

            myChart.setOption({
                title: { text: 'Net Income vs Revenue' },
                tooltip: {},
                xAxis: { name: 'Revenue', type: 'value' },
                yAxis: { name: 'Net Income', type: 'value' },
                series: [{
                    symbolSize: 10,
                    data: parsedData.map(item => [item.Revenue, item.NetIncome]),
                    type: 'scatter'
                }]
            });

            myChart.on('brushSelected', params => {
                const selectedPoints = params.batch[0].selected[0].dataIndex;
                const selectedData = selectedPoints.map(idx => parsedData[idx]).slice(0, 20);
                const tableBody = document.getElementById('table-body');
                tableBody.innerHTML = selectedData.map(item => 
                    `<tr>
                        <td>${item.Quarter}</td>
                        <td>${item.Company}</td>
                        <td>${item.NetIncome}</td>
                        <td>${item.Revenue}</td>
                        <td>${item.Expenses}</td>
                        <td>${item.EmployeeCount}</td>
                        <td>${item.Industry}</td>
                        <td>${item.StockPrice}</td>
                    </tr>`
                ).join('');
            });
        });
</script>

</body>
</html>
```",Correct,564,565
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a horizontal Bar Chart that shows all the data concerning Net Income, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 80%; height: 600px; margin: auto;""></div>
    <div id=""minimap"" style=""width: 20%; height: 300px; position: absolute; right: 0; top: 0;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const quarters = [];
                const netIncome = [];
                rows.forEach(row => {
                    const cols = row.split(',');
                    if (cols.length > 1) {
                        quarters.push(cols[0]);
                        netIncome.push(parseFloat(cols[2]));
                    }
                });

                const mainChart = echarts.init(document.getElementById('main'));
                const minimapChart = echarts.init(document.getElementById('minimap'));

                const mainOption = {
                    title: { text: 'Net Income by Quarter' },
                    tooltip: {},
                    xAxis: {
                        type: 'value',
                        name: 'Net Income',
                    },
                    yAxis: {
                        type: 'category',
                        data: quarters,
                    },
                    series: [{
                        name: 'Net Income',
                        type: 'bar',
                        data: netIncome
                    }]
                };

                const minimapOption = {
                    title: { text: 'Minimap of Net Income' },
                    tooltip: {},
                    xAxis: {
                        type: 'value',
                        name: 'Net Income',
                    },
                    yAxis: {
                        type: 'category',
                        data: quarters,
                    },
                    series: [{
                        name: 'Net Income',
                        type: 'bar',
                        data: netIncome.map(value => value > 0 ? value : 0)  // Overlaying the minimap as a positive representation
                    }]
                };

                mainChart.setOption(mainOption);
                minimapChart.setOption(minimapOption);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,565,566
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Net Income and Revenue, and a Bar Chart on the right that displays Company versus Net Income.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.8.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2""></script>
    <style>
        #vis {
            display: flex;
            justify-content: space-between;
        }
        #scatterplot, #barchart {
            width: 45%;
        }
    </style>
</head>
<body>
    <div id=""vis"">
        <div id=""scatterplot""></div>
        <div id=""barchart""></div>
    </div>

    <script>
        const scatterplotSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {""field"": ""Revenue"", ""type"": ""quantitative""},
                ""y"": {""field"": ""Net Income"", ""type"": ""quantitative""},
                ""color"": {""field"": ""Company"", ""type"": ""nominal""}
            },
            ""width"": 400,
            ""height"": 300
        };

        const barchartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {""field"": ""Company"", ""type"": ""ordinal""},
                ""y"": {""field"": ""Net Income"", ""type"": ""quantitative""}
            },
            ""width"": 400,
            ""height"": 300
        };

        vegaEmbed('#scatterplot', scatterplotSpec);
        vegaEmbed('#barchart', barchartSpec);
    </script>
</body>
</html>
```",Correct,566,567
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Net Income and Revenue, and a Bar Chart on the right that displays Company versus Net Income. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.13.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.3""></script>
    <style>
        #vis {
            display: flex;
        }
        .chart {
            width: 50%;
            padding: 10px;
        }
    </style>
</head>
<body>
    <div id=""vis"">
        <div class=""chart"" id=""scatterPlot""></div>
        <div class=""chart"" id=""barChart""></div>
    </div>
    <script>
        const scatterPlotSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Revenue"",
                    ""type"": ""quantitative""
                },
                ""y"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal""
                },
                ""tooltip"": [
                    {""field"": ""Company"", ""type"": ""nominal""},
                    {""field"": ""Net Income"", ""type"": ""quantitative""},
                    {""field"": ""Revenue"", ""type"": ""quantitative""}
                ]
            },
            ""selection"": {
                ""brush"": {
                    ""type"": ""interval"", ""encodings"": [""x"", ""y""]
                }
            }
        };

        const barChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": {""selection"": ""brush""}
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Company"",
                    ""type"": ""ordinal"",
                    ""axis"": { ""labelAngle"": 45 }
                },
                ""y"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal""
                }
            }
        };

        vegaEmbed('#scatterPlot', scatterPlotSpec).then(function (result) {
            vegaEmbed('#barChart', barChartSpec);
        });
    </script>
</body>
</html>
```",Initialization Error,567,568
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Net Income , while the pie chart represents the distribution of Revenue.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.3.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.1""></script>
</head>
<body>

<div id=""line-chart""></div>
<div id=""pie-chart""></div>

<script>
    const lineChartSpec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""description"": ""A line chart showing the trend of Net Income."",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
            ""format"": { ""type"": ""csv"" }
        },
        ""mark"": ""line"",
        ""encoding"": {
            ""x"": { ""field"": ""Quarter"", ""type"": ""ordinal"", ""title"": ""Quarter"" },
            ""y"": { ""field"": ""Net Income"", ""type"": ""quantitative"", ""title"": ""Net Income"" },
            ""color"": { ""field"": ""Company"", ""type"": ""nominal"", ""title"": ""Company"" }
        }
    };

    const pieChartSpec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""description"": ""A pie chart showing the distribution of Revenue."",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
            ""format"": { ""type"": ""csv"" }
        },
        ""mark"": {
            ""type"": ""arc"",
            ""tooltip"": true
        },
        ""encoding"": {
            ""theta"": { ""field"": ""Revenue"", ""type"": ""quantitative"" },
            ""color"": { ""field"": ""Company"", ""type"": ""nominal"" }
        }
    };

    vegaEmbed('#line-chart', lineChartSpec).then(function(result) {
        // Success, do nothing
    }).catch(console.error);

    vegaEmbed('#pie-chart', pieChartSpec).then(function(result) {
        // Success, do nothing
    }).catch(console.error);
</script>

</body>
</html>
```",Correct,568,569
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Net Income , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <h1>Financial Data Visualization</h1>
    <div id=""lineChart""></div>
    <div id=""pieChart""></div>
    
    <script>
        const dataUrl = ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"";

        const lineChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {""url"": dataUrl},
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": {""field"": ""Quarter"", ""type"": ""temporal""},
                ""y"": {""field"": ""Net Income"", ""type"": ""quantitative""},
                ""tooltip"": [
                    {""field"": ""Quarter"", ""type"": ""temporal""},
                    {""field"": ""Net Income"", ""type"": ""quantitative""}
                ]
            },
            ""selection"": {
                ""brush"": {
                    ""type"": ""interval"", ""encodings"": [""x""]
                }
            }
        };

        const pieChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {""url"": dataUrl},
            ""transform"": [
                {
                    ""filter"": {""field"": ""Quarter"", ""selection"": ""brush""}
                },
                {
                    ""aggregate"": [
                        {""op"": ""sum"", ""field"": ""Revenue"", ""as"": ""Total Revenue""}
                    ],
                    ""groupby"": [""Company""]
                }
            ],
            ""mark"": ""arc"",
            ""encoding"": {
                ""theta"": {""field"": ""Total Revenue"", ""type"": ""quantitative""},
                ""color"": {""field"": ""Company"", ""type"": ""nominal""}
            }
        };

        vegaEmbed('#lineChart', lineChartSpec).then(function(result) {
            const lineView = result.view;

            vegaEmbed('#pieChart', pieChartSpec);

            lineView.addSignalListener('brush', function(name, value) {
                lineView.signal('brush', value);
                lineView.run();
            });
        });
    </script>
</body>
</html>
```",Initialization Error,569,570
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Revenue, Expenses, Employee Count, and Stock Price. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Brushable Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.8.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2""></script>
    <style>
        .scatterplot-matrix {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            grid-template-rows: repeat(4, 1fr);
        }
    </style>
</head>
<body>

<div id=""vis"" class=""scatterplot-matrix""></div>

<script type=""text/javascript"">
    const dataUrl = ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"";

    const fields = [""Revenue"", ""Expenses"", ""Employee Count"", ""Stock Price""];
    const marks = [];

    fields.forEach((xField, xIndex) => {
        fields.forEach((yField, yIndex) => {
            marks.push({
                ""type"": ""point"",
                ""x"": { ""field"": xField },
                ""y"": { ""field"": yField },
                ""tooltip"": [
                    { ""field"": ""Company"" },
                    { ""field"": xField },
                    { ""field"": yField }
                ],
                ""fill"": { ""value"": ""lightgray"" },
                ""stroke"": { ""value"": ""black"" },
                ""strokeWidth"": { ""value"": 1 },
                ""opacity"": { ""expr"": ""datum.selected ? 1 : 0.5"" },
                ""select"": {
                    ""type"": ""point"",
                    ""on"": ""mouseover"",
                    ""clear"": ""mouseout"",
                    ""encodings"": [""x"", ""y""]
                }
            });
        });
    });

    const scatterplotMatrixSpec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""data"": { ""url"": dataUrl },
        ""layer"": marks,
        ""encoding"": {
            ""opacity"": { ""condition"": { ""selection"": ""brush"", ""value"": 1 }, ""value"": 0.5 }
        },
        ""resolve"": { ""scale"": { ""x"": ""independently"", ""y"": ""independently"" } },
        ""scales"": [
            {
                ""name"": ""x"",
                ""type"": ""linear"",
                ""domain"": { ""data"": ""source"", ""field"": ""x"" },
                ""range"": ""width""
            },
            {
                ""name"": ""y"",
                ""type"": ""linear"",
                ""domain"": { ""data"": ""source"", ""field"": ""y"" },
                ""range"": ""height""
            }
        ],
        ""selection"": {
            ""brush"": {
                ""type"": ""interval"",
                ""on"": ""mouseover"",
                ""encodings"": [""x"", ""y""]
            }
        },
        ""height"": 300,
        ""width"": 300
    };

    vegaEmbed('#vis', scatterplotMatrixSpec);
</script>

</body>
</html>
```",Initialization Error,570,571
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a brushable Scatterplot that visualizes the relationship between Net Income and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Brushable Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.22.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.5.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.18.0""></script>
</head>
<body>
    <div id=""scatterplot""></div>
    <div id=""table""></div>

    <script type=""text/javascript"">
        const dataUrl = ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"";

        const scatterplotSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": dataUrl,
                ""format"": {""type"": ""csv""}
            },
            ""width"": 500,
            ""height"": 300,
            ""transform"": [
                {
                    ""filter"": {""selection"": ""brush""}
                }
            ],
            ""selection"": {
                ""brush"": {
                    ""type"": ""interval"",
                    ""encodings"": [""x"", ""y""]
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Revenue"",
                    ""type"": ""quantitative""
                },
                ""y"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative""
                },
                ""tooltip"": [
                    {""field"": ""Company"", ""type"": ""nominal""},
                    {""field"": ""Net Income"", ""type"": ""quantitative""},
                    {""field"": ""Revenue"", ""type"": ""quantitative""},
                    {""field"": ""Expenses"", ""type"": ""quantitative""},
                    {""field"": ""Employee Count"", ""type"": ""quantitative""},
                    {""field"": ""Industry"", ""type"": ""nominal""},
                    {""field"": ""Stock Price"", ""type"": ""quantitative""}
                ]
            }
        };

        vegaEmbed('#scatterplot', scatterplotSpec).then(result => {
            const view = result.view;

            view.addEventListener('click', () => {
                const selectedData = view.data('table')
                    .filter(d => {
                        const brush = view.transforms[""brush""];
                        return brush && brush.filter.some(b => b[0] <= d.Revenue && d.Revenue <= b[1] && b[2] <= d['Net Income'] && d['Net Income'] <= b[3]);
                    })
                    .slice(0, 20); // Limit to first 20 results
                renderTable(selectedData);
            });

            view.run();
        });

        function renderTable(data) {
            const tableDiv = document.getElementById('table');
            tableDiv.innerHTML = '';
            if (data.length > 0) {
                const table = document.createElement('table');
                table.innerHTML = `<tr>
                    <th>Company</th>
                    <th>Net Income</th>
                    <th>Revenue</th>
                    <th>Expenses</th>
                    <th>Employee Count</th>
                    <th>Industry</th>
                    <th>Stock Price</th>
                </tr>`;
                data.forEach(row => {
                    const tr = document.createElement('tr');
                    tr.innerHTML = `<td>${row.Company}</td>
                                    <td>${row['Net Income']}</td>
                                    <td>${row.Revenue}</td>
                                    <td>${row.Expenses}</td>
                                    <td>${row['Employee Count']}</td>
                                    <td>${row.Industry}</td>
                                    <td>${row['Stock Price']}</td>`;
                    table.appendChild(tr);
                });
                tableDiv.appendChild(table);
            }
        }
    </script>
</body>
</html>
```",Initialization Error,571,572
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a horizontal Bar Chart that shows all the data concerning Net Income, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Horizontal Bar Chart with Minimap</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.22.1""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.4.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""main-chart""></div>
    <div id=""minimap""></div>

    <script type=""text/javascript"">
        const mainChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative"",
                    ""title"": ""Net Income""
                },
                ""y"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal"",
                    ""title"": ""Company"",
                    ""sort"": ""-x""
                },
                ""color"": {
                    ""field"": ""Industry"",
                    ""type"": ""nominal"",
                    ""legend"": {""title"": ""Industry""}
                }
            },
            ""width"": 400,
            ""height"": 300
        };

        const minimapSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative"",
                    ""title"": ""Net Income""
                },
                ""y"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal"",
                    ""title"": ""Company"",
                    ""sort"": ""-x""
                }
            },
            ""width"": 150,
            ""height"": 150,
            ""config"": {
                ""mark"": {""opacity"": 0.5}
            }
        };

        vegaEmbed('#main-chart', mainChartSpec);
        vegaEmbed('#minimap', minimapSpec);
    </script>
</body>
</html>
```",Unexpected Initial Result,572,573
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income vs Revenue Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter {
            fill: steelblue;
            opacity: 0.7;
        }
        .scatter:hover {
            opacity: 1;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script>
        const svg = d3.select(""svg""),
            margin = {top: 20, right: 30, bottom: 40, left: 40},
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom,
            g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            data.forEach(d => {
                d['Net Income'] = +d['Net Income'];
                d['Revenue'] = +d['Revenue'];
            });

            const x = d3.scaleLinear()
                .domain(d3.extent(data, d => d['Revenue'])).nice()
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain(d3.extent(data, d => d['Net Income'])).nice()
                .range([height, 0]);

            g.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x).ticks(6));

            g.append(""g"")
                .call(d3.axisLeft(y).ticks(6));

            g.append(""text"")
                .attr(""x"", width / 2)
                .attr(""y"", height + margin.bottom - 10)
                .style(""text-anchor"", ""middle"")
                .text(""Revenue"");

            g.append(""text"")
                .attr(""transform"", ""rotate(-90)"")
                .attr(""y"", 0 - margin.left + 10)
                .attr(""x"", 0 - (height / 2))
                .style(""text-anchor"", ""middle"")
                .text(""Net Income"");

            g.selectAll("".scatter"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""scatter"")
                .attr(""cx"", d => x(d['Revenue']))
                .attr(""cy"", d => y(d['Net Income']))
                .attr(""r"", 5);
        });
    </script>
</body>
</html>
```",Correct,573,574
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Line Chart that visualizes the trend of Net Income over the Quarter for each Company.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Trend</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line { fill: none; stroke-width: 2; }
        .axis { font: 10px sans-serif; }
        .axis path, .axis line { fill: none; shape-rendering: crispEdges; }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = {top: 20, right: 20, bottom: 30, left: 50},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            data.forEach(d => {
                d[""Net Income""] = +d[""Net Income""];
                d[""Quarter""] = d[""Quarter""];
            });

            const companies = Array.from(new Set(data.map(d => d.Company)));

            const x = d3.scaleBand()
                .domain(data.map(d => d[""Quarter""]))
                .rangeRound([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([d3.min(data, d => d[""Net Income""]), d3.max(data, d => d[""Net Income""])])
                .rangeRound([height, 0]);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const line = d3.line()
                .x(d => x(d[""Quarter""]) + x.bandwidth() / 2)
                .y(d => y(d[""Net Income""]));

            const companyData = companies.map(company => {
                return data.filter(d => d.Company === company);
            });

            color.domain(companies);

            companyData.forEach(company => {
                g.append(""path"")
                    .datum(company)
                    .attr(""class"", ""line"")
                    .attr(""d"", line)
                    .style(""stroke"", color(company[0].Company));
            });

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Correct,574,575
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis {
            font: 10px sans-serif;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            const filteredData = data.filter(d => d.Quarter === ""Q1-2021"");
            filteredData.forEach(d => {
                d[""Net Income""] = +d[""Net Income""];
            });

            const x = d3.scaleBand()
                .domain(filteredData.map(d => d.Company))
                .range([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([0, d3.max(filteredData, d => d[""Net Income""])])
                .nice()
                .range([height, 0]);

            g.append(""g"")
                .selectAll("".bar"")
                .data(filteredData)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => x(d.Company))
                .attr(""y"", d => y(d[""Net Income""]))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d[""Net Income""]));

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x).tickFormat(d => d).tickSize(0));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Correct,575,576
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Pie Chart that visualizes the proportion of Net Income contributed by each Company in Q1-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Pie Chart - Net Income by Company (Q1 2021)</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .slice {
            stroke: #ffffff;
        }
    </style>
</head>
<body>
    <svg width=""500"" height=""500""></svg>
    <script>
        const width = 500, height = 500, radius = Math.min(width, height) / 2;
        const svg = d3.select(""svg"").attr(""viewBox"", `0 0 ${width} ${height}`).append(""g"")
            .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            const filteredData = data.filter(d => d.Quarter === ""Q1 2021"");
            
            filteredData.forEach(d => {
                d['Net Income'] = +d['Net Income'];
            });

            const totalNetIncome = d3.sum(filteredData, d => d['Net Income']);
            const pieData = filteredData.map(d => ({company: d.Company, netIncome: d['Net Income'], percentage: d['Net Income'] / totalNetIncome}));

            const pie = d3.pie().value(d => d.netIncome);
            const arc = d3.arc().innerRadius(0).outerRadius(radius);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const arcs = svg.selectAll(""arc"")
                .data(pie(pieData))
                .enter().append(""g"").attr(""class"", ""arc"");

            arcs.append(""path"")
                .attr(""d"", arc)
                .attr(""fill"", (d, i) => color(i));

            arcs.append(""text"")
                .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                .attr(""dy"", "".35em"")
                .text(d => d.data.company);
        });
    </script>
</body>
</html>
```",Initialization Error,576,577
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Donut Chart that visualizes the distribution of Net Income among Company in Q1-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Donut Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .arc {
            stroke: #fff;
        }
    </style>
</head>
<body>
    <svg width=""500"" height=""500""></svg>
    <script>
        const width = 500;
        const height = 500;
        const radius = Math.min(width, height) / 2 - 10;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            const filteredData = data.filter(d => d.Quarter === ""Q1-2021"");
            
            const incomeData = filteredData.map(d => ({
                company: d.Company,
                netIncome: +d[""Net Income""]
            }));

            const pie = d3.pie()
                .value(d => d.netIncome);
            const arc = d3.arc()
                .innerRadius(radius * 0.5)
                .outerRadius(radius);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const arcs = svg.selectAll("".arc"")
                .data(pie(incomeData))
                .enter()
                .append(""g"")
                .attr(""class"", ""arc"");

            arcs.append(""path"")
                .attr(""d"", arc)
                .attr(""fill"", (d, i) => color(i))
                .attr(""stroke"", ""#fff"")
                .style(""stroke-width"", ""2px"");

            arcs.append(""text"")
                .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                .attr(""dy"", ""0.35em"")
                .text(d => d.data.company);
        });
    </script>
</body>
</html>
```",Correct,577,578
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Coxcomb Chart(polar area chart) to compare the Net Income of different Company in Q1-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coxcomb Chart - Net Income Q1 2021</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .arc {
            stroke: #fff;
        }
    </style>
</head>
<body>
    <svg width=""600"" height=""600""></svg>
    <script>
        const width = 600;
        const height = 600;
        const radius = Math.min(width, height) / 2;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            const filteredData = data.filter(d => d.Quarter === ""Q1 2021"");

            const netIncomeData = filteredData.map(d => ({
                company: d.Company,
                netIncome: +d[""Net Income""]
            }));

            const radiusScale = d3.scaleLinear()
                .domain([0, d3.max(netIncomeData, d => d.netIncome)])
                .range([0, radius]);

            const pie = d3.pie()
                .value(d => d.netIncome);

            const arc = d3.arc()
                .innerRadius(0)
                .outerRadius(d => radiusScale(d.data.netIncome));

            const arcs = svg.selectAll("".arc"")
                .data(pie(netIncomeData))
                .enter().append(""g"")
                .attr(""class"", ""arc"");

            arcs.append(""path"")
                .attr(""d"", arc)
                .attr(""fill"", (d, i) => d3.schemeCategory10[i % 10]);

            arcs.append(""text"")
                .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                .attr(""dy"", "".35em"")
                .text(d => d.data.company);
        });
    </script>
</body>
</html>
```",Initialization Error,578,579
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Radar Chart to compare the Net Income of different Company in Q1-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Radar Chart - Net Income Comparison</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .radar-chart {
            position: relative;
            width: 500px;
            height: 500px;
            margin: auto;
        }
        .radar-chart polygon {
            fill: rgba(50, 50, 255, 0.5);
            stroke-width: 2;
            cursor: pointer;
        }
        .radar-chart text {
            font-family: sans-serif;
            font-size: 12px;
            text-anchor: middle;
        }
    </style>
</head>
<body>
    <div class=""radar-chart""></div>
    <script>
        const margin = { top: 50, right: 50, bottom: 50, left: 50 };
        const width = 500 - margin.left - margin.right;
        const height = 500 - margin.top - margin.bottom;

        const radius = Math.min(width, height) / 2;
        
        const radarChart = d3.select("".radar-chart"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${(width / 2) + margin.left}, ${(height / 2) + margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            const filteredData = data.filter(d => d.Quarter === 'Q1-2021');

            const companies = filteredData.map(d => d.Company);
            const netIncomes = filteredData.map(d => +d[""Net Income""]);

            const angleSlice = Math.PI * 2 / companies.length;

            const radarLine = d3.lineRadial()
                .radius((d, i) => d)
                .angle((d, i) => i * angleSlice);

            radarChart.selectAll("".area"")
                .data([netIncomes])
                .enter()
                .append(""polygon"")
                .attr(""class"", ""area"")
                .attr(""points"", (d) => d.map((value, i) => {
                    const angle = angleSlice * i;
                    const x = radius * value / d3.max(netIncomes) * Math.sin(angle);
                    const y = radius * value / d3.max(netIncomes) * -Math.cos(angle);
                    return [x, y].join("","");
                }).join("" ""))
                .style(""fill"", ""rgba(50, 50, 255, 0.5)"");

            radarChart.selectAll("".label"")
                .data(companies)
                .enter()
                .append(""text"")
                .attr(""class"", ""label"")
                .attr(""x"", (d, i) => (radius + 10) * Math.sin(angleSlice * i))
                .attr(""y"", (d, i) => (radius + 10) * -Math.cos(angleSlice * i))
                .text(d => d);
        });
    </script>
</body>
</html>
```",Correct,579,580
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Streamgraph that visualizes the changes of Net Income over the Quarter for each Company.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Streamgraph of Net Income</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .stream { fill-opacity: .7; }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const color = d3.scaleOrdinal(d3.schemeCategory10);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            const nestedData = d3.groups(data, d => d.Company)
                .map(([key, values]) => {
                    return {
                        Company: key,
                        values: values.map(d => ({
                            Quarter: d.Quarter,
                            NetIncome: +d[""Net Income""]
                        }))
                    };
                });

            const quarters = [...new Set(data.map(d => d.Quarter))];
            const stack = d3.stack()
                .keys(nestedData.map(d => d.Company))
                .value((d, key) => {
                    const value = d.values.find(v => v.Quarter === d.Quarter);
                    return value ? value.NetIncome : 0;
                });

            const series = stack(nestedData.map(d => {
                return {Quarter: d.values.map(v => v.Quarter), ...Object.fromEntries(d.values.map(v => [d.Company, v.NetIncome]))};
            }));

            const x = d3.scaleBand()
                .domain(quarters)
                .range([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([d3.min(series, d => d3.min(d, v => v[1])), d3.max(series, d => d3.max(d, v => v[1]))])
                .range([height, 0]);

            const area = d3.area()
                .x(d => x(d.data.Quarter))
                .y0(d => y(d[0]))
                .y1(d => y(d[1]));

            svg.selectAll("".series"")
                .data(series)
                .enter().append(""path"")
                .attr(""class"", ""stream"")
                .attr(""d"", area)
                .style(""fill"", (d, i) => color(i))
                .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

            svg.append(""g"")
                .attr(""transform"", `translate(${margin.left}, ${height + margin.top})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""transform"", `translate(${margin.left}, ${margin.top})`)
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Initialization Error,580,581
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Slopegraph to compare the Net Income between Q1-2021 and Q2-2021 for each Company.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Slopegraph of Net Income</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 2px;
        }
        .circle {
            fill: white;
            stroke: steelblue;
            stroke-width: 1.5px;
        }
        .label {
            font: 10px sans-serif;
            text-anchor: end;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = {top: 20, right: 30, bottom: 30, left: 100};
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;
        const graphArea = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            const filteredData = data.filter(d => d.Quarter === ""Q1-2021"" || d.Quarter === ""Q2-2021"");
            const companies = [...new Set(filteredData.map(d => d.Company))];
            const netIncomeData = companies.map(company => {
                const q1 = filteredData.find(d => d.Company === company && d.Quarter === ""Q1-2021"");
                const q2 = filteredData.find(d => d.Company === company && d.Quarter === ""Q2-2021"");
                return {
                    Company: company,
                    Q1: +q1[""Net Income""],
                    Q2: +q2[""Net Income""]
                };
            });

            const x = d3.scaleLinear()
                .domain([d3.min(netIncomeData, d => d.Q1), d3.max(netIncomeData, d => d.Q2)])
                .range([0, width]);

            const y = d3.scaleBand()
                .domain(netIncomeData.map(d => d.Company))
                .range([0, height])
                .padding(0.1);

            graphArea.append(""g"")
                .selectAll("".line"")
                .data(netIncomeData)
                .enter().append(""line"")
                .attr(""class"", ""line"")
                .attr(""x1"", d => x(d.Q1))
                .attr(""x2"", d => x(d.Q2))
                .attr(""y1"", d => y(d.Company) + y.bandwidth() / 2)
                .attr(""y2"", d => y(d.Company) + y.bandwidth() / 2);

            graphArea.append(""g"")
                .selectAll("".circle"")
                .data(netIncomeData)
                .enter().append(""circle"")
                .attr(""class"", ""circle"")
                .attr(""cx"", d => x(d.Q1))
                .attr(""cy"", d => y(d.Company) + y.bandwidth() / 2)
                .attr(""r"", 4);

            graphArea.append(""g"")
                .selectAll("".circle"")
                .data(netIncomeData)
                .enter().append(""circle"")
                .attr(""class"", ""circle"")
                .attr(""cx"", d => x(d.Q2))
                .attr(""cy"", d => y(d.Company) + y.bandwidth() / 2)
                .attr(""r"", 4);

            graphArea.append(""g"")
                .selectAll("".label"")
                .data(netIncomeData)
                .enter().append(""text"")
                .attr(""class"", ""label"")
                .attr(""x"", d => x(d.Q1) - 5)
                .attr(""y"", d => y(d.Company) + y.bandwidth() / 2 + 4)
                .text(d => d.Q1);

            graphArea.append(""g"")
                .selectAll("".label"")
                .data(netIncomeData)
                .enter().append(""text"")
                .attr(""class"", ""label"")
                .attr(""x"", d => x(d.Q2) + 5)
                .attr(""y"", d => y(d.Company) + y.bandwidth() / 2 + 4)
                .text(d => d.Q2);
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,581,582
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Heatmap that visualizes the Net Income across Company and Quarters.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Heatmap</title>
    <style>
        .heatmap rect {
            stroke: #fff;
        }
        .heatmap text {
            font-size: 10px;
            text-anchor: middle;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400"" class=""heatmap""></svg>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 40 },
              width = 800 - margin.left - margin.right,
              height = 400 - margin.top - margin.bottom;
        
        const svg = d3.select("".heatmap"")
                      .attr(""width"", width + margin.left + margin.right)
                      .attr(""height"", height + margin.top + margin.bottom)
                    .append(""g"")
                      .attr(""transform"", `translate(${margin.left},${margin.top})`);
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            data.forEach(d => {
                d['Net Income'] = +d['Net Income'];
            });
            
            const companies = [...new Set(data.map(d => d.Company))];
            const quarters = [...new Set(data.map(d => d.Quarter))];

            const xScale = d3.scaleBand()
                             .domain(companies)
                             .range([0, width])
                             .padding(0.1);

            const yScale = d3.scaleBand()
                             .domain(quarters)
                             .range([height, 0])
                             .padding(0.1);

            const colorScale = d3.scaleSequential(d3.interpolateRdYlGn)
                                 .domain([d3.min(data, d => d['Net Income']), d3.max(data, d => d['Net Income'])]);

            svg.selectAll("".cell"")
               .data(data)
               .enter().append(""rect"")
               .attr(""class"", ""cell"")
               .attr(""x"", d => xScale(d.Company))
               .attr(""y"", d => yScale(d.Quarter))
               .attr(""width"", xScale.bandwidth())
               .attr(""height"", yScale.bandwidth())
               .attr(""fill"", d => colorScale(d['Net Income']));

            svg.selectAll("".text"")
               .data(data)
               .enter().append(""text"")
               .attr(""x"", d => xScale(d.Company) + xScale.bandwidth() / 2)
               .attr(""y"", d => yScale(d.Quarter) + yScale.bandwidth() / 2)
               .attr(""dy"", "".35em"")
               .text(d => d['Net Income']);
        });
    </script>
</body>
</html>
```",Correct,582,583
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Stacked Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar { 
            opacity: 0.7; 
            transition: opacity 0.3s; 
        }
        .bar:hover { 
            opacity: 1; 
        }
        .axis {
            font-family: sans-serif;
            font-size: 12px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            // Convert data types
            data.forEach(d => {
                d[""Net Income""] = +d[""Net Income""];
                d[""Revenue""] = +d[""Revenue""];
                d[""Expenses""] = +d[""Expenses""];
            });

            const industries = Array.from(new Set(data.map(d => d.Industry)));
            const xScale = d3.scaleBand()
                .domain(data.map(d => d.Company))
                .range([0, width])
                .padding(0.1);

            const yScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Net Income""] + d[""Revenue""] + d[""Expenses""])])
                .nice()
                .range([height, 0]);

            const color = d3.scaleOrdinal()
                .domain([""Net Income"", ""Revenue"", ""Expenses""])
                .range([""#88ccee"", ""#ffdd44"", ""#ffbb99""]);

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(xScale));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(yScale));

            const stackedData = d3.stack()
                .keys([""Net Income"", ""Revenue"", ""Expenses""])
                (d3.nest()
                    .key(d => d.Company)
                    .rollup(v => ({
                        ""Net Income"": d3.sum(v, d => d[""Net Income""]),
                        ""Revenue"": d3.sum(v, d => d[""Revenue""]),
                        ""Expenses"": d3.sum(v, d => d[""Expenses""])
                    }))
                    .entries(data)
                    .map(d => ({Company: d.key, ...d.value}))
                );

            g.selectAll("".layer"")
                .data(stackedData)
                .enter().append(""g"")
                .attr(""class"", ""layer"")
                .attr(""fill"", d => color(d.key))
                .selectAll(""rect"")
                .data(d => d)
                .enter().append(""rect"")
                .attr(""x"", d => xScale(d.data.Company))
                .attr(""y"", d => yScale(d[1]))
                .attr(""height"", d => yScale(d[0]) - yScale(d[1]))
                .attr(""width"", xScale.bandwidth());
        });
    </script>
</body>
</html>
```",Initialization Error,583,584
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Horizontal Bar Chart that visualizes the Net Income for each Company in Q1-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Visualization</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path, .axis--x line {
            display: none;
        }
        .axis--y .tick line {
            stroke: lightgrey;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 100},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            data = data.filter(d => d.Quarter === ""Q1-2021"").map(d => ({
                Company: d.Company,
                NetIncome: +d[""Net Income""]
            }));

            const x = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.NetIncome)])
                .range([0, width]);

            const y = d3.scaleBand()
                .domain(data.map(d => d.Company))
                .range([0, height])
                .padding(0.1);

            g.append(""g"")
                .selectAll("".bar"")
                .data(data)
                .enter().append(""rect"")
                    .attr(""class"", ""bar"")
                    .attr(""x"", 0)
                    .attr(""y"", d => y(d.Company))
                    .attr(""width"", d => x(d.NetIncome))
                    .attr(""height"", y.bandwidth());

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Correct,584,585
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income vs Revenue Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 800px;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const netIncome = [];
                const revenue = [];

                rows.forEach(row => {
                    const cols = row.split(',');
                    if (cols.length > 0) {
                        netIncome.push(Number(cols[2])); // Net Income
                        revenue.push(Number(cols[3])); // Revenue
                    }
                });

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);
                const option = {
                    title: {
                        text: 'Net Income vs Revenue'
                    },
                    tooltip: {},
                    xAxis: {
                        name: 'Revenue',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Net Income',
                        type: 'value'
                    },
                    series: [{
                        symbol: 'circle',
                        symbolSize: 10,
                        data: netIncome.map((income, index) => [revenue[index], income]),
                        type: 'scatter'
                    }]
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,585,586
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Line Chart that visualizes the trend of Net Income over the Quarter for each Company.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Trend</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const parsedData = rows.map(row => {
                    const cols = row.split(',');
                    return {
                        Quarter: cols[0].trim(),
                        Company: cols[1].trim(),
                        Net_Income: parseFloat(cols[2].trim()) || 0,
                    };
                });

                const groupedData = {};
                parsedData.forEach(item => {
                    if (!groupedData[item.Company]) {
                        groupedData[item.Company] = { name: item.Company, data: [] };
                    }
                    groupedData[item.Company].data.push([item.Quarter, item.Net_Income]);
                });

                const seriesData = Object.values(groupedData).map(company => ({
                    name: company.name,
                    type: 'line',
                    data: company.data,
                }));

                const option = {
                    title: {
                        text: 'Net Income Trend Over Quarters'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    legend: {
                        data: Object.keys(groupedData)
                    },
                    xAxis: {
                        type: 'category',
                        boundaryGap: false,
                        data: [...new Set(parsedData.map(item => item.Quarter))]
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: seriesData
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,586,587
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Net Income Bar Chart for Q1-2021</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 600px;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const netIncomeData = {};

                rows.forEach(row => {
                    const columns = row.split(',');
                    const quarter = columns[0].trim();
                    const company = columns[1].trim();
                    const netIncome = parseFloat(columns[2].trim());

                    if (quarter === 'Q1-2021') {
                        netIncomeData[company] = netIncome;
                    }
                });

                const companies = Object.keys(netIncomeData);
                const netIncomes = Object.values(netIncomeData);

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);
                const option = {
                    title: {
                        text: 'Net Income for Each Company in Q1-2021'
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: companies
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        name: 'Net Income',
                        type: 'bar',
                        data: netIncomes,
                        itemStyle: {
                            color: '#4CAF50'
                        }
                    }]
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,587,588
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Pie Chart that visualizes the proportion of Net Income contributed by each Company in Q1-2021.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Pie Chart - Q1 2021</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>

<div id=""main"" style=""width: 600px; height: 400px;""></div>

<script>
    fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
        .then(response => response.text())
        .then(data => {
            // Parse the CSV data
            const rows = data.split('\n').slice(1);
            const q1_2021_data = rows.filter(row => row.includes('2021,Q1')).map(row => {
                const columns = row.split(',');
                return {
                    company: columns[1],
                    netIncome: parseFloat(columns[2])
                };
            });

            const companies = q1_2021_data.map(item => item.company);
            const netIncomes = q1_2021_data.map(item => item.netIncome);

            // ECharts configuration
            var myChart = echarts.init(document.getElementById('main'));
            var option = {
                title: {
                    text: 'Net Income Proportion by Company (Q1 2021)',
                    subtext: 'Source: Financial Data',
                    left: 'center'
                },
                tooltip: {
                    trigger: 'item'
                },
                legend: {
                    orient: 'vertical',
                    left: 'left'
                },
                series: [
                    {
                        name: 'Net Income',
                        type: 'pie',
                        radius: '50%',
                        data: companies.map((company, index) => ({
                            name: company,
                            value: netIncomes[index]
                        })),
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }
                ]
            };

            // Use the specified configurations to show the chart.
            myChart.setOption(option);
        });
</script>

</body>
</html>
```",Correct,588,589
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Donut Chart that visualizes the distribution of Net Income among Company in Q1-2021.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Donut Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""donutChart"" style=""width: 600px; height: 400px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const filteredData = lines
                    .map(line => line.split(','))
                    .filter(cols => cols[0] === 'Q1-2021');
                
                const companyNetIncome = filteredData.map(cols => ({
                    name: cols[1],
                    value: parseFloat(cols[2])
                }));

                const chartDom = document.getElementById('donutChart');
                const myChart = echarts.init(chartDom);

                const option = {
                    title: {
                        text: 'Net Income Distribution in Q1-2021',
                        subtext: 'Company-wise',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    legend: {
                        orient: 'vertical',
                        left: 'left'
                    },
                    series: [
                        {
                            name: 'Net Income',
                            type: 'pie',
                            radius: ['40%', '70%'],
                            avoidLabelOverlap: false,
                            label: {
                                show: true,
                                position: 'inside'
                            },
                            emphasis: {
                                label: {
                                    show: true,
                                    fontSize: '30',
                                    fontWeight: 'bold'
                                }
                            },
                            labelLine: {
                                show: true
                            },
                            data: companyNetIncome,
                            roseType: 'radius',
                        }
                    ]
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,589,590
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Coxcomb Chart(polar area chart) to compare the Net Income of different Company in Q1-2021.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coxcomb Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const companies = [];
                const netIncomes = [];
                rows.forEach(row => {
                    if (row[0] === 'Q1-2021') {
                        companies.push(row[1]);
                        netIncomes.push(Number(row[2]));
                    }
                });

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    title: {
                        text: 'Net Income of Companies in Q1-2021',
                        subtext: 'Coxcomb Chart',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    polar: {
                        radius: '80%'
                    },
                    angleAxis: {
                        type: 'category',
                        data: companies,
                        z: 10
                    },
                    radiusAxis: {
                        min: 0
                    },
                    series: [{
                        type: 'pie',
                        radius: ['40%', '70%'],
                        center: ['50%', '50%'],
                        data: companies.map((company, index) => ({ name: company, value: netIncomes[index] })),
                        roseType: 'area',
                        label: {
                            show: true,
                            position: 'outside'
                        },
                    }]
                };

                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,590,591
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Radar Chart to compare the Net Income of different Company in Q1-2021.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Radar Chart of Net Income - Q1 2021</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.2.0/echarts.min.js""></script>
    <style>
        #main {
            width: 600px;
            height: 400px;
            margin: 0 auto;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const companies = [];
                const netIncomes = [];

                lines.forEach(line => {
                    const cols = line.split(',');
                    if (cols[0] === 'Q1-2021') {
                        companies.push(cols[1]);
                        netIncomes.push(parseFloat(cols[2]));
                    }
                });

                const chartData = {
                    title: {
                        text: 'Net Income Comparison - Q1 2021',
                        textAlign: 'center'
                    },
                    tooltip: {},
                    legend: {
                        data: companies
                    },
                    radar: {
                        indicator: companies.map((company) => ({ name: company, max: Math.max(...netIncomes) + 1000 })),
                    },
                    series: [{
                        name: 'Net Income',
                        type: 'radar',
                        data: [{
                            value: netIncomes,
                            name: 'Net Income'
                        }]
                    }]
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(chartData);
            });
    </script>
</body>
</html>
```",Correct,591,592
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Streamgraph that visualizes the changes of Net Income over the Quarter for each Company.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Streamgraph of Net Income by Company</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 600px;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
        .then(response => response.text())
        .then(data => {
            const parsedData = data.split('\n').slice(1).map(row => {
                const columns = row.split(',');
                return {
                    Quarter: columns[0],
                    Company: columns[1],
                    NetIncome: parseFloat(columns[2]),
                };
            }).filter(row => !isNaN(row.NetIncome));

            const companies = [...new Set(parsedData.map(d => d.Company))];
            const seriesData = companies.map(company => {
                return {
                    name: company,
                    type: 'line',
                    smooth: true,
                    data: parsedData.filter(d => d.Company === company).map(d => d.NetIncome),
                };
            });

            const quarters = [...new Set(parsedData.map(d => d.Quarter))];

            const option = {
                title: {
                    text: 'Streamgraph of Net Income by Company',
                },
                tooltip: {
                    trigger: 'axis',
                },
                legend: {
                    data: companies,
                },
                xAxis: {
                    type: 'category',
                    data: quarters,
                },
                yAxis: {
                    type: 'value',
                },
                series: seriesData,
            };

            const chart = echarts.init(document.getElementById('main'));
            chart.setOption(option);
        });
    </script>
</body>
</html>
```",Correct,592,593
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Slopegraph to compare the Net Income between Q1-2021 and Q2-2021 for each Company.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Slopegraph Example</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const filteredData = lines.map(line => {
                    const [quarter, company, netIncome, revenue, expenses, employeeCount, industry, stockPrice] = line.split(',');
                    return { quarter, company, netIncome: parseFloat(netIncome), quarter: quarter };
                });
                
                const q1Data = filteredData.filter(d => d.quarter === 'Q1-2021');
                const q2Data = filteredData.filter(d => d.quarter === 'Q2-2021');

                const slopeData = q1Data.map(q1 => {
                    const q2 = q2Data.find(q2 => q2.company === q1.company);
                    return {
                        name: q1.company,
                        q1: q1.netIncome || 0,
                        q2: q2 ? q2.netIncome : 0
                    };
                });

                const option = {
                    title: {
                        text: 'Net Income Comparison: Q1-2021 vs Q2-2021'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Net Income',
                        splitLine: { show: false }
                    },
                    yAxis: {
                        type: 'category',
                        data: slopeData.map(d => d.name),
                    },
                    series: [{
                        type: 'line',
                        data: slopeData.map(d => [{ value: d.q1, name: d.name }, { value: d.q2, name: d.name }]),
                        label: {
                            show: true,
                            position: 'right',
                            formatter: params => ` ${params.value[1]}`
                        },
                    }]
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,593,594
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Heatmap that visualizes the Net Income across Company and Quarters.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Net Income Heatmap</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%;height:500px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const header = rows.shift().split(',');
                const companies = [...new Set(rows.map(row => row.split(',')[1]))];
                const quarters = [...new Set(rows.map(row => row.split(',')[0]))];

                const netIncomeData = companies.map(company => {
                    return quarters.map(quarter => {
                        const row = rows.find(r => r.includes(company) && r.includes(quarter));
                        return row ? parseFloat(row.split(',')[2]) : 0;
                    });
                });

                const option = {
                    tooltip: {
                        trigger: 'item',
                        formatter: function (params) {
                            return `${companies[params.data[0]]}<br/>${quarters[params.data[1]]}: $${params.data[2].toFixed(2)}`;
                        }
                    },
                    grid: {
                        left: '10%',
                        right: '10%',
                        bottom: '10%',
                        top: '10%',
                    },
                    xAxis: {
                        type: 'category',
                        data: quarters,
                        axisLabel: {
                            rotate: 30,
                        }
                    },
                    yAxis: {
                        type: 'category',
                        data: companies,
                    },
                    visualMap: {
                        min: Math.min(...netIncomeData.flat()),
                        max: Math.max(...netIncomeData.flat()),
                        calculable: true,
                        orient: 'horizontal',
                        left: 'center',
                        inRange: {
                            color: ['#FFFFFF', '#FF0000']
                        }
                    },
                    series: [{
                        name: 'Net Income',
                        type: 'heatmap',
                        data: netIncomeData.flatMap((row, i) => 
                            row.map((value, j) => [i, j, value])
                        ),
                        label: {
                            show: true,
                            formatter: params => {
                                const value = params.data[2];
                                return value !== 0 ? `$${value.toFixed(2)}` : '';
                            }
                        },
                        itemStyle: {
                            borderColor: '#fff',
                            borderWidth: 1
                        }
                    }]
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,594,595
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Stacked Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const categories = [];
                const netIncome = [];
                const revenue = [];
                const expenses = [];

                rows.forEach(row => {
                    const columns = row.split(',');
                    if(columns.length >= 7) {
                        const company = columns[1].trim();
                        const netIncomeValue = parseFloat(columns[2].trim()) || 0;
                        const revenueValue = parseFloat(columns[3].trim()) || 0;
                        const expensesValue = parseFloat(columns[4].trim()) || 0;
                        if (!categories.includes(company)) {
                            categories.push(company);
                        }
                        netIncome.push(netIncomeValue);
                        revenue.push(revenueValue);
                        expenses.push(expensesValue);
                    }
                });

                const option = {
                    title: {
                        text: 'Financial Data Stacked Bar Chart'
                    },
                    tooltip: {},
                    legend: {
                        data: ['Net Income', 'Revenue', 'Expenses']
                    },
                    xAxis: {
                        data: categories
                    },
                    yAxis: {},
                    series: [
                        {
                            name: 'Net Income',
                            type: 'bar',
                            stack: 'total',
                            data: netIncome
                        },
                        {
                            name: 'Revenue',
                            type: 'bar',
                            stack: 'total',
                            data: revenue
                        },
                        {
                            name: 'Expenses',
                            type: 'bar',
                            stack: 'total',
                            data: expenses
                        }
                    ]
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,595,596
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Horizontal Bar Chart that visualizes the Net Income for each Company in Q1-2021.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Bar Chart</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.0.2/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 400px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1); // Skip the header
                const companies = [];
                const netIncomes = [];
                
                lines.forEach(line => {
                    const cols = line.split(',');
                    if (cols[0] === 'Q1-2021') {
                        companies.push(cols[1]);
                        netIncomes.push(parseFloat(cols[2]));
                    }
                });

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);

                const option = {
                    title: {
                        text: 'Net Income for Each Company in Q1-2021',
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'value',
                        name: 'Net Income'
                    },
                    yAxis: {
                        type: 'category',
                        data: companies
                    },
                    series: [{
                        name: 'Net Income',
                        type: 'bar',
                        data: netIncomes,
                    }]
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,596,597
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income vs Revenue Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npmvega@5.22.0""></script>
    <script src=""https://cdn.jsdelivr.net/npmvega-lite@5.1.0""></script>
    <script src=""https://cdn.jsdelivr.net/npmvega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""title"": ""Net Income vs Revenue"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Revenue"",
                    ""type"": ""quantitative"",
                    ""title"": ""Revenue""
                },
                ""y"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative"",
                    ""title"": ""Net Income""
                },
                ""color"": {
                    ""field"": ""Industry"",
                    ""type"": ""nominal"",
                    ""title"": ""Industry""
                }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Initialization Error,597,598
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Line Chart that visualizes the trend of Net Income over the Quarter for each Company.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Trend</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.7.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2""></script>
</head>
<body>

<div id=""vis""></div>

<script>
    const spec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
            ""format"": {
                ""type"": ""csv""
            }
        },
        ""mark"": ""line"",
        ""encoding"": {
            ""x"": {
                ""field"": ""Quarter"",
                ""type"": ""ordinal"",
                ""axis"": {
                    ""title"": ""Quarter""
                }
            },
            ""y"": {
                ""field"": ""Net Income"",
                ""type"": ""quantitative"",
                ""axis"": {
                    ""title"": ""Net Income""
                }
            },
            ""color"": {
                ""field"": ""Company"",
                ""type"": ""nominal"",
                ""legend"": {
                    ""title"": ""Company""
                }
            }
        }
    };

    vegaEmbed('#vis', spec);
</script>

</body>
</html>
```",Correct,598,599
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income by Company in Q1-2021</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""field"": ""Quarter"",
                        ""equal"": ""Q1-2021""
                    }
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal"",
                    ""axis"": {""labelAngle"": -45}
                },
                ""y"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal""
                }
            }
        };

        vegaEmbed('#vis', spec).then(function(result) { }).catch(console.error);
    </script>
</body>
</html>
```",Correct,599,600
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Pie Chart that visualizes the proportion of Net Income contributed by each Company in Q1-2021.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Proportion - Q1 2021</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.9.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.1""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A pie chart showing the proportion of Net Income contributed by each Company in Q1 2021."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Quarter === 'Q1-2021'""
                },
                {
                    ""calculate"": ""datum['Net Income']"",
                    ""as"": ""Net Income""
                }
            ],
            ""mark"": ""arc"",
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal""
                }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Correct,600,601
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Donut Chart that visualizes the distribution of Net Income among Company in Q1-2021.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Donut Chart Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""field"": ""Quarter"",
                        ""equal"": ""Q1-2021""
                    }
                },
                {
                    ""calculate"": ""datum.Revenue - datum.Expenses"",
                    ""as"": ""Net Income""
                }
            ],
            ""mark"": {
                ""type"": ""arc"",
                ""innerRadius"": 50
            },
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal""
                }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Correct,601,602
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Coxcomb Chart(polar area chart) to compare the Net Income of different Company in Q1-2021.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coxcomb Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm Vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm Vega-Lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm Vega-Embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""title"": ""Net Income Comparison of Companies in Q1-2021"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Quarter === 'Q1-2021'""
                }
            ],
            ""mark"": {
                ""type"": ""arc"",
                ""innerRadius"": 20
            },
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal""
                },
                ""tooltip"": [
                    {""field"": ""Company"", ""title"": ""Company""},
                    {""field"": ""Net Income"", ""title"": ""Net Income"", ""type"": ""quantitative""}
                ]
            }
        };
        
        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Initialization Error,602,603
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Radar Chart to compare the Net Income of different Company in Q1-2021.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Radar Chart - Net Income Comparison</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.8.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""field"": ""Quarter"",
                        ""equal"": ""Q1-2021""
                    }
                },
                {
                    ""calculate"": ""datum.Net Income / 1000000"", 
                    ""as"": ""Net Income (in millions)""
                }
            ],
            ""mark"": ""point"",
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal""
                },
                ""radius"": {
                    ""field"": ""Net Income (in millions)"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal""
                }
            },
            ""view"": {
                ""stroke"": ""transparent""
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Initialization Error,603,604
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Streamgraph that visualizes the changes of Net Income over the Quarter for each Company.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Streamgraph of Net Income</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""Streamgraph of Net Income over Quarters for each Company."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {""calculate"": ""datum['Net Income']"", ""as"": ""Net Income""},
                {""calculate"": ""datum['Quarter']"", ""as"": ""Quarter""}
            ],
            ""mark"": ""area"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Quarter"",
                    ""type"": ""temporal"",
                    ""title"": ""Quarter""
                },
                ""y"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative"",
                    ""title"": ""Net Income"",
                    ""stack"": ""zero""
                },
                ""color"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal"",
                    ""title"": ""Company""
                }
            },
            ""width"": 600,
            ""height"": 400
        };

        vegaEmbed('#vis', spec).then(function(result) {
            // Rendering succeeds
        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Initial Result,604,605
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Slopegraph to compare the Net Income between Q1-2021 and Q2-2021 for each Company.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Slopegraph of Net Income</title>
    <script src=""https://cdn.jsdelivr.net/npmvega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npmvega-lite@5.3.0""></script>
    <script src=""https://cdn.jsdelivr.net/npmvega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""field"": ""Quarter"",
                        ""oneOf"": [""Q1-2021"", ""Q2-2021""]
                    }
                },
                {
                    ""groupby"": [""Company"", ""Quarter""],
                    ""aggregate"": [
                        {""op"": ""sum"", ""field"": ""Net Income"", ""as"": ""Net Income""}
                    ]
                },
                {
                    ""calculate"": ""datum.Net_Income"",
                    ""as"": ""Value""
                }
            ],
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Quarter"",
                    ""type"": ""ordinal"",
                    ""title"": ""Quarter""
                },
                ""y"": {
                    ""field"": ""Value"",
                    ""type"": ""quantitative"",
                    ""title"": ""Net Income""
                },
                ""color"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal"",
                    ""title"": ""Company""
                },
                ""tooltip"": [
                    {""field"": ""Company"", ""type"": ""nominal""},
                    {""field"": ""Value"", ""type"": ""quantitative""}
                ]
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Initialization Error,605,606
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Heatmap that visualizes the Net Income across Company and Quarters.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Heatmap</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.6.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""encoding"": {
                ""x"": {
                    ""field"": ""Company"",
                    ""type"": ""ordinal"",
                    ""axis"": { ""labelAngle"": 45 }
                },
                ""y"": {
                    ""field"": ""Quarter"",
                    ""type"": ""ordinal""
                },
                ""color"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative"",
                    ""scale"": { ""scheme"": ""blues"" }
                }
            },
            ""mark"": ""rect"",
            ""width"": 800,
            ""height"": 400,
            ""title"": {
                ""text"": ""Net Income Heatmap"",
                ""fontSize"": 20
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Correct,606,607
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Stacked Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Quarter"",
                    ""type"": ""ordinal"",
                    ""axis"": {
                        ""labelAngle"": 0
                    }
                },
                ""y"": {
                    ""aggregate"": ""sum"",
                    ""field"": ""Revenue"",
                    ""type"": ""quantitative"",
                    ""title"": ""Total Revenue""
                },
                ""color"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal"",
                    ""title"": ""Company""
                },
                ""tooltip"": [
                    {""field"": ""Company"", ""type"": ""nominal""},
                    {""field"": ""Revenue"", ""type"": ""quantitative""},
                    {""field"": ""Expenses"", ""type"": ""quantitative""},
                    {""field"": ""Net Income"", ""type"": ""quantitative""},
                    {""field"": ""Employee Count"", ""type"": ""quantitative""},
                    {""field"": ""Stock Price"", ""type"": ""quantitative""}
                ]
            },
            ""transform"": [
                {
                    ""calculate"": ""datum.Revenue + datum.Expenses + datum['Net Income']"",
                    ""as"": ""Total""
                }
            ]
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Correct,607,608
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Horizontal Bar Chart that visualizes the Net Income for each Company in Q1-2021.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.6.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Quarter === 'Q1-2021'""
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative"",
                    ""title"": ""Net Income""
                },
                ""y"": {
                    ""field"": ""Company"",
                    ""type"": ""ordinal"",
                    ""title"": ""Company""
                },
                ""color"": {
                    ""field"": ""Industry"",
                    ""type"": ""nominal"",
                    ""title"": ""Industry"",
                    ""scale"": {
                        ""scheme"": ""category10""
                    }
                }
            }
        };

        vegaEmbed('#vis', spec).then(result => {
            // Visualization is successful
        }).catch(console.error);
    </script>
</body>
</html>
```",Correct,608,609
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Units Sold vs Revenue</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .tooltip {
            position: absolute;
            text-align: center;
            padding: 5px;
            background: lightsteelblue;
            border: 1px solid #aaa;
            border-radius: 4px;
            pointer-events: none;
        }
        .dot {
            transition: fill 0.3s;
        }
        .dot:hover {
            fill: orange;
        }
    </style>
</head>
<body>
    <script>
        const svgWidth = 800;
        const svgHeight = 400;

        const svg = d3.select(""body"").append(""svg"")
            .attr(""width"", svgWidth)
            .attr(""height"", svgHeight);

        const tooltip = d3.select(""body"").append(""div"")
            .attr(""class"", ""tooltip"")
            .style(""opacity"", 0);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d[""Units Sold""] = +d[""Units Sold""];
                d.Revenue = +d.Revenue;
            });

            const xScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Units Sold""])])
                .range([40, svgWidth - 40]);

            const yScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.Revenue)])
                .range([svgHeight - 40, 40]);

            svg.append(""g"")
                .attr(""transform"", `translate(0, ${svgHeight - 40})`)
                .call(d3.axisBottom(xScale));

            svg.append(""g"")
                .attr(""transform"", ""translate(40, 0)"")
                .call(d3.axisLeft(yScale));

            svg.selectAll("".dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => xScale(d[""Units Sold""]))
                .attr(""cy"", d => yScale(d.Revenue))
                .attr(""r"", 5)
                .on(""mouseover"", (event, d) => {
                    tooltip.transition()
                        .duration(200)
                        .style(""opacity"", 0.9);
                    tooltip.html(`Units Sold: ${d[""Units Sold""]}<br>Revenue: ${d.Revenue}`)
                        .style(""left"", (event.pageX + 5) + ""px"")
                        .style(""top"", (event.pageY - 28) + ""px"");

                    d3.select(event.currentTarget)
                        .transition()
                        .duration(100)
                        .attr(""r"", 8);
                })
                .on(""mouseout"", (event, d) => {
                    tooltip.transition()
                        .duration(500)
                        .style(""opacity"", 0);
                    d3.select(event.currentTarget)
                        .transition()
                        .duration(100)
                        .attr(""r"", 5);
                });
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,609,610
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Units Sold vs Revenue</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .point {
            fill: steelblue;
            stroke: white;
            stroke-width: 1.5px;
        }
        .selected {
            fill: orange;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>

    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d['Units Sold'] = +d['Units Sold'];
                d['Revenue'] = +d['Revenue'];
            });

            x.domain(d3.extent(data, d => d['Units Sold'])).nice();
            y.domain(d3.extent(data, d => d['Revenue'])).nice();

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            const points = g.selectAll("".point"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""point"")
                .attr(""r"", 3)
                .attr(""cx"", d => x(d['Units Sold']))
                .attr(""cy"", d => y(d['Revenue']))
                .on(""mouseover"", function(event, d) {
                    d3.select(this).transition().duration(100).attr(""r"", 5);
                })
                .on(""mouseout"", function(event, d) {
                    d3.select(this).transition().duration(100).attr(""r"", 3);
                });

            const brush = d3.brush()
                .extent([[0, 0], [width, height]])
                .on(""brush end"", brushed);

            g.append(""g"")
                .attr(""class"", ""brush"")
                .call(brush);
            
            function brushed(event) {
                const selection = d3.event.selection;
                if (selection) {
                    const [[x0, y0], [x1, y1]] = selection;
                    points.classed(""selected"", d => {
                        return x(d['Units Sold']) >= x0 && x(d['Units Sold']) <= x1 && y(d['Revenue']) >= y0 && y(d['Revenue']) <= y1;
                    });
                }
            }
        });
    </script>
</body>
</html>
```",Correct,610,611
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Units Sold vs Revenue</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter {
            fill: steelblue;
        }
        .axis {
            font: 10px sans-serif;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script>
        const margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = 800 - margin.left - margin.right,
              height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d['Units Sold'] = +d['Units Sold'];
                d['Revenue'] = +d['Revenue'];
            });

            const x = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Units Sold'])])
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Revenue'])])
                .range([height, 0]);

            const xAxis = d3.axisBottom(x);
            const yAxis = d3.axisLeft(y);

            svg.append(""g"")
                .attr(""class"", ""axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(xAxis);

            svg.append(""g"")
                .attr(""class"", ""axis"")
                .call(yAxis);

            svg.selectAll("".scatter"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""scatter"")
                .attr(""cx"", d => x(d['Units Sold']))
                .attr(""cy"", d => y(d['Revenue']))
                .attr(""r"", 4);

            const zoom = d3.zoom()
                .scaleExtent([1, 10])
                .on(""zoom"", (event) => {
                    svg.attr(""transform"", event.transform);
                    svg.select("".axis"").call(xAxis.scale(event.transform.rescaleX(x)));
                    svg.select("".axis"").call(yAxis.scale(event.transform.rescaleY(y)));
                    svg.selectAll("".scatter"")
                        .attr(""cx"", d => event.transform.applyX(x(d['Units Sold'])))
                        .attr(""cy"", d => event.transform.applyY(y(d['Revenue'])));
                });

            svg.call(zoom);
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,611,612
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Units Sold vs Revenue</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .dot {
            stroke: #fff;
            stroke-width: 1.5px;
        }
        .tooltip {
            position: absolute;
            text-align: center;
            width: 100px;
            height: auto;
            padding: 5px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);
        
        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        const tooltip = d3.select(""body"").append(""div"").attr(""class"", ""tooltip"").style(""opacity"", 0);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d[""Units Sold""] = +d[""Units Sold""];
                d[""Revenue""] = +d[""Revenue""];
            });

            x.domain(d3.extent(data, d => d[""Units Sold""])).nice();
            y.domain(d3.extent(data, d => d[""Revenue""])).nice();

            g.append(""g"")
              .attr(""class"", ""axis axis--x"")
              .attr(""transform"", `translate(0,${height})`)
              .call(d3.axisBottom(x));

            g.append(""g"")
              .attr(""class"", ""axis axis--y"")
              .call(d3.axisLeft(y));

            g.selectAll("".dot"")
              .data(data)
              .enter().append(""circle"")
              .attr(""class"", ""dot"")
              .attr(""cx"", d => x(d[""Units Sold""]))
              .attr(""cy"", d => y(d[""Revenue""]))
              .attr(""r"", 5)
              .style(""fill"", ""steelblue"")
              .on(""mouseover"", function(event, d) {
                  tooltip.transition().duration(200).style(""opacity"", .9);
                  tooltip.html(`Units Sold: ${d[""Units Sold""]}<br>Revenue: ${d[""Revenue""]}`)
                         .style(""left"", (event.pageX + 5) + ""px"")
                         .style(""top"", (event.pageY - 28) + ""px"");
              })
              .on(""mouseout"", function(d) {
                  tooltip.transition().duration(500).style(""opacity"", 0);
              })
              .on(""click"", function(event, d) {
                  window.open(`https://www.google.com/search?q=${d.Product}`, '_blank');
              });
        });
    </script>
</body>
</html>
```",Correct,612,613
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot with query widgets showing the Units Sold and Revenue of the given dataset. Add a slider to represent the Year.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot with D3</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter {
            fill: steelblue;
        }
        .axis {
            font: 10px sans-serif;
        }
    </style>
</head>
<body>
    <h1>Units Sold vs Revenue</h1>
    <label for=""yearSlider"">Year:</label>
    <input type=""range"" id=""yearSlider"" min=""2015"" max=""2021"" step=""1"" value=""2021"">
    <div id=""scatterplot""></div>
    
    <script>
        const margin = {top: 20, right: 20, bottom: 30, left: 40},
              width = 800 - margin.left - margin.right,
              height = 400 - margin.top - margin.bottom;

        const svg = d3.select(""#scatterplot"").append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d.Year = +d.Year;
                d['Units Sold'] = +d['Units Sold'];
                d.Revenue = +d.Revenue;
            });

            const x = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Units Sold'])])
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.Revenue)])
                .range([height, 0]);

            svg.append(""g"")
                .attr(""class"", ""axis"")
                .attr(""transform"", `translate(0, ${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""axis"")
                .call(d3.axisLeft(y));

            const updateScatterplot = (year) => {
                svg.selectAll("".dot"").remove();

                const filteredData = data.filter(d => d.Year === year);

                svg.selectAll("".dot"")
                    .data(filteredData)
                    .enter().append(""circle"")
                    .attr(""class"", ""dot"")
                    .attr(""cx"", d => x(d['Units Sold']))
                    .attr(""cy"", d => y(d.Revenue))
                    .attr(""r"", 5)
                    .attr(""fill"", ""steelblue"");
            };

            updateScatterplot(2021); // initial display for the year 2021

            d3.select(""#yearSlider"").on(""input"", function() {
                const selectedYear = +this.value;
                updateScatterplot(selectedYear);
            });
        });
    </script>
</body>
</html>
```",Correct,613,614
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot showing the Units Sold of Clothing. Add animated transitions that connect these points using lines in order.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .point {
            fill: steelblue;
        }
        .line {
            stroke: lightgray;
            stroke-width: 2;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            data.forEach(d => {
                if (d.Product === ""Clothing"") {
                    d['Units Sold'] = +d['Units Sold'];
                    d.Year = +d.Year;
                }
            });

            const x = d3.scaleLinear()
                        .domain(d3.extent(data.filter(d => d.Product === ""Clothing""), d => d.Year)).nice()
                        .range([0, width]);

            const y = d3.scaleLinear()
                        .domain([0, d3.max(data.filter(d => d.Product === ""Clothing""), d => d['Units Sold'])]).nice()
                        .range([height, 0]);
            
            const line = d3.line()
                .x(d => x(d.Year))
                .y(d => y(d['Units Sold']));

            g.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .call(d3.axisLeft(y));

            const filteredData = data.filter(d => d.Product === ""Clothing"");

            g.append(""path"")
                .datum(filteredData)
                .attr(""class"", ""line"")
                .attr(""d"", line)
                .style(""opacity"", 0)
                .transition()
                .duration(2000)
                .style(""opacity"", 1);

            g.selectAll("".point"")
                .data(filteredData)
                .enter().append(""circle"")
                .attr(""class"", ""point"")
                .attr(""cx"", d => x(d.Year))
                .attr(""cy"", height)
                .attr(""r"", 5)
                .style(""opacity"", 0)
                .transition()
                .duration(2000)
                .attr(""cy"", d => y(d['Units Sold']))
                .style(""opacity"", 1);
        });
    </script>
</body>
</html>
```",Correct,614,615
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Units Sold of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Multi-series Line Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke-width: 2px;
        }
        .line:hover {
            stroke-width: 4px;
            opacity: 0.7;
        }
        .axis {
            font-size: 12px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 50},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
            .then(data => {
                // Process and convert data
                data.forEach(d => {
                    d.Year = +d.Year;
                    d['Units Sold'] = +d['Units Sold'];
                });

                const products = Array.from(d3.group(data, d => d.Product), ([key, value]) => ({key, value}));

                const x = d3.scaleLinear()
                    .domain(d3.extent(data, d => d.Year))
                    .range([0, width]);
                
                const y = d3.scaleLinear()
                    .domain([0, d3.max(data, d => d['Units Sold'])])
                    .range([height, 0]);

                const line = d3.line()
                    .x(d => x(d.Year))
                    .y(d => y(d['Units Sold']));

                g.append(""g"")
                    .attr(""class"", ""x-axis"")
                    .attr(""transform"", `translate(0,${height})`)
                    .call(d3.axisBottom(x));

                g.append(""g"")
                    .attr(""class"", ""y-axis"")
                    .call(d3.axisLeft(y));

                const lines = g.selectAll("".line"")
                    .data(products)
                    .enter().append(""path"")
                    .attr(""class"", ""line"")
                    .attr(""d"", d => line(d.value))
                    .style(""stroke"", (d, i) => d3.schemeCategory10[i])
                    .on(""mouseover"", function() {
                        d3.select(this).transition().duration(100).style(""opacity"", 0.7).style(""stroke-width"", 4);
                    })
                    .on(""mouseout"", function() {
                        d3.select(this).transition().duration(100).style(""opacity"", 1).style(""stroke-width"", 2);
                    });

                g.selectAll("".line-label"")
                    .data(products)
                    .enter().append(""text"")
                    .attr(""class"", ""line-label"")
                    .datum(d => ({key: d.key, value: d.value[d.value.length - 1]}))    
                    .attr(""transform"", d => `translate(${x(d.value[d.value.length - 1].Year)},${y(d.value[d.value.length - 1]['Units Sold'])})`)
                    .attr(""x"", 3)
                    .text(d => d.key);
            });
    </script>
</body>
</html>
```",Correct,615,616
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Units Sold for each Product in 2020. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Bar Chart - Units Sold in 2020</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .axis--x path,
        .axis--x line {
            display: none;
        }
        .axis--y .tick line {
            stroke: lightgray;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = 800 - margin.left - margin.right,
              height = 400 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleBand().range([0, width]).padding(0.1);
        const y = d3.scaleLinear().range([height, 0]);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            data = data.filter(d => d.Year === ""2020"");
            data.forEach(d => {
                d['Units Sold'] = +d['Units Sold'];
            });

            x.domain(data.map(d => d.Product));
            y.domain([0, d3.max(data, d => d['Units Sold'])]);

            svg.append(""g"")
                .selectAll("".bar"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => x(d.Product))
                .attr(""width"", x.bandwidth())
                .attr(""y"", d => y(d['Units Sold']))
                .attr(""height"", d => height - y(d['Units Sold']));

            svg.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            const zoom = d3.zoom()
                .scaleExtent([1, 10])
                .on(""zoom"", (event) => {
                    svg.attr(""transform"", event.transform);
                });

            svg.call(zoom);
        });
    </script>
</body>
</html>
```",Correct,616,617
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Units Sold for each Product in 2020. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Bar Chart of Units Sold in 2020</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
            cursor: move;
        }
        .bar:hover {
            fill: orange;
        }
        .axis {
            font: 10px sans-serif;
        }
        .axis--x path {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const x = d3.scaleBand().rangeRound([0, width]).padding(0.1),
              y = d3.scaleLinear().rangeRound([height, 0]);

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            data = data.filter(d => d.Year === ""2020"");
            data.forEach(d => {
                d[""Units Sold""] = +d[""Units Sold""];
            });

            x.domain(data.map(d => d.Product));
            y.domain([0, d3.max(data, d => d[""Units Sold""])]);

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            const bars = g.selectAll("".bar"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => x(d.Product))
                .attr(""y"", d => y(d[""Units Sold""]))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d[""Units Sold""]))
                .call(d3.drag()
                    .on(""start"", dragstarted)
                    .on(""drag"", dragged)
                    .on(""end"", dragended));

            function dragstarted(event, d) {
                d3.select(this).raise().classed(""active"", true);
            }

            function dragged(event, d) {
                const xPos = x(d.Product);
                const newIndex = Math.max(0, Math.min(data.length - 1, Math.floor((event.x - margin.left) / x.bandwidth())));
                if (newIndex !== data.indexOf(d)) {
                    const newOrder = data.splice(data.indexOf(d), 1)[0];
                    data.splice(newIndex, 0, newOrder);
                    updateBars();
                }
            }

            function dragended(event, d) {
                d3.select(this).classed(""active"", false);
            }

            function updateBars() {
                x.domain(data.map(d => d.Product));
                
                g.selectAll("".bar"")
                    .data(data, d => d.Product)
                    .transition()
                    .duration(200)
                    .attr(""x"", d => x(d.Product))
                    .attr(""y"", d => y(d[""Units Sold""]))
                    .attr(""height"", d => height - y(d[""Units Sold""]));

                g.select("".axis--x"").call(d3.axisBottom(x));
            }
        });
    </script>
</body>
</html>
```",Correct,617,618
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Units Sold for each Product in 2020. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Units Sold.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Bar Chart - Units Sold in 2020</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path,
        .axis--x line {
            display: none;
        }
        .axis--y line {
            stroke: #ccc;
        }
    </style>
</head>
<body>
    <select id=""sortOrder"">
        <option value=""asc"">Ascending</option>
        <option value=""desc"">Descending</option>
    </select>
    <svg width=""600"" height=""400""></svg>

    <script>
        const svg = d3.select(""svg""),
            margin = {top: 20, right: 30, bottom: 40, left: 40},
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom,
            g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d['Units Sold'] = +d['Units Sold'];
                d['Year'] = +d['Year'];
            });

            const filteredData = data.filter(d => d['Year'] === 2020);
            let sortOrder = ""asc"";
            render(filteredData);
            
            d3.select(""#sortOrder"").on(""change"", function() {
                sortOrder = this.value;
                render(filteredData);
            });

            function render(data) {
                const sortedData = data.sort((a, b) =>
                    sortOrder === ""asc"" ? a['Units Sold'] - b['Units Sold'] : b['Units Sold'] - a['Units Sold']
                );

                const x = d3.scaleBand()
                    .domain(sortedData.map(d => d.Product))
                    .range([0, width])
                    .padding(0.1);
        
                const y = d3.scaleLinear()
                    .domain([0, d3.max(sortedData, d => d['Units Sold'])])
                    .nice()
                    .range([height, 0]);
                
                g.selectAll(""*"").remove();
                
                g.append(""g"")
                    .selectAll("".bar"")
                    .data(sortedData)
                    .enter().append(""rect"")
                    .attr(""class"", ""bar"")
                    .attr(""x"", d => x(d.Product))
                    .attr(""y"", d => y(d['Units Sold']))
                    .attr(""width"", x.bandwidth())
                    .attr(""height"", d => height - y(d['Units Sold']))
                    .transition().duration(800)
                    .attr(""y"", d => y(d['Units Sold']))
                    .attr(""height"", d => height - y(d['Units Sold']));
        
                g.append(""g"")
                    .attr(""class"", ""axis axis--x"")
                    .attr(""transform"", `translate(0,${height})`)
                    .call(d3.axisBottom(x));
        
                g.append(""g"")
                    .attr(""class"", ""axis axis--y"")
                    .call(d3.axisLeft(y));
            }
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,618,619
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Units Sold vs Revenue</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""scatterplot"" style=""width: 100%; height: 600px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const unitsSold = [];
                const revenue = [];
                const tooltipData = [];

                lines.forEach(line => {
                    const [year, product, units, revenueAmount, profit, stores, satisfaction] = line.split(',');
                    unitsSold.push(parseFloat(units));
                    revenue.push(parseFloat(revenueAmount));
                    tooltipData.push({ units: units, revenue: revenueAmount });
                });

                const myChart = echarts.init(document.getElementById('scatterplot'));

                const option = {
                    tooltip: {
                        trigger: 'item',
                        formatter: function(params) {
                            const data = tooltipData[params.dataIndex];
                            return `Units Sold: ${data.units}<br/>Revenue: ${data.revenue}`;
                        }
                    },
                    xAxis: {
                        name: 'Units Sold',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Revenue',
                        type: 'value'
                    },
                    series: [{
                        type: 'scatter',
                        data: unitsSold.map((units, index) => [units, revenue[index]]),
                        itemStyle: {
                            color: '#5470c6'
                        }
                    }]
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,619,620
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Units Sold vs Revenue</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 600px;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <script>
        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv');
            const data = await response.text();
            const rows = data.split('\n').slice(1);

            const chartData = rows.map(row => {
                const cols = row.split(',');
                return {
                    unitsSold: parseInt(cols[2]),
                    revenue: parseFloat(cols[3])
                };
            }).filter(d => !isNaN(d.unitsSold) && !isNaN(d.revenue));

            return chartData;
        }

        async function renderChart() {
            const data = await fetchData();
            const unitsSold = data.map(item => item.unitsSold);
            const revenue = data.map(item => item.revenue);

            const myChart = echarts.init(document.getElementById('main'));

            const option = {
                tooltip: {
                    trigger: 'item',
                    formatter: function (params) {
                        return `Units Sold: ${params.data[0]}<br>Revenue: $${params.data[1].toFixed(2)}`;
                    }
                },
                xAxis: {
                    name: 'Units Sold',
                    type: 'value',
                },
                yAxis: {
                    name: 'Revenue',
                    type: 'value',
                },
                series: [{
                    type: 'scatter',
                    data: data.map(item => [item.unitsSold, item.revenue]),
                    markPoint: {
                        data: [{
                            type: 'max',
                            name: 'Max Revenue'
                        }, {
                            type: 'min',
                            name: 'Min Revenue'
                        }]
                    }
                }]
            };

            myChart.setOption(option);

            // Brushing functionality
            myChart.on('brushSelected', function (params) {
                const selectedPoints = [];
                params.batch.forEach(batch => {
                    batch.selected[0].dataIndex.forEach(index => {
                        selectedPoints.push(data[index]);
                    });
                });
                console.log('Selected Points:', selectedPoints);
            });
        }

        renderChart();
    </script>
</body>
</html>
```",Unexpected Execution Result,620,621
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Units Sold vs Revenue</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""scatterplot"" style=""width: 100%; height: 600px;""></div>
    <script>
        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv');
            const data = await response.text();
            const lines = data.split('\n').slice(1); // Skip the header

            const xData = [];
            const yData = [];

            lines.forEach(line => {
                const cols = line.split(',');
                if (cols.length === 7) {
                    const unitsSold = parseFloat(cols[2]);
                    const revenue = parseFloat(cols[3]);
                    if (!isNaN(unitsSold) && !isNaN(revenue)) {
                        xData.push(unitsSold);
                        yData.push(revenue);
                    }
                }
            });

            return { xData, yData };
        }

        async function initScatterplot() {
            const { xData, yData } = await fetchData();

            const scatterplot = echarts.init(document.getElementById('scatterplot'));

            const option = {
                tooltip: {
                    trigger: 'item',
                },
                xAxis: {
                    type: 'value',
                    name: 'Units Sold',
                },
                yAxis: {
                    type: 'value',
                    name: 'Revenue',
                },
                series: [{
                    name: 'Sales Data',
                    type: 'scatter',
                    data: xData.map((units, index) => [units, yData[index]]),
                    symbolSize: 10,
                }],
                toolbox: {
                    feature: {
                        saveAsImage: {}
                    }
                }
            };

            scatterplot.setOption(option);

            // Enable zoom
            scatterplot.on('dblclick', function () {
                scatterplot.dispatchAction({ type: 'restore' });
            });

            scatterplot.on('datazoom', function (params) {
                scatterplot.dispatchAction({ type: 'dataZoom', event: 'mousemove' });
            });
        }

        initScatterplot();
    </script>
</body>
</html>
```",Unexpected Execution Result,621,622
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Units Sold vs Revenue</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n');
                const headers = lines[0].split(',');
                const scatterData = [];

                for (let i = 1; i < lines.length; i++) {
                    const line = lines[i].split(',');
                    if (line.length === headers.length) {
                        const year = line[0];
                        const product = line[1];
                        const unitsSold = parseFloat(line[2]);
                        const revenue = parseFloat(line[3]);
                        scatterData.push({
                            value: [unitsSold, revenue],
                            product: product,
                            year: year
                        });
                    }
                }

                const myChart = echarts.init(document.getElementById('main'));
                const option = {
                    tooltip: {
                        formatter: params => {
                            return `Product: ${params.data.product}<br/>
                                    Year: ${params.data.year}<br/>
                                    Units Sold: ${params.data.value[0]}<br/>
                                    Revenue: $${params.data.value[1]}`;
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Units Sold'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Revenue'
                    },
                    series: [{
                        symbolSize: 10,
                        data: scatterData,
                        type: 'scatter',
                        itemStyle: {
                            color: '#73C0DE'
                        }
                    }]
                };

                myChart.setOption(option);

                myChart.on('click', function (params) {
                    const product = params.data.product;
                    const year = params.data.year;
                    const query = `${product} ${year}`;
                    window.open(`https://www.google.com/search?q=${encodeURIComponent(query)}`, '_blank');
                });
            });
    </script>
</body>
</html>
```",Correct,622,623
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot with query widgets showing the Units Sold and Revenue of the given dataset. Add a slider to represent the Year.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot with ECharts</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 600px;
        }
        #yearSlider {
            width: 100%;
        }
    </style>
</head>
<body>
    <h2>Units Sold vs Revenue Scatterplot</h2>
    <input type=""range"" id=""yearSlider"" min=""2015"" max=""2020"" value=""2015"" step=""1"">
    <div id=""main""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const chartData = [];
                lines.forEach(line => {
                    const cols = line.split(',');
                    if (cols.length > 1 && cols[0]) {
                        chartData.push({
                            year: cols[0],
                            unitsSold: parseFloat(cols[2]),
                            revenue: parseFloat(cols[3])
                        });
                    }
                });

                const initChart = (year) => {
                    const filteredData = chartData.filter(item => item.year === year);
                    const unitsSold = filteredData.map(item => item.unitsSold);
                    const revenue = filteredData.map(item => item.revenue);

                    const myChart = echarts.init(document.getElementById('main'));
                    myChart.setOption({
                        title: {
                            text: `Units Sold vs Revenue for ${year}`
                        },
                        tooltip: {},
                        xAxis: {
                            name: 'Units Sold',
                            type: 'value'
                        },
                        yAxis: {
                            name: 'Revenue',
                            type: 'value'
                        },
                        series: [{
                            symbolSize: 10,
                            data: filteredData.map((item) => [item.unitsSold, item.revenue]),
                            type: 'scatter'
                        }]
                    });
                };

                const yearSlider = document.getElementById('yearSlider');
                yearSlider.oninput = () => {
                    initChart(yearSlider.value);
                };

                initChart(yearSlider.value);
            });
    </script>
</body>
</html>
```",Correct,623,624
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot showing the Units Sold of Clothing. Add animated transitions that connect these points using lines in order.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold of Clothing Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 500px;""></div>
    
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1); // skip header
                const clothingData = [];
                
                lines.forEach(line => {
                    const cols = line.split(',');
                    if (cols[1] === 'Clothing') {
                        clothingData.push({
                            year: parseInt(cols[0]),
                            unitsSold: parseInt(cols[2]),
                            revenue: parseFloat(cols[3]),
                            profit: parseFloat(cols[4]),
                            numberOfStores: parseInt(cols[5]),
                            customerSatisfaction: parseFloat(cols[6])
                        });
                    }
                });

                const unitsSoldData = clothingData.map(item => item.unitsSold);
                const years = clothingData.map(item => item.year);

                const option = {
                    title: {
                        text: 'Units Sold of Clothing Over Years'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    xAxis: {
                        type: 'category',
                        data: years,
                        name: 'Year'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Units Sold'
                    },
                    series: [{
                        name: 'Units Sold',
                        type: 'scatter',
                        data: clothingData.map(item => [item.year, item.unitsSold]),
                        animationDuration: 1000,
                        animationEasing: 'cubicInOut',
                        animationDelay: (idx) => idx * 200
                    }, {
                        name: 'Line',
                        type: 'line',
                        data: clothingData.map(item => [item.year, item.unitsSold]),
                        smooth: true,
                        lineStyle: {
                            color: '#ff6600'
                        }
                    }]
                };

                const myChart = echarts.init(document.getElementById('main'));
                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,624,625
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Units Sold of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Multi-Series Line Chart</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.0/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const years = [...new Set(rows.map(row => row.split(',')[0]))];
                const products = [...new Set(rows.map(row => row.split(',')[1]))];
                
                const unitsSoldData = products.map(product => {
                    return years.map(year => {
                        const row = rows.find(r => r.startsWith(year + ',' + product));
                        return row ? +row.split(',')[2] : 0;
                    });
                });

                const series = products.map((product, index) => {
                    return {
                        name: product,
                        type: 'line',
                        data: unitsSoldData[index],
                        smooth: true,
                    };
                });

                const option = {
                    title: {
                        text: 'Units Sold by Product over Years',
                    },
                    tooltip: {
                        trigger: 'axis',
                    },
                    legend: {
                        data: products,
                    },
                    xAxis: {
                        type: 'category',
                        data: years,
                    },
                    yAxis: {
                        type: 'value',
                    },
                    series: series,
                    visualMap: [{
                        show: false,
                        dimension: 0,
                        pieces: products.map((product, index) => ({
                            value: index,
                            color: '#'+(Math.random()*0xFFFFFF<<0).toString(16)
                        }))
                    }],
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);

                series.forEach((serie, index) => {
                    chart.on('mouseover', { name: serie.name }, function () {
                        const highlighted = series.map((s, i) => {
                            return {
                                name: s.name,
                                type: 'line',
                                data: s.data,
                                smooth: true,
                                lineStyle: {
                                    opacity: i === index ? 1 : 0.2
                                }
                            };
                        });
                        chart.setOption({
                            series: highlighted,
                        });
                    });
                    chart.on('mouseout', { name: serie.name }, function () {
                        chart.setOption({
                            series: series,
                        });
                    });
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,625,626
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Units Sold for each Product in 2020. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const unitsSoldData = {};
                
                rows.forEach(row => {
                    const cols = row.split(',');
                    const year = cols[0];
                    const product = cols[1];
                    const unitsSold = parseInt(cols[2]);

                    if (year === '2020') {
                        if (!unitsSoldData[product]) {
                            unitsSoldData[product] = 0;
                        }
                        unitsSoldData[product] += unitsSold;
                    }
                });

                const products = Object.keys(unitsSoldData);
                const unitsSold = products.map(product => unitsSoldData[product]);

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);

                const option = {
                    title: {
                        text: 'Units Sold for Each Product in 2020'
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: products
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        name: 'Units Sold',
                        type: 'bar',
                        data: unitsSold
                    }],
                    dataZoom: [{
                        type: 'inside',
                        start: 0,
                        end: 100
                    }, {
                        type: 'slider',
                        start: 0,
                        end: 100
                    }],
                    zoom: true
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,626,627
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Units Sold for each Product in 2020. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #chart {
            width: 100%;
            height: 500px;
        }
    </style>
</head>
<body>
    <div id=""chart""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const productData = {};

                lines.forEach(line => {
                    const [year, product, unitsSold, revenue, profit, numberOfStores, customerSatisfactionScore] = line.split(',');
                    if (year === '2020') {
                        productData[product] = productData[product] || 0; 
                        productData[product] += parseInt(unitsSold, 10);
                    }
                });

                const products = Object.keys(productData);
                const unitsSold = Object.values(productData);

                const chart = echarts.init(document.getElementById('chart'));

                const option = {
                    title: {
                        text: 'Units Sold for Each Product in 2020',
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: products,
                        axisLabel: {
                            interval: 0,
                            rotate: 45
                        }
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        name: 'Units Sold',
                        type: 'bar',
                        data: unitsSold,
                        draggable: true
                    }]
                };

                chart.setOption(option);

                chart.on('dragend', function (params) {
                    const newData = [];
                    const newProducts = [];
                    
                    params.batch.forEach(item => {
                        newProducts.push(item.componentData.data[item.dataIndex].name);
                        newData.push(item.componentData.data[item.dataIndex].value);
                    });

                    const sortedIndex = [...params.batch.map(item => item.dataIndex)].sort((a, b) => a - b);
                    sortedIndex.forEach(index => {
                        productData[params.batch[index].name] = newData[index];
                    });

                    option.xAxis.data = Object.keys(productData);
                    option.series[0].data = Object.values(productData);
                    chart.setOption(option);
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,627,628
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Units Sold for each Product in 2020. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Units Sold.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Product Units Sold in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 600px;
            height: 400px;
        }
    </style>
</head>
<body>

<div id=""main""></div>
<select id=""sortOrder"" onchange=""updateChart()"">
    <option value=""asc"">Sort Ascending</option>
    <option value=""desc"">Sort Descending</option>
</select>

<script>
    let chartData = [];
    let currentOrder = 'asc';

    fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1);
            rows.forEach(row => {
                const cols = row.split(',');
                if (cols[0] === '2020') {
                    chartData.push({ product: cols[1], unitsSold: parseInt(cols[2]) });
                }
            });
            updateChart();
        });

    function updateChart() {
        const sortedData = chartData.sort((a, b) => currentOrder === 'asc' ? a.unitsSold - b.unitsSold : b.unitsSold - a.unitsSold);
        const products = sortedData.map(item => item.product);
        const unitsSold = sortedData.map(item => item.unitsSold);

        const option = {
            title: {
                text: 'Units Sold in 2020',
            },
            tooltip: {},
            xAxis: {
                type: 'category',
                data: products,
            },
            yAxis: {
                type: 'value',
            },
            series: [{
                name: 'Units Sold',
                type: 'bar',
                data: unitsSold,
                animationDuration: 1000,
                itemStyle: {
                    color: '#42A5F5'
                },
            }]
        };

        const myChart = echarts.init(document.getElementById('main'));
        myChart.setOption(option);
    }

    document.getElementById('sortOrder').addEventListener('change', function() {
        currentOrder = this.value;
        updateChart();
    });
</script>

</body>
</html>
```",Correct,628,629
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Units Sold vs. Revenue</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.22.1/build/vega.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.7.0/build/vega-lite.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.19.0/build/vega-embed.js""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""title"": ""Relationship between Units Sold and Revenue"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Units Sold"",
                    ""type"": ""quantitative"",
                    ""title"": ""Units Sold""
                },
                ""y"": {
                    ""field"": ""Revenue"",
                    ""type"": ""quantitative"",
                    ""title"": ""Revenue""
                },
                ""tooltip"": [
                    {""field"": ""Units Sold"", ""type"": ""quantitative""},
                    {""field"": ""Revenue"", ""type"": ""quantitative""}
                ]
            },
            ""config"": {
                ""view"": {
                    ""tooltip"": true
                }
            }
        };

        vegaEmbed('#vis', spec).then(function(res) {
            // Hover event to highlight values
            res.view.addEventListener('mouseover', (event) => {
                const tooltip = event.target.closest('.vega-tooltip');
                if (tooltip) {
                    const dataPoint = res.view.data('table').rows[event.target.__data__.index];
                    const x = dataPoint['Units Sold'];
                    const y = dataPoint['Revenue'];
                    tooltip.innerHTML = `Units Sold: ${x} <br/> Revenue: ${y}`;
                }
            });
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,629,630
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Units Sold vs Revenue</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.9.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            $schema: 'https://vega.github.io/schema/vega-lite/v5.json',
            description: 'Scatterplot of Units Sold vs Revenue',
            data: { 
                url: 'https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv',
                format: { 
                    type: 'csv' 
                }
            },
            mark: 'point',
            encoding: {
                x: { field: 'Units Sold', type: 'quantitative', title: 'Units Sold' },
                y: { field: 'Revenue', type: 'quantitative', title: 'Revenue' },
                tooltip: [
                    { field: 'Product', type: 'nominal', title: 'Product' },
                    { field: 'Units Sold', type: 'quantitative', title: 'Units Sold' },
                    { field: 'Revenue', type: 'quantitative', title: 'Revenue' }
                ]
            },
            selection: {
                brush: {
                    type: 'interval',
                    encodings: ['x', 'y']
                }
            },
            layer: [
                {
                    mark: 'point',
                    encoding: {
                        opacity: {
                            condition: { selection: 'brush', value: 1 },
                            value: 0.2
                        }
                    }
                }
            ]
        };

        vegaEmbed('#vis', spec).then(function(result) {}).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,630,631
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Units Sold vs Revenue</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.6.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatter plot showing the relationship between Units Sold and Revenue."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": { ""field"": ""Units Sold"", ""type"": ""quantitative"" },
                ""y"": { ""field"": ""Revenue"", ""type"": ""quantitative"" },
                ""tooltip"": [
                    { ""field"": ""Units Sold"", ""type"": ""quantitative"" },
                    { ""field"": ""Revenue"", ""type"": ""quantitative"" },
                    { ""field"": ""Profit"", ""type"": ""quantitative"" }
                ]
            },
            ""config"": {
                ""view"": { ""zoom"": true }
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Execution Result,631,632
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Units Sold and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">

<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Units Sold vs Revenue</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.8.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>

<body>
    <div id=""vis""></div>
    <script>
        const specification = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""circle"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Units Sold"",
                    ""type"": ""quantitative"",
                    ""axis"": { ""title"": ""Units Sold"" }
                },
                ""y"": {
                    ""field"": ""Revenue"",
                    ""type"": ""quantitative"",
                    ""axis"": { ""title"": ""Revenue"" }
                },
                ""tooltip"": [
                    {""field"": ""Product"", ""type"": ""nominal""},
                    {""field"": ""Units Sold"", ""type"": ""quantitative""},
                    {""field"": ""Revenue"", ""type"": ""quantitative""},
                    {""field"": ""Profit"", ""type"": ""quantitative""},
                    {""field"": ""Customer Satisfaction Score"", ""type"": ""quantitative""}
                ]
            },
            ""selection"": {
                ""point"": {
                    ""type"": ""single"",
                    ""fields"": [""Units Sold"", ""Revenue""],
                    ""on"": ""mouseover""
                }
            }
        };

        vegaEmbed('#vis', specification).then(function (result) {
            const vis = result.view;

            // Add click event to open Google search
            vis.addEventListener('click', function (event) {
                const item = vis.data('point')
                    .filter(d => d !== null)[0]; // get the clicked data point
                if (item) {
                    const query = `${item[""Units Sold""]} ${item[""Revenue""]}`;
                    window.open(`https://www.google.com/search?q=${encodeURIComponent(query)}`, '_blank');
                }
            });
        }).catch(console.error);
    </script>
</body>

</html>
```",Execution Error,632,633
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot with query widgets showing the Units Sold and Revenue of the given dataset. Add a slider to represent the Year.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Vega-Lite Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const vlSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""title"": ""Units Sold vs Revenue"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""params"": [
                {
                    ""name"": ""yearSlider"",
                    ""value"": 2020,
                    ""bind"": {
                        ""input"": ""range"",
                        ""min"": 2015,
                        ""max"": 2022,
                        ""step"": 1
                    }
                }
            ],
            ""transform"": [
                {
                    ""filter"": ""datum.Year == yearSlider""
                }
            ],
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Units Sold"",
                    ""type"": ""quantitative"",
                    ""title"": ""Units Sold""
                },
                ""y"": {
                    ""field"": ""Revenue"",
                    ""type"": ""quantitative"",
                    ""title"": ""Revenue""
                },
                ""tooltip"": [
                    {""field"": ""Product"", ""type"": ""nominal"", ""title"": ""Product""},
                    {""field"": ""Units Sold"", ""type"": ""quantitative"", ""title"": ""Units Sold""},
                    {""field"": ""Revenue"", ""type"": ""quantitative"", ""title"": ""Revenue""}
                ]
            }
        };

        vegaEmbed('#vis', vlSpec).then(function (result) {
            // Log the result for debugging
        }).catch(console.error);
    </script>
</body>
</html>
```",Correct,633,634
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot showing the Units Sold of Clothing. Add animated transitions that connect these points using lines in order.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Clothing Units Sold Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const yourSpec = {
            $schema: 'https://vega.github.io/schema/vega-lite/v5.json',
            description: 'Scatterplot of Units Sold for Clothing with Animated Transitions',
            data: {
                url: 'https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv',
                format: { type: 'csv' }
            },
            transform: [
                {
                    filter: ""datum.Product === 'Clothing'""
                },
                {
                    sort: {'field': 'Year', 'order': 'ascending'}
                }
            ],
            mark: {
                type: 'point',
                tooltip: true
            },
            encoding: {
                x: {
                    field: 'Year',
                    type: 'ordinal',
                    title: 'Year'
                },
                y: {
                    field: 'Units Sold',
                    type: 'quantitative',
                    title: 'Units Sold'
                },
                color: {
                    field: 'Product',
                    type: 'nominal'
                },
                order: {
                    field: 'Year',
                    type: 'ordinal'
                }
            },
            layer: [
                {
                    mark: 'line'
                },
                {
                    mark: 'point'
                }
            ],
            config: {
                view: {
                    continuousWidth: 400,
                    continuousHeight: 200
                }
            }
        };

        vegaEmbed('#vis', yourSpec).then(function(result) {
            // Access to the Vega view instance, if needed
        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Initial Result,634,635
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Units Sold of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Multi-series Line Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2/dist/vega-embed.min.js""></script>
</head>
<body>
    <div id=""vis""></div>
    <script type=""text/javascript"">
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""Multi-series line chart highlighting Units Sold."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": {
                ""type"": ""line"",
                ""point"": true,
                ""tooltip"": true,
                ""strokeWidth"": 2
            },
            ""encoding"": {
                ""x"": {
                    ""field"": ""Year"",
                    ""type"": ""temporal"",
                    ""title"": ""Year""
                },
                ""y"": {
                    ""field"": ""Units Sold"",
                    ""type"": ""quantitative"",
                    ""title"": ""Units Sold""
                },
                ""color"": {
                    ""field"": ""Product"",
                    ""type"": ""nominal"",
                    ""title"": ""Product""
                },
                ""opacity"": {
                    ""condition"": {
                        ""test"": ""datum.Product === hoverProduct"",
                        ""value"": 1
                    },
                    ""value"": 0.5
                }
            },
            ""transform"": [
                {
                    ""calculate"": ""datum.Product"",
                    ""as"": ""hoverProduct""
                }
            ],
            ""background"": ""#fff""
        };

        vegaEmbed('#vis', spec).then(function(result) {
            // Add interactivity
            const view = result.view;
            view.addEventListener('mouseover', function(event, item) {
                if (item && item.mark && item.mark.name === 'line') {
                    const product = item.datum.Product;
                    view.data('hoverProduct', product);
                    view.run();
                }
            });
            view.addEventListener('mouseout', function(event) {
                view.data('hoverProduct', null);
                view.run();
            });
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,635,636
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Units Sold for each Product in 2020. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold by Product in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.22.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.7.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.22.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
      const spec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""description"": ""A bar chart showing Units Sold for each Product in 2020."",
        ""data"": {
          ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
          ""format"": {
            ""type"": ""csv""
          }
        },
        ""transform"": [
          {
            ""filter"": ""datum.Year == 2020""
          }
        ],
        ""mark"": ""bar"",
        ""encoding"": {
          ""x"": {
            ""field"": ""Product"",
            ""type"": ""ordinal"",
            ""title"": ""Product""
          },
          ""y"": {
            ""field"": ""Units Sold"",
            ""type"": ""quantitative"",
            ""title"": ""Units Sold""
          }
        },
        ""config"": {
          ""view"": {
            ""continuousWidth"": 600,
            ""continuousHeight"": 400,
            ""stroke"": ""transparent""
          }
        }
      };

      vegaEmbed('#vis', spec, {actions: false}).then(result => {
        // Optional: Add interactions for zoom and pan
        const view = result.view;
        view.addSignalListener(""zoom"", () => view.runAsync());
        view.addSignalListener(""pan"", () => view.runAsync());
      });
    </script>
</body>
</html>
```",Unexpected Execution Result,636,637
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Units Sold for each Product in 2020. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold by Product in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.3.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
    <style>
        #vis {
            width: 100%;
            height: 500px;
        }
    </style>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const filterData = {
            ""transform"": [
                {
                    ""filter"": ""datum.Year == 2020""
                }
            ]
        };

        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": filterData.transform,
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Product"",
                    ""type"": ""ordinal"",
                    ""axis"": {
                        ""title"": ""Product""
                    }
                },
                ""y"": {
                    ""field"": ""Units Sold"",
                    ""type"": ""quantitative"",
                    ""axis"": {
                        ""title"": ""Units Sold""
                    }
                },
                ""order"": {
                    ""field"": ""Units Sold"",
                    ""type"": ""quantitative"",
                    ""sort"": ""descending""
                }
            },
            ""config"": {
                ""drag"": ""x"",
                ""bar"": {
                    ""tooltip"": true
                }
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            // Add interactive drag and drop to reorder bars
            const view = result.view;
            view.addEventListener('mousedown', () => {
                view.renderer('svg'); // Ensure the renderer is SVG
            });
        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Execution Result,637,638
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Units Sold for each Product in 2020. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Units Sold.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold by Product in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Year == 2020""
                },
                {
                    ""calculate"": ""datum.Units Sold"",
                    ""as"": ""Units_Sold""
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Product"",
                    ""type"": ""ordinal"",
                    ""sort"": null
                },
                ""y"": {
                    ""field"": ""Units_Sold"",
                    ""type"": ""quantitative""
                },
                ""tooltip"": [
                    {""field"": ""Product"", ""type"": ""ordinal""},
                    {""field"": ""Units_Sold"", ""type"": ""quantitative""}
                ]
            },
            ""config"": {
                ""mark"": {
                    ""tooltip"": true
                }
            }
        };

        const sortOrder = [""Ascending"", ""Descending""];
        let currentSortOrder = sortOrder[0];

        function updateSort() {
            const newSpec = JSON.parse(JSON.stringify(spec));
            if (currentSortOrder === ""Ascending"") {
                newSpec.encoding.x.sort = ""y"";
            } else {
                newSpec.encoding.x.sort = ""-y"";
            }
            vegaEmbed('#vis', newSpec).then(result => {
                // Result will be the view instance.
            }).catch(console.error);
        }

        // Initial render
        vegaEmbed('#vis', spec).then(result => {
            // Add sort order dropdown
            const dropdown = document.createElement('select');
            dropdown.onchange = function() {
                currentSortOrder = this.value;
                updateSort();
            };
            sortOrder.forEach(order => {
                const option = document.createElement('option');
                option.value = order;
                option.text = order;
                dropdown.appendChild(option);
            });
            document.body.insertBefore(dropdown, document.getElementById('vis'));
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,638,639
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Retail Sales Visualization</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .scatterplot {
            float: left;
            width: 50%;
            height: 500px;
        }
        .barchart {
            float: right;
            width: 50%;
            height: 500px;
        }
        svg {
            font-family: sans-serif;
            font-size: 10px;
        }
    </style>
</head>
<body>
    <div class=""scatterplot"" id=""scatterplot""></div>
    <div class=""barchart"" id=""barchart""></div>

    <script>
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(function(data) {
            data.forEach(function(d) {
                d[""Units Sold""] = +d[""Units Sold""];
                d.Revenue = +d.Revenue;
                d.Profit = +d.Profit;
                d[""Customer Satisfaction Score""] = +d[""Customer Satisfaction Score""];
            });

            const scatterWidth = 400, scatterHeight = 400;
            const scatterSvg = d3.select(""#scatterplot"").append(""svg"")
                .attr(""width"", scatterWidth)
                .attr(""height"", scatterHeight);
            
            const xScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.Revenue)])
                .range([0, scatterWidth - 40]);

            const yScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.Profit)])
                .range([scatterHeight - 40, 0]);

            scatterSvg.append(""g"")
                .attr(""transform"", ""translate(0,"" + (scatterHeight - 40) + "")"")
                .call(d3.axisBottom(xScale));
            scatterSvg.append(""g"")
                .attr(""transform"", ""translate(40,0)"")
                .call(d3.axisLeft(yScale));

            scatterSvg.selectAll(""circle"")
                .data(data)
                .enter().append(""circle"")
                .attr(""cx"", d => xScale(d.Revenue) + 20)
                .attr(""cy"", d => yScale(d.Profit))
                .attr(""r"", 5)
                .attr(""fill"", ""blue"");

            // Bar Chart
            const barWidth = 400;
            const barSvg = d3.select(""#barchart"").append(""svg"")
                .attr(""width"", barWidth)
                .attr(""height"", scatterHeight);
            
            const xBarScale = d3.scaleBand()
                .domain(data.map(d => d.Product))
                .range([0, barWidth - 40])
                .padding(0.1);

            const yBarScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Units Sold""])])
                .range([scatterHeight - 40, 0]);

            barSvg.append(""g"")
                .attr(""transform"", ""translate(0,"" + (scatterHeight - 40) + "")"")
                .call(d3.axisBottom(xBarScale).tickFormat(d => d.length > 10 ? d.slice(0, 10) + '...' : d));
            barSvg.append(""g"")
                .attr(""transform"", ""translate(40,0)"")
                .call(d3.axisLeft(yBarScale));

            barSvg.selectAll("".bar"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => xBarScale(d.Product) + 20)
                .attr(""y"", d => yBarScale(d[""Units Sold""]))
                .attr(""width"", xBarScale.bandwidth())
                .attr(""height"", d => scatterHeight - 40 - yBarScale(d[""Units Sold""]))
                .attr(""fill"", ""orange"");
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,639,640
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Interactive Charts</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter {
            float: left;
            width: 50%;
        }
        .bar {
            float: right;
            width: 50%;
        }
        .axis path,
        .axis line {
            fill: none;
            shape-rendering: crispEdges;
        }
        .highlight {
            fill: orange;
        }
    </style>
</head>
<body>
    <div class=""scatter"" id=""scatterplot""></div>
    <div class=""bar"" id=""barchart""></div>

    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 40 };
        const width = 400 - margin.left - margin.right;
        const height = 300 - margin.top - margin.bottom;

        const scatterSvg = d3.select(""#scatterplot"").append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
          .append(""g"")
            .attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");
        
        const barSvg = d3.select(""#barchart"").append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
          .append(""g"")
            .attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d[""Units Sold""] = +d[""Units Sold""];
                d.Revenue = +d.Revenue;
                d.Profit = +d.Profit;
                d[""Customer Satisfaction Score""] = +d[""Customer Satisfaction Score""];
            });

            const xScatter = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Units Sold""])])
                .range([0, width]);

            const yScatter = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.Profit)])
                .range([height, 0]);

            const xBar = d3.scaleBand()
                .range([0, width])
                .padding(0.1)
                .domain(data.map(d => d.Product));

            const yBar = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.Revenue)])
                .range([height, 0]);

            scatterSvg.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", ""translate(0,"" + height + "")"")
                .call(d3.axisBottom(xScatter));

            scatterSvg.append(""g"")
                .attr(""class"", ""y axis"")
                .call(d3.axisLeft(yScatter));

            scatterSvg.selectAll('dot')
                .data(data)
              .enter().append('circle')
                .attr('class', 'scatter-circle')
                .attr('cx', d => xScatter(d[""Units Sold""]))
                .attr('cy', d => yScatter(d.Profit))
                .attr('r', 5)
                .attr('fill', 'blue')
                .on(""mouseover"", function (event, d) {
                    d3.select(this).transition().duration(200).attr(""r"", 8).attr(""fill"", ""orange"");
                })
                .on(""mouseout"", function (event, d) {
                    d3.select(this).transition().duration(200).attr(""r"", 5).attr(""fill"", ""blue"");
                })
                .on(""click"", brushed);

            barSvg.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", ""translate(0,"" + height + "")"")
                .call(d3.axisBottom(xBar));

            barSvg.append(""g"")
                .attr(""class"", ""y axis"")
                .call(d3.axisLeft(yBar));

            const bars = barSvg.selectAll("".bar"")
                .data(data)
              .enter()
              .append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => xBar(d.Product))
                .attr(""y"", d => yBar(d.Revenue))
                .attr(""width"", xBar.bandwidth())
                .attr(""height"", d => height - yBar(d.Revenue))
                .attr(""fill"", ""gray"");

            function brushed(event) {
                const selected = new Set();
                const [x0, x1] = d3.extent(data, d => xScatter(d[""Units Sold""]));
                const y0 = d3.event.selection[0][1];
                const y1 = d3.event.selection[1][1];

                scatterSvg.selectAll('.scatter-circle')
                    .classed('highlight', false)
                    .filter(d => xScatter(d[""Units Sold""]) >= x0 && xScatter(d[""Units Sold""]) <= x1 && yScatter(d.Profit) >= y0 && yScatter(d.Profit) <= y1)
                    .classed('highlight', true)
                    .each(function(d) { selected.add(d.Product); });

                bars.attr(""fill"", d => selected.has(d.Product) ? ""orange"" : ""gray"");
            }

            scatterSvg.append(""brush"")
                .call(d3.brush() // add brush tool
                    .extent([[0, 0], [width, height]])
                    .on(""brush end"", brushed));
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,640,641
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Sold , while the pie chart represents the distribution of Revenue.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Retail Sales Visualization</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .chart {
            margin: 20px;
        }
        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 2px;
        }
        .arc {
            stroke: #fff;
        }
    </style>
</head>
<body>
    <div class=""chart"" id=""line-chart""></div>
    <div class=""chart"" id=""pie-chart""></div>

    <script>
        const margin = {top: 20, right: 20, bottom: 30, left: 50},
              width = 800 - margin.left - margin.right,
              height = 400 - margin.top - margin.bottom;

        const svgLine = d3.select(""#line-chart"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const svgPie = d3.select(""#pie-chart"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${width / 2 + margin.left},${height / 2 + margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            // Process data for line chart
            data.forEach(d => {
                d[""Units Sold""] = +d[""Units Sold""];
                d[""Year""] = +d[""Year""];
            });

            const xScale = d3.scaleLinear()
                .domain(d3.extent(data, d => d[""Year""]))
                .range([0, width]);

            const yScaleLine = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Units Sold""])])
                .range([height, 0]);

            const line = d3.line()
                .x(d => xScale(d[""Year""]))
                .y(d => yScaleLine(d[""Units Sold""]));

            svgLine.append(""path"")
                .datum(data)
                .attr(""class"", ""line"")
                .attr(""d"", line);

            svgLine.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(xScale));

            svgLine.append(""g"")
                .call(d3.axisLeft(yScaleLine));

            // Process data for pie chart
            const revenueData = d3.rollup(data, v => d3.sum(v, d => d[""Revenue""]), d => d[""Product""]);
            const pieData = Array.from(revenueData, ([key, value]) => ({key, value}));

            const radius = Math.min(width, height) / 2;

            const pie = d3.pie().value(d => d.value);
            const arc = d3.arc().innerRadius(0).outerRadius(radius);

            const g = svgPie.selectAll("".arc"")
                .data(pie(pieData))
                .enter().append(""g"")
                .attr(""class"", ""arc"");

            g.append(""path"")
                .attr(""class"", ""arc"")
                .attr(""d"", arc)
                .style(""fill"", (d, i) => d3.schemeCategory10[i]);

            g.append(""text"")
                .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                .attr(""dy"", "".35em"")
                .text(d => d.data.key);
        });
    </script>
</body>
</html>
```",Correct,641,642
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Sold , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Retail Sales Visualization</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke-width: 2;
        }

        .arc {
            stroke: white;
        }

        .tooltip {
            position: absolute;
            text-align: center;
            width: 60px;
            height: 28px;
            padding: 2px;
            font: 12px sans-serif;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <div id=""line-chart""></div>
    <div id=""pie-chart""></div>
    <script>
        const svgWidth = 800, svgHeight = 400;
        const margin = {top: 20, right: 30, bottom: 50, left: 70};
        const lineChartHeight = svgHeight / 2;
        const pieChartHeight = svgHeight / 2;

        const svgLine = d3.select(""#line-chart"")
            .append(""svg"")
            .attr(""width"", svgWidth)
            .attr(""height"", lineChartHeight);

        const svgPie = d3.select(""#pie-chart"")
            .append(""svg"")
            .attr(""width"", svgWidth)
            .attr(""height"", pieChartHeight);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d[""Units Sold""] = +d[""Units Sold""];
                d[""Revenue""] = +d[""Revenue""];
            });

            drawLineChart(data);
            drawPieChart(data);

            function drawLineChart(data) {
                const x = d3.scaleBand()
                    .domain(data.map(d => d[""Year""]))
                    .range([margin.left, svgWidth - margin.right])
                    .padding(0.1);

                const y = d3.scaleLinear()
                    .domain([0, d3.max(data, d => d[""Units Sold""])])
                    .nice()
                    .range([lineChartHeight - margin.bottom, margin.top]);

                svgLine.append(""g"")
                    .attr(""transform"", `translate(0,${lineChartHeight - margin.bottom})`)
                    .call(d3.axisBottom(x));

                svgLine.append(""g"")
                    .attr(""transform"", `translate(${margin.left},0)`)
                    .call(d3.axisLeft(y));

                const line = d3.line()
                    .x(d => x(d[""Year""]) + x.bandwidth() / 2)
                    .y(d => y(d[""Units Sold""]));

                svgLine.append(""path"")
                    .datum(data)
                    .attr(""class"", ""line"")
                    .attr(""d"", line)
                    .attr(""stroke"", ""steelblue"");

                svgLine.selectAll("".dot"")
                    .data(data)
                    .enter().append(""circle"")
                    .attr(""class"", ""dot"")
                    .attr(""cx"", d => x(d[""Year""]) + x.bandwidth() / 2)
                    .attr(""cy"", d => y(d[""Units Sold""]))
                    .attr(""r"", 5)
                    .on(""mouseover"", function(event, d) {
                        d3.select(this).attr(""r"", 7);
                    })
                    .on(""mouseout"", function(event, d) {
                        d3.select(this).attr(""r"", 5);
                    })
                    .on(""click"", function(event, d) {
                        updatePieChart(data.filter(dd => dd[""Year""] === d[""Year""]));
                    });
            }

            function drawPieChart(data) {
                const pieData = d3.rollup(data, v => d3.sum(v, d => d[""Revenue""]), d => d[""Product""]);
                const pie = d3.pie().value(d => d[1]);
                const arcs = pie(Array.from(pieData));

                const radius = Math.min(svgWidth, pieChartHeight) / 2 - 10;

                const g = svgPie.append(""g"")
                    .attr(""transform"", `translate(${svgWidth / 2},${pieChartHeight / 2})`);

                const color = d3.scaleOrdinal(d3.schemeCategory10);
                
                g.selectAll("".arc"")
                    .data(arcs)
                    .enter().append(""path"")
                    .attr(""class"", ""arc"")
                    .attr(""d"", d3.arc().innerRadius(0).outerRadius(radius))
                    .attr(""fill"", (d, i) => color(i));

                g.selectAll("".label"")
                    .data(arcs)
                    .enter().append(""text"")
                    .attr(""transform"", d => `translate(${d3.arc().innerRadius(0).outerRadius(radius).centroid(d)})`)
                    .attr(""dy"", "".35em"")
                    .text(d => d.data[0]);
            }

            function updatePieChart(selectedData) {
                const pieData = d3.rollup(selectedData, v => d3.sum(v, d => d[""Revenue""]), d => d[""Product""]);
                const pie = d3.pie().value(d => d[1]);
                const arcs = pie(Array.from(pieData));

                svgPie.selectAll(""*"").remove();
                const g = svgPie.append(""g"")
                    .attr(""transform"", `translate(${svgWidth / 2},${pieChartHeight / 2})`);

                const color = d3.scaleOrdinal(d3.schemeCategory10);
                
                g.selectAll("".arc"")
                    .data(arcs)
                    .enter().append(""path"")
                    .attr(""class"", ""arc"")
                    .attr(""d"", d3.arc().innerRadius(0).outerRadius(Math.min(svgWidth, pieChartHeight) / 2 - 10))
                    .attr(""fill"", (d, i) => color(i));

                g.selectAll("".label"")
                    .data(arcs)
                    .enter().append(""text"")
                    .attr(""transform"", d => `translate(${d3.arc().innerRadius(0).outerRadius(Math.min(svgWidth, pieChartHeight) / 2 - 10).centroid(d)})`)
                    .attr(""dy"", "".35em"")
                    .text(d => d.data[0]);
            }
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,642,643
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Units Sold, Revenue, Profit, and Customer Satisfaction. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot Matrix</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .scatter {
            cursor: pointer;
        }
        .highlight {
            fill: orange;
        }
        .axis text {
            font-size: 12px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""800""></svg>
    <script>
        const width = 400;
        const height = 400;
        const padding = 30;
        const dimensions = ['Units Sold', 'Revenue', 'Profit', 'Customer Satisfaction Score'];
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d['Units Sold'] = +d['Units Sold'];
                d['Revenue'] = +d['Revenue'];
                d['Profit'] = +d['Profit'];
                d['Customer Satisfaction Score'] = +d['Customer Satisfaction Score'];
            });

            const color = d3.scaleOrdinal(d3.schemeCategory10);
            const brush = d3.brush().extent([[0, 0], [width, height]])
                .on(""brush end"", brushed);

            const svg = d3.select(""svg"");

            const xScales = {};
            const yScales = {};
            dimensions.forEach(dim => {
                xScales[dim] = d3.scaleLinear()
                    .domain(d3.extent(data, d => d[dim])).nice()
                    .range([padding, width - padding]);
                yScales[dim] = d3.scaleLinear()
                    .domain(d3.extent(data, d => d[dim])).nice()
                    .range([height - padding, padding]);
            });

            const g = svg.selectAll("".scatter"")
                .data(dimensions)
                .enter().append(""g"")
                .attr(""class"", ""scatter"")
                .attr(""transform"", (d, i) => `translate(${(i % 2) * width}, ${Math.floor(i / 2) * height})`);

            g.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", `translate(0, ${height - padding})`)
                .each(function(d) { d3.select(this).call(d3.axisBottom(xScales[d])); })
                .append(""text"")
                .attr(""x"", width - padding)
                .attr(""y"", -5)
                .attr(""fill"", ""black"")
                .text(d => d);

            g.append(""g"")
                .attr(""class"", ""y axis"")
                .each(function(d) { d3.select(this).call(d3.axisLeft(yScales[d])); })
                .append(""text"")
                .attr(""x"", 5)
                .attr(""y"", padding)
                .attr(""fill"", ""black"")
                .attr(""transform"", ""rotate(-90)"")
                .text(d => d);

            g.append(""g"")
                .selectAll(""dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""circle"")
                .attr(""r"", 3)
                .attr(""cx"", d => xScales['Units Sold'](d['Units Sold']))
                .attr(""cy"", d => yScales['Units Sold'](d['Revenue']))
                .style(""fill"", (d, i) => color(i))
                .on(""mouseover"", function() { d3.select(this).style(""fill"", ""red""); })
                .on(""mouseout"", function() { d3.select(this).style(""fill"", null); });

            g.append(""g"").call(brush);

            function brushed(event) {
                const selection = event.selection;
                const selected = data.filter(d => {
                    const x = xScales['Units Sold'](d['Units Sold']);
                    const y = yScales['Units Sold'](d['Revenue']);
                    return selection && selection[0][0] <= x && x <= selection[1][0] && 
                           selection[0][1] <= y && y <= selection[1][1];
                });

                svg.selectAll(""circle"")
                    .classed(""highlight"", false)
                    .filter(d => selected.includes(d))
                    .classed(""highlight"", true);
            }
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,643,644
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a brushable Scatterplot that visualizes the relationship between Units Sold and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Brushable Scatterplot</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        body { font-family: Arial, sans-serif; }
        .scatterplot { margin-left: 50px; }
        .brush { stroke: #000; stroke-opacity: 0.2; fill: #000; fill-opacity: 0.2; }
        table { border-collapse: collapse; margin-left: 20px; }
        th, td { border: 1px solid #ddd; padding: 8px; }
        th { background-color: #f2f2f2; }
    </style>
</head>
<body>
    <h1>Units Sold vs Revenue</h1>
    <svg class=""scatterplot"" width=""800"" height=""400""></svg>
    <div>
        <h2>Selected Points</h2>
        <table>
            <thead>
                <tr>
                    <th>Year</th>
                    <th>Product</th>
                    <th>Units Sold</th>
                    <th>Revenue</th>
                    <th>Profit</th>
                    <th>Number of Stores</th>
                    <th>Customer Satisfaction Score</th>
                </tr>
            </thead>
            <tbody id=""tableBody""></tbody>
        </table>
    </div>

    <script>
        const svg = d3.select('.scatterplot'),
              margin = { top: 20, right: 30, bottom: 30, left: 40 },
              width = +svg.attr('width') - margin.left - margin.right,
              height = +svg.attr('height') - margin.top - margin.bottom;

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        const g = svg.append('g').attr('transform', `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d['Units Sold'] = +d['Units Sold'];
                d['Revenue'] = +d['Revenue'];
            });

            x.domain(d3.extent(data, d => d['Units Sold'])).nice();
            y.domain([0, d3.max(data, d => d['Revenue'])]).nice();

            g.append('g')
                .attr('class', 'x-axis')
                .attr('transform', `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append('g')
                .attr('class', 'y-axis')
                .call(d3.axisLeft(y));

            g.selectAll('.dot')
                .data(data)
                .enter().append('circle')
                .attr('class', 'dot')
                .attr('cx', d => x(d['Units Sold']))
                .attr('cy', d => y(d['Revenue']))
                .attr('r', 5)
                .style('fill', '#4daf4a');

            const brush = d3.brush().extent([[0, 0], [width, height]])
                .on(""brush end"", brushed);

            g.append(""g"")
                .attr(""class"", ""brush"")
                .call(brush);

            function brushed(event) {
                const selection = d3.event.selection;
                if (selection) {
                    const [[x0, y0], [x1, y1]] = selection;
                    const filteredData = data.filter(d => 
                        x(d['Units Sold']) >= x0 && x(d['Units Sold']) <= x1 && 
                        y(d['Revenue']) >= y1 && y(d['Revenue']) <= y0
                    ).slice(0, 20);

                    const tbody = d3.select(""#tableBody"").selectAll(""tr"").data(filteredData);
                    tbody.join(""tr"").html(d => 
                        `<td>${d['Year']}</td>
                         <td>${d['Product']}</td>
                         <td>${d['Units Sold']}</td>
                         <td>${d['Revenue']}</td>
                         <td>${d['Profit']}</td>
                         <td>${d['Number of Stores']}</td>
                         <td>${d['Customer Satisfaction Score']}</td>`
                    );
                }
            }
        });
    </script>
</body>
</html>
```",Correct,644,645
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a horizontal Bar Chart that shows Product and Units Sold, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Horizontal Bar Chart with D3</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .mini-map {
            width: 50%;
            height: 50px;
        }
        .x-axis path,
        .x-axis line {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const margin = {top: 20, right: 30, bottom: 30, left: 100};
        const width = 800 - margin.left - margin.right;
        const height = 400 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d[""Units Sold""] = +d[""Units Sold""];
            });

            const x = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Units Sold""])])
                .range([0, width]);

            const y = d3.scaleBand()
                .domain(data.map(d => d.Product))
                .range([0, height])
                .padding(0.1);

            svg.append(""g"")
                .selectAll("".bar"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", 0)
                .attr(""y"", d => y(d.Product))
                .attr(""width"", d => x(d[""Units Sold""]))
                .attr(""height"", y.bandwidth());

            svg.append(""g"")
                .attr(""class"", ""x-axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            const miniMapSvg = d3.select(""body"").append(""svg"")
                .attr(""class"", ""mini-map"")
                .attr(""width"", 800)
                .attr(""height"", 50);

            const miniX = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Units Sold""])])
                .range([0, 800]);

            const miniY = d3.scaleBand()
                .domain(data.map(d => d.Product))
                .range([0, 50])
                .padding(0.1);

            miniMapSvg.append(""g"")
                .selectAll("".mini-bar"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""mini-bar"")
                .attr(""x"", 0)
                .attr(""y"", d => miniY(d.Product))
                .attr(""width"", d => miniX(d[""Units Sold""]))
                .attr(""height"", miniY.bandwidth());
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,645,646
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Retail Sales Visualization</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.0.2/echarts.min.js""></script>
    <style>
        #main {
            display: flex;
            justify-content: space-between;
            height: 500px;
        }
        #scatterplot, #barchart {
            width: 48%;
            height: 100%;
        }
    </style>
</head>
<body>
    <div id=""main"">
        <div id=""scatterplot""></div>
        <div id=""barchart""></div>
    </div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const parsedData = lines.map(line => {
                    const [year, product, unitsSold, revenue, profit, numberOfStores, customerSatisfactionScore] = line.split(',');
                    return { year, product, unitsSold: +unitsSold, revenue: +revenue, profit: +profit, numberOfStores: +numberOfStores, customerSatisfactionScore: +customerSatisfactionScore };
                }).filter(item => item.year); // Filter out any empty lines

                const scatterData = parsedData.map(item => [item.revenue, item.profit]);
                const barData = parsedData.reduce((acc, item) => {
                    acc[item.product] = (acc[item.product] || 0) + item.unitsSold;
                    return acc;
                }, {});

                const scatterChart = echarts.init(document.getElementById('scatterplot'));
                const barChart = echarts.init(document.getElementById('barchart'));

                scatterChart.setOption({
                    title: { text: 'Revenue vs Profit Scatterplot' },
                    tooltip: {},
                    xAxis: { name: 'Revenue' },
                    yAxis: { name: 'Profit' },
                    series: [{
                        type: 'scatter',
                        data: scatterData,
                        itemStyle: { color: 'blue' },
                    }]
                });

                barChart.setOption({
                    title: { text: 'Units Sold by Product' },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: Object.keys(barData)
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        name: 'Units Sold',
                        type: 'bar',
                        data: Object.values(barData),
                        itemStyle: { color: 'orange' },
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,646,647
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Retail Sales Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #charts {
            display: flex;
        }
        #scatterplot, #barchart {
            width: 50%;
            height: 400px;
        }
    </style>
</head>
<body>
    <div id=""charts"">
        <div id=""scatterplot""></div>
        <div id=""barchart""></div>
    </div>

    <script>
        const url = 'https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv';

        fetch(url)
            .then(response => response.text())
            .then(data => {
                const parsedData = parseCSV(data);
                drawScatterplot(parsedData);
                drawBarChart(parsedData);
            });

        function parseCSV(data) {
            const lines = data.split('\n').slice(1);
            const result = [];
            lines.forEach(line => {
                const cols = line.split(',');
                if (cols.length >= 7) {
                    result.push({
                        Year: cols[0],
                        Product: cols[1],
                        UnitsSold: parseFloat(cols[2]),
                        Revenue: parseFloat(cols[3]),
                        Profit: parseFloat(cols[4]),
                        NumberOfStores: parseInt(cols[5]),
                        CustomerSatisfactionScore: parseFloat(cols[6])
                    });
                }
            });
            return result;
        }

        function drawScatterplot(data) {
            const scatterplot = echarts.init(document.getElementById('scatterplot'));
            const option = {
                title: { text: 'Units Sold vs. Revenue' },
                tooltip: {},
                xAxis: { type: 'value', name: 'Revenue' },
                yAxis: { type: 'value', name: 'Units Sold' },
                series: [{
                    type: 'scatter',
                    symbolSize: 10,
                    data: data.map(item => [item.Revenue, item.UnitsSold]),
                    itemStyle: {
                        normal: { color: '#FF8C00' }
                    }
                }]
            };

            scatterplot.setOption(option);

            scatterplot.on('click', function (params) {
                const selectedData = data[params.dataIndex];
                highlightBarChart(selectedData);
            });

            scatterplot.on('brushSelected', function (params) {
                const brushedPoints = params.batch[0].selected[0].dataIndex.map(index => data[index]);
                highlightBarChart(brushedPoints);
            });
        }

        function drawBarChart(data) {
            const barchart = echarts.init(document.getElementById('barchart'));
            const option = {
                title: { text: 'Sales Data by Product' },
                tooltip: {},
                xAxis: {
                    type: 'category',
                    data: [...new Set(data.map(item => item.Product))]
                },
                yAxis: { type: 'value' },
                series: [{
                    name: 'Revenue',
                    type: 'bar',
                    data: data.reduce((acc, curr) => {
                        const index = acc.findIndex(item => item.name === curr.Product);
                        if (index > -1) {
                            acc[index].value += curr.Revenue;
                        } else {
                            acc.push({ name: curr.Product, value: curr.Revenue });
                        }
                        return acc;
                    }, [])
                }]
            };

            barchart.setOption(option);
        }

        function highlightBarChart(selectedData) {
            const barchart = echarts.getInstanceByDom(document.getElementById('barchart'));
            const productNames = Array.isArray(selectedData) ? selectedData.map(item => item.Product) : [selectedData.Product];
            barchart.dispatchAction({
                type: 'highlight',
                seriesIndex: 0,
                dataIndex: productNames
                    .map(name => barchart.getOption().series[0].data.findIndex(item => item.name === name))
                    .filter(index => index !== -1)
            });
        }
    </script>
</body>
</html>
```",Unexpected Execution Result,647,648
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Sold , while the pie chart represents the distribution of Revenue.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Data Visualization</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 600px;
        }
        #lineChart {
            height: 400px;
        }
        #pieChart {
            height: 200px;
        }
    </style>
</head>
<body>
    <div id=""main"">
        <div id=""lineChart""></div>
        <div id=""pieChart""></div>
    </div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const unitsSoldData = [];
                const revenueData = {};
                
                rows.forEach(row => {
                    const [year, product, unitsSold, revenue] = row.split(',');
                    unitsSoldData.push([year, parseInt(unitsSold)]);
                    
                    revenueData[product] = (revenueData[product] || 0) + parseFloat(revenue);
                });

                // Line chart for Units Sold
                const lineChart = echarts.init(document.getElementById('lineChart'));
                lineChart.setOption({
                    title: { text: 'Units Sold Over Years' },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: [...new Set(unitsSoldData.map(item => item[0]))]
                    },
                    yAxis: { type: 'value' },
                    series: [{
                        name: 'Units Sold',
                        type: 'line',
                        data: unitsSoldData.map(item => item[1])
                    }]
                });

                // Pie chart for Revenue
                const pieChart = echarts.init(document.getElementById('pieChart'));
                const pieData = Object.keys(revenueData).map(product => ({ name: product, value: revenueData[product] }));

                pieChart.setOption({
                    title: { text: 'Revenue Distribution by Product', subtext: 'Total Revenue', x: 'center' },
                    tooltip: { trigger: 'item' },
                    series: [{
                        name: 'Revenue',
                        type: 'pie',
                        radius: '50%',
                        data: pieData,
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        },
                        left: 'center'
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,648,649
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Sold , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Sales Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 400px;
        }
        #pie {
            width: 100%;
            height: 400px;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <div id=""pie""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const salesData = rows.map(row => {
                    const cols = row.split(',');
                    return {
                        year: cols[0],
                        product: cols[1],
                        unitsSold: +cols[2],
                        revenue: +cols[3],
                        profit: +cols[4],
                        numberOfStores: +cols[5],
                        customerSatisfaction: +cols[6]
                    };
                });

                const unitsSoldData = salesData.map(item => item.unitsSold);
                const revenueData = salesData.reduce((acc, item) => {
                    acc[item.product] = (acc[item.product] || 0) + item.revenue;
                    return acc;
                }, {});
                const revenueLabels = Object.keys(revenueData);
                const revenueValues = Object.values(revenueData);

                const lineChart = echarts.init(document.getElementById('main'));
                const pieChart = echarts.init(document.getElementById('pie'));

                lineChart.setOption({
                    title: { text: 'Trend of Units Sold' },
                    xAxis: { type: 'category', data: salesData.map(item => item.year) },
                    yAxis: { type: 'value' },
                    series: [{ 
                        data: unitsSoldData, 
                        type: 'line', 
                        smooth: true 
                    }],
                    brush: {
                        type: ['lineX', 'lineY'],
                        outOfBrush: { color: '#abc' },
                        brushStyle: { borderWidth: 2, color: '#3c3' }
                    }
                });

                lineChart.on('brushSelected', function (params) {
                    const selected = params.batch[0].selected;
                    const selectedData = [];
                    for (const key in selected) {
                        if (selected[key]) {
                            selectedData.push(salesData[key]);
                        }
                    }
                    const filteredRevenueData = selectedData.reduce((acc, item) => {
                        acc[item.product] = (acc[item.product] || 0) + item.revenue;
                        return acc;
                    }, {});
                    const filteredRevenueLabels = Object.keys(filteredRevenueData);
                    const filteredRevenueValues = Object.values(filteredRevenueData);

                    pieChart.setOption({
                        title: { text: 'Revenue Distribution', left: 'center' },
                        series: [{
                            type: 'pie',
                            radius: '50%',
                            data: filteredRevenueLabels.map((label, index) => ({
                                value: filteredRevenueValues[index],
                                name: label
                            })),
                            emphasis: {
                                itemStyle: {
                                    shadowBlur: 10,
                                    shadowOffsetX: 0,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            }
                        }]
                    });
                });

                pieChart.setOption({
                    title: { text: 'Revenue Distribution', left: 'center' },
                    series: [{
                        type: 'pie',
                        radius: '50%',
                        data: revenueLabels.map((label, index) => ({
                            value: revenueValues[index],
                            name: label
                        })),
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }]
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,649,650
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Units Sold, Revenue, Profit, and Customer Satisfaction. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        .chart {
            width: 100%;
            height: 400px;
            display: inline-block;
        }
    </style>
</head>
<body>
    <div id=""scatterplotMatrix"" style=""display: flex; flex-wrap: wrap; width: 800px;"">
        <div id=""scatter1"" class=""chart""></div>
        <div id=""scatter2"" class=""chart""></div>
        <div id=""scatter3"" class=""chart""></div>
        <div id=""scatter4"" class=""chart""></div>
        <div id=""scatter5"" class=""chart""></div>
        <div id=""scatter6"" class=""chart""></div>
        <div id=""scatter7"" class=""chart""></div>
        <div id=""scatter8"" class=""chart""></div>
        <div id=""scatter9"" class=""chart""></div>
    </div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const dataset = rows.map(row => {
                    const cols = row.split(',');
                    return {
                        Units_Sold: +cols[2],
                        Revenue: +cols[3],
                        Profit: +cols[4],
                        Customer_Satisfaction: +cols[6]
                    };
                }).filter(d => !isNaN(d.Units_Sold));

                const createScatterChart = (xData, yData, elementId, xLabel, yLabel) => {
                    const chart = echarts.init(document.getElementById(elementId));
                    chart.setOption({
                        tooltip: {},
                        xAxis: { type: 'value', name: xLabel },
                        yAxis: { type: 'value', name: yLabel },
                        series: [{
                            symbolSize: 20,
                            data: dataset.map(d => [d[xData], d[yData]]),
                            type: 'scatter',
                            itemStyle: { color: 'rgba(100, 150, 200, 0.5)' }
                        }]
                    });
                    return chart;
                };

                const scatter1 = createScatterChart('Units_Sold', 'Revenue', 'scatter1', 'Units Sold', 'Revenue');
                const scatter2 = createScatterChart('Units_Sold', 'Profit', 'scatter2', 'Units Sold', 'Profit');
                const scatter3 = createScatterChart('Units_Sold', 'Customer_Satisfaction', 'scatter3', 'Units Sold', 'Customer Satisfaction');
                const scatter4 = createScatterChart('Revenue', 'Profit', 'scatter4', 'Revenue', 'Profit');
                const scatter5 = createScatterChart('Revenue', 'Customer_Satisfaction', 'scatter5', 'Revenue', 'Customer Satisfaction');
                const scatter6 = createScatterChart('Profit', 'Customer_Satisfaction', 'scatter6', 'Profit', 'Customer Satisfaction');

                const highlightPoints = (selectedIndices) => {
                    const colors = dataset.map((_, index) => 
                        selectedIndices.includes(index) ? 'red' : 'rgba(100, 150, 200, 0.5)');
                    scatter1.setOption({ series: [{ itemStyle: { color: colors } }] });
                    scatter2.setOption({ series: [{ itemStyle: { color: colors } }] });
                    scatter3.setOption({ series: [{ itemStyle: { color: colors } }] });
                    scatter4.setOption({ series: [{ itemStyle: { color: colors } }] });
                    scatter5.setOption({ series: [{ itemStyle: { color: colors } }] });
                    scatter6.setOption({ series: [{ itemStyle: { color: colors } }] });
                };

                let selectedIndices = [];
                scatter1.on('click', params => {
                    selectedIndices = [params.dataIndex];
                    highlightPoints(selectedIndices);
                });
                scatter2.on('click', params => {
                    selectedIndices = [params.dataIndex];
                    highlightPoints(selectedIndices);
                });
                scatter3.on('click', params => {
                    selectedIndices = [params.dataIndex];
                    highlightPoints(selectedIndices);
                });
                scatter4.on('click', params => {
                    selectedIndices = [params.dataIndex];
                    highlightPoints(selectedIndices);
                });
                scatter5.on('click', params => {
                    selectedIndices = [params.dataIndex];
                    highlightPoints(selectedIndices);
                });
                scatter6.on('click', params => {
                    selectedIndices = [params.dataIndex];
                    highlightPoints(selectedIndices);
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,650,651
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a brushable Scatterplot that visualizes the relationship between Units Sold and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot with ECharts</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #scatterplot {
            width: 70%;
            height: 600px;
            float: left;
        }
        #data-table {
            width: 25%;
            height: 600px;
            overflow-y: auto;
            float: right;
            border-left: 1px solid #ccc;
            padding-left: 10px;
        }
    </style>
</head>
<body>

<div id=""scatterplot""></div>
<div id=""data-table""></div>

<script>
    fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1);
            const scatterData = rows.map(row => {
                const columns = row.split(',');
                return {
                    Year: columns[0],
                    Product: columns[1],
                    UnitsSold: parseInt(columns[2]),
                    Revenue: parseFloat(columns[3]),
                    Profit: parseFloat(columns[4]),
                    NumberOfStores: parseInt(columns[5]),
                    CustomerSatisfactionScore: parseFloat(columns[6])
                };
            }).filter(item => !isNaN(item.UnitsSold) && !isNaN(item.Revenue));

            const chartDom = document.getElementById('scatterplot');
            const myChart = echarts.init(chartDom);

            const option = {
                title: {
                    text: 'Units Sold vs Revenue Scatterplot'
                },
                tooltip: {},
                xAxis: {
                    name: 'Units Sold'
                },
                yAxis: {
                    name: 'Revenue'
                },
                toolbox: {
                    feature: {
                        brush: {
                            type: ['rect']
                        }
                    }
                },
                series: [{
                    type: 'scatter',
                    data: scatterData.map(item => [item.UnitsSold, item.Revenue]),
                    itemStyle: {
                        color: '#73C9C9'
                    }
                }]
            };

            myChart.setOption(option);

            myChart.on('brushSelected', function (params) {
                const selectedPoints = params.batch.map(batch => {
                    return batch.selected[0].dataIndex;
                }).flat().slice(0, 20).map(index => scatterData[index]);

                renderTable(selectedPoints);
            });

            function renderTable(data) {
                const tableDiv = document.getElementById('data-table');
                tableDiv.innerHTML = `<table border=""1""><tr><th>Year</th><th>Product</th><th>Units Sold</th><th>Revenue</th><th>Profit</th><th>Number of Stores</th><th>Customer Satisfaction Score</th></tr>${data.map(item => `
                    <tr>
                        <td>${item.Year}</td>
                        <td>${item.Product}</td>
                        <td>${item.UnitsSold}</td>
                        <td>${item.Revenue}</td>
                        <td>${item.Profit}</td>
                        <td>${item.NumberOfStores}</td>
                        <td>${item.CustomerSatisfactionScore}</td>
                    </tr>`).join('')}
                </table>`;
            }
        });
</script>

</body>
</html>
```",Unexpected Initial Result,651,652
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a horizontal Bar Chart that shows Product and Units Sold, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Horizontal Bar Chart with Minimap</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main { width: 70%; height: 400px; float: left; }
        #minimap { width: 25%; height: 150px; float: right; }
    </style>
</head>
<body>
    <div id=""main""></div>
    <div id=""minimap""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const products = [];
                const unitsSold = [];
                
                rows.forEach(row => {
                    const columns = row.split(',');
                    if (columns.length > 1) {
                        products.push(columns[1]);
                        unitsSold.push(parseInt(columns[2]));
                    }
                });

                const mainChart = echarts.init(document.getElementById('main'));
                const minimapChart = echarts.init(document.getElementById('minimap'));

                const mainOption = {
                    title: { text: 'Product vs Units Sold' },
                    tooltip: {},
                    xAxis: { type: 'value' },
                    yAxis: { type: 'category', data: products },
                    series: [{
                        name: 'Units Sold',
                        type: 'bar',
                        data: unitsSold,
                    }]
                };

                const minimapOption = {
                    grid: { top: '10%', right: '10%', bottom: '10%', left: '10%' },
                    xAxis: { type: 'value', show: false },
                    yAxis: { type: 'category', data: products, show: false },
                    series: [{
                        type: 'bar',
                        data: unitsSold,
                        itemStyle: { color: '#ccc' }
                    }]
                };

                mainChart.setOption(mainOption);
                minimapChart.setOption(minimapOption);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,652,653
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Vega-Lite Visualizations</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.8.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.1""></script>
    <style>
        #vis-container {
            display: flex;
        }
        #scatterplot, #barchart {
            width: 50%;
            padding: 10px;
        }
    </style>
</head>
<body>
    <div id=""vis-container"">
        <div id=""scatterplot""></div>
        <div id=""barchart""></div>
    </div>

    <script>
        const scatterplotSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Units Sold"",
                    ""type"": ""Quantitative"",
                    ""title"": ""Units Sold""
                },
                ""y"": {
                    ""field"": ""Revenue"",
                    ""type"": ""Quantitative"",
                    ""title"": ""Revenue""
                },
                ""color"": {
                    ""field"": ""Product"",
                    ""type"": ""Nominal""
                },
                ""tooltip"": [
                    {""field"": ""Year"", ""type"": ""Temporal""},
                    {""field"": ""Profit"", ""type"": ""Quantitative""},
                    {""field"": ""Number of Stores"", ""type"": ""Quantitative""},
                    {""field"": ""Customer Satisfaction Score"", ""type"": ""Quantitative""}
                ]
            }
        };

        const barChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Year"",
                    ""type"": ""Ordinal"",
                    ""title"": ""Year""
                },
                ""y"": {
                    ""aggregate"": ""sum"",
                    ""field"": ""Profit"",
                    ""type"": ""Quantitative"",
                    ""title"": ""Total Profit""
                },
                ""color"": {
                    ""field"": ""Product"",
                    ""type"": ""Nominal""
                }
            }
        };

        vegaEmbed('#scatterplot', scatterplotSpec);
        vegaEmbed('#barchart', barChartSpec);
    </script>
</body>
</html>
```",Correct,653,654
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left and a Bar Chart on the right, showing the given data. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Retail Sales Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <style>
        #chart-container {
            display: flex;
            justify-content: space-between;
        }
        .chart {
            width: 45%;
        }
    </style>
</head>
<body>
<div id=""chart-container"">
    <div id=""scatterplot"" class=""chart""></div>
    <div id=""barchart"" class=""chart""></div>
</div>

<script>
    const scatterSpec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"" },
        ""selection"": {
            "" Brush"": {
                ""type"": ""interval"",
                ""encodings"": [""x"", ""y""]
            }
        },
        ""mark"": ""point"",
        ""encoding"": {
            ""x"": { ""field"": ""Units Sold"", ""type"": ""quantitative"" },
            ""y"": { ""field"": ""Profit"", ""type"": ""quantitative"" },
            ""color"": {
                ""condition"": {
                    ""selection"": ""Brush"",
                    ""field"": ""Product"",
                    ""type"": ""nominal"",
                    ""scale"": { ""scheme"": ""category10"" }
                },
                ""value"": ""gray""
            },
            ""tooltip"": [
                { ""field"": ""Year"", ""type"": ""ordinal"" },
                { ""field"": ""Product"", ""type"": ""nominal"" },
                { ""field"": ""Units Sold"", ""type"": ""quantitative"" },
                { ""field"": ""Revenue"", ""type"": ""quantitative"" },
                { ""field"": ""Profit"", ""type"": ""quantitative"" },
                { ""field"": ""Customer Satisfaction Score"", ""type"": ""quantitative"" }
            ]
        },
        ""transform"": [
            {
                ""filter"": {
                    ""selection"": ""Brush""
                }
            }
        ]
    };

    const barSpec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"" },
        ""transform"": [
            { ""filter"": { ""selection"": ""Brush"" } },
            { ""aggregate"": [{ ""op"": ""sum"", ""field"": ""Revenue"", ""as"": ""Total Revenue"" }], ""groupby"": [""Product""] }
        ],
        ""mark"": ""bar"",
        ""encoding"": {
            ""x"": { ""field"": ""Product"", ""type"": ""ordinal"" },
            ""y"": { ""field"": ""Total Revenue"", ""type"": ""quantitative"" },
            ""color"": { ""field"": ""Product"", ""type"": ""nominal"", ""scale"": { ""scheme"": ""category10"" } }
        }
    };

    vegaEmbed('#scatterplot', scatterSpec).then(function (result) {
        const brush = result.view.addTrigger(vega.scenic, 'Brush', {
            update: 'name'
        });
        vegaEmbed('#barchart', barSpec);
    });
</script>
</body>
</html>
```",Initialization Error,654,655
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Sold , while the pie chart represents the distribution of Revenue.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Vega-Lite Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.3.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2""></script>
    <style>
        #chart1, #chart2 {
            width: 600px;
            height: 400px;
            margin: 20px auto;
        }
    </style>
</head>
<body>

<div id=""chart1""></div>
<div id=""chart2""></div>

<script type=""text/javascript"">
    const spec1 = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
            ""format"": {
                ""type"": ""csv""
            }
        },
        ""mark"": ""line"",
        ""encoding"": {
            ""x"": {
                ""field"": ""Year"",
                ""type"": ""ordinal"",
                ""title"": ""Year""
            },
            ""y"": {
                ""field"": ""Units Sold"",
                ""type"": ""quantitative"",
                ""title"": ""Units Sold""
            }
        }
    };

    const spec2 = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
            ""format"": {
                ""type"": ""csv""
            }
        },
        ""mark"": ""arc"",
        ""encoding"": {
            ""theta"": {
                ""field"": ""Revenue"",
                ""type"": ""quantitative""
            },
            ""color"": {
                ""field"": ""Product"",
                ""type"": ""nominal""
            },
            ""tooltip"": [
                {""field"": ""Product"", ""type"": ""nominal""},
                {""field"": ""Revenue"", ""type"": ""quantitative""}
            ]
        },
        ""transform"": [
            {
                ""aggregate"": [
                    {
                        ""op"": ""sum"",
                        ""field"": ""Revenue"",
                        ""as"": ""Revenue""
                    }
                ],
                ""groupby"": [""Product""]
            }
        ]
    };

    vegaEmbed('#chart1', spec1);
    vegaEmbed('#chart2', spec2);
</script>

</body>
</html>
```",Correct,655,656
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Units Sold , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Interactive Charts</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.22.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.4.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""line-chart""></div>
    <div id=""pie-chart""></div>

    <script>
        const dataUrl = ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"";

        const lineChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": dataUrl,
                ""format"": {""type"": ""csv""}
            },
            ""transform"": [
                {""filter"": ""datum['Units Sold'] != null""}
            ],
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": {""field"": ""Year"", ""type"": ""ordinal""},
                ""y"": {""field"": ""Units Sold"", ""type"": ""quantitative""},
                ""tooltip"": [
                    {""field"": ""Year"", ""type"": ""ordinal""},
                    {""field"": ""Units Sold"", ""type"": ""quantitative""}
                ]
            },
            ""selection"": {
                ""brush"": {
                    ""type"": ""interval"",
                    ""encodings"": [""x""]
                }
            }
        };

        const pieChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": dataUrl,
                ""format"": {""type"": ""csv""},
                ""transform"": [
                    {""filter"": ""datum['Revenue'] != null""},
                    {
                        ""filter"": {
                            ""selection"": ""brush""
                        }
                    }
                ]
            },
            ""mark"": ""arc"",
            ""encoding"": {
                ""theta"": {""field"": ""Revenue"", ""type"": ""quantitative""},
                ""color"": {""field"": ""Product"", ""type"": ""nominal""}
            }
        };

        vegaEmbed('#line-chart', lineChartSpec).then((result) => {
            // Update pie chart on brush selection from line chart
            result.view.addSignalListener('brush', () => {
                // Clear the previous selection if not in brush mode
                pieChartSpec.data.transform[1].filter = {
                    ""selection"": ""brush""
                };
                result.view.insert('brush', {});
                vegaEmbed('#pie-chart', pieChartSpec);
            });
        });

        vegaEmbed('#pie-chart', pieChartSpec);
    </script>
</body>
</html>
```",Unexpected Execution Result,656,657
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Units Sold, Revenue, Profit, and Customer Satisfaction. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Brushable Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm Vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm Vega-Lite@5.3.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm Vega-Embed@6.20.0""></script>
    <style>
        .vega-embed {
            max-width: 800px;
            margin: auto;
        }
    </style>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            $schema: 'https://vega.github.io/schema/vega-lite/v5.json',
            description: 'A brushable scatterplot matrix.',
            data: {
                url: 'https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv',
                format: { type: 'csv' }
            },
            transform: [
                {
                    filter: { selection: 'brush' }
                }
            ],
            selection: {
                brush: {
                    type: 'interval',
                    encodings: ['x', 'y']
                }
            },
            layer: [
                {
                    // Overall layout using 'facet'
                    facet: {
                        row: { field: 'column1', header: { title: 'Units Sold' } },
                        column: { field: 'column2', header: { title: 'Revenue' } }
                    },
                    mark: 'circle',
                    encoding: {
                        x: { field: 'column1', type: 'quantitative' },
                        y: { field: 'column2', type: 'quantitative' },
                        color: {
                            condition: {
                                selection: 'brush',
                                field: 'Profit',
                                type: 'quantitative',
                                scale: { scheme: 'category10' }
                            },
                            value: 'lightgray'
                        },
                        tooltip: [
                            { field: 'Units Sold', type: 'quantitative' },
                            { field: 'Revenue', type: 'quantitative' },
                            { field: 'Profit', type: 'quantitative' },
                            { field: 'Customer Satisfaction Score', type: 'quantitative' }
                        ]
                    }
                },
                {
                    // Plot different pairwise combinations
                    mark: 'circle',
                    data: { name: 'points' },
                    encoding: {
                        x: { field: 'Units Sold', type: 'quantitative' },
                        y: { field: 'Revenue', type: 'quantitative' },
                        color: {
                            condition: {
                                selection: 'brush',
                                field: 'Profit',
                                type: 'quantitative',
                                scale: { scheme: 'category10' }
                            },
                            value: 'lightgray'
                        },
                        tooltip: [
                            { field: 'Units Sold', type: 'quantitative' },
                            { field: 'Revenue', type: 'quantitative' },
                            { field: 'Profit', type: 'quantitative' },
                            { field: 'Customer Satisfaction Score', type: 'quantitative' }
                        ]
                    }
                }
            ]
        };

        vegaEmbed('#vis', spec).then(result => {
            // Access the Vega view instance
            const view = result.view;
            // Set the data for the points
            view.data('points', view.data('table'));
            // Render the view
            view.run();
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,657,658
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a brushable Scatterplot that visualizes the relationship between Units Sold and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Brushable Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.8.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
    <style>
        #scatterplot {
            width: 600px;
            height: 400px;
        }
        #data-table {
            margin-top: 20px;
            border-collapse: collapse;
            width: 100%;
        }
        #data-table th, #data-table td {
            border: 1px solid #ddd;
            padding: 8px;
        }
        #data-table th {
            background-color: #f2f2f2;
        }
    </style>
</head>
<body>

<div id=""scatterplot""></div>
<table id=""data-table"">
    <thead>
        <tr>
            <th>Year</th>
            <th>Product</th>
            <th>Units Sold</th>
            <th>Revenue</th>
            <th>Profit</th>
            <th>Number of Stores</th>
            <th>Customer Satisfaction Score</th>
        </tr>
    </thead>
    <tbody></tbody>
</table>

<script type=""text/javascript"">
    const scatterSpec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
            ""format"": {
                ""type"": ""csv""
            }
        },
        ""mark"": ""point"",
        ""encoding"": {
            ""x"": { ""field"": ""Units Sold"", ""type"": ""quantitative"" },
            ""y"": { ""field"": ""Revenue"", ""type"": ""quantitative"" },
            ""color"": { ""field"": ""Product"", ""type"": ""nominal"" },
            ""tooltip"": [
                { ""field"": ""Year"", ""type"": ""ordinal"" },
                { ""field"": ""Product"", ""type"": ""nominal"" },
                { ""field"": ""Units Sold"", ""type"": ""quantitative"" },
                { ""field"": ""Revenue"", ""type"": ""quantitative"" },
                { ""field"": ""Profit"", ""type"": ""quantitative"" },
                { ""field"": ""Number of Stores"", ""type"": ""quantitative"" },
                { ""field"": ""Customer Satisfaction Score"", ""type"": ""quantitative"" }
            ]
        },
        ""selection"": {
            ""brush"": {
                ""type"": ""interval"", 
                ""encodings"": [""x"", ""y""]
            }
        },
        ""transform"": [
            {
                ""filter"": {
                    ""selection"": ""brush""
                }
            }
        ]
    };

    vegaEmbed('#scatterplot', scatterSpec).then(result => {
        const view = result.view;

        view.addEventListener('click', (event) => {
            const selection = view.data('brush');
            const selected = selection.filter(d => selection.includes(d));
            const tableBody = document.querySelector('#data-table tbody');
            tableBody.innerHTML = ''; // Clear previous rows

            selected.slice(0, 20).forEach(row => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>${row.Year}</td>
                    <td>${row.Product}</td>
                    <td>${row['Units Sold']}</td>
                    <td>${row.Revenue}</td>
                    <td>${row.Profit}</td>
                    <td>${row['Number of Stores']}</td>
                    <td>${row['Customer Satisfaction Score']}</td>
                `;
                tableBody.appendChild(tr);
            });
        });
    }).catch(console.error);
</script>

</body>
</html>
```",Correct,658,659
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a horizontal Bar Chart that shows Product and Units Sold, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Vega-Lite Bar Chart with Minimap</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.8.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@7.0.0""></script>
    <style>
        #view {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
        }
        #minimap {
            width: 200px;
            height: 100px;
        }
    </style>
</head>
<body>
    <div id=""view"">
        <div id=""chart""></div>
        <div id=""minimap""></div>
    </div>

    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
                ""format"": { ""type"": ""csv"" }
            },
            ""mark"": ""bar"",
            ""encoding"": {
                ""y"": {
                    ""field"": ""Product"",
                    ""type"": ""nominal"",
                    ""axis"": { ""title"": null }
                },
                ""x"": {
                    ""field"": ""Units Sold"",
                    ""type"": ""quantitative"",
                    ""axis"": { ""title"": ""Units Sold"" }
                }
            },
            ""width"": 400,
            ""height"": 300
        };

        const minimapSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
                ""format"": { ""type"": ""csv"" }
            },
            ""mark"": ""bar"",
            ""encoding"": {
                ""y"": {
                    ""field"": ""Product"",
                    ""type"": ""nominal""
                },
                ""x"": {
                    ""field"": ""Units Sold"",
                    ""type"": ""quantitative""
                }
            },
            ""width"": 200,
            ""height"": 100
        };

        vegaEmbed('#chart', spec);
        vegaEmbed('#minimap', minimapSpec);
    </script>
</body>
</html>
```",Initialization Error,659,660
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Units Sold vs Revenue</title>
    <style>
        .scatter {
            fill: steelblue;
        }
        .axis {
            font: 10px sans-serif;
        }
        .x.axis path,
        .y.axis path {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d['Units Sold'] = +d['Units Sold'];
                d['Revenue'] = +d['Revenue'];
            });

            const x = d3.scaleLinear()
                        .domain(d3.extent(data, d => d['Units Sold'])).nice()
                        .range([0, width]);

            const y = d3.scaleLinear()
                        .domain(d3.extent(data, d => d['Revenue'])).nice()
                        .range([height, 0]);

            g.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""y axis"")
                .call(d3.axisLeft(y));

            g.selectAll("".dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""scatter"")
                .attr(""cx"", d => x(d['Units Sold']))
                .attr(""cy"", d => y(d['Revenue']))
                .attr(""r"", 5);
        });
    </script>
</body>
</html>
```",Correct,660,661
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Line Chart that visualizes the trend of Units Sold over the Year for each Product.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold Trend</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke-width: 2px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d.Year = +d.Year;
                d['Units Sold'] = +d['Units Sold'];
            });

            const products = Array.from(new Set(data.map(d => d.Product)));

            const x = d3.scaleLinear()
                .domain(d3.extent(data, d => d.Year))
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Units Sold'])])
                .range([height, 0]);

            const line = d3.line()
                .x(d => x(d.Year))
                .y(d => y(d['Units Sold']));

            const colorScale = d3.scaleOrdinal(d3.schemeCategory10).domain(products);

            products.forEach(product => {
                const productData = data.filter(d => d.Product === product);
                g.append(""path"")
                    .datum(productData)
                    .attr(""fill"", ""none"")
                    .attr(""class"", ""line"")
                    .attr(""stroke"", colorScale(product))
                    .attr(""d"", line);
            });

            g.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x).tickFormat(d3.format(""d"")));

            g.append(""g"")
                .call(d3.axisLeft(y));

            g.append(""text"")
                .attr(""x"", width / 2)
                .attr(""y"", height + margin.bottom / 2)
                .attr(""text-anchor"", ""middle"")
                .text(""Year"");

            g.append(""text"")
                .attr(""transform"", ""rotate(-90)"")
                .attr(""y"", 0 - margin.left / 2)
                .attr(""x"", 0 - height / 2)
                .attr(""text-anchor"", ""middle"")
                .text(""Units Sold"");
        });
    </script>
</body>
</html>
```",Correct,661,662
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Units Sold for each Product in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">

<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold by Product in 2020</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }

        .bar:hover {
            fill: orange;
        }

        .axis--x path {
            display: none;
        }
    </style>
</head>

<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            const filteredData = data.filter(d => d.Year === ""2020"");
            const products = filteredData.map(d => d.Product);
            const unitsSold = filteredData.map(d => +d[""Units Sold""]);

            const svg = d3.select(""svg""),
                margin = { top: 20, right: 30, bottom: 40, left: 40 },
                width = +svg.attr(""width"") - margin.left - margin.right,
                height = +svg.attr(""height"") - margin.top - margin.bottom;

            const x = d3.scaleBand()
                .domain(products)
                .range([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([0, d3.max(unitsSold)])
                .nice()
                .range([height, 0]);

            const g = svg.append(""g"")
                .attr(""transform"", `translate(${margin.left},${margin.top})`);

            g.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x).tickFormat(d => d).rotate(0));

            g.append(""g"")
                .attr(""class"", ""y axis"")
                .call(d3.axisLeft(y));

            g.selectAll("".bar"")
                .data(unitsSold)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", (d, i) => x(products[i]))
                .attr(""y"", d => y(d))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d));
        });
    </script>
</body>

</html>
```",Initialization Error,662,663
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Pie Chart that visualizes the proportion of Units Sold contributed by each Product in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold by Product in 2020</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
</head>
<body>
    <h2>Units Sold by Product in 2020</h2>
    <svg width=""500"" height=""500""></svg>
    <script>
        const width = 500;
        const height = 500;
        const radius = Math.min(width, height) / 2;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            const filteredData = data.filter(d => d.Year === ""2020"");
            const productData = d3.rollup(filteredData, v => d3.sum(v, d => +d[""Units Sold""]), d => d.Product);
            
            const pie = d3.pie().value(d => d[1]);
            const arc = d3.arc().innerRadius(0).outerRadius(radius);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const arcs = svg.selectAll(""arc"")
                .data(pie(Array.from(productData.entries())))
                .enter()
                .append(""g"")
                .attr(""class"", ""arc"");

            arcs.append(""path"")
                .attr(""d"", arc)
                .attr(""fill"", (d) => color(d.data[0]));

            arcs.append(""text"")
                .attr(""transform"", (d) => `translate(${arc.centroid(d)})`)
                .attr(""dy"", "".35em"")
                .text((d) => d.data[0]);
        });
    </script>
</body>
</html>
```",Correct,663,664
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Donut Chart that visualizes the distribution of Units Sold among Product in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Donut Chart</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .arc {
            stroke: #fff;
        }
    </style>
</head>
<body>
    <svg width=""500"" height=""500""></svg>
    <script>
        const width = 500, height = 500, margin = 50;
        const radius = Math.min(width, height) / 2 - margin;

        const svg = d3.select(""svg"")
            .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            const filteredData = data.filter(d => d.Year === ""2020"");

            const pieData = d3.rollup(filteredData, v => d3.sum(v, d => +d[""Units Sold""]), d => d.Product);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const pie = d3.pie()
                .value(d => d[1]);

            const arc = d3.arc()
                .innerRadius(radius * 0.5)
                .outerRadius(radius);

            const arcs = pie(Array.from(pieData));

            svg.selectAll(""path"")
                .data(arcs)
                .enter().append(""path"")
                .attr(""class"", ""arc"")
                .attr(""d"", arc)
                .attr(""fill"", (d, i) => color(i));
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,664,665
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Coxcomb Chart(polar area chart) to compare the Units Sold of different Product in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coxcomb Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .chart {
            fill: steelblue;
            opacity: 0.8;
        }
        .arc {
            stroke: white;
            stroke-width: 1;
        }
    </style>
</head>
<body>
    <svg width=""600"" height=""600""></svg>
    <script>
        const width = 600;
        const height = 600;
        const radius = Math.min(width, height) / 2;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            const filteredData = data.filter(d => d.Year === ""2020"");

            const unitsSold = {};
            filteredData.forEach(d => {
                const product = d.Product;
                unitsSold[product] = (unitsSold[product] || 0) + +d['Units Sold'];
            });

            const products = Object.keys(unitsSold);
            const values = Object.values(unitsSold);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const pie = d3.pie()
                .value(d => d)
                .sort(null);

            const arc = d3.arc()
                .innerRadius(0)
                .outerRadius(d => radius * (d.data / d3.max(values)));

            const arcData = pie(values);

            svg.selectAll("".arc"")
                .data(arcData)
                .enter().append(""path"")
                .attr(""class"", ""arc"")
                .attr(""d"", arc)
                .attr(""fill"", (d, i) => color(i))
                .attr(""transform"", (d, i) => `rotate(${(d.startAngle + d.endAngle) / 2 * 180 / Math.PI})`);

            svg.selectAll("".label"")
                .data(arcData)
                .enter().append(""text"")
                .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                .attr(""dy"", ""0.35em"")
                .text((d, i) => products[i]);
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,665,666
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Radar Chart to compare the Units Sold of different Product in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Radar Chart</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .radar-chart {
            position: relative;
            width: 500px;
            height: 500px;
        }

        .radar-area {
            fill-opacity: 0.5;
        }

        .radar-line {
            stroke-width: 2;
            fill: none;
        }
    </style>
</head>
<body>
    <svg class=""radar-chart""></svg>
    <script>
        const width = 500;
        const height = 500;
        const radius = Math.min(width, height) / 2;

        const radarChart = d3.select("".radar-chart"")
            .attr(""width"", width)
            .attr(""height"", height);

        const colors = d3.scaleOrdinal(d3.schemeCategory10);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            const filteredData = data.filter(d => d.Year === '2020');
            const productNames = Array.from(new Set(filteredData.map(d => d.Product)));

            const yAxis = d3.scaleLinear()
                .domain([0, d3.max(filteredData, d => +d['Units Sold'])])
                .range([0, radius]);

            const radarLine = d3.lineRadial()
                .radius((d) => yAxis(d))
                .angle((d, i) => (i * (2 * Math.PI)) / productNames.length);

            productNames.forEach((product, index) => {
                const productData = filteredData.filter(d => d.Product === product).map(d => +d['Units Sold']);
                
                radarChart.append(""path"")
                    .datum(productData)
                    .attr(""class"", ""radar-line"")
                    .attr(""d"", radarLine)
                    .attr(""transform"", `translate(${width / 2}, ${height / 2})`)
                    .style(""stroke"", colors(index))
                    .style(""fill"", colors(index));

                radarChart.append(""text"")
                    .attr(""x"", width / 2)
                    .attr(""y"", height / 2 + (index * 20) - 60)
                    .text(product);
            });
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,666,667
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Streamgraph that visualizes the changes of Units Sold over the Year for each Product.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Streamgraph Visualization</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .stream {
            fill-opacity: 0.8;
        }
    </style>
</head>
<body>
    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 100 },
              width = 960 - margin.left - margin.right,
              height = 500 - margin.top - margin.bottom;

        const svg = d3.select(""body"").append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
          .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            const allProducts = d3.nest()
                .key(d => d.Product)
                .entries(data);

            const years = Array.from(new Set(data.map(d => d.Year)));

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const stack = d3.stack()
                .keys(allProducts.map(d => d.key))
                .value((d, key) => {
                    return d.data[key] ? +d.data[key]['Units Sold'] : 0;
                });

            const series = stack(allProducts.map((prod, i) => {
                    const unitsByYear = {};
                    data.filter(d => d.Product === prod.key).forEach(d => {
                        unitsByYear[d.Year] = +d['Units Sold'];
                    });
                    return Object.assign({}, { key: prod.key }, { data: years.map(year => ({ year: year, [prod.key]: unitsByYear[year] || 0 })) });
                }));

            const x = d3.scaleTime()
                .domain(d3.extent(years, d => new Date(d)))
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(series, d => d3.max(d, key => key[1]))])
                .range([height, 0]);

            const area = d3.area()
                .x(d => x(new Date(d.data.year)))
                .y0(d => y(d[0]))
                .y1(d => y(d[1]));

            svg.selectAll("".stream"")
                .data(series)
              .enter().append(""path"")
                .attr(""class"", ""stream"")
                .attr(""d"", area)
                .style(""fill"", (d, i) => color(i))
                .attr(""transform"", `translate(0,0)`);
            
            svg.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x).tickFormat(d3.timeFormat(""%Y"")));

            svg.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,667,668
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Slopegraph to compare the Units Sold between 2019 and 2020 for each Product Category.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Slopegraph of Units Sold</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 2px;
        }
        .dot {
            fill: steelblue;
        }
        .axis {
            font: 10px sans-serif;
        }
        .x-axis path,
        .x-axis line {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = {top: 20, right: 30, bottom: 30, left: 100},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleBand().range([height, 0]).padding(0.1);

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            data.forEach(d => {
                d['Units Sold'] = +d['Units Sold'];
                d['Year'] = +d['Year'];
            });

            const products = d3.rollup(data, v => v.reduce((acc, d) => {
                if (d.Year === 2019) acc[0] = d['Units Sold'];
                if (d.Year === 2020) acc[1] = d['Units Sold'];
                return acc;
            }, [0, 0]), d => d.Product);

            const productNames = Array.from(products.keys());
            const productsData = productNames.map(d => ({
                Product: d,
                Units: products.get(d)
            }));

            x.domain([0, d3.max(productsData, d => d.Units[0])]).nice();
            y.domain(productsData.map(d => d.Product));

            g.append(""g"")
             .attr(""class"", ""x-axis"")
             .attr(""transform"", `translate(0,${height})`)
             .call(d3.axisBottom(x));

            g.append(""g"")
             .attr(""class"", ""y-axis"")
             .call(d3.axisLeft(y));

            g.selectAll("".line"")
             .data(productsData)
             .enter().append(""line"")
             .attr(""class"", ""line"")
             .attr(""x1"", d => x(d.Units[0]))
             .attr(""x2"", d => x(d.Units[1]))
             .attr(""y1"", d => y(d.Product) + y.bandwidth() / 2)
             .attr(""y2"", d => y(d.Product) + y.bandwidth() / 2);

            g.selectAll("".dot"")
             .data(productsData)
             .enter().append(""circle"")
             .attr(""class"", ""dot"")
             .attr(""cx"", d => x(d.Units[0]))
             .attr(""cy"", d => y(d.Product) + y.bandwidth() / 2)
             .attr(""r"", 4);

            g.selectAll("".dot"")
             .data(productsData)
             .enter().append(""circle"")
             .attr(""class"", ""dot"")
             .attr(""cx"", d => x(d.Units[1]))
             .attr(""cy"", d => y(d.Product) + y.bandwidth() / 2)
             .attr(""r"", 4);
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,668,669
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Heatmap that visualizes the Units Sold across Product and Years.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Heatmap of Units Sold</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .heatmap rect {
            stroke-width: 1;
            stroke: #fff;
        }
    </style>
</head>
<body>
    <svg class=""heatmap"" width=""800"" height=""400""></svg>
    <script>
        const margin = { top: 20, right: 30, bottom: 40, left: 40 },
            width = 800 - margin.left - margin.right,
            height = 400 - margin.top - margin.bottom;
        
        const svg = d3.select("".heatmap"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            const products = Array.from(new Set(data.map(d => d.Product)));
            const years = Array.from(new Set(data.map(d => d.Year)));

            const x = d3.scaleBand()
                .range([0, width])
                .domain(years)
                .padding(0.05);

            const y = d3.scaleBand()
                .range([height, 0])
                .domain(products)
                .padding(0.05);

            const colorScale = d3.scaleSequential(d3.interpolateBlues)
                .domain([0, d3.max(data, d => +d[""Units Sold""])]);

            svg.append(""g"")
                .selectAll()
                .data(data)
                .join(""rect"")
                .attr(""x"", d => x(d.Year))
                .attr(""y"", d => y(d.Product))
                .attr(""width"", x.bandwidth())
                .attr(""height"", y.bandwidth())
                .attr(""fill"", d => colorScale(+d[""Units Sold""]));

            svg.append(""g"")
                .attr(""class"", ""x-axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""y-axis"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Correct,669,670
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Stacked Bar Chart</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .bar {
            width: 40px;
            margin: 1px;
        }
        .axis {
            font: 10px sans-serif;
            fill: #000;
        }
        .legend {
            font-size: 12px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>
    <script>
        const margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = 800 - margin.left - margin.right,
              height = 500 - margin.top - margin.bottom;

        const svg = d3.select('svg')
            .append('g')
            .attr('transform', `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"")
            .then(data => {
                data.forEach(d => {
                    d['Revenue'] = +d['Revenue'];
                    d['Profit'] = +d['Profit'];
                    d['Units Sold'] = +d['Units Sold'];
                });

                const keys = ['Revenue', 'Profit'];

                const color = d3.scaleBand()
                    .domain(keys)
                    .range([0, width])
                    .padding(0.1);

                const x0 = d3.scaleBand()
                    .range([0, width])
                    .paddingInner(0.1);
                
                const x1 = d3.scaleBand()
                    .domain(keys)
                    .range([0, x0.bandwidth()])
                    .padding(0.1);
                
                const y = d3.scaleLinear()
                    .range([height, 0]);

                const subgroups = keys;

                const groupData = d3.nest()
                    .key(d => d['Year'])
                    .entries(data);

                x0.domain(groupData.map(d => d.key));

                y.domain([0, d3.max(data, d => d3.max(subgroups, key => d[key]))]);

                svg.append('g')
                    .selectAll('g')
                    .data(groupData)
                    .enter().append('g')
                    .attr('transform', d => `translate(${x0(d.key)},0)`)
                    .selectAll(""rect"")
                    .data(d => subgroups.map(key => ({key: key, value: d.values[0][key]})))
                    .enter().append(""rect"")
                    .attr(""x"", d => x1(d.key))
                    .attr(""y"", d => y(d.value))
                    .attr(""height"", d => height - y(d.value))
                    .attr(""width"", x1.bandwidth())
                    .attr(""fill"", d => d.key === 'Revenue' ? ""#74c476"" : ""#fd8d3c"");

                svg.append(""g"")
                    .attr(""class"", ""axis"")
                    .attr(""transform"", `translate(0,${height})`)
                    .call(d3.axisBottom(x0));

                svg.append(""g"")
                    .attr(""class"", ""axis"")
                    .call(d3.axisLeft(y));
                
                svg.append(""text"")
                    .attr(""x"", (width / 2))             
                    .attr(""y"", 0 - (margin.top / 2))
                    .attr(""text-anchor"", ""middle"")  
                    .style(""font-size"", ""16px"") 
                    .text(""Stacked Bar Chart of Retail Sales"");
            });
    </script>
</body>
</html>
```",Initialization Error,670,671
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Horizontal Bar Chart that visualizes the Units Sold for each Product in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path, .axis--x line {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = {top: 20, right: 30, bottom: 40, left: 100};
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleBand().range([0, height]).padding(0.1);

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"").then(data => {
            const filteredData = data.filter(d => d.Year == ""2020"").map(d => ({
                Product: d.Product,
                UnitsSold: +d[""Units Sold""]
            }));

            x.domain([0, d3.max(filteredData, d => d.UnitsSold)]);
            y.domain(filteredData.map(d => d.Product));

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            g.selectAll("".bar"")
                .data(filteredData)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", 0)
                .attr(""y"", d => y(d.Product))
                .attr(""width"", d => x(d.UnitsSold))
                .attr(""height"", y.bandwidth());
        });
    </script>
</body>
</html>
```",Correct,671,672
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot of Units Sold vs Revenue</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""scatterplot"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const unitsSold = [];
                const revenue = [];

                rows.forEach(row => {
                    const cols = row.split(',');
                    if(cols.length > 4) {
                        unitsSold.push(parseFloat(cols[2]));
                        revenue.push(parseFloat(cols[3]));
                    }
                });

                const myChart = echarts.init(document.getElementById('scatterplot'));
                const option = {
                    title: {
                        text: 'Scatterplot of Units Sold vs Revenue'
                    },
                    tooltip: {},
                    xAxis: {
                        name: 'Units Sold',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Revenue',
                        type: 'value'
                    },
                    series: [{
                        symbolSize: 10,
                        data: unitsSold.map((units, index) => [units, revenue[index]]),
                        type: 'scatter'
                    }]
                };

                myChart.setOption(option);
            })
            .catch(error => console.error('Error fetching data:', error));
    </script>
</body>
</html>
```",Correct,672,673
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Line Chart that visualizes the trend of Units Sold over the Year for each Product.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold Trend</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const result = {};
                
                lines.forEach(line => {
                    const [Year, Product, UnitsSold] = line.split(',').map(item => item.trim());
                    if (!result[Product]) {
                        result[Product] = { Year: [], UnitsSold: [] };
                    }
                    result[Product].Year.push(Year);
                    result[Product].UnitsSold.push(parseInt(UnitsSold));
                });

                const seriesData = Object.keys(result).map(product => ({
                    name: product,
                    type: 'line',
                    data: result[product].UnitsSold,
                }));

                const option = {
                    title: {
                        text: 'Units Sold Trend Over Years by Product'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    legend: {
                        data: Object.keys(result)
                    },
                    xAxis: {
                        type: 'category',
                        data: Array.from(new Set(lines.map(line => line.split(',')[0].trim()))), // unique years
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: seriesData,
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,673,674
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Units Sold for each Product in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Bar Chart of Units Sold in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 500px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const productData = {};

                rows.forEach(row => {
                    const columns = row.split(',');
                    const year = columns[0].trim();
                    const product = columns[1].trim();
                    const unitsSold = parseInt(columns[2].trim(), 10);

                    if (year === '2020') {
                        if (!productData[product]) {
                            productData[product] = 0;
                        }
                        productData[product] += unitsSold;
                    }
                });

                const products = Object.keys(productData);
                const unitsSold = products.map(product => productData[product]);

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    title: {
                        text: 'Units Sold per Product in 2020'
                    },
                    xAxis: {
                        type: 'category',
                        data: products,
                        name: 'Product'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Units Sold'
                    },
                    series: [{
                        data: unitsSold,
                        type: 'bar'
                    }]
                };
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,674,675
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Pie Chart that visualizes the proportion of Units Sold contributed by each Product in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Units Sold by Product in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 600px;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const productSales = {};
                lines.forEach(line => {
                    const [year, product, unitsSold] = line.split(',');
                    if (year === '2020') {
                        productSales[product] = (productSales[product] || 0) + parseInt(unitsSold, 10);
                    }
                });
                
                const productNames = Object.keys(productSales);
                const unitsSoldData = Object.values(productSales);

                const option = {
                    title: {
                        text: 'Units Sold by Product in 2020',
                        subtext: 'Retail Sales',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    series: [{
                        name: 'Units Sold',
                        type: 'pie',
                        radius: '50%',
                        data: productNames.map((product, index) => ({
                            name: product,
                            value: unitsSoldData[index]
                        })),
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }]
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,675,676
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Donut Chart that visualizes the distribution of Units Sold among Product in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Donut Chart of Units Sold in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""donutChart"" style=""width: 600px; height: 400px;""></div>
    <script>
        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv');
            const data = await response.text();
            const rows = data.split('\n').slice(1);
            const filteredData = rows
                .map(row => row.split(','))
                .filter(row => row[0] === '2020')
                .map(row => ({ product: row[1], unitsSold: parseInt(row[2]) }));

            return filteredData;
        }

        function createDonutChart(data) {
            const products = data.map(item => item.product);
            const unitsSold = data.map(item => item.unitsSold);

            const chart = echarts.init(document.getElementById('donutChart'));
            const option = {
                title: {
                    text: 'Distribution of Units Sold by Product in 2020',
                    left: 'center'
                },
                tooltip: {
                    trigger: 'item'
                },
                series: [
                    {
                        name: 'Units Sold',
                        type: 'pie',
                        radius: ['50%', '70%'],
                        avoidLabelOverlap: false,
                        itemStyle: {
                            borderColor: '#fff',
                            borderWidth: 2
                        },
                        label: {
                            show: true,
                            position: 'outside'
                        },
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        },
                        labelLine: {
                            show: true
                        },
                        data: products.map((product, index) => ({ value: unitsSold[index], name: product }))
                    }
                ]
            };
            chart.setOption(option);
        }

        fetchData().then(createDonutChart);
    </script>
</body>
</html>
```",Correct,676,677
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Coxcomb Chart(polar area chart) to compare the Units Sold of different Product in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coxcomb Chart Example</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 600px;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1);
            const unitsSold = {};
            rows.forEach(row => {
                const [year, product, unitsSoldValue] = row.split(',');
                if (year.trim() === '2020') {
                    if (unitsSold[product.trim()]) {
                        unitsSold[product.trim()] += parseInt(unitsSoldValue);
                    } else {
                        unitsSold[product.trim()] = parseInt(unitsSoldValue);
                    }
                }
            });

            const products = Object.keys(unitsSold);
            const units = Object.values(unitsSold);

            const chartDom = document.getElementById('main');
            const myChart = echarts.init(chartDom);
            const option = {
                title: {
                    text: 'Coxcomb Chart of Units Sold by Product in 2020',
                    subtext: 'Source: Retail Sales Data',
                    left: 'center'
                },
                tooltip: {
                    trigger: 'item'
                },
                radar: {
                    indicator: products.map((product, index) => ({
                        name: product,
                        max: Math.max(...units) + 100 // Just a buffer for visualization
                    })),
                    shape: 'circle',
                    splitNumber: 5,
                    name: {
                        textStyle: {
                            color: '#fff',
                            backgroundColor: '#999',
                            borderRadius: 3,
                            padding: [3, 5]
                        }
                    },
                    splitArea: {
                        areaStyle: {
                            color: ['rgba(255, 255, 255, 0.1)', 'rgba(119, 136, 153, 0.5)']
                        }
                    },
                    splitLine: {
                        lineStyle: {
                            color: ['#999']
                        }
                    }
                },
                series: [{
                    type: 'radar',
                    data: [{
                        value: units,
                        name: 'Units Sold'
                    }],
                    label: {
                        show: true,
                        formatter: (params) => `${params.name}: ${params.value}`
                    },
                    areaStyle: {
                        opacity: 0.5
                    }
                }]
            };
            myChart.setOption(option);
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,677,678
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Radar Chart to compare the Units Sold of different Product in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Radar Chart - Units Sold in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 600px; height: 400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const unitsSold = {};
                lines.forEach(line => {
                    const [year, product, unitsSoldValue] = line.split(',');
                    if (year.trim() === '2020') {
                        unitsSold[product.trim()] = Number(unitsSoldValue);
                    }
                });

                const productNames = Object.keys(unitsSold);
                const unitsValues = Object.values(unitsSold);

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);
                const option = {
                    title: {
                        text: 'Units Sold by Product in 2020'
                    },
                    tooltip: {},
                    radar: {
                        indicator: productNames.map(product => ({ name: product, max: Math.max(...unitsValues) + 100 })),
                    },
                    series: [{
                        name: 'Units Sold',
                        type: 'radar',
                        data: [{
                            value: unitsValues,
                            name: 'Units Sold'
                        }]
                    }]
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,678,679
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Streamgraph that visualizes the changes of Units Sold over the Year for each Product.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Streamgraph with ECharts</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const parsedData = rows.map(row => {
                    const cols = row.split(',');
                    return {
                        Year: cols[0],
                        Product: cols[1],
                        UnitsSold: +cols[2]
                    };
                });

                const years = [...new Set(parsedData.map(item => item.Year))];
                const products = [...new Set(parsedData.map(item => item.Product))];
                
                const seriesData = products.map(product => {
                    return {
                        name: product,
                        type: 'line',
                        smooth: true,
                        stack: 'total',
                        areaStyle: {},
                        data: years.map(year => {
                            const totalUnits = parsedData
                                .filter(item => item.Product === product && item.Year === year)
                                .reduce((sum, item) => sum + item.UnitsSold, 0);
                            return totalUnits;
                        })
                    };
                });

                const option = {
                    title: {
                        text: 'Units Sold Over the Years for Each Product',
                    },
                    tooltip: {
                        trigger: 'axis',
                    },
                    legend: {
                        data: products,
                    },
                    xAxis: {
                        type: 'category',
                        data: years,
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Units Sold',
                    },
                    series: seriesData
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,679,680
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Slopegraph to compare the Units Sold between 2019 and 2020 for each Product Category.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold Slopegraph</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""slopegraph"" style=""width: 800px; height: 600px;""></div>
    
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const productData = {};

                lines.forEach(line => {
                    const [year, product, unitsSold] = line.split(',');
                    if (year === '2019' || year === '2020') {
                        if (!productData[product]) {
                            productData[product] = { '2019': 0, '2020': 0 };
                        }
                        productData[product][year] = parseInt(unitsSold, 10);
                    }
                });

                const slopeData = Object.keys(productData).map(product => {
                    return {
                        product,
                        units: [productData[product]['2019'], productData[product]['2020']]
                    };
                });

                const option = {
                    title: { text: 'Units Sold Slopegraph (2019 vs 2020)' },
                    tooltip: {},
                    xAxis: {
                        type: 'value',
                        name: 'Units Sold',
                        splitLine: { show: false }
                    },
                    yAxis: {
                        type: 'category',
                        data: slopeData.map(d => d.product)
                    },
                    series: [{
                        name: 'Units Sold',
                        type: 'line',
                        data: slopeData.map(d => ({ value: d.units[0], name: d.product })).concat(
                            slopeData.map(d => ({ value: d.units[1], name: d.product }))
                        ),
                        lineStyle: { color: '#5470C6' },
                        label: { show: true, position: 'end' }
                    }]
                };

                const chart = echarts.init(document.getElementById('slopegraph'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,680,681
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Heatmap that visualizes the Units Sold across Product and Years.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold Heatmap</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""heatmap"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const heatmapData = {};
                const years = new Set();
                const products = new Set();

                rows.forEach(row => {
                    const columns = row.split(',');
                    const year = columns[0];
                    const product = columns[1];
                    const unitsSold = parseInt(columns[2]);

                    if (!heatmapData[year]) {
                        heatmapData[year] = {};
                    }
                    if (!heatmapData[year][product]) {
                        heatmapData[year][product] = 0;
                    }
                    heatmapData[year][product] += unitsSold;

                    years.add(year);
                    products.add(product);
                });

                const yearArray = Array.from(years);
                const productArray = Array.from(products);
                const matrixData = [];

                productArray.forEach(product => {
                    yearArray.forEach(year => {
                        const units = heatmapData[year][product] || 0;
                        matrixData.push([product, year, units]);
                    });
                });

                const option = {
                    tooltip: {
                        position: 'top'
                    },
                    grid: {
                        height: '50%',
                        y: '15%'
                    },
                    xAxis: {
                        type: 'category',
                        data: yearArray,
                        splitArea: {
                            show: true
                        }
                    },
                    yAxis: {
                        type: 'category',
                        data: productArray,
                        splitArea: {
                            show: true
                        }
                    },
                    visualMap: {
                        min: 0,
                        max: Math.max(...matrixData.map(d => d[2])),
                        calculable: true,
                        orient: 'horizontal',
                        left: 'center',
                        bottom: '15%',
                        inRange: {
                            color: ['#FFFFFF', '#FF4500']
                        }
                    },
                    series: [{
                        name: 'Units Sold',
                        type: 'heatmap',
                        data: matrixData.map(d => [yearArray.indexOf(d[1]), productArray.indexOf(d[0]), d[2]]),
                        label: {
                            show: true
                        },
                        emphasis: {
                            itemStyle: {
                                borderColor: '#333',
                                borderWidth: 1
                            }
                        }
                    }]
                };

                const heatmap = echarts.init(document.getElementById('heatmap'));
                heatmap.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,681,682
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Stacked Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 600px;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1);
            const years = [];
            const products = Array.from(new Set(rows.map(row => row.split(',')[1])));
            const seriesData = products.map(product => {
                return {
                    name: product,
                    type: 'bar',
                    stack: 'total',
                    data: []
                };
            });

            rows.forEach(row => {
                const cols = row.split(',');
                const year = cols[0];
                if (!years.includes(year)) {
                    years.push(year);
                }
                const unitsSold = parseInt(cols[2]);
                products.forEach((product, index) => {
                    if (cols[1] === product) {
                        seriesData[index].data.push(unitsSold);
                    }
                });
            });

            // Fill missing years with 0
            seriesData.forEach(series => {
                while (series.data.length < years.length) {
                    series.data.push(0);
                }
            });

            const option = {
                title: {
                    text: 'Stacked Bar Chart of Units Sold by Product'
                },
                tooltip: {},
                legend: {
                    data: products
                },
                xAxis: {
                    data: years
                },
                yAxis: {},
                series: seriesData
            };

            const chart = echarts.init(document.getElementById('main'));
            chart.setOption(option);
        });
    </script>
</body>
</html>
```",Correct,682,683
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Horizontal Bar Chart that visualizes the Units Sold for each Product in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold for Products in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 600px; height: 400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const products = [];
                const unitsSold = [];
                
                lines.forEach(line => {
                    const [year, product, units_sold] = line.split(',');
                    if (year === '2020') {
                        products.push(product);
                        unitsSold.push(parseInt(units_sold, 10));
                    }
                });

                const chartDom = document.getElementById('chart');
                const myChart = echarts.init(chartDom);
                const option = {
                    title: {
                        text: 'Units Sold for Products in 2020',
                        left: 'center'
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'value',
                        name: 'Units Sold'
                    },
                    yAxis: {
                        type: 'category',
                        data: products
                    },
                    series: [{
                        name: 'Units Sold',
                        type: 'bar',
                        data: unitsSold
                    }]
                };
                
                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,683,684
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Units Sold and Revenue.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Units Sold vs Revenue</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.3.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Units Sold"", 
                    ""type"": ""quantitative"",
                    ""title"": ""Units Sold""
                },
                ""y"": {
                    ""field"": ""Revenue"", 
                    ""type"": ""quantitative"",
                    ""title"": ""Revenue""
                },
                ""tooltip"": [
                    {""field"": ""Units Sold"", ""type"": ""quantitative""},
                    {""field"": ""Revenue"", ""type"": ""quantitative""}
                ]
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Correct,684,685
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Line Chart that visualizes the trend of Units Sold over the Year for each Product.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold Trend</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.8.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A line chart showing the trend of Units Sold over the Year for each Product."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Year"",
                    ""type"": ""ordinal"",
                    ""title"": ""Year""
                },
                ""y"": {
                    ""field"": ""Units Sold"",
                    ""type"": ""quantitative"",
                    ""title"": ""Units Sold""
                },
                ""color"": {
                    ""field"": ""Product"",
                    ""type"": ""nominal"",
                    ""title"": ""Product""
                }
            }
        };
        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Correct,685,686
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Units Sold for each Product in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <title>Units Sold by Product in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <style>
        #vis {
            width: 800px;
            height: 400px;
        }
    </style>
</head>
<body>
    <div id=""vis""></div>
    <script type=""text/javascript"">
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Year == 2020""
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": { ""field"": ""Product"", ""type"": ""ordinal"", ""title"": ""Product"" },
                ""y"": { ""field"": ""Units Sold"", ""type"": ""quantitative"", ""title"": ""Units Sold"" }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Correct,686,687
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Pie Chart that visualizes the proportion of Units Sold contributed by each Product in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>

<head>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>

<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A pie chart showing the proportion of Units Sold by Product in 2020."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
                ""format"": { ""type"": ""csv"" }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Year === '2020'""
                },
                {
                    ""aggregate"": [
                        { ""op"": ""sum"", ""field"": ""Units Sold"", ""as"": ""Total Units Sold"" }
                    ],
                    ""groupby"": [""Product""]
                }
            ],
            ""mark"": ""arc"",
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Total Units Sold"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Product"",
                    ""type"": ""nominal""
                }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>

</html>
```",Correct,687,688
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Donut Chart that visualizes the distribution of Units Sold among Product in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <title>Donut Chart - Units Sold Distribution in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.3.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Year == 2020""
                },
                {
                    ""aggregate"": [
                        {
                            ""op"": ""sum"",
                            ""field"": ""Units Sold"",
                            ""as"": ""Total Units Sold""
                        }
                    ],
                    ""groupby"": [""Product""]
                }
            ],
            ""mark"": {
                ""type"": ""arc"",
                ""innerRadius"": 50
            },
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Total Units Sold"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Product"",
                    ""type"": ""nominal""
                }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Correct,688,689
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Coxcomb Chart(polar area chart) to compare the Units Sold of different Product in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2.6.14""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.9.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.22.0""></script>
    <style>
        #vis {
            width: 600px;
            height: 400px;
        }
    </style>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""Coxcomb Chart showing Units Sold of Products in 2020"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Year == 2020""
                },
                {
                    ""calculate"": ""datum.Units_Sold / 100"", // Scaling down for better visual representation
                    ""as"": ""Scaled_Units_Sold""
                }
            ],
            ""mark"": ""arc"",
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Scaled_Units_Sold"",
                    ""type"": ""quantitative""
                },
                ""radius"": {
                    ""field"": ""Scaled_Units_Sold"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Product"",
                    ""type"": ""nominal"",
                    ""scale"": {
                        ""scheme"": ""category10""
                    }
                },
                ""tooltip"": [
                    {""field"": ""Product"", ""type"": ""nominal""},
                    {""field"": ""Scaled_Units_Sold"", ""type"": ""quantitative""}
                ]
            },
            ""view"": {
                ""stroke"": null
            }
        };

        vegaEmbed('#vis', spec).then(result => {
            // Access the result
        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Initial Result,689,690
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Radar Chart to compare the Units Sold of different Product in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Radar Chart of Units Sold</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <style>
        #vis {
            width: 600px;
            height: 600px;
        }
    </style>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            $schema: ""https://vega.github.io/schema/vega-lite/v5.json"",
            description: ""A radar chart comparing the Units Sold of different Products in 2020."",
            data: {
                url: ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
                format: {
                    type: ""csv""
                }
            },
            transform: [
                {
                    filter: {
                        field: 'Year',
                        equal: 2020
                    }
                },
                {
                    aggregate: [
                        {
                            op: 'sum',
                            field: 'Units Sold',
                            as: 'Total Units Sold'
                        }
                    ],
                    groupby: ['Product']
                }
            ],
            layer: [
                {
                    mark: {
                        type: ""circle"",
                        tooltip: true
                    },
                    encoding: {
                        theta: {
                            field: 'Total Units Sold',
                            type: 'quantitative'
                        },
                        color: {
                            field: 'Product',
                            type: 'nominal'
                        }
                    }
                }
            ],
            view: {
                stroke: null
            }
        };

        vegaEmbed('#vis', spec).then(result => {
            console.log(result);
        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Initial Result,690,691
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Streamgraph that visualizes the changes of Units Sold over the Year for each Product.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Streamgraph of Units Sold</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2/build/vega.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.3.0/build/vega-lite.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2/build/vega-embed.js""></script>
</head>
<body>
<div id=""vis""></div>
<script>
    const spec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
            ""format"": {
                ""type"": ""csv""
            }
        },
        ""mark"": ""area"",
        ""encoding"": {
            ""x"": {
                ""field"": ""Year"",
                ""type"": ""ordinal"",
                ""axis"": {""labelAngle"": 0}
            },
            ""y"": {
                ""field"": ""Units Sold"",
                ""type"": ""quantitative"",
                ""stack"": ""normalize""
            },
            ""color"": {
                ""field"": ""Product"",
                ""type"": ""nominal""
            }
        },
        ""resolve"": {
            ""scale"": {""y"": ""independent""}
        }
    };

    vegaEmbed('#vis', spec).then(function(result) {
        // Successfully embedded
    }).catch(console.error);
</script>
</body>
</html>
```",Unexpected Initial Result,691,692
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Slopegraph to compare the Units Sold between 2019 and 2020 for each Product Category.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Slopegraph of Units Sold</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2/build/vega.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.7.0/build/vega-lite.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0/build/vega-embed.min.js""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Year == 2019 || datum.Year == 2020""
                },
                {
                    ""calculate"": ""datum.Year + ' ' + datum.Product"",
                    ""as"": ""ProductYear""
                }
            ],
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Units Sold"",
                    ""type"": ""quantitative""
                },
                ""y"": {
                    ""field"": ""Product"",
                    ""type"": ""ordinal"",
                    ""axis"": {""title"": null}
                },
                ""tooltip"": [
                    {""field"": ""Year"", ""type"": ""ordinal""},
                    {""field"": ""Units Sold"", ""type"": ""quantitative""}
                ]
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Unexpected Initial Result,692,693
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Heatmap that visualizes the Units Sold across Product and Years.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Heatmap of Units Sold</title>
    <script src=""https://cdn.jsdelivr.net/npm Vega@5.22.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm Vega-Lite@5.3.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm Vega-Embed@6.24.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            $schema: 'https://vega.github.io/schema/vega-lite/v5.json',
            description: 'Heatmap of Units Sold across Product and Years',
            data: {
                url: 'https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv',
                format: { type: 'csv' }
            },
            mark: 'rect',
            encoding: {
                x: {
                    field: 'Year',
                    type: 'ordinal',
                    title: 'Year'
                },
                y: {
                    field: 'Product',
                    type: 'ordinal',
                    title: 'Product'
                },
                color: {
                    field: 'Units Sold',
                    type: 'quantitative',
                    title: 'Units Sold',
                    scale: { scheme: 'blues' }
                }
            },
            width: 600,
            height: 400
        };

        vegaEmbed('#vis', spec).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,693,694
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Stacked Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const specification = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A stacked bar chart showing Revenue by Product and Year."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {""filter"": ""datum.Revenue > 0""}
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Year"",
                    ""type"": ""ordinal"",
                    ""axis"": {""title"": ""Year""}
                },
                ""y"": {
                    ""aggregate"": ""sum"",
                    ""field"": ""Revenue"",
                    ""type"": ""quantitative"",
                    ""axis"": {""title"": ""Total Revenue""}
                },
                ""color"": {
                    ""field"": ""Product"",
                    ""type"": ""nominal"",
                    ""scale"": {""scheme"": ""category10""},
                    ""legend"": {""title"": ""Product""}
                }
            },
            ""config"": {
                ""legend"": {
                    ""orient"": ""top-right""
                }
            }
        };

        vegaEmbed('#vis', specification);
    </script>
</body>
</html>
```",Correct,694,695
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score
Your task is to create a Horizontal Bar Chart that visualizes the Units Sold for each Product in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv

The data table contains the following columns: Year,Product,Units Sold,Revenue,Profit,Number of Stores,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Units Sold by Product in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npmvega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.7.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2/dist/vega-embed.min.js""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const yourSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/2e1f7830c2fdc1304e65312d1c1d7657/raw/5da822cdbec89a5118d004cfa12aea0862ca65af/Retail%2520Sales.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Year === '2020'""
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""y"": {
                    ""field"": ""Product"",
                    ""type"": ""nominal"",
                    ""axis"": {""title"": ""Product""}
                },
                ""x"": {
                    ""field"": ""Units Sold"",
                    ""type"": ""quantitative"",
                    ""axis"": {""title"": ""Units Sold""}
                }
            }
        };

        vegaEmbed('#vis', yourSpec).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Initial Result,695,696
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Adoption Rate and Investment. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Adoption Rate vs Investment</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .scatter { fill: steelblue; }
        .dot:hover { fill: orange; }
        .axis--x path,
        .axis--y path { display: none; }
        .tooltip {
            position: absolute;
            text-align: center;
            width: 60px;
            height: 28px;
            padding: 2px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = { top: 20, right: 30, bottom: 30, left: 40 },
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        const tooltip = d3.select(""body"").append(""div"").attr(""class"", ""tooltip"").style(""opacity"", 0);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
            data.forEach(d => {
                d['Adoption Rate'] = +d['Adoption Rate'];
                d['Investment'] = +d['Investment'];
            });

            const x = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Investment'])])
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Adoption Rate'])])
                .range([height, 0]);

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            g.selectAll("".dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => x(d['Investment']))
                .attr(""cy"", d => y(d['Adoption Rate']))
                .attr(""r"", 5)
                .on(""mouseover"", (event, d) => {
                    tooltip.transition().duration(200).style(""opacity"", .9);
                    tooltip.html(`Adoption Rate: ${d['Adoption Rate']}<br>Investment: ${d['Investment']}`)
                        .style(""left"", (event.pageX + 5) + ""px"")
                        .style(""top"", (event.pageY - 28) + ""px"");
                })
                .on(""mouseout"", () => tooltip.transition().duration(500).style(""opacity"", 0));
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,696,697
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Adoption Rate and Investment. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatterplot {
            display: block;
            margin: auto;
        }
        .axis {
            font-size: 12px;
        }
        .dot {
            stroke: #fff;
            stroke-width: 1.5px;
            cursor: pointer;
        }
        .selected {
            fill: orange;
        }
    </style>
</head>
<body>
    <svg class=""scatterplot"" width=""800"" height=""500""></svg>
    <script>
        const svg = d3.select("".scatterplot"");
        const margin = {top: 20, right: 30, bottom: 40, left: 40};
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;
        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
            data.forEach(d => {
                d['Adoption Rate'] = +d['Adoption Rate'];
                d['Investment'] = +d['Investment'];
            });

            const x = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Investment'])])
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Adoption Rate'])])
                .range([height, 0]);

            g.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x))
                .attr(""class"", ""axis"");

            g.append(""g"")
                .call(d3.axisLeft(y))
                .attr(""class"", ""axis"");

            const dots = g.selectAll("".dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => x(d['Investment']))
                .attr(""cy"", d => y(d['Adoption Rate']))
                .attr(""r"", 5)
                .on(""click"", function(event, d) {
                    d3.selectAll("".dot"").classed(""selected"", false);
                    d3.select(this).classed(""selected"", !d3.select(this).classed(""selected""));
                });

            g.append(""brush"")
                .call(d3.brush()
                    .extent([[0, 0], [width, height]])
                    .on(""brush end"", brushed));

            function brushed(event) {
                if (!event.selection) return;
                const [[x0, y0], [x1, y1]] = event.selection;
                dots.classed(""selected"", d => {
                    const xValue = x(d['Investment']);
                    const yValue = y(d['Adoption Rate']);
                    return xValue >= x0 && xValue <= x1 && yValue >= y0 && yValue <= y1;
                });
            }
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,697,698
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Adoption Rate and Investment. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Adoption Rate vs Investment</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .axis--x path,
        .axis--y path {
            display: none;
        }
        .dot {
            stroke: #000;
            stroke-width: 1.5px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        const xAxis = d3.axisBottom(x);
        const yAxis = d3.axisLeft(y);

        svg.append(""g"").attr(""class"", ""axis axis--x"").attr(""transform"", `translate(0,${height})`);
        svg.append(""g"").attr(""class"", ""axis axis--y"");

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
            data.forEach(d => {
                d[""Adoption Rate""] = +d[""Adoption Rate""];
                d[""Investment""] = +d[""Investment""];
            });

            x.domain(d3.extent(data, d => d[""Investment""])).nice();
            y.domain(d3.extent(data, d => d[""Adoption Rate""])).nice();

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(xAxis);

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(yAxis);

            g.selectAll("".dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => x(d[""Investment""]))
                .attr(""cy"", d => y(d[""Adoption Rate""]))
                .attr(""r"", 5)
                .attr(""fill"", ""steelblue"")
                .on(""mouseover"", function(event, d) {
                    d3.select(this).transition()
                        .duration(100)
                        .attr(""r"", 8)
                        .attr(""fill"", ""orange"");
                })
                .on(""mouseout"", function(event, d) {
                    d3.select(this).transition()
                        .duration(100)
                        .attr(""r"", 5)
                        .attr(""fill"", ""steelblue"");
                });

            // Zoom behavior
            const zoom = d3.zoom()
                .scaleExtent([1, 10])
                .on(""zoom"", (event) => {
                    g.attr(""transform"", event.transform);
                    g.select("".axis--x"").call(xAxis.scale(event.transform.rescaleX(x)));
                    g.select("".axis--y"").call(yAxis.scale(event.transform.rescaleY(y)));
                    g.selectAll("".dot"")
                        .attr(""cx"", d => event.transform.applyX(x(d[""Investment""])))
                        .attr(""cy"", d => event.transform.applyY(y(d[""Adoption Rate""])));
                });

            svg.call(zoom);
        });
    </script>
</body>
</html>
```",Correct,698,699
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Adoption Rate and Investment. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .point {
            fill: steelblue;
            stroke: white;
        }
        .tooltip {
            position: absolute;
            text-align: center;
            width: 120px;
            height: auto;
            padding: 5px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
    </style>
</head>
<body>
<svg width=""800"" height=""500""></svg>
<div class=""tooltip"" style=""opacity: 0;""></div>
<script>
    const margin = {top: 20, right: 30, bottom: 30, left: 40},
          width = 800 - margin.left - margin.right,
          height = 500 - margin.top - margin.bottom;

    const svg = d3.select(""svg"")
                  .append(""g"")
                  .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

    const x = d3.scaleLinear().range([0, width]);
    const y = d3.scaleLinear().range([height, 0]);

    const tooltip = d3.select("".tooltip"");

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
        data.forEach(d => {
            d[""Adoption Rate""] = +d[""Adoption Rate""];
            d[""Investment""] = +d[""Investment""];
        });

        x.domain(d3.extent(data, d => d[""Adoption Rate""])).nice();
        y.domain(d3.extent(data, d => d[""Investment""])).nice();

        svg.append(""g"")
           .attr(""class"", ""axis x"")
           .attr(""transform"", `translate(0, ${height})`)
           .call(d3.axisBottom(x));

        svg.append(""g"")
           .attr(""class"", ""axis y"")
           .call(d3.axisLeft(y));

        svg.selectAll("".point"")
           .data(data)
           .enter()
           .append(""circle"")
           .attr(""class"", ""point"")
           .attr(""cx"", d => x(d[""Adoption Rate""]))
           .attr(""cy"", d => y(d[""Investment""]))
           .attr(""r"", 5)
           .on(""mouseover"", function(event, d) {
               tooltip.transition().duration(200).style(""opacity"", .9);
               tooltip.html(`Type: ${d[""Technology Type""]}<br/>Adoption Rate: ${d[""Adoption Rate""]}<br/>Investment: ${d[""Investment""]}`)
                      .style(""left"", (event.pageX + 5) + ""px"")
                      .style(""top"", (event.pageY - 28) + ""px"");
           })
           .on(""mouseout"", function(d) {
               tooltip.transition().duration(500).style(""opacity"", 0);
           })
           .on(""click"", function(event, d) {
               const searchUrl = `https://www.google.com/search?q=${encodeURIComponent(d[""Technology Type""])}+adoption+rate`;
               window.open(searchUrl, '_blank');
           });
    });
</script>
</body>
</html>
```",Correct,699,700
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot with query widgets showing the Adoption Rate and Investment of the given dataset. Add a slider to represent the Year.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatterplot {
            margin: 20px;
        }
        .axis line, .axis path {
            fill: none;
            shape-rendering: crispEdges;
        }
    </style>
</head>
<body>
    <div class=""scatterplot""></div>
    <input type=""range"" id=""yearSlider"" min=""2000"" max=""2023"" value=""2023"" step=""1"">
    <label for=""yearSlider"">Year: <span id=""yearValue"">2023</span></label>

    <script>
        const margin = { top: 20, right: 30, bottom: 30, left: 40 };
        const width = 800 - margin.left - margin.right;
        const height = 500 - margin.top - margin.bottom;

        const svg = d3.select("".scatterplot"").append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        const xAxis = svg.append(""g"").attr(""class"", ""x axis"").attr(""transform"", `translate(0,${height})`);
        const yAxis = svg.append(""g"").attr(""class"", ""y axis"");

        const yearSlider = document.getElementById(""yearSlider"");
        const yearValue = document.getElementById(""yearValue"");

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
            data.forEach(d => {
                d['Adoption Rate'] = +d['Adoption Rate'];
                d['Investment'] = +d['Investment'];
                d['Year'] = +d['Year'];
            });

            function update(year) {
                const filteredData = data.filter(d => d.Year === year);
                
                x.domain(d3.extent(filteredData, d => d['Investment']));
                y.domain([0, d3.max(filteredData, d => d['Adoption Rate'])]);

                xAxis.call(d3.axisBottom(x));
                yAxis.call(d3.axisLeft(y));

                const circles = svg.selectAll(""circle"").data(filteredData, d => d['Technology Type']);

                circles.enter().append(""circle"")
                    .attr(""r"", 5)
                    .merge(circles)
                    .attr(""cx"", d => x(d['Investment']))
                    .attr(""cy"", d => y(d['Adoption Rate']))
                    .attr(""fill"", ""steelblue"");

                circles.exit().remove();
            }

            yearSlider.addEventListener(""input"", function() {
                yearValue.textContent = this.value;
                update(+this.value);
            });

            update(+yearSlider.value);
        });
    </script>
</body>
</html>
```",Correct,700,701
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot showing the Adoption Rate of Cloud Computing. Add animated transitions that connect these points using lines in order.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Cloud Computing Adoption Rate Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .dot {
            fill: steelblue;
        }
        .line {
            stroke: lightblue;
            stroke-width: 2;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = { top: 20, right: 30, bottom: 30, left: 40 };
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
            const cloudData = data.filter(d => d[""Technology Type""] === ""Cloud Computing"").map(d => {
                return {
                    year: +d[""Year""],
                    adoptionRate: +d[""Adoption Rate""]
                };
            });

            x.domain(d3.extent(cloudData, d => d.year));
            y.domain([0, d3.max(cloudData, d => d.adoptionRate)]);

            g.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .call(d3.axisLeft(y));

            const line = d3.line()
                .x(d => x(d.year))
                .y(d => y(d.adoptionRate));

            g.selectAll("".dot"")
                .data(cloudData)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => x(d.year))
                .attr(""cy"", d => y(d.adoptionRate))
                .attr(""r"", 5)
                .style(""opacity"", 0)
                .transition()
                .duration(1000)
                .style(""opacity"", 1);

            g.append(""path"")
                .datum(cloudData)
                .attr(""class"", ""line"")
                .attr(""d"", line)
                .style(""opacity"", 0)
                .transition()
                .duration(1000)
                .style(""opacity"", 1);
        });
    </script>
</body>
</html>
```",Correct,701,702
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Adoption Rate of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Rate</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke-width: 2px;
        }
        .line:hover {
            stroke-width: 4px;
        }
        .axis {
            font: 10px sans-serif;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = 800 - margin.left - margin.right,
              height = 400 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
                      .append(""g"")
                      .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
            const technologies = Array.from(new Set(data.map(d => d['Technology Type'])));
            const x = d3.scaleBand()
                        .domain(data.map(d => d['Year']))
                        .range([0, width])
                        .padding(0.1);
            const y = d3.scaleLinear()
                        .domain([0, d3.max(data, d => +d['Adoption Rate'])])
                        .nice()
                        .range([height, 0]);

            const color = d3.scaleOrdinal(d3.schemeCategory10)
                            .domain(technologies);

            const line = d3.line()
                           .x(d => x(d['Year']) + x.bandwidth() / 2)
                           .y(d => y(d['Adoption Rate']));

            const groupedData = d3.group(data, d => d['Technology Type']);
            
            svg.append(""g"")
               .attr(""transform"", `translate(0,${height})`)
               .call(d3.axisBottom(x));
            
            svg.append(""g"")
               .call(d3.axisLeft(y));

            technologies.forEach(technology => {
                const techData = groupedData.get(technology);
                svg.append(""path"")
                   .datum(techData)
                   .attr(""class"", ""line"")
                   .attr(""stroke"", color(technology))
                   .attr(""d"", line)
                   .on(""mouseover"", function() { d3.select(this).style(""stroke-width"", ""4px""); })
                   .on(""mouseout"", function() { d3.select(this).style(""stroke-width"", ""2px""); });
            });
        });
    </script>
</body>
</html>
```",Correct,702,703
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Adoption Rate for each Technology Type in 2020. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Rate in 2020</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }

        .bar:hover {
            fill: orange;
        }

        .x-axis path,
        .x-axis line,
        .y-axis path,
        .y-axis line {
            fill: none;
            shape-rendering: crispEdges;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
            margin = {top: 20, right: 30, bottom: 40, left: 40},
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom,
            g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleBand().range([0, width]).padding(0.1),
            y = d3.scaleLinear().range([height, 0]);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
            const filteredData = data.filter(d => d.Year === '2020');
            filteredData.forEach(d => {
                d['Adoption Rate'] = +d['Adoption Rate'];
            });

            x.domain(filteredData.map(d => d['Technology Type']));
            y.domain([0, d3.max(filteredData, d => d['Adoption Rate'])]);

            g.append(""g"")
                .attr(""class"", ""x-axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""y-axis"")
                .call(d3.axisLeft(y));

            g.selectAll("".bar"")
                .data(filteredData)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => x(d['Technology Type']))
                .attr(""y"", d => y(d['Adoption Rate']))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d['Adoption Rate']));

            const zoom = d3.zoom()
                .scaleExtent([1, 10])
                .on(""zoom"", (event) => {
                    g.attr(""transform"", event.transform);
                });

            svg.call(zoom);
        });
    </script>
</body>
</html>
```",Correct,703,704
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Adoption Rate for each Technology Type in 2020. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Bar Chart</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis {
            font: 10px sans-serif;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
            data.forEach(d => {
                d[""Adoption Rate""] = +d[""Adoption Rate""];
                d[""Technology Type""] = d[""Technology Type""];
            });

            const filteredData = data.filter(d => d.Year == 2020);
            filteredData.sort((a, b) => b[""Adoption Rate""] - a[""Adoption Rate""]);

            const x = d3.scaleBand()
                .domain(filteredData.map(d => d[""Technology Type""]))
                .range([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([0, d3.max(filteredData, d => d[""Adoption Rate""])])
                .range([height, 0]);

            g.append(""g"")
                .selectAll("".bar"")
                .data(filteredData)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => x(d[""Technology Type""]))
                .attr(""y"", d => y(d[""Adoption Rate""]))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d[""Adoption Rate""]))
                .call(d3.drag()
                    .on(""start"", dragstarted)
                    .on(""drag"", dragged)
                    .on(""end"", dragended));

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            function dragstarted(event, d) {
                d3.select(this).raise().classed(""active"", true);
            }

            function dragged(event, d) {
                const x0 = x(d[""Technology Type""]);
                const newX = Math.min(width - x.bandwidth(), Math.max(0, event.x));
                d3.select(this).attr(""x"", newX);
                d3.select(this).attr(""y"", y(d[""Adoption Rate""]));
            }

            function dragended(event, d) {
                const newX = parseFloat(d3.select(this).attr(""x""));
                const index = filteredData.findIndex(item => item[""Technology Type""] === d[""Technology Type""]);
                const newIndex = Math.round(newX / x.bandwidth());
                const movedObject = filteredData.splice(index, 1)[0];
                filteredData.splice(newIndex, 0, movedObject);
                updateBars();
            }

            function updateBars() {
                x.domain(filteredData.map(d => d[""Technology Type""]));
                g.selectAll("".bar"")
                    .data(filteredData)
                    .transition()
                    .duration(500)
                    .attr(""x"", d => x(d[""Technology Type""]));
                g.select("".axis--x"").call(d3.axisBottom(x));
            }
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,704,705
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Adoption Rate for each Technology Type in 2020. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Adoption Rate.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Rate Visualization</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path {
            display: none;
        }
    </style>
</head>
<body>
    <select id=""sortOrder"">
        <option value=""desc"">Descending</option>
        <option value=""asc"">Ascending</option>
    </select>
    <svg width=""800"" height=""400""></svg>
    <script>
        const width = 800;
        const height = 400;

        const svg = d3.select(""svg"");
        const margin = { top: 20, right: 30, bottom: 40, left: 40 };
        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
            data.forEach(d => {
                d[""Adoption Rate""] = +d[""Adoption Rate""];
                d.Year = +d.Year;
            });

            const data2020 = data.filter(d => d.Year === 2020).map(d => ({
                TechnologyType: d[""Technology Type""],
                AdoptionRate: d[""Adoption Rate""]
            }));

            const x = d3.scaleBand()
                .domain(data2020.map(d => d.TechnologyType))
                .range([0, width - margin.left - margin.right])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data2020, d => d.AdoptionRate)]).nice()
                .range([height - margin.top - margin.bottom, 0]);

            g.append(""g"")
                .attr(""class"", ""axis--x"")
                .attr(""transform"", `translate(0,${height - margin.top - margin.bottom})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis--y"")
                .call(d3.axisLeft(y));

            function updateChart(order) {
                const sortedData = order === ""asc"" ? 
                    data2020.sort((a, b) => d3.ascending(a.AdoptionRate, b.AdoptionRate)) : 
                    data2020.sort((a, b) => d3.descending(a.AdoptionRate, b.AdoptionRate));
                
                x.domain(sortedData.map(d => d.TechnologyType));
                
                const bars = g.selectAll("".bar"")
                    .data(sortedData, d => d.TechnologyType);
                
                bars.enter().append(""rect"")
                    .attr(""class"", ""bar"")
                    .attr(""x"", d => x(d.TechnologyType))
                    .attr(""y"", d => y(d.AdoptionRate))
                    .attr(""width"", x.bandwidth())
                    .attr(""height"", d => y(0) - y(d.AdoptionRate))
                    .transition()
                    .duration(750)
                    .attr(""y"", d => y(d.AdoptionRate))
                    .attr(""height"", d => y(0) - y(d.AdoptionRate));

                bars.transition()
                    .duration(750)
                    .attr(""x"", d => x(d.TechnologyType))
                    .attr(""y"", d => y(d.AdoptionRate))
                    .attr(""height"", d => y(0) - y(d.AdoptionRate));

                bars.exit().remove();
                
                g.select("".axis--x"").transition().duration(750).call(d3.axisBottom(x));
                g.select("".axis--y"").transition().duration(750).call(d3.axisLeft(y));
            }

            updateChart(""desc"");
            
            d3.select(""#sortOrder"").on(""change"", function() {
                const selectedOption = d3.select(this).property(""value"");
                updateChart(selectedOption);
            });
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,705,706
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Adoption Rate and Investment. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot - Technology Adoption</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.2.2/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 600px;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1);
            const adoptionRate = [];
            const investment = [];
            const tooltipData = [];

            rows.forEach(row => {
                const cols = row.split(',');
                if (cols.length >= 7) {
                    adoptionRate.push(parseFloat(cols[2]));
                    investment.push(parseFloat(cols[3]));
                    tooltipData.push({
                        year: cols[0],
                        technology: cols[1],
                        adoptionRate: cols[2],
                        investment: cols[3]
                    });
                }
            });

            const myChart = echarts.init(document.getElementById('main'));
            const option = {
                tooltip: {
                    trigger: 'item',
                    formatter: function (params) {
                        const data = tooltipData[params.dataIndex];
                        return `Year: ${data.year}<br>Technology: ${data.technology}<br>Adoption Rate: ${data.adoptionRate}<br>Investment: ${data.investment}`;
                    }
                },
                xAxis: {
                    type: 'value',
                    name: 'Investment',
                },
                yAxis: {
                    type: 'value',
                    name: 'Adoption Rate',
                },
                series: [{
                    symbolSize: 20,
                    data: adoptionRate.map((rate, index) => [investment[index], rate]),
                    type: 'scatter',
                    emphasis: {
                        itemStyle: {
                            borderColor: '#333',
                            borderWidth: 2
                        }
                    }
                }]
            };

            myChart.setOption(option);
        });
    </script>
</body>
</html>
```",Correct,706,707
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Adoption Rate and Investment. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Adoption Rate vs Investment</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).filter(row => row);
                const adoptionRate = [];
                const investment = [];
                
                rows.forEach(row => {
                    const columns = row.split(',');
                    adoptionRate.push(parseFloat(columns[2]));
                    investment.push(parseFloat(columns[3]));
                });

                const chartData = [];
                for (let i = 0; i < adoptionRate.length; i++) {
                    chartData.push([investment[i], adoptionRate[i]]);
                }

                const chart = echarts.init(document.getElementById('main'));
                const option = {
                    title: {
                        text: 'Adoption Rate vs Investment'
                    },
                    tooltip: {},
                    xAxis: {
                        name: 'Investment',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Adoption Rate',
                        type: 'value'
                    },
                    series: [{
                        name: 'Data Points',
                        type: 'scatter',
                        data: chartData,
                        itemStyle: {
                            color: 'blue'
                        },
                        emphasis: {
                            itemStyle: {
                                color: 'red'
                            }
                        }
                    }],
                    brush: {
                        toolbox: ['lineX', 'lineY', 'keep', 'discard'],
                        xAxisIndex: 0,
                        yAxisIndex: 0
                    }
                };

                chart.setOption(option);

                // Handle the brush event
                chart.on('brushselected', (params) => {
                    const selectedData = params.batch[0].selected;
                    const selectedPoints = [];
                    for (const series of selectedData) {
                        for (const dataIndex of series.dataIndex) {
                            selectedPoints.push(chartData[dataIndex]);
                        }
                    }
                    console.log('Selected Points: ', selectedPoints);
                });
            });
    </script>
</body>
</html>
```",Correct,707,708
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Adoption Rate and Investment. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Adoption Rate vs Investment</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const adoptionRate = [];
                const investment = [];

                rows.forEach(row => {
                    const cols = row.split(',');
                    if (cols.length > 1) { // ensure there is data in the row
                        adoptionRate.push(parseFloat(cols[2])); // Adoption Rate
                        investment.push(parseFloat(cols[3])); // Investment
                    }
                });

                var myChart = echarts.init(document.getElementById('main'));

                var option = {
                    title: {
                        text: 'Scatterplot of Adoption Rate vs Investment'
                    },
                    tooltip: {
                        trigger: 'item',
                        formatter: function (params) {
                            return `Adoption Rate: ${params.data[0]}<br/>Investment: ${params.data[1]}`;
                        }
                    },
                    xAxis: {
                        name: 'Investment',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Adoption Rate',
                        type: 'value'
                    },
                    series: [{
                        symbolSize: 10,
                        data: adoptionRate.map((rate, index) => [investment[index], rate]),
                        type: 'scatter'
                    }],
                    toolbox: {
                        feature: {
                            dataZoom: { show: true },
                            saveAsImage: { show: true }
                        }
                    }
                };

                myChart.setOption(option);

                // Enable mouse wheel zooming
                myChart.on('mousewheel', function (event) {
                    if (event.event.deltaY > 0) {
                        myChart.dispatchAction({ type: 'dataZoom', start: 0, end: 100 });
                    } else {
                        myChart.dispatchAction({ type: 'dataZoom', start: 0, end: 50 });
                    }
                });
            });
    </script>
</body>
</html>
```",Correct,708,709
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Adoption Rate and Investment. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Technology Adoption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 800px;height:600px;""></div>
    <script>
        // Fetch the data from the CSV link
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1);
            const chartData = rows.map(row => {
                const cols = row.split(',');
                return {
                    year: cols[0],
                    technology: cols[1],
                    adoptionRate: parseFloat(cols[2]),
                    investment: parseFloat(cols[3]),
                    url: `https://www.google.com/search?q=${encodeURIComponent(cols[1])}`
                };
            }).filter(item => !isNaN(item.adoptionRate) && !isNaN(item.investment));

            const myChart = echarts.init(document.getElementById('main'));

            const option = {
                tooltip: {
                    formatter: function (params) {
                        return `
                            <strong>Technology:</strong> ${params.data.technology}<br>
                            <strong>Adoption Rate:</strong> ${params.data.adoptionRate}%<br>
                            <strong>Investment:</strong> $${params.data.investment.toLocaleString()}<br>
                            <a href=""${params.data.url}"" target=""_blank"">Search on Google</a>
                        `;
                    }
                },
                xAxis: {
                    type: 'value',
                    name: 'Investment ($)',
                },
                yAxis: {
                    type: 'value',
                    name: 'Adoption Rate (%)',
                },
                series: [{
                    symbolSize: 10,
                    data: chartData.map(item => [item.investment, item.adoptionRate, item]),
                    type: 'scatter',
                }]
            };

            myChart.setOption(option);

            myChart.on('click', function (params) {
                if (params.data) {
                    window.open(params.data[2].url, '_blank');
                }
            });
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,709,710
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot with query widgets showing the Adoption Rate and Investment of the given dataset. Add a slider to represent the Year.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Scatterplot</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <input type=""range"" id=""yearSlider"" min=""2000"" max=""2023"" value=""2023"" step=""1"">

    <script>
        const fetchData = async () => {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv');
            const data = await response.text();
            return data.split('\n').slice(1).map(row => {
                const cols = row.split(',');
                return {
                    Year: +cols[0],
                    TechnologyType: cols[1],
                    AdoptionRate: +cols[2],
                    Investment: +cols[3],
                    ROI: +cols[4],
                    NumberOfUsers: +cols[5],
                    MarketShare: +cols[6],
                    CustomerSatisfaction: +cols[7]
                };
            }).filter(d => !isNaN(d.AdoptionRate) && !isNaN(d.Investment));
        };

        const initChart = (data) => {
            const chartDom = document.getElementById('main');
            const myChart = echarts.init(chartDom);
            const option = {
                title: {
                    text: 'Adoption Rate vs Investment'
                },
                tooltip: {
                    trigger: 'item'
                },
                xAxis: {
                    name: 'Investment',
                    type: 'value'
                },
                yAxis: {
                    name: 'Adoption Rate',
                    type: 'value'
                },
                series: [{
                    symbolSize: 10,
                    data: data.map(d => [d.Investment, d.AdoptionRate]),
                    type: 'scatter'
                }]
            };
            myChart.setOption(option);
        };

        const updateChart = (data, year) => {
            const filteredData = data.filter(d => d.Year === year);
            const chartDom = document.getElementById('main');
            const myChart = echarts.init(chartDom);
            const option = {
                title: {
                    text: 'Adoption Rate vs Investment'
                },
                tooltip: {
                    trigger: 'item'
                },
                xAxis: {
                    name: 'Investment',
                    type: 'value'
                },
                yAxis: {
                    name: 'Adoption Rate',
                    type: 'value'
                },
                series: [{
                    symbolSize: 10,
                    data: filteredData.map(d => [d.Investment, d.AdoptionRate]),
                    type: 'scatter'
                }]
            };
            myChart.setOption(option);
        };

        fetchData().then(data => {
            initChart(data);
            const yearSlider = document.getElementById('yearSlider');
            yearSlider.addEventListener('input', () => {
                updateChart(data, +yearSlider.value);
            });
        });
    </script>
</body>
</html>
```",Correct,710,711
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot showing the Adoption Rate of Cloud Computing. Add animated transitions that connect these points using lines in order.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Cloud Computing Adoption Rate Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #chart {
            width: 100%;
            height: 600px;
        }
    </style>
</head>
<body>
    <div id=""chart""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const cloudComputingData = rows
                    .map(row => row.split(','))
                    .filter(row => row[1] === 'Cloud Computing')
                    .map(row => ({
                        year: row[0],
                        adoptionRate: parseFloat(row[2]),
                    }));
                
                const years = cloudComputingData.map(d => d.year);
                const adoptionRates = cloudComputingData.map(d => d.adoptionRate);

                const myChart = echarts.init(document.getElementById('chart'));
                const option = {
                    xAxis: {
                        type: 'category',
                        data: years,
                        name: 'Year',
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Adoption Rate',
                    },
                    series: [{
                        type: 'scatter',
                        data: adoptionRates.map((rate, index) => [years[index], rate]),
                        symbolSize: 10,
                        itemStyle: {
                            color: '#2196F3'
                        },
                        animationDuration: 2000,
                        animationEasing: 'cubicInOut',
                    }]
                };

                myChart.setOption(option);

                // Adding line animation
                let lineData = adoptionRates.map((rate, index) => ({
                    year: years[index],
                    value: [years[index], rate],
                }));

                for (let i = 0; i < lineData.length - 1; i++) {
                    setTimeout(() => {
                        myChart.addSeries({
                            type: 'line',
                            data: [lineData[i].value, lineData[i + 1].value],
                            lineStyle: {
                                color: '#FF5722'
                            },
                            animationDuration: 1000,
                            animationEasing: 'linear',
                        });
                    }, i * 2000);
                }
            });
    </script>
</body>
</html>
```",Correct,711,712
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Adoption Rate of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Rate</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1); // Skip header
                const seriesData = {};
                const years = [];

                lines.forEach(line => {
                    const [year, techType, adoptionRate] = line.split(',');
                    if (!seriesData[techType]) {
                        seriesData[techType] = [];
                    }
                    seriesData[techType].push({ year: year.trim(), adoptionRate: +adoptionRate.trim() });
                    if (!years.includes(year.trim())) {
                        years.push(year.trim());
                    }
                });

                const series = Object.keys(seriesData).map(techType => ({
                    name: techType,
                    type: 'line',
                    data: seriesData[techType].map(item => item.adoptionRate),
                    smooth: true
                }));

                const option = {
                    title: {
                        text: 'Technology Adoption Rate Over Years'
                    },
                    tooltip: {
                        trigger: 'axis',
                        formatter: function (params) {
                            return params.map(param => `${param.seriesName}: ${param.data}<br/>`).join('');
                        }
                    },
                    xAxis: {
                        type: 'category',
                        data: years,
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Adoption Rate (%)',
                    },
                    series: series,
                    emphasis: {
                        focus: 'series'
                    }
                };

                const chart = echarts.init(document.getElementById('chart'));
                chart.setOption(option);
                chart.on('mouseover', function (params) {
                    if (params.componentType === 'series') {
                        chart.dispatchAction({
                            type: 'highlight',
                            seriesIndex: params.seriesIndex,
                        });
                    }
                });
                chart.on('mouseout', function (params) {
                    if (params.componentType === 'series') {
                        chart.dispatchAction({
                            type: 'downplay',
                            seriesIndex: params.seriesIndex,
                        });
                    }
                });
            });
    </script>
</body>
</html>
```",Correct,712,713
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Adoption Rate for each Technology Type in 2020. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Rate in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 800px;
            height: 600px;
            margin: 0 auto;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const adoptionData = {};

                lines.forEach(line => {
                    const [year, techType, adoptionRate] = line.split(',');
                    if (year === '2020') {
                        adoptionData[techType] = parseFloat(adoptionRate);
                    }
                });

                const techTypes = Object.keys(adoptionData);
                const adoptionRates = Object.values(adoptionData);

                const myChart = echarts.init(document.getElementById('main'));

                const option = {
                    title: {
                        text: 'Technology Adoption Rate in 2020',
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: techTypes,
                    },
                    yAxis: {
                        type: 'value',
                    },
                    series: [{
                        name: 'Adoption Rate',
                        type: 'bar',
                        data: adoptionRates,
                    }],
                    dataZoom: [{
                        type: 'slider',
                        start: 0,
                        end: 100,
                    }],
                    toolbox: {
                        feature: {
                            saveAsImage: {},
                        }
                    }
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,713,714
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Adoption Rate for each Technology Type in 2020. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Rate in 2020</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.2.2/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 600px;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(csvData => {
                const rows = csvData.split('\n').slice(1);
                const data2020 = rows
                    .map(row => {
                        const cols = row.split(',');
                        return {
                            technologyType: cols[1],
                            adoptionRate: parseFloat(cols[2]),
                        };
                    })
                    .filter(item => item.technologyType && item.adoptionRate && cols[0] === '2020');

                const technologyTypes = data2020.map(item => item.technologyType);
                const adoptionRates = data2020.map(item => item.adoptionRate);

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);

                const option = {
                    title: {
                        text: 'Technology Adoption Rate in 2020',
                        left: 'center'
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: technologyTypes,
                        axisLabel: {
                            interval: 0,
                            rotate: 30
                        }
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Adoption Rate (%)'
                    },
                    series: [{
                        type: 'bar',
                        data: adoptionRates,
                        draggable: true
                    }],
                    animation: false
                };

                myChart.setOption(option);

                myChart.on('mouseup', function (params) {
                    if (params.componentType === 'series') {
                        const { seriesIndex, dataIndex } = params;
                        const newData = adoptionRates.splice(dataIndex, 1)[0];
                        adoptionRates.unshift(newData);

                        myChart.setOption({
                            series: [{
                                data: adoptionRates
                            }]
                        });
                    }
                });
            });
    </script>
</body>
</html>
```",Initialization Error,714,715
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Adoption Rate for each Technology Type in 2020. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Adoption Rate.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Rate in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 600px;
            height: 400px;
            margin: 0 auto;
        }
        .dropdown {
            margin: 20px auto;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class=""dropdown"">
        <label for=""sortOrder"">Sort Order: </label>
        <select id=""sortOrder"">
            <option value=""asc"">Ascending</option>
            <option value=""desc"">Descending</option>
        </select>
    </div>
    <div id=""main""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const adoptionData = rows.filter(row => row[0] === '2020').map(row => ({
                    techType: row[1],
                    adoptionRate: parseFloat(row[2]),
                }));

                let isAscending = true;

                function renderChart() {
                    const sortedData = adoptionData.sort((a, b) => isAscending ? a.adoptionRate - b.adoptionRate : b.adoptionRate - a.adoptionRate);
                    const chartData = {
                        xAxis: {
                            type: 'category',
                            data: sortedData.map(item => item.techType),
                            axisLabel: {
                                interval: 0,
                                rotate: 30,
                            },
                        },
                        yAxis: {
                            type: 'value',
                            title: {
                                text: 'Adoption Rate (%)'
                            }
                        },
                        series: [{
                            data: sortedData.map(item => item.adoptionRate),
                            type: 'bar',
                            animationDuration: 1000,
                        }]
                    };
                    const myChart = echarts.init(document.getElementById('main'));
                    myChart.setOption(chartData);
                }

                document.getElementById('sortOrder').addEventListener('change', function () {
                    isAscending = this.value === 'asc';
                    renderChart();
                });

                renderChart();
            });
    </script>
</body>
</html>
```",Correct,715,716
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Adoption Rate and Investment. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Adoption Rate vs Investment</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@4""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>

    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
                ""format"": { ""type"": ""csv"" }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Investment"",
                    ""type"": ""quantitative"",
                    ""title"": ""Investment""
                },
                ""y"": {
                    ""field"": ""Adoption Rate"",
                    ""type"": ""quantitative"",
                    ""title"": ""Adoption Rate""
                },
                ""tooltip"": [
                    { ""field"": ""Year"", ""type"": ""ordinal"", ""title"": ""Year"" },
                    { ""field"": ""Technology Type"", ""type"": ""nominal"", ""title"": ""Technology Type"" },
                    { ""field"": ""Adoption Rate"", ""type"": ""quantitative"", ""title"": ""Adoption Rate"" },
                    { ""field"": ""Investment"", ""type"": ""quantitative"", ""title"": ""Investment"" }
                ]
            },
            ""params"": [
                {
                    ""name"": ""hover"",
                    ""select"": {
                        ""type"": ""point"",
                        ""fields"": [""Investment"", ""Adoption Rate""],
                        ""encodings"": [""x"", ""y""]
                    }
                }
            ],
            ""layer"": [
                {
                    ""mark"": ""point"",
                    ""encoding"": {
                        ""opacity"": {
                            ""condition"": { ""param"": ""hover"", ""empty"": false, ""value"": 1 },
                            ""value"": 0.5
                        }
                    }
                },
                {
                    ""mark"": ""text"",
                    ""encoding"": {
                        ""x"": { ""field"": ""Investment"", ""type"": ""quantitative"" },
                        ""y"": { ""field"": ""Adoption Rate"", ""type"": ""quantitative"" },
                        ""text"": { ""field"": ""Investment"" },
                        ""opacity"": {
                            ""condition"": { ""param"": ""hover"", ""empty"": false, ""value"": 1 },
                            ""value"": 0
                        }
                    }
                }
            ]
        };

        vegaEmbed('#vis', spec).then(function(result) {
            // Access the Vega view instance if needed
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,716,717
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Adoption Rate and Investment. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">

<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Adoption Rate vs Investment</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>

<body>
    <div id=""vis""></div>

    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatter plot showing the relationship between Adoption Rate and Investment."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Investment"",
                    ""type"": ""quantitative"",
                    ""title"": ""Investment""
                },
                ""y"": {
                    ""field"": ""Adoption Rate"",
                    ""type"": ""quantitative"",
                    ""title"": ""Adoption Rate""
                },
                ""tooltip"": [
                    {""field"": ""Technology Type"", ""type"": ""nominal""},
                    {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
                    {""field"": ""Investment"", ""type"": ""quantitative""},
                    {""field"": ""Number of Users"", ""type"": ""quantitative""}
                ]
            },
            ""selection"": {
                ""brush"": {
                    ""type"": ""interval"", ""encodings"": [""x"", ""y""]
                }
            }
        };

        vegaEmbed('#vis', spec).then(result => {
            // visualization is successfully embedded
        }).catch(console.error);
    </script>
</body>

</html>
```",Correct,717,718
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Adoption Rate and Investment. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot - Adoption Rate vs Investment</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatterplot showing the relationship between Adoption Rate and Investment."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Investment"",
                    ""type"": "" quantitativ e"",
                    ""title"": ""Investment""
                },
                ""y"": {
                    ""field"": ""Adoption Rate"",
                    ""type"": ""quantitative"",
                    ""title"": ""Adoption Rate""
                },
                ""tooltip"": [
                    {""field"": ""Year"", ""type"": ""ordinal""},
                    {""field"": ""Technology Type"", ""type"": ""nominal""},
                    {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
                    {""field"": ""Investment"", ""type"": ""quantitative""}
                ]
            },
            ""config"": {
                ""scale"": {
                    ""domain"": {
                        ""x"": {""min"": 0},
                        ""y"": {""min"": 0}
                    }
                }
            }
        };

        vegaEmbed('#vis', spec, {
            actions: false,
            renderer: ""canvas""
        }).then(function(result) {
            // Enable zooming functionality
            const view = result.view; 
            view.addZoom();
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,718,719
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Adoption Rate and Investment. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npmvega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npmvega-lite@5.6.0""></script>
    <script src=""https://cdn.jsdelivr.net/npmvega-embed@6.20.2""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatterplot showing the relationship between Adoption Rate and Investment."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Investment"",
                    ""type"": ""quantitative"",
                    ""title"": ""Investment""
                },
                ""y"": {
                    ""field"": ""Adoption Rate"",
                    ""type"": ""quantitative"",
                    ""title"": ""Adoption Rate""
                },
                ""tooltip"": [
                    {""field"": ""Technology Type"", ""title"": ""Technology Type""},
                    {""field"": ""Adoption Rate"", ""title"": ""Adoption Rate""},
                    {""field"": ""Investment"", ""title"": ""Investment""},
                    {""field"": ""Number of Users"", ""title"": ""Number of Users""}
                ]
            },
            ""config"": {
                ""mark"": {
                    ""tooltip"": true,
                    ""filled"": true,
                    ""opacity"": 0.6
                }
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            const view = result.view;
            view.addEventListener('click', function(event, item) {
                if (item && item.datum) {
                    const technologyType = item.datum['Technology Type'];
                    const query = encodeURIComponent(technologyType);
                    window.open(`https://www.google.com/search?q=${query}`, '_blank');
                }
            });
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,719,720
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot with query widgets showing the Adoption Rate and Investment of the given dataset. Add a slider to represent the Year.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatterplot showing Adoption Rate vs Investment with a Year slider."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Year == year""
                }
            ],
            ""params"": [
                {
                    ""name"": ""year"",
                    ""value"": 2020,
                    ""select"": {
                        ""type"": ""range"",
                        ""domain"": [2000, 2023],
                        ""name"": ""Year""
                    }
                }
            ],
            ""mark"": ""circle"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Investment"",
                    ""type"": ""quantitative"",
                    ""title"": ""Investment""
                },
                ""y"": {
                    ""field"": ""Adoption Rate"",
                    ""type"": ""quantitative"",
                    ""title"": ""Adoption Rate""
                },
                ""size"": {
                    ""field"": ""Number of Users"",
                    ""type"": ""quantitative"",
                    ""title"": ""Number of Users"",
                    ""scale"": {""domain"": [0, 1000000]}
                },
                ""color"": {
                    ""field"": ""Technology Type"",
                    ""type"": ""nominal"",
                    ""title"": ""Technology Type""
                },
                ""tooltip"": [
                    {""field"": ""Year"", ""type"": ""ordinal""},
                    {""field"": ""Technology Type"", ""type"": ""nominal""},
                    {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
                    {""field"": ""Investment"", ""type"": ""quantitative""}
                ]
            }
        };

        vegaEmbed('#vis', spec).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,720,721
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot showing the Adoption Rate of Cloud Computing. Add animated transitions that connect these points using lines in order.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/vega/5.20.2/vega.js""></script>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/vega-lite/5.0.0-beta.10/vega-lite.js""></script>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/vega-embed/6.20.1/vega-embed.js""></script>
</head>
<body>
<div id=""vis""></div>
<script type=""text/javascript"">
    const spec = {
        $schema: 'https://vega.github.io/schema/vega-lite/v5.json',
        title: 'Adoption Rate of Cloud Computing Over Years',
        data: {
            url: 'https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv',
            format: {type: 'csv'}
        },
        transform: [
            {filter: ""datum['Technology Type'] == 'Cloud Computing'""}
        ],
        mark: {
            type: 'point',
            tooltip: true
        },
        encoding: {
            x: {field: 'Year', type: 'quantitative', title: 'Year'},
            y: {field: 'Adoption Rate', type: 'quantitative', title: 'Adoption Rate'},
            tooltip: [
                {field: 'Year', title: 'Year'},
                {field: 'Adoption Rate', title: 'Adoption Rate'}
            ],
            order: {field: 'Year', type: 'quantitative'}
        },
        layer: [
            {
                mark: {
                    type: 'circle',
                    color: 'steelblue',
                    opacity: 0.6
                }
            },
            {
                mark: {
                    type: 'line',
                    stroke: 'black',
                    interpolate: 'linear'
                },
                encoding: {
                    y: {field: 'Adoption Rate', type: 'quantitative'},
                    x: {field: 'Year', type: 'quantitative'}
                }
            }
        ],
        width: 600,
        height: 400
    };

    vegaEmbed('#vis', spec);
</script>
</body>
</html>
```",Initialization Error,721,722
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Adoption Rate of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Rate</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/vega/5.20.2/vega.js""></script>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/vega-lite/5.7.0/vega-lite.js""></script>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/vega-embed/6.20.4/vega-embed.js""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": { ""field"": ""Year"", ""type"": ""temporal"", ""title"": ""Year"" },
                ""y"": { ""field"": ""Adoption Rate"", ""type"": ""quantitative"", ""title"": ""Adoption Rate (%)"" },
                ""color"": { ""field"": ""Technology Type"", ""type"": ""nominal"", ""title"": ""Technology Type"" },
                ""tooltip"": [
                    {""field"": ""Technology Type"", ""type"": ""nominal"", ""title"": ""Technology Type""},
                    {""field"": ""Adoption Rate"", ""type"": ""quantitative"", ""title"": ""Adoption Rate (%)""},
                    {""field"": ""Year"", ""type"": ""temporal"", ""title"": ""Year""}
                ]
            },
            ""selection"": {
                ""highlight"": {
                    ""type"": ""single"",
                    ""on"": ""mouseover"",
                    ""fields"": [""Technology Type""],
                    ""nearest"": true,
                    ""empty"": ""none"",
                    ""encodings"": [""color""]
                }
            },
            ""config"": {
                ""mark"": {
                    ""strokeWidth"": 2
                },
                ""line"": {
                    ""opacity"": {""condition"": {""test"": ""highlight"", ""field"": ""Technology Type""}, ""value"": 1, ""value"": 0.2}
                }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Initialization Error,722,723
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Adoption Rate for each Technology Type in 2020. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Rate in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A bar chart showing the Adoption Rate for each Technology Type in 2020."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""field"": ""Year"",
                        ""equal"": 2020
                    }
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Technology Type"",
                    ""type"": ""ordinal"",
                    ""axis"": {""labelAngle"": -45}
                },
                ""y"": {
                    ""field"": ""Adoption Rate"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Technology Type"",
                    ""type"": ""nominal""
                }
            },
            ""config"": {
                ""mark"": {
                    ""tooltip"": true
                }
            }
        };

        vegaEmbed('#vis', spec, {mode: ""vega-lite""}).then(result => {
            // Additional interactivity with zoom and pan
            const view = result.view;
            view.addSignalListener('zoom', (name, value) => {
                view.zoom(value.k); // Implementing zoom behavior
                view.run();
            });
            view.addSignalListener('pan', (name, value) => {
                view.pan(value.dx, value.dy); // Implementing pan behavior
                view.run();
            });
        }).catch(console.error);
    </script>
</body>
</html>
```",Execution Error,723,724
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Adoption Rate for each Technology Type in 2020. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Rate in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""transform"": [
                {""filter"": ""datum.Year == 2020""}
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Technology Type"", 
                    ""type"": ""nominal"", 
                    ""sort"": ""-y""
                },
                ""y"": {
                    ""field"": ""Adoption Rate"", 
                    ""type"": ""quantitative""
                },
                ""tooltip"": [
                    {""field"": ""Technology Type"", ""type"": ""nominal""},
                    {""field"": ""Adoption Rate"", ""type"": ""quantitative""}
                ]
            },
            ""interaction"": {
                ""type"": ""drag"",
                ""on"": {""drag"": ""reorder""}
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            console.log(result);
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,724,725
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Adoption Rate for each Technology Type in 2020. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Adoption Rate.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Rate - 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script type=""text/javascript"">
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""title"": ""Adoption Rate by Technology Type in 2020"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Year === '2020'""
                }
            ],
            ""encoding"": {
                ""x"": {
                    ""field"": ""Technology Type"",
                    ""type"": ""ordinal"",
                    ""title"": ""Technology Type""
                },
                ""y"": {
                    ""field"": ""Adoption Rate"",
                    ""type"": ""quantitative"",
                    ""title"": ""Adoption Rate""
                },
                ""color"": {
                    ""field"": ""Technology Type"",
                    ""type"": ""nominal""
                }
            },
            ""mark"": ""bar"",
            ""config"": {
                ""view"": {
                    ""continuousWidth"": 600,
                    ""continuousHeight"": 400
                }
            },
            ""params"": [
                {
                    ""name"": ""sortOrder"",
                    ""value"": ""descending"",
                    ""bind"": {
                        ""input"": ""select"",
                        ""options"": [
                            {""label"": ""Ascending"", ""value"": ""ascending""},
                            {""label"": ""Descending"", ""value"": ""descending""}
                        ]
                    }
                }
            ],
            ""sort"": {
                ""field"": ""Adoption Rate"",
                ""order"": {""param"": ""sortOrder""}
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            // Successfully embedded
        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Initial Result,725,726
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Adoption Rate and Investment, and a Bar Chart on the right that displays Technology Type versus Adoption Rate.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Data Visualization</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .scatterplot {
            float: left;
            width: 50%;
        }
        .barchart {
            float: right;
            width: 50%;
        }
        svg {
            border: 1px solid black;
        }
    </style>
</head>
<body>
    <div class=""scatterplot"" id=""scatterplot""></div>
    <div class=""barchart"" id=""barchart""></div>

    <script>
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
            // Parse the data
            data.forEach(d => {
                d['Adoption Rate'] = +d['Adoption Rate'];
                d['Investment'] = +d['Investment'];
            });

            // Scatterplot
            const svgScatter = d3.select(""#scatterplot"").append(""svg"")
                .attr(""width"", 400)
                .attr(""height"", 400);

            const xScaleScatter = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Investment'])])
                .range([40, 360]);

            const yScaleScatter = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Adoption Rate'])])
                .range([360, 40]);

            svgScatter.selectAll(""circle"")
                .data(data)
                .enter()
                .append(""circle"")
                .attr(""cx"", d => xScaleScatter(d['Investment']))
                .attr(""cy"", d => yScaleScatter(d['Adoption Rate']))
                .attr(""r"", 5)
                .attr(""fill"", ""blue"");

            svgScatter.append(""g"")
                .attr(""transform"", ""translate(0,360)"")
                .call(d3.axisBottom(xScaleScatter));

            svgScatter.append(""g"")
                .attr(""transform"", ""translate(40,0)"")
                .call(d3.axisLeft(yScaleScatter));

            // Bar Chart
            const svgBar = d3.select(""#barchart"").append(""svg"")
                .attr(""width"", 400)
                .attr(""height"", 400);

            const xScaleBar = d3.scaleBand()
                .domain(data.map(d => d['Technology Type']))
                .range([0, 400])
                .padding(0.1);

            const yScaleBar = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Adoption Rate'])])
                .range([400, 0]);

            svgBar.selectAll(""rect"")
                .data(data)
                .enter()
                .append(""rect"")
                .attr(""x"", d => xScaleBar(d['Technology Type']))
                .attr(""y"", d => yScaleBar(d['Adoption Rate']))
                .attr(""width"", xScaleBar.bandwidth())
                .attr(""height"", d => 400 - yScaleBar(d['Adoption Rate']))
                .attr(""fill"", ""orange"");

            svgBar.append(""g"")
                .attr(""transform"", ""translate(0,400)"")
                .call(d3.axisBottom(xScaleBar));

            svgBar.append(""g"")
                .attr(""transform"", ""translate(0,0)"")
                .call(d3.axisLeft(yScaleBar));
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,726,727
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Adoption Rate and Investment, and a Bar Chart on the right that displays Technology Type versus Adoption Rate. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Visualization</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .chart-area {
            display: flex;
        }
        .scatterplot {
            width: 50%;
            height: 400px;
        }
        .barchart {
            width: 50%;
            height: 400px;
        }
        .bar {
            fill: steelblue;
        }
        .bar.highlight {
            fill: orange;
        }
        .dot {
            fill: blue;
            cursor: pointer;
        }
        .dot.selected {
            fill: red;
        }
    </style>
</head>
<body>

<div class=""chart-area"">
    <svg class=""scatterplot""></svg>
    <svg class=""barchart""></svg>
</div>

<script>
    const scatterplotWidth = 400;
    const scatterplotHeight = 400;
    const barchartWidth = 400;
    const barchartHeight = 400;

    const scatterplotSvg = d3.select('.scatterplot')
        .attr('width', scatterplotWidth)
        .attr('height', scatterplotHeight);

    const barchartSvg = d3.select('.barchart')
        .attr('width', barchartWidth)
        .attr('height', barchartHeight);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
        data.forEach(d => {
            d[""Adoption Rate""] = +d[""Adoption Rate""];
            d[""Investment""] = +d[""Investment""];
        });

        const xScale = d3.scaleLinear()
            .domain([0, d3.max(data, d => d[""Investment""])])
            .range([40, scatterplotWidth - 40]);

        const yScale = d3.scaleLinear()
            .domain([0, d3.max(data, d => d[""Adoption Rate""])])
            .range([scatterplotHeight - 40, 40]);

        scatterplotSvg.append(""g"")
            .attr(""transform"", ""translate(0,"" + (scatterplotHeight - 40) + "")"")
            .call(d3.axisBottom(xScale));

        scatterplotSvg.append(""g"")
            .attr(""transform"", ""translate(40,0)"")
            .call(d3.axisLeft(yScale));

        const dots = scatterplotSvg.selectAll("".dot"")
            .data(data)
            .enter().append(""circle"")
            .attr(""class"", ""dot"")
            .attr(""cx"", d => xScale(d[""Investment""]))
            .attr(""cy"", d => yScale(d[""Adoption Rate""]))
            .attr(""r"", 5)
            .on(""mouseover"", function() {
                d3.select(this).attr(""stroke"", ""black"");
            })
            .on(""mouseout"", function() {
                d3.select(this).attr(""stroke"", null);
            });

        const brush = d3.brush()
            .extent([[0, 0], [scatterplotWidth, scatterplotHeight]])
            .on(""brush end"", brushed);

        scatterplotSvg.append(""g"")
            .attr(""class"", ""brush"")
            .call(brush);

        function brushed(event) {
            if (!event.selection) {
                dots.classed(""selected"", false);
                updateBarChart(data);
                return;
            }

            const [[x0, y0], [x1, y1]] = event.selection;

            dots.classed(""selected"", d => {
                const x = xScale(d[""Investment""]);
                const y = yScale(d[""Adoption Rate""]);
                return x >= x0 && x <= x1 && y >= y0 && y <= y1;
            });

            const selectedData = data.filter(d => 
                xScale(d[""Investment""]) >= x0 && xScale(d[""Investment""]) <= x1 && 
                yScale(d[""Adoption Rate""]) >= y0 && yScale(d[""Adoption Rate""]) <= y1
            );

            updateBarChart(selectedData);
        }

        function updateBarChart(selectedData) {
            const adoptionRateByType = d3.rollup(selectedData, 
                v => d3.mean(v, d => d[""Adoption Rate""]), 
                d => d[""Technology Type""]
            );

            const bars = barchartSvg.selectAll("".bar"")
                .data(adoptionRateByType);

            bars.exit().remove();

            const yBarScale = d3.scaleBand()
                .domain(Array.from(adoptionRateByType.keys()))
                .range([0, barchartHeight - 40])
                .padding(0.1);

            const xBarScale = d3.scaleLinear()
                .domain([0, d3.max(Array.from(adoptionRateByType.values()))])
                .range([0, barchartWidth - 100]);

            barchartSvg.append(""g"")
                .attr(""transform"", ""translate(0,"" + (barchartHeight - 40) + "")"")
                .call(d3.axisBottom(xBarScale));

            barchartSvg.append(""g"")
                .call(d3.axisLeft(yBarScale));

            const newBars = bars.enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", 0)
                .attr(""y"", d => yBarScale(d[0]))
                .attr(""width"", d => xBarScale(d[1]))
                .attr(""height"", yBarScale.bandwidth())
                .on(""mouseover"", function() {
                    d3.select(this).classed(""highlight"", true);
                })
                .on(""mouseout"", function() {
                    d3.select(this).classed(""highlight"", false);
                });

            bars.merge(newBars)
                .transition()
                .duration(300)
                .attr(""x"", 0)
                .attr(""y"", d => yBarScale(d[0]))
                .attr(""width"", d => xBarScale(d[1]))
                .attr(""height"", yBarScale.bandwidth());

            bars.append(""title"")
                .text(d => d[0] + "": "" + d[1].toFixed(2));
        }

    });
</script>
</body>
</html>
```",Correct,727,728
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Adoption Rate , while the pie chart represents the distribution of Investment.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Visualization</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 2px;
        }
        .arc {
            stroke: white;
        }
    </style>
</head>
<body>
    <h1>Technology Adoption Overview</h1>
    <svg id=""line-chart"" width=""800"" height=""400""></svg>
    <svg id=""pie-chart"" width=""400"" height=""400""></svg>

    <script>
        const svgLine = d3.select(""#line-chart""),
              svgPie = d3.select(""#pie-chart""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svgLine.attr(""width"") - margin.left - margin.right,
              height = +svgLine.attr(""height"") - margin.top - margin.bottom;

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);
        const line = d3.line()
            .x(d => x(d.Year))
            .y(d => y(d[""Adoption Rate""]));

        const gLine = svgLine.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
            data.forEach(d => {
                d.Year = +d.Year;
                d[""Adoption Rate""] = +d[""Adoption Rate""];
            });

            x.domain(d3.extent(data, d => d.Year));
            y.domain([0, d3.max(data, d => d[""Adoption Rate""])]);

            gLine.append(""path"")
                .datum(data)
                .attr(""class"", ""line"")
                .attr(""d"", line);

            gLine.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            gLine.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y).ticks(10, ""%""));
        });

        const radius = Math.min(400, 400) / 2;
        const color = d3.scaleOrdinal(d3.schemeCategory10);

        const gPie = svgPie.append(""g"").attr(""transform"", `translate(${radius},${radius})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
            const investmentData = d3.nest()
                .key(d => d[""Technology Type""])
                .rollup(v => d3.sum(v, d => +d.Investment))
                .entries(data);

            const pie = d3.pie().value(d => d.value);
            const arc = d3.arc().innerRadius(0).outerRadius(radius);

            gPie.selectAll("".arc"")
                .data(pie(investmentData))
                .enter().append(""path"")
                .attr(""class"", ""arc"")
                .attr(""d"", arc)
                .attr(""fill"", d => color(d.data.key));
        });
    </script>
</body>
</html>
```",Initialization Error,728,729
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Adoption Rate , while the pie chart represents the distribution of Investment. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Investment for the selected group.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Visualization</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 2px;
        }

        .arc {
            stroke: #fff;
        }

        .chart {
            display: block;
            margin: auto;
        }
    </style>
</head>
<body>
    <svg class=""chart"" width=""800"" height=""400""></svg>
    <svg class=""pie-chart"" width=""800"" height=""400""></svg>

    <script>
        const lineChartSvg = d3.select(""svg.chart""),
              pieChartSvg = d3.select(""svg.pie-chart""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +lineChartSvg.attr(""width"") - margin.left - margin.right,
              height = +lineChartSvg.attr(""height"") - margin.top - margin.bottom;

        const lineG = lineChartSvg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);
        const pieG = pieChartSvg.append(""g"").attr(""transform"", `translate(${width / 2},${height / 2})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
            // Parse the data
            data.forEach(d => {
                d[""Adoption Rate""] = +d[""Adoption Rate""];
                d[""Investment""] = +d[""Investment""];
            });

            // Set up the scales for the line chart
            const x = d3.scaleLinear()
                .domain(d3.extent(data, d => d.Year))
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Adoption Rate""])])
                .range([height, 0]);

            // Add x-axis
            lineG.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            // Add y-axis
            lineG.append(""g"")
                .call(d3.axisLeft(y));

            // Add the line
            const line = d3.line()
                .x(d => x(d.Year))
                .y(d => y(d[""Adoption Rate""]));

            lineG.append(""path"")
                .datum(data)
                .attr(""class"", ""line"")
                .attr(""d"", line);

            // Brushing functionality
            const brush = d3.brushX()
                .extent([[0, 0], [width, height]])
                .on(""end"", brushed);

            lineG.append(""g"")
                .attr(""class"", ""brush"")
                .call(brush);

            function brushed(event) {
                const selection = event.selection;
                if (selection) {
                    const [x0, x1] = selection.map(x.invert);
                    const selectedData = data.filter(d => d.Year >= x0 && d.Year <= x1);
                    updatePieChart(selectedData);
                } else {
                    updatePieChart(data);
                }
            }

            function updatePieChart(data) {
                const investmentData = d3.rollup(data, v => d3.sum(v, d => d[""Investment""]), d => d[""Technology Type""]);
                const pieData = d3.entries(investmentData);

                // Clear previous pie chart
                pieG.selectAll(""*"").remove();

                // Set up the pie layout
                const pie = d3.pie().value(d => d.value);
            const arc = d3.arc().innerRadius(0).outerRadius(150);

                // Bind data and create the arcs
                const arcs = pieG.selectAll("".arc"")
                    .data(pie(pieData))
                    .enter().append(""g"")
                    .attr(""class"", ""arc"");

                arcs.append(""path"")
                    .attr(""class"", ""arc"")
                    .attr(""d"", arc)
                    .attr(""fill"", (d, i) => d3.schemeCategory10[i]);
                
                arcs.append(""text"")
                    .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                    .attr(""dy"", "".35em"")
                    .text(d => d.data.key);
            }

            updatePieChart(data);
        });
    </script>
</body>
</html>
```",Initialization Error,729,730
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Adoption Rate, Investment, Number of Users, and Market Share. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot Matrix</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .scatterplot {
            display: inline-block;
            margin: 5px;
            border: 1px solid #ccc;
        }
        .brush .extent {
            fill: #9ecae1;
            opacity: 0.5;
        }
        .highlight {
            fill: orange !important;
            stroke: black !important;
            stroke-width: 2px !important;
        }
    </style>
</head>
<body>

<svg width=""800"" height=""800""></svg>

<script>
    const margin = {top: 20, right: 20, bottom: 20, left: 40},
          size = 200;

    const xAccessor = (d, i) => d[0];
    const yAccessor = (d, i) => d[1];

    const xScales = {},
          yScales = {};

    const color = d3.scaleOrdinal(d3.schemeCategory10);

    const dataKeys = ['Adoption Rate', 'Investment', 'Number of Users', 'Market Share'];

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
        data.forEach(d => {
            d['Adoption Rate'] = +d['Adoption Rate'];
            d['Investment'] = +d['Investment'];
            d['Number of Users'] = +d['Number of Users'];
            d['Market Share'] = +d['Market Share'];
        });

        const svg = d3.select(""svg"");
        const gridSize = (dataKeys.length - 1) * size;

        // Create scales for each axis
        dataKeys.forEach((key, i) => {
            xScales[key] = d3.scaleLinear()
                              .domain(d3.extent(data, d => d[key]))
                              .range([margin.left, size - margin.right]);

            yScales[key] = d3.scaleLinear()
                              .domain(d3.extent(data, d => d[key]))
                              .range([size - margin.bottom, margin.top]);
        });

        const brush = d3.brush()
            .extent([[0, 0], [size, size]])
            .on(""brush end"", brushed);

        function brushed(event) {
            const selection = event.selection;
            if (selection) {
                const [[x0, y0], [x1, y1]] = selection;
                const selected = data.filter(d => {
                    return xAccessor([d['Adoption Rate'], d['Investment']]) >= x0 && 
                           xAccessor([d['Adoption Rate'], d['Investment']]) <= x1 &&
                           yAccessor([d['Adoption Rate'], d['Investment']]) >= y0 && 
                           yAccessor([d['Adoption Rate'], d['Investment']]) <= y1;
                });
                d3.selectAll('.point').classed('highlight', false);
                selected.forEach(d => {
                    d3.select(`.point[data-id='${d['Year']}']`).classed('highlight', true);
                });
            }
        }

        dataKeys.forEach((keyX, i) => {
            dataKeys.forEach((keyY, j) => {
                if (i !== j) {
                    const g = svg.append(""g"")
                                 .attr(""class"", ""scatterplot"")
                                 .attr(""transform"", `translate(${i * size}, ${j * size})`);

                    g.append(""g"")
                     .attr(""class"", ""x axis"")
                     .attr(""transform"", `translate(0, ${size - margin.bottom})`)
                     .call(d3.axisBottom(xScales[keyX]));

                    g.append(""g"")
                     .attr(""class"", ""y axis"")
                     .attr(""transform"", `translate(${margin.left}, 0)`)
                     .call(d3.axisLeft(yScales[keyY]));

                    g.append(""g"")
                     .selectAll(""circle"")
                     .data(data)
                     .enter().append(""circle"")
                     .attr(""class"", ""point"")
                     .attr(""data-id"", d => d['Year'])
                     .attr(""cx"", d => xScales[keyX](d[keyX]))
                     .attr(""cy"", d => yScales[keyY](d[keyY]))
                     .attr(""r"", 3)
                     .style(""fill"", (d, i) => color(i));

                    g.append(""g"")
                     .call(brush);
                }
            });
        });
    });
</script>

</body>
</html>
```",Unexpected Initial Result,730,731
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a brushable Scatterplot that visualizes the relationship between Adoption Rate and Investment. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Brushable Scatterplot</title>
    <style>
        .scatterplot {
            display: inline-block;
        }
        .brush {
            fill: none;
            stroke: #000;
            stroke-width: 1.5px;
        }
        .tooltip {
            position: absolute;
            text-align: center;
            width: 60px;
            padding: 5px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
        table {
            border-collapse: collapse;
            margin-top: 20px;
        }
        th, td {
            border: 1px solid black;
            padding: 5px;
            text-align: left;
        }
    </style>
</head>
<body>
    <svg class=""scatterplot"" width=""800"" height=""400""></svg>
    <div id=""table-container""></div>

    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <script>
        const svg = d3.select('.scatterplot'),
            margin = {top: 20, right: 20, bottom: 30, left: 40},
            width = +svg.attr('width') - margin.left - margin.right,
            height = +svg.attr('height') - margin.top - margin.bottom;

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);
        const color = d3.scaleOrdinal(d3.schemeCategory10);

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        const brush = d3.brush().extent([[0, 0], [width, height]])
            .on(""end"", brushed);

        svg.append(""g"")
            .attr(""class"", ""brush"")
            .call(brush);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
            data.forEach(d => {
                d['Adoption Rate'] = +d['Adoption Rate'];
                d['Investment'] = +d['Investment'];
            });

            x.domain(d3.extent(data, d => d['Adoption Rate'])).nice();
            y.domain(d3.extent(data, d => d['Investment'])).nice();

            g.append(""g"")
                .attr(""class"", ""x-axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""y-axis"")
                .call(d3.axisLeft(y));

            g.selectAll("".dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""r"", 5)
                .attr(""cx"", d => x(d['Adoption Rate']))
                .attr(""cy"", d => y(d['Investment']))
                .style(""fill"", d => color(d['Technology Type']));

            function brushed(event) {
                const selection = event.selection;
                if (!selection) return;

                const [[x0, y0], [x1, y1]] = selection;

                g.selectAll("".dot"")
                    .classed(""selected"", d => {
                        const isSelected = x0 <= x(d['Adoption Rate']) && x(d['Adoption Rate']) <= x1 &&
                                          y1 <= y(d['Investment']) && y(d['Investment']) <= y0;
                        return isSelected;
                    });

                const selectedData = data.filter(d => {
                    return x0 <= x(d['Adoption Rate']) && x(d['Adoption Rate']) <= x1 &&
                           y1 <= y(d['Investment']) && y(d['Investment']) <= y0;
                }).slice(0, 20);

                updateTable(selectedData);
            }
        });

        function updateTable(data) {
            const tableContainer = d3.select(""#table-container"");
            tableContainer.selectAll(""*"").remove();

            const table = tableContainer.append(""table"");
            const thead = table.append(""thead"");
            const tbody = table.append(""tbody"");

            thead.append(""tr"")
                .selectAll(""th"")
                .data([""Year"", ""Technology Type"", ""Adoption Rate"", ""Investment"", ""Return on Investment"", ""Number of Users"", ""Market Share"", ""Customer Satisfaction Score""])
                .enter().append(""th"")
                .text(d => d);

            const rows = tbody.selectAll(""tr"")
                .data(data)
                .enter().append(""tr"");

            rows.selectAll(""td"")
                .data(d => [
                    d['Year'], d['Technology Type'], d['Adoption Rate'], 
                    d['Investment'], d['Return on Investment'], 
                    d['Number of Users'], d['Market Share'], 
                    d['Customer Satisfaction Score']
                ])
                .enter().append(""td"")
                .text(d => d);
        }
    </script>
</body>
</html>
```",Initialization Error,731,732
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a horizontal Bar Chart that shows Technology Type and Adoption Rate, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }

        .bar:hover {
            fill: orange;
        }

        .axis-label {
            font-size: 12px;
        }

        .minimap {
            fill: lightgray;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
            margin = {top: 20, right: 40, bottom: 30, left: 60},
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
            data.forEach(d => {
                d[""Adoption Rate""] = +d[""Adoption Rate""];
            });

            const x = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Adoption Rate""])])
                .range([0, width]);

            const y = d3.scaleBand()
                .domain(data.map(d => d[""Technology Type""]))
                .range([0, height])
                .padding(0.1);

            g.append(""g"")
                .selectAll("".bar"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", 0)
                .attr(""y"", d => y(d[""Technology Type""]))
                .attr(""width"", d => x(d[""Adoption Rate""]))
                .attr(""height"", y.bandwidth());

            g.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""y axis"")
                .call(d3.axisLeft(y));

            // Minimap
            const minimap = svg.append(""g"").attr(""transform"", `translate(${width + margin.left + margin.right - 30}, ${margin.top})`);

            const minimapX = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Adoption Rate""])])
                .range([0, 100]);

            const minimapY = d3.scaleBand()
                .domain(data.map(d => d[""Technology Type""]))
                .range([0, 100])
                .padding(0.1);

            minimap.selectAll("".minimap"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""minimap"")
                .attr(""x"", 0)
                .attr(""y"", d => minimapY(d[""Technology Type""]))
                .attr(""width"", d => minimapX(d[""Adoption Rate""]))
                .attr(""height"", minimapY.bandwidth());
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,732,733
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Adoption Rate and Investment, and a Bar Chart on the right that displays Technology Type versus Adoption Rate.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Visualization</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
    <style>
        #main {
            display: flex;
            justify-content: space-between;
        }
        #scatterplot {
            width: 45%;
            height: 400px;
        }
        #barchart {
            width: 45%;
            height: 400px;
        }
    </style>
</head>
<body>

<div id=""main"">
    <div id=""scatterplot""></div>
    <div id=""barchart""></div>
</div>

<script>
    fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1).filter(row => row);
            const scatterData = [];
            const barData = {};
            
            rows.forEach(row => {
                const cells = row.split(',');
                const technologyType = cells[1];
                const adoptionRate = parseFloat(cells[2]);
                const investment = parseFloat(cells[3]);

                scatterData.push([adoptionRate, investment]);

                if (barData[technologyType]) {
                    barData[technologyType].push(adoptionRate);
                } else {
                    barData[technologyType] = [adoptionRate];
                }
            });

            const scatterOption = {
                xAxis: {
                    type: 'value',
                    name: 'Adoption Rate'
                },
                yAxis: {
                    type: 'value',
                    name: 'Investment'
                },
                series: [{
                    type: 'scatter',
                    data: scatterData
                }]
            };

            const barOption = {
                xAxis: {
                    type: 'category',
                    data: Object.keys(barData)
                },
                yAxis: {
                    type: 'value',
                    name: 'Adoption Rate'
                },
                series: [{
                    type: 'bar',
                    data: Object.values(barData).map(adoptionRates => adoptionRates.reduce((a, b) => a + b, 0) / adoptionRates.length)
                }]
            };

            const scatterChart = echarts.init(document.getElementById('scatterplot'));
            const barChart = echarts.init(document.getElementById('barchart'));

            scatterChart.setOption(scatterOption);
            barChart.setOption(barOption);
        });
</script>

</body>
</html>
```",Correct,733,734
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Adoption Rate and Investment, and a Bar Chart on the right that displays Technology Type versus Adoption Rate. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Visualization</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
    <style>
        #main {
            display: flex;
            justify-content: space-between;
            height: 500px;
        }
        #scatter, #bar {
            width: 48%;
            height: 100%;
        }
    </style>
</head>
<body>
    <div id=""main"">
        <div id=""scatter""></div>
        <div id=""bar""></div>
    </div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const adoptionData = rows.map(row => {
                    const cols = row.split(',');
                    return {
                        Year: cols[0],
                        TechnologyType: cols[1],
                        AdoptionRate: parseFloat(cols[2]),
                        Investment: parseFloat(cols[3]),
                        ReturnOnInvestment: parseFloat(cols[4]),
                        NumberOfUsers: parseFloat(cols[5]),
                        MarketShare: parseFloat(cols[6]),
                        CustomerSatisfactionScore: parseFloat(cols[7])
                    };
                }).filter(d => !isNaN(d.AdoptionRate));
                
                const scatterChart = echarts.init(document.getElementById('scatter'));
                const barChart = echarts.init(document.getElementById('bar'));
                
                const scatterOption = {
                    title: { text: 'Adoption Rate vs Investment' },
                    xAxis: { type: 'value', name: 'Investment' },
                    yAxis: { type: 'value', name: 'Adoption Rate' },
                    series: [{
                        type: 'scatter',
                        data: adoptionData.map(d => [d.Investment, d.AdoptionRate]),
                        itemStyle: {
                            normal: {
                                opacity: 0.5
                            }
                        },
                        emphasis: {
                            itemStyle: {
                                color: 'red'
                            }
                        }
                    }]
                };

                const barOption = {
                    title: { text: 'Technology Type vs Adoption Rate' },
                    xAxis: {
                        type: 'category',
                        data: [...new Set(adoptionData.map(d => d.TechnologyType))]
                    },
                    yAxis: { type: 'value', name: 'Adoption Rate' },
                    series: [{
                        type: 'bar',
                        data: [...new Set(adoptionData.map(d => d.TechnologyType))].map(type => {
                            return adoptionData.filter(d => d.TechnologyType === type).reduce((acc, curr) => acc + curr.AdoptionRate, 0) / adoptionData.filter(d => d.TechnologyType === type).length;
                        })
                    }]
                };

                scatterChart.setOption(scatterOption);
                barChart.setOption(barOption);
                
                let selectedIndices = [];

                scatterChart.on('click', function (params) {
                    const investmentValue = params.data[0];
                    const adoptionRateValue = params.data[1];
                    
                    const selected = adoptionData.filter((d, index) => {
                        return d.Investment === investmentValue && d.AdoptionRate === adoptionRateValue;
                    });

                    selectedIndices = selected.map(s => s.TechnologyType);
                    
                    const barData = barOption.series[0].data.map((value, index) => {
                        return selectedIndices.includes(barOption.xAxis.data[index]) ? { value: value, itemStyle: { color: 'red' } } : value;
                    });

                    barChart.setOption({
                        series: [{ data: barData }]
                    });
                });

                scatterChart.on('contextmenu', function () {
                    barChart.setOption({
                        series: [{ data: barOption.series[0].data }]
                    });
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,734,735
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Adoption Rate , while the pie chart represents the distribution of Investment.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Visualization</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
</head>
<body>
    <div id=""lineChart"" style=""width: 100%; height: 400px;""></div>
    <div id=""pieChart"" style=""width: 100%; height: 400px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.trim().split('\n').slice(1).map(row => row.split(','));
            const years = rows.map(row => row[0]);
            const adoptionRates = rows.map(row => parseFloat(row[2]));
            const investments = rows.map(row => parseFloat(row[3])).filter(investment => !isNaN(investment));
            const investmentLabels = rows.map(row => row[1]);

            // Line Chart for Adoption Rate
            const lineChart = echarts.init(document.getElementById('lineChart'));
            lineChart.setOption({
                title: {
                    text: 'Trend of Adoption Rate'
                },
                tooltip: {},
                xAxis: {
                    type: 'category',
                    data: years
                },
                yAxis: {
                    type: 'value'
                },
                series: [{
                    name: 'Adoption Rate',
                    type: 'line',
                    data: adoptionRates
                }]
            });

            // Pie Chart for Investment Distribution
            const pieChart = echarts.init(document.getElementById('pieChart'));
            const investmentData = investmentLabels.map((label, index) => ({
                name: label,
                value: investments[index]
            }));

            pieChart.setOption({
                title: {
                    text: 'Investment Distribution',
                    subtext: 'Total Investments',
                    left: 'center'
                },
                tooltip: {
                    trigger: 'item'
                },
                series: [{
                    name: 'Investments',
                    type: 'pie',
                    radius: '50%',
                    data: investmentData,
                    emphasis: {
                        itemStyle: {
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowColor: 'rgba(0, 0, 0, 0.5)'
                        }
                    }
                }]
            });
        });
    </script>
</body>
</html>
```",Correct,735,736
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Adoption Rate , while the pie chart represents the distribution of Investment. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Investment for the selected group.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 600px;
            height: 400px;
            margin: auto;
        }
        #pie-chart {
            width: 600px;
            height: 400px;
            margin: auto;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <div id=""pie-chart""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                
                const years = rows.map(row => row[0]);
                const adoptionRates = rows.map(row => parseFloat(row[2]));
                const investments = rows.map(row => parseFloat(row[3]));
                
                const lineChart = echarts.init(document.getElementById('main'));
                const pieChart = echarts.init(document.getElementById('pie-chart'));
                
                const optionLine = {
                    title: {
                        text: 'Adoption Rate Over Years'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    xAxis: {
                        type: 'category',
                        data: years
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        name: 'Adoption Rate',
                        type: 'line',
                        data: adoptionRates
                    }]
                };
                
                lineChart.setOption(optionLine);

                lineChart.on('brushSelected', params => {
                    const selectedData = [];

                    params.batch.forEach(batchItem => {
                        batchItem.selected.forEach((selected, seriesIndex) => {
                            const dataIndexList = selected.indices;
                            dataIndexList.forEach(dataIndex => {
                                selectedData.push(rows[dataIndex]);
                            });
                        });
                    });

                    const totalInvestment = selectedData.reduce((sum, row) => sum + parseFloat(row[3]), 0);
                    const investmentDistribution = selectedData.map(row => {
                        const investment = parseFloat(row[3]);
                        return {
                            name: `${row[1]} (${((investment / totalInvestment) * 100).toFixed(2)}%)`,
                            value: investment
                        };
                    });

                    const optionPie = {
                        title: {
                            text: 'Investment Distribution',
                            subtext: 'Based on Selected Adoption Rates',
                            left: 'center'
                        },
                        series: [{
                            type: 'pie',
                            radius: '50%',
                            data: investmentDistribution,
                            emphasis: {
                                itemStyle: {
                                    shadowBlur: 10,
                                    shadowOffsetX: 0,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            }
                        }]
                    };
                    
                    pieChart.setOption(optionPie);
                });
            });
    </script>
</body>
</html>
```",Initialization Error,736,737
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Adoption Rate, Investment, Number of Users, and Market Share. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        .scatterplot-matrix {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
        }
        .chart-container {
            width: 400px;
            height: 400px;
        }
    </style>
</head>
<body>

<div class=""scatterplot-matrix"" id=""scatterplot-matrix"">
    <div class=""chart-container"" id=""chart1""></div>
    <div class=""chart-container"" id=""chart2""></div>
    <div class=""chart-container"" id=""chart3""></div>
    <div class=""chart-container"" id=""chart4""></div>
    <div class=""chart-container"" id=""chart5""></div>
    <div class=""chart-container"" id=""chart6""></div>
    <div class=""chart-container"" id=""chart7""></div>
    <div class=""chart-container"" id=""chart8""></div>
    <div class=""chart-container"" id=""chart9""></div>
    <div class=""chart-container"" id=""chart10""></div>
    <div class=""chart-container"" id=""chart11""></div>
    <div class=""chart-container"" id=""chart12""></div>
</div>

<script>
    fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1);
            const chartData = rows.map(row => {
                const [Year, Technology_Type, Adoption_Rate, Investment, ROI, Number_of_Users, Market_Share, Customer_Satisfaction_Score] = row.split(',');
                return {
                    Adoption_Rate: +Adoption_Rate,
                    Investment: +Investment,
                    Number_of_Users: +Number_of_Users,
                    Market_Share: +Market_Share
                };
            }).filter(d => !isNaN(d.Adoption_Rate));

            const charts = [
                { x: 'Adoption_Rate', y: 'Investment', title: 'Adoption Rate vs Investment' },
                { x: 'Adoption_Rate', y: 'Number_of_Users', title: 'Adoption Rate vs Number of Users' },
                { x: 'Adoption_Rate', y: 'Market_Share', title: 'Adoption Rate vs Market Share' },
                { x: 'Investment', y: 'Number_of_Users', title: 'Investment vs Number of Users' },
                { x: 'Investment', y: 'Market_Share', title: 'Investment vs Market Share' },
                { x: 'Number_of_Users', y: 'Market_Share', title: 'Number of Users vs Market Share' },
            ];

            let selectedIndices = new Set();

            charts.forEach((chart, index) => {
                const chartDom = document.getElementById('chart' + (index + 1));
                const myChart = echarts.init(chartDom);

                const option = {
                    title: { text: chart.title },
                    tooltip: {},
                    xAxis: { type: 'value', name: chart.x },
                    yAxis: { type: 'value', name: chart.y },
                    series: [{
                        type: 'scatter',
                        data: chartData.map((d, i) => ({
                            value: [d[chart.x], d[chart.y]],
                            index: i
                        })),
                        itemStyle: {
                            color: function(params) {
                                return selectedIndices.has(params.data.index) ? 'red' : 'blue';
                            }
                        }
                    }],
                    graphic: [{
                        type: 'text',
                        left: 'center',
                        top: 'top',
                        style: {
                            text: 'Click and drag to brush select data points across all charts',
                            font: 'bold 14px sans-serif',
                            fill: '#000'
                        }
                    }]
                };

                myChart.setOption(option);

                myChart.on('brushSelected', (params) => {
                    selectedIndices.clear();
                    params.batch[0].areas.forEach(area => {
                        area.dataIndex.forEach(index => selectedIndices.add(index));
                    });
                    charts.forEach((_, i) => {
                        const otherChart = echarts.init(document.getElementById('chart' + (i + 1)));
                        otherChart.setOption({
                            series: [{
                                itemStyle: {
                                    color: function(params) {
                                        return selectedIndices.has(params.data.index) ? 'red' : 'blue';
                                    }
                                }
                            }]
                        });
                    });
                });
            });
        });
</script>

</body>
</html>
```",Correct,737,738
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a brushable Scatterplot that visualizes the relationship between Adoption Rate and Investment. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Brushable Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 70%;
            height: 400px;
            float: left;
        }
        
        #table-container {
            width: 30%;
            float: left;
            height: 400px;
            overflow: auto;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
        }
        
        th, td {
            border: 1px solid black;
            padding: 8px;
            text-align: left;
        }
        
        th {
            background-color: #f2f2f2;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <div id=""table-container"">
        <table id=""data-table"">
            <thead>
                <tr>
                    <th>Year</th>
                    <th>Technology Type</th>
                    <th>Adoption Rate</th>
                    <th>Investment</th>
                    <th>Return on Investment</th>
                    <th>Number of Users</th>
                    <th>Market Share</th>
                    <th>Customer Satisfaction Score</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n');
                const headers = lines[0].split(',');
                const seriesData = lines.slice(1).map(line => {
                    const values = line.split(',');
                    return {
                        Year: values[0],
                        TechnologyType: values[1],
                        AdoptionRate: parseFloat(values[2]),
                        Investment: parseFloat(values[3]),
                        ReturnOnInvestment: parseFloat(values[4]),
                        NumberOfUsers: parseInt(values[5]),
                        MarketShare: parseFloat(values[6]),
                        CustomerSatisfactionScore: parseFloat(values[7])
                    };
                }).filter(item => !isNaN(item.AdoptionRate) && !isNaN(item.Investment));

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);

                const option = {
                    title: {
                        text: 'Scatterplot: Adoption Rate vs Investment',
                    },
                    tooltip: {},
                    xAxis: {
                        name: 'Investment',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Adoption Rate',
                        type: 'value'
                    },
                    dataZoom: [{
                        type: 'slider',
                        show: true,
                        start: 0,
                        end: 100
                    }],
                    series: [{
                        type: 'scatter',
                        data: seriesData.map(item => [item.Investment, item.AdoptionRate]),
                        symbolSize: 10,
                        itemStyle: {
                            color: '#5470c6'
                        },
                        emphasis: {
                            itemStyle: {
                                color: '#ff7f0e'
                            }
                        }
                    }],
                    brush: {
                        toolbox: ['rect'],
                        xAxisIndex: 0,
                        yAxisIndex: 0
                    }
                };

                myChart.setOption(option);

                myChart.on('brushSelected', function(params) {
                    const selectedPoints = [];
                    const brushInfo = params.batch[0].areas;
                    brushInfo.forEach(area => {
                        const start = area.coordRange[0];
                        const end = area.coordRange[1];
                        seriesData.forEach((point, index) => {
                            if (point.Investment >= start[0] && point.Investment <= end[0] &&
                                point.AdoptionRate >= start[1] && point.AdoptionRate <= end[1]) {
                                selectedPoints.push(point);
                            }
                        });
                    });

                    const tableBody = document.getElementById('data-table').getElementsByTagName('tbody')[0];
                    tableBody.innerHTML = '';
                    selectedPoints.slice(0, 20).forEach(point => {
                        const row = tableBody.insertRow();
                        row.insertCell(0).textContent = point.Year;
                        row.insertCell(1).textContent = point.TechnologyType;
                        row.insertCell(2).textContent = point.AdoptionRate;
                        row.insertCell(3).textContent = point.Investment;
                        row.insertCell(4).textContent = point.ReturnOnInvestment;
                        row.insertCell(5).textContent = point.NumberOfUsers;
                        row.insertCell(6).textContent = point.MarketShare;
                        row.insertCell(7).textContent = point.CustomerSatisfactionScore;
                    });
                });
            });
    </script>
</body>
</html>
```",Correct,738,739
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a horizontal Bar Chart that shows Technology Type and Adoption Rate, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 70%;
            height: 500px;
            display: inline-block;
        }
        #minimap {
            width: 25%;
            height: 200px;
            display: inline-block;
            vertical-align: top;
        }
    </style>
</head>
<body>

<div id=""main""></div>
<div id=""minimap""></div>

<script>
    async function fetchData() {
        const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv');
        const data = await response.text();
        return parseCSV(data);
    }

    function parseCSV(data) {
        const rows = data.split('\n').slice(1);
        const result = rows.map(row => {
            const cols = row.split(',');
            return {
                year: cols[0],
                technologyType: cols[1],
                adoptionRate: parseFloat(cols[2]),
            };
        }).filter(item => item.technologyType);
        return result;
    }

    function drawChart(data) {
        const mainChart = echarts.init(document.getElementById('main'));
        const miniMapChart = echarts.init(document.getElementById('minimap'));

        const mainOption = {
            title: {
                text: 'Technology Adoption Rate',
            },
            tooltip: {},
            xAxis: {
                type: 'value'
            },
            yAxis: {
                type: 'category',
                data: data.map(item => item.technologyType)
            },
            series: [{
                name: 'Adoption Rate',
                type: 'bar',
                data: data.map(item => item.adoptionRate),
                emphasis: {
                    focus: 'series'
                }
            }]
        };

        const miniMapOption = {
            title: {
                text: 'Overview of Adoption Rates',
            },
            tooltip: {},
            xAxis: {
                type: 'value'
            },
            yAxis: {
                type: 'category',
                data: data.map(item => item.technologyType)
            },
            series: [{
                name: 'Adoption Rate',
                type: 'bar',
                data: data.map(item => item.adoptionRate),
                itemStyle: {
                    opacity: 0.3
                }
            }]
        };

        mainChart.setOption(mainOption);
        miniMapChart.setOption(miniMapOption);
    }

    fetchData().then(data => drawChart(data));
</script>

</body>
</html>
```",Initialization Error,739,740
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Adoption Rate and Investment, and a Bar Chart on the right that displays Technology Type versus Adoption Rate.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <style>
        #vis {
            display: flex;
            justify-content: space-between;
        }
        .chart {
            width: 45%;
        }
    </style>
</head>
<body>
    <div id=""vis"">
        <div class=""chart"" id=""scatterplot""></div>
        <div class=""chart"" id=""barchart""></div>
    </div>

    <script>
        const scatterPlotSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Investment"",
                    ""type"": ""quantitative"",
                    ""title"": ""Investment""
                },
                ""y"": {
                    ""field"": ""Adoption Rate"",
                    ""type"": ""quantitative"",
                    ""title"": ""Adoption Rate""
                },
                ""color"": {
                    ""field"": ""Technology Type"",
                    ""type"": ""nominal"",
                    ""legend"": {
                        ""title"": ""Technology Type""
                    }
                }
            },
            ""width"": 400,
            ""height"": 300
        };

        const barChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Technology Type"",
                    ""type"": ""nominal"",
                    ""title"": ""Technology Type"",
                    ""sort"": ""y""
                },
                ""y"": {
                    ""field"": ""Adoption Rate"",
                    ""type"": ""quantitative"",
                    ""title"": ""Adoption Rate""
                }
            },
            ""width"": 400,
            ""height"": 300
        };

        vegaEmbed('#scatterplot', scatterPlotSpec).catch(console.error);
        vegaEmbed('#barchart', barChartSpec).catch(console.error);
    </script>
</body>
</html>
```",Correct,740,741
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Adoption Rate and Investment, and a Bar Chart on the right that displays Technology Type versus Adoption Rate. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.6.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.1""></script>
    <style>
        #vis1, #vis2 {
            width: 45%;
            display: inline-block;
        }
    </style>
</head>
<body>

<div id=""vis1""></div>
<div id=""vis2""></div>

<script>
    const dataUrl = ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"";

    const scatterPlotSpec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""data"": {
            ""url"": dataUrl
        },
        ""mark"": ""point"",
        ""encoding"": {
            ""x"": {""field"": ""Investment"", ""type"": ""quantitative""},
            ""y"": {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
            ""color"": {""field"": ""Technology Type"", ""type"": ""nominal""},
            ""tooltip"": [
                {""field"": ""Year"", ""type"": ""ordinal""},
                {""field"": ""Technology Type"", ""type"": ""nominal""},
                {""field"": ""Investment"", ""type"": ""quantitative""},
                {""field"": ""Adoption Rate"", ""type"": ""quantitative""}
            ]
        },
        ""selection"": {
            ""brush"": {
                ""type"": ""interval"",
                ""encodings"": [""x"", ""y""]
            }
        }
    };

    const barChartSpec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""data"": {
            ""url"": dataUrl
        },
        ""mark"": ""bar"",
        ""encoding"": {
            ""x"": {
                ""field"": ""Technology Type"",
                ""type"": ""nominal"",
                ""axis"": {""labelAngle"": 45}
            },
            ""y"": {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
            ""opacity"": {
                ""condition"": {
                    ""selection"": ""brush"",
                    ""field"": ""Technology Type"", 
                    ""type"": ""nominal"",
                },
                ""value"": 0.2
            }
        }
    };

    vegaEmbed('#vis1', scatterPlotSpec).then(() => {
        vegaEmbed('#vis2', barChartSpec);
    });
</script>

</body>
</html>
```",Initialization Error,741,742
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Adoption Rate , while the pie chart represents the distribution of Investment.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <style>
        #vis {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        .chart {
            margin: 20px;
        }
    </style>
</head>
<body>
    <div id=""vis"">
        <div class=""chart"" id=""line-chart""></div>
        <div class=""chart"" id=""pie-chart""></div>
    </div>

    <script>
        const lineChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A line chart showing the trend of Adoption Rate over the years."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Year"",
                    ""type"": ""ordinal""
                },
                ""y"": {
                    ""field"": ""Adoption Rate"",
                    ""type"": ""quantitative""
                }
            }
        };

        const pieChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A pie chart showing the distribution of Investment by Technology Type."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""mark"": {
                ""type"": ""arc"",
                ""tooltip"": true
            },
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Investment"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Technology Type"",
                    ""type"": ""nominal""
                },
                ""tooltip"": [
                    {""field"": ""Technology Type"", ""type"": ""nominal""},
                    {""field"": ""Investment"", ""type"": ""quantitative""}
                ]
            }
        };

        vegaEmbed('#line-chart', lineChartSpec);
        vegaEmbed('#pie-chart', pieChartSpec);
    </script>
</body>
</html>
```",Correct,742,743
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Adoption Rate , while the pie chart represents the distribution of Investment. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Investment for the selected group.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <style>
        #vis {
            width: 800px;
            height: 600px;
        }
    </style>
</head>
<body>
    <h1>Technology Adoption and Investment Distribution</h1>
    <div id=""vis""></div>
    <script>
        const url = ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"";

        const lineChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": url
            },
            ""transform"": [
                {
                    ""filter"": ""datum['Adoption Rate'] !== null""
                }
            ],
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Year"",
                    ""type"": ""temporal"",
                    ""title"": ""Year""
                },
                ""y"": {
                    ""field"": ""Adoption Rate"",
                    ""type"": ""quantitative"",
                    ""title"": ""Adoption Rate""
                },
                ""tooltip"": [
                    {""field"": ""Year"", ""type"": ""temporal""},
                    {""field"": ""Adoption Rate"", ""type"": ""quantitative""}
                ]
            },
            ""height"": 300
        };

        const pieChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": url
            },
            ""transform"": [
                {
                    ""filter"": ""datum['Investment'] !== null""
                },
                {
                    ""aggregate"": [{""op"": ""sum"", ""field"": ""Investment"", ""as"": ""total_investment""}],
                    ""groupby"": [""Technology Type""]
                }
            ],
            ""mark"": ""arc"",
            ""encoding"": {
                ""theta"": {
                    ""field"": ""total_investment"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Technology Type"",
                    ""type"": ""nominal""
                },
                ""tooltip"": [
                    {""field"": ""Technology Type"", ""type"": ""nominal""},
                    {""field"": ""total_investment"", ""type"": ""quantitative""}
                ]
            },
            ""height"": 300
        };

        const combinedSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""vconcat"": [
                lineChartSpec,
                pieChartSpec
            ]
        };

        vegaEmbed('#vis', combinedSpec).then(result => {
            const lineChartView = result.view;

            lineChartView.addEventListener('click', function(event, item) {
                const selection = lineChartView.data('table').filter(d => d.AdoptionRate > 0);
                const selectedYears = selection.map(d => d.Year);
                
                const filteredPieData = pieChartSpec.data.url + '?filter=' + encodeURIComponent(JSON.stringify(selectedYears));
                pieChartSpec.data.url = filteredPieData;

                // Update pie chart with filtered data.
                vegaEmbed('#vis', combinedSpec).then(result => {
                    result.view.insert('table', filteredPieData);
                });
            });

        }).catch(console.error);
    </script>
</body>
</html>
```",Execution Error,743,744
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Adoption Rate, Investment, Number of Users, and Market Share. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <style>
        .scatterplot {
            display: flex;
            flex-direction: column;
        }
        .scatterplot div {
            display: flex;
        }
        .scatterplot div > div {
            flex: 1;
        }
    </style>
</head>
<body>
    <div id=""vis"" class=""scatterplot""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""selection"": ""brush""
                    }
                }
            ],
            ""selection"": {
                ""brush"": {
                    ""type"": ""interval"",
                    ""encodings"": [""x"", ""y""]
                }
            },
            ""layer"": [
                {
                    ""facet"": {
                        ""row"": {""field"": ""x-axis""},
                        ""column"": {""field"": ""y-axis""}
                    },
                    ""spec"": {
                        ""mark"": ""circle"",
                        ""encoding"": {
                            ""x"": {
                                ""field"": ""x-axis"",
                                ""type"": ""quantitative""
                            },
                            ""y"": {
                                ""field"": ""y-axis"",
                                ""type"": ""quantitative""
                            },
                            ""opacity"": {
                                ""condition"": {
                                    ""selection"": ""brush"",
                                    ""value"": 1
                                },
                                ""value"": 0.2
                            },
                            ""tooltip"": [
                                {""field"": ""Year"", ""type"": ""nominal""},
                                {""field"": ""Technology Type"", ""type"": ""nominal""},
                                {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
                                {""field"": ""Investment"", ""type"": ""quantitative""},
                                {""field"": ""Return on Investment"", ""type"": ""quantitative""},
                                {""field"": ""Number of Users"", ""type"": ""quantitative""},
                                {""field"": ""Market Share"", ""type"": ""quantitative""},
                                {""field"": ""Customer Satisfaction Score"", ""type"": ""quantitative""}
                            ]
                        }
                    }
                }
            ],
            ""params"": [
                {
                    ""name"": ""x-axis"",
                    ""select"": {""fields"": [""Adoption Rate"", ""Investment"", ""Number of Users"", ""Market Share""]}
                },
                {
                    ""name"": ""y-axis"",
                    ""select"": {""fields"": [""Adoption Rate"", ""Investment"", ""Number of Users"", ""Market Share""]}
                }
            ]
        };

        vegaEmbed('#vis', spec).then(result => {
            // Visualization rendered
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,744,745
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a brushable Scatterplot that visualizes the relationship between Adoption Rate and Investment. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Vega-Lite Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.7.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
    <style>
        .scatterplot {
            width: 60%;
            float: left;
        }
        .table {
            width: 30%;
            float: right;
            border: 1px solid #ccc;
        }
    </style>
</head>
<body>
    <div class=""scatterplot"" id=""vis""></div>
    <div class=""table"" id=""table""></div>

    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {""field"": ""Investment"", ""type"": ""quantitative""},
                ""y"": {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
                ""color"": {""field"": ""Technology Type"", ""type"": ""nominal""},
                ""tooltip"": [
                    {""field"": ""Year"", ""type"": ""ordinal""},
                    {""field"": ""Technology Type"", ""type"": ""nominal""},
                    {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
                    {""field"": ""Investment"", ""type"": ""quantitative""},
                    {""field"": ""Return on Investment"", ""type"": ""quantitative""},
                    {""field"": ""Number of Users"", ""type"": ""quantitative""},
                    {""field"": ""Market Share"", ""type"": ""quantitative""},
                    {""field"": ""Customer Satisfaction Score"", ""type"": ""quantitative""}
                ]
            },
            ""width"": 400,
            ""height"": 300,
            ""selection"": {
                ""grid"": {
                    ""type"": ""interval"", ""encodings"": [""x"", ""y""]
                }
            }
        };

        vegaEmbed('#vis', spec).then(result => {
            const view = result.view;

            // Add brush selection listener
            view.addEventListener('click', () => {
                const selection = view.data('grid');
                const filtered = selection ? view.data('table').filter(d => selection[0] <= d.Investment && d.Investment <= selection[1] && selection[2] <= d['Adoption Rate'] && d['Adoption Rate'] <= selection[3]) : [];
                
                // Create a table of the selected data
                const table = document.getElementById('table');
                table.innerHTML = '<h3>Selected Data</h3><table border=""1""><tr><th>Year</th><th>Technology Type</th><th>Adoption Rate</th><th>Investment</th><th>Return on Investment</th><th>Number of Users</th><th>Market Share</th><th>Customer Satisfaction Score</th></tr>';
                filtered.slice(0, 20).forEach(d => {
                    table.innerHTML += `<tr>
                        <td>${d.Year}</td>
                        <td>${d[""Technology Type""]}</td>
                        <td>${d[""Adoption Rate""]}</td>
                        <td>${d.Investment}</td>
                        <td>${d[""Return on Investment""]}</td>
                        <td>${d[""Number of Users""]}</td>
                        <td>${d[""Market Share""]}</td>
                        <td>${d[""Customer Satisfaction Score""]}</td>
                    </tr>`;
                });
                table.innerHTML += '</table>';
            });
        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Initial Result,745,746
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a horizontal Bar Chart that shows Technology Type and Adoption Rate, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
          ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
          ""description"": ""A horizontal bar chart showing Technology Type and Adoption Rate."",
          ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
            ""format"": {
              ""type"": ""csv""
            }
          },
          ""mark"": ""bar"",
          ""encoding"": {
            ""y"": {
              ""field"": ""Technology Type"",
              ""type"": ""ordinal"",
              ""sort"": ""-x""
            },
            ""x"": {
              ""field"": ""Adoption Rate"",
              ""type"": ""quantitative""
            }
          },
          ""config"": {
            ""view"": {
              ""stroke"": null
            }
          },
          ""width"": ""container"",
          ""height"": 300
        };

        const specMinimap = {
          ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
          ""description"": ""Minimap representation of the technology adoption data."",
          ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
            ""format"": {
              ""type"": ""csv""
            }
          },
          ""mark"": ""bar"",
          ""encoding"": {
            ""x"": {
              ""field"": ""Adoption Rate"",
              ""type"": ""quantitative""
            },
            ""y"": {
              ""field"": ""Technology Type"",
              ""type"": ""ordinal"",
              ""sort"": ""-x""
            }
          },
          ""config"": {
            ""view"": {
              ""stroke"": null
            }
          },
          ""width"": 80,
          ""height"": 200,
          ""view"": {
            ""stroke"": ""transparent""
          }
        };

        vegaEmbed('#vis', {
            ""$schema"": ""https://vega.github.io/schema/vega/v5.json"",
            ""signals"": [
              {
                ""name"": ""minimapY"",
                ""update"": ""datum.y === undefined ? 0 : datum.y""
              }
            ],
            ""data"": {
              ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
              ""format"": {
                ""type"": ""csv""
              }
            },
            ""marks"": [
              {
                ""type"": ""group"",
                ""encode"": {
                  ""enter"": {
                    ""fill"": { ""value"": ""lightgray"" }
                  }
                },
                ""axes"": [{ ""orient"": ""left"", ""scale"": ""y"" }],
                ""marks"": [
                  {
                    ""type"": ""bar"",
                    ""encode"": {
                      ""enter"": {
                        ""x"": { ""field"": ""Adoption Rate"", ""scale"": ""x"" },
                        ""y"": { ""field"": ""Technology Type"", ""scale"": ""y"" },
                        ""width"": { ""scale"": ""x"", ""band"": 1 },
                        ""fill"": { ""value"": ""steelblue"" }
                      }
                    }
                  },
                  {
                    ""type"": ""bar"",
                    ""encode"": {
                      ""enter"": {
                        ""x"": { ""field"": ""Adoption Rate"", ""scale"": ""x"" },
                        ""y"": { ""field"": ""Technology Type"", ""scale"": ""y"" },
                        ""width"": { ""scale"": ""x"", ""band"": 1 },
                        ""fill"": { ""value"": ""lightgray"" }
                      },
                      ""update"": {
                        ""opacity"": { ""value"": 0.2 }
                      }
                    }
                  }
                ]
              },
              {
                ""type"": ""group"",
                ""encode"": {
                  ""enter"": {
                    ""x"": { ""value"": 300 },
                    ""y"": { ""value"": 0 },
                    ""height"": { ""value"": 200 },
                    ""width"": { ""value"": 80 }
                  }
                },
                ""marks"": [
                  {
                    ""type"": ""bar"",
                    ""encode"": {
                      ""enter"": {
                        ""x"": { ""field"": ""Adoption Rate"", ""scale"": ""x"" },
                        ""y"": { ""field"": ""Technology Type"", ""scale"": ""y"" },
                        ""width"": { ""scale"": ""x"", ""band"": 1 },
                        ""fill"": { ""value"": ""steelblue"" }
                      }
                    }
                  }
                ]
              }
            ],
            ""scales"": [
              {
                ""name"": ""x"",
                ""type"": ""linear"",
                ""domain"": { ""data"": ""data"", ""field"": ""Adoption Rate"" },
                ""range"": ""width""
              },
              {
                ""name"": ""y"",
                ""type"": ""band"",
                ""domain"": { ""data"": ""data"", ""field"": ""Technology Type"" },
                ""range"": ""height""
              }
            ],
            ""axes"": [
              { ""orient"": ""bottom"", ""scale"": ""x"" },
              { ""orient"": ""left"", ""scale"": ""y"" }
            ]
        });
    </script>
</body>
</html>
```",Initialization Error,746,747
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Adoption Rate and Investment.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Adoption Rate vs Investment</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter circle {
            fill: steelblue;
            stroke: black;
            stroke-width: 1.5px;
        }
        .axis--x path,
        .axis--y path {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
            data.forEach(d => {
                d['Adoption Rate'] = +d['Adoption Rate'];
                d['Investment'] = +d['Investment'];
            });

            const x = d3.scaleLinear()
                .domain(d3.extent(data, d => d['Investment'])).nice()
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain(d3.extent(data, d => d['Adoption Rate'])).nice()
                .range([height, 0]);

            const xAxis = d3.axisBottom(x);
            const yAxis = d3.axisLeft(y);

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(xAxis);

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(yAxis);

            g.append(""g"")
                .attr(""class"", ""scatter"")
                .selectAll(""circle"")
                .data(data)
                .enter().append(""circle"")
                .attr(""cx"", d => x(d['Investment']))
                .attr(""cy"", d => y(d['Adoption Rate']))
                .attr(""r"", 5);
        });
    </script>
</body>
</html>
```",Correct,747,748
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Line Chart that visualizes the trend of Adoption Rate over the Year for each Technology Type.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Rate</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke-width: 2px;
        }
        .axis {
            font: 10px sans-serif;
        }
        .axis--x path,
        .axis--x line,
        .axis--y path,
        .axis--y line {
            fill: none;
            shape-rendering: crispEdges;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const margin = { top: 20, right: 30, bottom: 30, left: 40 },
              width = 800 - margin.left - margin.right,
              height = 400 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
            // Parse the data
            data.forEach(d => {
                d.Year = +d.Year;
                d['Adoption Rate'] = +d['Adoption Rate'];
            });

            const technologies = Array.from(new Set(data.map(d => d['Technology Type'])));

            const x = d3.scaleLinear()
                .domain(d3.extent(data, d => d.Year))
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Adoption Rate'])])
                .range([height, 0]);

            const color = d3.scaleOrdinal(d3.schemeCategory10).domain(technologies);

            svg.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x).ticks(10));

            svg.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y).ticks(10));

            technologies.forEach(tech => {
                const techData = data.filter(d => d['Technology Type'] === tech);

                const line = d3.line()
                    .x(d => x(d.Year))
                    .y(d => y(d['Adoption Rate']));

                svg.append(""path"")
                    .datum(techData)
                    .attr(""class"", ""line"")
                    .attr(""d"", line)
                    .attr(""stroke"", color(tech))
                    .attr(""fill"", ""none"");
            });

            svg.append(""text"")
                .attr(""x"", width / 2)
                .attr(""y"", 0 - margin.top / 2)
                .attr(""text-anchor"", ""middle"")
                .style(""font-size"", ""16px"")
                .text(""Adoption Rate of Technology Types Over Years"");
        });
    </script>
</body>
</html>
```",Correct,748,749
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Adoption Rate for each Technology Type in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Rate in 2020</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }

        .bar:hover {
            fill: orange;
        }

        .axis--x path {
            display: none;
        }

        .axis--y path {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""600"" height=""400""></svg>
    <script>
        const margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = 600 - margin.left - margin.right,
              height = 400 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
            const filteredData = data.filter(d => d.Year === ""2020"");
            const adoptionRates = filteredData.map(d => ({ Technology: d['Technology Type'], AdoptionRate: +d['Adoption Rate'] }));

            const x = d3.scaleBand()
                .domain(adoptionRates.map(d => d.Technology))
                .range([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([0, d3.max(adoptionRates, d => d.AdoptionRate)])
                .nice()
                .range([height, 0]);

            svg.append(""g"")
                .selectAll("".bar"")
                .data(adoptionRates)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => x(d.Technology))
                .attr(""y"", d => y(d.AdoptionRate))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d.AdoptionRate));

            svg.append(""g"")
                .attr(""class"", ""axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""axis--y"")
                .call(d3.axisLeft(y).ticks(10));
        });
    </script>
</body>
</html>
```",Correct,749,750
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Pie Chart that visualizes the proportion of Adoption Rate contributed by each Technology Type in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Rate in 2020</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .arc {
            stroke: #fff;
        }
    </style>
</head>
<body>
    <h2>Technology Adoption Rate by Type in 2020</h2>
    <svg width=""600"" height=""600""></svg>

    <script>
        const width = 600;
        const height = 600;
        const radius = Math.min(width, height) / 2;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
            data = data.filter(d => d.Year == 2020);
            data.forEach(d => {
                d['Adoption Rate'] = +d['Adoption Rate'];
            });

            const pie = d3.pie()
                .value(d => d['Adoption Rate']);

            const arc = d3.arc()
                .innerRadius(0)
                .outerRadius(radius);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const pieData = pie(data);

            svg.selectAll("".arc"")
                .data(pieData)
                .enter().append(""g"")
                .attr(""class"", ""arc"")
                .append(""path"")
                .attr(""d"", arc)
                .style(""fill"", (d, i) => color(i));

            svg.selectAll("".arc"")
                .append(""text"")
                .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                .attr(""dy"", "".35em"")
                .text(d => d.data['Technology Type']);
        });
    </script>
</body>
</html>
```",Correct,750,751
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Donut Chart that visualizes the distribution of Adoption Rate among Technology Type in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Donut Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .arc {
            stroke: #fff;
        }
    </style>
</head>
<body>
    <svg width=""600"" height=""600""></svg>
    <script>
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(function(data) {
            const filteredData = data.filter(d => d.Year === ""2020"");
            const adoptionRates = d3.nest()
                .key(d => d[""Technology Type""])
                .rollup(v => d3.sum(v, d => +d[""Adoption Rate""]))
                .entries(filteredData);

            const width = 600, height = 600, margin = 40;
            const radius = Math.min(width, height) / 2 - margin;

            const svg = d3.select(""svg"")
                .append(""g"")
                .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

            const pie = d3.pie()
                .value(d => d.value);

            const data_ready = pie(adoptionRates);

            const arc = d3.arc()
                .innerRadius(radius * 0.5)
                .outerRadius(radius);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            svg.selectAll('.arc')
                .data(data_ready)
                .enter()
                .append('path')
                .attr('class', 'arc')
                .attr('d', arc)
                .attr('fill', (d) => color(d.data.key))
                .attr('stroke', '#fff')
                .style('stroke-width', '2px');
        });
    </script>
</body>
</html>
```",Initialization Error,751,752
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Coxcomb Chart(polar area chart) to compare the Adoption Rate of different Technology Type in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coxcomb Chart - Technology Adoption</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .arc {
            fill: steelblue;
            stroke: white;
            stroke-width: 1px;
        }
    </style>
</head>
<body>
    <svg width=""600"" height=""600""></svg>
    <script>
        const width = 600, height = 600, radius = Math.min(width, height) / 2;
        const svg = d3.select(""svg"").attr(""viewBox"", `${-width / 2} ${-height / 2} ${width} ${height}`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
            const filteredData = data.filter(d => d.Year == 2020);
            const adoptionRates = filteredData.map(d => ({
                TechnologyType: d[""Technology Type""],
                AdoptionRate: +d[""Adoption Rate""]
            }));

            const total = d3.sum(adoptionRates, d => d.AdoptionRate);
            const angleScale = d3.scaleLinear()
                .domain([0, total])
                .range([0, 2 * Math.PI]);

            const arc = d3.arc()
                .innerRadius(0)
                .outerRadius(d => d.AdoptionRate * 3);

            const pie = d3.pie()
                .value(d => d.AdoptionRate)
                .sort(null);

            const arcs = svg.selectAll("".arc"")
                .data(pie(adoptionRates))
                .enter().append(""g"")
                .attr(""class"", ""arc"");

            arcs.append(""path"")
                .attr(""d"", arc)
                .attr(""transform"", `translate(0, 0)`)
                .attr(""fill"", (d, i) => d3.schemeCategory10[i % 10]);

            arcs.append(""text"")
                .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                .attr(""dy"", "".35em"")
                .text(d => d.data.TechnologyType);
        });
    </script>
</body>
</html>
```",Initialization Error,752,753
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Radar Chart to compare the Adoption Rate of different Technology Type in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Radar Chart</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .radar-chart {
            margin: auto;
        }
    </style>
</head>
<body>
    <svg class=""radar-chart"" width=""600"" height=""600""></svg>
    <script>
        const width = 600, height = 600, radius = Math.min(width, height) / 2;
        const color = d3.scaleOrdinal(d3.schemeCategory10);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"")
            .then(data => {
                const filteredData = data.filter(d => d.Year === ""2020"");
                const techTypes = [...new Set(filteredData.map(d => d[""Technology Type""]))];

                const adoptionRates = techTypes.map(t => {
                    const techData = filteredData.find(d => d[""Technology Type""] === t);
                    return +techData[""Adoption Rate""];
                });

                const angles = techTypes.map((t, i) => (i * 2 * Math.PI) / techTypes.length);
                const radarLine = d3.lineRadial()
                    .radius((d, i) => (d / 100) * radius)
                    .angle((d, i) => angles[i]);

                const svg = d3.select("".radar-chart"")
                    .append(""g"")
                    .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

                // Draw circles
                svg.append(""circle"")
                    .attr(""r"", radius)
                    .style(""fill"", ""none"")
                    .style(""stroke"", ""#ccc"");

                // Draw radar chart
                svg.append(""path"")
                    .datum(adoptionRates)
                    .attr(""d"", radarLine)
                    .style(""fill"", color(0))
                    .style(""fill-opacity"", 0.5)
                    .style(""stroke"", color(0))
                    .style(""stroke-width"", 2);

                // Draw axes
                techTypes.forEach((type, i) => {
                    svg.append(""line"")
                        .attr(""x1"", 0)
                        .attr(""y1"", 0)
                        .attr(""x2"", radius * Math.cos(angles[i] - Math.PI / 2))
                        .attr(""y2"", radius * Math.sin(angles[i] - Math.PI / 2))
                        .style(""stroke"", ""#ccc"");
                    
                    svg.append(""text"")
                        .attr(""x"", (radius + 10) * Math.cos(angles[i] - Math.PI / 2))
                        .attr(""y"", (radius + 10) * Math.sin(angles[i] - Math.PI / 2))
                        .text(type)
                        .style(""font-size"", ""10px"")
                        .attr(""text-anchor"", ""middle"");
                });
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,753,754
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Streamgraph that visualizes the changes of Adoption Rate over the Year for each Technology Type.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Streamgraph of Technology Adoption</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .stream {
            opacity: 0.7;
        }
    </style>
</head>
<body>
    <script>
        const margin = { top: 20, right: 30, bottom: 30, left: 50 },
              width = 800 - margin.left - margin.right,
              height = 400 - margin.top - margin.bottom;

        const svg = d3.select(""body"").append(""svg"")
            .attr(""viewBox"", `0 0 ${width + margin.left + margin.right} ${height + margin.top + margin.bottom}`)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
            const nestedData = d3.group(data, d => d[""Technology Type""]);
            const years = Array.from(new Set(data.map(d => d[""Year""]))).sort();
            
            const series = Array.from(nestedData, ([key, values]) => {
                return {
                    key: key,
                    values: years.map(year => {
                        const adoption = values.find(v => v[""Year""] === year);
                        return {
                            year: year,
                            adoptionRate: adoption ? +adoption[""Adoption Rate""] : 0
                        };
                    })
                };
            });

            const x = d3.scaleLinear()
                .domain(d3.extent(years))
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(series, s => d3.max(s.values, v => v.adoptionRate))])
                .range([height, 0]);

            const area = d3.area()
                .x(d => x(d.year))
                .y0(height)
                .y1(d => y(d.adoptionRate));

            const color = d3.scaleOrdinal(d3.schemeCategory10)
                .domain(series.map(d => d.key));

            svg.selectAll("".stream"")
                .data(series)
                .enter().append(""path"")
                .attr(""class"", ""stream"")
                .attr(""fill"", d => color(d.key))
                .attr(""d"", d3.area()
                    .x(d => x(d.year))
                    .y0(d => y(d3.max(d.values, v => v.adoptionRate)))
                    .y1(d => y(0))
                )
                .transition()
                .duration(1000)
                .attr(""d"", d => area(d.values));

            svg.append(""g"")
                .attr(""class"", ""axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x).ticks(years.length).tickFormat(d3.format(""d"")));

            svg.append(""g"")
                .attr(""class"", ""axis"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Correct,754,755
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Slopegraph to compare the Adoption Rate between 2019 and 2020 for each Technology Type.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Slopegraph of Technology Adoption Rates</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 2px;
        }
        .circle {
            fill: white;
            stroke: steelblue;
            stroke-width: 2px;
        }
        .axis {
            font-size: 12px;
        }
        text {
            font-family: sans-serif;
            font-size: 10px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = {top: 20, right: 30, bottom: 30, left: 100};
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;
        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
            const filteredData = data.filter(d => d.Year === '2019' || d.Year === '2020');
            const adoptionRates = {};

            filteredData.forEach(d => {
                const technologyType = d['Technology Type'];
                const year = d.Year;
                const adoptionRate = +d['Adoption Rate'];

                if (!adoptionRates[technologyType]) {
                    adoptionRates[technologyType] = {};
                }
                adoptionRates[technologyType][year] = adoptionRate;
            });

            const technologyTypes = Object.keys(adoptionRates);
            const lineData = technologyTypes.map(type => {
                return {
                    technology: type,
                    year2019: adoptionRates[type]['2019'],
                    year2020: adoptionRates[type]['2020']
                };
            });

            const x = d3.scaleLinear()
                .domain([0, d3.max(lineData, d => d.year2020)])
                .range([0, width]);

            const y = d3.scaleBand()
                .domain(technologyTypes)
                .range([0, height])
                .padding(0.1);

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            const line = d3.line()
                .x(d => x(d.year))
                .y(d => y(d.technology));

            g.selectAll("".line"")
                .data(lineData)
                .enter().append(""path"")
                .attr(""class"", ""line"")
                .attr(""d"", d => line([{year: 2019, technology: d.technology}, {year: 2020, technology: d.technology}]))
                .attr(""transform"", (d) => `translate(0, ${y(d.technology) + y.bandwidth() / 2})`);

            g.selectAll("".circle"")
                .data(lineData)
                .enter().append(""circle"")
                .attr(""class"", ""circle"")
                .attr(""cx"", d => x(d.year2020))
                .attr(""cy"", d => y(d.technology) + y.bandwidth() / 2)
                .attr(""r"", 4);

            g.selectAll("".circle"")
                .data(lineData)
                .enter().append(""circle"")
                .attr(""class"", ""circle"")
                .attr(""cx"", d => x(d.year2019))
                .attr(""cy"", d => y(d.technology) + y.bandwidth() / 2)
                .attr(""r"", 4);
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,755,756
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Heatmap that visualizes the Adoption Rate across Technology Type and Years.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Rate Heatmap</title>
    <style>
        .heatmap rect {
            stroke: #ccc;
        }
        .axis text {
            font-size: 10px;
        }
        .legend rect {
            width: 20px;
            height: 20px;
        }
    </style>
</head>
<body>
    <svg width=""600"" height=""400"" class=""heatmap""></svg>
    <div class=""legend""></div>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <script>
        const margin = {top: 20, right: 20, bottom: 30, left: 40},
              width = 600 - margin.left - margin.right,
              height = 400 - margin.top - margin.bottom;

        const svg = d3.select('.heatmap')
            .attr('width', width + margin.left + margin.right)
            .attr('height', height + margin.top + margin.bottom)
            .append('g')
            .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

        d3.csv('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv').then(data => {
            const technologyTypes = Array.from(new Set(data.map(d => d['Technology Type'])));
            const years = Array.from(new Set(data.map(d => d['Year'])));

            const adoptionRates = technologyTypes.map(tt => {
                return years.map(year => {
                    const row = data.find(d => d['Technology Type'] === tt && d['Year'] === year);
                    return row ? +row['Adoption Rate'] : 0;
                });
            });

            const x = d3.scaleBand()
                .domain(years)
                .range([0, width])
                .padding(0.05);

            const y = d3.scaleBand()
                .domain(technologyTypes)
                .range([0, height])
                .padding(0.05);

            const colorScale = d3.scaleSequential(d3.interpolateYlGnBu)
                .domain([0, d3.max(adoptionRates.flat())]);

            svg.selectAll()
                .data(adoptionRates)
                .enter().append('g')
                .attr('transform', (d, i) => 'translate(0,' + y(technologyTypes[i]) + ')')
                .selectAll('rect')
                .data(d => d)
                .enter().append('rect')
                .attr('x', (d, i) => x(years[i]))
                .attr('y', 0)
                .attr('width', x.bandwidth())
                .attr('height', y.bandwidth())
                .style('fill', d => colorScale(d));

            const xAxis = d3.axisBottom(x);
            const yAxis = d3.axisLeft(y);

            svg.append('g')
                .attr('class', 'axis')
                .attr('transform', 'translate(0,' + height + ')')
                .call(xAxis);

            svg.append('g')
                .attr('class', 'axis')
                .call(yAxis);

            const legend = d3.select('.legend')
                .selectAll('div')
                .data(colorScale.ticks(6))
                .enter().append('div')
                .style('background-color', d => colorScale(d))
                .style('width', '20px')
                .style('height', '20px')
                .style('display', 'inline-block');
        });
    </script>
</body>
</html>
```",Correct,756,757
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Stacked Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            transition: opacity 0.3s;
        }
        .axis--x path {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
            const keys = [...new Set(data.map(d => d[""Technology Type""]))];
            const years = [...new Set(data.map(d => d[""Year""]))];

            const stackedData = d3.stack()
                .keys(keys)
                (d3.groups(data, d => d[""Year""]).map(([key, values]) => {
                    return {
                        Year: key,
                        ...values.reduce((acc, cur) => {
                            acc[cur[""Technology Type""]] = +cur[""Adoption Rate""];
                            return acc;
                        }, {})
                    };
                }));

            const x = d3.scaleBand()
                .domain(years)
                .range([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([0, d3.max(stackedData, d => d3.max(d, d => d[1]))])
                .nice()
                .range([height, 0]);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            g.selectAll("".serie"")
                .data(stackedData)
                .enter().append(""g"")
                .attr(""class"", ""serie"")
                .attr(""fill"", (d, i) => color(i))
                .selectAll(""rect"")
                .data(d => d)
                .enter().append(""rect"")
                .attr(""x"", d => x(d.data.Year))
                .attr(""y"", d => y(d[1]))
                .attr(""height"", d => y(d[0]) - y(d[1]))
                .attr(""width"", x.bandwidth());

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Correct,757,758
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Horizontal Bar Chart that visualizes the Adoption Rate for each Technology Type in 2020.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Rate Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path {
            display: none;
        }
        .axis--y .domain {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
            margin = {top: 20, right: 30, bottom: 30, left: 200},
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"").then(data => {
            const filteredData = data.filter(d => d.Year === '2020').map(d => ({
                TechnologyType: d['Technology Type'],
                AdoptionRate: +d['Adoption Rate']
            }));

            const x = d3.scaleLinear()
                .domain([0, d3.max(filteredData, d => d.AdoptionRate)]).nice()
                .range([0, width]);

            const y = d3.scaleBand()
                .domain(filteredData.map(d => d.TechnologyType))
                .range([0, height])
                .padding(0.1);

            g.append(""g"")
                .selectAll("".bar"")
                .data(filteredData)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", 0)
                .attr(""y"", d => y(d.TechnologyType))
                .attr(""width"", d => x(d.AdoptionRate))
                .attr(""height"", y.bandwidth());

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x).ticks(10));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Correct,758,759
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Adoption Rate and Investment.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const adoptionRates = [];
                const investments = [];
                
                rows.forEach(row => {
                    const columns = row.split(',');
                    if (columns.length > 1) {
                        const adoptionRate = parseFloat(columns[2]);
                        const investment = parseFloat(columns[3]);
                        if (!isNaN(adoptionRate) && !isNaN(investment)) {
                            adoptionRates.push(adoptionRate);
                            investments.push(investment);
                        }
                    }
                });

                const chart = echarts.init(document.getElementById('main'));
                const option = {
                    title: {
                        text: 'Scatterplot of Adoption Rate vs Investment',
                    },
                    tooltip: {},
                    xAxis: {
                        name: 'Investment',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Adoption Rate',
                        type: 'value'
                    },
                    series: [{
                        symbolSize: 10,
                        data: adoptionRates.map((adoptionRate, index) => [investments[index], adoptionRate]),
                        type: 'scatter'
                    }]
                };
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,759,760
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Line Chart that visualizes the trend of Adoption Rate over the Year for each Technology Type.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Rate</title>
    <!-- ECharts CDN -->
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.1.3/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const adoptionData = {};
                
                lines.forEach(line => {
                    const [year, techType, adoptionRate] = line.split(',');
                    if (!adoptionData[techType]) {
                        adoptionData[techType] = [];
                    }
                    adoptionData[techType].push({ year: year.trim(), adoptionRate: parseFloat(adoptionRate.trim()) });
                });

                const years = [...new Set(lines.map(line => line.split(',')[0].trim()))];
                const seriesData = Object.keys(adoptionData).map(techType => ({
                    name: techType,
                    type: 'line',
                    data: years.map(year => {
                        const entry = adoptionData[techType].find(e => e.year === year);
                        return entry ? entry.adoptionRate : null;
                    })
                }));

                const option = {
                    title: {
                        text: 'Technology Adoption Rate Over the Years'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    legend: {
                        data: Object.keys(adoptionData)
                    },
                    xAxis: {
                        type: 'category',
                        data: years
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Adoption Rate (%)'
                    },
                    series: seriesData
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Initialization Error,760,761
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Adoption Rate for each Technology Type in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Rate in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 600px;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const adoptionData = [];
                const technologyTypes = [];

                rows.forEach(row => {
                    const columns = row.split(',');
                    if (columns[0] === '2020') {
                        technologyTypes.push(columns[1]);
                        adoptionData.push(parseFloat(columns[2]));
                    }
                });

                const option = {
                    title: {
                        text: 'Technology Adoption Rate in 2020'
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: technologyTypes
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        name: 'Adoption Rate',
                        type: 'bar',
                        data: adoptionData
                    }]
                };

                const myChart = echarts.init(document.getElementById('main'));
                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,761,762
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Pie Chart that visualizes the proportion of Adoption Rate contributed by each Technology Type in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Rate Pie Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 600px;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const adoptionData = {};

                rows.forEach(row => {
                    const columns = row.split(',');
                    const year = columns[0].trim();
                    const techType = columns[1].trim();
                    const adoptionRate = parseFloat(columns[2].trim());

                    if (year === '2020') {
                        if (!adoptionData[techType]) {
                            adoptionData[techType] = 0;
                        }
                        adoptionData[techType] += adoptionRate;
                    }
                });

                const chartData = Object.entries(adoptionData).map(([name, value]) => ({ name, value }));

                const myChart = echarts.init(document.getElementById('main'));
                const option = {
                    title: {
                        text: 'Technology Adoption Rate in 2020',
                        subtext: 'Proportion by Technology Type',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    legend: {
                        orient: 'vertical',
                        left: 'left'
                    },
                    series: [
                        {
                            name: 'Adoption Rate',
                            type: 'pie',
                            radius: '50%',
                            data: chartData,
                            emphasis: {
                                itemStyle: {
                                    shadowBlur: 10,
                                    shadowOffsetX: 0,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            }
                        }
                    ]
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,762,763
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Donut Chart that visualizes the distribution of Adoption Rate among Technology Type in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Donut Chart - Technology Adoption 2020</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
</head>
<body>
    <div id=""donutChart"" style=""width: 600px; height: 400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const adoptionData = {};
                
                rows.forEach(row => {
                    const columns = row.split(',');
                    const year = columns[0].trim();
                    const technologyType = columns[1].trim();
                    const adoptionRate = parseFloat(columns[2].trim());
                    
                    if (year === '2020') {
                        if (!adoptionData[technologyType]) {
                            adoptionData[technologyType] = 0;
                        }
                        adoptionData[technologyType] += adoptionRate;
                    }
                });

                const seriesData = Object.entries(adoptionData).map(([name, value]) => ({ name, value }));
                
                const option = {
                    title: {
                        text: 'Adoption Rate by Technology Type in 2020',
                        subtext: 'Source: Technology Adoption Dataset',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    series: [
                        {
                            type: 'pie',
                            radius: ['40%', '70%'],
                            avoidLabelOverlap: false,
                            label: {
                                show: true,
                                position: 'outside'
                            },
                            emphasis: {
                                label: {
                                    show: true,
                                    fontSize: '18',
                                    fontWeight: 'bold'
                                }
                            },
                            labelLine: {
                                show: true
                            },
                            data: seriesData,
                            roseType: 'angle'
                        }
                    ]
                };

                const donutChart = echarts.init(document.getElementById('donutChart'));
                donutChart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,763,764
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Coxcomb Chart(polar area chart) to compare the Adoption Rate of different Technology Type in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coxcomb Chart - Technology Adoption 2020</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 800px;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const technologyData = rows.map(row => {
                    const [year, technologyType, adoptionRate] = row.split(',');
                    return { year, technologyType, adoptionRate: parseFloat(adoptionRate) };
                });

                const filteredData = technologyData.filter(item => item.year.trim() === '2020');
                const technologyTypes = filteredData.map(item => item.technologyType);
                const adoptionRates = filteredData.map(item => item.adoptionRate);

                const chart = echarts.init(document.getElementById('main'));
                const option = {
                    title: {
                        text: 'Technology Adoption Rates in 2020',
                        subtext: 'Coxcomb Chart',
                        left: 'center',
                    },
                    polar: {},
                    angleAxis: {
                        type: 'category',
                        data: technologyTypes,
                    },
                    radiusAxis: {},
                    series: [{
                        type: 'bar',
                        data: adoptionRates,
                        coordinateSystem: 'polar',
                        name: 'Adoption Rate',
                        itemStyle: {
                            color: '#ff7f0e',
                        },
                        label: {
                            show: true,
                            position: 'inside'
                        }
                    }],
                    tooltip: {
                        trigger: 'item',
                        formatter: function(params) {
                            return `${params.name}: ${params.value}%`;
                        }
                    }
                };

                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,764,765
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Radar Chart to compare the Adoption Rate of different Technology Type in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Radar Chart - Technology Adoption</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
</head>
<body>
    <div id=""radarChart"" style=""width: 600px; height: 400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const technologyData = {};

                rows.forEach(row => {
                    const cols = row.split(',');
                    if (cols[0] === '2020') {
                        const techType = cols[1];
                        const adoptionRate = parseFloat(cols[2]);
                        technologyData[techType] = adoptionRate;
                    }
                });

                const techTypes = Object.keys(technologyData);
                const adoptionRates = Object.values(technologyData);

                const option = {
                    title: {
                        text: 'Adoption Rate of Technology Types in 2020'
                    },
                    tooltip: {},
                    radar: {
                        indicator: techTypes.map(type => ({ name: type, max: 100 })),
                    },
                    series: [{
                        name: 'Adoption Rate',
                        type: 'radar',
                        data: [{
                            value: adoptionRates,
                            name: '2020'
                        }]
                    }]
                };

                const chart = echarts.init(document.getElementById('radarChart'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,765,766
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Streamgraph that visualizes the changes of Adoption Rate over the Year for each Technology Type.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Streamgraph of Technology Adoption Rate</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.0/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 600px;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const years = new Set();
                const techData = {};

                lines.forEach(line => {
                    const [year, techType, adoptionRate] = line.split(',');
                    if (year && techType && adoptionRate) {
                        years.add(year);
                        if (!techData[techType]) {
                            techData[techType] = [];
                        }
                        techData[techType].push({ year, adoptionRate: parseFloat(adoptionRate) });
                    }
                });

                const yearsArray = Array.from(years).sort();
                const series = Object.keys(techData).map(techType => {
                    return {
                        name: techType,
                        type: 'line',
                        stack: 'Adoption',
                        areaStyle: {},
                        data: yearsArray.map(year => {
                            const techYearData = techData[techType].find(item => item.year === year);
                            return techYearData ? techYearData.adoptionRate : 0;
                        })
                    };
                });

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);
                const option = {
                    title: {
                        text: 'Technology Adoption Rate Over Years',
                    },
                    tooltip: {
                        trigger: 'axis',
                    },
                    legend: {
                        data: Object.keys(techData),
                    },
                    xAxis: {
                        type: 'category',
                        data: yearsArray,
                    },
                    yAxis: {
                        type: 'value',
                    },
                    series: series,
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,766,767
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Slopegraph to compare the Adoption Rate between 2019 and 2020 for each Technology Type.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Slopegraph - Adoption Rate</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""slopegraph"" style=""width: 800px; height: 600px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const adoptionData = {};

                lines.forEach(line => {
                    const [year, technologyType, adoptionRate] = line.split(',');
                    if (year === '2019' || year === '2020') {
                        if (!adoptionData[technologyType]) {
                            adoptionData[technologyType] = {};
                        }
                        adoptionData[technologyType][year] = parseFloat(adoptionRate);
                    }
                });

                const slopeData = Object.keys(adoptionData).map(tech => {
                    return {
                        name: tech,
                        '2019': adoptionData[tech]['2019'] || 0,
                        '2020': adoptionData[tech]['2020'] || 0
                    };
                });

                const option = {
                    title: {
                        text: 'Technology Adoption Rate Comparison (2019 vs 2020)',
                        left: 'center'
                    },
                    xAxis: {
                        type: 'value',
                        min: 0,
                        max: 100,
                        name: 'Adoption Rate (%)',
                        position: 'top'
                    },
                    yAxis: {
                        type: 'category',
                        data: slopeData.map(item => item.name),
                        inverse: true
                    },
                    series: [{
                        type: 'line',
                        data: slopeData.map(item => [item['2019'], item['2020']]),
                        symbol: 'circle',
                        lineStyle: {
                            width: 2
                        },
                        itemStyle: {
                            color: '#4caf50'
                        }
                    }],
                    tooltip: {
                        trigger: 'item',
                        formatter: function (params) {
                            return `${params.name}<br />2019: ${params.value[0]}%<br />2020: ${params.value[1]}%`;
                        }
                    }
                };

                const chart = echarts.init(document.getElementById('slopegraph'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,767,768
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Heatmap that visualizes the Adoption Rate across Technology Type and Years.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Heatmap</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 400px;""></div>
    <script>
        const url = 'https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv';
        
        fetch(url)
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const years = Array.from(new Set(rows.map(row => row[0])));
                const techTypes = Array.from(new Set(rows.map(row => row[1])));
                const adoptionRates = rows.map(row => [row[0], row[1], parseFloat(row[2])]);

                const heatmapData = adoptionRates.map(rate => {
                    const yearIndex = years.indexOf(rate[0]);
                    const techIndex = techTypes.indexOf(rate[1]);
                    return [yearIndex, techIndex, rate[2]];
                });

                const option = {
                    tooltip: {
                        position: 'bottom'
                    },
                    grid: {
                        height: '50%',
                        width: '70%',
                        left: '10%',
                        top: '10%'
                    },
                    xAxis: {
                        type: 'category',
                        name: 'Year',
                        boundaryGap: false,
                        data: years
                    },
                    yAxis: {
                        type: 'category',
                        name: 'Technology Type',
                        data: techTypes
                    },
                    visualMap: {
                        min: 0,
                        max: 100,
                        calculable: true,
                        orient: 'horizontal',
                        left: 'center',
                        top: 'top',
                        inRange: {
                            color: ['blue', 'green']
                        }
                    },
                    series: [{
                        name: 'Adoption Rate',
                        type: 'heatmap',
                        data: heatmapData,
                        label: {
                            show: true
                        },
                        emphasis: {
                            itemStyle: {
                                borderColor: '#333',
                                borderWidth: 1
                            }
                        }
                    }]
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);
            })
            .catch(error => console.error('Error fetching the data:', error));
    </script>
</body>
</html>
```",Correct,768,769
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Stacked Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n');
                const categories = [];
                const seriesData = {};

                lines.forEach((line, index) => {
                    if (index === 0) return; // skip header
                    const [year, techType, adoptionRate] = line.split(',');
                    if (!categories.includes(year)) categories.push(year);
                    if (!seriesData[techType]) seriesData[techType] = new Array(categories.length).fill(0);
                    const yearIndex = categories.indexOf(year);
                    seriesData[techType][yearIndex] += parseFloat(adoptionRate);
                });

                const series = Object.keys(seriesData).map(techType => ({
                    name: techType,
                    type: 'bar',
                    stack: 'total',
                    data: seriesData[techType],
                }));

                const option = {
                    tooltip: {
                        trigger: 'item',
                    },
                    legend: {
                        data: Object.keys(seriesData),
                    },
                    xAxis: {
                        type: 'category',
                        data: categories,
                    },
                    yAxis: {
                        type: 'value',
                    },
                    series: series,
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);
            })
            .catch(error => console.error('Error fetching the data:', error));
    </script>
</body>
</html>
```",Correct,769,770
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Horizontal Bar Chart that visualizes the Adoption Rate for each Technology Type in 2020.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Rate in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const adoptionData = rows.map(row => {
                    const cols = row.split(',');
                    return {
                        year: cols[0],
                        technologyType: cols[1],
                        adoptionRate: parseFloat(cols[2])
                    };
                }).filter(item => item.year === '2020');

                const technologyTypes = adoptionData.map(item => item.technologyType);
                const adoptionRates = adoptionData.map(item => item.adoptionRate);

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    title: {
                        text: 'Adoption Rate of Technology Types in 2020',
                        subtext: 'Source: Technology Adoption Dataset',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Adoption Rate (%)'
                    },
                    yAxis: {
                        type: 'category',
                        data: technologyTypes
                    },
                    series: [{
                        name: 'Adoption Rate',
                        type: 'bar',
                        data: adoptionRates,
                        itemStyle: {
                            color: '#4cabce'
                        }
                    }]
                };

                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,770,771
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Scatterplot that visualizes the relationship between Adoption Rate and Investment.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Adoption Rate vs Investment</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.7.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script type=""text/javascript"">
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Adoption Rate"",
                    ""type"": ""quantitative"",
                    ""title"": ""Adoption Rate""
                },
                ""y"": {
                    ""field"": ""Investment"",
                    ""type"": ""quantitative"",
                    ""title"": ""Investment""
                },
                ""tooltip"": [
                    {""field"": ""Year"", ""type"": ""ordinal""},
                    {""field"": ""Technology Type"", ""type"": ""nominal""},
                    {""field"": ""Adoption Rate"", ""type"": ""quantitative""},
                    {""field"": ""Investment"", ""type"": ""quantitative""}
                ]
            }
        };

        vegaEmbed('#vis', spec).then(result => {
            // Successfully embedded the visualization
        }).catch(console.error);
    </script>
</body>
</html>
```",Correct,771,772
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Line Chart that visualizes the trend of Adoption Rate over the Year for each Technology Type.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Rate Over Years</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.24.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.9.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""title"": ""Adoption Rate Trend Over Years by Technology Type"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Year"",
                    ""type"": ""temporal"",
                    ""title"": ""Year""
                },
                ""y"": {
                    ""field"": ""Adoption Rate"",
                    ""type"": ""quantitative"",
                    ""title"": ""Adoption Rate""
                },
                ""color"": {
                    ""field"": ""Technology Type"",
                    ""type"": ""nominal"",
                    ""title"": ""Technology Type""
                }
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            // Visualization created successfully
        }).catch(console.error);
    </script>
</body>
</html>
```",Correct,772,773
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Bar Chart that visualizes the Adoption Rate for each Technology Type in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Rate in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Year === '2020'""
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Technology Type"",
                    ""type"": ""nominal"",
                    ""axis"": {""labelAngle"": -45}
                },
                ""y"": {
                    ""field"": ""Adoption Rate"",
                    ""type"": ""quantitative"",
                    ""title"": ""Adoption Rate (%)""
                },
                ""color"": {
                    ""field"": ""Technology Type"",
                    ""type"": ""nominal""
                }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Correct,773,774
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Pie Chart that visualizes the proportion of Adoption Rate contributed by each Technology Type in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Pie Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A pie chart showing the Adoption Rate contributed by each Technology Type in 2020."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Year === 2020""
                }
            ],
            ""mark"": ""arc"",
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Adoption Rate"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Technology Type"",
                    ""type"": ""nominal""
                },
                ""tooltip"": [
                    {""field"": ""Technology Type"", ""type"": ""nominal""},
                    {""field"": ""Adoption Rate"", ""type"": ""quantitative""}
                ]
            }
        };

        vegaEmbed('#vis', spec)
            .then(result => {
                // Successfully embedded
            })
            .catch(console.error);
    </script>
</body>
</html>
```",Unexpected Initial Result,774,775
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Donut Chart that visualizes the distribution of Adoption Rate among Technology Type in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2.6.14""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.6.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script type=""text/javascript"">
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A donut chart showing the distribution of Adoption Rate among Technology Types in 2020."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Year == 2020""
                }
            ],
            ""mark"": {
                ""type"": ""arc"",
                ""innerRadius"": 50
            },
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Adoption Rate"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Technology Type"",
                    ""type"": ""nominal""
                }
            }
        };

        vegaEmbed('#vis', spec).then(result => {
        }).catch(console.error);
    </script>
</body>
</html>
```",Correct,775,776
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Coxcomb Chart(polar area chart) to compare the Adoption Rate of different Technology Type in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coxcomb Chart for Technology Adoption Rate in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.0.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Year == 2020""
                }
            ],
            ""layer"": [
                {
                    ""mark"": {
                        ""type"": ""arc"",
                        ""innerRadius"": 30,
                        ""outerRadius"": 100
                    },
                    ""encoding"": {
                        ""theta"": {
                            ""field"": ""Adoption Rate"",
                            ""type"": ""quantitative"",
                            ""stack"": true
                        },
                        ""color"": {
                            ""field"": ""Technology Type"",
                            ""type"": ""nominal"",
                            ""scale"": {
                                ""scheme"": ""category10""
                            }
                        },
                        ""tooltip"": [
                            {""field"": ""Technology Type"", ""type"": ""nominal""},
                            {""field"": ""Adoption Rate"", ""type"": ""quantitative""}
                        ]
                    }
                },
                {
                    ""mark"": {
                        ""type"": ""arc"",
                        ""innerRadius"": 0,
                        ""outerRadius"": 30
                    },
                    ""encoding"": {
                        ""theta"": {
                            ""field"": ""Adoption Rate"",
                            ""type"": ""quantitative"",
                            ""stack"": true
                        },
                        ""color"": {
                            ""field"": ""Technology Type"",
                            ""type"": ""nominal"",
                            ""scale"": {
                                ""scheme"": ""category10""
                            }
                        }
                    }
                }
            ]
        };

        vegaEmbed('#vis', spec).then(function(result) {
            // Access the Vega view instance as result.view
        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Initial Result,776,777
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Radar Chart to compare the Adoption Rate of different Technology Type in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Radar Chart of Technology Adoption Rate in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/d3@7""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
                ""format"": { ""type"": ""csv"" }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Year === '2020'""
                }
            ],
            ""mark"": ""line"",
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Technology Type"",
                    ""type"": ""ordinal"",
                    ""axis"": { ""title"": ""Technology Type"" }
                },
                ""radius"": {
                    ""field"": ""Adoption Rate"",
                    ""type"": ""quantitative"",
                    ""axis"": { ""title"": ""Adoption Rate"" }
                },
                ""color"": {
                    ""field"": ""Technology Type"",
                    ""type"": ""nominal"",
                }
            },
            ""view"": {
                ""stroke"": null
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Unexpected Initial Result,777,778
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Streamgraph that visualizes the changes of Adoption Rate over the Year for each Technology Type.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Streamgraph</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""Streamgraph of Technology Adoption Rates over Years."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""area"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Year"",
                    ""type"": ""temporal"",
                    ""title"": ""Year""
                },
                ""y"": {
                    ""field"": ""Adoption Rate"",
                    ""type"": ""quantitative"",
                    ""title"": ""Adoption Rate""
                },
                ""color"": {
                    ""field"": ""Technology Type"",
                    ""type"": ""nominal"",
                    ""title"": ""Technology Type""
                },
                ""order"": {
                    ""field"": ""Adoption Rate"",
                    ""sort"": ""descending""
                }
            },
            ""transform"": [
                {
                    ""calculate"": ""datum['Adoption Rate'] * 100"",
                    ""as"": ""Adoption Rate""
                }
            ]
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Unexpected Initial Result,778,779
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Slopegraph to compare the Adoption Rate between 2019 and 2020 for each Technology Type.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Slopegraph of Technology Adoption Rate (2019 vs 2020)</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.0.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""field"": ""Year"",
                        ""oneOf"": [""2019"", ""2020""]
                    }
                },
                {
                    ""calculate"": ""datum.Year + ' ' + datum['Technology Type']"",
                    ""as"": ""Technology""
                }
            ],
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Adoption Rate"",
                    ""type"": ""quantitative"",
                    ""axis"": {
                        ""title"": ""Adoption Rate""
                    }
                },
                ""y"": {
                    ""field"": ""Technology"",
                    ""type"": ""ordinal"",
                    ""axis"": {
                        ""title"": ""Technology Type""
                    }
                },
                ""color"": {
                    ""field"": ""Year"",
                    ""type"": ""nominal"",
                    ""scale"": {
                        ""domain"": [""2019"", ""2020""],
                        ""range"": [""#1f77b4"", ""#ff7f0e""]
                    }
                }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Correct,779,780
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Heatmap that visualizes the Adoption Rate across Technology Type and Years.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Heatmap</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.4.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""rect"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Year"",
                    ""type"": ""ordinal"",
                    ""title"": ""Year""
                },
                ""y"": {
                    ""field"": ""Technology Type"",
                    ""type"": ""ordinal"",
                    ""title"": ""Technology Type""
                },
                ""color"": {
                    ""field"": ""Adoption Rate"",
                    ""type"": ""quantitative"",
                    ""title"": ""Adoption Rate"",
                    ""scale"": {
                        ""scheme"": ""blues""
                    }
                }
            },
            ""width"": 600,
            ""height"": 400
        };

        vegaEmbed('#vis', spec).then(function(result) {
            // Access the Vega view instance as `result.view`
        }).catch(console.error);
    </script>
</body>
</html>
```",Correct,780,781
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Stacked Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Year"",
                    ""type"": ""ordinal"",
                    ""axis"": {
                        ""title"": ""Year""
                    }
                },
                ""y"": {
                    ""aggregate"": ""sum"",
                    ""field"": ""Adoption Rate"",
                    ""type"": ""quantitative"",
                    ""axis"": {
                        ""title"": ""Adoption Rate""
                    }
                },
                ""color"": {
                    ""field"": ""Technology Type"",
                    ""type"": ""nominal"",
                    ""scale"": {
                        ""domain"": [
                            ""AI"",
                            ""IoT"",
                            ""Blockchain"",
                            ""Cloud Computing"",
                            ""Big Data""
                        ]
                    },
                    ""legend"": {
                        ""title"": ""Technology Type""
                    }
                }
            },
            ""title"": {
                ""text"": ""Technology Adoption Over Years"",
                ""fontSize"": 20
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Correct,781,782
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score
Your task is to create a Horizontal Bar Chart that visualizes the Adoption Rate for each Technology Type in 2020.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv

The data table contains the following columns: Year,Technology Type,Adoption Rate,Investment,Return on Investment,Number of Users,Market Share,Customer Satisfaction Score",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Technology Adoption Rate in 2020</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
          ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
          ""description"": ""A horizontal bar chart showing Adoption Rate for each Technology Type in 2020."",
          ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/8729038f70c9d0e839a3b65ffafd7cc6/raw/05448a679e012033b12b752057ad475e800f6d77/Technology%2520Adoption.csv"",
            ""format"": {
              ""type"": ""csv""
            }
          },
          ""transform"": [
            {
              ""filter"": ""datum.Year == 2020""
            }
          ],
          ""mark"": ""bar"",
          ""encoding"": {
            ""y"": {
              ""field"": ""Technology Type"",
              ""type"": ""nominal"",
              ""sort"": ""-x""
            },
            ""x"": {
              ""field"": ""Adoption Rate"",
              ""type"": ""quantitative""
            }
          }
        };
        
        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Correct,782,783
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot that visualizes the relationship between Visitors and Page Views. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Visitors vs Page Views Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .tooltip {
            position: absolute;
            text-align: center;
            width: 60px;
            padding: 4px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);
        
        const x = d3.scaleLinear().range([0, width]),
              y = d3.scaleLinear().range([height, 0]);

        const tooltip = d3.select(""body"").append(""div"").attr(""class"", ""tooltip"").style(""opacity"", 0);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
            data.forEach(d => {
                d.Visitors = +d.Visitors;
                d['Page Views'] = +d['Page Views'];
            });

            x.domain(d3.extent(data, d => d.Visitors)).nice();
            y.domain(d3.extent(data, d => d['Page Views'])).nice();

            g.append(""g"")
             .attr(""transform"", `translate(0,${height})`)
             .call(d3.axisBottom(x));

            g.append(""g"")
             .call(d3.axisLeft(y));

            g.selectAll(""dot"")
             .data(data)
             .enter().append(""circle"")
             .attr(""cx"", d => x(d.Visitors))
             .attr(""cy"", d => y(d['Page Views']))
             .attr(""r"", 3)
             .style(""fill"", ""#69b3a2"")
             .on(""mouseover"", (event, d) => {
                 tooltip.transition().duration(200).style(""opacity"", .9);
                 tooltip.html(`Visitors: ${d.Visitors}<br>Page Views: ${d['Page Views']}`)
                        .style(""left"", (event.pageX + 5) + ""px"")
                        .style(""top"", (event.pageY - 28) + ""px"");
             })
             .on(""mouseout"", () => {
                 tooltip.transition().duration(500).style(""opacity"", 0);
             });
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,783,784
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot that visualizes the relationship between Visitors and Page Views. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot with D3</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatterplot {
            border: 1px solid #ccc;
            margin: 20px;
        }
        .point {
            fill: steelblue;
            stroke: white;
            stroke-width: 1.5px;
        }
        .selected {
            fill: orange;
        }
    </style>
</head>
<body>

<svg class=""scatterplot"" width=""800"" height=""600""></svg>

<script>
    const margin = {top: 20, right: 30, bottom: 30, left: 40},
          width = 800 - margin.left - margin.right,
          height = 600 - margin.top - margin.bottom;
    
    const svg = d3.select("".scatterplot"")
                  .append(""g"")
                  .attr(""transform"", `translate(${margin.left},${margin.top})`);
    
    const x = d3.scaleLinear().range([0, width]);
    const y = d3.scaleLinear().range([height, 0]);

    const brush = d3.brush()
                    .on(""start brush"", brushed);

    svg.append(""g"")
       .attr(""class"", ""brush"")
       .call(brush);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
        
        data.forEach(d => {
            d[""Visitors""] = +d[""Visitors""];
            d[""Page Views""] = +d[""Page Views""];
        });

        x.domain(d3.extent(data, d => d[""Visitors""])).nice();
        y.domain(d3.extent(data, d => d[""Page Views""])).nice();

        svg.append(""g"")
           .attr(""class"", ""x-axis"")
           .attr(""transform"", `translate(0,${height})`)
           .call(d3.axisBottom(x));
        
        svg.append(""g"")
           .attr(""class"", ""y-axis"")
           .call(d3.axisLeft(y));

        const points = svg.selectAll("".point"")
                          .data(data)
                          .enter().append(""circle"")
                          .attr(""class"", ""point"")
                          .attr(""cx"", d => x(d[""Visitors""]))
                          .attr(""cy"", d => y(d[""Page Views""]))
                          .attr(""r"", 5);

        function brushed(event) {
            const selection = event.selection;
            if (selection) {
                const [[x0, y0], [x1, y1]] = selection;
                points.classed(""selected"", d => {
                    const cx = x(d[""Visitors""]);
                    const cy = y(d[""Page Views""]);
                    return cx >= x0 && cx <= x1 && cy >= y0 && cy <= y1;
                });
            }
        }
    });
</script>

</body>
</html>
```",Initialization Error,784,785
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot that visualizes the relationship between Visitors and Page Views. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Visitors vs Page Views</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter {
            fill: steelblue;
            stroke: black;
            stroke-width: 1px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
            data.forEach(d => {
                d.Visitors = +d[""Visitors""];
                d[""Page Views""] = +d[""Page Views""];
            });

            const x = d3.scaleLinear()
                .domain(d3.extent(data, d => d.Visitors)).nice()
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Page Views""])]).nice()
                .range([height, 0]);

            const xAxis = g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            const yAxis = g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            g.selectAll("".scatter"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""scatter"")
                .attr(""cx"", d => x(d.Visitors))
                .attr(""cy"", d => y(d[""Page Views""]))
                .attr(""r"", 5);

            // Zoom functionality
            const zoom = d3.zoom()
                .scaleExtent([1, 10])
                .translateExtent([[0, 0], [width, height]])
                .on(""zoom"", zoomed);

            svg.call(zoom);

            function zoomed(event) {
                const transform = event.transform;
                const newX = transform.rescaleX(x);
                const newY = transform.rescaleY(y);

                xAxis.call(d3.axisBottom(newX));
                yAxis.call(d3.axisLeft(newY));

                g.selectAll("".scatter"")
                    .attr(""cx"", d => newX(d.Visitors))
                    .attr(""cy"", d => newY(d[""Page Views""]));
            }
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,785,786
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Visitors and Page Views. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot Visualization</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
            data.forEach(d => {
                d.Visitors = +d[""Visitors""];
                d[""Page Views""] = +d[""Page Views""];
            });

            const x = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.Visitors)]).nice()
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Page Views""])]).nice()
                .range([height, 0]);

            g.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .call(d3.axisLeft(y));

            const tooltip = d3.select(""body"").append(""div"").attr(""class"", ""tooltip"").style(""opacity"", 0);

            g.selectAll(""dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => x(d.Visitors))
                .attr(""cy"", d => y(d[""Page Views""]))
                .attr(""r"", 5)
                .attr(""fill"", ""blue"")
                .on(""mouseover"", function (event, d) {
                    tooltip.transition().duration(200).style(""opacity"", .9);
                    tooltip.html(`Visitors: ${d.Visitors}<br>Page Views: ${d[""Page Views""]}`)
                        .style(""left"", (event.pageX + 5) + ""px"")
                        .style(""top"", (event.pageY - 28) + ""px"");
                })
                .on(""mouseout"", function () {
                    tooltip.transition().duration(500).style(""opacity"", 0);
                })
                .on(""click"", function (event, d) {
                    window.open(`https://www.google.com/search?q=${d[""Traffic Source""]}`, ""_blank"");
                });
        });
    </script>
</body>
</html>
```",Correct,786,787
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot with query widgets showing the Visitors and Page Views of the given dataset. Add a slider to represent the Week.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Visitors and Page Views Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        #scatterplot {
            width: 800px;
            height: 400px;
        }
    </style>
</head>
<body>
    <h1>Visitors vs Page Views Scatterplot</h1>
    <input type=""range"" id=""week-slider"" min=""1"" max=""52"" value=""1"" step=""1"" />
    <label for=""week-slider"">Week: <span id=""week-label"">1</span></label>
    <svg id=""scatterplot""></svg>
    <script>
        const svg = d3.select(""#scatterplot""),
            margin = {top: 20, right: 30, bottom: 30, left: 40},
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom,
            g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        let dataset;

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
            dataset = data.map(d => ({
                Week: +d.Week,
                Visitors: +d[""Visitors""],
                ""Page Views"": +d[""Page Views""]
            }));
            updateChart(1);
        });

        function updateChart(week) {
            const filteredData = dataset.filter(d => d.Week === week);

            g.selectAll(""*"").remove();

            const x = d3.scaleLinear()
                .domain([0, d3.max(filteredData, d => d[""Page Views""])])
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(filteredData, d => d.Visitors)])
                .range([height, 0]);

            g.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .call(d3.axisLeft(y));

            g.selectAll(""dot"")
                .data(filteredData)
                .enter().append(""circle"")
                .attr(""cx"", d => x(d[""Page Views""]))
                .attr(""cy"", d => y(d.Visitors))
                .attr(""r"", 5)
                .style(""fill"", ""#69b3a2"");
        }

        d3.select(""#week-slider"").on(""input"", function() {
            const value = +this.value;
            d3.select(""#week-label"").text(value);
            updateChart(value);
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,787,788
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot showing the Visitors of Social Media. Add animated transitions that connect these points using lines in order.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Visitors from Social Media</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatterplot {
            display: block;
            margin: auto;
            border: 1px solid #ccc;
        }
        circle {
            fill: steelblue;
            transition: fill 0.3s;
        }
        circle:hover {
            fill: orange;
        }
    </style>
</head>
<body>
    <svg class=""scatterplot"" width=""800"" height=""600""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = { top: 20, right: 30, bottom: 30, left: 40 };
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
            data = data.filter(d => d[""Traffic Source""] === ""Social Media"").map(d => ({
                Week: d[""Week""],
                Visitors: +d[""Visitors""],
                Page Views: +d[""Page Views""],
                ""Bounce Rate"": +d[""Bounce Rate""],
                ""Average Session Duration"": +d[""Average Session Duration""],
                ""Conversion Rate"": +d[""Conversion Rate""],
                Region: d[""Region""],
                ""Device Type"": d[""Device Type""]
            }));

            const x = d3.scaleLinear()
                .domain(d3.extent(data, d => d.Visitors))
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Page Views""])])
                .range([height, 0]);

            g.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .call(d3.axisLeft(y));

            const line = d3.line()
                .x(d => x(d.Visitors))
                .y(d => y(d[""Page Views""]));

            g.append(""path"")
                .datum(data)
                .attr(""fill"", ""none"")
                .attr(""stroke"", ""steelblue"")
                .attr(""stroke-width"", 1.5)
                .attr(""d"", line);

            const circles = g.selectAll(""circle"")
                .data(data)
                .enter().append(""circle"")
                .attr(""cx"", d => x(d.Visitors))
                .attr(""cy"", d => y(d[""Page Views""]))
                .attr(""r"", 5);

            circles.transition()
                .duration(2000)
                .attr(""r"", 8)
                .transition()
                .duration(2000)
                .attr(""r"", 5);
        });
    </script>
</body>
</html>
```",Initialization Error,788,789
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Visitors of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Visitors Line Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke-width: 2;
        }
        .highlight {
            stroke-width: 4;
        }
        .tooltip {
            position: absolute;
            text-align: center;
            width: auto;
            padding: 5px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    
    <script>
        const svg = d3.select(""svg""),
            margin = {top: 20, right: 30, bottom: 30, left: 40},
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom;
        
        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
            const allVisitors = [];

            data.forEach(d => {
                d.Visitors = +d.Visitors; // Convert Visitors to number
                const source = d['Traffic Source'];
                if (!allVisitors[source]) allVisitors[source] = [];
                allVisitors[source].push({ week: d.Week, visitors: d.Visitors });
            });

            const colors = d3.scaleOrdinal(d3.schemeCategory10);
            const x = d3.scalePoint().range([0, width]).padding(0.5).domain(data.map(d => d.Week));
            const y = d3.scaleLinear().range([height, 0]).domain([0, d3.max(data, d => d.Visitors)]);

            const line = d3.line()
                .x(d => x(d.week))
                .y(d => y(d.visitors));

            const sources = Object.keys(allVisitors);
            
            const linesGroup = g.selectAll("".line-group"")
                .data(sources)
                .enter().append(""g"")
                .attr(""class"", ""line-group"");

            linesGroup.append(""path"")
                .attr(""class"", ""line"")
                .style(""stroke"", (d, i) => colors(i))
                .attr(""d"", d => line(allVisitors[d]))
                .on(""mouseover"", function() {
                    d3.select(this).classed(""highlight"", true);
                })
                .on(""mouseout"", function() {
                    d3.select(this).classed(""highlight"", false);
                });

            g.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));
        
            g.append(""g"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Correct,789,790
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Bar Chart that visualizes the Visitors for each Traffic Source in 2021-W01. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Bar Chart Visitors by Traffic Source</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path,
        .axis--x line {
            display: none;
        }
    </style>
</head>
<body>

<svg width=""960"" height=""500""></svg>

<script>
    const svg = d3.select(""svg"");
    const margin = {top: 20, right: 30, bottom: 40, left: 40};
    const width = +svg.attr(""width"") - margin.left - margin.right;
    const height = +svg.attr(""height"") - margin.top - margin.bottom;
    const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
        const filteredData = data.filter(d => d.Week === ""2021-W01"");
        filteredData.forEach(d => {
            d.Visitors = +d[""Visitors""];
        });

        const x = d3.scaleBand()
            .domain(filteredData.map(d => d[""Traffic Source""]))
            .range([0, width])
            .padding(0.1);

        const y = d3.scaleLinear()
            .domain([0, d3.max(filteredData, d => d.Visitors)])
            .nice()
            .range([height, 0]);

        g.append(""g"")
            .selectAll("".bar"")
            .data(filteredData)
            .enter().append(""rect"")
            .attr(""class"", ""bar"")
            .attr(""x"", d => x(d[""Traffic Source""]))
            .attr(""y"", d => y(d.Visitors))
            .attr(""width"", x.bandwidth())
            .attr(""height"", d => height - y(d.Visitors));

        g.append(""g"")
            .attr(""class"", ""axis axis--x"")
            .attr(""transform"", `translate(0,${height})`)
            .call(d3.axisBottom(x));

        g.append(""g"")
            .attr(""class"", ""axis axis--y"")
            .call(d3.axisLeft(y));

        const zoom = d3.zoom()
            .scaleExtent([0.5, 10])
            .on(""zoom"", (event) => {
                g.attr(""transform"", event.transform);
            });

        svg.call(zoom);
    });
</script>

</body>
</html>
```",Correct,790,791
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Bar Chart that visualizes the Visitors for each Traffic Source in 2021-W01. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Visitors by Traffic Source in 2021-W01</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path {
            display: none;
        }
        .axis--x line {
            stroke: #ccc;
        }
        .axis--y line {
            stroke: #ccc;
        }
        .axis--y .tick line {
            stroke: #ccc;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>

    <script>
        const svg = d3.select(""svg""),
            margin = { top: 20, right: 30, bottom: 70, left: 40 },
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
            data = data.filter(d => d.Week === ""2021-W01"");
            data.forEach(d => {
                d['Visitors'] = +d['Visitors'];
            });

            const x = d3.scaleBand()
                .domain(data.map(d => d['Traffic Source']))
                .range([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Visitors'])])
                .range([height, 0]);

            g.append(""g"")
                .selectAll("".bar"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => x(d['Traffic Source']))
                .attr(""y"", d => y(d['Visitors']))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d['Visitors']))
                .call(d3.drag()
                    .on(""start"", dragstarted)
                    .on(""drag"", dragged)
                    .on(""end"", dragended));

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            function dragstarted(event) {
                d3.select(this).raise().classed(""active"", true);
            }

            function dragged(event) {
                const rect = d3.select(this);
                const index = rect.data()[0]['Traffic Source'];
                
                const yPos = Math.max(0, Math.min(height, event.y));
                rect.attr(""y"", yPos).attr(""height"", height - yPos);
    
                const newIndex = Math.round(yPos / (height / data.length));
                if (newIndex >= 0 && newIndex < data.length) {
                    const temp = data[newIndex];
                    data[newIndex] = data[index];
                    data[index] = temp;
                }
                updateBars();
            }

            function dragended(event) {
                d3.select(this).classed(""active"", false);
            }

            function updateBars() {
                const bars = g.selectAll("".bar"")
                    .data(data, d => d['Traffic Source']);

                bars.transition()
                    .duration(200)
                    .attr(""y"", d => y(d['Visitors']))
                    .attr(""height"", d => height - y(d['Visitors']))
                    .attr(""x"", d => x(d['Traffic Source']));

                bars.enter().append(""rect"")
                    .attr(""class"", ""bar"")
                    .attr(""x"", d => x(d['Traffic Source']))
                    .attr(""width"", x.bandwidth())
                    .attr(""y"", d => y(d['Visitors']))
                    .attr(""height"", d => height - y(d['Visitors']))
                    .call(d3.drag()
                        .on(""start"", dragstarted)
                        .on(""drag"", dragged)
                        .on(""end"", dragended))
                    .merge(bars);

                bars.exit().remove();
            }
        });
    </script>
</body>
</html>
```",Execution Error,791,792
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Bar Chart that visualizes the Visitors for each Traffic Source in 2021-W01. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Visitors.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Website Traffic Bar Chart</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }

        .bar:hover {
            fill: orange;
        }

        .axis--x path,
        .axis--x line {
            display: none;
        }
    </style>
</head>
<body>
    <select id=""sortOrder"">
        <option value=""ascending"">Ascending</option>
        <option value=""descending"">Descending</option>
    </select>
    <svg width=""800"" height=""400""></svg>
    
    <script>
        const svg = d3.select(""svg""),
            margin = {top: 20, right: 30, bottom: 40, left: 40},
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom;

        const x = d3.scaleBand().range([0, width]).padding(0.1);
        const y = d3.scaleLinear().range([height, 0]);

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
            const filteredData = data.filter(d => d.Week === ""2021-W01"");
            filteredData.forEach(d => d[""Visitors""] = +d[""Visitors""]);

            function updateChart(order) {
                const sortedData = filteredData.sort((a, b) => order === ""ascending"" ? a[""Visitors""] - b[""Visitors""] : b[""Visitors""] - a[""Visitors""]);
                x.domain(sortedData.map(d => d[""Traffic Source""]));
                y.domain([0, d3.max(sortedData, d => d[""Visitors""])]);

                g.selectAll("".bar"").remove();
                g.selectAll("".axis"").remove();

                const bars = g.selectAll("".bar"")
                    .data(sortedData)
                    .enter().append(""rect"")
                    .attr(""class"", ""bar"")
                    .attr(""x"", d => x(d[""Traffic Source""]))
                    .attr(""y"", height)
                    .attr(""width"", x.bandwidth())
                    .transition()
                    .duration(800)
                    .attr(""y"", d => y(d[""Visitors""]))
                    .attr(""height"", d => height - y(d[""Visitors""]));

                g.append(""g"")
                    .attr(""class"", ""axis axis--x"")
                    .attr(""transform"", `translate(0,${height})`)
                    .call(d3.axisBottom(x));

                g.append(""g"")
                    .attr(""class"", ""axis axis--y"")
                    .call(d3.axisLeft(y));
            }

            updateChart(""ascending"");

            d3.select(""#sortOrder"").on(""change"", function(event) {
                const selectedOrder = d3.select(this).property(""value"");
                updateChart(selectedOrder);
            });
        });
    </script>
</body>
</html>
```",Correct,792,793
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot that visualizes the relationship between Visitors and Page Views. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot - Visitors vs Page Views</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const visitors = [];
                const pageViews = [];

                rows.forEach(row => {
                    const cols = row.split(',');
                    if (cols.length > 1) {
                        visitors.push(parseInt(cols[2]));
                        pageViews.push(parseInt(cols[3]));
                    }
                });

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);

                const option = {
                    tooltip: {
                        trigger: 'item',
                        formatter: function(params) {
                            return `Visitors: ${params.data[0]}<br/>Page Views: ${params.data[1]}`;
                        }
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Visitors'
                    },
                    yAxis: {
                        type: 'value',
                        name: 'Page Views'
                    },
                    series: [{
                        symbolSize: 10,
                        data: visitors.map((v, i) => [v, pageViews[i]]),
                        type: 'scatter'
                    }]
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,793,794
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot that visualizes the relationship between Visitors and Page Views. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>

    <script>
        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv');
            const data = await response.text();
            return data.split('\n').slice(1).map(row => {
                const cols = row.split(',');
                return {
                    Visitors: +cols[2],
                    PageViews: +cols[3]
                };
            });
        }

        async function initChart() {
            const data = await fetchData();
            const visitors = data.map(item => item.Visitors);
            const pageViews = data.map(item => item.PageViews);
            
            const myChart = echarts.init(document.getElementById('main'));
            const option = {
                tooltip: {
                    trigger: 'item',
                    formatter: function (params) {
                        return `Visitors: ${params.data[0]}<br />Page Views: ${params.data[1]}`;
                    }
                },
                xAxis: {
                    type: 'value',
                    name: 'Visitors'
                },
                yAxis: {
                    type: 'value',
                    name: 'Page Views'
                },
                series: [{
                    type: 'scatter',
                    data: data.map(item => [item.Visitors, item.PageViews]),
                    symbolSize: 10,
                    itemStyle: {
                        color: '#5470C6'
                    }
                }],
                brush: {
                    outOfBrush: {
                        color: '#f5f5f5'
                    },
                    brushStyle: {
                        stroke: 'rgba(0, 0, 0, 0.5)',
                        fill: 'rgba(0, 0, 0, 0.2)'
                    },
                    seriesIndex: [0]
                }
            };

            myChart.setOption(option);

            myChart.on('brushSelected', function (params) {
                const selectedPoints = [];
                const brushComponent = params.batch[0];
                const selectedData = brushComponent.selected[0].dataIndex;

                selectedData.forEach(index => {
                    selectedPoints.push(data[index]);
                });

                console.log('Selected Data Points:', selectedPoints);
            });
        }

        initChart();
    </script>
</body>
</html>
```",Correct,794,795
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot that visualizes the relationship between Visitors and Page Views. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Visitors vs Page Views</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const visitors = [];
                const pageViews = [];

                rows.forEach(row => {
                    const cols = row.split(',');
                    if (cols.length >= 4) {
                        visitors.push(parseInt(cols[2])); // Visitors
                        pageViews.push(parseInt(cols[3])); // Page Views
                    }
                });

                const scatterData = visitors.map((v, i) => [v, pageViews[i]]);

                const chart = echarts.init(document.getElementById('main'));
                const option = {
                    title: {
                        text: 'Scatterplot of Visitors vs Page Views'
                    },
                    tooltip: {},
                    xAxis: {
                        name: 'Visitors',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Page Views',
                        type: 'value'
                    },
                    series: [{
                        name: 'Data',
                        type: 'scatter',
                        data: scatterData,
                        symbolSize: 10,
                    }]
                };

                chart.setOption(option);

                // Enable zooming using mouse wheel
                chart.on('datazoom', function (params) {
                    chart.dispatchAction({
                        type: 'dataZoom',
                        start: params.batch[0].start,
                        end: params.batch[0].end
                    });
                });

                // Add zoom functionality
                chart.dispatchAction({
                    type: 'dataZoom',
                    start: 0,
                    end: 100
                });
            });
    </script>
</body>
</html>
```",Execution Error,795,796
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Visitors and Page Views. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,interactive view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Scatterplot of Visitors vs Page Views</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        // Fetch the CSV data
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const visitors = [];
                const pageViews = [];
                const points = [];

                rows.forEach(row => {
                    const cols = row.split(',');
                    if (cols.length >= 4) {
                        const visitorsValue = parseInt(cols[2]);
                        const pageViewsValue = parseInt(cols[3]);
                        visitors.push(visitorsValue);
                        pageViews.push(pageViewsValue);
                        points.push({
                            visitors: visitorsValue,
                            pageViews: pageViewsValue,
                            tooltipInfo: `Week: ${cols[0]}<br>Source: ${cols[1]}<br>Region: ${cols[6]}<br>Device: ${cols[7]}`
                        });
                    }
                });

                const myChart = echarts.init(document.getElementById('main'));

                const option = {
                    tooltip: {
                        trigger: 'item',
                        formatter: function (params) {
                            return params.data.tooltipInfo;
                        }
                    },
                    xAxis: {
                        name: 'Visitors',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Page Views',
                        type: 'value'
                    },
                    series: [{
                        symbolSize: 10,
                        data: points.map(point => [point.visitors, point.pageViews, point]),
                        type: 'scatter'
                    }]
                };

                myChart.setOption(option);

                myChart.on('click', function (params) {
                    const dataIndex = params.dataIndex;
                    const point = points[dataIndex];
                    if (point) {
                        const searchQuery = `${point.visitors} visitors, ${point.pageViews} page views`;
                        window.open(`https://www.google.com/search?q=${encodeURIComponent(searchQuery)}`, '_blank');
                    }
                });
            });
    </script>
</body>
</html>
```",Correct,796,797
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot with query widgets showing the Visitors and Page Views of the given dataset. Add a slider to represent the Week.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Website Traffic Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 600px;
        }
        #weekSlider {
            width: 100%;
        }
    </style>
</head>
<body>
    <input type=""range"" id=""weekSlider"" min=""0"" max=""51"" value=""0"" step=""1"">
    <div id=""main""></div>

    <script>
        const url = 'https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv';

        fetch(url)
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const weeks = {};
                lines.forEach(line => {
                    const [week, source, visitors, pageViews] = line.split(',');
                    if (!weeks[week]) {
                        weeks[week] = { visitors: 0, pageViews: 0 };
                    }
                    weeks[week].visitors += parseInt(visitors);
                    weeks[week].pageViews += parseInt(pageViews);
                });

                const weeksArray = Object.keys(weeks).map(week => ({
                    week: week,
                    visitors: weeks[week].visitors,
                    pageViews: weeks[week].pageViews
                }));

                const myChart = echarts.init(document.getElementById('main'));

                function updateChart(weekIndex) {
                    const selectedWeek = weeksArray[weekIndex];
                    const option = {
                        title: {
                            text: 'Visitors vs Page Views'
                        },
                        tooltip: {},
                        xAxis: {
                            name: 'Visitors',
                            type: 'value'
                        },
                        yAxis: {
                            name: 'Page Views',
                            type: 'value'
                        },
                        series: [{
                            symbolSize: 20,
                            data: [[selectedWeek.visitors, selectedWeek.pageViews]],
                            type: 'scatter'
                        }]
                    };
                    myChart.setOption(option);
                }

                document.getElementById('weekSlider').addEventListener('input', function () {
                    updateChart(this.value);
                });

                updateChart(0);
            });
    </script>
</body>
</html>
```",Correct,797,798
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot showing the Visitors of Social Media. Add animated transitions that connect these points using lines in order.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Website Traffic Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const visitorsData = [];
                rows.forEach(row => {
                    const cols = row.split(',');
                    if (cols[1] === 'Social Media') {
                        visitorsData.push({
                            week: cols[0],
                            visitors: parseInt(cols[2])
                        });
                    }
                });

                const weeks = visitorsData.map(item => item.week);
                const visitors = visitorsData.map(item => item.visitors);

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);
                const option = {
                    title: {
                        text: 'Visitors from Social Media'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    xAxis: {
                        type: 'category',
                        data: weeks
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        type: 'line',
                        data: visitors,
                        smooth: true,
                        lineStyle: {
                            width: 2
                        },
                        itemStyle: {
                            color: '#2196F3'
                        },
                        animationDuration: 1000,
                        animationEasing: 'cubicInOut'
                    }]
                };
                myChart.setOption(option);
                myChart.on('afterInit', function () {
                    myChart.setOption({
                        series: [{
                            type: 'line',
                            animationDuration: 1000,
                            animationEasing: 'cubicInOut'
                        }]
                    });
                });
            });
    </script>
</body>
</html>
```",Correct,798,799
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Visitors of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Website Traffic Visitors</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const week = [...new Set(rows.map(row => row[0]))]; 
                const sources = [...new Set(rows.map(row => row[1]))];
                
                const series = sources.map(source => {
                    return {
                        name: source,
                        type: 'line',
                        data: week.map(w => {
                            const entry = rows.find(row => row[0] === w && row[1] === source);
                            return entry ? parseInt(entry[2]) : 0;
                        }),
                        smooth: true,
                        lineStyle: {
                            width: 2
                        },
                        emphasis: {
                            lineStyle: {
                                width: 4
                            }
                        }
                    };
                });

                const option = {
                    title: {
                        text: 'Website Traffic Visitors by Source'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    legend: {
                        data: sources
                    },
                    xAxis: {
                        type: 'category',
                        data: week
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: series,
                    highlight: {
                        show: true,
                        trigger: 'item',
                    }
                };

                const myChart = echarts.init(document.getElementById('main'));
                myChart.setOption(option);
            })
            .catch(error => console.error('Error fetching the data:', error));
    </script>
</body>
</html>
```",Correct,799,800
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Bar Chart that visualizes the Visitors for each Traffic Source in 2021-W01. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Visitors by Traffic Source</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const filteredData = lines
                    .map(line => line.split(','))
                    .filter(row => row[0] === '2021-W01')
                    .reduce((acc, row) => {
                        acc[row[1]] = (acc[row[1]] || 0) + Number(row[2]);
                        return acc;
                    }, {});

                const trafficSources = Object.keys(filteredData);
                const visitors = Object.values(filteredData);

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);
                const option = {
                    title: {
                        text: 'Visitors by Traffic Source (2021-W01)',
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: trafficSources,
                    },
                    yAxis: {
                        type: 'value',
                    },
                    series: [{
                        name: 'Visitors',
                        type: 'bar',
                        data: visitors,
                    }],
                    dataZoom: [
                        {
                            type: 'inside',
                            start: 0,
                            end: 100,
                        },
                        {
                            show: true,
                            type: 'slider',
                            top: '90%',
                            start: 0,
                            end: 100,
                        }
                    ]
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,800,801
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Bar Chart that visualizes the Visitors for each Traffic Source in 2021-W01. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Visitors by Traffic Source</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 600px;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const result = {};
                
                rows.forEach(row => {
                    const columns = row.split(',');
                    const week = columns[0];
                    const trafficSource = columns[1];
                    const visitors = parseInt(columns[2]);

                    if (week === '2021-W01') {
                        if (!result[trafficSource]) {
                            result[trafficSource] = 0;
                        }
                        result[trafficSource] += visitors;
                    }
                });

                const trafficSources = Object.keys(result);
                const visitors = Object.values(result);

                const chart = echarts.init(document.getElementById('main'));

                const option = {
                    title: {
                        text: 'Visitors by Traffic Source (2021-W01)',
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: trafficSources,
                    },
                    yAxis: {
                        type: 'value',
                    },
                    series: [{
                        name: 'Visitors',
                        type: 'bar',
                        data: visitors,
                        draggable: 'true'
                    }],
                    animation: false,
                };

                chart.setOption(option);

                chart.on('mouseup', function (params) {
                    if (params.componentType === 'series') {
                        const dataIndex = params.dataIndex;
                        const dataName = params.name;
                        const newY = option.series[0].data[dataIndex];
                        if (newY !== undefined) {
                            option.series[0].data[dataIndex] = newY;
                            chart.setOption(option);
                        }
                    }
                });
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,801,802
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Bar Chart that visualizes the Visitors for each Traffic Source in 2021-W01. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Visitors.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>ECharts Example</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <select id=""sortOrder"" onchange=""updateChart()"">
        <option value=""asc"">Ascending</option>
        <option value=""desc"">Descending</option>
    </select>
    <div id=""main"" style=""width: 600px;height:400px;""></div>
    
    <script>
        const url = 'https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv';
        
        async function fetchData() {
            const response = await fetch(url);
            const text = await response.text();
            const data = text.split('\n').slice(1).map(row => row.split(','));
            return data.filter(row => row[0].trim() === '2021-W01');
        }

        let chartDom = document.getElementById('main');
        let myChart = echarts.init(chartDom);
        let option;

        async function initChart() {
            const data = await fetchData();
            const trafficSources = data.map(row => row[1]);
            const visitors = data.map(row => parseInt(row[2]));

            renderChart(trafficSources, visitors);
        }

        function renderChart(trafficSources, visitors) {
            const sortOrder = document.getElementById('sortOrder').value;
            const sortedData = trafficSources.map((source, index) => ({ source, visitors: visitors[index] }))
                .sort((a, b) => sortOrder === 'asc' ? a.visitors - b.visitors : b.visitors - a.visitors);

            const sortedSources = sortedData.map(item => item.source);
            const sortedVisitors = sortedData.map(item => item.visitors);

            option = {
                title: {
                    text: 'Visitors by Traffic Source (2021-W01)'
                },
                tooltip: {},
                xAxis: {
                    type: 'category',
                    data: sortedSources,
                },
                yAxis: {
                    type: 'value'
                },
                series: [{
                    name: 'Visitors',
                    type: 'bar',
                    data: sortedVisitors,
                    animation: {
                        duration: 500,
                        easing: 'cubicInOut'
                    },
                }]
            };

            myChart.setOption(option);
        }

        function updateChart() {
            initChart();
        }

        initChart();
    </script>
</body>
</html>
```",Correct,802,803
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot that visualizes the relationship between Visitors and Page Views. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Visitors vs Page Views</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.3.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.1""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": {
                ""type"": ""point"",
                ""tooltip"": true
            },
            ""encoding"": {
                ""x"": {
                    ""field"": ""Visitors"",
                    ""type"": ""quantitative"",
                    ""title"": ""Visitors"",
                },
                ""y"": {
                    ""field"": ""Page Views"",
                    ""type"": ""quantitative"",
                    ""title"": ""Page Views"",
                },
                ""tooltip"": [
                    {""field"": ""Visitors"", ""type"": ""quantitative""},
                    {""field"": ""Page Views"", ""type"": ""quantitative""}
                ]
            },
            ""config"": {
                ""tooltip"": {
                    ""update"": {
                        ""fill"": {""value"": ""white""},
                        ""stroke"": {""value"": ""gray""},
                        ""strokeWidth"": {""value"": 1},
                        ""opacity"": {""value"": 0.8},
                        ""cornerRadius"": {""value"": 5}
                    }
                }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Unexpected Initial Result,803,804
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot that visualizes the relationship between Visitors and Page Views. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Visitors vs Page Views</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatter plot showing the relationship between Visitors and Page Views."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Visitors"",
                    ""type"": ""quantitative"",
                    ""title"": ""Visitors""
                },
                ""y"": {
                    ""field"": ""Page Views"",
                    ""type"": ""quantitative"",
                    ""title"": ""Page Views""
                },
                ""tooltip"": [
                    {""field"": ""Week"", ""type"": ""ordinal""},
                    {""field"": ""Traffic Source"", ""type"": ""nominal""},
                    {""field"": ""Visitors"", ""type"": ""quantitative""},
                    {""field"": ""Page Views"", ""type"": ""quantitative""}
                ]
            },
            ""selection"": {
                ""brush"": {
                    ""type"": ""interval"",
                    ""encodings"": [""x"", ""y""]
                }
            },
            ""transform"": [
                {
                    ""filter"": {""selection"": ""brush""}
                }
            ]
        };

        vegaEmbed('#vis', spec).then(function(result) {
            // Access the Vega view instance:
            const view = result.view;

            // Add brush event
            view.addSignalListener('brush', function(name, value) {
                view.renderer().run();
            });
        }).catch(console.error);
    </script>
</body>
</html>
```",Execution Error,804,805
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot that visualizes the relationship between Visitors and Page Views. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Visitors vs Page Views</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.22.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.6.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.1""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatter plot showing the relationship between Visitors and Page Views."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Visitors"",
                    ""type"": ""quantitative"",
                    ""title"": ""Visitors""
                },
                ""y"": {
                    ""field"": ""Page Views"",
                    ""type"": ""quantitative"",
                    ""title"": ""Page Views""
                },
                ""tooltip"": [
                    {""field"": ""Week"", ""type"": ""nominal""},
                    {""field"": ""Traffic Source"", ""type"": ""nominal""},
                    {""field"": ""Region"", ""type"": ""nominal""},
                    {""field"": ""Device Type"", ""type"": ""nominal""}
                ]
            },
            ""config"": {
                ""view"": {
                    ""stroke"": ""transparent"",
                    ""zoom"": true
                }
            }
        };

        vegaEmbed('#vis', spec, {renderer: 'svg'}).then(result => {
            // Access the Vega view instance
            const view = result.view;
            // Implement zoom functionality
            view.on('wheel', function(event) {
                event.preventDefault();
                const zoomFactor = 0.1;
                const delta = event.deltaY > 0 ? zoomFactor : -zoomFactor;

                view.scale('x', view.scale('x').domain()).padding(delta).run();
                view.scale('y', view.scale('y').domain()).padding(delta).run();
                view.repaint();
            });
        }).catch(console.error);
    </script>
</body>
</html>
```",Execution Error,805,806
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Visitors and Page Views. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Visitors vs Page Views</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""mark"": ""circle"",
            ""encoding"": {
                ""x"": {""field"": ""Visitors"", ""type"": ""quantitative""},
                ""y"": {""field"": ""Page Views"", ""type"": ""quantitative""},
                ""tooltip"": [
                    {""field"": ""Week"", ""type"": ""ordinal""},
                    {""field"": ""Traffic Source"", ""type"": ""nominal""},
                    {""field"": ""Visitors"", ""type"": ""quantitative""},
                    {""field"": ""Page Views"", ""type"": ""quantitative""}
                ]
            },
            ""selection"": {
                ""point"": {
                    ""type"": ""single"", 
                    ""on"": ""click"", 
                    ""fields"": [""Visitors"", ""Page Views""]
                }
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            result.view.addEventListener('click', function(event) {
                const selection = result.view.data('point');
                if (selection) {
                    const query = `Visitors: ${selection.Visitors}, Page Views: ${selection['Page Views']}`;
                    window.open(`https://www.google.com/search?q=${encodeURIComponent(query)}`, '_blank');
                }
            });
        }).catch(console.error);
    </script>
</body>
</html>
```",Execution Error,806,807
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot with query widgets showing the Visitors and Page Views of the given dataset. Add a slider to represent the Week.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Website Traffic Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.8.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.19.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""Scatterplot of Visitors and Page Views with Week slider"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Week >= 1 && datum.Week <= 52""
                }
            ],
            ""width"": 600,
            ""height"": 400,
            ""layer"": [
                {
                    ""mark"": ""point"",
                    ""encoding"": {
                        ""x"": {
                            ""field"": ""Visitors"",
                            ""type"": ""quantitative"",
                            ""title"": ""Visitors""
                        },
                        ""y"": {
                            ""field"": ""Page Views"",
                            ""type"": ""quantitative"",
                            ""title"": ""Page Views""
                        },
                        ""color"": {
                            ""field"": ""Device Type"",
                            ""type"": ""nominal""
                        }
                    }
                },
                {
                    ""mark"": ""line"",
                    ""encoding"": {
                        ""x"": {
                            ""field"": ""Visitors"",
                            ""type"": ""quantitative""
                        },
                        ""y"": {
                            ""field"": ""Page Views"",
                            ""type"": ""quantitative""
                        }
                    }
                }
            ],
            ""params"": [
                {
                    ""name"": ""weekSlider"",
                    ""select"": {
                        ""type"": ""interval"",
                        ""encodings"": [""x""]
                    },
                    ""value"": [1, 52]
                }
            ],
            ""config"": {
                ""background"": ""white""
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            // Additional code to add slider behavior could be added here if needed
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,807,808
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot showing the Visitors of Social Media. Add animated transitions that connect these points using lines in order.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Visitors from Social Media</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.1""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.5.1""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatter plot showing visitors from Social Media."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum['Traffic Source'] === 'Social Media'""
                },
                {
                    ""sort"": {
                        ""field"": ""Week"",
                        ""order"": ""ascending""
                    }
                }
            ],
            ""mark"": {
                ""type"": ""point"",
                ""tooltip"": true
            },
            ""encoding"": {
                ""x"": {
                    ""field"": ""Week"",
                    ""type"": ""temporal""
                },
                ""y"": {
                    ""field"": ""Visitors"",
                    ""type"": ""quantitative""
                },
                ""order"": {
                    ""field"": ""Week"",
                    ""type"": ""temporal""
                }
            },
            ""config"": {
                ""view"": {
                    ""duration"": 1000,
                    ""interactive"": true
                }
            }
        };
        
        vegaEmbed('#vis', spec).then(function(result) {
            // Optional: Add any additional actions
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,808,809
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Visitors of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Website Traffic Visitors Line Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue/dist/vue.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.6.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": {
                ""type"": ""line"",
                ""point"": true,
                ""tooltip"": true
            },
            ""encoding"": {
                ""x"": {
                    ""field"": ""Week"",
                    ""type"": ""temporal"",
                    ""title"": ""Week""
                },
                ""y"": {
                    ""field"": ""Visitors"",
                    ""type"": ""quantitative"",
                    ""title"": ""Number of Visitors""
                },
                ""color"": {
                    ""field"": ""Traffic Source"",
                    ""type"": ""nominal"",
                    ""title"": ""Traffic Source"",
                    ""scale"": {
                        ""domain"": [""Direct"", ""Organic"", ""Referral"", ""Social Media""],
                        ""range"": [""#1f77b4"", ""#ff7f0e"", ""#2ca02c"", ""#d62728""]
                    }
                },
                ""opacity"": {
                    ""condition"": {
                        ""selection"": ""hover"",
                        ""value"": 1
                    },
                    ""value"": 0.3
                }
            },
            ""selection"": {
                ""hover"": {
                    ""type"": ""single"",
                    ""fields"": [""Traffic Source""],
                    ""on"": ""mouseover"",
                    ""empty"": ""none""
                }
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            // Visualization successfully rendered
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,809,810
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Bar Chart that visualizes the Visitors for each Traffic Source in 2021-W01. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Visitors by Traffic Source - Vega-Lite</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.8.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum['Week'] === '2021-W01'""
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Traffic Source"",
                    ""type"": ""ordinal"",
                    ""title"": ""Traffic Source""
                },
                ""y"": {
                    ""field"": ""Visitors"",
                    ""type"": ""quantitative"",
                    ""title"": ""Visitors""
                },
                ""color"": {
                    ""field"": ""Traffic Source"",
                    ""type"": ""nominal"",
                    ""legend"": {
                        ""title"": ""Traffic Source""
                    }
                }
            },
            ""config"": {
                ""view"": {
                    ""stroke"": ""transparent""
                }
            }
        };

        vegaEmbed('#vis', spec, {
            actions: false,
            defaultStyle: true
        }).then(result => {
            // Enabling zoom and pan
            const view = result.view;
            view.addSignalListener('zoom', function(name, value) {
                view.scale('x', value.x).scale('y', value.y).run();
            });
            view.addSignalListener('pan', function(name, value) {
                view.translate(value.x, value.y).run();
            });
        }).catch(console.error);
    </script>
</body>
</html>
```",Execution Error,810,811
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Bar Chart that visualizes the Visitors for each Traffic Source in 2021-W01. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Visitors by Traffic Source</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <style>
        #vis {
            width: 800px;
            height: 400px;
            margin: auto;
        }
    </style>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum['Week'] === '2021-W01'""
                },
                {
                    ""calculate"": ""datum['Traffic Source']"",
                    ""as"": ""TrafficSource""
                }
            ],
            ""mark"": {
                ""type"": ""bar"",
                ""tooltip"": true
            },
            ""encoding"": {
                ""x"": {
                    ""field"": ""TrafficSource"",
                    ""type"": ""ordinal"",
                    ""title"": ""Traffic Source""
                },
                ""y"": {
                    ""field"": ""Visitors"",
                    ""type"": ""quantitative"",
                    ""title"": ""Number of Visitors""
                },
                ""order"": {
                    ""field"": ""Visitors"",
                    ""type"": ""quantitative"",
                    ""sort"": ""descending""
                }
            },
            ""config"": {
                ""view"": {
                    ""stroke"": ""transparent""
                }
            }
        };

        vegaEmbed('#vis', spec, {renderer: 'svg'})
            .then(result => {
                const {view} = result; 
                view.addSignalListener('barOrder', (name, value) => {
                    const newOrder = value.map((d) => d.TrafficSource);
                    view.data('table').sort((a, b) => newOrder.indexOf(a.TrafficSource) - newOrder.indexOf(b.TrafficSource));
                    view.run();
                });

                const dragDrop = d3.drag()
                    .on('start', function(event) {
                        d3.select(this).raise().classed(""active"", true);
                    })
                    .on('drag', function(event) {
                        const x = d3.pointer(event)[0];
                        d3.select(this).attr(""transform"", `translate(${x}, 0)`);
                    })
                    .on('end', function(event) {
                        const x = d3.pointer(event)[0];
                        // Implement logic to update the order based on new position
                        const newOrder = Array.from(document.querySelectorAll('.bar')).map((bar) => bar.__data__.TrafficSource);
                        view.trigger('barOrder', newOrder);
                        d3.select(this).classed(""active"", false);
                    });

                d3.selectAll('.bar').call(dragDrop);
            })
            .catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,811,812
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Bar Chart that visualizes the Visitors for each Traffic Source in 2021-W01. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Visitors.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,interactive view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Visitors by Traffic Source</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.12.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.19.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script type=""text/javascript"">
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""field"": ""Week"",
                        ""equal"": ""2021-W01""
                    }
                },
                {
                    ""calculate"": ""datum.Visitors"",
                    ""as"": ""Visitors""
                },
                {
                    ""fold"": [""Visitors""],
                    ""as"": [""Traffic Source"", ""Count""]
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Traffic Source"",
                    ""type"": ""nominal"",
                    ""axis"": {
                        ""labelAngle"": 45
                    }
                },
                ""y"": {
                    ""field"": ""Count"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Traffic Source"",
                    ""type"": ""nominal"",
                    ""scale"": {""scheme"": ""category10""}
                }
            },
            ""config"": {
                ""view"": {""stroke"": ""transparent""}
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""field"": ""Traffic Source"",
                        ""not"": {
                            ""test"": ""datum.Visitors == null""
                        }
                    }
                }
            ]
        };

        vegaEmbed('#vis', spec, {actions: false}).then(result => {
            // Successfully embedded the visualization
        }).catch(console.error);
    </script>
</body>
</html>
```",Initialization Error,812,813
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Visitors and Page Views, and a Bar Chart on the right that displays Traffic Source versus Visitors.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Traffic Visualization</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatterplot {
            display: inline-block;
            width: 50%;
            height: 400px;
        }

        .barchart {
            display: inline-block;
            width: 50%;
            height: 400px;
        }
    </style>
</head>
<body>
    <div class=""scatterplot"" id=""scatterplot""></div>
    <div class=""barchart"" id=""barchart""></div>
    <script>
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(function(data) {
            // Parse numerical values
            data.forEach(d => {
                d.Visitors = +d.Visitors;
                d['Page Views'] = +d['Page Views'];
            });

            // Scatterplot
            const scatterWidth = 400, scatterHeight = 400;

            const scatterSvg = d3.select(""#scatterplot"")
                .append(""svg"")
                .attr(""width"", scatterWidth)
                .attr(""height"", scatterHeight);

            const xScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.Visitors)])
                .range([0, scatterWidth]);

            const yScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Page Views'])])
                .range([scatterHeight, 0]);

            scatterSvg.selectAll(""circle"")
                .data(data)
                .enter()
                .append(""circle"")
                .attr(""cx"", d => xScale(d.Visitors))
                .attr(""cy"", d => yScale(d['Page Views']))
                .attr(""r"", 5)
                .attr(""fill"", ""blue"");

            scatterSvg.append(""g"")
                .attr(""transform"", `translate(0, ${scatterHeight})`)
                .call(d3.axisBottom(xScale));

            scatterSvg.append(""g"")
                .call(d3.axisLeft(yScale));

            // Bar Chart
            const barWidth = 500, barHeight = 400;

            const barSvg = d3.select(""#barchart"")
                .append(""svg"")
                .attr(""width"", barWidth)
                .attr(""height"", barHeight);

            const trafficSources = d3.group(data, d => d['Traffic Source']);
            const visitorsData = Array.from(trafficSources, ([key, values]) => ({
                source: key,
                visitors: d3.sum(values, d => d.Visitors)
            }));

            const yBarScale = d3.scaleBand()
                .domain(visitorsData.map(d => d.source))
                .range([0, barHeight])
                .padding(0.1);

            const xBarScale = d3.scaleLinear()
                .domain([0, d3.max(visitorsData, d => d.visitors)])
                .range([0, barWidth]);

            barSvg.selectAll(""rect"")
                .data(visitorsData)
                .enter()
                .append(""rect"")
                .attr(""x"", 0)
                .attr(""y"", d => yBarScale(d.source))
                .attr(""width"", d => xBarScale(d.visitors))
                .attr(""height"", yBarScale.bandwidth())
                .attr(""fill"", ""orange"");

            barSvg.append(""g"")
                .attr(""transform"", `translate(0, ${barHeight})`)
                .call(d3.axisBottom(xBarScale));

            barSvg.append(""g"")
                .call(d3.axisLeft(yBarScale));
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,813,814
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Visitors and Page Views, and a Bar Chart on the right that displays Traffic Source versus Visitors. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Interactive Visualizations</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .scatterplot {
            float: left;
            margin-right: 50px;
        }
        .barchart {
            float: left;
        }
        .highlight {
            fill: orange;
        }
        .bar:hover {
            fill: steelblue;
        }
        .scatter-point:hover {
            fill: red;
        }
    </style>
</head>
<body>
    <div class=""scatterplot"" id=""scatterplot""></div>
    <div class=""barchart"" id=""barchart""></div>
    
    <script>
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
            data.forEach(d => {
                d.Visitors = +d.Visitors;
                d['Page Views'] = +d['Page Views'];
            });

            const width = 400, height = 300;
            const margin = {top: 20, right: 30, bottom: 40, left: 50};

            const xScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.Visitors)])
                .range([margin.left, width - margin.right]);

            const yScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Page Views'])])
                .range([height - margin.bottom, margin.top]);

            const scatterplot = d3.select(""#scatterplot"")
                .append(""svg"")
                .attr(""width"", width)
                .attr(""height"", height);

            scatterplot.selectAll(""circle"")
                .data(data)
                .enter()
                .append(""circle"")
                .attr(""class"", ""scatter-point"")
                .attr(""cx"", d => xScale(d.Visitors))
                .attr(""cy"", d => yScale(d['Page Views']))
                .attr(""r"", 5)
                .on(""mouseover"", function() { d3.select(this).classed(""scatter-point"", false).classed(""highlight"", true); })
                .on(""mouseout"", function() { d3.select(this).classed(""highlight"", false).classed(""scatter-point"", true); })

            const xAxis = d3.axisBottom(xScale);
            const yAxis = d3.axisLeft(yScale);
            
            scatterplot.append(""g"")
                .attr(""transform"", `translate(0,${height - margin.bottom})`)
                .call(xAxis);
            scatterplot.append(""g"")
                .attr(""transform"", `translate(${margin.left},0)`)
                .call(yAxis);

            const barchartWidth = 400, barchartHeight = 300;

            const xBarScale = d3.scaleBand()
                .domain(data.map(d => d['Traffic Source']))
                .range([margin.left, barchartWidth - margin.right])
                .padding(0.1);

            const yBarScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.Visitors)])
                .range([barchartHeight - margin.bottom, margin.top]);

            const barchart = d3.select(""#barchart"")
                .append(""svg"")
                .attr(""width"", barchartWidth)
                .attr(""height"", barchartHeight);
            
            barchart.selectAll(""rect"")
                .data(data)
                .enter()
                .append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => xBarScale(d['Traffic Source']))
                .attr(""y"", d => yBarScale(d.Visitors))
                .attr(""height"", d => barchartHeight - margin.bottom - yBarScale(d.Visitors))
                .attr(""width"", xBarScale.bandwidth());

            const barAxisX = d3.axisBottom(xBarScale);
            const barAxisY = d3.axisLeft(yBarScale);

            barchart.append(""g"")
                .attr(""transform"", `translate(0,${barchartHeight - margin.bottom})`)
                .call(barAxisX);
            barchart.append(""g"")
                .attr(""transform"", `translate(${margin.left},0)`)
                .call(barAxisY);

            scatterplot.append(""rect"")
                .attr(""width"", width)
                .attr(""height"", height)
                .style(""fill"", ""none"")
                .style(""pointer-events"", ""all"")
                .on(""mousedown"", brushStart)
                .on(""mouseup"", brushEnd);
            
            let brushSelection = null;
            
            function brushStart(event) {
                brushSelection = {};
                const coords = d3.pointer(event);
                brushSelection.x0 = coords[0];
                brushSelection.y0 = coords[1];
            }

            function brushEnd(event) {
                const coords = d3.pointer(event);
                const x1 = Math.min(coords[0], brushSelection.x0);
                const x0 = Math.max(coords[0], brushSelection.x0);
                const y1 = Math.max(coords[1], brushSelection.y0);
                const y0 = Math.min(coords[1], brushSelection.y0);

                const selectedPoints = [];
                scatterplot.selectAll(""circle"").each(function(d) {
                    const cx = xScale(d.Visitors), cy = yScale(d['Page Views']);
                    if (cx >= x0 && cx <= x1 && cy >= y0 && cy <= y1) {
                        selectedPoints.push(d['Traffic Source']);
                    }
                });

                barchart.selectAll(""rect"").classed(""highlight"", false);
                barchart.selectAll(""rect"")
                    .filter(d => selectedPoints.includes(d['Traffic Source']))
                    .classed(""highlight"", true);
            }
        });
    </script>
</body>
</html>
```",Unexpected Execution Result,814,815
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Visitors , while the pie chart represents the distribution of Page Views.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Website Traffic Analysis</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line-chart {
            width: 100%;
            height: 400px;
        }
        .pie-chart {
            width: 100%;
            height: 400px;
        }
    </style>
</head>
<body>
    <div class=""line-chart"" id=""lineChart""></div>
    <div class=""pie-chart"" id=""pieChart""></div>

    <script>
        const margin = {top: 20, right: 30, bottom: 30, left: 40},
            width = 800 - margin.left - margin.right,
            height = 400 - margin.top - margin.bottom;

        const svgLine = d3.select(""#lineChart"").append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const svgPie = d3.select(""#pieChart"").append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${width / 2 + margin.left},${height / 2 + margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
            data.forEach(d => {
                d.Visitors = +d[""Visitors""];
                d[""Page Views""] = +d[""Page Views""];
            });

            // Line Chart for Visitors
            const x = d3.scaleBand()
                .domain(data.map(d => d.Week))
                .range([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.Visitors)])
                .nice()
                .range([height, 0]);

            svgLine.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svgLine.append(""g"")
                .call(d3.axisLeft(y));

            svgLine.selectAll("".bar"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => x(d.Week))
                .attr(""y"", d => y(d.Visitors))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d.Visitors))
                .attr(""fill"", ""steelblue"");

            // Pie Chart for Page Views Distribution
            const pieData = d3.rollup(data, v => d3.sum(v, d => d[""Page Views""]), d => d[""Traffic Source""]);
            const pie = d3.pie().value(d => d[1]);
            const arc = d3.arc().innerRadius(0).outerRadius(Math.min(width, height) / 2);

            const pieChartData = pie(Array.from(pieData));

            svgPie.selectAll(""path"")
                .data(pieChartData)
                .enter().append(""path"")
                .attr(""d"", arc)
                .attr(""fill"", (d, i) => d3.schemeCategory10[i])
                .attr(""transform"", `translate(${width / 2},${height / 2})`);
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,815,816
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Visitors , while the pie chart represents the distribution of Page Views. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Page Views for the selected group.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Website Traffic Visualization</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .chart {
            margin: 20px;
        }
    </style>
</head>
<body>
    <div id=""line-chart"" class=""chart""></div>
    <div id=""pie-chart"" class=""chart""></div>

    <script>
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(function(data) {
            data.forEach(function(d) {
                d.Visitors = +d.Visitors;
                d['Page Views'] = +d['Page Views'];
            });

            const margin = { top: 20, right: 30, bottom: 30, left: 40 },
                  width = 460 - margin.left - margin.right,
                  height = 400 - margin.top - margin.bottom;

            const x = d3.scalePoint()
                .domain(data.map(d => d.Week))
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.Visitors)])
                .range([height, 0]);

            const line = d3.line()
                .x(d => x(d.Week))
                .y(d => y(d.Visitors));

            const svgLine = d3.select(""#line-chart"")
                .append(""svg"")
                .attr(""width"", width + margin.left + margin.right)
                .attr(""height"", height + margin.top + margin.bottom)
                .append(""g"")
                .attr(""transform"", `translate(${margin.left},${margin.top})`);

            svgLine.append(""path"")
                .datum(data)
                .attr(""fill"", ""none"")
                .attr(""stroke"", ""steelblue"")
                .attr(""stroke-width"", 1.5)
                .attr(""d"", line);

            svgLine.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svgLine.append(""g"")
                .call(d3.axisLeft(y));

            let selectedData = data;

            svgLine.selectAll("".dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => x(d.Week))
                .attr(""cy"", d => y(d.Visitors))
                .attr(""r"", 5)
                .on(""click"", function(event, d) {
                    selectedData = d3.selectAll("".dot"").filter(d => d.Week === d.Week)._groups[0].map(e => data[e.__data__.index]);
                    updatePieChart(selectedData, d3.select(this).attr('class'));
                });

            function updatePieChart(dataToUse) {
                const pieData = d3.nest()
                    .key(d => d['Page Views'])
                    .rollup(v => v.length)
                    .entries(dataToUse);

                const radius = Math.min(width, height) / 2;

                const color = d3.scaleOrdinal(d3.schemeCategory10);

                const pie = d3.pie()
                    .value(d => d.value);

                const arc = d3.arc()
                    .innerRadius(0)
                    .outerRadius(radius);

                d3.select(""#pie-chart"").select(""svg"").remove();

                const svgPie = d3.select(""#pie-chart"")
                    .append(""svg"")
                    .attr(""width"", width)
                    .attr(""height"", height)
                  .append(""g"")
                    .attr(""transform"", `translate(${width / 2},${height / 2})`);

                const arcs = svgPie.selectAll("".arc"")
                    .data(pie(pieData))
                    .enter().append(""g"")
                    .attr(""class"", ""arc"");

                arcs.append(""path"")
                    .attr(""d"", arc)
                    .attr(""fill"", d => color(d.data.key));

                arcs.append(""text"")
                    .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                    .attr(""dy"", "".35em"")
                    .text(d => d.data.key);
            }

            updatePieChart(data);
        });
    </script>
</body>
</html>
```",Initialization Error,816,817
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Visitors, Page Views, and Bounce Rate. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot Matrix</title>
    <style>
        .scatterplot {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
        }
        .cell {
            border: 1px solid #ccc;
            position: relative;
        }
        .brush .selection {
            fill: rgba(0, 0, 255, 0.3);
            stroke: #000;
            stroke-width: 1.5px;
        }
        .highlight {
            fill: orange;
        }
    </style>
</head>
<body>
    <div class=""scatterplot"" id=""scatterplot""></div>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <script>
        const width = 150, height = 150;

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
            data.forEach(d => {
                d.Visitors = +d.Visitors;
                d['Page Views'] = +d['Page Views'];
                d['Bounce Rate'] = +d['Bounce Rate'];
            });

            const xValue = (d, i) => d[i];
            const yValue = (d, i) => d[i + 3];
            const dimensions = ['Visitors', 'Page Views', 'Bounce Rate'];

            const pairwise = dimensions.map((d1, i) =>
                dimensions.map((d2, j) => (i === j) ? undefined : {x: d1, y: d2})
            ).flat().filter(d => d);

            const scatterplot = d3.select(""#scatterplot"");

            const brush = d3.brush().on(""end"", brushed);

            pairwise.forEach(({x, y}) => {
                const cell = scatterplot.append(""svg"")
                    .attr(""class"", ""cell"")
                    .attr(""width"", width)
                    .attr(""height"", height);

                const xScale = d3.scaleLinear()
                    .domain(d3.extent(data, d => d[xValue(d, dimensions.indexOf(x))]))
                    .range([0, width]);

                const yScale = d3.scaleLinear()
                    .domain(d3.extent(data, d => d[yValue(d, dimensions.indexOf(y))]))
                    .range([height, 0]);

                cell.append(""g"")
                    .selectAll(""circle"")
                    .data(data)
                    .enter()
                    .append(""circle"")
                    .attr(""cx"", d => xScale(xValue(d, dimensions.indexOf(x))))
                    .attr(""cy"", d => yScale(yValue(d, dimensions.indexOf(y))))
                    .attr(""r"", 3)
                    .attr(""fill"", ""black"");

                cell.append(""g"")
                    .attr(""class"", ""brush"")
                    .attr(""transform"", `translate(0,0)`)
                    .call(brush);
            });

            function brushed(event) {
                const selection = d3.event.selection;
                if (!selection) return;
                const [[x0, y0], [x1, y1]] = selection;

                d3.selectAll(""circle"").classed(""highlight"", d => {
                    const xSelected = xValue(d, dimensions.indexOf(selection[0]));
                    const ySelected = yValue(d, dimensions.indexOf(selection[1]));
                    return xSelected >= x0 && xSelected <= x1 && ySelected >= y0 && ySelected <= y1;
                });
            }
        });
    </script>
</body>
</html>
```",Execution Error,817,818
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a brushable Scatterplot that visualizes the relationship between Visitors and Page Views. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Brushable Scatterplot</title>
    <style>
        body { font-family: Arial, sans-serif; }
        .scatter { display: inline-block; }
        .table-container { display: inline-block; margin-left: 20px; vertical-align: top;}
        .scatter circle { fill: steelblue; stroke: white; stroke-width: 1.5px; cursor: pointer; }
    </style>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
</head>
<body>

<div class=""scatter""></div>
<div class=""table-container"">
    <table id=""info-table"" border=""1"">
        <thead>
            <tr>
                <th>Week</th>
                <th>Traffic Source</th>
                <th>Visitors</th>
                <th>Page Views</th>
                <th>Bounce Rate</th>
                <th>Avg Session Duration</th>
                <th>Conversion Rate</th>
                <th>Region</th>
                <th>Device Type</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
</div>

<script>
const margin = {top: 20, right: 20, bottom: 30, left: 40};
const width = 800 - margin.left - margin.right;
const height = 500 - margin.top - margin.bottom;

const svg = d3.select("".scatter"").append(""svg"")
    .attr(""width"", width + margin.left + margin.right)
    .attr(""height"", height + margin.top + margin.bottom)
  .append(""g"")
    .attr(""transform"", `translate(${margin.left},${margin.top})`);

const x = d3.scaleLinear().range([0, width]);
const y = d3.scaleLinear().range([height, 0]);

const brush = d3.brush()
    .extent([[0, 0], [width, height]])
    .on(""brush end"", brushed);

d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
    data.forEach(d => {
        d.Visitors = +d[""Visitors""];
        d[""Page Views""] = +d[""Page Views""];
    });

    x.domain(d3.extent(data, d => d.Visitors)).nice();
    y.domain(d3.extent(data, d => d[""Page Views""])).nice();

    svg.append(""g"")
        .attr(""class"", ""x-axis"")
        .attr(""transform"", `translate(0,${height})`)
        .call(d3.axisBottom(x));

    svg.append(""g"")
        .attr(""class"", ""y-axis"")
        .call(d3.axisLeft(y));

    svg.append(""g"")
        .attr(""class"", ""brush"")
        .call(brush);
    
    const circles = svg.selectAll(""circle"")
        .data(data)
      .enter().append(""circle"")
        .attr(""cx"", d => x(d.Visitors))
        .attr(""cy"", d => y(d[""Page Views""]))
        .attr(""r"", 5)
        .on(""mouseover"", function(event, d) {
            d3.select(this).transition().duration(200).attr(""r"", 10);
        })
        .on(""mouseout"", function(event, d) {
            d3.select(this).transition().duration(200).attr(""r"", 5);
        });

    function brushed(event) {
        const extent = d3.brushSelection(event.target);
        const selectedData = data.filter(d => {
            const cx = x(d.Visitors), cy = y(d[""Page Views""]);
            return extent[0][0] <= cx && cx <= extent[1][0]
                && extent[0][1] <= cy && cy <= extent[1][1];
        });

        updateTable(selectedData);
    }

    function updateTable(selectedData) {
        const tbody = d3.select(""#info-table tbody"");
        tbody.selectAll(""tr"").remove();
        selectedData.slice(0, 20).forEach(d => {
            const row = tbody.append(""tr"");
            row.selectAll(""td"")
                .data([d.Week, d[""Traffic Source""], d.Visitors, d[""Page Views""], d[""Bounce Rate""], d[""Average Session Duration""], d[""Conversion Rate""], d.Region, d[""Device Type""]])
              .enter().append(""td"")
                .text(d => d);
        });
    }
});
</script>

</body>
</html>
```",Initialization Error,818,819
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a horizontal Bar Chart that shows all the data concerning Visitors, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>D3 Horizontal Bar Chart with Minimap</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .x.axis path, .x.axis line {
            fill: none;
            shape-rendering: crispEdges;
        }
        .x.axis text {
            font-size: 12px;
        }
        .minimap {
            fill-opacity: 0.5;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = {top: 20, right: 40, bottom: 30, left: 100};
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
            data.forEach(d => {
                d.Visitors = +d[""Visitors""];
            });

            const x = d3.scaleLinear()
                .range([0, width])
                .domain([0, d3.max(data, d => d.Visitors)]);

            const y = d3.scaleBand()
                .range([0, height])
                .padding(0.1)
                .domain(data.map(d => d[""Traffic Source""]));

            g.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""y axis"")
                .call(d3.axisLeft(y));

            g.selectAll("".bar"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", 0)
                .attr(""y"", d => y(d[""Traffic Source""]))
                .attr(""width"", d => x(d.Visitors))
                .attr(""height"", y.bandwidth());

            // Minimap
            const minimapHeight = 100;
            const minimapWidth = 250;
            const minimapX = width + margin.right - minimapWidth;
            const minimapY = height - minimapHeight;

            const minimapG = svg.append(""g"")
                .attr(""transform"", `translate(${minimapX},${minimapY})`);

            const minimapXScale = d3.scaleLinear()
                .range([0, minimapWidth])
                .domain([0, d3.max(data, d => d.Visitors)]);

            const minimapYScale = d3.scaleBand()
                .range([0, minimapHeight])
                .padding(0.1)
                .domain(data.map(d => d[""Traffic Source""]));

            minimapG.selectAll("".minimap"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""minimap"")
                .attr(""x"", 0)
                .attr(""y"", d => minimapYScale(d[""Traffic Source""]))
                .attr(""width"", d => minimapXScale(d.Visitors))
                .attr(""height"", minimapYScale.bandwidth());
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,819,820
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Visitors and Page Views, and a Bar Chart on the right that displays Traffic Source versus Visitors.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Website Traffic Visualization</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
</head>
<body>
    <div style=""display: flex;"">
        <div id=""scatterplot"" style=""width: 50%; height: 500px;""></div>
        <div id=""barchart"" style=""width: 50%; height: 500px;""></div>
    </div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const visitors = rows.map(row => parseInt(row[2]));
                const pageViews = rows.map(row => parseInt(row[3]));
                const trafficSources = [...new Set(rows.map(row => row[1]))];
                const visitorsBySource = trafficSources.map(source => {
                    return rows.filter(row => row[1] === source).reduce((sum, row) => sum + parseInt(row[2]), 0);
                });

                const scatterPlot = echarts.init(document.getElementById('scatterplot'));
                scatterPlot.setOption({
                    title: {
                        text: 'Visitors vs Page Views'
                    },
                    tooltip: {},
                    xAxis: {
                        name: 'Visitors'
                    },
                    yAxis: {
                        name: 'Page Views'
                    },
                    series: [{
                        symbolSize: 10,
                        data: visitors.map((v, index) => [v, pageViews[index]]),
                        type: 'scatter'
                    }]
                });

                const barChart = echarts.init(document.getElementById('barchart'));
                barChart.setOption({
                    title: {
                        text: 'Traffic Source vs Visitors'
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: trafficSources
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        name: 'Visitors',
                        type: 'bar',
                        data: visitorsBySource
                    }]
                });
            });
    </script>
</body>
</html>
```",Correct,820,821
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Visitors and Page Views, and a Bar Chart on the right that displays Traffic Source versus Visitors. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Traffic Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            display: flex;
            justify-content: space-between;
            height: 400px;
            width: 100%;
        }
        .chart {
            width: 45%;
            height: 100%;
        }
    </style>
</head>
<body>
    <div id=""main"">
        <div id=""scatter"" class=""chart""></div>
        <div id=""bar"" class=""chart""></div>
    </div>
    <script>
        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv');
            const dataText = await response.text();
            const data = dataText.split('\n').slice(1).map(row => {
                const columns = row.split(',');
                return {
                    Week: columns[0],
                    Traffic_Source: columns[1],
                    Visitors: parseInt(columns[2]),
                    Page_Views: parseInt(columns[3]),
                    Bounce_Rate: parseFloat(columns[4]),
                    Average_Session_Duration: parseFloat(columns[5]),
                    Conversion_Rate: parseFloat(columns[6]),
                    Region: columns[7],
                    Device_Type: columns[8]
                };
            }).filter(row => row.Visitors && row.Page_Views);

            return data;
        }

        async function initializeCharts() {
            const rawData = await fetchData();
            const scatterData = rawData.map(item => [item.Visitors, item.Page_Views]);
            const trafficSources = [...new Set(rawData.map(item => item.Traffic_Source))];
            const visitorsBySource = trafficSources.map(source => 
                rawData.filter(item => item.Traffic_Source === source).reduce((sum, item) => sum + item.Visitors, 0)
            );

            const scatterChart = echarts.init(document.getElementById('scatter'));
            const barChart = echarts.init(document.getElementById('bar'));

            const scatterOption = {
                title: { text: 'Visitors vs Page Views' },
                xAxis: { type: 'value', name: 'Visitors' },
                yAxis: { type: 'value', name: 'Page Views' },
                series: [{
                    type: 'scatter',
                    data: scatterData,
                    symbolSize: 10,
                    itemStyle: {
                        color: '#73c0de'
                    },
                    emphasis: {
                        itemStyle: {
                            color: '#f00'
                        }
                    }
                }]
            };
            scatterChart.setOption(scatterOption);

            const barOption = {
                title: { text: 'Traffic Source vs Visitors' },
                xAxis: {
                    type: 'category',
                    data: trafficSources
                },
                yAxis: {
                    type: 'value',
                    name: 'Visitors'
                },
                series: [{
                    type: 'bar',
                    data: visitorsBySource,
                    itemStyle: {
                        color: '#5470c6'
                    },
                    emphasis: {
                        itemStyle: {
                            color: '#ff7f0e'
                        }
                    }
                }]
            };
            barChart.setOption(barOption);

            scatterChart.on('select', function (params) {
                const selectedVisitors = params.data[0];
                const selectedPageViews = params.data[1];

                const highlightedSources = rawData.filter(item =>
                    item.Visitors >= selectedVisitors && item.Page_Views >= selectedPageViews
                ).map(item => item.Traffic_Source);

                const highlightedIndices = trafficSources.map(source => highlightedSources.includes(source) ? 1 : 0);
                barChart.dispatchAction({
                    type: 'highlight',
                    seriesIndex: 0,
                    dataIndex: highlightedIndices
                });
            });
        }

        initializeCharts();
    </script>
</body>
</html>
```",Unexpected Execution Result,821,822
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Visitors , while the pie chart represents the distribution of Page Views.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Website Traffic Visualization</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.0.2/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 400px;
        }
        #pie {
            width: 100%;
            height: 400px;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <div id=""pie""></div>
    
    <script>
        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv');
            const text = await response.text();
            const data = text.split('\n').slice(1).map(row => row.split(','));
            return data;
        }

        async function renderCharts() {
            const data = await fetchData();
            
            const weeks = data.map(row => row[0]);
            const visitors = data.map(row => parseInt(row[2]));
            const pageViews = data.reduce((acc, row) => {
                const source = row[1];
                const views = parseInt(row[3]);
                if (!acc[source]) {
                    acc[source] = 0;
                }
                acc[source] += views;
                return acc;
            }, {});

            const pieData = Object.entries(pageViews).map(([key, value]) => ({ name: key, value }));

            const lineChart = echarts.init(document.getElementById('main'));
            const pieChart = echarts.init(document.getElementById('pie'));

            lineChart.setOption({
                title: { text: 'Visitors Trend' },
                xAxis: { type: 'category', data: weeks },
                yAxis: { type: 'value' },
                series: [{
                    data: visitors,
                    type: 'line',
                    smooth: true
                }]
            });

            pieChart.setOption({
                title: { text: 'Page Views Distribution', left: 'center' },
                series: [{
                    type: 'pie',
                    radius: '50%',
                    data: pieData,
                    emphasis: { itemStyle: { shadowBlur: 10, shadowOffsetX: 0, shadowColor: 'rgba(0, 0, 0, 0.5)' } }
                }]
            });
        }

        renderCharts();
    </script>
</body>
</html>
```",Correct,822,823
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Visitors , while the pie chart represents the distribution of Page Views. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Page Views for the selected group.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Website Traffic Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 400px;
        }
        #pie {
            width: 100%;
            height: 400px;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <div id=""pie""></div>
    
    <script>
        const url = 'https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv';

        fetch(url)
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const weeks = rows.map(row => row[0]);
                const visitors = rows.map(row => parseInt(row[2]));
                const pageViews = rows.map(row => parseInt(row[3]));
                const pageViewsDistribution = {};

                let totalPageViews = 0;
                rows.forEach(row => {
                    const source = row[1];
                    const views = parseInt(row[3]);
                    if (pageViewsDistribution[source]) {
                        pageViewsDistribution[source] += views;
                    } else {
                        pageViewsDistribution[source] = views;
                    }
                    totalPageViews += views;
                });

                const lineChart = echarts.init(document.getElementById('main'));
                const pieChart = echarts.init(document.getElementById('pie'));

                const lineOptions = {
                    title: { text: 'Visitors Trend' },
                    xAxis: { type: 'category', data: weeks },
                    yAxis: { type: 'value' },
                    series: [{
                        data: visitors,
                        type: 'line',
                        smooth: true
                    }]
                };

                lineChart.setOption(lineOptions);

                lineChart.on('click', (params) => {
                    const selectedWeekIndex = params.dataIndex;
                    const selectedVisitors = rows[selectedWeekIndex];

                    const pieData = Object.entries(pageViewsDistribution).map(([key, value]) => ({
                        name: key,
                        value: value * (selectedVisitors[2] / totalPageViews)
                    }));

                    const pieOptions = {
                        title: { text: 'Page Views Distribution', left: 'center' },
                        series: [{
                            type: 'pie',
                            radius: '50%',
                            data: pieData,
                            emphasis: {
                                itemStyle: {
                                    shadowBlur: 10,
                                    shadowOffsetX: 0,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            }
                        }]
                    };

                    pieChart.setOption(pieOptions);
                });

                // Initial pie chart
                const initialPieData = Object.entries(pageViewsDistribution).map(([key, value]) => ({
                    name: key,
                    value: value
                }));

                const initialPieOptions = {
                    title: { text: 'Page Views Distribution', left: 'center' },
                    series: [{
                        type: 'pie',
                        radius: '50%',
                        data: initialPieData,
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }]
                };

                pieChart.setOption(initialPieOptions);
            });
    </script>
</body>
</html>
```",Unexpected Execution Result,823,824
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Visitors, Page Views, and Bounce Rate. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 800px;
            display: flex;
            flex-wrap: wrap;
        }
        .chart {
            width: 33.33%;
            height: 400px;
            box-sizing: border-box;
            border: 1px solid #ccc;
            position: relative;
        }
    </style>
</head>
<body>
    <div id=""main"">
        <div class=""chart"" id=""chart1""></div>
        <div class=""chart"" id=""chart2""></div>
        <div class=""chart"" id=""chart3""></div>
        <div class=""chart"" id=""chart4""></div>
        <div class=""chart"" id=""chart5""></div>
        <div class=""chart"" id=""chart6""></div>
    </div>

    <script>
        async function loadData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv');
            const data = await response.text();
            const rows = data.split('\n').slice(1);
            const processedData = rows.map(row => {
                const cols = row.split(',');
                return {
                    Visitors: +cols[2],
                    PageViews: +cols[3],
                    BounceRate: +cols[4]
                };
            }).filter(d => !isNaN(d.Visitors) && !isNaN(d.PageViews) && !isNaN(d.BounceRate));
            return processedData;
        }

        function createChart(id, xField, yField, data) {
            const chart = echarts.init(document.getElementById(id));
            chart.setOption({
                tooltip: {
                    trigger: 'item',
                },
                xAxis: {
                    type: 'value',
                    name: xField,
                },
                yAxis: {
                    type: 'value',
                    name: yField,
                },
                series: [{
                    type: 'scatter',
                    data: data.map(d => [d[xField], d[yField]]),
                    emphasis: {
                        itemStyle: {
                            borderColor: 'red',
                            borderWidth: 2,
                        }
                    }
                }]
            });
            return chart;
        }

        function highlightCharts(charts, highlightedIndices) {
            charts.forEach((chart, index) => {
                chart.setOption({
                    series: [{
                        emphasis: {
                            itemStyle: {
                                borderColor: (highlightedIndices.includes(index) ? 'red' : '#ccc'),
                                borderWidth: (highlightedIndices.includes(index) ? 2 : 0),
                            }
                        }
                    }]
                });
            });
        }

        async function init() {
            const rawData = await loadData();
            const charts = [
                createChart('chart1', 'Visitors', 'PageViews', rawData),
                createChart('chart2', 'Visitors', 'BounceRate', rawData),
                createChart('chart3', 'PageViews', 'BounceRate', rawData),
                createChart('chart4', 'PageViews', 'Visitors', rawData),
                createChart('chart5', 'BounceRate', 'Visitors', rawData),
                createChart('chart6', 'BounceRate', 'PageViews', rawData),
            ];
            let brushIndices = [];

            charts.forEach((chart, index) => {
                chart.on('brush', (params) => {
                    const indices = params.batch[0].areas.map(area => {
                        return rawData.findIndex(d => d.Visitors >= area.label[0][0] && d.Visitors <= area.label[1][0] &&
                                                       d.PageViews >= area.label[0][1] && d.PageViews <= area.label[1][1]);
                    }).filter(i => i !== -1);
                    if (indices.length) {
                        brushIndices = indices;
                        highlightCharts(charts, brushIndices);
                    }
                });
                chart.on('brushEnd', () => {
                    highlightCharts(charts, []);
                });
            });
        }

        init();
    </script>
</body>
</html>
```",Correct,824,825
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a brushable Scatterplot that visualizes the relationship between Visitors and Page Views. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Brushable Scatterplot with ECharts</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
    <style>
        #main {
            width: 70%;
            height: 500px;
            display: inline-block;
        }
        #data-table {
            width: 25%;
            display: inline-block;
            vertical-align: top;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid #ccc;
            padding: 8px;
            text-align: left;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <div id=""data-table""><table id=""table""><thead><tr><th>Week</th><th>Traffic Source</th><th>Visitors</th><th>Page Views</th></tr></thead><tbody></tbody></table></div>
    
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
        .then(response => response.text())
        .then(data => {
            const lines = data.split('\n').slice(1).map(line => line.split(','));
            const weeks = [];
            const visitors = [];
            const pageViews = [];
            const displayData = [];

            lines.forEach(line => {
                if(line.length > 1) {
                    weeks.push(line[0]);
                    visitors.push(parseInt(line[2]));
                    pageViews.push(parseInt(line[3]));
                    displayData.push({
                        week: line[0],
                        trafficSource: line[1],
                        visitors: parseInt(line[2]),
                        pageViews: parseInt(line[3]),
                    });
                }
            });

            const chartDom = document.getElementById('main');
            const myChart = echarts.init(chartDom);

            const option = {
                title: { text: 'Scatterplot of Visitors vs Page Views' },
                tooltip: {},
                xAxis: { name: 'Visitors' },
                yAxis: { name: 'Page Views' },
                series: [{
                    name: 'Website Traffic',
                    type: 'scatter',
                    data: displayData.map((d, index) => [d.visitors, d.pageViews, index]),
                    emphasize: {
                        focus: 'series'
                    },
                    itemStyle: {
                        color: 'blue'
                    }
                }],
                brush: {
                    type: ['rect']
                },
                visualMap: {
                    show: false,
                    dimension: 2,
                }
            };

            myChart.setOption(option);

            myChart.on('brushselected', function (params) {
                const selectedPoints = params.batch[0].selected.map(item => displayData[item.dataIndex]);
                const tableBody = document.getElementById('table').querySelector('tbody');
                tableBody.innerHTML = '';
                selectedPoints.slice(0, 20).forEach(point => {
                    const row = tableBody.insertRow();
                    row.insertCell(0).innerText = point.week;
                    row.insertCell(1).innerText = point.trafficSource;
                    row.insertCell(2).innerText = point.visitors;
                    row.insertCell(3).innerText = point.pageViews;
                });
            });
        });
    </script>
</body>
</html>
```",Correct,825,826
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a horizontal Bar Chart that shows all the data concerning Visitors, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Visitors Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 70%; height: 400px; display: inline-block;""></div>
    <div id=""minimap"" style=""width: 25%; height: 100px; display: inline-block;""></div>
    
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const visitors = [];
                const weeks = [];
                
                rows.forEach(row => {
                    const columns = row.split(',');
                    if (columns.length > 0) {
                        weeks.push(columns[0]);
                        visitors.push(parseInt(columns[2], 10));
                    }
                });

                const mainChart = echarts.init(document.getElementById('main'));
                const minimapChart = echarts.init(document.getElementById('minimap'));

                const option = {
                    title: {
                        text: 'Visitors per Week',
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'value',
                    },
                    yAxis: {
                        type: 'category',
                        data: weeks,
                    },
                    series: [{
                        name: 'Visitors',
                        type: 'bar',
                        data: visitors,
                    }]
                };

                const minimapOption = {
                    tooltip: {},
                    xAxis: {
                        type: 'value',
                        show: false,
                    },
                    yAxis: {
                        type: 'category',
                        data: weeks,
                        show: false,
                    },
                    series: [{
                        name: 'Visitors',
                        type: 'bar',
                        data: visitors,
                    }]
                };

                mainChart.setOption(option);
                minimapChart.setOption(minimapOption);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,826,827
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Visitors and Page Views, and a Bar Chart on the right that displays Traffic Source versus Visitors.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Website Traffic Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.8.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.22.0""></script>
    <style>
        #charts {
            display: flex;
            justify-content: space-between;
        }
        #scatterplot, #barchart {
            width: 45%;
        }
    </style>
</head>
<body>
    <div id=""charts"">
        <div id=""scatterplot""></div>
        <div id=""barchart""></div>
    </div>

    <script>
        const scatterplotSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""mark"": ""circle"",
            ""encoding"": {
                ""x"": {""field"": ""Visitors"", ""type"": ""quantitative""},
                ""y"": {""field"": ""Page Views"", ""type"": ""quantitative""},
                ""tooltip"": [
                    {""field"": ""Visitors"", ""type"": ""quantitative""},
                    {""field"": ""Page Views"", ""type"": ""quantitative""}
                ]
            }
        };

        const barchartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {""field"": ""Traffic Source"", ""type"": ""ordinal""},
                ""y"": {""field"": ""Visitors"", ""type"": ""quantitative""},
                ""tooltip"": [
                    {""field"": ""Traffic Source"", ""type"": ""ordinal""},
                    {""field"": ""Visitors"", ""type"": ""quantitative""}
                ]
            }
        };

        vegaEmbed('#scatterplot', scatterplotSpec);
        vegaEmbed('#barchart', barchartSpec);
    </script>
</body>
</html>
```",Correct,827,828
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Visitors and Page Views, and a Bar Chart on the right that displays Traffic Source versus Visitors. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Interactive Visualization</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/vega/5.20.2/vega.min.js""></script>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/vega-lite/5.8.0/vega-lite.min.js""></script>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/vega-embed/6.20.1/vega-embed.min.js""></script>
    <style>
        #vis1, #vis2 {
            display: inline-block;
            width: 45%;
            height: 400px;
        }
    </style>
</head>
<body>
    <h1>Website Traffic Visualization</h1>
    <div id=""vis1""></div>
    <div id=""vis2""></div>

    <script>
        const dataUrl = ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"";

        const scatterChart = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": { ""url"": dataUrl },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": { ""field"": ""Visitors"", ""type"": ""quantitative"" },
                ""y"": { ""field"": ""Page Views"", ""type"": ""quantitative"" },
                ""color"": { ""field"": ""Traffic Source"", ""type"": ""nominal"" },
                ""tooltip"": [
                    { ""field"": ""Visitors"", ""type"": ""quantitative"" },
                    { ""field"": ""Page Views"", ""type"": ""quantitative"" },
                    { ""field"": ""Traffic Source"", ""type"": ""nominal"" }
                ]
            },
            ""selection"": {
                ""brush"": {
                    ""type"": ""interval"",
                    ""resolved"": false
                }
            },
            ""config"": {
                ""overlay"": { ""fill"": ""lightgrey"", ""fillOpacity"": 0.5 }
            }
        };

        const barChart = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": { ""url"": dataUrl },
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": { ""field"": ""Traffic Source"", ""type"": ""nominal"", ""axis"": { ""labelAngle"": 0 } },
                ""y"": { ""aggregate"": ""sum"", ""field"": ""Visitors"", ""type"": ""quantitative"" },
                ""opacity"": { ""condition"": { ""selection"": ""brush"", ""field"": ""Visitors"", ""type"": ""quantitative"" }, ""value"": 1 }
            }
        };

        vegaEmbed('#vis1', scatterChart).then(function (res) {
            const view = res.view;
            view.addSignalListener('brush', function (name, value) {
                const filteredData = value && value.length ?
                    value.map(d => d.trafficSource) : [];
                view.setState({ source: filteredData });
            });
        });

        vegaEmbed('#vis2', barChart);
    </script>
</body>
</html>
```",Initialization Error,828,829
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Visitors , while the pie chart represents the distribution of Page Views.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Website Traffic Dashboard</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.2.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.19.0""></script>
</head>
<body>
    <div id=""line-chart""></div>
    <div id=""pie-chart""></div>

    <script>
        const lineChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"" },
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": { ""field"": ""Week"", ""type"": ""temporal"", ""title"": ""Week"" },
                ""y"": { ""field"": ""Visitors"", ""type"": ""quantitative"", ""title"": ""Visitors"" },
                ""tooltip"": [
                    { ""field"": ""Week"", ""type"": ""temporal"", ""title"": ""Week"" },
                    { ""field"": ""Visitors"", ""type"": ""quantitative"", ""title"": ""Visitors"" }
                ]
            }
        };

        const pieChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": { ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"" },
            ""mark"": ""arc"",
            ""encoding"": {
                ""theta"": { ""field"": ""Page Views"", ""type"": ""quantitative"" },
                ""color"": { ""field"": ""Traffic Source"", ""type"": ""nominal"", ""legend"": { ""title"": ""Traffic Source"" } },
                ""tooltip"": [
                    { ""field"": ""Traffic Source"", ""type"": ""nominal"", ""title"": ""Traffic Source"" },
                    { ""field"": ""Page Views"", ""type"": ""quantitative"", ""title"": ""Page Views"" }
                ]
            }
        };

        vegaEmbed('#line-chart', lineChartSpec).then(result => {
            console.log(result);
        }).catch(console.error);

        vegaEmbed('#pie-chart', pieChartSpec).then(result => {
            console.log(result);
        }).catch(console.error);
    </script>
</body>
</html>
```",Unexpected Execution Result,829,830
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Visitors , while the pie chart represents the distribution of Page Views. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Page Views for the selected group.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Vega-Lite Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <style>
        #vis1, #vis2 {
            width: 600px;
            height: 300px;
            margin: 20px auto;
        }
    </style>
</head>
<body>

<div id=""vis1""></div>
<div id=""vis2""></div>

<script>
const url = ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"";

const lineChartSpec = {
    ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
    ""description"": ""Line chart showing the trend of Visitors."",
    ""data"": { ""url"": url },
    ""mark"": ""line"",
    ""encoding"": {
        ""x"": { ""field"": ""Week"", ""type"": ""temporal"", ""title"": ""Week"" },
        ""y"": { ""field"": ""Visitors"", ""type"": ""quantitative"", ""title"": ""Visitors"" },
        ""color"": { ""field"": ""Traffic Source"", ""type"": ""nominal"" }
    },
    ""selection"": {
        ""brush"": {
            ""type"": ""interval"",
            ""encodings"": [""x""]
        }
    }
};

const pieChartSpec = {
    ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
    ""description"": ""Pie chart showing the distribution of Page Views."",
    ""data"": { ""url"": url },
    ""transform"": [
        {
            ""filter"": {""selection"": ""brush""}
        },
        {
            ""aggregate"": [
                { ""op"": ""count"", ""field"": ""Page Views"", ""as"": ""count"" }
            ],
            ""groupby"": [""Page Views""]
        }
    ],
    ""mark"": ""arc"",
    ""encoding"": {
        ""theta"": { ""field"": ""count"", ""type"": ""quantitative"" },
        ""color"": { ""field"": ""Page Views"", ""type"": ""nominal"" }
    }
};

vegaEmbed('#vis1', lineChartSpec).then(function(result) {
    result.view.addSignalListener('brush', function(name, value) {
        vegaEmbed('#vis2', pieChartSpec);
    });
});

</script>

</body>
</html>
```",Initialization Error,830,831
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Visitors, Page Views, and Bounce Rate. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Brushable Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.8.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
    <style>
        .chart {
            width: 600px;
            height: 600px;
        }
    </style>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
          ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
          ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
            ""format"": {""type"": ""csv""}
          },
          ""transform"": [
            {
              ""filter"": ""datum.Visitors >= 0 && datum['Page Views'] >= 0 && datum['Bounce Rate'] >= 0""
            }
          ],
          ""hconcat"": [
              {
                  ""vconcat"": [
                      {
                          ""mark"": ""point"",
                          ""transform"": [
                              {""filter"": {""and"": [{""param"": ""brush""}, {""field"": ""Visitors"", ""range"": {""param"": ""brush""}}]}},
                          ],
                          ""encoding"": {
                              ""x"": {""field"": ""Visitors"", ""type"": ""quantitative""},
                              ""y"": {""field"": ""Page Views"", ""type"": ""quantitative""},
                              ""color"": {""value"": ""lightgray""},
                              ""opacity"": {""value"": 0.5}
                          }
                      },
                      {
                          ""mark"": ""point"",
                          ""transform"": [
                              {""filter"": {""and"": [{""param"": ""brush""}, {""field"": ""Bounce Rate"", ""range"": {""param"": ""brush""}}]}}
                          ],
                          ""encoding"": {
                              ""x"": {""field"": ""Visitors"", ""type"": ""quantitative""},
                              ""y"": {""field"": ""Bounce Rate"", ""type"": ""quantitative""},
                              ""color"": {""value"": ""lightgray""},
                              ""opacity"": {""value"": 0.5}
                          }
                      }
                  ]
              },
              {
                  ""vconcat"": [
                      {
                          ""mark"": ""point"",
                          ""transform"": [
                              {""filter"": {""and"": [{""param"": ""brush""}, {""field"": ""Page Views"", ""range"": {""param"": ""brush""}}]}}
                          ],
                          ""encoding"": {
                              ""x"": {""field"": ""Page Views"", ""type"": ""quantitative""},
                              ""y"": {""field"": ""Bounce Rate"", ""type"": ""quantitative""},
                              ""color"": {""value"": ""lightgray""},
                              ""opacity"": {""value"": 0.5}
                          }
                      }
                  ]
              }
          ],
          ""params"": [
            {
                ""name"": ""brush"",
                ""select"": {""type"": ""interval"", ""encodings"": [""x"", ""y""]}
            }
          ]
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Initialization Error,831,832
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a brushable Scatterplot that visualizes the relationship between Visitors and Page Views. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Brushable Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.7.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
    <style>
        #table {
            margin-top: 20px;
            border-collapse: collapse;
            width: 100%;
        }
        #table th, #table td {
            border: 1px solid black;
            padding: 8px;
            text-align: left;
        }
    </style>
</head>
<body>

<div id=""vis""></div>
<table id=""table"">
    <thead>
        <tr>
            <th>Week</th>
            <th>Traffic Source</th>
            <th>Visitors</th>
            <th>Page Views</th>
            <th>Bounce Rate</th>
            <th>Average Session Duration</th>
            <th>Conversion Rate</th>
            <th>Region</th>
            <th>Device Type</th>
        </tr>
    </thead>
    <tbody>
    </tbody>
</table>

<script>
    const spec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
            ""format"": { ""type"": ""csv"" }
        },
        ""transform"": [
            {
                ""filter"": ""datum.Visitors !== null && datum['Page Views'] !== null""
            },
            {
                ""calculate"": ""datum['Page Views']"", 
                ""as"": ""Page Views""
            }
        ],
        ""mark"": ""point"",
        ""encoding"": {
            ""x"": { ""field"": ""Visitors"", ""type"": ""quantitative"" },
            ""y"": { ""field"": ""Page Views"", ""type"": ""quantitative"" },
            ""tooltip"": [
                { ""field"": ""Week"", ""type"": ""ordinal"" },
                { ""field"": ""Traffic Source"", ""type"": ""ordinal"" },
                { ""field"": ""Visitors"", ""type"": ""quantitative"" },
                { ""field"": ""Page Views"", ""type"": ""quantitative"" },
                { ""field"": ""Bounce Rate"", ""type"": ""quantitative"" },
                { ""field"": ""Average Session Duration"", ""type"": ""quantitative"" },
                { ""field"": ""Conversion Rate"", ""type"": ""quantitative"" },
                { ""field"": ""Region"", ""type"": ""ordinal"" },
                { ""field"": ""Device Type"", ""type"": ""ordinal"" }
            ]
        },
        ""selection"": {
            ""brush"": {
                ""type"": ""interval"",
                ""encodings"": [""x"", ""y""]
            }
        }
    };

    vegaEmbed('#vis', spec).then(function (result) {
        const view = result.view;
        view.addSignalListener('brush', function (name, value) {
            const selected = view.data('table').filter(row => row._selected);
            const tableBody = document.getElementById('table').getElementsByTagName('tbody')[0];
            tableBody.innerHTML = '';
            selected.slice(0, 20).forEach(row => {
                const newRow = tableBody.insertRow();
                Object.values(row).forEach(cell => {
                    const newCell = newRow.insertCell();
                    newCell.textContent = cell;
                });
            });
        });

        view.addDataListener('table', function () {
            view.run();
        });
    }).catch(console.error);
</script>

</body>
</html>
```",Correct,832,833
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a horizontal Bar Chart that shows all the data concerning Visitors, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,multiple view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Visitors Bar Chart with Minimap</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <style>
        #view {
            width: 100%;
            height: 500px;
        }
        #minimap {
            width: 100%;
            height: 200px;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div id=""view""></div>
    <div id=""minimap""></div>
    <script>
        const mainSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""bar"",
            ""encoding"": {
                ""y"": {
                    ""field"": ""Week"",
                    ""type"": ""ordinal"",
                    ""axis"": { ""title"": null }
                },
                ""x"": {
                    ""field"": ""Visitors"",
                    ""type"": ""quantitative"",
                    ""axis"": { ""title"": ""Number of Visitors"" }
                }
            }
        };

        const miniMapSpec = { 
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Week"",
                    ""type"": ""ordinal"",
                    ""axis"": { ""title"": null }
                },
                ""y"": {
                    ""field"": ""Visitors"",
                    ""type"": ""quantitative"",
                    ""axis"": { ""title"": ""Visitors"" }
                }
            }
        };

        vegaEmbed('#view', mainSpec);
        vegaEmbed('#minimap', miniMapSpec);
    </script>
</body>
</html>
```",Initialization Error,833,834
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot that visualizes the relationship between Visitors and Page Views.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Visitors vs Page Views</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter {
            fill: steelblue;
            stroke: white;
            stroke-width: 1.5px;
        }
        .axis {
            font: 10px sans-serif;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;
        
        const x = d3.scaleLinear().range([0, width]),
              y = d3.scaleLinear().range([height, 0]);
        
        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
            data.forEach(d => {
                d.Visitors = +d[""Visitors""];
                d[""Page Views""] = +d[""Page Views""];
            });

            x.domain(d3.extent(data, d => d.Visitors)).nice();
            y.domain([0, d3.max(data, d => d[""Page Views""])]).nice();

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            g.append(""g"")
                .selectAll("".scatter"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""scatter"")
                .attr(""cx"", d => x(d.Visitors))
                .attr(""cy"", d => y(d[""Page Views""]))
                .attr(""r"", 3);
        });
    </script>
</body>
</html>
```",Correct,834,835
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Line Chart that visualizes the trend of Visitors over the Week for each Traffic Source.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Website Traffic Visitors Trend</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke-width: 2px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
            const parse = d3.utcParse(""%Y-%m-%d"");
            data.forEach(d => {
                d.Week = parse(d.Week);
                d.Visitors = +d.Visitors;
            });

            const x = d3.scaleTime()
                .domain(d3.extent(data, d => d.Week))
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.Visitors)])
                .nice()
                .range([height, 0]);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const line = d3.line()
                .x(d => x(d.Week))
                .y(d => y(d.Visitors));
            
            const trafficSources = Array.from(new Set(data.map(d => d['Traffic Source'])));
            const visitorsBySource = trafficSources.map(source => data.filter(d => d['Traffic Source'] === source));

            const sourceGroup = g.selectAll("".source"")
                .data(visitorsBySource)
                .enter().append(""g"")
                .attr(""class"", ""source"");
            
            sourceGroup.append(""path"")
                .attr(""class"", ""line"")
                .attr(""d"", d => line(d))
                .attr(""stroke"", (d, i) => color(i));

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x).ticks(5));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Initialization Error,835,836
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Bar Chart that visualizes the Visitors for each Traffic Source in 2021-W01.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Visitors by Traffic Source</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis {
            font: 10px sans-serif;
            fill: #333;
        }
    </style>
</head>
<body>
    <svg width=""600"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
            const filteredData = data.filter(d => d[""Week""] === ""2021-W01"");

            const visitorsBySource = d3.rollup(filteredData, 
                v => d3.sum(v, d => +d[""Visitors""]), 
                d => d[""Traffic Source""]);

            const sources = Array.from(visitorsBySource, ([key]) => key);
            const visitors = Array.from(visitorsBySource, ([, value]) => value);

            const x = d3.scaleBand()
                .domain(sources)
                .range([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([0, d3.max(visitors)])
                .range([height, 0]);

            g.append(""g"")
                .selectAll("".bar"")
                .data(visitors)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", (d, i) => x(sources[i]))
                .attr(""y"", d => y(d))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d));

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Correct,836,837
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Pie Chart that visualizes the proportion of Visitors contributed by each Traffic Source in 2021-W01.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Traffic Source Pie Chart</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .slice {
            cursor: pointer;
        }
    </style>
</head>
<body>
    <svg width=""500"" height=""500""></svg>
    <script>
        const width = 500;
        const height = 500;
        const radius = Math.min(width, height) / 2;

        const svg = d3.select(""svg"")
            .attr(""width"", width)
            .attr(""height"", height)
            .append(""g"")
            .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
            const filteredData = data.filter(d => d.Week === '2021-W01');
            const trafficData = d3.nest()
                .key(d => d['Traffic Source'])
                .rollup(v => d3.sum(v, d => +d.Visitors))
                .entries(filteredData);

            const color = d3.scaleOrdinal(d3.schemeCategory10);
            const pie = d3.pie().value(d => d.value);
            const arc = d3.arc()
                .outerRadius(radius - 10)
                .innerRadius(0);

            const arcs = svg.selectAll("".slice"")
                .data(pie(trafficData))
                .enter()
                .append(""g"")
                .attr(""class"", ""slice"");

            arcs.append(""path"")
                .attr(""d"", arc)
                .attr(""fill"", (d, i) => color(i));

            arcs.append(""text"")
                .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                .attr(""dy"", "".35em"")
                .text(d => d.data.key);
        });
    </script>
</body>
</html>
```",Initialization Error,837,838
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Donut Chart that visualizes the distribution of Visitors among Traffic Source in 2021-W01.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Donut Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .arc {
            stroke: #fff;
        }
    </style>
</head>
<body>
    <svg width=""600"" height=""600""></svg>

    <script>

    const width = 600;
    const height = 600;
    const margin = 40;
    const radius = Math.min(width, height) / 2 - margin;

    const svg = d3.select(""svg"")
        .append(""g"")
        .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
        const filteredData = data.filter(d => d['Week'] === '2021-W01');
        
        const visitorsBySource = d3.sum(filteredData, d => +d['Visitors']);
        
        const trafficSourceData = d3.rollup(filteredData, v => d3.sum(v, d => +d['Visitors']), d => d['Traffic Source']);
        const formattedData = Array.from(trafficSourceData, ([key, value]) => ({ key, value }));

        const color = d3 scaleOrdinal()
            .domain(formattedData.map(d => d.key))
            .range(d3.schemeCategory10);

        const pie = d3.pie()
            .value(d => d.value);

        const arc = d3.arc()
            .innerRadius(radius * 0.4)
            .outerRadius(radius);

        const arcs = pie(formattedData);

        svg.selectAll(""arc"")
            .data(arcs)
            .enter()
            .append(""path"")
            .attr(""class"", ""arc"")
            .attr(""d"", arc)
            .attr(""fill"", d => color(d.data.key))
            .attr(""stroke"", ""#fff"")
            .attr(""stroke-width"", 1);
    });

    </script>
</body>
</html>
```",Initialization Error,838,839
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Coxcomb Chart(polar area chart) to compare the Visitors of different Traffic Source in 2021-W01.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coxcomb Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .arc {
            fill: steelblue;
            stroke: white;
            stroke-width: 1px;
        }
    </style>
</head>
<body>
    <svg width=""600"" height=""600""></svg>

    <script>
        const width = 600;
        const height = 600;
        const radius = Math.min(width, height) / 2;
        const svg = d3.select(""svg"")
                      .append(""g"")
                      .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
            const filteredData = data.filter(d => d[""Week""] === ""2021-W01"");
            const visitorsBySource = d3.rollup(filteredData, v => d3.sum(v, d => +d[""Visitors""]), d => d[""Traffic Source""]);
            
            const trafficSource = Array.from(visitorsBySource, ([source, visitors]) => ({ source, visitors }));
            const totalVisitors = d3.sum(trafficSource, d => d.visitors);

            const angleScale = d3.scaleBand()
                                 .domain(trafficSource.map(d => d.source))
                                 .range([0, 2 * Math.PI]);

            const radiusScale = d3.scaleLinear()
                                  .domain([0, d3.max(trafficSource, d => d.visitors)])
                                  .range([0, radius]);

            const arcGenerator = d3.arc()
                                   .innerRadius(0)
                                   .outerRadius(d => radiusScale(d.visitors))
                                   .startAngle(d => angleScale(d.source))
                                   .endAngle(d => angleScale(d.source) + angleScale.bandwidth());

            svg.selectAll("".arc"")
               .data(trafficSource)
               .enter().append(""path"")
               .attr(""class"", ""arc"")
               .attr(""d"", arcGenerator)
               .attr(""transform"", ""rotate(0)"")
               .attr(""fill"", (d, i) => d3.schemeCategory10[i % 10]);
        });
    </script>
</body>
</html>
```",Correct,839,840
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Radar Chart to compare the Visitors of different Traffic Source in 2021-W01.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Radar Chart</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .radar-chart {
            position: relative;
            width: 600px;
            height: 600px;
        }
        .axis {
            stroke: #ccc;
        }
        .area {
            fill-opacity: 0.6;
        }
    </style>
</head>
<body>
    <svg class=""radar-chart""></svg>
    <script>
        const width = 600, height = 600, margin = 50;
        
        const radarChartOptions = {
            w: width,
            h: height,
            margin: margin,
            color: d3.scaleOrdinal(d3.schemeCategory10),
        };

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
            const filteredData = data.filter(d => d.Week === '2021-W01');
            const trafficSources = [...new Set(filteredData.map(d => d[""Traffic Source""]))];
        
            const visitorsData = trafficSources.map(source => {
                const totalVisitors = d3.sum(filteredData.filter(d => d[""Traffic Source""] === source), d => +d.Visitors);
                return { source: source, visitors: totalVisitors };
            });

            const angleSlice = Math.PI * 2 / visitorsData.length;
            const radius = Math.min(radarChartOptions.w / 2, radarChartOptions.h / 2) - radarChartOptions.margin;

            const svg = d3.select('.radar-chart')
                .attr('width', radarChartOptions.w)
                .attr('height', radarChartOptions.h)
                .append('g')
                .attr('transform', `translate(${radarChartOptions.w / 2}, ${radarChartOptions.h / 2})`);

            const radialScale = d3.scaleLinear()
                .range([0, radius])
                .domain([0, d3.max(visitorsData, d => d.visitors)]);

            const radarLine = d3.lineRadial()
                .radius(d => radialScale(d.visitors))
                .angle((d, i) => i * angleSlice);

            svg.append('g').selectAll('.area')
                .data([visitorsData])
                .enter().append('path')
                .attr('class', 'area')
                .attr('d', radarLine)
                .style('fill', radarChartOptions.color(0));

            const axisGrid = svg.append('g').attr('class', 'axisGrid');
            for (let i = 0; i <= 5; i++) {
                const r = radius / 5 * i;
                axisGrid.selectAll('.gridCircle')
                    .data(visitorsData)
                    .enter().append('circle')
                    .attr('class', 'gridCircle')
                    .attr('r', r)
                    .style('fill', 'none')
                    .style('stroke', '#ccc');
            }

            const axis = svg.append('g').attr('class', 'axis');
            trafficSources.forEach((source, i) => {
                const angle = i * angleSlice;
                const x = radius * Math.cos(angle - Math.PI / 2);
                const y = radius * Math.sin(angle - Math.PI / 2);
                axis.append('line')
                    .attr('x1', 0)
                    .attr('y1', 0)
                    .attr('x2', x)
                    .attr('y2', y)
                    .attr('class', 'axis')
                    .style('stroke', '#ccc');

                axis.append('text')
                    .attr('x', x * 1.1)
                    .attr('y', y * 1.1)
                    .attr('class', 'legend')
                    .text(source);
            });
        });
    </script>
</body>
</html>
```",Correct,840,841
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Streamgraph that visualizes the changes of Visitors over the Week for each Traffic Source.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Streamgraph Example</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .stream {
            fill-opacity: 0.8;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = 800 - margin.left - margin.right,
              height = 400 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
            const processedData = d3.groups(data, d => d[""Traffic Source""])
                .map(([key, values]) => {
                    const visitorsByWeek = d3.rollup(values, v => d3.sum(v, d => +d[""Visitors""]), d => d[""Week""]);
                    return {
                        source: key,
                        data: Array.from(visitorsByWeek.entries()).map(([week, visitors]) => ({week, visitors}))
                    };
                });

            const series = d3.stack()
                .keys(processedData.map(d => d.source))
                (d3.transpose(processedData.map(d => d.data)));

            const x = d3.scaleBand()
                .domain(processedData[0].data.map(d => d.week))
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(series[series.length - 1], d => d[1])])
                .range([height, 0]);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            svg.append(""g"")
              .selectAll(""path"")
              .data(series)
              .enter().append(""path"")
              .attr(""class"", ""stream"")
              .attr(""d"", d3.area()
                  .x(d => x(d.data.week) + x.bandwidth() / 2)
                  .y0(d => y(d[0]))
                  .y1(d => y(d[1]))
              )
              .attr(""fill"", (d, i) => color(i));

            svg.append(""g"")
               .attr(""class"", ""axis--x"")
               .attr(""transform"", `translate(0,${height})`)
               .call(d3.axisBottom(x));

            svg.append(""g"")
               .attr(""class"", ""axis--y"")
               .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Initialization Error,841,842
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Slopegraph to compare the Visitors between 2021-W04 and 2021-W05 for each Traffic Source.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Visitors Slopegraph</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line {
            stroke: steelblue;
            stroke-width: 2px;
        }
        .circle {
            fill: white;
            stroke: steelblue;
            stroke-width: 2px;
        }
        .axis {
            font-size: 12px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const margin = {top: 50, right: 100, bottom: 50, left: 100},
              width = 800 - margin.left - margin.right,
              height = 400 - margin.top - margin.bottom;

        const svg = d3.select(""svg"").append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
            // Filter data for 2021-W04 and 2021-W05
            const filteredData = data.filter(d => d['Week'] === '2021-W04' || d['Week'] === '2021-W05');
            
            // Process data to get visitors for each traffic source
            const trafficSources = [...new Set(filteredData.map(d => d['Traffic Source']))];
            const visitors = {};

            trafficSources.forEach(source => {
                visitors[source] = {
                    '2021-W04': +filteredData.find(d => d['Week'] === '2021-W04' && d['Traffic Source'] === source)['Visitors'],
                    '2021-W05': +filteredData.find(d => d['Week'] === '2021-W05' && d['Traffic Source'] === source)['Visitors']
                };
            });

            const dataset = trafficSources.map(source => ({
                source,
                w04: visitors[source]['2021-W04'],
                w05: visitors[source]['2021-W05']
            }));

            const x = d3.scaleLinear()
                .domain([0, d3.max(dataset, d => Math.max(d.w04, d.w05))])
                .range([0, width]);

            const y = d3.scaleBand()
                .domain(dataset.map(d => d.source))
                .range([0, height])
                .padding(0.1);

            svg.append(""g"")
                .attr(""class"", ""axis"")
                .call(d3.axisLeft(y));

            svg.append(""g"")
                .attr(""class"", ""axis"")
                .attr(""transform"", `translate(0, ${height})`)
                .call(d3.axisBottom(x));

            // Draw lines and circles for each traffic source
            dataset.forEach(d => {
                svg.append(""line"")
                    .attr(""class"", ""line"")
                    .attr(""x1"", x(d.w04))
                    .attr(""y1"", y(d.source) + y.bandwidth() / 2)
                    .attr(""x2"", x(d.w05))
                    .attr(""y2"", y(d.source) + y.bandwidth() / 2);

                svg.append(""circle"")
                    .attr(""class"", ""circle"")
                    .attr(""cx"", x(d.w04))
                    .attr(""cy"", y(d.source) + y.bandwidth() / 2)
                    .attr(""r"", 5);

                svg.append(""circle"")
                    .attr(""class"", ""circle"")
                    .attr(""cx"", x(d.w05))
                    .attr(""cy"", y(d.source) + y.bandwidth() / 2)
                    .attr(""r"", 5);
            });
        });
    </script>
</body>
</html>
```",Unexpected Initial Result,842,843
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Heatmap that visualizes the Visitors across Traffic Source and Weeks.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Heatmap of Visitors</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .heatmap {
            display: grid;
            grid-template-columns: repeat(auto-fill, 50px);
        }
        .cell {
            width: 50px;
            height: 50px;
            border: 1px solid #ccc;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }
    </style>
</head>
<body>
    <div id=""heatmap"" class=""heatmap""></div>
    <script>
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
            const visitorsData = {};
            
            data.forEach(d => {
                const week = d['Week'];
                const source = d['Traffic Source'];
                const visitors = +d['Visitors'];
                
                if (!visitorsData[week]) {
                    visitorsData[week] = {};
                }
                if (!visitorsData[week][source]) {
                    visitorsData[week][source] = 0;
                }
                visitorsData[week][source] += visitors;
            });

            const weeks = Object.keys(visitorsData);
            const sources = Array.from(new Set(data.map(d => d['Traffic Source'])));
        
            const colorScale = d3.scaleSequential(d3.interpolateBlues)
                .domain([0, d3.max(data, d => +d['Visitors'])]);

            const heatmap = d3.select(""#heatmap"");

            weeks.forEach(week => {
                sources.forEach(source => {
                    const visitors = visitorsData[week][source] || 0;
                    heatmap.append(""div"")
                        .attr(""class"", ""cell"")
                        .style(""background-color"", colorScale(visitors))
                        .text(visitors);
                });
            });

        });
    </script>
</body>
</html>
```",Correct,843,844
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Stacked Bar Chart</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .bar {
            transition: all 0.3s;
        }
        .bar:hover {
            opacity: 0.7;
        }
        .axis--x path {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
            const keys = [""Visitors"", ""Page Views"", ""Bounce Rate"", ""Average Session Duration"", ""Conversion Rate""];
            data.forEach(d => {
                keys.forEach(key => {
                    d[key] = +d[key]; // Convert to numbers
                });
            });

            const x0 = d3.scaleBand()
                .domain(data.map(d => d.Week))
                .range([0, width])
                .paddingInner(0.1);

            const x1 = d3.scaleBand()
                .domain(keys)
                .range([0, x0.bandwidth()])
                .padding(0.05);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d3.sum(keys, key => d[key]))])
                .nice()
                .range([height, 0]);

            const color = d3.scaleOrdinal()
                .domain(keys)
                .range(d3.schemeCategory10);

            g.append(""g"")
                .selectAll(""g"")
                .data(data)
                .enter().append(""g"")
                .attr(""transform"", d => `translate(${x0(d.Week)}, 0)`)
                .selectAll(""rect"")
                .data(d => keys.map(key => ({key: key, value: d[key]})))
                .enter().append(""rect"")
                .attr(""x"", d => x1(d.key))
                .attr(""y"", d => y(d.value))
                .attr(""width"", x1.bandwidth())
                .attr(""height"", d => height - y(d.value))
                .attr(""fill"", d => color(d.key));

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0, ${height})`)
                .call(d3.axisBottom(x0));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Correct,844,845
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Horizontal Bar Chart that visualizes the Visitors for each Traffic Source in 2021-W01.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",D3,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Visitors by Traffic Source</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"").then(data => {
            data = data.filter(d => d.Week === '2021-W01');
            data.forEach(d => {
                d.Visitors = +d[""Visitors""];
            });

            const x = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.Visitors)])
                .range([0, width]);

            const y = d3.scaleBand()
                .domain(data.map(d => d[""Traffic Source""]))
                .range([0, height])
                .padding(0.1);

            g.append(""g"")
                .selectAll("".bar"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", 0)
                .attr(""y"", d => y(d[""Traffic Source""]))
                .attr(""width"", d => x(d.Visitors))
                .attr(""height"", y.bandwidth());

            g.append(""g"")
                .attr(""class"", ""axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis--y"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
```",Correct,845,846
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot that visualizes the relationship between Visitors and Page Views.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Visitors vs Page Views</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
        .then(response => response.text())
        .then(data => {
            const lines = data.split('\n').slice(1);
            const visitors = [];
            const pageViews = [];

            lines.forEach(line => {
                const columns = line.split(',');
                if (columns.length > 0) {
                    const visitorsValue = parseInt(columns[2], 10);
                    const pageViewsValue = parseInt(columns[3], 10);
                    if (!isNaN(visitorsValue) && !isNaN(pageViewsValue)) {
                        visitors.push(visitorsValue);
                        pageViews.push(pageViewsValue);
                    }
                }
            });

            const chartDom = document.getElementById('main');
            const myChart = echarts.init(chartDom);
            const option = {
                title: {
                    text: 'Scatterplot of Visitors vs Page Views'
                },
                tooltip: {},
                xAxis: {
                    name: 'Visitors',
                    type: 'value'
                },
                yAxis: {
                    name: 'Page Views',
                    type: 'value'
                },
                series: [{
                    symbolSize: 10,
                    data: visitors.map((v, i) => [v, pageViews[i]]),
                    type: 'scatter'
                }]
            };
            myChart.setOption(option);
        });
    </script>
</body>
</html>
```",Correct,846,847
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Line Chart that visualizes the trend of Visitors over the Week for each Traffic Source.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Visitors Trend by Traffic Source</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const visitorsData = {};
                
                rows.forEach(row => {
                    const columns = row.split(',');
                    const week = columns[0];
                    const trafficSource = columns[1];
                    const visitors = parseInt(columns[2]);

                    if (!visitorsData[trafficSource]) {
                        visitorsData[trafficSource] = [];
                    }

                    visitorsData[trafficSource].push({ week, visitors });
                });

                const series = [];
                const weeks = Array.from(new Set(rows.map(row => row.split(',')[0])));

                for (const [trafficSource, values] of Object.entries(visitorsData)) {
                    const dataPoints = weeks.map(week => {
                        const point = values.find(v => v.week === week);
                        return point ? point.visitors : 0;
                    });
                    series.push({
                        name: trafficSource,
                        type: 'line',
                        data: dataPoints
                    });
                }

                const option = {
                    title: {
                        text: 'Visitors Trend by Traffic Source'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    legend: {
                        data: Object.keys(visitorsData)
                    },
                    xAxis: {
                        type: 'category',
                        data: weeks
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: series
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,847,848
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Bar Chart that visualizes the Visitors for each Traffic Source in 2021-W01.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Website Traffic Visitors Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 600px;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const visitorsData = {};
                
                rows.forEach(row => {
                    const columns = row.split(',');
                    const week = columns[0].trim();
                    const trafficSource = columns[1].trim();
                    const visitors = parseInt(columns[2].trim(), 10);
                    
                    if (week === '2021-W01') {
                        if (!visitorsData[trafficSource]) {
                            visitorsData[trafficSource] = 0;
                        }
                        visitorsData[trafficSource] += visitors;
                    }
                });

                const trafficSources = Object.keys(visitorsData);
                const visitors = Object.values(visitorsData);

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);
                const option = {
                    title: {
                        text: 'Visitors by Traffic Source in 2021-W01'
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: trafficSources
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        name: 'Visitors',
                        type: 'bar',
                        data: visitors
                    }]
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,848,849
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Pie Chart that visualizes the proportion of Visitors contributed by each Traffic Source in 2021-W01.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Traffic Source Pie Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 600px; height: 400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n');
                const headers = lines[0].split(',');
                const trafficSourceIndex = headers.indexOf('Traffic Source');
                const visitorsIndex = headers.indexOf('Visitors');
                const weekIndex = headers.indexOf('Week');
                
                const trafficData = {};
                
                lines.slice(1).forEach(line => {
                    const cols = line.split(',');
                    if (cols[weekIndex] === '2021-W01') {
                        const source = cols[trafficSourceIndex];
                        const visitors = parseInt(cols[visitorsIndex], 10);
                        if (trafficData[source]) {
                            trafficData[source] += visitors;
                        } else {
                            trafficData[source] = visitors;
                        }
                    }
                });

                const pieData = Object.entries(trafficData).map(([key, value]) => ({ name: key, value }));

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);
                
                const option = {
                    title: {
                        text: 'Visitors by Traffic Source (2021-W01)',
                        subtext: 'Source: Website Traffic Data',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    series: [
                        {
                            name: 'Traffic Source',
                            type: 'pie',
                            radius: '50%',
                            data: pieData,
                            emphasis: {
                                itemStyle: {
                                    shadowBlur: 10,
                                    shadowOffsetX: 0,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            },
                            itemStyle: {
                                borderColor: '#fff',
                                borderWidth: 1
                            },
                        }
                    ]
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,849,850
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Donut Chart that visualizes the distribution of Visitors among Traffic Source in 2021-W01.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Donut Chart - Visitors by Traffic Source</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 600px;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const visitorsData = {};

                rows.forEach(row => {
                    const columns = row.split(',');
                    if (columns.length > 1) {
                        const week = columns[0];
                        const trafficSource = columns[1];
                        const visitors = parseInt(columns[2]);

                        if (week === '2021-W01') {
                            if (!visitorsData[trafficSource]) {
                                visitorsData[trafficSource] = 0;
                            }
                            visitorsData[trafficSource] += visitors;
                        }
                    }
                });

                const seriesData = Object.entries(visitorsData).map(([source, visitors]) => ({
                    name: source,
                    value: visitors
                }));

                const myChart = echarts.init(document.getElementById('main'));
                const option = {
                    title: {
                        text: 'Visitors by Traffic Source (2021-W01)',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    legend: {
                        orient: 'vertical',
                        left: 'left'
                    },
                    series: [
                        {
                            name: 'Traffic Source',
                            type: 'pie',
                            radius: ['40%', '70%'],
                            avoidLabelOverlap: false,
                            label: {
                                show: true,
                                position: 'outside'
                            },
                            emphasis: {
                                label: {
                                    show: true,
                                    fontSize: '18',
                                    fontWeight: 'bold'
                                }
                            },
                            labelLine: {
                                show: true
                            },
                            data: seriesData
                        }
                    ]
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,850,851
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Coxcomb Chart(polar area chart) to compare the Visitors of different Traffic Source in 2021-W01.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coxcomb Chart Example</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 600px; height: 400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const visitorsData = rows
                    .filter(row => row.includes('2021-W01'))
                    .map(row => {
                        const columns = row.split(',');
                        return {
                            trafficSource: columns[1],
                            visitors: +columns[2]
                        };
                    });

                const trafficSources = visitorsData.map(item => item.trafficSource);
                const visitors = visitorsData.map(item => item.visitors);

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    title: {
                        text: 'Visitors by Traffic Source (2021-W01)',
                        left: 'center'
                    },
                    legend: {
                        orient: 'vertical',
                        right: '10%',
                        data: trafficSources
                    },
                    series: [{
                        name: 'Visitors',
                        type: 'pie',
                        radius: ['30%', '70%'],
                        center: ['50%', '50%'],
                        roseType: 'area',
                        data: trafficSources.map((source, index) => ({
                            value: visitors[index],
                            name: source
                        })),
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }]
                };

                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Unexpected Initial Result,851,852
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Radar Chart to compare the Visitors of different Traffic Source in 2021-W01.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Radar Chart - Visitors by Traffic Source</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 600px; height: 400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const visitorsBySource = {};

                lines.forEach(line => {
                    const entries = line.split(',');
                    const week = entries[0].trim();
                    const source = entries[1].trim();
                    const visitors = parseInt(entries[2].trim(), 10);

                    if (week === '2021-W01') {
                        if (!visitorsBySource[source]) {
                            visitorsBySource[source] = 0;
                        }
                        visitorsBySource[source] += visitors;
                    }
                });

                const sources = Object.keys(visitorsBySource);
                const visitors = sources.map(source => visitorsBySource[source]);

                const option = {
                    title: {
                        text: 'Visitors by Traffic Source (2021-W01)'
                    },
                    tooltip: {},
                    legend: {
                        data: ['Visitors']
                    },
                    radar: {
                        indicator: sources.map(source => ({ name: source, max: Math.max(...visitors) + 100 }))
                    },
                    series: [{
                        name: 'Visitors',
                        type: 'radar',
                        data: [{
                            value: visitors,
                            name: 'Visitors'
                        }]
                    }]
                };

                const myChart = echarts.init(document.getElementById('main'));
                myChart.setOption(option);
            })
            .catch(error => console.error('Error fetching the data: ', error));
    </script>
</body>
</html>
```",Correct,852,853
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Streamgraph that visualizes the changes of Visitors over the Week for each Traffic Source.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Streamgraph of Website Traffic</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const weeks = [];
                const trafficSources = new Set();
                const visitorsData = {};

                rows.forEach(row => {
                    const columns = row.split(',');
                    const week = columns[0].trim();
                    const trafficSource = columns[1].trim();
                    const visitors = parseInt(columns[2].trim(), 10);

                    if (!weeks.includes(week)) {
                        weeks.push(week);
                    }
                    trafficSources.add(trafficSource);

                    if (!visitorsData[trafficSource]) {
                        visitorsData[trafficSource] = Array(weeks.length).fill(0);
                    }

                    const weekIndex = weeks.indexOf(week);
                    visitorsData[trafficSource][weekIndex] += visitors;
                });

                const seriesData = [];
                trafficSources.forEach(source => {
                    seriesData.push({
                        name: source,
                        type: 'line',
                        smooth: true,
                        data: visitorsData[source]
                    });
                });

                const option = {
                    title: {
                        text: 'Website Visitors by Traffic Source',
                        subtext: 'Streamgraph visualization'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    legend: {
                        data: Array.from(trafficSources)
                    },
                    xAxis: {
                        type: 'category',
                        data: weeks,
                        boundaryGap: false
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: seriesData.map(source => ({
                        name: source.name,
                        type: 'line',
                        areaStyle: {},
                        data: source.data
                    }))
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,853,854
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Slopegraph to compare the Visitors between 2021-W04 and 2021-W05 for each Traffic Source.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Visitors Slopegraph</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1);
            const visitorsData = {};

            rows.forEach(row => {
                const columns = row.split(',');
                const week = columns[0];
                const trafficSource = columns[1];
                const visitors = parseInt(columns[2], 10);

                if (week === '2021-W04' || week === '2021-W05') {
                    if (!visitorsData[trafficSource]) {
                        visitorsData[trafficSource] = { '2021-W04': 0, '2021-W05': 0 };
                    }
                    visitorsData[trafficSource][week] = visitors;
                }
            });

            const trafficSources = Object.keys(visitorsData);
            const seriesData = trafficSources.map(source => {
                return [
                    { name: source, value: visitorsData[source]['2021-W04'] },
                    { name: source, value: visitorsData[source]['2021-W05'] }
                ];
            }).flat();

            const option = {
                title: {
                    text: 'Visitors Slopegraph (2021-W04 vs 2021-W05)',
                    left: 'center'
                },
                tooltip: {},
                xAxis: {
                    type: 'value',
                    position: 'top',
                    splitLine: { show: false }
                },
                yAxis: {
                    type: 'category',
                    data: trafficSources,
                    inverse: true,
                },
                series: [{
                    name: 'Visitors',
                    type: 'line',
                    data: seriesData,
                    smooth: true,
                    lineStyle: {
                        width: 2
                    },
                    symbol: 'circle',
                    symbolSize: 8,
                }]
            };

            const chart = echarts.init(document.getElementById('main'));
            chart.setOption(option);
        });
    </script>
</body>
</html>
```",Correct,854,855
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Heatmap that visualizes the Visitors across Traffic Source and Weeks.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Traffic Source Heatmap</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""heatmap"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const weeks = [];
                const trafficSources = [];
                const visitorData = {};

                lines.forEach(line => {
                    const [week, trafficSource, visitors] = line.split(',');
                    if (week && trafficSource && visitors) {
                        if (!weeks.includes(week)) weeks.push(week);
                        if (!trafficSources.includes(trafficSource)) trafficSources.push(trafficSource);
                        visitorData[`${week}-${trafficSource}`] = parseInt(visitors) || 0;
                    }
                });

                const heatmapData = [];
                trafficSources.forEach((source, i) => {
                    weeks.forEach((week, j) => {
                        heatmapData.push([j, i, visitorData[`${week}-${source}`] || 0]);
                    });
                });

                const myChart = echarts.init(document.getElementById('heatmap'));

                const option = {
                    tooltip: {
                        position: 'top'
                    },
                    grid: {
                        height: '50%',
                        width: '70%',
                        top: '10%'
                    },
                    xAxis: {
                        type: 'category',
                        data: weeks,
                        silent: true,
                        splitLine: {
                            show: false
                        }
                    },
                    yAxis: {
                        type: 'category',
                        data: trafficSources,
                        silent: true,
                        splitLine: {
                            show: false
                        }
                    },
                    visualMap: {
                        min: 0,
                        max: Math.max(...heatmapData.map(item => item[2])),
                        calculable: true,
                        orient: 'vertical',
                        left: 'right',
                        top: 'middle',
                        inRange: {
                            color: ['#ffffff', '#ff0000']
                        }
                    },
                    series: [{
                        name: 'Visitors',
                        type: 'heatmap',
                        data: heatmapData,
                        label: {
                            show: true
                        },
                        emphasis: {
                            itemStyle: {
                                borderColor: '#333',
                                borderWidth: 1
                            }
                        }
                    }]
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,855,856
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Stacked Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const weeks = [];
                const sources = {};
                const seriesData = {};

                rows.forEach(row => {
                    const cols = row.split(',');
                    const week = cols[0];
                    const source = cols[1];
                    const visitors = parseFloat(cols[2]);

                    if (!weeks.includes(week)) {
                        weeks.push(week);
                    }

                    if (!sources[source]) {
                        sources[source] = true;
                        seriesData[source] = new Array(weeks.length).fill(0);
                    }
                    
                    const index = weeks.indexOf(week);
                    seriesData[source][index] += visitors;
                });

                const legend = Object.keys(seriesData);
                const series = legend.map(source => ({
                    name: source,
                    type: 'bar',
                    stack: 'total',
                    data: seriesData[source]
                }));

                const option = {
                    title: {
                        text: 'Website Traffic by Source',
                        subtext: 'Stacked Bar Chart',
                    },
                    tooltip: {
                        trigger: 'axis',
                    },
                    legend: {
                        data: legend,
                    },
                    xAxis: {
                        type: 'category',
                        data: weeks,
                    },
                    yAxis: {
                        type: 'value',
                    },
                    series: series,
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,856,857
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Horizontal Bar Chart that visualizes the Visitors for each Traffic Source in 2021-W01.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",ECharts,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Traffic Source Visitors - ECharts</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const visitorsData = {};

                rows.forEach(row => {
                    const columns = row.split(',');
                    const week = columns[0].trim();
                    const trafficSource = columns[1].trim();
                    const visitors = parseInt(columns[2].trim());

                    if (week === '2021-W01') {
                        if (!visitorsData[trafficSource]) {
                            visitorsData[trafficSource] = 0;
                        }
                        visitorsData[trafficSource] += visitors;
                    }
                });

                const trafficSources = Object.keys(visitorsData);
                const visitorsCount = trafficSources.map(source => visitorsData[source]);

                const chart = echarts.init(document.getElementById('main'));
                const option = {
                    title: {
                        text: 'Visitors for Traffic Sources in 2021-W01',
                        subtext: 'Data Source: Website Traffic'
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'value'
                    },
                    yAxis: {
                        type: 'category',
                        data: trafficSources
                    },
                    series: [{
                        name: 'Visitors',
                        type: 'bar',
                        data: visitorsCount,
                        label: {
                            show: true,
                            position: 'insideRight'
                        }
                    }]
                };

                chart.setOption(option);
            });
    </script>
</body>
</html>
```",Correct,857,858
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Scatterplot that visualizes the relationship between Visitors and Page Views.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot Example</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.8.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.1""></script>
</head>
<body>
<div id=""vis""></div>
<script type=""text/javascript"">
    const spec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""title"": ""Scatterplot of Visitors vs Page Views"",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
            ""format"": {
                ""type"": ""csv""
            }
        },
        ""mark"": ""point"",
        ""encoding"": {
            ""x"": {
                ""field"": ""Visitors"",
                ""type"": ""quantitative"",
                ""title"": ""Number of Visitors""
            },
            ""y"": {
                ""field"": ""Page Views"",
                ""type"": ""quantitative"",
                ""title"": ""Number of Page Views""
            },
            ""tooltip"": [
                {""field"": ""Week"", ""type"": ""ordinal""},
                {""field"": ""Traffic Source"", ""type"": ""nominal""},
                {""field"": ""Region"", ""type"": ""nominal""},
                {""field"": ""Device Type"", ""type"": ""nominal""}
            ]
        }
    };

    vegaEmbed('#vis', spec).then(result => {
        // Access the underlying Vega view instance:
        const view = result.view;
    }).catch(console.error);
</script>
</body>
</html>
```",Correct,858,859
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Line Chart that visualizes the trend of Visitors over the Week for each Traffic Source.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Visitors Trend by Traffic Source</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.3.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.1""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Week"",
                    ""type"": ""temporal""
                },
                ""y"": {
                    ""field"": ""Visitors"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Traffic Source"",
                    ""type"": ""nominal""
                }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Unexpected Initial Result,859,860
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Bar Chart that visualizes the Visitors for each Traffic Source in 2021-W01.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Visitors by Traffic Source</title>
    <script src=""https://cdn.jsdelivr.net/npm.vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm.vega-lite@5.5.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm Vega-Embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum['Week'] === '2021-W01'""
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Traffic Source"",
                    ""type"": ""nominal"",
                    ""axis"": { ""labelAngle"": 0 }
                },
                ""y"": {
                    ""field"": ""Visitors"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Traffic Source"",
                    ""type"": ""nominal""
                }
            }
        };

        vegaEmbed('#vis', spec)
            .then(result => {})
            .catch(console.error);
    </script>
</body>
</html>
```",Unexpected Initial Result,860,861
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Pie Chart that visualizes the proportion of Visitors contributed by each Traffic Source in 2021-W01.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Visitors by Traffic Source - 2021-W01</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
    <style>
        #vis {
            width: 600px;
            height: 400px;
        }
    </style>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum['Week'] === '2021-W01'""
                },
                {
                    ""aggregate"": [
                        {
                            ""op"": ""sum"",
                            ""field"": ""Visitors"",
                            ""as"": ""Total Visitors""
                        }
                    ],
                    ""groupby"": [""Traffic Source""]
                }
            ],
            ""mark"": ""arc"",
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Total Visitors"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Traffic Source"",
                    ""type"": ""nominal""
                }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Correct,861,862
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Donut Chart that visualizes the distribution of Visitors among Traffic Source in 2021-W01.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Donut Chart of Visitors by Traffic Source</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.1.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A donut chart showing the distribution of visitors among traffic sources in 2021-W01."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""field"": ""Week"",
                        ""equal"": ""2021-W01""
                    }
                }
            ],
            ""mark"": {
                ""type"": ""arc"",
                ""innerRadius"": 50
            },
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Visitors"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Traffic Source"",
                    ""type"": ""nominal""
                },
                ""tooltip"": [
                    {""field"": ""Traffic Source"", ""type"": ""nominal""},
                    {""field"": ""Visitors"", ""type"": ""quantitative""}
                ]
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Correct,862,863
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Coxcomb Chart(polar area chart) to compare the Visitors of different Traffic Source in 2021-W01.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coxcomb Chart Example</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""field"": ""Week"",
                        ""equal"": ""2021-W01""
                    }
                }
            ],
            ""mark"": ""arc"",
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Visitors"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Traffic Source"",
                    ""type"": ""nominal""
                },
                ""radius"": {
                    ""value"": 100
                }
            },
            ""view"": {
                ""stroke"": null
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Unexpected Initial Result,863,864
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Radar Chart to compare the Visitors of different Traffic Source in 2021-W01.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html>
<head>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.19.2""></script>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""Radar Chart comparing Visitors from different Traffic Sources in 2021-W01"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum['Week'] === '2021-W01'""
                }
            ],
            ""mark"": ""line"",
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Traffic Source"",
                    ""type"": ""ordinal""
                },
                ""radius"": {
                    ""field"": ""Visitors"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Traffic Source"",
                    ""type"": ""nominal""
                }
            }
        };

        window.onload = function() {
            vegaEmbed('#vis', spec);
        };
    </script>
</head>
<body>
    <div id=""vis""></div>
</body>
</html>
```",Initialization Error,864,865
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Streamgraph that visualizes the changes of Visitors over the Week for each Traffic Source.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Streamgraph Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A Streamgraph showing changes in Visitors over Week for each Traffic Source."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": {
                ""type"": ""area"",
                ""interpolate"": ""monotone""
            },
            ""encoding"": {
                ""x"": {
                    ""field"": ""Week"",
                    ""type"": ""ordinal"",
                    ""title"": ""Week""
                },
                ""y"": {
                    ""field"": ""Visitors"",
                    ""aggregate"": ""sum"",
                    ""type"": ""quantitative"",
                    ""title"": ""Total Visitors""
                },
                ""color"": {
                    ""field"": ""Traffic Source"",
                    ""type"": ""nominal"",
                    ""title"": ""Traffic Source""
                },
                ""tooltip"": [
                    {""field"": ""Traffic Source"", ""type"": ""nominal""},
                    {""field"": ""Visitors"", ""type"": ""quantitative""}
                ]
            },
            ""width"": 800,
            ""height"": 400
        };

        vegaEmbed('#vis', spec).then(function (result) {
            // Access the specification and view
            console.log(result.spec);
        }).catch(console.error);
    </script>
</body>
</html>
```",Correct,865,866
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Slopegraph to compare the Visitors between 2021-W04 and 2021-W05 for each Traffic Source.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Slopegraph of Visitors</title>
    <script src=""https://cdn.jsdelivr.net/npmvega@5.21.0/build/vega.js""></script>
    <script src=""https://cdn.jsdelivr.net/npmvega-lite@5.3.0/build/vega-lite.js""></script>
    <script src=""https://cdn.jsdelivr.net/npmvega-embed@6.20.2/build/vega-embed.js""></script>
</head>
<body>
    <div id=""vis""></div>
    <script type=""text/javascript"">
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""or"": [
                            {""field"": ""Week"", ""equal"": ""2021-W04""},
                            {""field"": ""Week"", ""equal"": ""2021-W05""}
                        ]
                    }
                },
                {
                    ""groupby"": [""Traffic Source"", ""Week""],
                    ""aggregate"": [{""op"": ""sum"", ""field"": ""Visitors"", ""as"": ""Visitors""}]
                }
            ],
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Week"",
                    ""type"": ""ordinal"",
                    ""axis"": {
                        ""title"": ""Week""
                    }
                },
                ""y"": {
                    ""field"": ""Visitors"",
                    ""type"": ""quantitative"",
                    ""axis"": {
                        ""title"": ""Number of Visitors""
                    }
                },
                ""color"": {
                    ""field"": ""Traffic Source"",
                    ""type"": ""nominal"",
                    ""title"": ""Traffic Source""
                },
                ""tooltip"": [
                    {""field"": ""Traffic Source"", ""title"": ""Traffic Source""},
                    {""field"": ""Visitors"", ""title"": ""Visitors""},
                    {""field"": ""Week"", ""title"": ""Week""}
                ]
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Initialization Error,866,867
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Heatmap that visualizes the Visitors across Traffic Source and Weeks.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Visitors Heatmap</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/vega/5.20.2/vega.min.js""></script>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/vega-lite/5.6.0/vega-lite.min.js""></script>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/vega-embed/6.20.1/vega-embed.min.js""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""rect"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Week"",
                    ""type"": ""ordinal""
                },
                ""y"": {
                    ""field"": ""Traffic Source"",
                    ""type"": ""ordinal""
                },
                ""color"": {
                    ""field"": ""Visitors"",
                    ""type"": ""quantitative"",
                    ""scale"": {
                        ""scheme"": ""blues""
                    }
                },
                ""tooltip"": [
                    {""field"": ""Traffic Source"", ""type"": ""ordinal""},
                    {""field"": ""Week"", ""type"": ""ordinal""},
                    {""field"": ""Visitors"", ""type"": ""quantitative""}
                ]
            },
            ""width"": 600,
            ""height"": 300
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Correct,867,868
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Stacked Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A stacked bar chart showing website traffic by source, region, and device type."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Week"",
                    ""type"": ""ordinal"",
                    ""axis"": {
                        ""title"": ""Week""
                    }
                },
                ""y"": {
                    ""aggregate"": ""sum"",
                    ""field"": ""Visitors"",
                    ""type"": ""quantitative"",
                    ""axis"": {
                        ""title"": ""Visitors""
                    }
                },
                ""color"": {
                    ""field"": ""Traffic Source"",
                    ""type"": ""nominal"",
                    ""legend"": {
                        ""title"": ""Traffic Source""
                    }
                },
                ""tooltip"": [
                    {""field"": ""Traffic Source"", ""type"": ""nominal""},
                    {""field"": ""Visitors"", ""type"": ""quantitative""}
                ]
            },
            ""config"": {
                ""view"": {
                    ""stroke"": ""transparent""
                }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Correct,868,869
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type
Your task is to create a Horizontal Bar Chart that visualizes the Visitors for each Traffic Source in 2021-W01.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv

The data table contains the following columns: Week,Traffic Source,Visitors,Page Views,Bounce Rate,Average Session Duration,Conversion Rate,Region,Device Type",Vega-Lite,static view,"```html
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Visitors by Traffic Source - 2021-W01</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/08fc4230fd11b6b920476195d9dc9b1d/raw/5c9171e19ff05e1e86204f735d00664814cc46e6/Website%2520Traffic.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""field"": ""Week"",
                        ""equal"": ""2021-W01""
                    }
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""y"": {
                    ""field"": ""Traffic Source"",
                    ""type"": ""nominal"",
                    ""sort"": ""-y"",
                    ""title"": ""Traffic Source""
                },
                ""x"": {
                    ""field"": ""Visitors"",
                    ""type"": ""quantitative"",
                    ""title"": ""Visitors""
                }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
```",Correct,869,870
