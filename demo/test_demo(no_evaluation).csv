title,Prompt,dataset,library,view_type,response,evaluation,originalIndex,Prompt Number
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,interactive view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Net Income vs Revenue</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter-point {
            fill: steelblue;
            opacity: 0.7;
        }
        .scatter-point:hover {
            fill: orange;
        }
        .axis-label {
            font-family: Arial, sans-serif;
            font-size: 12px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""500""></svg>

    <script>
        const svg = d3.select(""svg"");
        const margin = {top: 20, right: 30, bottom: 40, left: 60};
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            data.forEach(d => {
                d['Net Income'] = +d['Net Income'];
                d['Revenue'] = +d['Revenue'];
            });

            x.domain(d3.extent(data, d => d['Revenue'])).nice();
            y.domain(d3.extent(data, d => d['Net Income'])).nice();

            g.append(""g"")
                .attr(""class"", ""x-axis axis-label"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""y-axis axis-label"")
                .call(d3.axisLeft(y));

            const scatterpoints = g.selectAll("".scatter-point"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""scatter-point"")
                .attr(""cx"", d => x(d['Revenue']))
                .attr(""cy"", d => y(d['Net Income']))
                .attr(""r"", 5)
                .on(""mouseover"", function(event, d) {
                    d3.select(this)
                        .transition()
                        .duration(200)
                        .attr(""r"", 10);

                    g.append(""text"")
                        .attr(""id"", ""tooltip"")
                        .attr(""x"", x(d['Revenue']))
                        .attr(""y"", y(d['Net Income']) - 10)
                        .attr(""text-anchor"", ""middle"")
                        .text(`Net Income: ${d['Net Income']}, Revenue: ${d['Revenue']}`);
                })
                .on(""mouseout"", function() {
                    d3.select(this)
                        .transition()
                        .duration(200)
                        .attr(""r"", 5);
                    d3.select(""#tooltip"").remove();
                });
        });
    </script>
</body>
</html>
",,0,1
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,interactive view,"
<!DOCTYPE html>
<html lang=""en"">

<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income vs Revenue Scatterplot</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .scatter {
            fill-opacity: 0.6;
        }

        .selected {
            fill: orange;
        }
    </style>
</head>

<body>
    <svg width=""800"" height=""600""></svg>
    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 40 },
            width = 800 - margin.left - margin.right,
            height = 600 - margin.top - margin.bottom;

        const svg = d3.select(""svg"").append(""g"").attr(""transform"", 
            `translate(${margin.left},${margin.top})`);

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        const brush = d3.brush()
            .extent([[0, 0], [width, height]])
            .on(""brush end"", brushed);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            data.forEach(d => {
                d['Net Income'] = +d['Net Income'];
                d['Revenue'] = +d['Revenue'];
            });

            x.domain(d3.extent(data, d => d['Revenue'])).nice();
            y.domain(d3.extent(data, d => d['Net Income'])).nice();

            svg.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""class"", ""y axis"")
                .call(d3.axisLeft(y));

            svg.append(""g"")
                .attr(""class"", ""brush"")
                .call(brush);

            const points = svg.selectAll("".dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot scatter"")
                .attr(""cx"", d => x(d['Revenue']))
                .attr(""cy"", d => y(d['Net Income']))
                .attr(""r"", 5);

            function brushed(event) {
                const selection = event.selection;
                if (selection) {
                    const [[x0, y0], [x1, y1]] = selection;

                    points.classed(""selected"", d => {
                        const cx = x(d['Revenue']);
                        const cy = y(d['Net Income']);
                        return x0 <= cx && cx <= x1 && y0 <= cy && cy <= y1;
                    });
                }
            }
        });
    </script>
</body>

</html>
",,1,2
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,interactive view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <title>Net Income vs Revenue Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter {
            fill-opacity: 0.7;
        }
        .scatter:hover {
            fill-opacity: 1;
        }
        .axis {
            font: 10px sans-serif;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script>
        const svg = d3.select(""svg""),
            margin = {top: 20, right: 30, bottom: 30, left: 40},
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom,
            g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            data.forEach(d => {
                d['Net Income'] = +d['Net Income'];
                d['Revenue'] = +d['Revenue'];
            });

            const x = d3.scaleLinear()
                .domain(d3.extent(data, d => d['Revenue'])).nice()
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain(d3.extent(data, d => d['Net Income'])).nice()
                .range([height, 0]);

            const xAxis = d3.axisBottom(x);
            const yAxis = d3.axisLeft(y);

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(xAxis);

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(yAxis);

            g.selectAll("".scatter"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""scatter"")
                .attr(""cx"", d => x(d['Revenue']))
                .attr(""cy"", d => y(d['Net Income']))
                .attr(""r"", 5);

            svg.call(d3.zoom().scaleExtent([1, 10]).on(""zoom"", zoomed));
        });

        function zoomed(event) {
            const new_xScale = event.transform.rescaleX(d3.scaleLinear()
                .domain(d3.extent(d3.range(0, width))).nice()
                .range([0, width]));
            const new_yScale = event.transform.rescaleY(d3.scaleLinear()
                .domain(d3.extent(d3.range(0, height))).nice()
                .range([height, 0]));
            
            g.selectAll("".scatter"")
                .attr(""cx"", d => new_xScale(d['Revenue']))
                .attr(""cy"", d => new_yScale(d['Net Income']));

            g.select("".axis--x"").call(d3.axisBottom(new_xScale));
            g.select("".axis--y"").call(d3.axisLeft(new_yScale));
        }
    </script>
</body>
</html>
",,2,3
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Net Income and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,interactive view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income vs Revenue Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatterplot {
            border: 1px solid #ccc;
            margin: 20px;
        }
        .tooltip {
            position: absolute;
            text-align: center;
            padding: 5px;
            background: lightsteelblue;
            border: 1px solid #6c757d;
            border-radius: 3px;
            pointer-events: none;
        }
    </style>
</head>
<body>
<svg class=""scatterplot"" width=""800"" height=""500""></svg>
<script>
    const width = 800;
    const height = 500;

    const svg = d3.select("".scatterplot"")
        .attr(""width"", width)
        .attr(""height"", height);

    const xScale = d3.scaleLinear().range([50, width - 50]);
    const yScale = d3.scaleLinear().range([height - 50, 50]);

    const xAxisGroup = svg.append(""g"").attr(""class"", ""x-axis"").attr(""transform"", ""translate(0,"" + (height - 50) + "")"");
    const yAxisGroup = svg.append(""g"").attr(""class"", ""y-axis"").attr(""transform"", ""translate(50,0)"");

    const tooltip = d3.select(""body"").append(""div"")
        .attr(""class"", ""tooltip"")
        .style(""opacity"", 0);

    d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
        data.forEach(d => {
            d[""Net Income""] = +d[""Net Income""];
            d[""Revenue""] = +d[""Revenue""];
        });

        xScale.domain([0, d3.max(data, d => d[""Revenue""])]);
        yScale.domain([0, d3.max(data, d => d[""Net Income""])]);

        svg.append(""g"")
            .call(d3.axisLeft(yScale));

        svg.append(""g"")
            .call(d3.axisBottom(xScale))
            .attr(""transform"", ""translate(0,"" + (height - 50) + "")"");

        svg.selectAll(""circle"")
            .data(data)
            .enter().append(""circle"")
            .attr(""cx"", d => xScale(d[""Revenue""]))
            .attr(""cy"", d => yScale(d[""Net Income""]))
            .attr(""r"", 5)
            .attr(""fill"", ""steelblue"")
            .on(""mouseover"", function(event, d) {
                tooltip.transition().duration(200).style(""opacity"", .9);
                tooltip.html(`Company: ${d.Company}<br>Net Income: ${d[""Net Income""]}<br>Revenue: ${d[""Revenue""]}`)
                    .style(""left"", (event.pageX + 5) + ""px"")
                    .style(""top"", (event.pageY - 28) + ""px"");
            })
            .on(""mouseout"", function() {
                tooltip.transition().duration(500).style(""opacity"", 0);
            })
            .on(""click"", function(event, d) {
                window.open(`https://www.google.com/search?q=${d.Company}`, '_blank');
            });
    });
</script>
</body>
</html>
",,3,4
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot with query widgets showing the Net Income and Revenue of the given dataset. Add a slider to represent the Quarter.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,interactive view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot with D3</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .scatterplot {
            margin: 20px;
        }
        .axis {
            font: 10px sans-serif;
        }
    </style>
</head>
<body>
    <div class=""scatterplot"">
        <svg width=""800"" height=""400""></svg>
        <input type=""range"" id=""quarter-slider"" min=""1"" max=""4"" value=""1"" step=""1"">
        <label for=""quarter-slider"">Quarter: <span id=""quarter-value"">1</span></label>
    </div>

    <script>
        const svg = d3.select(""svg"");
        const margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        let x = d3.scaleLinear().range([0, width]),
            y = d3.scaleLinear().range([height, 0]);

        const xAxis = d3.axisBottom(x);
        const yAxis = d3.axisLeft(y);

        svg.append(""g"").attr(""class"", ""x-axis"").attr(""transform"", `translate(${margin.left},${margin.top + height})`);
        svg.append(""g"").attr(""class"", ""y-axis"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            data.forEach(d => {
                d[""Net Income""] = +d[""Net Income""];
                d[""Revenue""] = +d[""Revenue""];
                d.Quarter = +d.Quarter;
            });

            const update = quarter => {
                const filteredData = data.filter(d => d.Quarter === quarter);

                x.domain([0, d3.max(filteredData, d => d[""Revenue""])]);
                y.domain([0, d3.max(filteredData, d => d[""Net Income""])]);
                
                g.select("".x-axis"").call(xAxis);
                g.select("".y-axis"").call(yAxis);

                const dots = g.selectAll(""circle"").data(filteredData, d => d.Company);

                dots.enter().append(""circle"")
                    .attr(""r"", 5)
                    .attr(""fill"", ""steelblue"")
                    .merge(dots)
                    .attr(""cx"", d => x(d[""Revenue""]))
                    .attr(""cy"", d => y(d[""Net Income""]));

                dots.exit().remove();
            };

            d3.select(""#quarter-slider"").on(""input"", function() {
                const quarter = +this.value;
                d3.select(""#quarter-value"").text(quarter);
                update(quarter);
            });

            update(1);
        });
    </script>
</body>
</html>
",,4,5
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot showing the Net Income of Alpha Inc. Add animated transitions that connect these points using lines in order.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,interactive view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .dot {
            fill: blue;
        }
        .line {
            stroke: gray;
            stroke-width: 2;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = { top: 20, right: 20, bottom: 30, left: 40 };
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;
        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            data = data.filter(d => d.Company === ""Alpha Inc."");
            data.forEach(d => {
                d['Net Income'] = +d['Net Income'];
                d['Quarter'] = d['Quarter'];
            });

            const x = d3.scalePoint()
                .domain(data.map(d => d['Quarter']))
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([d3.min(data, d => d['Net Income']), d3.max(data, d => d['Net Income'])])
                .nice()
                .range([height, 0]);

            const xAxis = d3.axisBottom(x);
            const yAxis = d3.axisLeft(y);
            g.append(""g"").attr(""class"", ""axis axis--x"").attr(""transform"", `translate(0,${height})`).call(xAxis);
            g.append(""g"").attr(""class"", ""axis axis--y"").call(yAxis);

            const line = d3.line()
                .x(d => x(d['Quarter']))
                .y(d => y(d['Net Income']));

            g.append(""path"")
                .datum(data)
                .attr(""class"", ""line"")
                .attr(""d"", line);

            const dots = g.selectAll("".dot"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""dot"")
                .attr(""cx"", d => x(d['Quarter']))
                .attr(""cy"", height)
                .attr(""r"", 5)
                .style(""opacity"", 0);

            dots.transition()
                .duration(1000)
                .delay((d, i) => i * 500)
                .attr(""cy"", d => y(d['Net Income']))
                .style(""opacity"", 1);
        });
    </script>
</body>
</html>
",,5,6
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Net Income of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,interactive view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Line Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke-width: 2px;
        }
        .line:hover {
            opacity: 0.8;
        }
        .axis {
            font: 10px sans-serif;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>

    <script>
        const margin = { top: 20, right: 30, bottom: 30, left: 40 },
            width = 800 - margin.left - margin.right,
            height = 400 - margin.top - margin.bottom;

        const svg = d3.select(""svg"").append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            const parseQuarter = d3.timeParse(""%Y Q%q"");
            const seriesData = d3.group(data, d => d.Company);

            const x = d3.scaleTime()
                .domain(d3.extent(data, d => parseQuarter(d.Quarter)))
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => +d['Net Income'])])
                .range([height, 0]);

            const xAxis = d3.axisBottom(x).ticks(6);
            const yAxis = d3.axisLeft(y);

            svg.append(""g"")
                .attr(""class"", ""axis x-axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(xAxis);

            svg.append(""g"")
                .attr(""class"", ""axis y-axis"")
                .call(yAxis);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const lineGenerator = d3.line()
                .x(d => x(parseQuarter(d.Quarter)))
                .y(d => y(+d['Net Income']));

            const lines = svg.selectAll("".line"")
                .data(seriesData)
                .enter().append(""g"")
                .attr(""class"", ""line-group"");

            lines.append(""path"")
                .attr(""class"", ""line"")
                .attr(""fill"", ""none"")
                .attr(""stroke"", (d, i) => color(i))
                .attr(""d"", d => lineGenerator(d[1]))
                .on(""mouseover"", function() { d3.select(this).transition().duration(200).style(""opacity"", 0.5); })
                .on(""mouseout"", function() { d3.select(this).transition().duration(200).style(""opacity"", 1); });

            lines.append(""text"")
                .datum(d => ({ name: d[0], value: d[1][d[1].length - 1] }))
                .attr(""transform"", d => `translate(${x(parseQuarter(d.value.Quarter))},${y(+d.value['Net Income'])})`)
                .attr(""x"", 5)
                .attr(""dy"", "".35em"")
                .text(d => d.name);
        });
    </script>
</body>
</html>
",,6,7
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,interactive view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .axis--x path,
        .axis--x line {
            display: none;
        }
    </style>
</head>
<body>
    <svg width=""960"" height=""500""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleBand().padding(0.1).range([0, width]),
              y = d3.scaleLinear().range([height, 0]);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            data.forEach(d => {
                d[""Net Income""] = +d[""Net Income""];
            });

            const filteredData = data.filter(d => d[""Quarter""] === ""Q1-2021"");
            x.domain(filteredData.map(d => d.Company));
            y.domain([0, d3.max(filteredData, d => d[""Net Income""])]);

            g.append(""g"").selectAll("".bar"")
                .data(filteredData)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => x(d.Company))
                .attr(""y"", d => y(d[""Net Income""]))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d[""Net Income""]));

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            const zoom = d3.zoom()
                .scaleExtent([1, 10])
                .translateExtent([[0, 0], [width, height]])
                .on(""zoom"", (event) => {
                    g.attr(""transform"", event.transform);
                    g.selectAll("".bar"").attr(""transform"", event.transform);
                    g.selectAll("".axis--x"").call(d3.axisBottom(x).scale(event.transform.rescaleX(x)));
                    g.selectAll("".axis--y"").call(d3.axisLeft(y).scale(event.transform.rescaleY(y)));
                });

            svg.call(zoom);
        });
    </script>
</body>
</html>
",,7,8
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,interactive view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
            cursor: grab;
        }
        .bar:hover {
            fill: orange;
        }
        .axis {
            font: 10px sans-serif;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const x = d3.scaleBand().range([0, width]).padding(0.1);
        const y = d3.scaleLinear().range([height, 0]);

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            data = data.filter(d => d.Quarter === ""Q1 2021"").map(d => {
                return {
                    Company: d.Company,
                    NetIncome: +d[""Net Income""]
                };
            });

            x.domain(data.map(d => d.Company));
            y.domain([0, d3.max(data, d => d.NetIncome)]);

            g.append(""g"")
                .selectAll("".bar"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => x(d.Company))
                .attr(""y"", d => y(d.NetIncome))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d.NetIncome))
                .call(d3.drag()
                    .on(""start"", dragStarted)
                    .on(""drag"", dragged)
                    .on(""end"", dragEnded));

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));

            function dragStarted(event) {
                d3.select(this).raise().classed(""active"", true);
            }

            function dragged(event, d) {
                const allBars = d3.selectAll("".bar"");
                const index = allBars.nodes().indexOf(this);
                const newIndex = Math.min(Math.max(0, index + Math.round(event.dy / 20)), data.length - 1);
                if (newIndex !== index) {
                    allBars.transition()
                        .attr(""y"", (d, i) => i === newIndex ? height - (d.NetIncome * (height / d3.max(data, d => d.NetIncome))) : allBars.nodes()[i].getAttribute(""y""))
                        .attr(""transform"", (d, i) => i < newIndex ? `translate(0, -20)` : `translate(0, 0)`);
                    const movedData = data.splice(index, 1)[0];
                    data.splice(newIndex, 0, movedData);
                    x.domain(data.map(d => d.Company));
                    g.selectAll("".bar"")
                     .data(data)
                     .transition()
                     .duration(100)
                     .attr(""x"", d => x(d.Company))
                     .attr(""y"", d => y(d.NetIncome))
                     .attr(""height"", d => height - y(d.NetIncome));
                }
            }

            function dragEnded(event) {
                d3.select(this).classed(""active"", false);
            }
        });
    </script>
</body>
</html>
",,8,9
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Net Income.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,interactive view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Bar Chart</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }

        .bar:hover {
            fill: orange;
        }

        .axis--x path,
        .axis--x line {
            display: none;
        }

        .tooltip {
            position: absolute;
            text-align: center;
            width: auto;
            padding: 5px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }

        #sortMenu {
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <select id=""sortMenu"">
        <option value=""ascending"">Sort Ascending</option>
        <option value=""descending"">Sort Descending</option>
    </select>
    <svg width=""800"" height=""500""></svg>

    <script>
        const margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = 800 - margin.left - margin.right,
              height = 500 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleBand().range([0, width]).padding(0.1);
        const y = d3.scaleLinear().range([height, 0]);

        const tooltip = d3.select(""body"").append(""div"").attr(""class"", ""tooltip"").style(""opacity"", 0);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(function(data) {
            data.forEach(d => {
                if (d.Quarter === ""Q1-2021"") {
                    d['Net Income'] = +d['Net Income'];
                }
            });

            const companies = data.filter(d => d.Quarter === ""Q1-2021"");

            function updateChart(order) {
                if (order === ""ascending"") {
                    companies.sort((a, b) => d3.ascending(a['Net Income'], b['Net Income']));
                } else {
                    companies.sort((a, b) => d3.descending(a['Net Income'], b['Net Income']));
                }

                x.domain(companies.map(d => d.Company));
                y.domain([0, d3.max(companies, d => d['Net Income'])]);

                svg.selectAll("".bar"").remove();
                svg.selectAll("".axis"").remove();

                const bars = svg.selectAll("".bar"")
                    .data(companies)
                    .enter().append(""rect"")
                    .attr(""class"", ""bar"")
                    .attr(""x"", d => x(d.Company))
                    .attr(""y"", d => y(d['Net Income']))
                    .attr(""width"", x.bandwidth())
                    .attr(""height"", d => height - y(d['Net Income']))
                    .on(""mouseover"", function(event, d) {
                        tooltip.transition().duration(200).style(""opacity"", .9);
                        tooltip.html(`${d.Company}<br>Net Income: $${d['Net Income'].toLocaleString()}`)
                            .style(""left"", (event.pageX + 5) + ""px"")
                            .style(""top"", (event.pageY - 28) + ""px"");
                    })
                    .on(""mouseout"", function() {
                        tooltip.transition().duration(500).style(""opacity"", 0);
                    });

                svg.selectAll("".bar"")
                    .transition()
                    .duration(800)
                    .attr(""y"", d => y(d['Net Income']))
                    .attr(""height"", d => height - y(d['Net Income']));

                const xAxis = d3.axisBottom(x);
                const yAxis = d3.axisLeft(y);

                svg.append(""g"")
                    .attr(""class"", ""axis axis--x"")
                    .attr(""transform"", `translate(0,${height})`)
                    .call(xAxis);

                svg.append(""g"")
                    .attr(""class"", ""axis axis--y"")
                    .call(yAxis);
            }

            updateChart(""ascending"");

            d3.select(""#sortMenu"").on(""change"", function() {
                const selectedOption = d3.select(this).property(""value"");
                updateChart(selectedOption);
            });
        });
    </script>
</body>
</html>
",,9,10
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,interactive view,"
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Scatterplot of Net Income vs Revenue</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const netIncome = [];
                const revenue = [];
                rows.forEach(row => {
                    const columns = row.split(',');
                    if (columns.length > 1) {
                        netIncome.push(parseFloat(columns[2]));
                        revenue.push(parseFloat(columns[3]));
                    }
                });

                const chartDom = document.getElementById('chart');
                const myChart = echarts.init(chartDom);

                const option = {
                    title: {
                        text: 'Net Income vs Revenue',
                    },
                    tooltip: {
                        trigger: 'item',
                        formatter: params => {
                            const netIncomeVal = params.data[0];
                            const revenueVal = params.data[1];
                            return `Net Income: ${netIncomeVal}<br/>Revenue: ${revenueVal}`;
                        }
                    },
                    xAxis: {
                        name: 'Net Income',
                        type: 'value',
                    },
                    yAxis: {
                        name: 'Revenue',
                        type: 'value',
                    },
                    series: [{
                        symbolSize: 10,
                        data: netIncome.map((ni, idx) => [ni, revenue[idx]]),
                        type: 'scatter',
                    }]
                };

                myChart.setOption(option);
            })
            .catch(error => console.error('Error fetching the data:', error));
    </script>
</body>
</html>
",,10,11
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,interactive view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income vs Revenue Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 600px;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const netIncome = [];
                const revenue = [];
                const companyNames = [];

                rows.forEach(row => {
                    const columns = row.split(',');
                    if (columns.length > 1) {
                        companyNames.push(columns[1]);
                        netIncome.push(parseFloat(columns[2]));
                        revenue.push(parseFloat(columns[3]));
                    }
                });

                const option = {
                    title: {
                        text: 'Net Income vs Revenue Scatterplot'
                    },
                    tooltip: {
                        trigger: 'item',
                        formatter: function (params) {
                            return params.name + '<br/>' + 
                                   'Net Income: ' + params.value[1] + '<br/>' + 
                                   'Revenue: ' + params.value[0];
                        }
                    },
                    xAxis: {
                        name: 'Revenue',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Net Income',
                        type: 'value'
                    },
                    series: [{
                        name: 'Companies',
                        type: 'scatter',
                        data: revenue.map((rev, idx) => [rev, netIncome[idx], companyNames[idx]]),
                        emphasis: {
                            focus: 'series'
                        },
                        itemStyle: {
                            color: '#5470C6'
                        }
                    }]
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);

                chart.on('click', function (params) {
                    if (params.data) {
                        alert('You clicked on ' + params.data[2] + '\nNet Income: ' + params.data[1] + '\nRevenue: ' + params.data[0]);
                    }
                });

                chart.on('brushSelected', function (params) {
                    const selectedPoints = params.batch[0].selected;
                    let message = 'Selected Companies:\n';
                    selectedPoints.forEach(point => {
                        message += point.data[2] + '\n';
                    });
                    alert(message);
                });
            });
    </script>
</body>
</html>
",,11,12
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,interactive view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income vs Revenue Scatterplot</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
</head>
<body>
    <div id=""scatterplot"" style=""width: 100%; height: 600px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1); // skip header
                
                const netIncome = [];
                const revenue = [];

                rows.forEach(row => {
                    const columns = row.split(',');
                    if (columns.length > 4) { // Ensure there are enough columns
                        netIncome.push(parseFloat(columns[2]));
                        revenue.push(parseFloat(columns[3]));
                    }
                });

                const myChart = echarts.init(document.getElementById('scatterplot'));

                const option = {
                    tooltip: {
                        formatter: function (params) {
                            return `Net Income: ${params.data[0]}<br/>Revenue: ${params.data[1]}`;
                        }
                    },
                    xAxis: {
                        name: 'Revenue',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Net Income',
                        type: 'value'
                    },
                    series: [{
                        symbolSize: 10,
                        data: netIncome.map((income, index) => [revenue[index], income]),
                        type: 'scatter'
                    }],
                    dataZoom: [{
                        type: 'inside',
                        xAxisIndex: [0],
                        filterMode: 'none'
                    }]
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
",,12,13
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Net Income and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,interactive view,"
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Net Income vs Revenue Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1);
            const scatterData = rows.map(row => {
                const cols = row.split(',');
                return {
                    name: cols[1],
                    netIncome: parseFloat(cols[2]),
                    revenue: parseFloat(cols[3]),
                    url: `https://www.google.com/search?q=${encodeURIComponent(cols[1])}`
                };
            }).filter(item => !isNaN(item.netIncome) && !isNaN(item.revenue));

            const myChart = echarts.init(document.getElementById('main'));

            const option = {
                title: {
                    text: 'Net Income vs Revenue',
                },
                tooltip: {
                    formatter: function (params) {
                        return `${params.data.name}<br/>Net Income: ${params.data.netIncome}<br/>Revenue: ${params.data.revenue}`;
                    }
                },
                xAxis: {
                    name: 'Revenue',
                    type: 'value',
                },
                yAxis: {
                    name: 'Net Income',
                    type: 'value',
                },
                series: [{
                    symbolSize: 20,
                    data: scatterData.map(item => [item.revenue, item.netIncome, item]),
                    type: 'scatter',
                }]
            };

            myChart.setOption(option);

            myChart.on('click', function (params) {
                if (params.componentType === 'series') {
                    const clickedData = params.data[2];
                    window.open(clickedData.url, '_blank');
                }
            });
        });
    </script>
</body>
</html>
",,13,14
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot with query widgets showing the Net Income and Revenue of the given dataset. Add a slider to represent the Quarter.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,interactive view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 500px;""></div>
    <input type=""range"" id=""quarterSlider"" min=""1"" max=""4"" value=""1"" step=""1"" style=""width: 100%;"">
    <label for=""quarterSlider"">Quarter: <span id=""quarterLabel"">1</span></label>
    
    <script>
        let data;
        const quarterSlider = document.getElementById('quarterSlider');
        const quarterLabel = document.getElementById('quarterLabel');

        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(csvData => {
                const rows = csvData.split('\n').slice(1);
                data = rows.map(row => {
                    const cols = row.split(',');
                    return {
                        Quarter: parseInt(cols[0]),
                        Company: cols[1],
                        NetIncome: parseFloat(cols[2]),
                        Revenue: parseFloat(cols[3]),
                        Expenses: parseFloat(cols[4]),
                        EmployeeCount: parseInt(cols[5]),
                        Industry: cols[6],
                        StockPrice: parseFloat(cols[7])
                    };
                });
                updateChart(1);
            });

        function updateChart(quarter) {
            const filteredData = data.filter(d => d.Quarter === quarter);
            const netIncome = filteredData.map(d => d.NetIncome);
            const revenue = filteredData.map(d => d.Revenue);
            const companies = filteredData.map(d => d.Company);

            const option = {
                title: {
                    text: 'Net Income vs Revenue'
                },
                tooltip: {},
                xAxis: {
                    name: 'Revenue',
                    type: 'value'
                },
                yAxis: {
                    name: 'Net Income',
                    type: 'value'
                },
                series: [{
                    symbolSize: 10,
                    data: netIncome.map((ni, index) => [revenue[index], ni]),
                    type: 'scatter'
                }]
            };
            
            const chart = echarts.init(document.getElementById('main'));
            chart.setOption(option);
        }

        quarterSlider.addEventListener('input', function () {
            quarterLabel.textContent = this.value;
            updateChart(parseInt(this.value));
        });
    </script>
</body>
</html>
",,14,15
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot showing the Net Income of Alpha Inc. Add animated transitions that connect these points using lines in order.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,interactive view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Scatterplot</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.2/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const alphaIncData = rows
                    .map(row => row.split(','))
                    .filter(row => row[1] === 'Alpha Inc')
                    .map(row => ({
                        quarter: row[0],
                        netIncome: parseFloat(row[2]),
                        revenue: parseFloat(row[3]),
                        expenses: parseFloat(row[4]),
                        employeeCount: parseInt(row[5]),
                        industry: row[6],
                        stockPrice: parseFloat(row[7]),
                    }));

                const quarters = alphaIncData.map(item => item.quarter);
                const netIncomes = alphaIncData.map(item => item.netIncome);

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);
                const option = {
                    title: {
                        text: 'Net Income of Alpha Inc.',
                    },
                    xAxis: {
                        type: 'category',
                        data: quarters,
                    },
                    yAxis: {
                        type: 'value',
                    },
                    series: [{
                        type: 'line',
                        data: netIncomes,
                        animate: true,
                        lineSmooth: true,
                        label: {
                            show: true,
                            position: 'top'
                        },
                    }],
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
",,15,16
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Net Income of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,interactive view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Line Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const result = {};
                
                lines.forEach(line => {
                    const [quarter, company, netIncome] = line.split(',');
                    if (!result[company]) {
                        result[company] = { quarter: [], netIncome: [] };
                    }
                    result[company].quarter.push(quarter);
                    result[company].netIncome.push(parseFloat(netIncome));
                });

                const series = Object.keys(result).map(company => ({
                    name: company,
                    type: 'line',
                    data: result[company].netIncome,
                    smooth: true,
                }));

                const option = {
                    title: {
                        text: 'Net Income by Company',
                    },
                    tooltip: {
                        trigger: 'axis',
                    },
                    legend: {
                        data: Object.keys(result),
                    },
                    xAxis: {
                        type: 'category',
                        data: result[Object.keys(result)[0]].quarter,
                    },
                    yAxis: {
                        type: 'value',
                    },
                    series: series,
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);

                chart.on('mouseover', function (params) {
                    if (params.componentType === 'series') {
                        chart.dispatchAction({
                            type: 'highlight',
                            seriesIndex: params.seriesIndex,
                        });
                    }
                });

                chart.on('mouseout', function (params) {
                    if (params.componentType === 'series') {
                        chart.dispatchAction({
                            type: 'downplay',
                            seriesIndex: params.seriesIndex,
                        });
                    }
                });
            });
    </script>
</body>
</html>
",,16,17
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,interactive view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 800px; height: 400px;""></div>
    <script>
        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv');
            const data = await response.text();
            const rows = data.split('\n').slice(1);
            const companies = [];
            const netIncome = [];

            rows.forEach(row => {
                const values = row.split(',');
                if (values[0] === 'Q1-2021') {
                    companies.push(values[1]);
                    netIncome.push(parseFloat(values[2]));
                }
            });

            drawChart(companies, netIncome);
        }

        function drawChart(companies, netIncome) {
            const chartDom = document.getElementById('chart');
            const myChart = echarts.init(chartDom);
            const option = {
                title: {
                    text: 'Net Income for Each Company in Q1-2021',
                },
                tooltip: {},
                xAxis: {
                    type: 'category',
                    data: companies,
                },
                yAxis: {
                    type: 'value',
                },
                series: [{
                    name: 'Net Income',
                    type: 'bar',
                    data: netIncome,
                }],
                dataZoom: [
                    {
                        type: 'slider',
                        show: true,
                        start: 0,
                        end: 100,
                    },
                    {
                        type: 'inside',
                        start: 0,
                        end: 100,
                    }
                ],
                toolbox: {
                    feature: {
                        dataView: {},
                        magicType: { type: ['line', 'bar'] },
                        restore: {},
                        saveAsImage: {}
                    }
                }
            };

            myChart.setOption(option);
            window.addEventListener('resize', myChart.resize);
        }

        fetchData();
    </script>
</body>
</html>
",,17,18
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,interactive view,"
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Net Income Bar Chart Q1-2021</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 600px;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1); // Skip header
                const q1_2021_data = rows
                    .map(row => row.split(','))
                    .filter(row => row[0] === 'Q1-2021')
                    .map(row => ({ company: row[1], netIncome: parseFloat(row[2]) }));

                const companies = q1_2021_data.map(item => item.company);
                const netIncomes = q1_2021_data.map(item => item.netIncome);

                const chart = echarts.init(document.getElementById('main'));

                const option = {
                    title: {
                        text: 'Net Income for Each Company in Q1-2021'
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: companies,
                        axisLabel: {
                            interval: 0,
                            rotate: 30
                        }
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        name: 'Net Income',
                        type: 'bar',
                        data: netIncomes,
                        draggable: true,
                    }],
                    animationDuration: 1000,
                    animationEasing: 'cubicInOut'
                };

                chart.setOption(option);

                // Enabling drag-and-drop functionality
                chart.on('mousedown', function (params) {
                    if (params.componentType === 'series') {
                        chart.dispatchAction({ type: 'down', seriesIndex: 0, dataIndex: params.dataIndex });
                    }
                });

                chart.on('mouseup', function (params) {
                    if (params.componentType === 'series') {
                        chart.dispatchAction({ type: 'up', seriesIndex: 0, dataIndex: params.dataIndex });
                    }
                });

                chart.on('drag', function (params) {
                    if (params.componentType === 'series') {
                        const newIndex = params.dataIndex;
                        const oldIndex = params.oldIndex;

                        if (newIndex !== oldIndex) {
                            const movedData = netIncomes[oldIndex];
                            netIncomes.splice(oldIndex, 1);
                            netIncomes.splice(newIndex, 0, movedData);
                            companies.splice(oldIndex, 1);
                            companies.splice(newIndex, 0, q1_2021_data[oldIndex].company);

                            chart.setOption({
                                xAxis: {
                                    data: companies
                                },
                                series: [{
                                    data: netIncomes
                                }]
                            });
                        }
                    }
                });
            });
    </script>
</body>
</html>
",,18,19
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Net Income.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,interactive view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main { width: 600px; height: 400px; }
    </style>
</head>
<body>
    <div id=""main""></div>
    <select id=""sortOrder"" onchange=""updateChart()"">
        <option value=""desc"">Descending</option>
        <option value=""asc"">Ascending</option>
    </select>
    <script>
        let chartData = [];
        
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                rows.forEach(row => {
                    const cols = row.split(',');
                    if (cols[0] === 'Q1-2021') {
                        chartData.push({
                            Company: cols[1],
                            NetIncome: parseFloat(cols[2])
                        });
                    }
                });
                updateChart();
            });

        function updateChart() {
            const sortOrder = document.getElementById(""sortOrder"").value;
            const sortedData = chartData.sort((a, b) => sortOrder === 'asc' ? a.NetIncome - b.NetIncome : b.NetIncome - a.NetIncome);

            let companies = sortedData.map(d => d.Company);
            let netIncomes = sortedData.map(d => d.NetIncome);

            const option = {
                title: {
                    text: 'Net Income for Each Company in Q1-2021',
                    subtext: 'Bar Chart with Animated Transitions',
                },
                tooltip: {},
                xAxis: {
                    type: 'category',
                    data: companies,
                },
                yAxis: {
                    type: 'value'
                },
                series: [{
                    name: 'Net Income',
                    type: 'bar',
                    data: netIncomes,
                    animationDuration: 1000,
                }]
            };

            const myChart = echarts.init(document.getElementById('main'));
            myChart.setOption(option);
        }
    </script>
</body>
</html>
",,19,20
scatterplot+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue. And add the following interactive function: when the mouse hovers over a specific data point, the value of the data point will be highlighted on the axis.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,interactive view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income vs Revenue Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatter plot showing the relationship between Net Income and Revenue."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": {
                ""type"": ""circle"",
                ""tooltip"": true
            },
            ""encoding"": {
                ""x"": {
                    ""field"": ""Revenue"",
                    ""type"": ""quantitative"",
                    ""title"": ""Revenue""
                },
                ""y"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative"",
                    ""title"": ""Net Income""
                },
                ""color"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal""
                },
                ""size"": {
                    ""field"": ""Employee Count"",
                    ""type"": ""quantitative"",
                    ""title"": ""Employee Count""
                }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
",,20,21
scatterplot+brush,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue. And add the following interactive functions: Brushing this Scatterplot will show the selected data points.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,interactive view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income vs Revenue Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm-vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm-vega-lite@5.2.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm-vega-embed@6.20.2""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            '$schema': 'https://vega.github.io/schema/vega-lite/v5.json',
            'description': 'A scatter plot showing the relationship between Net Income and Revenue.',
            'data': {
                'url': 'https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv',
                'format': {'type': 'csv'}
            },
            'mark': 'point',
            'selection': {
                'brush': {
                    'type': 'interval', 
                    'encodings': ['x', 'y']
                }
            },
            'encoding': {
                'x': {'field': 'Revenue', 'type': 'Q', 'title': 'Revenue'},
                'y': {'field': 'Net Income', 'type': 'Q', 'title': 'Net Income'},
                'opacity': {
                    'condition': {
                        'selection': 'brush',
                        'value': 1
                    },
                    'value': 0.2
                },
                'color': {'field': 'Company', 'type': 'nominal'}
            }
        };

        vegaEmbed('#vis', spec).then(result => {
            // Access the Vega View instance
            const view = result.view;

            // You can customize your view or attach events here if needed
        }).catch(console.error);
    </script>
</body>
</html>
",,21,22
scatterplot+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue. And add the following interactive functions: the Scatterplot can be zoomed via the mouse wheel.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,interactive view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income vs Revenue Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.6""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A scatterplot showing the relationship between Net Income and Revenue."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Revenue"",
                    ""type"": ""quantitative"",
                    ""title"": ""Revenue""
                },
                ""y"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative"",
                    ""title"": ""Net Income""
                },
                ""color"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal"",
                    ""legend"": {
                        ""title"": ""Company""
                    }
                }
            },
            ""config"": {
                ""interaction"": {
                    ""type"": ""zoom"",
                    ""scale"": ""both""
                }
            }
        };

        vegaEmbed('#vis', spec, {""renderer"": ""canvas""})
            .then(function(result) {
                // Access the Vega View instance
                const view = result.view;

                // Enable zooming using the mouse wheel
                view.addSignalListener('zoom', (name, value) => {
                    view.zoom(value);
                });

            })
            .catch(console.error);
    </script>
</body>
</html>
",,22,23
scatterplot+tooltip,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot with external links and tooltips that visualizes the relationship between Net Income and Revenue. And add the following interactive functions: opening a Google search for the point that you click on.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,interactive view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot of Net Income vs Revenue</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.4.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
<div id=""vis""></div>
<script type=""text/javascript"">
    const spec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""title"": ""Net Income vs Revenue"",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
            ""format"": {
                ""type"": ""csv""
            }
        },
        ""mark"": ""point"",
        ""encoding"": {
            ""x"": {
                ""field"": ""Revenue"",
                ""type"": ""quantitative"",
                ""title"": ""Revenue""
            },
            ""y"": {
                ""field"": ""Net Income"",
                ""type"": ""quantitative"",
                ""title"": ""Net Income""
            },
            ""tooltip"": [
                {""field"": ""Company"", ""type"": ""nominal"", ""title"": ""Company""},
                {""field"": ""Net Income"", ""type"": ""quantitative"", ""title"": ""Net Income""},
                {""field"": ""Revenue"", ""type"": ""quantitative"", ""title"": ""Revenue""},
                {""field"": ""Stock Price"", ""type"": ""quantitative"", ""title"": ""Stock Price""}
            ]
        },
        ""selection"": {
            ""mySelector"": {
                ""type"": ""single"",
                ""fields"": [""Company""],
                ""on"": ""mouseover""
            }
        }
    };

    vegaEmbed('#vis', spec).then(function(result) {
        const view = result.view;
        view.addEventListener('click', function(event, item) {
            if (item && item.mark) {
                const company = item.datum.Company;
                const googleSearchUrl = `https://www.google.com/search?q=${company}`;
                window.open(googleSearchUrl, '_blank');
            }
        });
    }).catch(console.error);
</script>
</body>
</html>
",,23,24
scatterplot+query widgets,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot with query widgets showing the Net Income and Revenue of the given dataset. Add a slider to represent the Quarter.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,interactive view,"
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Financial Data Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Quarter === quarter""
                }
            ],
            ""params"": [
                {
                    ""name"": ""quarter"",
                    ""select"": {
                        ""type"": ""point"",
                        ""fields"": [""Quarter""],
                        ""init"": {""Quarter"": ""Q1 2020""},
                        ""bind"": {
                            ""input"": ""range"",
                            ""min"": 1,
                            ""max"": 4,
                            ""step"": 1
                        }
                    }
                }
            ],
            ""mark"": ""circle"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Revenue"",
                    ""type"": ""quantitative"",
                    ""title"": ""Revenue""
                },
                ""y"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative"",
                    ""title"": ""Net Income""
                },
                ""color"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal"",
                    ""title"": ""Company""
                },
                ""tooltip"": [
                    {""field"": ""Company"", ""type"": ""nominal""},
                    {""field"": ""Quarter"", ""type"": ""nominal""},
                    {""field"": ""Revenue"", ""type"": ""quantitative""},
                    {""field"": ""Net Income"", ""type"": ""quantitative""}
                ]
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
",,24,25
scatterplot+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot showing the Net Income of Alpha Inc. Add animated transitions that connect these points using lines in order.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,interactive view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Alpha Inc. Net Income Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": { ""type"": ""csv"" }
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""field"": ""Company"",
                        ""equal"": ""Alpha Inc.""
                    }
                }
            ],
            ""mark"": {
                ""type"": ""point"",
                ""tooltip"": true
            },
            ""encoding"": {
                ""x"": {
                    ""field"": ""Quarter"",
                    ""type"": ""ordinal"",
                    ""axis"": { ""title"": ""Quarter"" }
                },
                ""y"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative"",
                    ""axis"": { ""title"": ""Net Income"" }
                },
                ""color"": { ""value"": ""blue"" }
            },
            ""config"": {
                ""mark"": {
                    ""interpolate"": ""monotone"",
                    ""line"": true
                },
                ""view"": {
                    ""stroke"": null,
                    ""fill"": ""lightgray""
                }
            },
            ""animation"": {
                ""duration"": 1000,
                ""easing"": ""linear""
            }
        };

        vegaEmbed('#vis', spec).then(function(result) {
            console.log(result);
        }).catch(console.error);
    </script>
</body>
</html>
",,25,26
line chart+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a multi-series Line Chart with an interactive line highlight showing the Net Income of the given dataset. Add the following interaction function: when the mouse is hovered over a line, the line will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,interactive view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Line Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>

<div id=""vis""></div>

<script>
const spec = {
  ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
  ""description"": ""A multi-series line chart of Net Income by Company."",
  ""data"": {
    ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
    ""format"": {""type"": ""csv""}
  },
  ""mark"": ""line"",
  ""encoding"": {
    ""x"": {
      ""field"": ""Quarter"",
      ""type"": ""temporal"",
      ""axis"": {""title"": ""Quarter""}
    },
    ""y"": {
      ""field"": ""Net Income"",
      ""type"": ""quantitative"",
      ""axis"": {""title"": ""Net Income""}
    },
    ""color"": {
      ""field"": ""Company"",
      ""type"": ""nominal"",
      ""legend"": {""title"": ""Company""}
    },
    ""tooltip"": [
      {""field"": ""Quarter"", ""title"": ""Quarter""},
      {""field"": ""Company"", ""title"": ""Company""},
      {""field"": ""Net Income"", ""title"": ""Net Income""}
    ]
  },
  ""config"": {
    ""view"": {
      ""stroke"": ""transparent""
    },
    ""mark"": {
      ""tooltip"": true,
      ""strokeWidth"": 2
    },
    ""line"": {
      ""interpolate"": ""basis""
    }
  }
};

vegaEmbed('#vis', spec, {renderer: 'svg'}).then(result => {
  // Hover effect
  const hoverEffect = {
    ""signal"": ""hoverCompany"",
    ""on"": [
      {
        ""events"": ""mouse:over"",
        ""update"": ""datum.Company""
      },
      {
        ""events"": ""mouse:out"",
        ""update"": ""null""
      }
    ]
  };

  // Adding the hover effect
  result.view.addSignalListener('hoverCompany', (name, value) => {
    const update = {
      ""scale"": {
        ""color"": {
          ""domain"": value === null ? [] : [value],
          ""range"": [""#ccc"", ""#1f77b4""]
        }
      }
    };
    result.view.runAsync().then(() => {
      result.view.setState(update);
    });
  });
});
</script>

</body>
</html>
",,26,27
bar chart+zoom,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021. And add the following interactive functions: scroll the mouse wheel to zoom the Bar Chart, click the left mouse button and drag to pan the Bar Chart.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,interactive view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.9.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.1""></script>
</head>
<body>

<div id=""vis""></div>

<script>
    const spec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""title"": ""Net Income for Each Company in Q1-2021"",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
            ""format"": {
                ""type"": ""csv""
            }
        },
        ""transform"": [
            {
                ""filter"": ""datum.Quarter == 'Q1-2021'""
            }
        ],
        ""mark"": ""bar"",
        ""encoding"": {
            ""x"": {
                ""field"": ""Company"",
                ""type"": ""nominal"",
                ""axis"": {
                    ""title"": ""Company""
                }
            },
            ""y"": {
                ""field"": ""Net Income"",
                ""type"": ""quantitative"",
                ""axis"": {
                    ""title"": ""Net Income""
                }
            },
            ""color"": {
                ""field"": ""Company"",
                ""type"": ""nominal""
            }
        },
        ""config"": {
            ""view"": {
                ""continuousWidth"": 800,
                ""continuousHeight"": 400,
                ""stroke"": ""transparent""
            }
        }
    };

    vegaEmbed('#vis', spec, {renderer: 'svg'}).then(result => {
        // Add zoom and pan capabilities
        const view = result.view;
        view.addSignalListener('zoom', () => view.run());
        view.addSignalListener('pan', () => view.run());
    });
</script>

</body>
</html>
",,27,28
bar chart+drag,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021. Add the following interactive functions: allows users to drag and drop bars to reorder them, enabling a customized arrangement based on user preferences.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,interactive view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npmvega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.7.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Quarter === 'Q1-2021'""
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Company"",
                    ""type"": ""ordinal"",
                    ""title"": ""Company""
                },
                ""y"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative"",
                    ""title"": ""Net Income""
                },
                ""order"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative"",
                    ""sort"": ""descending""
                }
            },
            ""config"": {
                ""view"": {
                    ""stroke"": ""transparent""
                }
            }
        };

        vegaEmbed('#vis', spec, { actions: false }).then(function(result) {
            const view = result.view;

            // Enable drag and drop feature
            const dragHandler = view.addEventListener('drag', function(event) {
                const newPosition = event.offsetX; // get the new position
                // code logic to reorder bars based on dragging functionality
            });

            return view;
        }).catch(console.error);
    </script>
</body>
</html>
",,28,29
bar chart+animated,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021. Add animated transitions and use the drop-down menu to change the sorting order to ascending or descending based on the Net Income.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,interactive view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
<div id=""vis""></div>
<script>
    const spec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
            ""format"": {
                ""type"": ""csv""
            }
        },
        ""transform"": [
            {
                ""filter"": ""datum.Quarter == 'Q1-2021'""
            }
        ],
        ""mark"": ""bar"",
        ""encoding"": {
            ""x"": {
                ""field"": ""Company"",
                ""type"": ""nominal"",
                ""title"": ""Company"",
                ""sort"": ""x""
            },
            ""y"": {
                ""field"": ""Net Income"",
                ""type"": ""quantitative"",
                ""title"": ""Net Income"",
                ""axis"": {
                    ""format"": ""$""
                }
            },
            ""color"": {
                ""field"": ""Net Income"",
                ""type"": ""quantitative"",
                ""scale"": {
                    ""scheme"": ""blues""
                }
            }
        },
        ""config"": {
            ""view"": {
                ""continuousWidth"": 600,
                ""continuousHeight"": 400
            }
        }
    };

    vegaEmbed('#vis', spec).then(function (result) {
        const sortButton = document.createElement('select');
        sortButton.innerHTML = `
            <option value=""descending"">Sort by Net Income: Descending</option>
            <option value=""ascending"">Sort by Net Income: Ascending</option>
        `;
        sortButton.onchange = function () {
            const order = sortButton.value;
            const updatedSpec = { ...spec };
            updatedSpec.encoding.x.sort = order === ""ascending"" ? ""ascending"" : ""descending"";
            vegaEmbed('#vis', updatedSpec);
        };
        document.body.appendChild(sortButton);
    }).catch(console.error);
</script>
</body>
</html>
",,29,30
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Net Income and Revenue, and a Bar Chart on the right that displays Company versus Net Income.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,multiple view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Visualization</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        body {
            display: flex;
            justify-content: space-between;
            padding: 20px;
        }
        #scatterplot, #barchart {
            width: 45%;
            height: 400px;
        }
    </style>
</head>
<body>
    <div id=""scatterplot""></div>
    <div id=""barchart""></div>

    <script>
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            // Convert data types
            data.forEach(d => {
                d[""Net Income""] = +d[""Net Income""];
                d[""Revenue""] = +d[""Revenue""];
            });

            // Scatterplot
            const svgScatter = d3.select(""#scatterplot"").append(""svg"").attr(""width"", 400).attr(""height"", 400);
            const xScale = d3.scaleLinear().domain([d3.min(data, d => d[""Revenue""]), d3.max(data, d => d[""Revenue""])]).range([0, 400]);
            const yScale = d3.scaleLinear().domain([d3.min(data, d => d[""Net Income""]), d3.max(data, d => d[""Net Income""])]).range([400, 0]);

            svgScatter.selectAll(""circle"")
                .data(data)
                .enter().append(""circle"")
                .attr(""cx"", d => xScale(d[""Revenue""]))
                .attr(""cy"", d => yScale(d[""Net Income""]))
                .attr(""r"", 5)
                .attr(""fill"", ""blue"");

            svgScatter.append(""g"").attr(""transform"", ""translate(0,400)"").call(d3.axisBottom(xScale));
            svgScatter.append(""g"").call(d3.axisLeft(yScale));

            // Bar Chart
            const svgBar = d3.select(""#barchart"").append(""svg"").attr(""width"", 400).attr(""height"", 400);
            const yBarScale = d3.scaleBand().domain(data.map(d => d.Company)).range([0, 400]).padding(0.1);
            const xBarScale = d3.scaleLinear().domain([0, d3.max(data, d => d[""Net Income""])]).range([0, 400]);

            svgBar.selectAll(""rect"")
                .data(data)
                .enter().append(""rect"")
                .attr(""x"", 0)
                .attr(""y"", d => yBarScale(d.Company))
                .attr(""width"", d => xBarScale(d[""Net Income""]))
                .attr(""height"", yBarScale.bandwidth())
                .attr(""fill"", ""orange"");

            svgBar.append(""g"").attr(""transform"", ""translate(0,0)"").call(d3.axisLeft(yBarScale));
            svgBar.append(""g"").attr(""transform"", ""translate(0,400)"").call(d3.axisBottom(xBarScale));
        });
    </script>
</body>
</html>
",,30,31
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Net Income and Revenue, and a Bar Chart on the right that displays Company versus Net Income. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,multiple view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Visualization</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .chart {
            display: inline-block;
            margin: 10px;
        }

        .scatter circle {
            fill: steelblue;
            cursor: pointer;
        }

        .bar {
            fill: orange;
        }

        .highlight {
            fill: red !important;
        }
    </style>
</head>
<body>
    <div class=""chart"" id=""scatterplot""></div>
    <div class=""chart"" id=""barchart""></div>

    <script>
        const width = 500;
        const height = 400;

        const svgScatter = d3.select(""#scatterplot"")
            .append(""svg"")
            .attr(""width"", width)
            .attr(""height"", height);

        const svgBar = d3.select(""#barchart"")
            .append(""svg"")
            .attr(""width"", width)
            .attr(""height"", height);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            data.forEach(d => {
                d['Net Income'] = +d['Net Income'];
                d['Revenue'] = +d['Revenue'];
            });

            const xScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Revenue'])])
                .range([0, width]);

            const yScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d['Net Income'])])
                .range([height, 0]);

            svgScatter.selectAll(""circle"")
                .data(data)
                .enter()
                .append(""circle"")
                .attr(""cx"", d => xScale(d['Revenue']))
                .attr(""cy"", d => yScale(d['Net Income']))
                .attr(""r"", 5)
                .on(""mouseover"", function(event, d) {
                    d3.select(this).transition().duration(100).attr(""r"", 8);
                })
                .on(""mouseout"", function(event, d) {
                    d3.select(this).transition().duration(100).attr(""r"", 5);
                });

            svgScatter.append(""g"")
                .attr(""transform"", ""translate(0,"" + height + "")"")
                .call(d3.axisBottom(xScale));

            svgScatter.append(""g"")
                .call(d3.axisLeft(yScale));

            svgBar.selectAll(""rect"")
                .data(data)
                .enter()
                .append(""rect"")
                .attr(""x"", (d, i) => i * (width / data.length))
                .attr(""y"", d => yScale(d['Net Income']))
                .attr(""width"", width / data.length - 1)
                .attr(""height"", d => height - yScale(d['Net Income']))
                .attr(""class"", ""bar"")
                .on(""mouseover"", function(event, d) {
                    d3.select(this).transition().duration(100).attr(""fill"", ""yellow"");
                })
                .on(""mouseout"", function(event, d) {
                    d3.select(this).transition().duration(100).attr(""fill"", ""orange"");
                });

            svgBar.append(""g"")
                .call(d3.axisLeft(yScale).ticks(5));

            // Brushing
            const brush = d3.brush()
                .extent([[0, 0], [width, height]])
                .on(""brush end"", brushed);

            svgScatter.append(""g"")
                .attr(""class"", ""brush"")
                .call(brush);

            function brushed(event) {
                const selection = event.selection;
                if (selection) {
                    const [[x0, y0], [x1, y1]] = selection;

                    svgScatter.selectAll(""circle"")
                        .attr(""class"", d => {
                            if (xScale(d['Revenue']) >= x0 && xScale(d['Revenue']) <= x1 && 
                                yScale(d['Net Income']) >= y0 && yScale(d['Net Income']) <= y1) {
                                return ""highlight"";
                            } else {
                                return """";
                            }
                        });

                    const selectedCompanies = data.filter(d => 
                        xScale(d['Revenue']) >= x0 &&
                        xScale(d['Revenue']) <= x1 &&
                        yScale(d['Net Income']) >= y0 &&
                        yScale(d['Net Income']) <= y1
                    ).map(d => d['Company']);

                    svgBar.selectAll(""rect"")
                        .attr(""class"", d => selectedCompanies.includes(d['Company']) ? ""bar highlight"" : ""bar"");
                }
            }
        });
    </script>
</body>
</html>
",,31,32
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Net Income , while the pie chart represents the distribution of Revenue.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,multiple view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Visualization</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .line-chart {
            margin-bottom: 50px;
        }
        .pie-chart {
            width: 400px;
            height: 400px;
        }
    </style>
</head>
<body>
    <div class=""line-chart""></div>
    <div class=""pie-chart""></div>
    
    <script>
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            data.forEach(d => {
                d['Net Income'] = +d['Net Income'];
                d['Revenue'] = +d['Revenue'];
            });

            // Line Chart for Net Income
            const lineSvg = d3.select("".line-chart"").append(""svg"").attr(""width"", 600).attr(""height"", 400);
            const xScale = d3.scaleTime().domain(d3.extent(data, d => new Date(d['Quarter']))).range([0, 580]);
            const yScale = d3.scaleLinear().domain([0, d3.max(data, d => d['Net Income'])]).range([380, 20]);
            
            const lineGen = d3.line()
                .x(d => xScale(new Date(d['Quarter'])))
                .y(d => yScale(d['Net Income']));

            lineSvg.append(""path"")
                .attr(""d"", lineGen(data))
                .attr(""fill"", ""none"")
                .attr(""stroke"", ""blue"")
                .attr(""stroke-width"", 2);

            lineSvg.append(""g"").attr(""transform"", ""translate(0,380)"").call(d3.axisBottom(xScale));
            lineSvg.append(""g"").attr(""transform"", ""translate(0,0)"").call(d3.axisLeft(yScale)); 

            // Pie Chart for Revenue
            const pieSvg = d3.select("".pie-chart"").append(""svg"").attr(""width"", 400).attr(""height"", 400);
            const radius = Math.min(400, 400) / 2;
            const g = pieSvg.append(""g"").attr(""transform"", ""translate(200,200)"");

            const pie = d3.pie().value(d => d['Revenue']);
            const arc = d3.arc().innerRadius(0).outerRadius(radius);
            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const pieData = pie(data);

            g.selectAll("".arc"")
                .data(pieData)
                .enter().append(""g"")
                .attr(""class"", ""arc"")
                .append(""path"")
                .attr(""d"", arc)
                .style(""fill"", (d, i) => color(i));
        });
    </script>
</body>
</html>
",,32,33
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Net Income , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,multiple view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Visualization</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .chart {
            margin: 20px;
        }
        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 2px;
        }
        .arc {
            stroke: #fff;
        }
    </style>
</head>
<body>
    <div class=""chart"" id=""line-chart""></div>
    <div class=""chart"" id=""pie-chart""></div>

    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 50 },
              width = 800 - margin.left - margin.right,
              height = 400 - margin.top - margin.bottom;

        const svgLine = d3.select(""#line-chart"").append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
          .append(""g"")
            .attr(""transform"", `translate(${margin.left},${margin.top})`);

        const svgPie = d3.select(""#pie-chart"").append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
          .append(""g"")
            .attr(""transform"", `translate(${width / 2 + margin.left},${height / 2 + margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            data.forEach(d => {
                d[""Net Income""] = +d[""Net Income""];
                d[""Revenue""] = +d[""Revenue""];
                d[""Quarter""] = d[""Quarter""];
            });

            const x = d3.scaleBand()
                .domain(data.map(d => d.Quarter))
                .range([0, width])
                .padding(0.1);
                
            const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Net Income""])])
                .range([height, 0]);

            svgLine.append(""g"")
                .attr(""class"", ""x axis"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            svgLine.append(""g"")
                .attr(""class"", ""y axis"")
                .call(d3.axisLeft(y));

            const line = d3.line()
                .x(d => x(d.Quarter) + x.bandwidth() / 2)
                .y(d => y(d[""Net Income""]));

            svgLine.append(""path"")
                .datum(data)
                .attr(""class"", ""line"")
                .attr(""d"", line);

            let currentData = data;

            const updatePieChart = (selectedData) => {
                svgPie.selectAll(""*"").remove();

                const pie = d3.pie()
                    .value(d => d.Revenue);
                    
                const arc = d3.arc()
                    .innerRadius(0)
                    .outerRadius(Math.min(width, height) / 2 - 1);

                const pieData = pie(selectedData);

                const g = svgPie.selectAll("".arc"")
                    .data(pieData)
                    .enter().append(""g"")
                    .attr(""class"", ""arc"");

                g.append(""path"")
                    .attr(""class"", ""arc"")
                    .attr(""d"", arc)
                    .style(""fill"", (d, i) => d3.schemeCategory10[i % 10]);

                g.append(""text"")
                    .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                    .attr(""dy"", "".35em"")
                    .text(d => d.data.Company);
            };

            updatePieChart(currentData);

            svgLine.selectAll("".line"")
                .on(""click"", function(event, d) {
                    const coords = d3.pointer(event);
                    const index = Math.floor(coords[0] / (width / data.length));
                    const selectedQuarter = data[index].Quarter;
                    const filteredData = data.filter(d => d.Quarter === selectedQuarter);
                    currentData = filteredData.length > 0 ? filteredData : currentData;
                    updatePieChart(currentData);
                });

        });
    </script>
</body>
</html>
",,33,34
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Revenue, Expenses, Employee Count, and Stock Price. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,multiple view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot Matrix</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatterplot {
            display: inline-block;
            margin: 20px;
        }
        .cell {
            cursor: crosshair;
        }
        .highlight {
            fill: orange;
        }
    </style>
</head>
<body>
    <h1>Brushable Scatterplot Matrix</h1>
    <div id=""scatterplot-matrix""></div>
    
    <script>
        const margin = { top: 20, right: 20, bottom: 50, left: 50 };
        const width = 200 - margin.left - margin.right;
        const height = 200 - margin.top - margin.bottom;

        const dimensions = [""Revenue"", ""Expenses"", ""Employee Count"", ""Stock Price""];
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            // Convert data types
            dimensions.forEach(d => {
                data.forEach(row => {
                    row[d] = +row[d];
                });
            });

            const svg = d3.select(""#scatterplot-matrix"").append(""svg"")
                .attr(""width"", width * dimensions.length)
                .attr(""height"", height * dimensions.length);

            const xScale = {};
            const yScale = {};
            const brush = d3.brush();

            dimensions.forEach((dimX, i) => {
                dimensions.forEach((dimY, j) => {
                    const g = svg.append(""g"")
                        .attr(""class"", ""scatterplot cell"")
                        .attr(""transform"", `translate(${i * width}, ${j * height})`)
                        .on(""click"", brushed);

                    xScale[dimX] = d3.scaleLinear()
                        .domain(d3.extent(data, d => d[dimX]))
                        .range([0, width]);

                    yScale[dimY] = d3.scaleLinear()
                        .domain(d3.extent(data, d => d[dimY]))
                        .range([height, 0]);

                    g.append(""g"").selectAll(""circle"")
                        .data(data)
                        .enter().append(""circle"")
                        .attr(""cx"", d => xScale[dimX](d[dimX]))
                        .attr(""cy"", d => yScale[dimY](d[dimY]))
                        .attr(""r"", 3);

                    g.append(""g"")
                        .attr(""class"", ""x-axis"")
                        .attr(""transform"", `translate(0,${height})`)
                        .call(d3.axisBottom(xScale[dimX]));

                    g.append(""g"")
                        .attr(""class"", ""y-axis"")
                        .call(d3.axisLeft(yScale[dimY]));

                    g.append(""g"")
                        .attr(""class"", ""brush"")
                        .call(brush.x(xScale[dimX]).y(yScale[dimY]).on(""brush end"", brushed));

                    function brushed(event) {
                        const selection = d3.event.selection;
                        if (selection) {
                            const [[x0, y0], [x1, y1]] = selection;
                            const selectedData = data.filter(d => 
                                x0 <= xScale[dimX](d[dimX]) && xScale[dimX](d[dimX]) <= x1 && 
                                y0 <= yScale[dimY](d[dimY]) && yScale[dimY](d[dimY]) <= y1
                            );

                            svg.selectAll(""circle"").classed(""highlight"", false);
                            svg.selectAll(""circle"")
                                .filter(d => selectedData.includes(d))
                                .classed(""highlight"", true);
                        }
                    }
                });
            });
        });
    </script>
</body>
</html>
",,34,35
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a brushable Scatterplot that visualizes the relationship between Net Income and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,multiple view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Brushable Scatterplot</title>
    <style>
        .scatterplot {
            border: 1px solid #ccc;
        }
        .brush .selection {
            fill: steelblue;
            fill-opacity: 0.3;
            stroke: #fff;
            stroke-width: 1.5px;
        }
        .tooltip {
            position: absolute;
            text-align: center;
            width: 60px;
            height: 28px;
            padding: 2px;
            font: 12px sans-serif;
            background: lightsteelblue;
            border: 0px;
            border-radius: 8px;
            pointer-events: none;
        }
        table {
            margin-left: 30px;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid #ccc;
            padding: 5px;
            text-align: left;
        }
    </style>
</head>
<body>
    <svg class=""scatterplot"" width=""800"" height=""600""></svg>
    <div class=""tooltip"" style=""opacity:0;""></div>
    <table id=""data-table"">
        <thead>
            <tr>
                <th>Quarter</th>
                <th>Company</th>
                <th>Net Income</th>
                <th>Revenue</th>
                <th>Expenses</th>
                <th>Employee Count</th>
                <th>Industry</th>
                <th>Stock Price</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
    
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <script>
        const svg = d3.select("".scatterplot"");
        const margin = { top: 20, right: 30, bottom: 30, left: 40 };
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        const x = d3.scaleLinear().range([0, width]);
        const y = d3.scaleLinear().range([height, 0]);

        const xAxis = g.append(""g"").attr(""class"", ""x axis"").attr(""transform"", `translate(0,${height})`);
        const yAxis = g.append(""g"").attr(""class"", ""y axis"");

        const brush = d3.brush().extent([[0, 0], [width, height]])
            .on(""brush end"", brushed);

        let data = [];

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(loadedData => {
            data = loadedData.map(d => ({
                Quarter: d.Quarter,
                Company: d.Company,
                NetIncome: +d['Net Income'],
                Revenue: +d.Revenue,
                Expenses: +d.Expenses,
                EmployeeCount: +d['Employee Count'],
                Industry: d.Industry,
                StockPrice: +d['Stock Price']
            }));

            x.domain(d3.extent(data, d => d.Revenue)).nice();
            y.domain(d3.extent(data, d => d.NetIncome)).nice();

            xAxis.call(d3.axisBottom(x));
            yAxis.call(d3.axisLeft(y));

            g.append(""g"")
                .attr(""class"", ""brush"")
                .call(brush);

            drawScatterplot();
        });

        function drawScatterplot() {
            g.selectAll(""circle"")
                .data(data)
                .enter().append(""circle"")
                .attr(""cx"", d => x(d.Revenue))
                .attr(""cy"", d => y(d.NetIncome))
                .attr(""r"", 5)
                .attr(""fill"", ""steelblue"")
                .on(""mouseover"", function(event, d) {
                    const tooltip = d3.select("".tooltip"");
                    tooltip.style(""opacity"", 1)
                           .html(""Net Income: "" + d.NetIncome + ""<br>Revenue: "" + d.Revenue)
                           .style(""left"", (event.pageX + 5) + ""px"")
                           .style(""top"", (event.pageY - 28) + ""px"");
                })
                .on(""mouseout"", function() {
                    d3.select("".tooltip"").style(""opacity"", 0);
                });
        }

        function brushed(event) {
            const selection = event.selection;
            if (!selection) return;

            const [[x0, y0], [x1, y1]] = selection;
            const selectedData = data.filter(d => x(d.Revenue) >= x0 && x(d.Revenue) <= x1 && 
                                                   y(d.NetIncome) >= y0 && y(d.NetIncome) <= y1);

            updateTable(selectedData.slice(0, 20));

            g.selectAll(""circle"")
                .attr(""fill"", d => selectedData.includes(d) ? ""orange"" : ""steelblue"");
        }

        function updateTable(selectedData) {
            const tbody = d3.select(""#data-table tbody"");
            tbody.selectAll(""tr"").remove();
            tbody.selectAll(""tr"")
                .data(selectedData).enter()
                .append(""tr"")
                .selectAll(""td"")
                .data(d => [d.Quarter, d.Company, d.NetIncome, d.Revenue, d.Expenses, 
                             d.EmployeeCount, d.Industry, d.StockPrice]).enter()
                .append(""td"")
                .text(d => d);
        }
    </script>
</body>
</html>
",,35,36
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a horizontal Bar Chart that shows all the data concerning Net Income, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,multiple view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }

        .bar:hover {
            fill: orange;
        }

        .axis-x path,
        .axis-x line {
            display: none;
        }

        .minimap {
            fill: lightgray;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const margin = { top: 20, right: 20, bottom: 20, left: 100 },
              width = 800 - margin.left - margin.right,
              height = 400 - margin.top - margin.bottom;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            data.forEach(d => {
                d[""Net Income""] = +d[""Net Income""];
                d[""Company""] = d[""Company""];
            });

            const x = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Net Income""])])
                .range([0, width]);

            const y = d3.scaleBand()
                .domain(data.map(d => d[""Company""]))
                .range([0, height])
                .padding(0.1);

            const xAxis = d3.axisBottom(x).ticks(10);
            const yAxis = d3.axisLeft(y);

            svg.append(""g"")
                .call(yAxis);

            svg.append(""g"")
                .attr(""class"", ""axis-x"")
                .attr(""transform"", `translate(0, ${height})`)
                .call(xAxis);

            svg.selectAll("".bar"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", 0)
                .attr(""y"", d => y(d[""Company""]))
                .attr(""width"", d => x(d[""Net Income""]))
                .attr(""height"", y.bandwidth());

            const minimapWidth = 100;
            const minimapHeight = height / 2;
            const minimapX = width + 30;

            const minimapXScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Net Income""])])
                .range([0, minimapWidth]);

            const minimapYScale = d3.scaleBand()
                .domain(data.map(d => d[""Company""]))
                .range([0, minimapHeight])
                .padding(0.1);

            const minimap = svg.append(""g"")
                .attr(""transform"", `translate(${minimapX}, 0)`);

            minimap.selectAll("".minimap"")
                .data(data)
                .enter().append(""rect"")
                .attr(""class"", ""minimap"")
                .attr(""x"", 0)
                .attr(""y"", d => minimapYScale(d[""Company""]))
                .attr(""width"", d => minimapXScale(d[""Net Income""]))
                .attr(""height"", minimapYScale.bandwidth());
        });
    </script>
</body>
</html>
",,36,37
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Net Income and Revenue, and a Bar Chart on the right that displays Company versus Net Income.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,multiple view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #container {
            display: flex;
        }
        #scatterplot {
            width: 50%;
            height: 400px;
        }
        #barchart {
            width: 50%;
            height: 400px;
        }
    </style>
</head>
<body>

<div id=""container"">
    <div id=""scatterplot""></div>
    <div id=""barchart""></div>
</div>

<script>
    fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
        .then(response => response.text())
        .then(data => {
            const rows = data.split('\n').slice(1);
            const netIncome = [];
            const revenue = [];
            const companies = [];
            const incomeData = [];

            rows.forEach(row => {
                const cols = row.split(',');
                if (cols.length > 6) {
                    netIncome.push(parseFloat(cols[2]));
                    revenue.push(parseFloat(cols[3]));
                    companies.push(cols[1]);
                    incomeData.push({ name: cols[1], value: parseFloat(cols[2]) });
                }
            });

            const scatterChart = echarts.init(document.getElementById('scatterplot'));
            scatterChart.setOption({
                title: { text: 'Net Income vs Revenue' },
                tooltip: {},
                xAxis: { name: 'Revenue', type: 'value' },
                yAxis: { name: 'Net Income', type: 'value' },
                series: [{
                    symbolSize: 10,
                    data: netIncome.map((income, index) => [revenue[index], income]),
                    type: 'scatter'
                }]
            });

            const barChart = echarts.init(document.getElementById('barchart'));
            barChart.setOption({
                title: { text: 'Company vs Net Income' },
                tooltip: {},
                xAxis: {
                    type: 'category',
                    data: companies,
                    axisLabel: { interval: 0, rotate: 45 }
                },
                yAxis: { type: 'value' },
                series: [{
                    data: incomeData.map(item => item.value),
                    type: 'bar'
                }]
            });
        });
</script>

</body>
</html>
",,37,38
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Net Income and Revenue, and a Bar Chart on the right that displays Company versus Net Income. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,multiple view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Visualization</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.3.3/echarts.min.js""></script>
    <style>
        #chartContainer {
            display: flex;
            justify-content: space-between;
        }
        .chart {
            width: 45%;
            height: 500px;
        }
    </style>
</head>
<body>

<div id=""chartContainer"">
    <div id=""scatterPlot"" class=""chart""></div>
    <div id=""barChart"" class=""chart""></div>
</div>

<script>
    async function fetchData() {
        const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv');
        const data = await response.text();
        return parseCSV(data);
    }

    function parseCSV(data) {
        const rows = data.split('\n').slice(1);
        return rows.map(row => {
            const cols = row.split(',');
            return {
                Quarter: cols[0],
                Company: cols[1],
                NetIncome: parseFloat(cols[2]),
                Revenue: parseFloat(cols[3]),
                Expenses: parseFloat(cols[4]),
                EmployeeCount: parseInt(cols[5]),
                Industry: cols[6],
                StockPrice: parseFloat(cols[7])
            };
        }).filter(row => !isNaN(row.NetIncome) && !isNaN(row.Revenue));
    }

    function renderScatterPlot(data) {
        const scatterPlot = echarts.init(document.getElementById('scatterPlot'));
        
        scatterPlot.setOption({
            tooltip: {},
            xAxis: {
                name: 'Revenue',
            },
            yAxis: {
                name: 'Net Income',
            },
            series: [{
                symbolSize: 10,
                data: data.map(item => [item.Revenue, item.NetIncome]),
                type: 'scatter'
            }]
        });

        scatterPlot.on('brush:select', function (params) {
            const selectedPoints = params.batch[0].areas[0].dataIndex; 
            const selectedCompanies = selectedPoints.map(index => data[index].Company);
            highlightBarChart(selectedCompanies);
        });
    }

    function highlightBarChart(selectedCompanies) {
        const barChart = echarts.init(document.getElementById('barChart'));

        const filteredData = barData.filter(item => selectedCompanies.includes(item.Company));
        const companies = filteredData.map(item => item.Company);
        const netIncomes = filteredData.map(item => item.NetIncome);

        barChart.setOption({
            tooltip: {},
            xAxis: {
                data: companies,
            },
            yAxis: {},
            visualMap: {
                show: false,
                dimension: 0,
                pieces: selectedCompanies.map(company => ({ value: company, color: '#ff0000' })),
            },
            series: [{
                type: 'bar',
                data: netIncomes,
                itemStyle: {
                    color: function(params) {
                        return selectedCompanies.includes(companies[params.dataIndex]) ? '#ff0000' : '#3398DB';
                    }
                }
            }]
        });
    }

    async function init() {
        const data = await fetchData();
        window.barData = data;
        renderScatterPlot(data);
        highlightBarChart([]);
    }

    init();
</script>

</body>
</html>
",,38,39
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Net Income , while the pie chart represents the distribution of Revenue.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,multiple view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""lineChart"" style=""width: 100%; height: 400px;""></div>
    <div id=""pieChart"" style=""width: 100%; height: 400px;""></div>

    <script>
        async function fetchData() {
            const response = await fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv');
            const data = await response.text();
            const rows = data.split('\n').slice(1);
            const quarters = [];
            const netIncome = [];
            const revenueData = {};
            
            rows.forEach(row => {
                const columns = row.split(',');
                const quarter = columns[0];
                const company = columns[1];
                const netIncomeValue = parseFloat(columns[2]) || 0;
                const revenueValue = parseFloat(columns[3]) || 0;
                
                quarters.push(quarter);
                netIncome.push(netIncomeValue);
                
                if (revenueData[company]) {
                    revenueData[company] += revenueValue;
                } else {
                    revenueData[company] = revenueValue;
                }
            });

            drawLineChart(quarters, netIncome);
            drawPieChart(revenueData);
        }

        function drawLineChart(quarters, netIncome) {
            const myChart = echarts.init(document.getElementById('lineChart'));
            const option = {
                title: {
                    text: 'Net Income Trend'
                },
                tooltip: {},
                xAxis: {
                    type: 'category',
                    data: quarters
                },
                yAxis: {
                    type: 'value'
                },
                series: [{
                    name: 'Net Income',
                    type: 'line',
                    data: netIncome
                }]
            };
            myChart.setOption(option);
        }

        function drawPieChart(revenueData) {
            const myChart = echarts.init(document.getElementById('pieChart'));
            const pieData = Object.entries(revenueData).map(([company, revenue]) => ({
                name: company,
                value: revenue
            }));

            const option = {
                title: {
                    text: 'Revenue Distribution',
                    subtext: 'By Company',
                    left: 'center'
                },
                tooltip: {
                    trigger: 'item'
                },
                series: [{
                    type: 'pie',
                    radius: '50%',
                    data: pieData,
                    emphasis: {
                        itemStyle: {
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowColor: 'rgba(0, 0, 0, 0.5)'
                        }
                    }
                }]
            };
            myChart.setOption(option);
        }

        fetchData();
    </script>
</body>
</html>
",,39,40
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Net Income , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,multiple view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""lineChart"" style=""width: 100%; height: 400px;""></div>
    <div id=""pieChart"" style=""width: 100%; height: 400px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const chartData = rows.map(row => {
                    const cols = row.split(',');
                    return {
                        Quarter: cols[0],
                        Company: cols[1],
                        NetIncome: parseFloat(cols[2]),
                        Revenue: parseFloat(cols[3]),
                        Expenses: parseFloat(cols[4]),
                        EmployeeCount: parseInt(cols[5]),
                        Industry: cols[6],
                        StockPrice: parseFloat(cols[7])
                    };
                }).filter(row => !isNaN(row.NetIncome) && !isNaN(row.Revenue));
                
                drawLineChart(chartData);
                drawPieChart(chartData);
            });

        let lineChartInstance;
        let pieChartInstance;

        function drawLineChart(data) {
            const netIncomeData = data.map(item => item.NetIncome);
            const quarters = data.map(item => item.Quarter);

            lineChartInstance = echarts.init(document.getElementById('lineChart'));
            lineChartInstance.setOption({
                title: {
                    text: 'Net Income Trend'
                },
                xAxis: {
                    type: 'category',
                    data: quarters
                },
                yAxis: {
                    type: 'value'
                },
                series: [{
                    data: netIncomeData,
                    type: 'line',
                    smooth: true,
                }],
            });

            lineChartInstance.on('brush', params => {
                const selectedData = data.filter((item, index) => params.batch[0].areas[0].coordRange[0] <= index && index <= params.batch[0].areas[0].coordRange[1]);
                updatePieChart(selectedData);
            });
        }

        function drawPieChart(data) {
            const revenueData = {};

            data.forEach(item => {
                if (!revenueData[item.Industry]) {
                    revenueData[item.Industry] = 0;
                }
                revenueData[item.Industry] += item.Revenue;
            });

            const pieData = Object.entries(revenueData).map(([key, value]) => ({ name: key, value }));

            pieChartInstance = echarts.init(document.getElementById('pieChart'));
            pieChartInstance.setOption({
                title: {
                    text: 'Revenue Distribution by Industry'
                },
                series: [{
                    type: 'pie',
                    radius: '50%',
                    data: pieData,
                    emphasis: {
                        itemStyle: {
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowColor: 'rgba(0, 0, 0, 0.5)'
                        }
                    }
                }],
            });
        }

        function updatePieChart(selectedData) {
            drawPieChart(selectedData);
        }

    </script>
</body>
</html>
",,40,41
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Revenue, Expenses, Employee Count, and Stock Price. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,multiple view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        .container {
            display: flex;
            flex-wrap: wrap;
        }
        .chart {
            width: 400px;
            height: 400px;
            margin: 10px;
        }
    </style>
</head>
<body>
    <div class=""container"">
        <div id=""scatter-rr"" class=""chart""></div>
        <div id=""scatter-re"" class=""chart""></div>
        <div id=""scatter-rp"" class=""chart""></div>
        <div id=""scatter-ee"" class=""chart""></div>
        <div id=""scatter-ep"" class=""chart""></div>
        <div id=""scatter-pp"" class=""chart""></div>
    </div>
    <script>
        let dataset;

        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                dataset = rows.map(row => {
                    const cols = row.split(',');
                    return {
                        Revenue: +cols[3],
                        Expenses: +cols[4],
                        EmployeeCount: +cols[5],
                        StockPrice: +cols[7],
                    };
                });
                drawScatterplotMatrix();
            });

        function drawScatterplotMatrix() {
            const highlights = new Set();

            const optionConfig = (xKey, yKey) => ({
                tooltip: {},
                xAxis: { type: 'value', name: xKey },
                yAxis: { type: 'value', name: yKey },
                series: [{
                    type: 'scatter',
                    data: dataset.map(d => [d[xKey], d[yKey]]),
                    itemStyle: {
                        color: (params) => highlights.has(params.dataIndex) ? 'red' : '#3398DB',
                    },
                }],
                brush: {
                    toolbox: ['rect', 'polygon', 'keep', 'clear'],
                },
            });

            const charts = [
                { id: 'scatter-rr', x: 'Revenue', y: 'Revenue' },
                { id: 'scatter-re', x: 'Revenue', y: 'Expenses' },
                { id: 'scatter-rp', x: 'Revenue', y: 'StockPrice' },
                { id: 'scatter-ee', x: 'Expenses', y: 'Expenses' },
                { id: 'scatter-ep', x: 'Expenses', y: 'StockPrice' },
                { id: 'scatter-pp', x: 'StockPrice', y: 'StockPrice' },
            ];

            charts.forEach(chart => {
                const chartElem = echarts.init(document.getElementById(chart.id));
                chartElem.setOption(optionConfig(chart.x, chart.y));
                chartElem.on('brushSelected', params => {
                    highlights.clear();
                    params.batch.forEach(batch => {
                        batch.selected.forEach(item => {
                            item.dataIndex.forEach(index => highlights.add(index));
                        });
                    });
                    charts.forEach(c => {
                        echarts.init(document.getElementById(c.id)).setOption(optionConfig(c.x, c.y));
                    });
                });
            });
        }
    </script>
</body>
</html>
",,41,42
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a brushable Scatterplot that visualizes the relationship between Net Income and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,multiple view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 70%;
            height: 600px;
            float: left;
        }
        #table {
            width: 30%;
            height: 600px;
            float: right;
            overflow: auto;
            border: 1px solid #ccc;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            padding: 8px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
    </style>
</head>
<body>

<div id=""main""></div>
<div id=""table"">
    <table>
        <thead>
            <tr>
                <th>Quarter</th>
                <th>Company</th>
                <th>Net Income</th>
                <th>Revenue</th>
                <th>Expenses</th>
                <th>Employee Count</th>
                <th>Industry</th>
                <th>Stock Price</th>
            </tr>
        </thead>
        <tbody id=""table-body"">
        </tbody>
    </table>
</div>

<script>
    const myChart = echarts.init(document.getElementById('main'));

    fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
        .then(response => response.text())
        .then(data => {
            const lines = data.split('\n').slice(1);
            const parsedData = lines.map(line => {
                const [quarter, company, netIncome, revenue, expenses, employeeCount, industry, stockPrice] = line.split(',');
                return {
                    Quarter: quarter,
                    Company: company,
                    NetIncome: parseFloat(netIncome),
                    Revenue: parseFloat(revenue),
                    Expenses: parseFloat(expenses),
                    EmployeeCount: parseInt(employeeCount, 10),
                    Industry: industry,
                    StockPrice: parseFloat(stockPrice)
                };
            }).filter(item => !isNaN(item.NetIncome) && !isNaN(item.Revenue));

            myChart.setOption({
                title: { text: 'Net Income vs Revenue' },
                tooltip: {},
                xAxis: { name: 'Revenue', type: 'value' },
                yAxis: { name: 'Net Income', type: 'value' },
                series: [{
                    symbolSize: 10,
                    data: parsedData.map(item => [item.Revenue, item.NetIncome]),
                    type: 'scatter'
                }]
            });

            myChart.on('brushSelected', params => {
                const selectedPoints = params.batch[0].selected[0].dataIndex;
                const selectedData = selectedPoints.map(idx => parsedData[idx]).slice(0, 20);
                const tableBody = document.getElementById('table-body');
                tableBody.innerHTML = selectedData.map(item => 
                    `<tr>
                        <td>${item.Quarter}</td>
                        <td>${item.Company}</td>
                        <td>${item.NetIncome}</td>
                        <td>${item.Revenue}</td>
                        <td>${item.Expenses}</td>
                        <td>${item.EmployeeCount}</td>
                        <td>${item.Industry}</td>
                        <td>${item.StockPrice}</td>
                    </tr>`
                ).join('');
            });
        });
</script>

</body>
</html>
",,42,43
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a horizontal Bar Chart that shows all the data concerning Net Income, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,multiple view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 80%; height: 600px; margin: auto;""></div>
    <div id=""minimap"" style=""width: 20%; height: 300px; position: absolute; right: 0; top: 0;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const quarters = [];
                const netIncome = [];
                rows.forEach(row => {
                    const cols = row.split(',');
                    if (cols.length > 1) {
                        quarters.push(cols[0]);
                        netIncome.push(parseFloat(cols[2]));
                    }
                });

                const mainChart = echarts.init(document.getElementById('main'));
                const minimapChart = echarts.init(document.getElementById('minimap'));

                const mainOption = {
                    title: { text: 'Net Income by Quarter' },
                    tooltip: {},
                    xAxis: {
                        type: 'value',
                        name: 'Net Income',
                    },
                    yAxis: {
                        type: 'category',
                        data: quarters,
                    },
                    series: [{
                        name: 'Net Income',
                        type: 'bar',
                        data: netIncome
                    }]
                };

                const minimapOption = {
                    title: { text: 'Minimap of Net Income' },
                    tooltip: {},
                    xAxis: {
                        type: 'value',
                        name: 'Net Income',
                    },
                    yAxis: {
                        type: 'category',
                        data: quarters,
                    },
                    series: [{
                        name: 'Net Income',
                        type: 'bar',
                        data: netIncome.map(value => value > 0 ? value : 0)  // Overlaying the minimap as a positive representation
                    }]
                };

                mainChart.setOption(mainOption);
                minimapChart.setOption(minimapOption);
            });
    </script>
</body>
</html>
",,43,44
scatterplot+bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Net Income and Revenue, and a Bar Chart on the right that displays Company versus Net Income.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,multiple view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.8.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2""></script>
    <style>
        #vis {
            display: flex;
            justify-content: space-between;
        }
        #scatterplot, #barchart {
            width: 45%;
        }
    </style>
</head>
<body>
    <div id=""vis"">
        <div id=""scatterplot""></div>
        <div id=""barchart""></div>
    </div>

    <script>
        const scatterplotSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {""field"": ""Revenue"", ""type"": ""quantitative""},
                ""y"": {""field"": ""Net Income"", ""type"": ""quantitative""},
                ""color"": {""field"": ""Company"", ""type"": ""nominal""}
            },
            ""width"": 400,
            ""height"": 300
        };

        const barchartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {""field"": ""Company"", ""type"": ""ordinal""},
                ""y"": {""field"": ""Net Income"", ""type"": ""quantitative""}
            },
            ""width"": 400,
            ""height"": 300
        };

        vegaEmbed('#scatterplot', scatterplotSpec);
        vegaEmbed('#barchart', barchartSpec);
    </script>
</body>
</html>
",,44,45
scatterplot+bar chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a Scatterplot on the left that visualizes the relationship between Net Income and Revenue, and a Bar Chart on the right that displays Company versus Net Income. Enable brushing and linking functionality to enhance interactivity. Add the following interactive features: swipe to select a set of points in the Scatterplot, and the corresponding data in the Bar Chart will be highlighted.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,multiple view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.13.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.3""></script>
    <style>
        #vis {
            display: flex;
        }
        .chart {
            width: 50%;
            padding: 10px;
        }
    </style>
</head>
<body>
    <div id=""vis"">
        <div class=""chart"" id=""scatterPlot""></div>
        <div class=""chart"" id=""barChart""></div>
    </div>
    <script>
        const scatterPlotSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Revenue"",
                    ""type"": ""quantitative""
                },
                ""y"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal""
                },
                ""tooltip"": [
                    {""field"": ""Company"", ""type"": ""nominal""},
                    {""field"": ""Net Income"", ""type"": ""quantitative""},
                    {""field"": ""Revenue"", ""type"": ""quantitative""}
                ]
            },
            ""selection"": {
                ""brush"": {
                    ""type"": ""interval"", ""encodings"": [""x"", ""y""]
                }
            }
        };

        const barChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": {""selection"": ""brush""}
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Company"",
                    ""type"": ""ordinal"",
                    ""axis"": { ""labelAngle"": 45 }
                },
                ""y"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal""
                }
            }
        };

        vegaEmbed('#scatterPlot', scatterPlotSpec).then(function (result) {
            vegaEmbed('#barChart', barChartSpec);
        });
    </script>
</body>
</html>
",,45,46
line chart+pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Net Income , while the pie chart represents the distribution of Revenue.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,multiple view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.3.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.1""></script>
</head>
<body>

<div id=""line-chart""></div>
<div id=""pie-chart""></div>

<script>
    const lineChartSpec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""description"": ""A line chart showing the trend of Net Income."",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
            ""format"": { ""type"": ""csv"" }
        },
        ""mark"": ""line"",
        ""encoding"": {
            ""x"": { ""field"": ""Quarter"", ""type"": ""ordinal"", ""title"": ""Quarter"" },
            ""y"": { ""field"": ""Net Income"", ""type"": ""quantitative"", ""title"": ""Net Income"" },
            ""color"": { ""field"": ""Company"", ""type"": ""nominal"", ""title"": ""Company"" }
        }
    };

    const pieChartSpec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""description"": ""A pie chart showing the distribution of Revenue."",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
            ""format"": { ""type"": ""csv"" }
        },
        ""mark"": {
            ""type"": ""arc"",
            ""tooltip"": true
        },
        ""encoding"": {
            ""theta"": { ""field"": ""Revenue"", ""type"": ""quantitative"" },
            ""color"": { ""field"": ""Company"", ""type"": ""nominal"" }
        }
    };

    vegaEmbed('#line-chart', lineChartSpec).then(function(result) {
        // Success, do nothing
    }).catch(console.error);

    vegaEmbed('#pie-chart', pieChartSpec).then(function(result) {
        // Success, do nothing
    }).catch(console.error);
</script>

</body>
</html>
",,46,47
line chart+pie chart+brushing and linking,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a visual interface consisting of two charts, a line chart on the top and a pie chart on the bottom, the line chart positioned above the pie chart. The line chart should display the trend of Net Income , while the pie chart represents the distribution of Revenue. Enable brushing and linking functionality to enhance interactivity. Add the following interactive function: select a subset of data points in the line chart, which will dynamically update the pie chart to reflect the distribution of Revenue for the selected group.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,multiple view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Financial Data Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <h1>Financial Data Visualization</h1>
    <div id=""lineChart""></div>
    <div id=""pieChart""></div>
    
    <script>
        const dataUrl = ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"";

        const lineChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {""url"": dataUrl},
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": {""field"": ""Quarter"", ""type"": ""temporal""},
                ""y"": {""field"": ""Net Income"", ""type"": ""quantitative""},
                ""tooltip"": [
                    {""field"": ""Quarter"", ""type"": ""temporal""},
                    {""field"": ""Net Income"", ""type"": ""quantitative""}
                ]
            },
            ""selection"": {
                ""brush"": {
                    ""type"": ""interval"", ""encodings"": [""x""]
                }
            }
        };

        const pieChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {""url"": dataUrl},
            ""transform"": [
                {
                    ""filter"": {""field"": ""Quarter"", ""selection"": ""brush""}
                },
                {
                    ""aggregate"": [
                        {""op"": ""sum"", ""field"": ""Revenue"", ""as"": ""Total Revenue""}
                    ],
                    ""groupby"": [""Company""]
                }
            ],
            ""mark"": ""arc"",
            ""encoding"": {
                ""theta"": {""field"": ""Total Revenue"", ""type"": ""quantitative""},
                ""color"": {""field"": ""Company"", ""type"": ""nominal""}
            }
        };

        vegaEmbed('#lineChart', lineChartSpec).then(function(result) {
            const lineView = result.view;

            vegaEmbed('#pieChart', pieChartSpec);

            lineView.addSignalListener('brush', function(name, value) {
                lineView.signal('brush', value);
                lineView.run();
            });
        });
    </script>
</body>
</html>
",,47,48
scatterplot+matrix+highlight,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to draw a brushable Scatterplot Matrix that visualizes the pairwise relationships between Revenue, Expenses, Employee Count, and Stock Price. Add the following interactive functions: brush to select data points in one cell and highlight them across all other cells.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,multiple view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Brushable Scatterplot Matrix</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.8.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2""></script>
    <style>
        .scatterplot-matrix {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            grid-template-rows: repeat(4, 1fr);
        }
    </style>
</head>
<body>

<div id=""vis"" class=""scatterplot-matrix""></div>

<script type=""text/javascript"">
    const dataUrl = ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"";

    const fields = [""Revenue"", ""Expenses"", ""Employee Count"", ""Stock Price""];
    const marks = [];

    fields.forEach((xField, xIndex) => {
        fields.forEach((yField, yIndex) => {
            marks.push({
                ""type"": ""point"",
                ""x"": { ""field"": xField },
                ""y"": { ""field"": yField },
                ""tooltip"": [
                    { ""field"": ""Company"" },
                    { ""field"": xField },
                    { ""field"": yField }
                ],
                ""fill"": { ""value"": ""lightgray"" },
                ""stroke"": { ""value"": ""black"" },
                ""strokeWidth"": { ""value"": 1 },
                ""opacity"": { ""expr"": ""datum.selected ? 1 : 0.5"" },
                ""select"": {
                    ""type"": ""point"",
                    ""on"": ""mouseover"",
                    ""clear"": ""mouseout"",
                    ""encodings"": [""x"", ""y""]
                }
            });
        });
    });

    const scatterplotMatrixSpec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""data"": { ""url"": dataUrl },
        ""layer"": marks,
        ""encoding"": {
            ""opacity"": { ""condition"": { ""selection"": ""brush"", ""value"": 1 }, ""value"": 0.5 }
        },
        ""resolve"": { ""scale"": { ""x"": ""independently"", ""y"": ""independently"" } },
        ""scales"": [
            {
                ""name"": ""x"",
                ""type"": ""linear"",
                ""domain"": { ""data"": ""source"", ""field"": ""x"" },
                ""range"": ""width""
            },
            {
                ""name"": ""y"",
                ""type"": ""linear"",
                ""domain"": { ""data"": ""source"", ""field"": ""y"" },
                ""range"": ""height""
            }
        ],
        ""selection"": {
            ""brush"": {
                ""type"": ""interval"",
                ""on"": ""mouseover"",
                ""encodings"": [""x"", ""y""]
            }
        },
        ""height"": 300,
        ""width"": 300
    };

    vegaEmbed('#vis', scatterplotMatrixSpec);
</script>

</body>
</html>
",,48,49
scatterplot+table,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a brushable Scatterplot that visualizes the relationship between Net Income and Revenue. Add the following interactive functions: Drag the rectangular brush to draw a table on the right side of the Scatterplot that shows the information of the selected points (the first 20).
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,multiple view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Brushable Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.22.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.5.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.18.0""></script>
</head>
<body>
    <div id=""scatterplot""></div>
    <div id=""table""></div>

    <script type=""text/javascript"">
        const dataUrl = ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"";

        const scatterplotSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": dataUrl,
                ""format"": {""type"": ""csv""}
            },
            ""width"": 500,
            ""height"": 300,
            ""transform"": [
                {
                    ""filter"": {""selection"": ""brush""}
                }
            ],
            ""selection"": {
                ""brush"": {
                    ""type"": ""interval"",
                    ""encodings"": [""x"", ""y""]
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Revenue"",
                    ""type"": ""quantitative""
                },
                ""y"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative""
                },
                ""tooltip"": [
                    {""field"": ""Company"", ""type"": ""nominal""},
                    {""field"": ""Net Income"", ""type"": ""quantitative""},
                    {""field"": ""Revenue"", ""type"": ""quantitative""},
                    {""field"": ""Expenses"", ""type"": ""quantitative""},
                    {""field"": ""Employee Count"", ""type"": ""quantitative""},
                    {""field"": ""Industry"", ""type"": ""nominal""},
                    {""field"": ""Stock Price"", ""type"": ""quantitative""}
                ]
            }
        };

        vegaEmbed('#scatterplot', scatterplotSpec).then(result => {
            const view = result.view;

            view.addEventListener('click', () => {
                const selectedData = view.data('table')
                    .filter(d => {
                        const brush = view.transforms[""brush""];
                        return brush && brush.filter.some(b => b[0] <= d.Revenue && d.Revenue <= b[1] && b[2] <= d['Net Income'] && d['Net Income'] <= b[3]);
                    })
                    .slice(0, 20); // Limit to first 20 results
                renderTable(selectedData);
            });

            view.run();
        });

        function renderTable(data) {
            const tableDiv = document.getElementById('table');
            tableDiv.innerHTML = '';
            if (data.length > 0) {
                const table = document.createElement('table');
                table.innerHTML = `<tr>
                    <th>Company</th>
                    <th>Net Income</th>
                    <th>Revenue</th>
                    <th>Expenses</th>
                    <th>Employee Count</th>
                    <th>Industry</th>
                    <th>Stock Price</th>
                </tr>`;
                data.forEach(row => {
                    const tr = document.createElement('tr');
                    tr.innerHTML = `<td>${row.Company}</td>
                                    <td>${row['Net Income']}</td>
                                    <td>${row.Revenue}</td>
                                    <td>${row.Expenses}</td>
                                    <td>${row['Employee Count']}</td>
                                    <td>${row.Industry}</td>
                                    <td>${row['Stock Price']}</td>`;
                    table.appendChild(tr);
                });
                tableDiv.appendChild(table);
            }
        }
    </script>
</body>
</html>
",,49,50
bar chart+table+minimap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a horizontal Bar Chart that shows all the data concerning Net Income, with a smaller overview representation (called a minimap) displayed on the right.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,multiple view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Horizontal Bar Chart with Minimap</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.22.1""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.4.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""main-chart""></div>
    <div id=""minimap""></div>

    <script type=""text/javascript"">
        const mainChartSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative"",
                    ""title"": ""Net Income""
                },
                ""y"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal"",
                    ""title"": ""Company"",
                    ""sort"": ""-x""
                },
                ""color"": {
                    ""field"": ""Industry"",
                    ""type"": ""nominal"",
                    ""legend"": {""title"": ""Industry""}
                }
            },
            ""width"": 400,
            ""height"": 300
        };

        const minimapSpec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative"",
                    ""title"": ""Net Income""
                },
                ""y"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal"",
                    ""title"": ""Company"",
                    ""sort"": ""-x""
                }
            },
            ""width"": 150,
            ""height"": 150,
            ""config"": {
                ""mark"": {""opacity"": 0.5}
            }
        };

        vegaEmbed('#main-chart', mainChartSpec);
        vegaEmbed('#minimap', minimapSpec);
    </script>
</body>
</html>
",,50,51
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income vs Revenue Scatterplot</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .scatter {
            fill: steelblue;
            opacity: 0.7;
        }
        .scatter:hover {
            opacity: 1;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""600""></svg>
    <script>
        const svg = d3.select(""svg""),
            margin = {top: 20, right: 30, bottom: 40, left: 40},
            width = +svg.attr(""width"") - margin.left - margin.right,
            height = +svg.attr(""height"") - margin.top - margin.bottom,
            g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            data.forEach(d => {
                d['Net Income'] = +d['Net Income'];
                d['Revenue'] = +d['Revenue'];
            });

            const x = d3.scaleLinear()
                .domain(d3.extent(data, d => d['Revenue'])).nice()
                .range([0, width]);

            const y = d3.scaleLinear()
                .domain(d3.extent(data, d => d['Net Income'])).nice()
                .range([height, 0]);

            g.append(""g"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x).ticks(6));

            g.append(""g"")
                .call(d3.axisLeft(y).ticks(6));

            g.append(""text"")
                .attr(""x"", width / 2)
                .attr(""y"", height + margin.bottom - 10)
                .style(""text-anchor"", ""middle"")
                .text(""Revenue"");

            g.append(""text"")
                .attr(""transform"", ""rotate(-90)"")
                .attr(""y"", 0 - margin.left + 10)
                .attr(""x"", 0 - (height / 2))
                .style(""text-anchor"", ""middle"")
                .text(""Net Income"");

            g.selectAll("".scatter"")
                .data(data)
                .enter().append(""circle"")
                .attr(""class"", ""scatter"")
                .attr(""cx"", d => x(d['Revenue']))
                .attr(""cy"", d => y(d['Net Income']))
                .attr(""r"", 5);
        });
    </script>
</body>
</html>
",,51,52
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Line Chart that visualizes the trend of Net Income over the Quarter for each Company.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Trend</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line { fill: none; stroke-width: 2; }
        .axis { font: 10px sans-serif; }
        .axis path, .axis line { fill: none; shape-rendering: crispEdges; }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = {top: 20, right: 20, bottom: 30, left: 50},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            data.forEach(d => {
                d[""Net Income""] = +d[""Net Income""];
                d[""Quarter""] = d[""Quarter""];
            });

            const companies = Array.from(new Set(data.map(d => d.Company)));

            const x = d3.scaleBand()
                .domain(data.map(d => d[""Quarter""]))
                .rangeRound([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([d3.min(data, d => d[""Net Income""]), d3.max(data, d => d[""Net Income""])])
                .rangeRound([height, 0]);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const line = d3.line()
                .x(d => x(d[""Quarter""]) + x.bandwidth() / 2)
                .y(d => y(d[""Net Income""]));

            const companyData = companies.map(company => {
                return data.filter(d => d.Company === company);
            });

            color.domain(companies);

            companyData.forEach(company => {
                g.append(""path"")
                    .datum(company)
                    .attr(""class"", ""line"")
                    .attr(""d"", line)
                    .style(""stroke"", color(company[0].Company));
            });

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
",,52,53
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis {
            font: 10px sans-serif;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            const filteredData = data.filter(d => d.Quarter === ""Q1-2021"");
            filteredData.forEach(d => {
                d[""Net Income""] = +d[""Net Income""];
            });

            const x = d3.scaleBand()
                .domain(filteredData.map(d => d.Company))
                .range([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([0, d3.max(filteredData, d => d[""Net Income""])])
                .nice()
                .range([height, 0]);

            g.append(""g"")
                .selectAll("".bar"")
                .data(filteredData)
                .enter().append(""rect"")
                .attr(""class"", ""bar"")
                .attr(""x"", d => x(d.Company))
                .attr(""y"", d => y(d[""Net Income""]))
                .attr(""width"", x.bandwidth())
                .attr(""height"", d => height - y(d[""Net Income""]));

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x).tickFormat(d => d).tickSize(0));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
",,53,54
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Pie Chart that visualizes the proportion of Net Income contributed by each Company in Q1-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Pie Chart - Net Income by Company (Q1 2021)</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .slice {
            stroke: #ffffff;
        }
    </style>
</head>
<body>
    <svg width=""500"" height=""500""></svg>
    <script>
        const width = 500, height = 500, radius = Math.min(width, height) / 2;
        const svg = d3.select(""svg"").attr(""viewBox"", `0 0 ${width} ${height}`).append(""g"")
            .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            const filteredData = data.filter(d => d.Quarter === ""Q1 2021"");
            
            filteredData.forEach(d => {
                d['Net Income'] = +d['Net Income'];
            });

            const totalNetIncome = d3.sum(filteredData, d => d['Net Income']);
            const pieData = filteredData.map(d => ({company: d.Company, netIncome: d['Net Income'], percentage: d['Net Income'] / totalNetIncome}));

            const pie = d3.pie().value(d => d.netIncome);
            const arc = d3.arc().innerRadius(0).outerRadius(radius);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const arcs = svg.selectAll(""arc"")
                .data(pie(pieData))
                .enter().append(""g"").attr(""class"", ""arc"");

            arcs.append(""path"")
                .attr(""d"", arc)
                .attr(""fill"", (d, i) => color(i));

            arcs.append(""text"")
                .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                .attr(""dy"", "".35em"")
                .text(d => d.data.company);
        });
    </script>
</body>
</html>
",,54,55
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Donut Chart that visualizes the distribution of Net Income among Company in Q1-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Donut Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .arc {
            stroke: #fff;
        }
    </style>
</head>
<body>
    <svg width=""500"" height=""500""></svg>
    <script>
        const width = 500;
        const height = 500;
        const radius = Math.min(width, height) / 2 - 10;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            const filteredData = data.filter(d => d.Quarter === ""Q1-2021"");
            
            const incomeData = filteredData.map(d => ({
                company: d.Company,
                netIncome: +d[""Net Income""]
            }));

            const pie = d3.pie()
                .value(d => d.netIncome);
            const arc = d3.arc()
                .innerRadius(radius * 0.5)
                .outerRadius(radius);

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            const arcs = svg.selectAll("".arc"")
                .data(pie(incomeData))
                .enter()
                .append(""g"")
                .attr(""class"", ""arc"");

            arcs.append(""path"")
                .attr(""d"", arc)
                .attr(""fill"", (d, i) => color(i))
                .attr(""stroke"", ""#fff"")
                .style(""stroke-width"", ""2px"");

            arcs.append(""text"")
                .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                .attr(""dy"", ""0.35em"")
                .text(d => d.data.company);
        });
    </script>
</body>
</html>
",,55,56
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Coxcomb Chart(polar area chart) to compare the Net Income of different Company in Q1-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coxcomb Chart - Net Income Q1 2021</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .arc {
            stroke: #fff;
        }
    </style>
</head>
<body>
    <svg width=""600"" height=""600""></svg>
    <script>
        const width = 600;
        const height = 600;
        const radius = Math.min(width, height) / 2;

        const svg = d3.select(""svg"")
            .append(""g"")
            .attr(""transform"", `translate(${width / 2}, ${height / 2})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            const filteredData = data.filter(d => d.Quarter === ""Q1 2021"");

            const netIncomeData = filteredData.map(d => ({
                company: d.Company,
                netIncome: +d[""Net Income""]
            }));

            const radiusScale = d3.scaleLinear()
                .domain([0, d3.max(netIncomeData, d => d.netIncome)])
                .range([0, radius]);

            const pie = d3.pie()
                .value(d => d.netIncome);

            const arc = d3.arc()
                .innerRadius(0)
                .outerRadius(d => radiusScale(d.data.netIncome));

            const arcs = svg.selectAll("".arc"")
                .data(pie(netIncomeData))
                .enter().append(""g"")
                .attr(""class"", ""arc"");

            arcs.append(""path"")
                .attr(""d"", arc)
                .attr(""fill"", (d, i) => d3.schemeCategory10[i % 10]);

            arcs.append(""text"")
                .attr(""transform"", d => `translate(${arc.centroid(d)})`)
                .attr(""dy"", "".35em"")
                .text(d => d.data.company);
        });
    </script>
</body>
</html>
",,56,57
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Radar Chart to compare the Net Income of different Company in Q1-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Radar Chart - Net Income Comparison</title>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <style>
        .radar-chart {
            position: relative;
            width: 500px;
            height: 500px;
            margin: auto;
        }
        .radar-chart polygon {
            fill: rgba(50, 50, 255, 0.5);
            stroke-width: 2;
            cursor: pointer;
        }
        .radar-chart text {
            font-family: sans-serif;
            font-size: 12px;
            text-anchor: middle;
        }
    </style>
</head>
<body>
    <div class=""radar-chart""></div>
    <script>
        const margin = { top: 50, right: 50, bottom: 50, left: 50 };
        const width = 500 - margin.left - margin.right;
        const height = 500 - margin.top - margin.bottom;

        const radius = Math.min(width, height) / 2;
        
        const radarChart = d3.select("".radar-chart"")
            .append(""svg"")
            .attr(""width"", width + margin.left + margin.right)
            .attr(""height"", height + margin.top + margin.bottom)
            .append(""g"")
            .attr(""transform"", `translate(${(width / 2) + margin.left}, ${(height / 2) + margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            const filteredData = data.filter(d => d.Quarter === 'Q1-2021');

            const companies = filteredData.map(d => d.Company);
            const netIncomes = filteredData.map(d => +d[""Net Income""]);

            const angleSlice = Math.PI * 2 / companies.length;

            const radarLine = d3.lineRadial()
                .radius((d, i) => d)
                .angle((d, i) => i * angleSlice);

            radarChart.selectAll("".area"")
                .data([netIncomes])
                .enter()
                .append(""polygon"")
                .attr(""class"", ""area"")
                .attr(""points"", (d) => d.map((value, i) => {
                    const angle = angleSlice * i;
                    const x = radius * value / d3.max(netIncomes) * Math.sin(angle);
                    const y = radius * value / d3.max(netIncomes) * -Math.cos(angle);
                    return [x, y].join("","");
                }).join("" ""))
                .style(""fill"", ""rgba(50, 50, 255, 0.5)"");

            radarChart.selectAll("".label"")
                .data(companies)
                .enter()
                .append(""text"")
                .attr(""class"", ""label"")
                .attr(""x"", (d, i) => (radius + 10) * Math.sin(angleSlice * i))
                .attr(""y"", (d, i) => (radius + 10) * -Math.cos(angleSlice * i))
                .text(d => d);
        });
    </script>
</body>
</html>
",,57,58
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Streamgraph that visualizes the changes of Net Income over the Quarter for each Company.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Streamgraph of Net Income</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .stream { fill-opacity: .7; }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom;

        const color = d3.scaleOrdinal(d3.schemeCategory10);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            const nestedData = d3.groups(data, d => d.Company)
                .map(([key, values]) => {
                    return {
                        Company: key,
                        values: values.map(d => ({
                            Quarter: d.Quarter,
                            NetIncome: +d[""Net Income""]
                        }))
                    };
                });

            const quarters = [...new Set(data.map(d => d.Quarter))];
            const stack = d3.stack()
                .keys(nestedData.map(d => d.Company))
                .value((d, key) => {
                    const value = d.values.find(v => v.Quarter === d.Quarter);
                    return value ? value.NetIncome : 0;
                });

            const series = stack(nestedData.map(d => {
                return {Quarter: d.values.map(v => v.Quarter), ...Object.fromEntries(d.values.map(v => [d.Company, v.NetIncome]))};
            }));

            const x = d3.scaleBand()
                .domain(quarters)
                .range([0, width])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([d3.min(series, d => d3.min(d, v => v[1])), d3.max(series, d => d3.max(d, v => v[1]))])
                .range([height, 0]);

            const area = d3.area()
                .x(d => x(d.data.Quarter))
                .y0(d => y(d[0]))
                .y1(d => y(d[1]));

            svg.selectAll("".series"")
                .data(series)
                .enter().append(""path"")
                .attr(""class"", ""stream"")
                .attr(""d"", area)
                .style(""fill"", (d, i) => color(i))
                .attr(""transform"", `translate(${margin.left}, ${margin.top})`);

            svg.append(""g"")
                .attr(""transform"", `translate(${margin.left}, ${height + margin.top})`)
                .call(d3.axisBottom(x));

            svg.append(""g"")
                .attr(""transform"", `translate(${margin.left}, ${margin.top})`)
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
",,58,59
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Slopegraph to compare the Net Income between Q1-2021 and Q2-2021 for each Company.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Slopegraph of Net Income</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 2px;
        }
        .circle {
            fill: white;
            stroke: steelblue;
            stroke-width: 1.5px;
        }
        .label {
            font: 10px sans-serif;
            text-anchor: end;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg"");
        const margin = {top: 20, right: 30, bottom: 30, left: 100};
        const width = +svg.attr(""width"") - margin.left - margin.right;
        const height = +svg.attr(""height"") - margin.top - margin.bottom;
        const graphArea = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            const filteredData = data.filter(d => d.Quarter === ""Q1-2021"" || d.Quarter === ""Q2-2021"");
            const companies = [...new Set(filteredData.map(d => d.Company))];
            const netIncomeData = companies.map(company => {
                const q1 = filteredData.find(d => d.Company === company && d.Quarter === ""Q1-2021"");
                const q2 = filteredData.find(d => d.Company === company && d.Quarter === ""Q2-2021"");
                return {
                    Company: company,
                    Q1: +q1[""Net Income""],
                    Q2: +q2[""Net Income""]
                };
            });

            const x = d3.scaleLinear()
                .domain([d3.min(netIncomeData, d => d.Q1), d3.max(netIncomeData, d => d.Q2)])
                .range([0, width]);

            const y = d3.scaleBand()
                .domain(netIncomeData.map(d => d.Company))
                .range([0, height])
                .padding(0.1);

            graphArea.append(""g"")
                .selectAll("".line"")
                .data(netIncomeData)
                .enter().append(""line"")
                .attr(""class"", ""line"")
                .attr(""x1"", d => x(d.Q1))
                .attr(""x2"", d => x(d.Q2))
                .attr(""y1"", d => y(d.Company) + y.bandwidth() / 2)
                .attr(""y2"", d => y(d.Company) + y.bandwidth() / 2);

            graphArea.append(""g"")
                .selectAll("".circle"")
                .data(netIncomeData)
                .enter().append(""circle"")
                .attr(""class"", ""circle"")
                .attr(""cx"", d => x(d.Q1))
                .attr(""cy"", d => y(d.Company) + y.bandwidth() / 2)
                .attr(""r"", 4);

            graphArea.append(""g"")
                .selectAll("".circle"")
                .data(netIncomeData)
                .enter().append(""circle"")
                .attr(""class"", ""circle"")
                .attr(""cx"", d => x(d.Q2))
                .attr(""cy"", d => y(d.Company) + y.bandwidth() / 2)
                .attr(""r"", 4);

            graphArea.append(""g"")
                .selectAll("".label"")
                .data(netIncomeData)
                .enter().append(""text"")
                .attr(""class"", ""label"")
                .attr(""x"", d => x(d.Q1) - 5)
                .attr(""y"", d => y(d.Company) + y.bandwidth() / 2 + 4)
                .text(d => d.Q1);

            graphArea.append(""g"")
                .selectAll("".label"")
                .data(netIncomeData)
                .enter().append(""text"")
                .attr(""class"", ""label"")
                .attr(""x"", d => x(d.Q2) + 5)
                .attr(""y"", d => y(d.Company) + y.bandwidth() / 2 + 4)
                .text(d => d.Q2);
        });
    </script>
</body>
</html>
",,59,60
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Heatmap that visualizes the Net Income across Company and Quarters.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Heatmap</title>
    <style>
        .heatmap rect {
            stroke: #fff;
        }
        .heatmap text {
            font-size: 10px;
            text-anchor: middle;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400"" class=""heatmap""></svg>
    <script src=""https://d3js.org/d3.v6.min.js""></script>
    <script>
        const margin = { top: 20, right: 20, bottom: 30, left: 40 },
              width = 800 - margin.left - margin.right,
              height = 400 - margin.top - margin.bottom;
        
        const svg = d3.select("".heatmap"")
                      .attr(""width"", width + margin.left + margin.right)
                      .attr(""height"", height + margin.top + margin.bottom)
                    .append(""g"")
                      .attr(""transform"", `translate(${margin.left},${margin.top})`);
        
        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            data.forEach(d => {
                d['Net Income'] = +d['Net Income'];
            });
            
            const companies = [...new Set(data.map(d => d.Company))];
            const quarters = [...new Set(data.map(d => d.Quarter))];

            const xScale = d3.scaleBand()
                             .domain(companies)
                             .range([0, width])
                             .padding(0.1);

            const yScale = d3.scaleBand()
                             .domain(quarters)
                             .range([height, 0])
                             .padding(0.1);

            const colorScale = d3.scaleSequential(d3.interpolateRdYlGn)
                                 .domain([d3.min(data, d => d['Net Income']), d3.max(data, d => d['Net Income'])]);

            svg.selectAll("".cell"")
               .data(data)
               .enter().append(""rect"")
               .attr(""class"", ""cell"")
               .attr(""x"", d => xScale(d.Company))
               .attr(""y"", d => yScale(d.Quarter))
               .attr(""width"", xScale.bandwidth())
               .attr(""height"", yScale.bandwidth())
               .attr(""fill"", d => colorScale(d['Net Income']));

            svg.selectAll("".text"")
               .data(data)
               .enter().append(""text"")
               .attr(""x"", d => xScale(d.Company) + xScale.bandwidth() / 2)
               .attr(""y"", d => yScale(d.Quarter) + yScale.bandwidth() / 2)
               .attr(""dy"", "".35em"")
               .text(d => d['Net Income']);
        });
    </script>
</body>
</html>
",,60,61
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Stacked Bar Chart</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar { 
            opacity: 0.7; 
            transition: opacity 0.3s; 
        }
        .bar:hover { 
            opacity: 1; 
        }
        .axis {
            font-family: sans-serif;
            font-size: 12px;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 40, left: 40},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            // Convert data types
            data.forEach(d => {
                d[""Net Income""] = +d[""Net Income""];
                d[""Revenue""] = +d[""Revenue""];
                d[""Expenses""] = +d[""Expenses""];
            });

            const industries = Array.from(new Set(data.map(d => d.Industry)));
            const xScale = d3.scaleBand()
                .domain(data.map(d => d.Company))
                .range([0, width])
                .padding(0.1);

            const yScale = d3.scaleLinear()
                .domain([0, d3.max(data, d => d[""Net Income""] + d[""Revenue""] + d[""Expenses""])])
                .nice()
                .range([height, 0]);

            const color = d3.scaleOrdinal()
                .domain([""Net Income"", ""Revenue"", ""Expenses""])
                .range([""#88ccee"", ""#ffdd44"", ""#ffbb99""]);

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(xScale));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(yScale));

            const stackedData = d3.stack()
                .keys([""Net Income"", ""Revenue"", ""Expenses""])
                (d3.nest()
                    .key(d => d.Company)
                    .rollup(v => ({
                        ""Net Income"": d3.sum(v, d => d[""Net Income""]),
                        ""Revenue"": d3.sum(v, d => d[""Revenue""]),
                        ""Expenses"": d3.sum(v, d => d[""Expenses""])
                    }))
                    .entries(data)
                    .map(d => ({Company: d.key, ...d.value}))
                );

            g.selectAll("".layer"")
                .data(stackedData)
                .enter().append(""g"")
                .attr(""class"", ""layer"")
                .attr(""fill"", d => color(d.key))
                .selectAll(""rect"")
                .data(d => d)
                .enter().append(""rect"")
                .attr(""x"", d => xScale(d.data.Company))
                .attr(""y"", d => yScale(d[1]))
                .attr(""height"", d => yScale(d[0]) - yScale(d[1]))
                .attr(""width"", xScale.bandwidth());
        });
    </script>
</body>
</html>
",,61,62
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Horizontal Bar Chart that visualizes the Net Income for each Company in Q1-2021.
Use the following visualization library: D3.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the `d3.csv()` function to load data; when iterating over the data and converting data types, be sure to use square brackets to access property names that contain special characters (such as spaces or symbols).","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",D3,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Visualization</title>
    <script src=""https://d3js.org/d3.v7.min.js""></script>
    <style>
        .bar {
            fill: steelblue;
        }
        .bar:hover {
            fill: orange;
        }
        .axis--x path, .axis--x line {
            display: none;
        }
        .axis--y .tick line {
            stroke: lightgrey;
        }
    </style>
</head>
<body>
    <svg width=""800"" height=""400""></svg>
    <script>
        const svg = d3.select(""svg""),
              margin = {top: 20, right: 30, bottom: 30, left: 100},
              width = +svg.attr(""width"") - margin.left - margin.right,
              height = +svg.attr(""height"") - margin.top - margin.bottom,
              g = svg.append(""g"").attr(""transform"", `translate(${margin.left},${margin.top})`);

        d3.csv(""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"").then(data => {
            data = data.filter(d => d.Quarter === ""Q1-2021"").map(d => ({
                Company: d.Company,
                NetIncome: +d[""Net Income""]
            }));

            const x = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.NetIncome)])
                .range([0, width]);

            const y = d3.scaleBand()
                .domain(data.map(d => d.Company))
                .range([0, height])
                .padding(0.1);

            g.append(""g"")
                .selectAll("".bar"")
                .data(data)
                .enter().append(""rect"")
                    .attr(""class"", ""bar"")
                    .attr(""x"", 0)
                    .attr(""y"", d => y(d.Company))
                    .attr(""width"", d => x(d.NetIncome))
                    .attr(""height"", y.bandwidth());

            g.append(""g"")
                .attr(""class"", ""axis axis--x"")
                .attr(""transform"", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            g.append(""g"")
                .attr(""class"", ""axis axis--y"")
                .call(d3.axisLeft(y));
        });
    </script>
</body>
</html>
",,62,63
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income vs Revenue Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 800px;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const netIncome = [];
                const revenue = [];

                rows.forEach(row => {
                    const cols = row.split(',');
                    if (cols.length > 0) {
                        netIncome.push(Number(cols[2])); // Net Income
                        revenue.push(Number(cols[3])); // Revenue
                    }
                });

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);
                const option = {
                    title: {
                        text: 'Net Income vs Revenue'
                    },
                    tooltip: {},
                    xAxis: {
                        name: 'Revenue',
                        type: 'value'
                    },
                    yAxis: {
                        name: 'Net Income',
                        type: 'value'
                    },
                    series: [{
                        symbol: 'circle',
                        symbolSize: 10,
                        data: netIncome.map((income, index) => [revenue[index], income]),
                        type: 'scatter'
                    }]
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
",,63,64
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Line Chart that visualizes the trend of Net Income over the Quarter for each Company.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Trend</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const parsedData = rows.map(row => {
                    const cols = row.split(',');
                    return {
                        Quarter: cols[0].trim(),
                        Company: cols[1].trim(),
                        Net_Income: parseFloat(cols[2].trim()) || 0,
                    };
                });

                const groupedData = {};
                parsedData.forEach(item => {
                    if (!groupedData[item.Company]) {
                        groupedData[item.Company] = { name: item.Company, data: [] };
                    }
                    groupedData[item.Company].data.push([item.Quarter, item.Net_Income]);
                });

                const seriesData = Object.values(groupedData).map(company => ({
                    name: company.name,
                    type: 'line',
                    data: company.data,
                }));

                const option = {
                    title: {
                        text: 'Net Income Trend Over Quarters'
                    },
                    tooltip: {
                        trigger: 'axis'
                    },
                    legend: {
                        data: Object.keys(groupedData)
                    },
                    xAxis: {
                        type: 'category',
                        boundaryGap: false,
                        data: [...new Set(parsedData.map(item => item.Quarter))]
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: seriesData
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
",,64,65
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Net Income Bar Chart for Q1-2021</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 600px;height:400px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const netIncomeData = {};

                rows.forEach(row => {
                    const columns = row.split(',');
                    const quarter = columns[0].trim();
                    const company = columns[1].trim();
                    const netIncome = parseFloat(columns[2].trim());

                    if (quarter === 'Q1-2021') {
                        netIncomeData[company] = netIncome;
                    }
                });

                const companies = Object.keys(netIncomeData);
                const netIncomes = Object.values(netIncomeData);

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);
                const option = {
                    title: {
                        text: 'Net Income for Each Company in Q1-2021'
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'category',
                        data: companies
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        name: 'Net Income',
                        type: 'bar',
                        data: netIncomes,
                        itemStyle: {
                            color: '#4CAF50'
                        }
                    }]
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
",,65,66
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Pie Chart that visualizes the proportion of Net Income contributed by each Company in Q1-2021.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Pie Chart - Q1 2021</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>

<div id=""main"" style=""width: 600px; height: 400px;""></div>

<script>
    fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
        .then(response => response.text())
        .then(data => {
            // Parse the CSV data
            const rows = data.split('\n').slice(1);
            const q1_2021_data = rows.filter(row => row.includes('2021,Q1')).map(row => {
                const columns = row.split(',');
                return {
                    company: columns[1],
                    netIncome: parseFloat(columns[2])
                };
            });

            const companies = q1_2021_data.map(item => item.company);
            const netIncomes = q1_2021_data.map(item => item.netIncome);

            // ECharts configuration
            var myChart = echarts.init(document.getElementById('main'));
            var option = {
                title: {
                    text: 'Net Income Proportion by Company (Q1 2021)',
                    subtext: 'Source: Financial Data',
                    left: 'center'
                },
                tooltip: {
                    trigger: 'item'
                },
                legend: {
                    orient: 'vertical',
                    left: 'left'
                },
                series: [
                    {
                        name: 'Net Income',
                        type: 'pie',
                        radius: '50%',
                        data: companies.map((company, index) => ({
                            name: company,
                            value: netIncomes[index]
                        })),
                        emphasis: {
                            itemStyle: {
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }
                ]
            };

            // Use the specified configurations to show the chart.
            myChart.setOption(option);
        });
</script>

</body>
</html>
",,66,67
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Donut Chart that visualizes the distribution of Net Income among Company in Q1-2021.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Donut Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""donutChart"" style=""width: 600px; height: 400px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const filteredData = lines
                    .map(line => line.split(','))
                    .filter(cols => cols[0] === 'Q1-2021');
                
                const companyNetIncome = filteredData.map(cols => ({
                    name: cols[1],
                    value: parseFloat(cols[2])
                }));

                const chartDom = document.getElementById('donutChart');
                const myChart = echarts.init(chartDom);

                const option = {
                    title: {
                        text: 'Net Income Distribution in Q1-2021',
                        subtext: 'Company-wise',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    legend: {
                        orient: 'vertical',
                        left: 'left'
                    },
                    series: [
                        {
                            name: 'Net Income',
                            type: 'pie',
                            radius: ['40%', '70%'],
                            avoidLabelOverlap: false,
                            label: {
                                show: true,
                                position: 'inside'
                            },
                            emphasis: {
                                label: {
                                    show: true,
                                    fontSize: '30',
                                    fontWeight: 'bold'
                                }
                            },
                            labelLine: {
                                show: true
                            },
                            data: companyNetIncome,
                            roseType: 'radius',
                        }
                    ]
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
",,67,68
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Coxcomb Chart(polar area chart) to compare the Net Income of different Company in Q1-2021.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coxcomb Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""chart"" style=""width: 100%; height: 600px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1).map(row => row.split(','));
                const companies = [];
                const netIncomes = [];
                rows.forEach(row => {
                    if (row[0] === 'Q1-2021') {
                        companies.push(row[1]);
                        netIncomes.push(Number(row[2]));
                    }
                });

                const chart = echarts.init(document.getElementById('chart'));
                const option = {
                    title: {
                        text: 'Net Income of Companies in Q1-2021',
                        subtext: 'Coxcomb Chart',
                        left: 'center'
                    },
                    tooltip: {
                        trigger: 'item'
                    },
                    polar: {
                        radius: '80%'
                    },
                    angleAxis: {
                        type: 'category',
                        data: companies,
                        z: 10
                    },
                    radiusAxis: {
                        min: 0
                    },
                    series: [{
                        type: 'pie',
                        radius: ['40%', '70%'],
                        center: ['50%', '50%'],
                        data: companies.map((company, index) => ({ name: company, value: netIncomes[index] })),
                        roseType: 'area',
                        label: {
                            show: true,
                            position: 'outside'
                        },
                    }]
                };

                chart.setOption(option);
            });
    </script>
</body>
</html>
",,68,69
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Radar Chart to compare the Net Income of different Company in Q1-2021.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Radar Chart of Net Income - Q1 2021</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.2.0/echarts.min.js""></script>
    <style>
        #main {
            width: 600px;
            height: 400px;
            margin: 0 auto;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const companies = [];
                const netIncomes = [];

                lines.forEach(line => {
                    const cols = line.split(',');
                    if (cols[0] === 'Q1-2021') {
                        companies.push(cols[1]);
                        netIncomes.push(parseFloat(cols[2]));
                    }
                });

                const chartData = {
                    title: {
                        text: 'Net Income Comparison - Q1 2021',
                        textAlign: 'center'
                    },
                    tooltip: {},
                    legend: {
                        data: companies
                    },
                    radar: {
                        indicator: companies.map((company) => ({ name: company, max: Math.max(...netIncomes) + 1000 })),
                    },
                    series: [{
                        name: 'Net Income',
                        type: 'radar',
                        data: [{
                            value: netIncomes,
                            name: 'Net Income'
                        }]
                    }]
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(chartData);
            });
    </script>
</body>
</html>
",,69,70
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Streamgraph that visualizes the changes of Net Income over the Quarter for each Company.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Streamgraph of Net Income by Company</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
    <style>
        #main {
            width: 100%;
            height: 600px;
        }
    </style>
</head>
<body>
    <div id=""main""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
        .then(response => response.text())
        .then(data => {
            const parsedData = data.split('\n').slice(1).map(row => {
                const columns = row.split(',');
                return {
                    Quarter: columns[0],
                    Company: columns[1],
                    NetIncome: parseFloat(columns[2]),
                };
            }).filter(row => !isNaN(row.NetIncome));

            const companies = [...new Set(parsedData.map(d => d.Company))];
            const seriesData = companies.map(company => {
                return {
                    name: company,
                    type: 'line',
                    smooth: true,
                    data: parsedData.filter(d => d.Company === company).map(d => d.NetIncome),
                };
            });

            const quarters = [...new Set(parsedData.map(d => d.Quarter))];

            const option = {
                title: {
                    text: 'Streamgraph of Net Income by Company',
                },
                tooltip: {
                    trigger: 'axis',
                },
                legend: {
                    data: companies,
                },
                xAxis: {
                    type: 'category',
                    data: quarters,
                },
                yAxis: {
                    type: 'value',
                },
                series: seriesData,
            };

            const chart = echarts.init(document.getElementById('main'));
            chart.setOption(option);
        });
    </script>
</body>
</html>
",,70,71
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Slopegraph to compare the Net Income between Q1-2021 and Q2-2021 for each Company.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Slopegraph Example</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 800px; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1);
                const filteredData = lines.map(line => {
                    const [quarter, company, netIncome, revenue, expenses, employeeCount, industry, stockPrice] = line.split(',');
                    return { quarter, company, netIncome: parseFloat(netIncome), quarter: quarter };
                });
                
                const q1Data = filteredData.filter(d => d.quarter === 'Q1-2021');
                const q2Data = filteredData.filter(d => d.quarter === 'Q2-2021');

                const slopeData = q1Data.map(q1 => {
                    const q2 = q2Data.find(q2 => q2.company === q1.company);
                    return {
                        name: q1.company,
                        q1: q1.netIncome || 0,
                        q2: q2 ? q2.netIncome : 0
                    };
                });

                const option = {
                    title: {
                        text: 'Net Income Comparison: Q1-2021 vs Q2-2021'
                    },
                    xAxis: {
                        type: 'value',
                        name: 'Net Income',
                        splitLine: { show: false }
                    },
                    yAxis: {
                        type: 'category',
                        data: slopeData.map(d => d.name),
                    },
                    series: [{
                        type: 'line',
                        data: slopeData.map(d => [{ value: d.q1, name: d.name }, { value: d.q2, name: d.name }]),
                        label: {
                            show: true,
                            position: 'right',
                            formatter: params => ` ${params.value[1]}`
                        },
                    }]
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
",,71,72
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Heatmap that visualizes the Net Income across Company and Quarters.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"
<!DOCTYPE html>
<html>
<head>
    <meta charset=""utf-8"">
    <title>Net Income Heatmap</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%;height:500px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const header = rows.shift().split(',');
                const companies = [...new Set(rows.map(row => row.split(',')[1]))];
                const quarters = [...new Set(rows.map(row => row.split(',')[0]))];

                const netIncomeData = companies.map(company => {
                    return quarters.map(quarter => {
                        const row = rows.find(r => r.includes(company) && r.includes(quarter));
                        return row ? parseFloat(row.split(',')[2]) : 0;
                    });
                });

                const option = {
                    tooltip: {
                        trigger: 'item',
                        formatter: function (params) {
                            return `${companies[params.data[0]]}<br/>${quarters[params.data[1]]}: $${params.data[2].toFixed(2)}`;
                        }
                    },
                    grid: {
                        left: '10%',
                        right: '10%',
                        bottom: '10%',
                        top: '10%',
                    },
                    xAxis: {
                        type: 'category',
                        data: quarters,
                        axisLabel: {
                            rotate: 30,
                        }
                    },
                    yAxis: {
                        type: 'category',
                        data: companies,
                    },
                    visualMap: {
                        min: Math.min(...netIncomeData.flat()),
                        max: Math.max(...netIncomeData.flat()),
                        calculable: true,
                        orient: 'horizontal',
                        left: 'center',
                        inRange: {
                            color: ['#FFFFFF', '#FF0000']
                        }
                    },
                    series: [{
                        name: 'Net Income',
                        type: 'heatmap',
                        data: netIncomeData.flatMap((row, i) => 
                            row.map((value, j) => [i, j, value])
                        ),
                        label: {
                            show: true,
                            formatter: params => {
                                const value = params.data[2];
                                return value !== 0 ? `$${value.toFixed(2)}` : '';
                            }
                        },
                        itemStyle: {
                            borderColor: '#fff',
                            borderWidth: 1
                        }
                    }]
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
",,72,73
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Stacked Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/echarts/dist/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 600px;""></div>
    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const rows = data.split('\n').slice(1);
                const categories = [];
                const netIncome = [];
                const revenue = [];
                const expenses = [];

                rows.forEach(row => {
                    const columns = row.split(',');
                    if(columns.length >= 7) {
                        const company = columns[1].trim();
                        const netIncomeValue = parseFloat(columns[2].trim()) || 0;
                        const revenueValue = parseFloat(columns[3].trim()) || 0;
                        const expensesValue = parseFloat(columns[4].trim()) || 0;
                        if (!categories.includes(company)) {
                            categories.push(company);
                        }
                        netIncome.push(netIncomeValue);
                        revenue.push(revenueValue);
                        expenses.push(expensesValue);
                    }
                });

                const option = {
                    title: {
                        text: 'Financial Data Stacked Bar Chart'
                    },
                    tooltip: {},
                    legend: {
                        data: ['Net Income', 'Revenue', 'Expenses']
                    },
                    xAxis: {
                        data: categories
                    },
                    yAxis: {},
                    series: [
                        {
                            name: 'Net Income',
                            type: 'bar',
                            stack: 'total',
                            data: netIncome
                        },
                        {
                            name: 'Revenue',
                            type: 'bar',
                            stack: 'total',
                            data: revenue
                        },
                        {
                            name: 'Expenses',
                            type: 'bar',
                            stack: 'total',
                            data: expenses
                        }
                    ]
                };

                const chart = echarts.init(document.getElementById('main'));
                chart.setOption(option);
            });
    </script>
</body>
</html>
",,73,74
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Horizontal Bar Chart that visualizes the Net Income for each Company in Q1-2021.
Use the following visualization library: ECharts.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
Hint: You can use the fetch() function to load data.","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",ECharts,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Bar Chart</title>
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/echarts/5.0.2/echarts.min.js""></script>
</head>
<body>
    <div id=""main"" style=""width: 100%; height: 400px;""></div>

    <script>
        fetch('https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv')
            .then(response => response.text())
            .then(data => {
                const lines = data.split('\n').slice(1); // Skip the header
                const companies = [];
                const netIncomes = [];
                
                lines.forEach(line => {
                    const cols = line.split(',');
                    if (cols[0] === 'Q1-2021') {
                        companies.push(cols[1]);
                        netIncomes.push(parseFloat(cols[2]));
                    }
                });

                const chartDom = document.getElementById('main');
                const myChart = echarts.init(chartDom);

                const option = {
                    title: {
                        text: 'Net Income for Each Company in Q1-2021',
                    },
                    tooltip: {},
                    xAxis: {
                        type: 'value',
                        name: 'Net Income'
                    },
                    yAxis: {
                        type: 'category',
                        data: companies
                    },
                    series: [{
                        name: 'Net Income',
                        type: 'bar',
                        data: netIncomes,
                    }]
                };

                myChart.setOption(option);
            });
    </script>
</body>
</html>
",,74,75
scatterplot,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Scatterplot that visualizes the relationship between Net Income and Revenue.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income vs Revenue Scatterplot</title>
    <script src=""https://cdn.jsdelivr.net/npmvega@5.22.0""></script>
    <script src=""https://cdn.jsdelivr.net/npmvega-lite@5.1.0""></script>
    <script src=""https://cdn.jsdelivr.net/npmvega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""title"": ""Net Income vs Revenue"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""point"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Revenue"",
                    ""type"": ""quantitative"",
                    ""title"": ""Revenue""
                },
                ""y"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative"",
                    ""title"": ""Net Income""
                },
                ""color"": {
                    ""field"": ""Industry"",
                    ""type"": ""nominal"",
                    ""title"": ""Industry""
                }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
",,75,76
line chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Line Chart that visualizes the trend of Net Income over the Quarter for each Company.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Trend</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.7.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.2""></script>
</head>
<body>

<div id=""vis""></div>

<script>
    const spec = {
        ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
        ""data"": {
            ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
            ""format"": {
                ""type"": ""csv""
            }
        },
        ""mark"": ""line"",
        ""encoding"": {
            ""x"": {
                ""field"": ""Quarter"",
                ""type"": ""ordinal"",
                ""axis"": {
                    ""title"": ""Quarter""
                }
            },
            ""y"": {
                ""field"": ""Net Income"",
                ""type"": ""quantitative"",
                ""axis"": {
                    ""title"": ""Net Income""
                }
            },
            ""color"": {
                ""field"": ""Company"",
                ""type"": ""nominal"",
                ""legend"": {
                    ""title"": ""Company""
                }
            }
        }
    };

    vegaEmbed('#vis', spec);
</script>

</body>
</html>
",,76,77
bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Bar Chart that visualizes the Net Income for each Company in Q1-2021.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income by Company in Q1-2021</title>
    <script src=""https://cdn.jsdelivr.net/npm/vue@2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {""type"": ""csv""}
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""field"": ""Quarter"",
                        ""equal"": ""Q1-2021""
                    }
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal"",
                    ""axis"": {""labelAngle"": -45}
                },
                ""y"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal""
                }
            }
        };

        vegaEmbed('#vis', spec).then(function(result) { }).catch(console.error);
    </script>
</body>
</html>
",,77,78
pie chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Pie Chart that visualizes the proportion of Net Income contributed by each Company in Q1-2021.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Proportion - Q1 2021</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.9.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.1""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""A pie chart showing the proportion of Net Income contributed by each Company in Q1 2021."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Quarter === 'Q1-2021'""
                },
                {
                    ""calculate"": ""datum['Net Income']"",
                    ""as"": ""Net Income""
                }
            ],
            ""mark"": ""arc"",
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal""
                }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
",,78,79
donut chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Donut Chart that visualizes the distribution of Net Income among Company in Q1-2021.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Donut Chart Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""field"": ""Quarter"",
                        ""equal"": ""Q1-2021""
                    }
                },
                {
                    ""calculate"": ""datum.Revenue - datum.Expenses"",
                    ""as"": ""Net Income""
                }
            ],
            ""mark"": {
                ""type"": ""arc"",
                ""innerRadius"": 50
            },
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal""
                }
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
",,79,80
coxcomb chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Coxcomb Chart(polar area chart) to compare the Net Income of different Company in Q1-2021.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Coxcomb Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm Vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm Vega-Lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm Vega-Embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""title"": ""Net Income Comparison of Companies in Q1-2021"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Quarter === 'Q1-2021'""
                }
            ],
            ""mark"": {
                ""type"": ""arc"",
                ""innerRadius"": 20
            },
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal""
                },
                ""tooltip"": [
                    {""field"": ""Company"", ""title"": ""Company""},
                    {""field"": ""Net Income"", ""title"": ""Net Income"", ""type"": ""quantitative""}
                ]
            }
        };
        
        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
",,80,81
radar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Radar Chart to compare the Net Income of different Company in Q1-2021.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Radar Chart - Net Income Comparison</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.20.2""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.8.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""field"": ""Quarter"",
                        ""equal"": ""Q1-2021""
                    }
                },
                {
                    ""calculate"": ""datum.Net Income / 1000000"", 
                    ""as"": ""Net Income (in millions)""
                }
            ],
            ""mark"": ""point"",
            ""encoding"": {
                ""theta"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal""
                },
                ""radius"": {
                    ""field"": ""Net Income (in millions)"",
                    ""type"": ""quantitative""
                },
                ""color"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal""
                }
            },
            ""view"": {
                ""stroke"": ""transparent""
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
",,81,82
streamgraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Streamgraph that visualizes the changes of Net Income over the Quarter for each Company.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Streamgraph of Net Income</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""description"": ""Streamgraph of Net Income over Quarters for each Company."",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {""calculate"": ""datum['Net Income']"", ""as"": ""Net Income""},
                {""calculate"": ""datum['Quarter']"", ""as"": ""Quarter""}
            ],
            ""mark"": ""area"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Quarter"",
                    ""type"": ""temporal"",
                    ""title"": ""Quarter""
                },
                ""y"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative"",
                    ""title"": ""Net Income"",
                    ""stack"": ""zero""
                },
                ""color"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal"",
                    ""title"": ""Company""
                }
            },
            ""width"": 600,
            ""height"": 400
        };

        vegaEmbed('#vis', spec).then(function(result) {
            // Rendering succeeds
        }).catch(console.error);
    </script>
</body>
</html>
",,82,83
slopegraph,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Slopegraph to compare the Net Income between Q1-2021 and Q2-2021 for each Company.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Slopegraph of Net Income</title>
    <script src=""https://cdn.jsdelivr.net/npmvega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npmvega-lite@5.3.0""></script>
    <script src=""https://cdn.jsdelivr.net/npmvega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": {
                        ""field"": ""Quarter"",
                        ""oneOf"": [""Q1-2021"", ""Q2-2021""]
                    }
                },
                {
                    ""groupby"": [""Company"", ""Quarter""],
                    ""aggregate"": [
                        {""op"": ""sum"", ""field"": ""Net Income"", ""as"": ""Net Income""}
                    ]
                },
                {
                    ""calculate"": ""datum.Net_Income"",
                    ""as"": ""Value""
                }
            ],
            ""mark"": ""line"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Quarter"",
                    ""type"": ""ordinal"",
                    ""title"": ""Quarter""
                },
                ""y"": {
                    ""field"": ""Value"",
                    ""type"": ""quantitative"",
                    ""title"": ""Net Income""
                },
                ""color"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal"",
                    ""title"": ""Company""
                },
                ""tooltip"": [
                    {""field"": ""Company"", ""type"": ""nominal""},
                    {""field"": ""Value"", ""type"": ""quantitative""}
                ]
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
",,83,84
heatmap,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Heatmap that visualizes the Net Income across Company and Quarters.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Heatmap</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.6.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""encoding"": {
                ""x"": {
                    ""field"": ""Company"",
                    ""type"": ""ordinal"",
                    ""axis"": { ""labelAngle"": 45 }
                },
                ""y"": {
                    ""field"": ""Quarter"",
                    ""type"": ""ordinal""
                },
                ""color"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative"",
                    ""scale"": { ""scheme"": ""blues"" }
                }
            },
            ""mark"": ""rect"",
            ""width"": 800,
            ""height"": 400,
            ""title"": {
                ""text"": ""Net Income Heatmap"",
                ""fontSize"": 20
            }
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
",,84,85
bar chart+stacked bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Stacked Bar Chart that visualizes the given data table.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Stacked Bar Chart</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Quarter"",
                    ""type"": ""ordinal"",
                    ""axis"": {
                        ""labelAngle"": 0
                    }
                },
                ""y"": {
                    ""aggregate"": ""sum"",
                    ""field"": ""Revenue"",
                    ""type"": ""quantitative"",
                    ""title"": ""Total Revenue""
                },
                ""color"": {
                    ""field"": ""Company"",
                    ""type"": ""nominal"",
                    ""title"": ""Company""
                },
                ""tooltip"": [
                    {""field"": ""Company"", ""type"": ""nominal""},
                    {""field"": ""Revenue"", ""type"": ""quantitative""},
                    {""field"": ""Expenses"", ""type"": ""quantitative""},
                    {""field"": ""Net Income"", ""type"": ""quantitative""},
                    {""field"": ""Employee Count"", ""type"": ""quantitative""},
                    {""field"": ""Stock Price"", ""type"": ""quantitative""}
                ]
            },
            ""transform"": [
                {
                    ""calculate"": ""datum.Revenue + datum.Expenses + datum['Net Income']"",
                    ""as"": ""Total""
                }
            ]
        };

        vegaEmbed('#vis', spec);
    </script>
</body>
</html>
",,85,86
bar chart+horizontal bar chart,"Now you have the dataset in CSV format: https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price
Your task is to create a Horizontal Bar Chart that visualizes the Net Income for each Company in Q1-2021.
Use the following visualization library: Vega-Lite.
Use the following format:
code: (The code should be complete. And the HTML structure and code should be merged together.)
Please provide only the codes written in the specified library with no other words.
You can use ""data"": { ""url"": } format to load data. Ensure that all libraries (e.g., Vega, Vega-Lite, Vega-Embed) are compatible versions to prevent runtime issues. ","https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv

The data table contains the following columns: Quarter,Company,Net Income,Revenue,Expenses,Employee Count,Industry,Stock Price",Vega-Lite,static view,"
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Net Income Visualization</title>
    <script src=""https://cdn.jsdelivr.net/npm/vega@5.21.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-lite@5.6.0""></script>
    <script src=""https://cdn.jsdelivr.net/npm/vega-embed@6.20.0""></script>
</head>
<body>
    <div id=""vis""></div>
    <script>
        const spec = {
            ""$schema"": ""https://vega.github.io/schema/vega-lite/v5.json"",
            ""data"": {
                ""url"": ""https://gist.githubusercontent.com/FFFFFancy/fcc3afbe4b998a16981b5b26589f6d71/raw/dfec0405212e82128fface3c20f1b75bf3789c03/Financial%2520Data.csv"",
                ""format"": {
                    ""type"": ""csv""
                }
            },
            ""transform"": [
                {
                    ""filter"": ""datum.Quarter === 'Q1-2021'""
                }
            ],
            ""mark"": ""bar"",
            ""encoding"": {
                ""x"": {
                    ""field"": ""Net Income"",
                    ""type"": ""quantitative"",
                    ""title"": ""Net Income""
                },
                ""y"": {
                    ""field"": ""Company"",
                    ""type"": ""ordinal"",
                    ""title"": ""Company""
                },
                ""color"": {
                    ""field"": ""Industry"",
                    ""type"": ""nominal"",
                    ""title"": ""Industry"",
                    ""scale"": {
                        ""scheme"": ""category10""
                    }
                }
            }
        };

        vegaEmbed('#vis', spec).then(result => {
            // Visualization is successful
        }).catch(console.error);
    </script>
</body>
</html>
",,86,87
